// Generated by kaoscript 0.10.0
const {Dictionary, Helper: KSHelper, Operator: KSOperator, Type: KSType} = require("@kaoscript/runtime");
module.exports = function() {
	var metadata = require("../package.json");
	var fs = require("../src/fs.js");
	var path = require("path");
	const AssignmentOperatorKind = KSHelper.enum(Number, {
		Addition: 1,
		BitwiseAnd: 2,
		BitwiseLeftShift: 3,
		BitwiseOr: 4,
		BitwiseRightShift: 5,
		BitwiseXor: 6,
		Division: 7,
		Equality: 8,
		Existential: 9,
		Modulo: 10,
		Multiplication: 11,
		NonExistential: 12,
		NullCoalescing: 13,
		Quotient: 14,
		Subtraction: 15
	});
	const BinaryOperatorKind = KSHelper.enum(Number, {
		Addition: 1,
		And: 2,
		Assignment: 3,
		BitwiseAnd: 4,
		BitwiseLeftShift: 5,
		BitwiseOr: 6,
		BitwiseRightShift: 7,
		BitwiseXor: 8,
		Division: 9,
		Equality: 10,
		GreaterThan: 11,
		GreaterThanOrEqual: 12,
		Imply: 13,
		Inequality: 14,
		LessThan: 15,
		LessThanOrEqual: 16,
		Match: 17,
		Mismatch: 18,
		Modulo: 19,
		Multiplication: 20,
		NullCoalescing: 21,
		Or: 22,
		Quotient: 23,
		Subtraction: 24,
		TypeCasting: 25,
		TypeEquality: 26,
		TypeInequality: 27,
		Xor: 28
	});
	const MacroElementKind = KSHelper.enum(Number, {
		Expression: 1,
		Literal: 2,
		NewLine: 3
	});
	const ModifierKind = KSHelper.enum(Number, {
		Abstract: 1,
		Async: 2,
		AutoEvaluate: 3,
		Autofill: 4,
		Computed: 5,
		Declarative: 6,
		Descending: 7,
		Disabled: 8,
		Dynamic: 9,
		Flagged: 10,
		Forced: 11,
		Immutable: 12,
		Internal: 13,
		LateInit: 14,
		LazyInit: 15,
		Mutable: 16,
		Named: 17,
		Nullable: 18,
		Override: 19,
		Overwrite: 20,
		Private: 21,
		Protected: 22,
		Public: 23,
		Required: 24,
		Rest: 25,
		Sealed: 26,
		SetterAlias: 27,
		Static: 28,
		Systemic: 29,
		ThisAlias: 30
	});
	const NodeKind = KSHelper.enum(Number, {
		AccessorDeclaration: 1,
		ArrayBinding: 2,
		ArrayComprehension: 3,
		ArrayExpression: 4,
		ArrayRange: 5,
		AttributeDeclaration: 6,
		AttributeExpression: 7,
		AttributeOperation: 8,
		AwaitExpression: 9,
		BinaryExpression: 10,
		BindingElement: 11,
		Block: 12,
		BreakStatement: 13,
		CallExpression: 14,
		CallMacroExpression: 15,
		CatchClause: 16,
		ClassDeclaration: 17,
		ClassName: 18,
		CommentBlock: 19,
		CommentLine: 20,
		ComparisonExpression: 21,
		ComputedPropertyName: 22,
		ConditionalExpression: 23,
		ContinueStatement: 24,
		CreateExpression: 25,
		CurryExpression: 26,
		DestroyStatement: 27,
		DiscloseDeclaration: 28,
		DoUntilStatement: 29,
		DoWhileStatement: 30,
		EnumDeclaration: 31,
		EnumExpression: 32,
		ExclusionType: 33,
		ExportDeclaration: 34,
		ExportDeclarationSpecifier: 35,
		ExportExclusionSpecifier: 36,
		ExportNamedSpecifier: 37,
		ExportPropertiesSpecifier: 38,
		ExportWildcardSpecifier: 39,
		ExternDeclaration: 40,
		ExternOrImportDeclaration: 41,
		ExternOrRequireDeclaration: 42,
		FallthroughStatement: 43,
		FieldDeclaration: 44,
		ForFromStatement: 45,
		ForInStatement: 46,
		ForOfStatement: 47,
		ForRangeStatement: 48,
		FunctionDeclaration: 49,
		FunctionExpression: 50,
		FusionType: 51,
		Identifier: 52,
		IfExpression: 53,
		IfStatement: 54,
		ImplementDeclaration: 55,
		ImportArgument: 56,
		ImportDeclaration: 57,
		ImportDeclarator: 58,
		ImportExclusionSpecifier: 59,
		ImportNamespaceSpecifier: 60,
		ImportReference: 61,
		ImportSpecifier: 62,
		IncludeAgainDeclaration: 63,
		IncludeDeclaration: 64,
		IncludeDeclarator: 65,
		JunctionExpression: 66,
		LambdaExpression: 67,
		Literal: 68,
		MacroDeclaration: 69,
		MacroExpression: 70,
		MemberExpression: 71,
		MethodDeclaration: 72,
		MixinDeclaration: 73,
		Module: 74,
		MutatorDeclaration: 75,
		NamedArgument: 76,
		NamespaceDeclaration: 77,
		NumericExpression: 78,
		ObjectBinding: 79,
		ObjectExpression: 80,
		ObjectMember: 81,
		OmittedExpression: 82,
		Parameter: 83,
		PolyadicExpression: 84,
		PropertyDeclaration: 85,
		RegularExpression: 86,
		RequireDeclaration: 87,
		RequireOrExternDeclaration: 88,
		RequireOrImportDeclaration: 89,
		ReturnStatement: 90,
		ReturnTypeReference: 91,
		SequenceExpression: 92,
		ShorthandProperty: 93,
		StructDeclaration: 94,
		StructField: 95,
		SurrogateDeclaration: 96,
		SwitchClause: 97,
		SwitchConditionArray: 98,
		SwitchConditionEnum: 99,
		SwitchConditionObject: 100,
		SwitchConditionRange: 101,
		SwitchConditionType: 102,
		SwitchExpression: 103,
		SwitchStatement: 104,
		SwitchTypeCasting: 105,
		TaggedTemplateExpression: 106,
		TemplateExpression: 107,
		ThisExpression: 108,
		ThrowStatement: 109,
		TraitDeclaration: 110,
		TryExpression: 111,
		TryStatement: 112,
		TupleDeclaration: 113,
		TupleField: 114,
		TypeAliasDeclaration: 115,
		TypeReference: 116,
		UnaryExpression: 117,
		UnlessExpression: 118,
		UnlessStatement: 119,
		UntilStatement: 120,
		UnionType: 121,
		VariableDeclaration: 122,
		VariableDeclarator: 123,
		WhileStatement: 124
	});
	const ReificationKind = KSHelper.enum(Number, {
		Argument: 1,
		Expression: 2,
		Join: 3,
		Statement: 4,
		Write: 5
	});
	const ScopeKind = KSHelper.enum(Number, {
		Argument: 1,
		Null: 2,
		This: 3
	});
	const UnaryOperatorKind = KSHelper.enum(Number, {
		BitwiseNot: 1,
		DecrementPostfix: 2,
		DecrementPrefix: 3,
		Existential: 4,
		ForcedTypeCasting: 5,
		IncrementPostfix: 6,
		IncrementPrefix: 7,
		Negation: 8,
		Negative: 9,
		NullableTypeCasting: 10,
		Spread: 11
	});
	let Parser = KSHelper.namespace(function() {
		var __ks_Array = {};
		var __ks_Math = {};
		var __ks_RegExp = {};
		var __ks_String = {};
		var __ks_SyntaxError = {};
		const Event = KSHelper.struct(function(ok, value = null, start = null, end = null) {
			const _ = new Dictionary();
			_.ok = ok;
			_.value = value;
			_.start = start;
			_.end = end;
			return _;
		}, function(__ks_new, args) {
			const t0 = KSType.isBoolean;
			const t1 = () => true;
			const t2 = value => KSType.isStructInstance(value, Position) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 4) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t2, pts, 1) && KSHelper.isVarargs(args, 0, 1, t2, pts, 2) && te(pts, 3)) {
					return __ks_new(args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
				}
			}
			throw KSHelper.badArgs();
		});
		const Marker = KSHelper.struct(function(eof, index, line, column) {
			const _ = new Dictionary();
			_.eof = eof;
			_.index = index;
			_.line = line;
			_.column = column;
			return _;
		}, function(__ks_new, args) {
			const t0 = KSType.isBoolean;
			const t1 = KSType.isNumber;
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t1(args[2]) && t1(args[3])) {
					return __ks_new(args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		});
		const Position = KSHelper.struct(function(line, column) {
			const _ = new Dictionary();
			_.line = line;
			_.column = column;
			return _;
		}, function(__ks_new, args) {
			const t0 = KSType.isNumber;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return __ks_new(args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		});
		const Range = KSHelper.struct(function(start, end) {
			const _ = new Dictionary();
			_.start = start;
			_.end = end;
			return _;
		}, function(__ks_new, args) {
			const t0 = value => KSType.isStructInstance(value, Position);
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return __ks_new(args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		});
		let AST = KSHelper.namespace(function() {
			const $comparison = (() => {
				const d = new Dictionary();
				d[BinaryOperatorKind.Addition] = false;
				d[BinaryOperatorKind.And] = false;
				d[BinaryOperatorKind.Assignment] = false;
				d[BinaryOperatorKind.BitwiseAnd] = false;
				d[BinaryOperatorKind.BitwiseLeftShift] = false;
				d[BinaryOperatorKind.BitwiseOr] = false;
				d[BinaryOperatorKind.BitwiseRightShift] = false;
				d[BinaryOperatorKind.BitwiseXor] = false;
				d[BinaryOperatorKind.Division] = false;
				d[BinaryOperatorKind.Equality] = true;
				d[BinaryOperatorKind.GreaterThan] = true;
				d[BinaryOperatorKind.GreaterThanOrEqual] = true;
				d[BinaryOperatorKind.Imply] = false;
				d[BinaryOperatorKind.Inequality] = true;
				d[BinaryOperatorKind.LessThan] = true;
				d[BinaryOperatorKind.LessThanOrEqual] = true;
				d[BinaryOperatorKind.Match] = false;
				d[BinaryOperatorKind.Mismatch] = false;
				d[BinaryOperatorKind.Modulo] = false;
				d[BinaryOperatorKind.Multiplication] = false;
				d[BinaryOperatorKind.NullCoalescing] = false;
				d[BinaryOperatorKind.Or] = false;
				d[BinaryOperatorKind.Quotient] = false;
				d[BinaryOperatorKind.Subtraction] = false;
				d[BinaryOperatorKind.TypeCasting] = false;
				d[BinaryOperatorKind.TypeEquality] = false;
				d[BinaryOperatorKind.TypeInequality] = false;
				d[BinaryOperatorKind.Xor] = false;
				return d;
			})();
			const $polyadic = (() => {
				const d = new Dictionary();
				d[BinaryOperatorKind.Addition] = true;
				d[BinaryOperatorKind.And] = true;
				d[BinaryOperatorKind.Assignment] = false;
				d[BinaryOperatorKind.BitwiseAnd] = true;
				d[BinaryOperatorKind.BitwiseLeftShift] = true;
				d[BinaryOperatorKind.BitwiseOr] = true;
				d[BinaryOperatorKind.BitwiseRightShift] = true;
				d[BinaryOperatorKind.BitwiseXor] = true;
				d[BinaryOperatorKind.Division] = true;
				d[BinaryOperatorKind.Imply] = true;
				d[BinaryOperatorKind.Modulo] = true;
				d[BinaryOperatorKind.Multiplication] = true;
				d[BinaryOperatorKind.NullCoalescing] = true;
				d[BinaryOperatorKind.Or] = true;
				d[BinaryOperatorKind.Quotient] = true;
				d[BinaryOperatorKind.Subtraction] = true;
				d[BinaryOperatorKind.TypeCasting] = false;
				d[BinaryOperatorKind.TypeEquality] = false;
				d[BinaryOperatorKind.TypeInequality] = false;
				d[BinaryOperatorKind.Xor] = true;
				return d;
			})();
			const $precedence = (() => {
				const d = new Dictionary();
				d[BinaryOperatorKind.Addition] = 13;
				d[BinaryOperatorKind.And] = 6;
				d[BinaryOperatorKind.Assignment] = 3;
				d[BinaryOperatorKind.BitwiseAnd] = 11;
				d[BinaryOperatorKind.BitwiseLeftShift] = 12;
				d[BinaryOperatorKind.BitwiseOr] = 9;
				d[BinaryOperatorKind.BitwiseRightShift] = 12;
				d[BinaryOperatorKind.BitwiseXor] = 10;
				d[BinaryOperatorKind.Division] = 14;
				d[BinaryOperatorKind.Equality] = 8;
				d[BinaryOperatorKind.GreaterThan] = 8;
				d[BinaryOperatorKind.GreaterThanOrEqual] = 8;
				d[BinaryOperatorKind.Imply] = 5;
				d[BinaryOperatorKind.Inequality] = 8;
				d[BinaryOperatorKind.LessThan] = 8;
				d[BinaryOperatorKind.LessThanOrEqual] = 8;
				d[BinaryOperatorKind.Match] = 8;
				d[BinaryOperatorKind.Mismatch] = 8;
				d[BinaryOperatorKind.Modulo] = 14;
				d[BinaryOperatorKind.Multiplication] = 14;
				d[BinaryOperatorKind.NullCoalescing] = 15;
				d[BinaryOperatorKind.Or] = 5;
				d[BinaryOperatorKind.Quotient] = 14;
				d[BinaryOperatorKind.Subtraction] = 13;
				d[BinaryOperatorKind.TypeCasting] = 8;
				d[BinaryOperatorKind.TypeEquality] = 8;
				d[BinaryOperatorKind.TypeInequality] = 8;
				d[BinaryOperatorKind.Xor] = 5;
				return d;
			})();
			const CONDITIONAL_PRECEDENCE = 4;
			function location() {
				return location.__ks_rt(this, arguments);
			};
			location.__ks_0 = function(descriptor, firstToken, lastToken = null) {
				if(lastToken === null) {
					if(!KSType.isValue(descriptor.start)) {
						descriptor.start = firstToken.start;
					}
					descriptor.end = firstToken.end;
				}
				else {
					descriptor.start = firstToken.start;
					descriptor.end = lastToken.end;
				}
				return descriptor;
			};
			location.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length >= 2 && args.length <= 3) {
					if(t0(args[0]) && t0(args[1])) {
						return location.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function reorderExpression() {
				return reorderExpression.__ks_rt(this, arguments);
			};
			reorderExpression.__ks_0 = function(operations) {
				const precedences = new Dictionary();
				let precedenceList = [];
				for(let i = 1, __ks_0 = operations.length; i < __ks_0; i += 2) {
					if(KSHelper.valueOf(operations[i].kind) === NodeKind.ConditionalExpression.value) {
						if(KSType.isValue(precedences[CONDITIONAL_PRECEDENCE])) {
							++precedences[CONDITIONAL_PRECEDENCE];
						}
						else {
							precedences[CONDITIONAL_PRECEDENCE] = 1;
						}
						precedenceList.push(CONDITIONAL_PRECEDENCE);
						i++;
					}
					else {
						const precedence = $precedence[operations[i].operator.kind];
						if(KSType.isValue(precedences[precedence])) {
							++precedences[precedence];
						}
						else {
							precedences[precedence] = 1;
						}
						precedenceList.push(precedence);
					}
				}
				precedenceList = precedenceList.sort((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(null, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = function(a, b) {
						return KSOperator.subtraction(b, a);
					};
					return __ks_rt;
				})());
				let count = null, k = null, operator = null, left = null;
				for(let __ks_0 = 0, __ks_1 = precedenceList.length, precedence; __ks_0 < __ks_1; ++__ks_0) {
					precedence = precedenceList[__ks_0];
					count = precedences[precedence];
					let __ks_2;
					for(k = 1, __ks_2 = operations.length; k < __ks_2 && KSOperator.gt(count, 0); k += 2) {
						if(KSHelper.valueOf(operations[k].kind) === NodeKind.ConditionalExpression.value) {
							if(precedence === CONDITIONAL_PRECEDENCE) {
								--count;
								operator = operations[k];
								operator.condition = operations[k - 1];
								operator.whenTrue = operations[k + 1];
								operator.whenFalse = operations[k + 2];
								operator.start = operator.condition.start;
								operator.end = operator.whenFalse.end;
								operations.splice(k - 1, 4, operator);
								k -= 3;
							}
							else {
								k++;
							}
						}
						else if($precedence[operations[k].operator.kind] === precedence) {
							--count;
							operator = operations[k];
							if(KSHelper.valueOf(operator.kind) === NodeKind.BinaryExpression.value) {
								left = operations[k - 1];
								if((KSHelper.valueOf(left.kind) === NodeKind.BinaryExpression.value) && (operator.operator.kind === left.operator.kind) && ($polyadic[operator.operator.kind] === true)) {
									operator.kind = NodeKind.PolyadicExpression;
									operator.start = left.start;
									operator.end = operations[k + 1].end;
									operator.operands = [left.left, left.right, operations[k + 1]];
								}
								else if((KSHelper.valueOf(left.kind) === NodeKind.PolyadicExpression.value) && (operator.operator.kind === left.operator.kind)) {
									left.operands.push(operations[k + 1]);
									left.end = operations[k + 1].end;
									operator = left;
								}
								else if($comparison[operator.operator.kind] === true) {
									if(KSHelper.valueOf(left.kind) === NodeKind.ComparisonExpression.value) {
										left.values.push(operator.operator, operations[k + 1]);
										left.end = operations[k + 1].end;
										operator = left;
									}
									else {
										operator = ComparisonExpression.__ks_0([left, operator.operator, operations[k + 1]]);
									}
								}
								else if((KSHelper.valueOf(left.kind) === NodeKind.BinaryExpression.value) && (KSHelper.valueOf(operator.operator.kind) === BinaryOperatorKind.Assignment.value) && (KSHelper.valueOf(left.operator.kind) === BinaryOperatorKind.Assignment.value) && (operator.operator.assignment === left.operator.assignment)) {
									operator.left = left.right;
									operator.right = operations[k + 1];
									operator.start = operator.left.start;
									operator.end = operator.right.end;
									left.right = operator;
									left.end = left.right.end;
									operator = left;
								}
								else {
									operator.left = left;
									operator.right = operations[k + 1];
									operator.start = operator.left.start;
									operator.end = operator.right.end;
								}
							}
							else {
								operator.left = operations[k - 1];
								operator.right = operations[k + 1];
								operator.start = operator.left.start;
								operator.end = operator.right.end;
							}
							operations.splice(k - 1, 3, operator);
							k -= 2;
						}
					}
				}
				return operations[0];
			};
			reorderExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return reorderExpression.__ks_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			function AccessorDeclaration() {
				return AccessorDeclaration.__ks_rt(this, arguments);
			};
			AccessorDeclaration.__ks_0 = function(first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.AccessorDeclaration;
					return d;
				})(), first);
			};
			AccessorDeclaration.__ks_1 = function(body, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.AccessorDeclaration;
					d.body = body.value;
					return d;
				})(), first, last);
			};
			AccessorDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return AccessorDeclaration.__ks_0.call(that, args[0]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return AccessorDeclaration.__ks_1.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ArrayBinding() {
				return ArrayBinding.__ks_rt(this, arguments);
			};
			ArrayBinding.__ks_0 = function(elements, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ArrayBinding;
					d.elements = KSHelper.mapArray(elements, function(element) {
						return element.value;
					});
					return d;
				})(), first, last);
			};
			ArrayBinding.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return ArrayBinding.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ArrayBindingElement() {
				return ArrayBindingElement.__ks_rt(this, arguments);
			};
			ArrayBindingElement.__ks_0 = function(modifiers, name, type, defaultValue, first, last) {
				if(name === void 0) {
					name = null;
				}
				if(type === void 0) {
					type = null;
				}
				if(defaultValue === void 0) {
					defaultValue = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.BindingElement;
					d.modifiers = modifiers;
					return d;
				})(), first, last);
				if(KSType.isValue(name)) {
					node.name = name.value;
				}
				if(KSType.isValue(type)) {
					node.type = type.value;
				}
				if(KSType.isValue(defaultValue)) {
					node.defaultValue = defaultValue.value;
				}
				return node;
			};
			ArrayBindingElement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 6) {
					if(t0(args[0]) && t0(args[4]) && t0(args[5])) {
						return ArrayBindingElement.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ArrayComprehension() {
				return ArrayComprehension.__ks_rt(this, arguments);
			};
			ArrayComprehension.__ks_0 = function(expression, loop, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ArrayComprehension;
					d.body = expression.value;
					d.loop = loop.value;
					return d;
				})(), first, last);
			};
			ArrayComprehension.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return ArrayComprehension.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ArrayExpression() {
				return ArrayExpression.__ks_rt(this, arguments);
			};
			ArrayExpression.__ks_0 = function(values, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ArrayExpression;
					d.values = KSHelper.mapArray(values, function(value) {
						return value.value;
					});
					return d;
				})(), first, last);
			};
			ArrayExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return ArrayExpression.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ArrayRangeFI() {
				return ArrayRangeFI.__ks_rt(this, arguments);
			};
			ArrayRangeFI.__ks_0 = function(from, til, by, first, last) {
				if(by === void 0) {
					by = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ArrayRange;
					d.from = from.value;
					d.til = til.value;
					return d;
				})(), first, last);
				if(KSType.isValue(by)) {
					node.by = by.value;
				}
				return node;
			};
			ArrayRangeFI.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t0(args[3]) && t0(args[4])) {
						return ArrayRangeFI.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ArrayRangeFO() {
				return ArrayRangeFO.__ks_rt(this, arguments);
			};
			ArrayRangeFO.__ks_0 = function(from, to, by, first, last) {
				if(by === void 0) {
					by = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ArrayRange;
					d.from = from.value;
					d.to = to.value;
					return d;
				})(), first, last);
				if(KSType.isValue(by)) {
					node.by = by.value;
				}
				return node;
			};
			ArrayRangeFO.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t0(args[3]) && t0(args[4])) {
						return ArrayRangeFO.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ArrayRangeTI() {
				return ArrayRangeTI.__ks_rt(this, arguments);
			};
			ArrayRangeTI.__ks_0 = function(then, til, by, first, last) {
				if(by === void 0) {
					by = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ArrayRange;
					d.then = then.value;
					d.til = til.value;
					return d;
				})(), first, last);
				if(KSType.isValue(by)) {
					node.by = by.value;
				}
				return node;
			};
			ArrayRangeTI.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t0(args[3]) && t0(args[4])) {
						return ArrayRangeTI.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ArrayRangeTO() {
				return ArrayRangeTO.__ks_rt(this, arguments);
			};
			ArrayRangeTO.__ks_0 = function(then, to, by, first, last) {
				if(by === void 0) {
					by = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ArrayRange;
					d.then = then.value;
					d.to = to.value;
					return d;
				})(), first, last);
				if(KSType.isValue(by)) {
					node.by = by.value;
				}
				return node;
			};
			ArrayRangeTO.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t0(args[3]) && t0(args[4])) {
						return ArrayRangeTO.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ArrayReference() {
				return ArrayReference.__ks_rt(this, arguments);
			};
			ArrayReference.__ks_0 = function(elements, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.TypeReference;
					d.modifiers = [];
					d.typeName = (() => {
						const d = new Dictionary();
						d.kind = NodeKind.Identifier;
						d.name = "array";
						return d;
					})();
					d.elements = KSHelper.mapArray(elements, function(element) {
						return element.value;
					});
					return d;
				})(), first, last);
			};
			ArrayReference.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return ArrayReference.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function AssignmentOperator() {
				return AssignmentOperator.__ks_rt(this, arguments);
			};
			AssignmentOperator.__ks_0 = function(operator, first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = BinaryOperatorKind.Assignment;
					d.assignment = operator;
					return d;
				})(), first);
			};
			AssignmentOperator.__ks_rt = function(that, args) {
				const t0 = value => KSType.isEnumInstance(value, AssignmentOperatorKind);
				const t1 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return AssignmentOperator.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function AttributeDeclaration() {
				return AttributeDeclaration.__ks_rt(this, arguments);
			};
			AttributeDeclaration.__ks_0 = function(declaration, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.AttributeDeclaration;
					d.declaration = declaration.value;
					return d;
				})(), first, last);
			};
			AttributeDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return AttributeDeclaration.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function AttributeExpression() {
				return AttributeExpression.__ks_rt(this, arguments);
			};
			AttributeExpression.__ks_0 = function(name, __ks_arguments_1, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.AttributeExpression;
					d.name = name.value;
					d.arguments = KSHelper.mapArray(__ks_arguments_1, function(argument) {
						return argument.value;
					});
					return d;
				})(), first, last);
			};
			AttributeExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return AttributeExpression.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function AttributeOperation() {
				return AttributeOperation.__ks_rt(this, arguments);
			};
			AttributeOperation.__ks_0 = function(name, value, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.AttributeOperation;
					d.name = name.value;
					d.value = value.value;
					return d;
				})(), first, last);
			};
			AttributeOperation.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return AttributeOperation.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function AwaitExpression() {
				return AwaitExpression.__ks_rt(this, arguments);
			};
			AwaitExpression.__ks_0 = function(modifiers, variables, operand, first, last) {
				if(variables === void 0) {
					variables = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.AwaitExpression;
					d.modifiers = modifiers;
					d.operation = operand.value;
					return d;
				})(), first, last);
				if(variables !== null) {
					node.variables = KSHelper.mapArray(variables, function(variable) {
						return variable.value;
					});
				}
				return node;
			};
			AwaitExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[2]) && t0(args[3]) && t0(args[4])) {
						return AwaitExpression.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function BinaryExpression() {
				return BinaryExpression.__ks_rt(this, arguments);
			};
			BinaryExpression.__ks_0 = function(operator) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.BinaryExpression;
					d.operator = operator.value;
					return d;
				})(), operator);
			};
			BinaryExpression.__ks_1 = function(left, operator, right, first, last) {
				if(first === void 0 || first === null) {
					first = left;
				}
				if(last === void 0 || last === null) {
					last = right;
				}
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.BinaryExpression;
					d.operator = operator.value;
					d.left = left.value;
					d.right = right.value;
					return d;
				})(), first, last);
			};
			BinaryExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				const t1 = () => true;
				const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
				let pts;
				if(args.length === 1) {
					if(t0(args[0])) {
						return BinaryExpression.__ks_0.call(that, args[0]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length >= 3 && args.length <= 5) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						if(KSHelper.isVarargs(args, 0, 1, t1, pts = [3], 0) && KSHelper.isVarargs(args, 0, 1, t1, pts, 1) && te(pts, 2)) {
							return BinaryExpression.__ks_1.call(that, args[0], args[1], args[2], KSHelper.getVararg(args, 3, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
						}
						throw KSHelper.badArgs();
					}
				}
				throw KSHelper.badArgs();
			};
			function BinaryOperator() {
				return BinaryOperator.__ks_rt(this, arguments);
			};
			BinaryOperator.__ks_0 = function(operator, first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = operator;
					d.modifiers = [];
					return d;
				})(), first);
			};
			BinaryOperator.__ks_1 = function(modifiers, operator, first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = operator;
					d.modifiers = modifiers;
					return d;
				})(), first);
			};
			BinaryOperator.__ks_rt = function(that, args) {
				const t0 = value => KSType.isEnumInstance(value, BinaryOperatorKind);
				const t1 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return BinaryOperator.__ks_0.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 3) {
					if(t1(args[0]) && t0(args[1]) && t1(args[2])) {
						return BinaryOperator.__ks_1.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function Block() {
				return Block.__ks_rt(this, arguments);
			};
			Block.__ks_0 = function(attributes, statements, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.Block;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.statements = KSHelper.mapArray(statements, function(statement) {
						return statement.value;
					});
					return d;
				})(), first, last);
			};
			Block.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return Block.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function BreakStatement() {
				return BreakStatement.__ks_rt(this, arguments);
			};
			BreakStatement.__ks_0 = function(first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.BreakStatement;
					d.attributes = [];
					return d;
				})(), first);
			};
			BreakStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return BreakStatement.__ks_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			function CallExpression() {
				return CallExpression.__ks_rt(this, arguments);
			};
			CallExpression.__ks_0 = function(modifiers, scope, callee, __ks_arguments_1, first, last) {
				if(scope === void 0 || scope === null) {
					scope = (() => {
						const d = new Dictionary();
						d.kind = ScopeKind.This;
						return d;
					})();
				}
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.CallExpression;
					d.modifiers = modifiers;
					d.scope = scope;
					d.callee = callee.value;
					d.arguments = KSHelper.mapArray(__ks_arguments_1.value, function(argument) {
						return argument.value;
					});
					return d;
				})(), first, last);
			};
			CallExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4])) {
						return CallExpression.__ks_0.call(that, args[0], void 0, args[1], args[2], args[3], args[4]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 6) {
					if(t0(args[0]) && t0(args[2]) && t0(args[3]) && t0(args[4]) && t0(args[5])) {
						return CallExpression.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
					}
				}
				throw KSHelper.badArgs();
			};
			function CallMacroExpression() {
				return CallMacroExpression.__ks_rt(this, arguments);
			};
			CallMacroExpression.__ks_0 = function(callee, __ks_arguments_1, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.CallMacroExpression;
					d.callee = callee.value;
					d.arguments = KSHelper.mapArray(__ks_arguments_1.value, function(argument) {
						return argument.value;
					});
					return d;
				})(), first, last);
			};
			CallMacroExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return CallMacroExpression.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function CatchClause() {
				return CatchClause.__ks_rt(this, arguments);
			};
			CatchClause.__ks_0 = function(binding, type, body, first, last) {
				if(binding === void 0) {
					binding = null;
				}
				if(type === void 0) {
					type = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.CatchClause;
					d.body = body.value;
					return d;
				})(), first, last);
				if(binding !== null) {
					node.binding = binding.value;
				}
				if(type !== null) {
					node.type = type.value;
				}
				return node;
			};
			CatchClause.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[2]) && t0(args[3]) && t0(args[4])) {
						return CatchClause.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ClassDeclaration() {
				return ClassDeclaration.__ks_rt(this, arguments);
			};
			ClassDeclaration.__ks_0 = function(attributes, name, version, __ks_extends_1, modifiers, members, first, last) {
				if(version === void 0) {
					version = null;
				}
				if(__ks_extends_1 === void 0) {
					__ks_extends_1 = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ClassDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.name = name.value;
					d.modifiers = KSHelper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
					d.members = KSHelper.mapArray(members, function(member) {
						return member.value;
					});
					return d;
				})(), first, last);
				if(version !== null) {
					node.version = version.value;
				}
				if(__ks_extends_1 !== null) {
					node.extends = __ks_extends_1.value;
				}
				return node;
			};
			ClassDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 8) {
					if(t0(args[0]) && t0(args[1]) && t0(args[4]) && t0(args[5]) && t0(args[6]) && t0(args[7])) {
						return ClassDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ComparisonExpression() {
				return ComparisonExpression.__ks_rt(this, arguments);
			};
			ComparisonExpression.__ks_0 = function(values) {
				return location((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ComparisonExpression;
					d.values = values;
					return d;
				})(), values[0], values[KSOperator.subtraction(values.length, 1)]);
			};
			ComparisonExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return ComparisonExpression.__ks_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ComputedPropertyName() {
				return ComputedPropertyName.__ks_rt(this, arguments);
			};
			ComputedPropertyName.__ks_0 = function(expression, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ComputedPropertyName;
					d.expression = expression.value;
					return d;
				})(), first, last);
			};
			ComputedPropertyName.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return ComputedPropertyName.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ConditionalExpression() {
				return ConditionalExpression.__ks_rt(this, arguments);
			};
			ConditionalExpression.__ks_0 = function(first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ConditionalExpression;
					return d;
				})(), first);
			};
			ConditionalExpression.__ks_1 = function(condition, whenTrue, whenFalse) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ConditionalExpression;
					d.condition = condition.value;
					d.whenTrue = whenTrue.value;
					d.whenFalse = whenFalse.value;
					return d;
				})(), condition, whenFalse);
			};
			ConditionalExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return ConditionalExpression.__ks_0.call(that, args[0]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return ConditionalExpression.__ks_1.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ContinueStatement() {
				return ContinueStatement.__ks_rt(this, arguments);
			};
			ContinueStatement.__ks_0 = function(first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ContinueStatement;
					d.attributes = [];
					return d;
				})(), first);
			};
			ContinueStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return ContinueStatement.__ks_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			function CreateExpression() {
				return CreateExpression.__ks_rt(this, arguments);
			};
			CreateExpression.__ks_0 = function(__ks_class_1, __ks_arguments_1, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.CreateExpression;
					d.class = __ks_class_1.value;
					d.arguments = KSHelper.mapArray(__ks_arguments_1.value, function(argument) {
						return argument.value;
					});
					return d;
				})(), first, last);
			};
			CreateExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return CreateExpression.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function CurryExpression() {
				return CurryExpression.__ks_rt(this, arguments);
			};
			CurryExpression.__ks_0 = function(scope, callee, __ks_arguments_1, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.CurryExpression;
					d.modifiers = [];
					d.scope = scope;
					d.callee = callee.value;
					d.arguments = KSHelper.mapArray(__ks_arguments_1.value, function(argument) {
						return argument.value;
					});
					return d;
				})(), first, last);
			};
			CurryExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4])) {
						return CurryExpression.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function DestroyStatement() {
				return DestroyStatement.__ks_rt(this, arguments);
			};
			DestroyStatement.__ks_0 = function(variable, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.DestroyStatement;
					d.attributes = [];
					d.variable = variable.value;
					return d;
				})(), first, last);
			};
			DestroyStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return DestroyStatement.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function DiscloseDeclaration() {
				return DiscloseDeclaration.__ks_rt(this, arguments);
			};
			DiscloseDeclaration.__ks_0 = function(name, members, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.DiscloseDeclaration;
					d.attributes = [];
					d.name = name.value;
					d.members = KSHelper.mapArray(members, function(member) {
						return member.value;
					});
					return d;
				})(), first, last);
			};
			DiscloseDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return DiscloseDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function DoUntilStatement() {
				return DoUntilStatement.__ks_rt(this, arguments);
			};
			DoUntilStatement.__ks_0 = function(condition, body, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.DoUntilStatement;
					d.attributes = [];
					d.condition = condition.value;
					d.body = body.value;
					return d;
				})(), first, last);
			};
			DoUntilStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return DoUntilStatement.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function DoWhileStatement() {
				return DoWhileStatement.__ks_rt(this, arguments);
			};
			DoWhileStatement.__ks_0 = function(condition, body, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.DoWhileStatement;
					d.attributes = [];
					d.condition = condition.value;
					d.body = body.value;
					return d;
				})(), first, last);
			};
			DoWhileStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return DoWhileStatement.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function EnumExpression() {
				return EnumExpression.__ks_rt(this, arguments);
			};
			EnumExpression.__ks_0 = function(__ks_enum_1, member) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.EnumExpression;
					d.enum = __ks_enum_1.value;
					d.member = member.value;
					return d;
				})(), __ks_enum_1, member);
			};
			EnumExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return EnumExpression.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function EnumDeclaration() {
				return EnumDeclaration.__ks_rt(this, arguments);
			};
			EnumDeclaration.__ks_0 = function(attributes, modifiers, name, type, members, first, last) {
				if(type === void 0) {
					type = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.EnumDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.modifiers = KSHelper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
					d.name = name.value;
					d.members = members;
					return d;
				})(), first, last);
				if(type !== null) {
					node.type = type.value;
				}
				return node;
			};
			EnumDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 7) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[4]) && t0(args[5]) && t0(args[6])) {
						return EnumDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ExclusionType() {
				return ExclusionType.__ks_rt(this, arguments);
			};
			ExclusionType.__ks_0 = function(types, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ExclusionType;
					d.types = KSHelper.mapArray(types, function(type) {
						return type.value;
					});
					return d;
				})(), first, last);
			};
			ExclusionType.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return ExclusionType.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ExportDeclaration() {
				return ExportDeclaration.__ks_rt(this, arguments);
			};
			ExportDeclaration.__ks_0 = function(attributes, declarations, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ExportDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.declarations = KSHelper.mapArray(declarations, function(declarator) {
						return declarator.value;
					});
					return d;
				})(), first, last);
			};
			ExportDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return ExportDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ExportDeclarationSpecifier() {
				return ExportDeclarationSpecifier.__ks_rt(this, arguments);
			};
			ExportDeclarationSpecifier.__ks_0 = function(declaration) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ExportDeclarationSpecifier;
					d.declaration = declaration.value;
					return d;
				})(), declaration);
			};
			ExportDeclarationSpecifier.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return ExportDeclarationSpecifier.__ks_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ExportExclusionSpecifier() {
				return ExportExclusionSpecifier.__ks_rt(this, arguments);
			};
			ExportExclusionSpecifier.__ks_0 = function(exclusions, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ExportExclusionSpecifier;
					d.exclusions = KSHelper.mapArray(exclusions, function(exclusion) {
						return exclusion.value;
					});
					return d;
				})(), first, last);
			};
			ExportExclusionSpecifier.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return ExportExclusionSpecifier.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ExportNamedSpecifier() {
				return ExportNamedSpecifier.__ks_rt(this, arguments);
			};
			ExportNamedSpecifier.__ks_0 = function(local, exported) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ExportNamedSpecifier;
					d.local = local.value;
					d.exported = exported.value;
					return d;
				})(), local, exported);
			};
			ExportNamedSpecifier.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return ExportNamedSpecifier.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ExportPropertiesSpecifier() {
				return ExportPropertiesSpecifier.__ks_rt(this, arguments);
			};
			ExportPropertiesSpecifier.__ks_0 = function(object, properties, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ExportPropertiesSpecifier;
					d.object = object.value;
					d.properties = properties;
					return d;
				})(), object, last);
			};
			ExportPropertiesSpecifier.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return ExportPropertiesSpecifier.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ExportWildcardSpecifier() {
				return ExportWildcardSpecifier.__ks_rt(this, arguments);
			};
			ExportWildcardSpecifier.__ks_0 = function(local, end) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ExportWildcardSpecifier;
					d.local = local.value;
					return d;
				})(), local, end);
			};
			ExportWildcardSpecifier.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return ExportWildcardSpecifier.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ExpressionStatement() {
				return ExpressionStatement.__ks_rt(this, arguments);
			};
			ExpressionStatement.__ks_0 = function(expression) {
				expression.value.attributes = [];
				return expression.value;
			};
			ExpressionStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return ExpressionStatement.__ks_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ExternDeclaration() {
				return ExternDeclaration.__ks_rt(this, arguments);
			};
			ExternDeclaration.__ks_0 = function(attributes, declarations, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ExternDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.declarations = KSHelper.mapArray(declarations, function(declarator) {
						return declarator.value;
					});
					return d;
				})(), first, last);
			};
			ExternDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return ExternDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ExternOrImportDeclaration() {
				return ExternOrImportDeclaration.__ks_rt(this, arguments);
			};
			ExternOrImportDeclaration.__ks_0 = function(attributes, declarations, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ExternOrImportDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.declarations = KSHelper.mapArray(declarations, function(declaration) {
						return declaration.value;
					});
					return d;
				})(), first, last);
			};
			ExternOrImportDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return ExternOrImportDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ExternOrRequireDeclaration() {
				return ExternOrRequireDeclaration.__ks_rt(this, arguments);
			};
			ExternOrRequireDeclaration.__ks_0 = function(attributes, declarations, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ExternOrRequireDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.declarations = KSHelper.mapArray(declarations, function(declarator) {
						return declarator.value;
					});
					return d;
				})(), first, last);
			};
			ExternOrRequireDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return ExternOrRequireDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function FallthroughStatement() {
				return FallthroughStatement.__ks_rt(this, arguments);
			};
			FallthroughStatement.__ks_0 = function(first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.FallthroughStatement;
					d.attributes = [];
					return d;
				})(), first);
			};
			FallthroughStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return FallthroughStatement.__ks_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			function FieldDeclaration() {
				return FieldDeclaration.__ks_rt(this, arguments);
			};
			FieldDeclaration.__ks_0 = function(attributes, modifiers, name, type, value, first, last) {
				if(type === void 0) {
					type = null;
				}
				if(value === void 0) {
					value = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.FieldDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.modifiers = KSHelper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
					d.name = name.value;
					return d;
				})(), first, last);
				if((type !== null) && (type.ok === true)) {
					node.type = type.value;
				}
				if(value !== null) {
					node.value = value.value;
				}
				return node;
			};
			FieldDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 7) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[5]) && t0(args[6])) {
						return FieldDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ForFromStatement() {
				return ForFromStatement.__ks_rt(this, arguments);
			};
			ForFromStatement.__ks_0 = function(modifiers, variable, from, til, to, by, until, __ks_while_1, when, first, last) {
				if(til === void 0) {
					til = null;
				}
				if(to === void 0) {
					to = null;
				}
				if(by === void 0) {
					by = null;
				}
				if(until === void 0) {
					until = null;
				}
				if(__ks_while_1 === void 0) {
					__ks_while_1 = null;
				}
				if(when === void 0) {
					when = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ForFromStatement;
					d.modifiers = modifiers;
					d.attributes = [];
					d.variable = variable.value;
					d.from = from.value;
					return d;
				})(), first, last);
				if(til !== null) {
					node.til = til.value;
				}
				else if(to !== null) {
					node.to = to.value;
				}
				if(by !== null) {
					node.by = by.value;
				}
				if(until !== null) {
					node.until = until.value;
				}
				else if(__ks_while_1 !== null) {
					node.while = __ks_while_1.value;
				}
				if(when !== null) {
					node.when = when.value;
				}
				return node;
			};
			ForFromStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 11) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[9]) && t0(args[10])) {
						return ForFromStatement.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ForInStatement() {
				return ForInStatement.__ks_rt(this, arguments);
			};
			ForInStatement.__ks_0 = function(modifiers, value, type, index, expression, from, til, to, by, until, __ks_while_1, when, first, last) {
				if(from === void 0) {
					from = null;
				}
				if(til === void 0) {
					til = null;
				}
				if(to === void 0) {
					to = null;
				}
				if(by === void 0) {
					by = null;
				}
				if(until === void 0) {
					until = null;
				}
				if(__ks_while_1 === void 0) {
					__ks_while_1 = null;
				}
				if(when === void 0) {
					when = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ForInStatement;
					d.attributes = [];
					d.modifiers = modifiers;
					d.expression = expression.value;
					return d;
				})(), first, last);
				if(value.ok === true) {
					node.value = value.value;
				}
				if(type.ok === true) {
					node.type = type.value;
				}
				if(index.ok === true) {
					node.index = index.value;
				}
				if(from !== null) {
					node.from = from.value;
				}
				if(til !== null) {
					node.til = til.value;
				}
				else if(to !== null) {
					node.to = to.value;
				}
				if(by !== null) {
					node.by = by.value;
				}
				if(until !== null) {
					node.until = until.value;
				}
				else if(__ks_while_1 !== null) {
					node.while = __ks_while_1.value;
				}
				if(when !== null) {
					node.when = when.value;
				}
				return node;
			};
			ForInStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 14) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4]) && t0(args[12]) && t0(args[13])) {
						return ForInStatement.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ForRangeStatement() {
				return ForRangeStatement.__ks_rt(this, arguments);
			};
			ForRangeStatement.__ks_0 = function(modifiers, value, index, from, then, til, to, by, until, __ks_while_1, when, first, last) {
				if(from === void 0) {
					from = null;
				}
				if(then === void 0) {
					then = null;
				}
				if(til === void 0) {
					til = null;
				}
				if(to === void 0) {
					to = null;
				}
				if(by === void 0) {
					by = null;
				}
				if(until === void 0) {
					until = null;
				}
				if(__ks_while_1 === void 0) {
					__ks_while_1 = null;
				}
				if(when === void 0) {
					when = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ForRangeStatement;
					d.attributes = [];
					d.modifiers = modifiers;
					d.value = value.value;
					return d;
				})(), first, last);
				if(index.ok === true) {
					node.index = index.value;
				}
				if(from !== null) {
					node.from = from.value;
				}
				else if(then !== null) {
					node.then = then.value;
				}
				if(til !== null) {
					node.til = til.value;
				}
				else if(to !== null) {
					node.to = to.value;
				}
				if(by !== null) {
					node.by = by.value;
				}
				if(until !== null) {
					node.until = until.value;
				}
				else if(__ks_while_1 !== null) {
					node.while = __ks_while_1.value;
				}
				if(when !== null) {
					node.when = when.value;
				}
				return node;
			};
			ForRangeStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 13) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[11]) && t0(args[12])) {
						return ForRangeStatement.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ForOfStatement() {
				return ForOfStatement.__ks_rt(this, arguments);
			};
			ForOfStatement.__ks_0 = function(modifiers, value, type, key, expression, until, __ks_while_1, when, first, last) {
				if(until === void 0) {
					until = null;
				}
				if(__ks_while_1 === void 0) {
					__ks_while_1 = null;
				}
				if(when === void 0) {
					when = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ForOfStatement;
					d.attributes = [];
					d.modifiers = modifiers;
					d.expression = expression.value;
					return d;
				})(), first, last);
				if(value.ok === true) {
					node.value = value.value;
				}
				if(type.ok === true) {
					node.type = type.value;
				}
				if(key.ok === true) {
					node.key = key.value;
				}
				if(until !== null) {
					node.until = until.value;
				}
				else if(__ks_while_1 !== null) {
					node.while = __ks_while_1.value;
				}
				if(when !== null) {
					node.when = when.value;
				}
				return node;
			};
			ForOfStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 10) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4]) && t0(args[8]) && t0(args[9])) {
						return ForOfStatement.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
					}
				}
				throw KSHelper.badArgs();
			};
			function FunctionDeclaration() {
				return FunctionDeclaration.__ks_rt(this, arguments);
			};
			FunctionDeclaration.__ks_0 = function(name, parameters, modifiers, type, __ks_throws_1, body, first, last) {
				if(parameters === void 0) {
					parameters = null;
				}
				if(modifiers === void 0) {
					modifiers = null;
				}
				if(type === void 0) {
					type = null;
				}
				if(__ks_throws_1 === void 0) {
					__ks_throws_1 = null;
				}
				if(body === void 0) {
					body = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.FunctionDeclaration;
					d.attributes = [];
					d.name = name.value;
					return d;
				})(), first, last);
				if(parameters !== null) {
					node.parameters = KSHelper.mapArray(parameters.value, function(parameter) {
						return parameter.value;
					});
				}
				if(modifiers === null) {
					node.modifiers = [];
				}
				else {
					node.modifiers = KSHelper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
				}
				if(type !== null) {
					node.type = type.value;
				}
				if(__ks_throws_1 === null) {
					node.throws = [];
				}
				else {
					node.throws = KSHelper.mapArray(__ks_throws_1.value, function(__ks_throw_1) {
						return __ks_throw_1.value;
					});
				}
				if(body !== null) {
					node.body = body.value;
				}
				return node;
			};
			FunctionDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 8) {
					if(t0(args[0]) && t0(args[6]) && t0(args[7])) {
						return FunctionDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
					}
				}
				throw KSHelper.badArgs();
			};
			function FunctionExpression() {
				return FunctionExpression.__ks_rt(this, arguments);
			};
			FunctionExpression.__ks_0 = function(parameters, modifiers, type, __ks_throws_1, body, first, last) {
				if(modifiers === void 0) {
					modifiers = null;
				}
				if(type === void 0) {
					type = null;
				}
				if(__ks_throws_1 === void 0) {
					__ks_throws_1 = null;
				}
				if(body === void 0) {
					body = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.FunctionExpression;
					d.parameters = KSHelper.mapArray(parameters.value, function(parameter) {
						return parameter.value;
					});
					return d;
				})(), first, last);
				if(modifiers === null) {
					node.modifiers = [];
				}
				else {
					node.modifiers = KSHelper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
				}
				if(type !== null) {
					node.type = type.value;
				}
				if(__ks_throws_1 === null) {
					node.throws = [];
				}
				else {
					node.throws = KSHelper.mapArray(__ks_throws_1.value, function(__ks_throw_1) {
						return __ks_throw_1.value;
					});
				}
				if(body !== null) {
					node.body = body.value;
				}
				return node;
			};
			FunctionExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 7) {
					if(t0(args[0]) && t0(args[5]) && t0(args[6])) {
						return FunctionExpression.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
					}
				}
				throw KSHelper.badArgs();
			};
			function FusionType() {
				return FusionType.__ks_rt(this, arguments);
			};
			FusionType.__ks_0 = function(types, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.FusionType;
					d.types = KSHelper.mapArray(types, function(type) {
						return type.value;
					});
					return d;
				})(), first, last);
			};
			FusionType.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return FusionType.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function IfExpression() {
				return IfExpression.__ks_rt(this, arguments);
			};
			IfExpression.__ks_0 = function(condition, whenTrue, whenFalse, first, last) {
				if(whenFalse === void 0) {
					whenFalse = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.IfExpression;
					d.condition = condition.value;
					d.whenTrue = whenTrue.value;
					return d;
				})(), first, last);
				if(whenFalse !== null) {
					node.whenFalse = whenFalse.value;
				}
				return node;
			};
			IfExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t0(args[3]) && t0(args[4])) {
						return IfExpression.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function IfStatement() {
				return IfStatement.__ks_rt(this, arguments);
			};
			IfStatement.__ks_0 = function(condition, whenTrue, whenFalse, first, last) {
				if(whenFalse === void 0) {
					whenFalse = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.IfStatement;
					d.attributes = [];
					d.condition = condition.value;
					d.whenTrue = whenTrue.value;
					return d;
				})(), first, last);
				if(whenFalse !== null) {
					node.whenFalse = whenFalse.value;
				}
				return node;
			};
			IfStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t0(args[3]) && t0(args[4])) {
						return IfStatement.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ImplementDeclaration() {
				return ImplementDeclaration.__ks_rt(this, arguments);
			};
			ImplementDeclaration.__ks_0 = function(attributes, variable, properties, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ImplementDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.variable = variable.value;
					d.properties = KSHelper.mapArray(properties, function(property) {
						return property.value;
					});
					return d;
				})(), first, last);
			};
			ImplementDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4])) {
						return ImplementDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ImportArgument() {
				return ImportArgument.__ks_rt(this, arguments);
			};
			ImportArgument.__ks_0 = function(modifiers, name, value, first, last) {
				if(name === void 0) {
					name = null;
				}
				if(name === null) {
					return location.__ks_0((() => {
						const d = new Dictionary();
						d.kind = NodeKind.ImportArgument;
						d.modifiers = modifiers;
						d.value = value.value;
						return d;
					})(), first, last);
				}
				else {
					return location.__ks_0((() => {
						const d = new Dictionary();
						d.kind = NodeKind.ImportArgument;
						d.modifiers = modifiers;
						d.name = name.value;
						d.value = value.value;
						return d;
					})(), first, last);
				}
			};
			ImportArgument.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[2]) && t0(args[3]) && t0(args[4])) {
						return ImportArgument.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ImportDeclaration() {
				return ImportDeclaration.__ks_rt(this, arguments);
			};
			ImportDeclaration.__ks_0 = function(attributes, declarations, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ImportDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.declarations = KSHelper.mapArray(declarations, function(declaration) {
						return declaration.value;
					});
					return d;
				})(), first, last);
			};
			ImportDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return ImportDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ImportDeclarator() {
				return ImportDeclarator.__ks_rt(this, arguments);
			};
			ImportDeclarator.__ks_0 = function(attributes, modifiers, source, specifiers, __ks_arguments_1, first, last) {
				if(__ks_arguments_1 === void 0) {
					__ks_arguments_1 = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ImportDeclarator;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.modifiers = modifiers;
					d.source = source.value;
					d.specifiers = KSHelper.mapArray(specifiers, function(specifier) {
						return specifier.value;
					});
					return d;
				})(), first, last);
				if(__ks_arguments_1 !== null) {
					node.arguments = __ks_arguments_1;
				}
				return node;
			};
			ImportDeclarator.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 7) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[5]) && t0(args[6])) {
						return ImportDeclarator.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ImportExclusionSpecifier() {
				return ImportExclusionSpecifier.__ks_rt(this, arguments);
			};
			ImportExclusionSpecifier.__ks_0 = function(exclusions, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ImportExclusionSpecifier;
					d.attributes = [];
					d.exclusions = KSHelper.mapArray(exclusions, function(exclusion) {
						return exclusion.value;
					});
					return d;
				})(), first, last);
			};
			ImportExclusionSpecifier.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return ImportExclusionSpecifier.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ImportNamespaceSpecifier() {
				return ImportNamespaceSpecifier.__ks_rt(this, arguments);
			};
			ImportNamespaceSpecifier.__ks_0 = function(local, specifiers, first, last) {
				if(specifiers === void 0) {
					specifiers = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ImportNamespaceSpecifier;
					d.attributes = [];
					d.local = local.value;
					return d;
				})(), first, last);
				if(specifiers !== null) {
					node.specifiers = KSHelper.mapArray(specifiers, function(specifier) {
						return specifier.value;
					});
				}
				return node;
			};
			ImportNamespaceSpecifier.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[2]) && t0(args[3])) {
						return ImportNamespaceSpecifier.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ImportSpecifier() {
				return ImportSpecifier.__ks_rt(this, arguments);
			};
			ImportSpecifier.__ks_0 = function(imported, local, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ImportSpecifier;
					d.attributes = [];
					d.imported = imported.value;
					d.local = local.value;
					return d;
				})(), first, last);
			};
			ImportSpecifier.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return ImportSpecifier.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function Identifier() {
				return Identifier.__ks_rt(this, arguments);
			};
			Identifier.__ks_0 = function(name, first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.Identifier;
					d.name = name;
					return d;
				})(), first);
			};
			Identifier.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return Identifier.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function IncludeAgainDeclaration() {
				return IncludeAgainDeclaration.__ks_rt(this, arguments);
			};
			IncludeAgainDeclaration.__ks_0 = function(attributes, declarations, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.IncludeAgainDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.declarations = KSHelper.mapArray(declarations, function(declaration) {
						return declaration.value;
					});
					return d;
				})(), first, last);
			};
			IncludeAgainDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return IncludeAgainDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function IncludeDeclaration() {
				return IncludeDeclaration.__ks_rt(this, arguments);
			};
			IncludeDeclaration.__ks_0 = function(attributes, declarations, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.IncludeDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.declarations = KSHelper.mapArray(declarations, function(declaration) {
						return declaration.value;
					});
					return d;
				})(), first, last);
			};
			IncludeDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return IncludeDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function IncludeDeclarator() {
				return IncludeDeclarator.__ks_rt(this, arguments);
			};
			IncludeDeclarator.__ks_0 = function(file) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.IncludeDeclarator;
					d.attributes = [];
					d.file = file.value;
					return d;
				})(), file, file);
			};
			IncludeDeclarator.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return IncludeDeclarator.__ks_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			function JunctionExpression() {
				return JunctionExpression.__ks_rt(this, arguments);
			};
			JunctionExpression.__ks_0 = function(operator, operands) {
				return location((() => {
					const d = new Dictionary();
					d.kind = NodeKind.JunctionExpression;
					d.operator = operator.value;
					d.operands = operands;
					return d;
				})(), operands[0], operands[KSOperator.subtraction(operands.length, 1)]);
			};
			JunctionExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return JunctionExpression.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function LambdaExpression() {
				return LambdaExpression.__ks_rt(this, arguments);
			};
			LambdaExpression.__ks_0 = function(parameters, modifiers, type, __ks_throws_1, body, first, last) {
				if(modifiers === void 0) {
					modifiers = null;
				}
				if(type === void 0) {
					type = null;
				}
				if(__ks_throws_1 === void 0) {
					__ks_throws_1 = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.LambdaExpression;
					d.modifiers = [];
					d.parameters = KSHelper.mapArray(parameters.value, function(parameter) {
						return parameter.value;
					});
					d.body = body.value;
					return d;
				})(), first, last);
				if(modifiers === null) {
					node.modifiers = [];
				}
				else {
					node.modifiers = KSHelper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
				}
				if(type !== null) {
					node.type = type.value;
				}
				if(__ks_throws_1 === null) {
					node.throws = [];
				}
				else {
					node.throws = KSHelper.mapArray(__ks_throws_1.value, function(__ks_throw_1) {
						return __ks_throw_1.value;
					});
				}
				return node;
			};
			LambdaExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 7) {
					if(t0(args[0]) && t0(args[4]) && t0(args[5]) && t0(args[6])) {
						return LambdaExpression.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
					}
				}
				throw KSHelper.badArgs();
			};
			function Literal() {
				return Literal.__ks_rt(this, arguments);
			};
			Literal.__ks_0 = function(value, first, last = null) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.Literal;
					d.value = value;
					return d;
				})(), first, last);
			};
			Literal.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length >= 2 && args.length <= 3) {
					if(t0(args[0]) && t0(args[1])) {
						return Literal.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function MacroDeclaration() {
				return MacroDeclaration.__ks_rt(this, arguments);
			};
			MacroDeclaration.__ks_0 = function(attributes, name, parameters, body, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.MacroDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.name = name.value;
					d.parameters = KSHelper.mapArray(parameters.value, function(parameter) {
						return parameter.value;
					});
					d.body = body.value;
					return d;
				})(), first, last);
			};
			MacroDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 6) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4]) && t0(args[5])) {
						return MacroDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
					}
				}
				throw KSHelper.badArgs();
			};
			function MacroExpression() {
				return MacroExpression.__ks_rt(this, arguments);
			};
			MacroExpression.__ks_0 = function(elements, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.MacroExpression;
					d.attributes = [];
					d.elements = KSHelper.mapArray(elements, function(element) {
						return element.value;
					});
					return d;
				})(), first, last);
			};
			MacroExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return MacroExpression.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function MacroElementExpression() {
				return MacroElementExpression.__ks_rt(this, arguments);
			};
			MacroElementExpression.__ks_0 = function(expression, reification, first, last) {
				if(reification === void 0) {
					reification = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = MacroElementKind.Expression;
					d.expression = expression.value;
					return d;
				})(), first, last);
				if(reification === null) {
					node.reification = (() => {
						const d = new Dictionary();
						d.kind = ReificationKind.Expression;
						return d;
					})();
				}
				else {
					node.reification = reification;
				}
				return node;
			};
			MacroElementExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[2]) && t0(args[3])) {
						return MacroElementExpression.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function MacroElementLiteral() {
				return MacroElementLiteral.__ks_rt(this, arguments);
			};
			MacroElementLiteral.__ks_0 = function(value, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = MacroElementKind.Literal;
					d.value = value;
					return d;
				})(), first, last);
			};
			MacroElementLiteral.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return MacroElementLiteral.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function MacroElementNewLine() {
				return MacroElementNewLine.__ks_rt(this, arguments);
			};
			MacroElementNewLine.__ks_0 = function(first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = MacroElementKind.NewLine;
					return d;
				})(), first);
			};
			MacroElementNewLine.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return MacroElementNewLine.__ks_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			function MacroReification() {
				return MacroReification.__ks_rt(this, arguments);
			};
			MacroReification.__ks_0 = function(value, first) {
				if(value === "a") {
					return location.__ks_0((() => {
						const d = new Dictionary();
						d.kind = ReificationKind.Argument;
						return d;
					})(), first);
				}
				else if(value === "e") {
					return location.__ks_0((() => {
						const d = new Dictionary();
						d.kind = ReificationKind.Expression;
						return d;
					})(), first);
				}
				else if(value === "j") {
					return location.__ks_0((() => {
						const d = new Dictionary();
						d.kind = ReificationKind.Join;
						return d;
					})(), first);
				}
				else if(value === "s") {
					return location.__ks_0((() => {
						const d = new Dictionary();
						d.kind = ReificationKind.Statement;
						return d;
					})(), first);
				}
				else if(value === "w") {
					return location.__ks_0((() => {
						const d = new Dictionary();
						d.kind = ReificationKind.Write;
						return d;
					})(), first);
				}
			};
			MacroReification.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return MacroReification.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function MemberExpression() {
				return MemberExpression.__ks_rt(this, arguments);
			};
			MemberExpression.__ks_0 = function(modifiers, object, property, first, last) {
				if(first === void 0 || first === null) {
					first = object;
				}
				if(last === void 0 || last === null) {
					last = property;
				}
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.MemberExpression;
					d.modifiers = modifiers;
					d.object = object.value;
					d.property = property.value;
					return d;
				})(), first, last);
			};
			MemberExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				const t1 = () => true;
				const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
				let pts;
				if(args.length >= 3 && args.length <= 5) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						if(KSHelper.isVarargs(args, 0, 1, t1, pts = [3], 0) && KSHelper.isVarargs(args, 0, 1, t1, pts, 1) && te(pts, 2)) {
							return MemberExpression.__ks_0.call(that, args[0], args[1], args[2], KSHelper.getVararg(args, 3, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
						}
						throw KSHelper.badArgs();
					}
				}
				throw KSHelper.badArgs();
			};
			function MethodDeclaration() {
				return MethodDeclaration.__ks_rt(this, arguments);
			};
			MethodDeclaration.__ks_0 = function(attributes, modifiers, name, parameters, type, __ks_throws_1, body, first, last) {
				if(type === void 0) {
					type = null;
				}
				if(__ks_throws_1 === void 0) {
					__ks_throws_1 = null;
				}
				if(body === void 0) {
					body = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.MethodDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.modifiers = KSHelper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
					d.name = name.value;
					d.parameters = KSHelper.mapArray(parameters.value, function(parameter) {
						return parameter.value;
					});
					return d;
				})(), first, last);
				if(type !== null) {
					node.type = type.value;
				}
				if(__ks_throws_1 === null) {
					node.throws = [];
				}
				else {
					node.throws = KSHelper.mapArray(__ks_throws_1.value, function(__ks_throw_1) {
						return __ks_throw_1.value;
					});
				}
				if(body !== null) {
					node.body = body.value;
				}
				return node;
			};
			MethodDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 9) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[7]) && t0(args[8])) {
						return MethodDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
					}
				}
				throw KSHelper.badArgs();
			};
			function Modifier() {
				return Modifier.__ks_rt(this, arguments);
			};
			Modifier.__ks_0 = function(kind, first, last = null) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = kind;
					return d;
				})(), first, last);
			};
			Modifier.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length >= 2 && args.length <= 3) {
					if(t0(args[0]) && t0(args[1])) {
						return Modifier.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function Module() {
				return Module.__ks_rt(this, arguments);
			};
			Module.__ks_0 = function(attributes, body, parser) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.Module;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.body = body;
					d.start = (() => {
						const d = new Dictionary();
						d.line = 1;
						d.column = 1;
						return d;
					})();
					return d;
				})(), parser.__ks_func_position_0());
			};
			Module.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isClassInstance(value, Parser);
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
						return Module.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function MutatorDeclaration() {
				return MutatorDeclaration.__ks_rt(this, arguments);
			};
			MutatorDeclaration.__ks_0 = function(first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.MutatorDeclaration;
					return d;
				})(), first);
			};
			MutatorDeclaration.__ks_1 = function(body, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.MutatorDeclaration;
					d.body = body.value;
					return d;
				})(), first, last);
			};
			MutatorDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return MutatorDeclaration.__ks_0.call(that, args[0]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return MutatorDeclaration.__ks_1.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function Nullable() {
				return Nullable.__ks_rt(this, arguments);
			};
			Nullable.__ks_0 = function(first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.TypeReference;
					d.modifiers = [Modifier.__ks_0(ModifierKind.Nullable, first)];
					d.typeName = (() => {
						const d = new Dictionary();
						d.kind = NodeKind.Identifier;
						d.name = "any";
						return d;
					})();
					return d;
				})(), first);
			};
			Nullable.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return Nullable.__ks_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			function NamedArgument() {
				return NamedArgument.__ks_rt(this, arguments);
			};
			NamedArgument.__ks_0 = function(name, value) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.NamedArgument;
					d.modifiers = [];
					d.name = name.value;
					d.value = value.value;
					return d;
				})(), name, value);
			};
			NamedArgument.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return NamedArgument.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function NamespaceDeclaration() {
				return NamespaceDeclaration.__ks_rt(this, arguments);
			};
			NamespaceDeclaration.__ks_0 = function(attributes, modifiers, name, statements, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.NamespaceDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.modifiers = KSHelper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
					d.name = name.value;
					d.statements = KSHelper.mapArray(statements, function(statement) {
						return statement.value;
					});
					return d;
				})(), first, last);
			};
			NamespaceDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 6) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4]) && t0(args[5])) {
						return NamespaceDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
					}
				}
				throw KSHelper.badArgs();
			};
			function NumericExpression() {
				return NumericExpression.__ks_rt(this, arguments);
			};
			NumericExpression.__ks_0 = function(value, first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.NumericExpression;
					d.value = value;
					return d;
				})(), first);
			};
			NumericExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return NumericExpression.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ObjectBinding() {
				return ObjectBinding.__ks_rt(this, arguments);
			};
			ObjectBinding.__ks_0 = function(elements, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ObjectBinding;
					d.elements = KSHelper.mapArray(elements, function(element) {
						return element.value;
					});
					return d;
				})(), first, last);
			};
			ObjectBinding.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return ObjectBinding.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ObjectBindingElement() {
				return ObjectBindingElement.__ks_rt(this, arguments);
			};
			ObjectBindingElement.__ks_0 = function(modifiers, name, alias, defaultValue, first, last) {
				if(alias === void 0) {
					alias = null;
				}
				if(defaultValue === void 0) {
					defaultValue = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.BindingElement;
					d.name = name.value;
					d.modifiers = modifiers;
					return d;
				})(), first, last);
				if(KSType.isValue(alias)) {
					node.alias = alias.value;
				}
				if(KSType.isValue(defaultValue)) {
					node.defaultValue = defaultValue.value;
				}
				return node;
			};
			ObjectBindingElement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 6) {
					if(t0(args[0]) && t0(args[1]) && t0(args[4]) && t0(args[5])) {
						return ObjectBindingElement.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ObjectExpression() {
				return ObjectExpression.__ks_rt(this, arguments);
			};
			ObjectExpression.__ks_0 = function(attributes, properties, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ObjectExpression;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.properties = KSHelper.mapArray(properties, function(property) {
						return property.value;
					});
					return d;
				})(), first, last);
			};
			ObjectExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return ObjectExpression.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ObjectMember() {
				return ObjectMember.__ks_rt(this, arguments);
			};
			ObjectMember.__ks_0 = function(name) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ObjectMember;
					d.name = name.value;
					return d;
				})(), name, name);
			};
			ObjectMember.__ks_1 = function(name, value) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ObjectMember;
					d.name = name.value;
					d.value = value.value;
					return d;
				})(), name, value);
			};
			ObjectMember.__ks_2 = function(attributes, name, value, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ObjectMember;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.name = name.value;
					d.value = value.value;
					return d;
				})(), first, last);
			};
			ObjectMember.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return ObjectMember.__ks_0.call(that, args[0]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return ObjectMember.__ks_1.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4])) {
						return ObjectMember.__ks_2.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ObjectReference() {
				return ObjectReference.__ks_rt(this, arguments);
			};
			ObjectReference.__ks_0 = function(properties, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.TypeReference;
					d.modifiers = [];
					d.typeName = (() => {
						const d = new Dictionary();
						d.kind = NodeKind.Identifier;
						d.name = "object";
						return d;
					})();
					d.properties = KSHelper.mapArray(properties, function(property) {
						return property.value;
					});
					return d;
				})(), first, last);
			};
			ObjectReference.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return ObjectReference.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ObjectMemberReference() {
				return ObjectMemberReference.__ks_rt(this, arguments);
			};
			ObjectMemberReference.__ks_0 = function(name, type) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ObjectMember;
					d.name = name.value;
					d.type = type.value;
					return d;
				})(), name, type);
			};
			ObjectMemberReference.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return ObjectMemberReference.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function OmittedExpression() {
				return OmittedExpression.__ks_rt(this, arguments);
			};
			OmittedExpression.__ks_0 = function(modifiers, first) {
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.OmittedExpression;
					d.modifiers = modifiers;
					return d;
				})(), first, first);
				return node;
			};
			OmittedExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return OmittedExpression.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function OmittedReference() {
				return OmittedReference.__ks_rt(this, arguments);
			};
			OmittedReference.__ks_0 = function(first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.TypeReference;
					d.modifiers = [];
					return d;
				})(), first, first);
			};
			OmittedReference.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return OmittedReference.__ks_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			function PropertyDeclaration() {
				return PropertyDeclaration.__ks_rt(this, arguments);
			};
			PropertyDeclaration.__ks_0 = function(attributes, modifiers, name, type, defaultValue, accessor, mutator, first, last) {
				if(type === void 0) {
					type = null;
				}
				if(defaultValue === void 0) {
					defaultValue = null;
				}
				if(accessor === void 0) {
					accessor = null;
				}
				if(mutator === void 0) {
					mutator = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.PropertyDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.modifiers = KSHelper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
					d.name = name.value;
					return d;
				})(), first, last);
				if((type !== null) && (type.ok === true)) {
					node.type = type.value;
				}
				if(defaultValue !== null) {
					node.defaultValue = defaultValue.value;
				}
				if(accessor !== null) {
					node.accessor = accessor.value;
				}
				if(mutator !== null) {
					node.mutator = mutator.value;
				}
				return node;
			};
			PropertyDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 9) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[7]) && t0(args[8])) {
						return PropertyDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
					}
				}
				throw KSHelper.badArgs();
			};
			function Parameter() {
				return Parameter.__ks_rt(this, arguments);
			};
			Parameter.__ks_0 = function(name) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.Parameter;
					d.attributes = [];
					d.modifiers = [];
					d.name = name.value;
					return d;
				})(), name, name);
			};
			Parameter.__ks_1 = function(attributes, modifiers, name, type, defaultValue, first, last) {
				if(name === void 0) {
					name = null;
				}
				if(type === void 0) {
					type = null;
				}
				if(defaultValue === void 0) {
					defaultValue = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.Parameter;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.modifiers = modifiers;
					return d;
				})(), first, last);
				if(name !== null) {
					node.name = name.value;
				}
				if(type !== null) {
					node.type = type.value;
				}
				if(defaultValue !== null) {
					node.defaultValue = defaultValue.value;
				}
				return node;
			};
			Parameter.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return Parameter.__ks_0.call(that, args[0]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 7) {
					if(t0(args[0]) && t0(args[1]) && t0(args[5]) && t0(args[6])) {
						return Parameter.__ks_1.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
					}
				}
				throw KSHelper.badArgs();
			};
			function RegularExpression() {
				return RegularExpression.__ks_rt(this, arguments);
			};
			RegularExpression.__ks_0 = function(value, first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.RegularExpression;
					d.value = value;
					return d;
				})(), first);
			};
			RegularExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return RegularExpression.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function RequireDeclaration() {
				return RequireDeclaration.__ks_rt(this, arguments);
			};
			RequireDeclaration.__ks_0 = function(attributes, declarations, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.RequireDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.declarations = KSHelper.mapArray(declarations, function(declarator) {
						return declarator.value;
					});
					return d;
				})(), first, last);
			};
			RequireDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return RequireDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function RequireOrExternDeclaration() {
				return RequireOrExternDeclaration.__ks_rt(this, arguments);
			};
			RequireOrExternDeclaration.__ks_0 = function(attributes, declarations, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.RequireOrExternDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.declarations = KSHelper.mapArray(declarations, function(declarator) {
						return declarator.value;
					});
					return d;
				})(), first, last);
			};
			RequireOrExternDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return RequireOrExternDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function RequireOrImportDeclaration() {
				return RequireOrImportDeclaration.__ks_rt(this, arguments);
			};
			RequireOrImportDeclaration.__ks_0 = function(attributes, declarations, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.RequireOrImportDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.declarations = KSHelper.mapArray(declarations, function(declaration) {
						return declaration.value;
					});
					return d;
				})(), first, last);
			};
			RequireOrImportDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return RequireOrImportDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function RestModifier() {
				return RestModifier.__ks_rt(this, arguments);
			};
			RestModifier.__ks_0 = function(min, max, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = ModifierKind.Rest;
					d.arity = (() => {
						const d = new Dictionary();
						d.min = min;
						d.max = max;
						return d;
					})();
					return d;
				})(), first, last);
			};
			RestModifier.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return RestModifier.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ReturnStatement() {
				return ReturnStatement.__ks_rt(this, arguments);
			};
			ReturnStatement.__ks_0 = function(first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ReturnStatement;
					d.attributes = [];
					return d;
				})(), first, first);
			};
			ReturnStatement.__ks_1 = function(value, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ReturnStatement;
					d.attributes = [];
					d.value = value.value;
					return d;
				})(), first, last);
			};
			ReturnStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return ReturnStatement.__ks_0.call(that, args[0]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return ReturnStatement.__ks_1.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ReturnTypeReference() {
				return ReturnTypeReference.__ks_rt(this, arguments);
			};
			ReturnTypeReference.__ks_0 = function(value) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ReturnTypeReference;
					d.value = value.value;
					return d;
				})(), value);
			};
			ReturnTypeReference.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return ReturnTypeReference.__ks_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			function Scope() {
				return Scope.__ks_rt(this, arguments);
			};
			Scope.__ks_0 = function(scope) {
				return (() => {
					const d = new Dictionary();
					d.kind = scope;
					return d;
				})();
			};
			Scope.__ks_1 = function(scope, value) {
				return (() => {
					const d = new Dictionary();
					d.kind = scope;
					d.value = value.value;
					return d;
				})();
			};
			Scope.__ks_rt = function(that, args) {
				const t0 = value => KSType.isEnumInstance(value, ScopeKind);
				const t1 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return Scope.__ks_0.call(that, args[0]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return Scope.__ks_1.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function SequenceExpression() {
				return SequenceExpression.__ks_rt(this, arguments);
			};
			SequenceExpression.__ks_0 = function(expressions, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.SequenceExpression;
					d.expressions = KSHelper.mapArray(expressions, function(expression) {
						return expression.value;
					});
					return d;
				})(), first, last);
			};
			SequenceExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return SequenceExpression.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ShorthandProperty() {
				return ShorthandProperty.__ks_rt(this, arguments);
			};
			ShorthandProperty.__ks_0 = function(attributes, name, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ShorthandProperty;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.name = name.value;
					return d;
				})(), first, last);
			};
			ShorthandProperty.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return ShorthandProperty.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function StructDeclaration() {
				return StructDeclaration.__ks_rt(this, arguments);
			};
			StructDeclaration.__ks_0 = function(attributes, name, __ks_extends_1, fields, first, last) {
				if(__ks_extends_1 === void 0) {
					__ks_extends_1 = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.StructDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.name = name.value;
					d.fields = fields;
					return d;
				})(), first, last);
				if(__ks_extends_1 !== null) {
					node.extends = __ks_extends_1.value;
				}
				return node;
			};
			StructDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 6) {
					if(t0(args[0]) && t0(args[1]) && t0(args[3]) && t0(args[4]) && t0(args[5])) {
						return StructDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
					}
				}
				throw KSHelper.badArgs();
			};
			function StructField() {
				return StructField.__ks_rt(this, arguments);
			};
			StructField.__ks_0 = function(name, type, defaultValue, first, last) {
				if(type === void 0) {
					type = null;
				}
				if(defaultValue === void 0) {
					defaultValue = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.StructField;
					d.name = name.value;
					return d;
				})(), first, last);
				if(KSType.isValue(type)) {
					node.type = type.value;
				}
				if(KSType.isValue(defaultValue)) {
					node.defaultValue = defaultValue.value;
				}
				return node;
			};
			StructField.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[3]) && t0(args[4])) {
						return StructField.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function SwitchClause() {
				return SwitchClause.__ks_rt(this, arguments);
			};
			SwitchClause.__ks_0 = function(conditions, bindings, filter, body, first, last) {
				if(conditions === void 0) {
					conditions = null;
				}
				if(bindings === void 0) {
					bindings = null;
				}
				if(filter === void 0) {
					filter = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.SwitchClause;
					d.body = body.value;
					return d;
				})(), first, last);
				if(conditions === null) {
					node.conditions = [];
				}
				else {
					node.conditions = KSHelper.mapArray(conditions, function(condition) {
						return condition.value;
					});
				}
				if(bindings === null) {
					node.bindings = [];
				}
				else {
					node.bindings = KSHelper.mapArray(bindings.value, function(binding) {
						return binding.value;
					});
				}
				if(filter !== null) {
					node.filter = filter.value;
				}
				return node;
			};
			SwitchClause.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 6) {
					if(t0(args[3]) && t0(args[4]) && t0(args[5])) {
						return SwitchClause.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
					}
				}
				throw KSHelper.badArgs();
			};
			function SwitchConditionArray() {
				return SwitchConditionArray.__ks_rt(this, arguments);
			};
			SwitchConditionArray.__ks_0 = function(values, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.SwitchConditionArray;
					d.values = KSHelper.mapArray(values, function(value) {
						return value.value;
					});
					return d;
				})(), first, last);
			};
			SwitchConditionArray.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return SwitchConditionArray.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function SwitchConditionObject() {
				return SwitchConditionObject.__ks_rt(this, arguments);
			};
			SwitchConditionObject.__ks_0 = function(members, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.SwitchConditionObject;
					d.members = KSHelper.mapArray(members, function(member) {
						return member.value;
					});
					return d;
				})(), first, last);
			};
			SwitchConditionObject.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return SwitchConditionObject.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function SwitchConditionRangeFI() {
				return SwitchConditionRangeFI.__ks_rt(this, arguments);
			};
			SwitchConditionRangeFI.__ks_0 = function(from, til) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.SwitchConditionRange;
					d.from = from.value;
					d.til = til.value;
					return d;
				})(), from, til);
			};
			SwitchConditionRangeFI.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return SwitchConditionRangeFI.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function SwitchConditionRangeFO() {
				return SwitchConditionRangeFO.__ks_rt(this, arguments);
			};
			SwitchConditionRangeFO.__ks_0 = function(from, to) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.SwitchConditionRange;
					d.from = from.value;
					d.to = to.value;
					return d;
				})(), from, to);
			};
			SwitchConditionRangeFO.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return SwitchConditionRangeFO.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function SwitchConditionRangeTI() {
				return SwitchConditionRangeTI.__ks_rt(this, arguments);
			};
			SwitchConditionRangeTI.__ks_0 = function(then, til) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.SwitchConditionRange;
					d.then = then.value;
					d.til = til.value;
					return d;
				})(), then, til);
			};
			SwitchConditionRangeTI.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return SwitchConditionRangeTI.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function SwitchConditionRangeTO() {
				return SwitchConditionRangeTO.__ks_rt(this, arguments);
			};
			SwitchConditionRangeTO.__ks_0 = function(then, to) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.SwitchConditionRange;
					d.then = then.value;
					d.to = to.value;
					return d;
				})(), then, to);
			};
			SwitchConditionRangeTO.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return SwitchConditionRangeTO.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function SwitchConditionType() {
				return SwitchConditionType.__ks_rt(this, arguments);
			};
			SwitchConditionType.__ks_0 = function(type, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.SwitchConditionType;
					d.type = type.value;
					return d;
				})(), first, last);
			};
			SwitchConditionType.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return SwitchConditionType.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function SwitchExpression() {
				return SwitchExpression.__ks_rt(this, arguments);
			};
			SwitchExpression.__ks_0 = function(expression, clauses, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.SwitchExpression;
					d.attributes = [];
					d.expression = expression.value;
					d.clauses = KSHelper.mapArray(clauses.value, function(clause) {
						return clause;
					});
					return d;
				})(), first, last);
			};
			SwitchExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return SwitchExpression.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function SwitchStatement() {
				return SwitchStatement.__ks_rt(this, arguments);
			};
			SwitchStatement.__ks_0 = function(expression, clauses, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.SwitchStatement;
					d.attributes = [];
					d.expression = expression.value;
					d.clauses = KSHelper.mapArray(clauses.value, function(clause) {
						return clause;
					});
					return d;
				})(), first, last);
			};
			SwitchStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return SwitchStatement.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function SwitchTypeCasting() {
				return SwitchTypeCasting.__ks_rt(this, arguments);
			};
			SwitchTypeCasting.__ks_0 = function(name, type) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.SwitchTypeCasting;
					d.name = name.value;
					d.type = type.value;
					return d;
				})(), name, type);
			};
			SwitchTypeCasting.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return SwitchTypeCasting.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function TaggedTemplateExpression() {
				return TaggedTemplateExpression.__ks_rt(this, arguments);
			};
			TaggedTemplateExpression.__ks_0 = function(tag, template, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.TaggedTemplateExpression;
					d.tag = tag.value;
					d.template = template.value;
					return d;
				})(), first, last);
			};
			TaggedTemplateExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return TaggedTemplateExpression.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function TemplateExpression() {
				return TemplateExpression.__ks_rt(this, arguments);
			};
			TemplateExpression.__ks_0 = function(elements, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.TemplateExpression;
					d.elements = KSHelper.mapArray(elements, function(element) {
						return element.value;
					});
					return d;
				})(), first, last);
			};
			TemplateExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return TemplateExpression.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ThisExpression() {
				return ThisExpression.__ks_rt(this, arguments);
			};
			ThisExpression.__ks_0 = function(name, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ThisExpression;
					d.name = name.value;
					return d;
				})(), first, last);
			};
			ThisExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return ThisExpression.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function ThrowStatement() {
				return ThrowStatement.__ks_rt(this, arguments);
			};
			ThrowStatement.__ks_0 = function(first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ThrowStatement;
					d.attributes = [];
					return d;
				})(), first);
			};
			ThrowStatement.__ks_1 = function(value, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.ThrowStatement;
					d.attributes = [];
					d.value = value.value;
					return d;
				})(), first, last);
			};
			ThrowStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return ThrowStatement.__ks_0.call(that, args[0]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return ThrowStatement.__ks_1.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function TryExpression() {
				return TryExpression.__ks_rt(this, arguments);
			};
			TryExpression.__ks_0 = function(modifiers, operand, defaultValue, first, last) {
				if(defaultValue === void 0) {
					defaultValue = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.TryExpression;
					d.modifiers = modifiers;
					d.argument = operand.value;
					return d;
				})(), first, last);
				if(defaultValue !== null) {
					node.defaultValue = defaultValue.value;
				}
				return node;
			};
			TryExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t0(args[3]) && t0(args[4])) {
						return TryExpression.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function TryStatement() {
				return TryStatement.__ks_rt(this, arguments);
			};
			TryStatement.__ks_0 = function(body, catchClauses, catchClause, finalizer, first, last) {
				if(catchClause === void 0) {
					catchClause = null;
				}
				if(finalizer === void 0) {
					finalizer = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.TryStatement;
					d.attributes = [];
					d.body = body.value;
					d.catchClauses = KSHelper.mapArray(catchClauses, function(clause) {
						return clause.value;
					});
					return d;
				})(), first, last);
				if(catchClause !== null) {
					node.catchClause = catchClause.value;
				}
				if(finalizer !== null) {
					node.finalizer = finalizer.value;
				}
				return node;
			};
			TryStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 6) {
					if(t0(args[0]) && t0(args[1]) && t0(args[4]) && t0(args[5])) {
						return TryStatement.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
					}
				}
				throw KSHelper.badArgs();
			};
			function TupleDeclaration() {
				return TupleDeclaration.__ks_rt(this, arguments);
			};
			TupleDeclaration.__ks_0 = function(attributes, modifiers, name, __ks_extends_1, fields, first, last) {
				if(__ks_extends_1 === void 0) {
					__ks_extends_1 = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.TupleDeclaration;
					d.attributes = KSHelper.mapArray(attributes, function(attribute) {
						return attribute.value;
					});
					d.modifiers = modifiers;
					d.name = name.value;
					d.fields = fields;
					return d;
				})(), first, last);
				if(__ks_extends_1 !== null) {
					node.extends = __ks_extends_1.value;
				}
				return node;
			};
			TupleDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 7) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[4]) && t0(args[5]) && t0(args[6])) {
						return TupleDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
					}
				}
				throw KSHelper.badArgs();
			};
			function TupleField() {
				return TupleField.__ks_rt(this, arguments);
			};
			TupleField.__ks_0 = function(name, type, defaultValue, first, last) {
				if(name === void 0) {
					name = null;
				}
				if(type === void 0) {
					type = null;
				}
				if(defaultValue === void 0) {
					defaultValue = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.TupleField;
					return d;
				})(), first, last);
				if(KSType.isValue(name)) {
					node.name = name.value;
				}
				if(KSType.isValue(type)) {
					node.type = type.value;
				}
				if(KSType.isValue(defaultValue)) {
					node.defaultValue = defaultValue.value;
				}
				return node;
			};
			TupleField.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[3]) && t0(args[4])) {
						return TupleField.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function TypeReference() {
				return TypeReference.__ks_rt(this, arguments);
			};
			TypeReference.__ks_0 = function(name) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.TypeReference;
					d.modifiers = [];
					d.typeName = name.value;
					return d;
				})(), name);
			};
			TypeReference.__ks_1 = function(modifiers, name, parameters, first, last) {
				if(parameters === void 0) {
					parameters = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.TypeReference;
					d.modifiers = modifiers;
					d.typeName = name.value;
					return d;
				})(), first, last);
				if(parameters !== null) {
					node.typeParameters = KSHelper.mapArray(parameters.value, function(parameter) {
						return parameter.value;
					});
				}
				return node;
			};
			TypeReference.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return TypeReference.__ks_0.call(that, args[0]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t0(args[3]) && t0(args[4])) {
						return TypeReference.__ks_1.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function TypeAliasDeclaration() {
				return TypeAliasDeclaration.__ks_rt(this, arguments);
			};
			TypeAliasDeclaration.__ks_0 = function(name, type, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.TypeAliasDeclaration;
					d.attributes = [];
					d.name = name.value;
					d.type = type.value;
					return d;
				})(), first, last);
			};
			TypeAliasDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return TypeAliasDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function UnaryExpression() {
				return UnaryExpression.__ks_rt(this, arguments);
			};
			UnaryExpression.__ks_0 = function(operator, operand, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.UnaryExpression;
					d.operator = operator.value;
					d.argument = operand.value;
					return d;
				})(), first, last);
			};
			UnaryExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return UnaryExpression.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function UnaryOperator() {
				return UnaryOperator.__ks_rt(this, arguments);
			};
			UnaryOperator.__ks_0 = function(operator, first) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = operator;
					return d;
				})(), first);
			};
			UnaryOperator.__ks_rt = function(that, args) {
				const t0 = value => KSType.isEnumInstance(value, UnaryOperatorKind);
				const t1 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return UnaryOperator.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function UnionType() {
				return UnionType.__ks_rt(this, arguments);
			};
			UnionType.__ks_0 = function(types, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.UnionType;
					d.types = KSHelper.mapArray(types, function(type) {
						return type.value;
					});
					return d;
				})(), first, last);
			};
			UnionType.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return UnionType.__ks_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			function UnlessExpression() {
				return UnlessExpression.__ks_rt(this, arguments);
			};
			UnlessExpression.__ks_0 = function(condition, whenFalse, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.UnlessExpression;
					d.condition = condition.value;
					d.whenFalse = whenFalse.value;
					return d;
				})(), first, last);
			};
			UnlessExpression.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return UnlessExpression.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function UnlessStatement() {
				return UnlessStatement.__ks_rt(this, arguments);
			};
			UnlessStatement.__ks_0 = function(condition, whenFalse, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.UnlessStatement;
					d.attributes = [];
					d.condition = condition.value;
					d.whenFalse = whenFalse.value;
					return d;
				})(), first, last);
			};
			UnlessStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return UnlessStatement.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function UntilStatement() {
				return UntilStatement.__ks_rt(this, arguments);
			};
			UntilStatement.__ks_0 = function(condition, body, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.UntilStatement;
					d.attributes = [];
					d.condition = condition.value;
					d.body = body.value;
					return d;
				})(), first, last);
			};
			UntilStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return UntilStatement.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			function VariableDeclaration() {
				return VariableDeclaration.__ks_rt(this, arguments);
			};
			VariableDeclaration.__ks_0 = function(modifiers, variables, expression, first, last) {
				if(expression === void 0) {
					expression = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.VariableDeclaration;
					d.modifiers = modifiers;
					d.attributes = [];
					d.variables = KSHelper.mapArray(variables, function(variable) {
						return variable.value;
					});
					return d;
				})(), first, last);
				if(expression !== null) {
					node.init = expression.value;
				}
				return node;
			};
			VariableDeclaration.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t0(args[3]) && t0(args[4])) {
						return VariableDeclaration.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function VariableDeclarator() {
				return VariableDeclarator.__ks_rt(this, arguments);
			};
			VariableDeclarator.__ks_0 = function(modifiers, name, type, first, last) {
				if(type === void 0) {
					type = null;
				}
				const node = location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.VariableDeclarator;
					d.modifiers = modifiers;
					d.name = name.value;
					return d;
				})(), first, last);
				if(type !== null) {
					node.type = type.value;
				}
				return node;
			};
			VariableDeclarator.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t0(args[3]) && t0(args[4])) {
						return VariableDeclarator.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			};
			function WhileStatement() {
				return WhileStatement.__ks_rt(this, arguments);
			};
			WhileStatement.__ks_0 = function(condition, body, first, last) {
				return location.__ks_0((() => {
					const d = new Dictionary();
					d.kind = NodeKind.WhileStatement;
					d.attributes = [];
					d.condition = condition.value;
					d.body = body.value;
					return d;
				})(), first, last);
			};
			WhileStatement.__ks_rt = function(that, args) {
				const t0 = KSType.isValue;
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
						return WhileStatement.__ks_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			};
			return {
				reorderExpression,
				AccessorDeclaration,
				ArrayBinding,
				ArrayBindingElement,
				ArrayComprehension,
				ArrayExpression,
				ArrayRangeFI,
				ArrayRangeFO,
				ArrayRangeTI,
				ArrayRangeTO,
				ArrayReference,
				AssignmentOperator,
				AttributeDeclaration,
				AttributeExpression,
				AttributeOperation,
				AwaitExpression,
				BinaryExpression,
				BinaryOperator,
				Block,
				BreakStatement,
				CallExpression,
				CallMacroExpression,
				CatchClause,
				ClassDeclaration,
				ComparisonExpression,
				ComputedPropertyName,
				ConditionalExpression,
				ContinueStatement,
				CreateExpression,
				CurryExpression,
				DestroyStatement,
				DiscloseDeclaration,
				DoUntilStatement,
				DoWhileStatement,
				EnumExpression,
				EnumDeclaration,
				ExclusionType,
				ExportDeclaration,
				ExportDeclarationSpecifier,
				ExportExclusionSpecifier,
				ExportNamedSpecifier,
				ExportPropertiesSpecifier,
				ExportWildcardSpecifier,
				ExpressionStatement,
				ExternDeclaration,
				ExternOrImportDeclaration,
				ExternOrRequireDeclaration,
				FallthroughStatement,
				FieldDeclaration,
				ForFromStatement,
				ForInStatement,
				ForRangeStatement,
				ForOfStatement,
				FunctionDeclaration,
				FunctionExpression,
				FusionType,
				IfExpression,
				IfStatement,
				ImplementDeclaration,
				ImportArgument,
				ImportDeclaration,
				ImportDeclarator,
				ImportExclusionSpecifier,
				ImportNamespaceSpecifier,
				ImportSpecifier,
				Identifier,
				IncludeAgainDeclaration,
				IncludeDeclaration,
				IncludeDeclarator,
				JunctionExpression,
				LambdaExpression,
				Literal,
				MacroDeclaration,
				MacroExpression,
				MacroElementExpression,
				MacroElementLiteral,
				MacroElementNewLine,
				MacroReification,
				MemberExpression,
				MethodDeclaration,
				Modifier,
				Module,
				MutatorDeclaration,
				Nullable,
				NamedArgument,
				NamespaceDeclaration,
				NumericExpression,
				ObjectBinding,
				ObjectBindingElement,
				ObjectExpression,
				ObjectMember,
				ObjectReference,
				ObjectMemberReference,
				OmittedExpression,
				OmittedReference,
				PropertyDeclaration,
				Parameter,
				RegularExpression,
				RequireDeclaration,
				RequireOrExternDeclaration,
				RequireOrImportDeclaration,
				RestModifier,
				ReturnStatement,
				ReturnTypeReference,
				Scope,
				SequenceExpression,
				ShorthandProperty,
				StructDeclaration,
				StructField,
				SwitchClause,
				SwitchConditionArray,
				SwitchConditionObject,
				SwitchConditionRangeFI,
				SwitchConditionRangeFO,
				SwitchConditionRangeTI,
				SwitchConditionRangeTO,
				SwitchConditionType,
				SwitchExpression,
				SwitchStatement,
				SwitchTypeCasting,
				TaggedTemplateExpression,
				TemplateExpression,
				ThisExpression,
				ThrowStatement,
				TryExpression,
				TryStatement,
				TupleDeclaration,
				TupleField,
				TypeReference,
				TypeAliasDeclaration,
				UnaryExpression,
				UnaryOperator,
				UnionType,
				UnlessExpression,
				UnlessStatement,
				UntilStatement,
				VariableDeclaration,
				VariableDeclarator,
				WhileStatement
			};
		});
		const Token = KSHelper.enum(Number, {
			INVALID: 0,
			ABSTRACT: 1,
			AMPERSAND: 2,
			AMPERSAND_AMPERSAND: 3,
			AMPERSAND_AMPERSAND_AMPERSAND: 4,
			AMPERSAND_AMPERSAND_EQUALS: 5,
			AS: 6,
			AS_EXCLAMATION: 7,
			AS_QUESTION: 8,
			ASTERISK: 9,
			ASTERISK_ASTERISK_LEFT_ROUND: 10,
			ASTERISK_DOLLAR_LEFT_ROUND: 11,
			ASTERISK_EQUALS: 12,
			ASYNC: 13,
			AT: 14,
			ATTRIBUTE_IDENTIFIER: 15,
			AUTO: 16,
			AWAIT: 17,
			BINARY_NUMBER: 18,
			BREAK: 19,
			BUT: 20,
			BY: 21,
			CARET: 22,
			CARET_AT_LEFT_ROUND: 23,
			CARET_CARET: 24,
			CARET_CARET_CARET: 25,
			CARET_CARET_EQUALS: 26,
			CARET_CARET_LEFT_ROUND: 27,
			CARET_DOLLAR_LEFT_ROUND: 28,
			CATCH: 29,
			CLASS: 30,
			CLASS_VERSION: 31,
			COLON: 32,
			COLON_COLON: 33,
			COLON_EXCLAMATION: 34,
			COLON_QUESTION: 35,
			COMMA: 36,
			CONTINUE: 37,
			DECIMAL_NUMBER: 38,
			DELETE: 39,
			DESC: 40,
			DISCLOSE: 41,
			DO: 42,
			DOT: 43,
			DOT_DOT: 44,
			DOT_DOT_DOT: 45,
			DYN: 46,
			ELSE: 47,
			ELSE_IF: 48,
			ENUM: 49,
			EOF: 50,
			EQUALS: 51,
			EQUALS_EQUALS: 52,
			EQUALS_RIGHT_ANGLE: 53,
			EXCLAMATION: 54,
			EXCLAMATION_EQUALS: 55,
			EXCLAMATION_EXCLAMATION: 56,
			EXCLAMATION_LEFT_ROUND: 57,
			EXCLAMATION_QUESTION: 58,
			EXCLAMATION_QUESTION_EQUALS: 59,
			EXCLAMATION_TILDE: 60,
			EXPORT: 61,
			EXTENDS: 62,
			EXTERN: 63,
			EXTERN_IMPORT: 64,
			EXTERN_REQUIRE: 65,
			FALLTHROUGH: 66,
			FINAL: 67,
			FINALLY: 68,
			FLAGGED: 69,
			FOR: 70,
			FROM: 71,
			FUNC: 72,
			GET: 73,
			HASH: 74,
			HASH_EXCLAMATION_LEFT_SQUARE: 75,
			HASH_LEFT_SQUARE: 76,
			HEX_NUMBER: 77,
			IDENTIFIER: 78,
			IF: 79,
			IMPL: 80,
			IMPORT: 81,
			IMPORT_LITERAL: 82,
			IN: 83,
			INCLUDE: 84,
			INCLUDE_AGAIN: 85,
			INTERNAL: 86,
			IS: 87,
			IS_NOT: 88,
			LATE: 89,
			LATEINIT: 90,
			LEFT_ANGLE: 91,
			LEFT_ANGLE_EQUALS: 92,
			LEFT_ANGLE_LEFT_ANGLE_EQUALS: 93,
			LEFT_ANGLE_LEFT_ANGLE_LEFT_ANGLE: 94,
			LEFT_CURLY: 95,
			LEFT_ROUND: 96,
			LEFT_SQUARE: 97,
			MACRO: 98,
			MINUS: 99,
			MINUS_EQUALS: 100,
			MINUS_MINUS: 101,
			MINUS_RIGHT_ANGLE: 102,
			MUT: 103,
			NAMESPACE: 104,
			NEW: 105,
			NEWLINE: 106,
			NUMERAL: 107,
			OCTAL_NUMBER: 108,
			OF: 109,
			ON: 110,
			OVERRIDE: 111,
			OVERWRITE: 112,
			PERCENT: 113,
			PERCENT_EQUALS: 114,
			PIPE: 115,
			PIPE_PIPE: 116,
			PIPE_PIPE_EQUALS: 117,
			PIPE_PIPE_PIPE: 118,
			PLUS: 119,
			PLUS_EQUALS: 120,
			PLUS_PLUS: 121,
			PRIVATE: 122,
			PROTECTED: 123,
			PUBLIC: 124,
			QUESTION: 125,
			QUESTION_EQUALS: 126,
			QUESTION_DOT: 127,
			QUESTION_LEFT_ROUND: 128,
			QUESTION_LEFT_SQUARE: 129,
			QUESTION_QUESTION: 130,
			QUESTION_QUESTION_EQUALS: 131,
			RADIX_NUMBER: 132,
			REGEXP: 133,
			REQUIRE: 134,
			REQUIRE_EXTERN: 135,
			REQUIRE_IMPORT: 136,
			RETURN: 137,
			RIGHT_ANGLE: 138,
			RIGHT_ANGLE_EQUALS: 139,
			RIGHT_ANGLE_RIGHT_ANGLE_EQUALS: 140,
			RIGHT_ANGLE_RIGHT_ANGLE_RIGHT_ANGLE: 141,
			RIGHT_CURLY: 142,
			RIGHT_ROUND: 143,
			RIGHT_SQUARE: 144,
			SEALED: 145,
			SET: 146,
			SLASH: 147,
			SLASH_DOT: 148,
			SLASH_DOT_EQUALS: 149,
			SLASH_EQUALS: 150,
			STATIC: 151,
			STRING: 152,
			STRUCT: 153,
			SWITCH: 154,
			SYSTEMIC: 155,
			TEMPLATE_BEGIN: 156,
			TEMPLATE_ELEMENT: 157,
			TEMPLATE_END: 158,
			TEMPLATE_VALUE: 159,
			THROW: 160,
			TIL: 161,
			TILDE: 162,
			TILDE_TILDE: 163,
			TILDE_TILDE_TILDE: 164,
			TO: 165,
			TRY: 166,
			TUPLE: 167,
			TYPE: 168,
			UNDERSCORE: 169,
			UNLESS: 170,
			UNTIL: 171,
			VAR: 172,
			WHEN: 173,
			WHILE: 174,
			WITH: 175
		});
		const overhauls = (() => {
			const d = new Dictionary();
			d[Token.CLASS_VERSION] = (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isString;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(null, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(data) {
					return data.split(".");
				};
				return __ks_rt;
			})();
			d[Token.STRING] = (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isString;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(null, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(data) {
					return data.slice(1, -1).replace(/(^|[^\\])\\('|")/g, "$1$2");
				};
				return __ks_rt;
			})();
			return d;
		})();
		const regex = (() => {
			const d = new Dictionary();
			d.binary_number = /^0b[_0-1]+[a-zA-Z]*/;
			d.class_version = /^\d+(\.\d+(\.\d+)?)?/;
			d.decimal_number = /^[0-9][_0-9]*(?:\.[_0-9]+)?(?:[eE][-+]?[_0-9]+)?(?:[a-zA-Z]*)/;
			d.dot_number = /^\.[_0-9]+(?:[eE][-+]?[_0-9]+|[a-zA-Z]*)/;
			d.double_quote = /^([^\\"]|\\.)*\"/;
			d.hex_number = /^0x[_0-9a-fA-F]+(?:\.[_0-9a-fA-F]+[pP][-+]?[_0-9]+)?[a-zA-Z]*/;
			d.macro_value = /^[^#\r\n]+/;
			d.octal_number = /^0o[_0-7]+(?:\.[_0-7]+[pP][-+]?[_0-9]+)?[a-zA-Z]*/;
			d.radix_number = /^(?:[0-9]|[1-2][0-9]|3[0-6])r[_0-9a-zA-Z]+(?:\.[_0-9a-zA-Z]+)?/;
			d.regex = /^=?(?:[^\n\r\*\\\/\[]|\\[^\n\r]|\[(?:[^\n\r\]\\]|\\[^\n\r])*\])(?:[^\n\r\\\/\[]|\\[^\n\r]|\[(?:[^\n\r\]\\]|\\[^\n\r])*\])*\/[gmi]*/;
			d.resource = /(^\s*\r?\n\s*)|(^\})|(^\s*\/\/[^\r\n]*\r?\n\s*)|(^\s*\/\*)|(^\S+)/;
			d.single_quote = /^([^\\']|\\.)*\'/;
			d.template = /^(?:[^`\\]|\\\\|\\(?!\())+/;
			return d;
		})();
		let M = KSHelper.namespace(function() {
			function ASSIGNEMENT_OPERATOR() {
				return ASSIGNEMENT_OPERATOR.__ks_rt(this, arguments);
			};
			ASSIGNEMENT_OPERATOR.__ks_0 = function(that, index) {
				let c = that.__ks_func_skip_1(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 37) {
					if(that.__ks_func_charAt_0(1) === 61) {
						that.__ks_func_next_0(2);
						return Token.PERCENT_EQUALS;
					}
				}
				else if(c === 38) {
					if((that.__ks_func_charAt_0(1) === 38) && (that.__ks_func_charAt_0(2) === 61)) {
						that.__ks_func_next_0(3);
						return Token.AMPERSAND_AMPERSAND_EQUALS;
					}
				}
				else if(c === 42) {
					if(that.__ks_func_charAt_0(1) === 61) {
						that.__ks_func_next_0(2);
						return Token.ASTERISK_EQUALS;
					}
				}
				else if(c === 43) {
					if(that.__ks_func_charAt_0(1) === 61) {
						that.__ks_func_next_0(2);
						return Token.PLUS_EQUALS;
					}
				}
				else if(c === 45) {
					if(that.__ks_func_charAt_0(1) === 61) {
						that.__ks_func_next_0(2);
						return Token.MINUS_EQUALS;
					}
				}
				else if(c === 47) {
					c = that.__ks_func_charAt_0(1);
					if(c === 46) {
						if(that.__ks_func_charAt_0(2) === 61) {
							that.__ks_func_next_0(3);
							return Token.SLASH_DOT_EQUALS;
						}
					}
					else if(c === 61) {
						that.__ks_func_next_0(2);
						return Token.SLASH_EQUALS;
					}
				}
				else if(c === 60) {
					if((that.__ks_func_charAt_0(1) === 60) && (that.__ks_func_charAt_0(2) === 61)) {
						that.__ks_func_next_0(3);
						return Token.LEFT_ANGLE_LEFT_ANGLE_EQUALS;
					}
				}
				else if(c === 61) {
					c = that.__ks_func_charAt_0(1);
					if((c !== 61) && (c !== 62)) {
						that.__ks_func_next_0(1);
						return Token.EQUALS;
					}
				}
				else if(c === 62) {
					if((that.__ks_func_charAt_0(1) === 62) && (that.__ks_func_charAt_0(2) === 61)) {
						that.__ks_func_next_0(3);
						return Token.RIGHT_ANGLE_RIGHT_ANGLE_EQUALS;
					}
				}
				else if(c === 63) {
					c = that.__ks_func_charAt_0(1);
					if(c === 61) {
						that.__ks_func_next_0(2);
						return Token.QUESTION_EQUALS;
					}
					else if(c === 63) {
						if(that.__ks_func_charAt_0(2) === 61) {
							that.__ks_func_next_0(3);
							return Token.QUESTION_QUESTION_EQUALS;
						}
					}
				}
				else if(c === 94) {
					if((that.__ks_func_charAt_0(1) === 94) && (that.__ks_func_charAt_0(2) === 61)) {
						that.__ks_func_next_0(3);
						return Token.CARET_CARET_EQUALS;
					}
				}
				else if(c === 124) {
					if((that.__ks_func_charAt_0(1) === 124) && (that.__ks_func_charAt_0(2) === 61)) {
						that.__ks_func_next_0(3);
						return Token.PIPE_PIPE_EQUALS;
					}
				}
				return Token.INVALID;
			};
			ASSIGNEMENT_OPERATOR.__ks_rt = function(that, args) {
				const t0 = value => KSType.isClassInstance(value, Scanner);
				const t1 = KSType.isNumber;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return ASSIGNEMENT_OPERATOR.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function BINARY_OPERATOR() {
				return BINARY_OPERATOR.__ks_rt(this, arguments);
			};
			BINARY_OPERATOR.__ks_0 = function(that, index) {
				let c = that.__ks_func_skip_1(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 33) {
					c = that.__ks_func_charAt_0(1);
					if(c === 61) {
						that.__ks_func_next_0(2);
						return Token.EXCLAMATION_EQUALS;
					}
					else if((c === 63) && (that.__ks_func_charAt_0(2) === 61)) {
						that.__ks_func_next_0(3);
						return Token.EXCLAMATION_QUESTION_EQUALS;
					}
					else if(c === 126) {
						that.__ks_func_next_0(2);
						return Token.EXCLAMATION_TILDE;
					}
				}
				else if(c === 37) {
					if(that.__ks_func_charAt_0(1) === 61) {
						that.__ks_func_next_0(2);
						return Token.PERCENT_EQUALS;
					}
					else {
						that.__ks_func_next_0(1);
						return Token.PERCENT;
					}
				}
				else if(c === 38) {
					c = that.__ks_func_charAt_0(1);
					if(c === 38) {
						if(that.__ks_func_charAt_0(2) === 38) {
							that.__ks_func_next_0(3);
							return Token.AMPERSAND_AMPERSAND_AMPERSAND;
						}
						else if(that.__ks_func_charAt_0(2) === 61) {
							that.__ks_func_next_0(3);
							return Token.AMPERSAND_AMPERSAND_EQUALS;
						}
						else {
							that.__ks_func_next_0(2);
							return Token.AMPERSAND_AMPERSAND;
						}
					}
				}
				else if(c === 42) {
					if(that.__ks_func_charAt_0(1) === 61) {
						that.__ks_func_next_0(2);
						return Token.ASTERISK_EQUALS;
					}
					else {
						that.__ks_func_next_0(1);
						return Token.ASTERISK;
					}
				}
				else if(c === 43) {
					c = that.__ks_func_charAt_0(1);
					if(c === 61) {
						that.__ks_func_next_0(2);
						return Token.PLUS_EQUALS;
					}
					else if(c !== 43) {
						that.__ks_func_next_0(1);
						return Token.PLUS;
					}
				}
				else if(c === 45) {
					c = that.__ks_func_charAt_0(1);
					if(c === 61) {
						that.__ks_func_next_0(2);
						return Token.MINUS_EQUALS;
					}
					else if(c === 62) {
						that.__ks_func_next_0(2);
						return Token.MINUS_RIGHT_ANGLE;
					}
					else if(c !== 45) {
						that.__ks_func_next_0(1);
						return Token.MINUS;
					}
				}
				else if(c === 47) {
					c = that.__ks_func_charAt_0(1);
					if(c === 46) {
						if(that.__ks_func_charAt_0(2) === 61) {
							that.__ks_func_next_0(3);
							return Token.SLASH_DOT_EQUALS;
						}
						else {
							that.__ks_func_next_0(2);
							return Token.SLASH_DOT;
						}
					}
					else if(c === 61) {
						that.__ks_func_next_0(2);
						return Token.SLASH_EQUALS;
					}
					else {
						that.__ks_func_next_0(1);
						return Token.SLASH;
					}
				}
				else if(c === 60) {
					c = that.__ks_func_charAt_0(1);
					if(c === 60) {
						if(that.__ks_func_charAt_0(2) === 60) {
							that.__ks_func_next_0(3);
							return Token.LEFT_ANGLE_LEFT_ANGLE_LEFT_ANGLE;
						}
						else if(that.__ks_func_charAt_0(2) === 61) {
							that.__ks_func_next_0(3);
							return Token.LEFT_ANGLE_LEFT_ANGLE_EQUALS;
						}
					}
					else if(c === 61) {
						that.__ks_func_next_0(2);
						return Token.LEFT_ANGLE_EQUALS;
					}
					else {
						that.__ks_func_next_0(1);
						return Token.LEFT_ANGLE;
					}
				}
				else if(c === 61) {
					c = that.__ks_func_charAt_0(1);
					if(c === 61) {
						that.__ks_func_next_0(2);
						return Token.EQUALS_EQUALS;
					}
					else if(c !== 62) {
						that.__ks_func_next_0(1);
						return Token.EQUALS;
					}
				}
				else if(c === 62) {
					c = that.__ks_func_charAt_0(1);
					if(c === 61) {
						that.__ks_func_next_0(2);
						return Token.RIGHT_ANGLE_EQUALS;
					}
					else if(c === 62) {
						if(that.__ks_func_charAt_0(2) === 61) {
							that.__ks_func_next_0(3);
							return Token.RIGHT_ANGLE_RIGHT_ANGLE_EQUALS;
						}
						else if(that.__ks_func_charAt_0(2) === 62) {
							that.__ks_func_next_0(3);
							return Token.RIGHT_ANGLE_RIGHT_ANGLE_RIGHT_ANGLE;
						}
					}
					else {
						that.__ks_func_next_0(1);
						return Token.RIGHT_ANGLE;
					}
				}
				else if(c === 63) {
					c = that.__ks_func_charAt_0(1);
					if(c === 61) {
						that.__ks_func_next_0(2);
						return Token.QUESTION_EQUALS;
					}
					else if(c === 63) {
						if(that.__ks_func_charAt_0(2) === 61) {
							that.__ks_func_next_0(3);
							return Token.QUESTION_QUESTION_EQUALS;
						}
						else {
							that.__ks_func_next_0(2);
							return Token.QUESTION_QUESTION;
						}
					}
				}
				else if(c === 94) {
					c = that.__ks_func_charAt_0(1);
					if(c === 94) {
						if(that.__ks_func_charAt_0(2) === 61) {
							that.__ks_func_next_0(3);
							return Token.CARET_CARET_EQUALS;
						}
						else if(that.__ks_func_charAt_0(2) === 94) {
							that.__ks_func_next_0(3);
							return Token.CARET_CARET_CARET;
						}
						else {
							that.__ks_func_next_0(2);
							return Token.CARET_CARET;
						}
					}
				}
				else if(c === 124) {
					c = that.__ks_func_charAt_0(1);
					if(c === 124) {
						if(that.__ks_func_charAt_0(2) === 61) {
							that.__ks_func_next_0(3);
							return Token.PIPE_PIPE_EQUALS;
						}
						else if(that.__ks_func_charAt_0(2) === 124) {
							that.__ks_func_next_0(3);
							return Token.PIPE_PIPE_PIPE;
						}
						else {
							that.__ks_func_next_0(2);
							return Token.PIPE_PIPE;
						}
					}
				}
				else if(c === 126) {
					if(that.__ks_func_charAt_0(1) === 126) {
						that.__ks_func_next_0(2);
						return Token.TILDE_TILDE;
					}
				}
				return Token.INVALID;
			};
			BINARY_OPERATOR.__ks_rt = function(that, args) {
				const t0 = value => KSType.isClassInstance(value, Scanner);
				const t1 = KSType.isNumber;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return BINARY_OPERATOR.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function EXPORT_STATEMENT() {
				return EXPORT_STATEMENT.__ks_rt(this, arguments);
			};
			EXPORT_STATEMENT.__ks_0 = function(that, index) {
				let c = that.__ks_func_skip_1(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if((c === 95) && !that.__ks_func_isBoundary_0(1)) {
					that.__ks_func_scanIdentifier_0(false);
					return Token.IDENTIFIER;
				}
				else if(c === 97) {
					const identifier = that.__ks_func_scanIdentifier_0(true);
					if(identifier === "bstract") {
						return Token.ABSTRACT;
					}
					else if(identifier === "sync") {
						return Token.ASYNC;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 99) {
					const identifier = that.__ks_func_scanIdentifier_0(true);
					if(identifier === "lass") {
						return Token.CLASS;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 101) {
					if(that.__ks_func_scanIdentifier_0(true) === "num") {
						return Token.ENUM;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 102) {
					const identifier = that.__ks_func_scanIdentifier_0(true);
					if(identifier === "inal") {
						return Token.FINAL;
					}
					else if(identifier === "lagged") {
						return Token.FLAGGED;
					}
					else if(identifier === "unc") {
						return Token.FUNC;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 109) {
					if(that.__ks_func_scanIdentifier_0(true) === "acro") {
						return Token.MACRO;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 110) {
					if(that.__ks_func_scanIdentifier_0(true) === "amespace") {
						return Token.NAMESPACE;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 115) {
					const identifier = that.__ks_func_scanIdentifier_0(true);
					if(identifier === "ealed") {
						return Token.SEALED;
					}
					else if(identifier === "truct") {
						return Token.STRUCT;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 116) {
					const identifier = that.__ks_func_scanIdentifier_0(true);
					if(identifier === "uple") {
						return Token.TUPLE;
					}
					else if(identifier === "ype") {
						return Token.TYPE;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 118) {
					if(that.__ks_func_scanIdentifier_0(true) === "ar") {
						return Token.VAR;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if((c === 36) || ((c >= 65) && (c <= 90)) || ((c >= 97) && (c <= 122))) {
					that.__ks_func_scanIdentifier_0(false);
					return Token.IDENTIFIER;
				}
				return Token.INVALID;
			};
			EXPORT_STATEMENT.__ks_rt = function(that, args) {
				const t0 = value => KSType.isClassInstance(value, Scanner);
				const t1 = KSType.isNumber;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return EXPORT_STATEMENT.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function EXTERN_STATEMENT() {
				return EXTERN_STATEMENT.__ks_rt(this, arguments);
			};
			EXTERN_STATEMENT.__ks_0 = function(that, index) {
				let c = that.__ks_func_skip_1(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if((c === 95) && !that.__ks_func_isBoundary_0(1)) {
					that.__ks_func_scanIdentifier_0(false);
					return Token.IDENTIFIER;
				}
				else if(c === 97) {
					const identifier = that.__ks_func_scanIdentifier_0(true);
					if(identifier === "bstract") {
						return Token.ABSTRACT;
					}
					else if(identifier === "sync") {
						return Token.ASYNC;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 99) {
					const identifier = that.__ks_func_scanIdentifier_0(true);
					if(identifier === "lass") {
						return Token.CLASS;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 102) {
					if(that.__ks_func_scanIdentifier_0(true) === "unc") {
						return Token.FUNC;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 110) {
					if(that.__ks_func_scanIdentifier_0(true) === "amespace") {
						return Token.NAMESPACE;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 115) {
					const identifier = that.__ks_func_scanIdentifier_0(true);
					if(identifier === "ealed") {
						return Token.SEALED;
					}
					else if(identifier === "ystemic") {
						return Token.SYSTEMIC;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 118) {
					if(that.__ks_func_scanIdentifier_0(true) === "ar") {
						return Token.VAR;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if((c === 36) || ((c >= 65) && (c <= 90)) || ((c >= 97) && (c <= 122))) {
					that.__ks_func_scanIdentifier_0(false);
					return Token.IDENTIFIER;
				}
				return Token.INVALID;
			};
			EXTERN_STATEMENT.__ks_rt = function(that, args) {
				const t0 = value => KSType.isClassInstance(value, Scanner);
				const t1 = KSType.isNumber;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return EXTERN_STATEMENT.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function JUNCTION_OPERATOR() {
				return JUNCTION_OPERATOR.__ks_rt(this, arguments);
			};
			JUNCTION_OPERATOR.__ks_0 = function(that, index) {
				let c = that.__ks_func_skip_1(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 38) {
					if(that.__ks_func_charAt_0(1) !== 38) {
						that.__ks_func_next_0(1);
						return Token.AMPERSAND;
					}
				}
				else if(c === 94) {
					if(that.__ks_func_charAt_0(1) !== 94) {
						that.__ks_func_next_0(1);
						return Token.CARET;
					}
				}
				else if(c === 124) {
					if(that.__ks_func_charAt_0(1) !== 124) {
						that.__ks_func_next_0(1);
						return Token.PIPE;
					}
				}
				return Token.INVALID;
			};
			JUNCTION_OPERATOR.__ks_rt = function(that, args) {
				const t0 = value => KSType.isClassInstance(value, Scanner);
				const t1 = KSType.isNumber;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return JUNCTION_OPERATOR.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function MACRO() {
				return MACRO.__ks_rt(this, arguments);
			};
			MACRO.__ks_0 = function(that, index) {
				let c = that._data.charCodeAt(++index);
				if((c === 13) && (that.__ks_func_charAt_0(1) === 10)) {
					that.__ks_func_nextLine_0(2);
					return Token.NEWLINE;
				}
				else if((c === 10) || (c === 13)) {
					that.__ks_func_nextLine_0(1);
					return Token.NEWLINE;
				}
				else if(c === 35) {
					that.__ks_func_next_0(1);
					return Token.HASH;
				}
				else if(c === 40) {
					that.__ks_func_next_0(1);
					return Token.LEFT_ROUND;
				}
				else if(c === 41) {
					that.__ks_func_next_0(1);
					return Token.RIGHT_ROUND;
				}
				else if(c === 123) {
					that.__ks_func_next_0(1);
					return Token.LEFT_CURLY;
				}
				else if(c === 125) {
					that.__ks_func_next_0(1);
					return Token.RIGHT_CURLY;
				}
				const from = index;
				while(++index < that._length) {
					c = that._data.charCodeAt(index);
					if((c === 10) || (c === 13) || (c === 35) || (c === 40) || (c === 41) || (c === 123) || (c === 125)) {
						that.__ks_func_next_0(index - from);
						return Token.INVALID;
					}
				}
				if(index === (from + 1)) {
					return Token.EOF;
				}
				else {
					that.__ks_func_next_0(index - from);
					return Token.INVALID;
				}
			};
			MACRO.__ks_rt = function(that, args) {
				const t0 = value => KSType.isClassInstance(value, Scanner);
				const t1 = KSType.isNumber;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return MACRO.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function MODULE_STATEMENT() {
				return MODULE_STATEMENT.__ks_rt(this, arguments);
			};
			MODULE_STATEMENT.__ks_0 = function(that, index) {
				let c = that.__ks_func_skip_1(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 100) {
					if((that.__ks_func_charAt_0(1) === 105) && (that.__ks_func_charAt_0(2) === 115) && (that.__ks_func_charAt_0(3) === 99) && (that.__ks_func_charAt_0(4) === 108) && (that.__ks_func_charAt_0(5) === 111) && (that.__ks_func_charAt_0(6) === 115) && (that.__ks_func_charAt_0(7) === 101) && that.__ks_func_isBoundary_0(8)) {
						that.__ks_func_next_0(8);
						return Token.DISCLOSE;
					}
				}
				else if(c === 101) {
					if((that.__ks_func_charAt_0(1) === 120) && (that.__ks_func_charAt_0(2) === 112) && (that.__ks_func_charAt_0(3) === 111) && (that.__ks_func_charAt_0(4) === 114) && (that.__ks_func_charAt_0(5) === 116) && that.__ks_func_isBoundary_0(6)) {
						that.__ks_func_next_0(6);
						return Token.EXPORT;
					}
					else if((that.__ks_func_charAt_0(1) === 120) && (that.__ks_func_charAt_0(2) === 116) && (that.__ks_func_charAt_0(3) === 101) && (that.__ks_func_charAt_0(4) === 114) && (that.__ks_func_charAt_0(5) === 110)) {
						if(that.__ks_func_charAt_0(6) === 124) {
							if((that.__ks_func_charAt_0(7) === 105) && (that.__ks_func_charAt_0(8) === 109) && (that.__ks_func_charAt_0(9) === 112) && (that.__ks_func_charAt_0(10) === 111) && (that.__ks_func_charAt_0(11) === 114) && (that.__ks_func_charAt_0(12) === 116) && that.__ks_func_isBoundary_0(13)) {
								that.__ks_func_next_0(13);
								return Token.EXTERN_IMPORT;
							}
							else if((that.__ks_func_charAt_0(7) === 114) && (that.__ks_func_charAt_0(8) === 101) && (that.__ks_func_charAt_0(9) === 113) && (that.__ks_func_charAt_0(10) === 117) && (that.__ks_func_charAt_0(11) === 105) && (that.__ks_func_charAt_0(12) === 114) && (that.__ks_func_charAt_0(13) === 101) && that.__ks_func_isBoundary_0(14)) {
								that.__ks_func_next_0(14);
								return Token.EXTERN_REQUIRE;
							}
						}
						else if(that.__ks_func_isBoundary_0(6)) {
							that.__ks_func_next_0(6);
							return Token.EXTERN;
						}
					}
				}
				else if(c === 105) {
					if((that.__ks_func_charAt_0(1) === 110) && (that.__ks_func_charAt_0(2) === 99) && (that.__ks_func_charAt_0(3) === 108) && (that.__ks_func_charAt_0(4) === 117) && (that.__ks_func_charAt_0(5) === 100) && (that.__ks_func_charAt_0(6) === 101)) {
						if((that.__ks_func_charAt_0(7) === 32) && (that.__ks_func_charAt_0(8) === 97) && (that.__ks_func_charAt_0(9) === 103) && (that.__ks_func_charAt_0(10) === 97) && (that.__ks_func_charAt_0(11) === 105) && (that.__ks_func_charAt_0(12) === 110) && that.__ks_func_isBoundary_0(13)) {
							that.__ks_func_next_0(13);
							return Token.INCLUDE_AGAIN;
						}
						else if(that.__ks_func_isBoundary_0(7)) {
							that.__ks_func_next_0(7);
							return Token.INCLUDE;
						}
					}
				}
				else if(c === 114) {
					if((that.__ks_func_charAt_0(1) === 101) && (that.__ks_func_charAt_0(2) === 113) && (that.__ks_func_charAt_0(3) === 117) && (that.__ks_func_charAt_0(4) === 105) && (that.__ks_func_charAt_0(5) === 114) && (that.__ks_func_charAt_0(6) === 101)) {
						if(that.__ks_func_charAt_0(7) === 124) {
							if((that.__ks_func_charAt_0(8) === 101) && (that.__ks_func_charAt_0(9) === 120) && (that.__ks_func_charAt_0(10) === 116) && (that.__ks_func_charAt_0(11) === 101) && (that.__ks_func_charAt_0(12) === 114) && (that.__ks_func_charAt_0(13) === 110) && that.__ks_func_isBoundary_0(14)) {
								that.__ks_func_next_0(14);
								return Token.REQUIRE_EXTERN;
							}
							else if((that.__ks_func_charAt_0(8) === 105) && (that.__ks_func_charAt_0(9) === 109) && (that.__ks_func_charAt_0(10) === 112) && (that.__ks_func_charAt_0(11) === 111) && (that.__ks_func_charAt_0(12) === 114) && (that.__ks_func_charAt_0(13) === 116) && that.__ks_func_isBoundary_0(14)) {
								that.__ks_func_next_0(14);
								return Token.REQUIRE_IMPORT;
							}
						}
						else if(that.__ks_func_isBoundary_0(7)) {
							that.__ks_func_next_0(7);
							return Token.REQUIRE;
						}
					}
				}
				return Token.INVALID;
			};
			MODULE_STATEMENT.__ks_rt = function(that, args) {
				const t0 = value => KSType.isClassInstance(value, Scanner);
				const t1 = KSType.isNumber;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return MODULE_STATEMENT.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function NUMBER() {
				return NUMBER.__ks_rt(this, arguments);
			};
			NUMBER.__ks_0 = function(that, index) {
				let c = that.__ks_func_skip_1(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 46) {
					let substr = that._data.substr(that._index);
					let match, __ks_0;
					if(KSType.isValue(__ks_0 = regex.dot_number.exec(substr)) ? (match = __ks_0, true) : false) {
						that.__ks_func_next_0(match[0].length);
						return Token.DECIMAL_NUMBER;
					}
				}
				else if((c >= 48) && (c <= 57)) {
					let substr = that._data.substr(that._index);
					let match, __ks_0;
					if(KSType.isValue(__ks_0 = regex.binary_number.exec(substr)) ? (match = __ks_0, true) : false) {
						that.__ks_func_next_0(match[0].length);
						return Token.BINARY_NUMBER;
					}
					else if(KSType.isValue(__ks_0 = regex.octal_number.exec(substr)) ? (match = __ks_0, true) : false) {
						that.__ks_func_next_0(match[0].length);
						return Token.OCTAL_NUMBER;
					}
					else if(KSType.isValue(__ks_0 = regex.hex_number.exec(substr)) ? (match = __ks_0, true) : false) {
						that.__ks_func_next_0(match[0].length);
						return Token.HEX_NUMBER;
					}
					else if(KSType.isValue(__ks_0 = regex.radix_number.exec(substr)) ? (match = __ks_0, true) : false) {
						that.__ks_func_next_0(match[0].length);
						return Token.RADIX_NUMBER;
					}
					else if(KSType.isValue(__ks_0 = regex.decimal_number.exec(substr)) ? (match = __ks_0, true) : false) {
						that.__ks_func_next_0(match[0].length);
						return Token.DECIMAL_NUMBER;
					}
				}
				return Token.INVALID;
			};
			NUMBER.__ks_rt = function(that, args) {
				const t0 = value => KSType.isClassInstance(value, Scanner);
				const t1 = KSType.isNumber;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return NUMBER.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function OPERAND() {
				return OPERAND.__ks_rt(this, arguments);
			};
			OPERAND.__ks_0 = function(that, index) {
				let c = that.__ks_func_skip_1(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 34) {
					let match = regex.double_quote.exec(that.__ks_func_substringAt_0(1));
					if(KSType.isValue(match)) {
						that.__ks_func_next_0(match[0].length + 1);
						return Token.STRING;
					}
				}
				else if(c === 36) {
					that.__ks_func_scanIdentifier_0(false);
					return Token.IDENTIFIER;
				}
				else if(c === 39) {
					let match, __ks_0, __ks_1;
					if(KSType.isValue(__ks_0 = regex.single_quote.exec(that.__ks_func_substringAt_0(1))) ? (match = __ks_0, true) : false) {
						that.__ks_func_next_0(match[0].length + 1);
						return Token.STRING;
					}
				}
				else if(c === 40) {
					that.__ks_func_next_0(1);
					return Token.LEFT_ROUND;
				}
				else if(c === 47) {
					let match, __ks_0, __ks_1;
					if(KSType.isValue(__ks_0 = regex.regex.exec(that.__ks_func_substringAt_0(1))) ? (match = __ks_0, true) : false) {
						that.__ks_func_next_0(match[0].length + 1);
						return Token.REGEXP;
					}
				}
				else if(c === 64) {
					that.__ks_func_next_0(1);
					return Token.AT;
				}
				else if((c >= 65) && (c <= 90)) {
					that.__ks_func_scanIdentifier_0(false);
					return Token.IDENTIFIER;
				}
				else if(c === 91) {
					that.__ks_func_next_0(1);
					return Token.LEFT_SQUARE;
				}
				else if((c === 95) && !that.__ks_func_isBoundary_0(1)) {
					that.__ks_func_scanIdentifier_0(false);
					return Token.IDENTIFIER;
				}
				else if(c === 96) {
					that.__ks_func_next_0(1);
					return Token.TEMPLATE_BEGIN;
				}
				else if(c === 110) {
					if(that.__ks_func_scanIdentifier_0(true) === "ew") {
						return Token.NEW;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if((c >= 97) && (c <= 122)) {
					that.__ks_func_scanIdentifier_0(false);
					return Token.IDENTIFIER;
				}
				else if(c === 123) {
					that.__ks_func_next_0(1);
					return Token.LEFT_CURLY;
				}
				return Token.INVALID;
			};
			OPERAND.__ks_rt = function(that, args) {
				const t0 = value => KSType.isClassInstance(value, Scanner);
				const t1 = KSType.isNumber;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return OPERAND.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function OPERAND_JUNCTION() {
				return OPERAND_JUNCTION.__ks_rt(this, arguments);
			};
			OPERAND_JUNCTION.__ks_0 = function(that, index) {
				let c = that._data.charCodeAt(index + 1);
				let p = that._data.charCodeAt(index);
				if((p === 9) || (p === 32)) {
					return Token.INVALID;
				}
				else if((c === 13) && (that.__ks_func_charAt_0(1) === 10)) {
					that.__ks_func_nextLine_0(2);
					return Token.NEWLINE;
				}
				else if((c === 10) || (c === 13)) {
					that.__ks_func_nextLine_0(1);
					return Token.NEWLINE;
				}
				else if(c === 33) {
					if(that.__ks_func_charAt_0(1) === 40) {
						that.__ks_func_next_0(2);
						return Token.EXCLAMATION_LEFT_ROUND;
					}
				}
				else if(c === 40) {
					that.__ks_func_next_0(1);
					return Token.LEFT_ROUND;
				}
				else if(c === 42) {
					if(that.__ks_func_charAt_0(2) === 40) {
						c = that.__ks_func_charAt_0(1);
						if(c === 36) {
							that.__ks_func_next_0(3);
							return Token.ASTERISK_DOLLAR_LEFT_ROUND;
						}
						else if(c === 42) {
							that.__ks_func_next_0(3);
							return Token.ASTERISK_ASTERISK_LEFT_ROUND;
						}
					}
				}
				else if(c === 46) {
					if(((c = that.__ks_func_charAt_0(1)) !== 46) && (c !== 9) && (c !== 32)) {
						that.__ks_func_next_0(1);
						return Token.DOT;
					}
				}
				else if(c === 58) {
					c = that.__ks_func_charAt_0(1);
					const c2 = that.__ks_func_charAt_0(2);
					if((c === 33) && (c2 !== 9) && (c2 !== 32)) {
						that.__ks_func_next_0(2);
						return Token.COLON_EXCLAMATION;
					}
					else if((c === 58) && (c2 !== 9) && (c2 !== 32)) {
						that.__ks_func_next_0(2);
						return Token.COLON_COLON;
					}
					else if((c === 63) && (c2 !== 9) && (c2 !== 32)) {
						that.__ks_func_next_0(2);
						return Token.COLON_QUESTION;
					}
					else if((c !== 61) && (c !== 9) && (c !== 32)) {
						that.__ks_func_next_0(1);
						return Token.COLON;
					}
				}
				else if(c === 63) {
					c = that.__ks_func_charAt_0(1);
					if(c === 40) {
						that.__ks_func_next_0(2);
						return Token.QUESTION_LEFT_ROUND;
					}
					else if((c === 46) && !(((c = that.__ks_func_charAt_0(2)) === 9) || (c === 32))) {
						that.__ks_func_next_0(2);
						return Token.QUESTION_DOT;
					}
					else if(c === 91) {
						that.__ks_func_next_0(2);
						return Token.QUESTION_LEFT_SQUARE;
					}
				}
				else if(c === 91) {
					that.__ks_func_next_0(1);
					return Token.LEFT_SQUARE;
				}
				else if(c === 94) {
					if(that.__ks_func_charAt_0(2) === 40) {
						c = that.__ks_func_charAt_0(1);
						if(c === 36) {
							that.__ks_func_next_0(3);
							return Token.CARET_DOLLAR_LEFT_ROUND;
						}
						else if(c === 64) {
							that.__ks_func_next_0(3);
							return Token.CARET_AT_LEFT_ROUND;
						}
						else if(c === 94) {
							that.__ks_func_next_0(3);
							return Token.CARET_CARET_LEFT_ROUND;
						}
					}
				}
				else if(c === 96) {
					that.__ks_func_next_0(1);
					return Token.TEMPLATE_BEGIN;
				}
				return Token.INVALID;
			};
			OPERAND_JUNCTION.__ks_rt = function(that, args) {
				const t0 = value => KSType.isClassInstance(value, Scanner);
				const t1 = KSType.isNumber;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return OPERAND_JUNCTION.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function POSTFIX_OPERATOR() {
				return POSTFIX_OPERATOR.__ks_rt(this, arguments);
			};
			POSTFIX_OPERATOR.__ks_0 = function(that, index) {
				let p = that._data.charCodeAt(index);
				let c = that._data.charCodeAt(index + 1);
				if((p === 9) || (p === 32)) {
					return Token.INVALID;
				}
				else if(c === 33) {
					if((c = that.__ks_func_charAt_0(1)) === 33) {
						that.__ks_func_next_0(2);
						return Token.EXCLAMATION_EXCLAMATION;
					}
					else if(c === 63) {
						that.__ks_func_next_0(2);
						return Token.EXCLAMATION_QUESTION;
					}
				}
				else if(c === 43) {
					if(that.__ks_func_charAt_0(1) === 43) {
						that.__ks_func_next_0(2);
						return Token.PLUS_PLUS;
					}
				}
				else if(c === 45) {
					if(that.__ks_func_charAt_0(1) === 45) {
						that.__ks_func_next_0(2);
						return Token.MINUS_MINUS;
					}
				}
				else if(c === 63) {
					if(!(((c = that.__ks_func_charAt_0(1)) === 40) || (c === 46) || (c === 61) || (c === 63) || (c === 91))) {
						that.__ks_func_next_0(1);
						return Token.QUESTION;
					}
				}
				return Token.INVALID;
			};
			POSTFIX_OPERATOR.__ks_rt = function(that, args) {
				const t0 = value => KSType.isClassInstance(value, Scanner);
				const t1 = KSType.isNumber;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return POSTFIX_OPERATOR.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function PREFIX_OPERATOR() {
				return PREFIX_OPERATOR.__ks_rt(this, arguments);
			};
			PREFIX_OPERATOR.__ks_0 = function(that, index) {
				let c = that.__ks_func_skip_1(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 33) {
					if(!(((c = that.__ks_func_charAt_0(1)) === 61) || ((c === 63) && (that.__ks_func_charAt_0(2) === 61)) || (c === 9) || (c === 32))) {
						that.__ks_func_next_0(1);
						return Token.EXCLAMATION;
					}
				}
				else if(c === 43) {
					if((that.__ks_func_charAt_0(1) === 43) && !(((c = that.__ks_func_charAt_0(2)) === 9) || (c === 32))) {
						that.__ks_func_next_0(2);
						return Token.PLUS_PLUS;
					}
				}
				else if(c === 45) {
					c = that.__ks_func_charAt_0(1);
					if(c === 45) {
						if(!(((c = that.__ks_func_charAt_0(2)) === 9) || (c === 32))) {
							that.__ks_func_next_0(2);
							return Token.MINUS_MINUS;
						}
					}
					else if(((c !== 61) && (c !== 9)) || (c !== 32)) {
						that.__ks_func_next_0(1);
						return Token.MINUS;
					}
				}
				else if(c === 46) {
					if((that.__ks_func_charAt_0(1) === 46) && (that.__ks_func_charAt_0(2) === 46) && !(((c = that.__ks_func_charAt_0(3)) === 9) || (c === 32))) {
						that.__ks_func_next_0(3);
						return Token.DOT_DOT_DOT;
					}
				}
				else if(c === 63) {
					if(!(((c = that.__ks_func_charAt_0(1)) === 9) || (c === 32))) {
						that.__ks_func_next_0(1);
						return Token.QUESTION;
					}
				}
				else if(c === 126) {
					if((that.__ks_func_charAt_0(1) === 126) && (that.__ks_func_charAt_0(2) === 126) && !(((c = that.__ks_func_charAt_0(3)) === 9) || (c === 32))) {
						that.__ks_func_next_0(3);
						return Token.TILDE_TILDE_TILDE;
					}
				}
				return Token.INVALID;
			};
			PREFIX_OPERATOR.__ks_rt = function(that, args) {
				const t0 = value => KSType.isClassInstance(value, Scanner);
				const t1 = KSType.isNumber;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return PREFIX_OPERATOR.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function REQUIRE_STATEMENT() {
				return REQUIRE_STATEMENT.__ks_rt(this, arguments);
			};
			REQUIRE_STATEMENT.__ks_0 = function(that, index) {
				let c = that.__ks_func_skip_1(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 101) {
					if(that.__ks_func_scanIdentifier_0(true) === "num") {
						return Token.ENUM;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 102) {
					if(that.__ks_func_scanIdentifier_0(true) === "lagged") {
						return Token.FLAGGED;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 115) {
					if(that.__ks_func_scanIdentifier_0(true) === "truct") {
						return Token.STRUCT;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 116) {
					if(that.__ks_func_scanIdentifier_0(true) === "uple") {
						return Token.TUPLE;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if((c === 36) || ((c >= 65) && (c <= 90)) || ((c >= 97) && (c <= 122))) {
					that.__ks_func_scanIdentifier_0(false);
					return Token.IDENTIFIER;
				}
				return Token.INVALID;
			};
			REQUIRE_STATEMENT.__ks_rt = function(that, args) {
				const t0 = value => KSType.isClassInstance(value, Scanner);
				const t1 = KSType.isNumber;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return REQUIRE_STATEMENT.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function STATEMENT() {
				return STATEMENT.__ks_rt(this, arguments);
			};
			STATEMENT.__ks_0 = function(that, index) {
				let c = that.__ks_func_skip_1(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 97) {
					if((that.__ks_func_charAt_0(1) === 98) && (that.__ks_func_charAt_0(2) === 115) && (that.__ks_func_charAt_0(3) === 116) && (that.__ks_func_charAt_0(4) === 114) && (that.__ks_func_charAt_0(5) === 97) && (that.__ks_func_charAt_0(6) === 99) && (that.__ks_func_charAt_0(7) === 116) && that.__ks_func_isBoundary_0(8)) {
						that.__ks_func_next_0(8);
						return Token.ABSTRACT;
					}
					else if((that.__ks_func_charAt_0(1) === 115) && (that.__ks_func_charAt_0(2) === 121) && (that.__ks_func_charAt_0(3) === 110) && (that.__ks_func_charAt_0(4) === 99) && that.__ks_func_isBoundary_0(5)) {
						that.__ks_func_next_0(5);
						return Token.ASYNC;
					}
					else if((that.__ks_func_charAt_0(1) === 117) && (that.__ks_func_charAt_0(2) === 116) && (that.__ks_func_charAt_0(3) === 111) && that.__ks_func_isBoundary_0(4)) {
						that.__ks_func_next_0(4);
						return Token.AUTO;
					}
				}
				else if(c === 98) {
					if((that.__ks_func_charAt_0(1) === 114) && (that.__ks_func_charAt_0(2) === 101) && (that.__ks_func_charAt_0(3) === 97) && (that.__ks_func_charAt_0(4) === 107) && that.__ks_func_isBoundary_0(5)) {
						that.__ks_func_next_0(5);
						return Token.BREAK;
					}
				}
				else if(c === 99) {
					if((that.__ks_func_charAt_0(1) === 108) && (that.__ks_func_charAt_0(2) === 97) && (that.__ks_func_charAt_0(3) === 115) && (that.__ks_func_charAt_0(4) === 115) && that.__ks_func_isBoundary_0(5)) {
						that.__ks_func_next_0(5);
						return Token.CLASS;
					}
					else if((that.__ks_func_charAt_0(1) === 111) && (that.__ks_func_charAt_0(2) === 110) && (that.__ks_func_charAt_0(3) === 116) && (that.__ks_func_charAt_0(4) === 105) && (that.__ks_func_charAt_0(5) === 110) && (that.__ks_func_charAt_0(6) === 117) && (that.__ks_func_charAt_0(7) === 101) && that.__ks_func_isBoundary_0(8)) {
						that.__ks_func_next_0(8);
						return Token.CONTINUE;
					}
				}
				else if(c === 100) {
					if((that.__ks_func_charAt_0(1) === 111) && that.__ks_func_isBoundary_0(2)) {
						that.__ks_func_next_0(2);
						return Token.DO;
					}
					else if((that.__ks_func_charAt_0(1) === 101) && (that.__ks_func_charAt_0(2) === 108) && (that.__ks_func_charAt_0(3) === 101) && (that.__ks_func_charAt_0(4) === 116) && (that.__ks_func_charAt_0(5) === 101) && that.__ks_func_isBoundary_0(6)) {
						that.__ks_func_next_0(6);
						return Token.DELETE;
					}
				}
				else if(c === 101) {
					if((that.__ks_func_charAt_0(1) === 110) && (that.__ks_func_charAt_0(2) === 117) && (that.__ks_func_charAt_0(3) === 109) && that.__ks_func_isBoundary_0(4)) {
						that.__ks_func_next_0(4);
						return Token.ENUM;
					}
				}
				else if(c === 102) {
					if((that.__ks_func_charAt_0(1) === 111) && (that.__ks_func_charAt_0(2) === 114) && that.__ks_func_isBoundary_0(3)) {
						that.__ks_func_next_0(3);
						return Token.FOR;
					}
					else if((that.__ks_func_charAt_0(1) === 117) && (that.__ks_func_charAt_0(2) === 110) && (that.__ks_func_charAt_0(3) === 99) && that.__ks_func_isBoundary_0(4)) {
						that.__ks_func_next_0(4);
						return Token.FUNC;
					}
					else if((that.__ks_func_charAt_0(1) === 105) && (that.__ks_func_charAt_0(2) === 110) && (that.__ks_func_charAt_0(3) === 97) && (that.__ks_func_charAt_0(4) === 108) && that.__ks_func_isBoundary_0(5)) {
						that.__ks_func_next_0(5);
						return Token.FINAL;
					}
					else if((that.__ks_func_charAt_0(1) === 108) && (that.__ks_func_charAt_0(2) === 97) && (that.__ks_func_charAt_0(3) === 103) && (that.__ks_func_charAt_0(4) === 103) && (that.__ks_func_charAt_0(5) === 101) && (that.__ks_func_charAt_0(6) === 100) && that.__ks_func_isBoundary_0(7)) {
						that.__ks_func_next_0(7);
						return Token.FLAGGED;
					}
					else if((that.__ks_func_charAt_0(1) === 97) && (that.__ks_func_charAt_0(2) === 108) && (that.__ks_func_charAt_0(3) === 108) && (that.__ks_func_charAt_0(4) === 116) && (that.__ks_func_charAt_0(5) === 104) && (that.__ks_func_charAt_0(6) === 114) && (that.__ks_func_charAt_0(7) === 111) && (that.__ks_func_charAt_0(8) === 117) && (that.__ks_func_charAt_0(9) === 103) && (that.__ks_func_charAt_0(10) === 104) && that.__ks_func_isBoundary_0(11)) {
						that.__ks_func_next_0(11);
						return Token.FALLTHROUGH;
					}
				}
				else if(c === 105) {
					if((that.__ks_func_charAt_0(1) === 102) && that.__ks_func_isBoundary_0(2)) {
						that.__ks_func_next_0(2);
						return Token.IF;
					}
					else if((that.__ks_func_charAt_0(1) === 109) && (that.__ks_func_charAt_0(2) === 112) && (that.__ks_func_charAt_0(3) === 108) && that.__ks_func_isBoundary_0(4)) {
						that.__ks_func_next_0(4);
						return Token.IMPL;
					}
					else if((that.__ks_func_charAt_0(1) === 109) && (that.__ks_func_charAt_0(2) === 112) && (that.__ks_func_charAt_0(3) === 111) && (that.__ks_func_charAt_0(4) === 114) && (that.__ks_func_charAt_0(5) === 116) && that.__ks_func_isBoundary_0(6)) {
						that.__ks_func_next_0(6);
						return Token.IMPORT;
					}
				}
				else if(c === 108) {
					if((that.__ks_func_charAt_0(1) === 97) && (that.__ks_func_charAt_0(2) === 116) && (that.__ks_func_charAt_0(3) === 101) && (that.__ks_func_charAt_0(4) === 105) && (that.__ks_func_charAt_0(5) === 110) && (that.__ks_func_charAt_0(6) === 105) && (that.__ks_func_charAt_0(7) === 116) && that.__ks_func_isBoundary_0(8)) {
						that.__ks_func_next_0(8);
						return Token.LATEINIT;
					}
				}
				else if(c === 109) {
					if((that.__ks_func_charAt_0(1) === 97) && (that.__ks_func_charAt_0(2) === 99) && (that.__ks_func_charAt_0(3) === 114) && (that.__ks_func_charAt_0(4) === 111) && that.__ks_func_isBoundary_0(5)) {
						that.__ks_func_next_0(5);
						return Token.MACRO;
					}
				}
				else if(c === 110) {
					if((that.__ks_func_charAt_0(1) === 97) && (that.__ks_func_charAt_0(2) === 109) && (that.__ks_func_charAt_0(3) === 101) && (that.__ks_func_charAt_0(4) === 115) && (that.__ks_func_charAt_0(5) === 112) && (that.__ks_func_charAt_0(6) === 97) && (that.__ks_func_charAt_0(7) === 99) && (that.__ks_func_charAt_0(8) === 101) && that.__ks_func_isBoundary_0(9)) {
						that.__ks_func_next_0(9);
						return Token.NAMESPACE;
					}
				}
				else if(c === 114) {
					if((that.__ks_func_charAt_0(1) === 101) && (that.__ks_func_charAt_0(2) === 116) && (that.__ks_func_charAt_0(3) === 117) && (that.__ks_func_charAt_0(4) === 114) && (that.__ks_func_charAt_0(5) === 110) && that.__ks_func_isBoundary_0(6)) {
						that.__ks_func_next_0(6);
						return Token.RETURN;
					}
				}
				else if(c === 115) {
					if((that.__ks_func_charAt_0(1) === 101) && (that.__ks_func_charAt_0(2) === 97) && (that.__ks_func_charAt_0(3) === 108) && (that.__ks_func_charAt_0(4) === 101) && (that.__ks_func_charAt_0(5) === 100) && that.__ks_func_isBoundary_0(6)) {
						that.__ks_func_next_0(6);
						return Token.SEALED;
					}
					else if((that.__ks_func_charAt_0(1) === 116) && (that.__ks_func_charAt_0(2) === 114) && (that.__ks_func_charAt_0(3) === 117) && (that.__ks_func_charAt_0(4) === 99) && (that.__ks_func_charAt_0(5) === 116) && that.__ks_func_isBoundary_0(6)) {
						that.__ks_func_next_0(6);
						return Token.STRUCT;
					}
					else if((that.__ks_func_charAt_0(1) === 119) && (that.__ks_func_charAt_0(2) === 105) && (that.__ks_func_charAt_0(3) === 116) && (that.__ks_func_charAt_0(4) === 99) && (that.__ks_func_charAt_0(5) === 104) && that.__ks_func_isBoundary_0(6)) {
						that.__ks_func_next_0(6);
						return Token.SWITCH;
					}
				}
				else if(c === 116) {
					if((that.__ks_func_charAt_0(1) === 104) && (that.__ks_func_charAt_0(2) === 114) && (that.__ks_func_charAt_0(3) === 111) && (that.__ks_func_charAt_0(4) === 119) && that.__ks_func_isBoundary_0(5)) {
						that.__ks_func_next_0(5);
						return Token.THROW;
					}
					else if((that.__ks_func_charAt_0(1) === 114) && (that.__ks_func_charAt_0(2) === 121) && that.__ks_func_isBoundary_0(3)) {
						that.__ks_func_next_0(3);
						return Token.TRY;
					}
					else if((that.__ks_func_charAt_0(1) === 117) && (that.__ks_func_charAt_0(2) === 112) && (that.__ks_func_charAt_0(3) === 108) && (that.__ks_func_charAt_0(4) === 101) && that.__ks_func_isBoundary_0(5)) {
						that.__ks_func_next_0(5);
						return Token.TUPLE;
					}
					else if((that.__ks_func_charAt_0(1) === 121) && (that.__ks_func_charAt_0(2) === 112) && (that.__ks_func_charAt_0(3) === 101) && that.__ks_func_isBoundary_0(4)) {
						that.__ks_func_next_0(4);
						return Token.TYPE;
					}
				}
				else if(c === 117) {
					if((that.__ks_func_charAt_0(1) === 110) && (that.__ks_func_charAt_0(2) === 108) && (that.__ks_func_charAt_0(3) === 101) && (that.__ks_func_charAt_0(4) === 115) && (that.__ks_func_charAt_0(5) === 115) && that.__ks_func_isBoundary_0(6)) {
						that.__ks_func_next_0(6);
						return Token.UNLESS;
					}
					else if((that.__ks_func_charAt_0(1) === 110) && (that.__ks_func_charAt_0(2) === 116) && (that.__ks_func_charAt_0(3) === 105) && (that.__ks_func_charAt_0(4) === 108) && that.__ks_func_isBoundary_0(5)) {
						that.__ks_func_next_0(5);
						return Token.UNTIL;
					}
				}
				else if(c === 118) {
					if((that.__ks_func_charAt_0(1) === 97) && (that.__ks_func_charAt_0(2) === 114) && that.__ks_func_isBoundary_0(3)) {
						that.__ks_func_next_0(3);
						return Token.VAR;
					}
				}
				else if(c === 119) {
					if((that.__ks_func_charAt_0(1) === 104) && (that.__ks_func_charAt_0(2) === 105) && (that.__ks_func_charAt_0(3) === 108) && (that.__ks_func_charAt_0(4) === 101) && that.__ks_func_isBoundary_0(5)) {
						that.__ks_func_next_0(5);
						return Token.WHILE;
					}
				}
				return Token.INVALID;
			};
			STATEMENT.__ks_rt = function(that, args) {
				const t0 = value => KSType.isClassInstance(value, Scanner);
				const t1 = KSType.isNumber;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return STATEMENT.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function TEMPLATE() {
				return TEMPLATE.__ks_rt(this, arguments);
			};
			TEMPLATE.__ks_0 = function(that, index) {
				let c = that._data.charCodeAt(++index);
				let match, __ks_0, __ks_1;
				if((c === 92) && (that._data.charCodeAt(index + 1) === 40)) {
					that.__ks_func_next_0(2);
					return Token.TEMPLATE_ELEMENT;
				}
				else if(c === 96) {
					return Token.TEMPLATE_END;
				}
				else if(KSType.isValue(__ks_0 = regex.template.exec(that._data.substr(index))) ? (match = __ks_0, true) : false) {
					that.__ks_func_next_0(match[0].length);
					return Token.TEMPLATE_VALUE;
				}
				return Token.INVALID;
			};
			TEMPLATE.__ks_rt = function(that, args) {
				const t0 = value => KSType.isClassInstance(value, Scanner);
				const t1 = KSType.isNumber;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return TEMPLATE.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			function TYPE_OPERATOR() {
				return TYPE_OPERATOR.__ks_rt(this, arguments);
			};
			TYPE_OPERATOR.__ks_0 = function(that, index) {
				let c = that.__ks_func_skip_1(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(index === that._index) {
					return Token.INVALID;
				}
				else if(c === 97) {
					if(that.__ks_func_charAt_0(1) === 115) {
						if((that.__ks_func_charAt_0(2) === 33) && that.__ks_func_isBoundary_0(3)) {
							that.__ks_func_next_0(3);
							return Token.AS_EXCLAMATION;
						}
						else if((that.__ks_func_charAt_0(2) === 63) && that.__ks_func_isBoundary_0(3)) {
							that.__ks_func_next_0(3);
							return Token.AS_QUESTION;
						}
						else if(that.__ks_func_isBoundary_0(2)) {
							that.__ks_func_next_0(2);
							return Token.AS;
						}
					}
				}
				else if(c === 105) {
					if(that.__ks_func_charAt_0(1) === 115) {
						if(((c = that.__ks_func_charAt_0(2)) === 9) || (c === 32)) {
							if((that.__ks_func_charAt_0(3) === 110) && (that.__ks_func_charAt_0(4) === 111) && (that.__ks_func_charAt_0(5) === 116) && that.__ks_func_isBoundary_0(6)) {
								that.__ks_func_next_0(6);
								return Token.IS_NOT;
							}
							that.__ks_func_next_0(2);
							return Token.IS;
						}
						else if(that.__ks_func_isBoundary_0(2)) {
							that.__ks_func_next_0(2);
							return Token.IS;
						}
					}
				}
				return Token.INVALID;
			};
			TYPE_OPERATOR.__ks_rt = function(that, args) {
				const t0 = value => KSType.isClassInstance(value, Scanner);
				const t1 = KSType.isNumber;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return TYPE_OPERATOR.__ks_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			return {
				ASSIGNEMENT_OPERATOR,
				BINARY_OPERATOR,
				EXPORT_STATEMENT,
				EXTERN_STATEMENT,
				JUNCTION_OPERATOR,
				MACRO,
				MODULE_STATEMENT,
				NUMBER,
				OPERAND,
				OPERAND_JUNCTION,
				POSTFIX_OPERATOR,
				PREFIX_OPERATOR,
				REQUIRE_STATEMENT,
				STATEMENT,
				TEMPLATE,
				TYPE_OPERATOR
			};
		});
		const recognize = (() => {
			const d = new Dictionary();
			d[Token.ABSTRACT] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 97) && (that.__ks_func_charAt_0(1) === 98) && (that.__ks_func_charAt_0(2) === 115) && (that.__ks_func_charAt_0(3) === 116) && (that.__ks_func_charAt_0(4) === 114) && (that.__ks_func_charAt_0(5) === 97) && (that.__ks_func_charAt_0(6) === 99) && (that.__ks_func_charAt_0(7) === 116) && that.__ks_func_isBoundary_0(8)) {
						return that.__ks_func_next_0(8);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.AMPERSAND] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 38) && (that.__ks_func_charAt_0(1) !== 61)) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.AMPERSAND_AMPERSAND] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 38) && (that.__ks_func_charAt_0(1) === 38)) {
						return that.__ks_func_next_0(2);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.ASTERISK] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 42) && ((c = that.__ks_func_charAt_0(1)) !== 42) && (c !== 36) && (c !== 61)) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.AS] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 97) && (that.__ks_func_charAt_0(1) === 115) && that.__ks_func_isBoundary_0(2)) {
						return that.__ks_func_next_0(2);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.ASYNC] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 97) && (that.__ks_func_charAt_0(1) === 115) && (that.__ks_func_charAt_0(2) === 121) && (that.__ks_func_charAt_0(3) === 110) && (that.__ks_func_charAt_0(4) === 99) && that.__ks_func_isBoundary_0(5)) {
						return that.__ks_func_next_0(5);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.AT] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 64) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.ATTRIBUTE_IDENTIFIER] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(((c >= 65) && (c <= 90)) || ((c >= 97) && (c <= 122))) {
						let index = that._index - 1;
						let c = null;
						while((++index < that._length) && (((c = that._data.charCodeAt(index)) === 45) || (c === 46) || ((c >= 48) && (c <= 57)) || ((c >= 65) && (c <= 90)) || (c === 95) || ((c >= 97) && (c <= 122)))) {
						}
						that.__ks_func_next_0(index - that._index);
						return true;
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.AUTO] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 97) && (that.__ks_func_charAt_0(1) === 117) && (that.__ks_func_charAt_0(2) === 116) && (that.__ks_func_charAt_0(3) === 111) && that.__ks_func_isBoundary_0(4)) {
						return that.__ks_func_next_0(4);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.AWAIT] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 97) && (that.__ks_func_charAt_0(1) === 119) && (that.__ks_func_charAt_0(2) === 97) && (that.__ks_func_charAt_0(3) === 105) && (that.__ks_func_charAt_0(4) === 116) && that.__ks_func_isBoundary_0(5)) {
						return that.__ks_func_next_0(5);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.BUT] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 98) && (that.__ks_func_charAt_0(1) === 117) && (that.__ks_func_charAt_0(2) === 116) && that.__ks_func_isBoundary_0(3)) {
						return that.__ks_func_next_0(3);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.BY] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 98) && (that.__ks_func_charAt_0(1) === 121) && that.__ks_func_isBoundary_0(2)) {
						return that.__ks_func_next_0(2);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.CARET] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 94) && (that.__ks_func_charAt_0(1) !== 61)) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.CARET_CARET] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 94) && (that.__ks_func_charAt_0(1) === 94)) {
						return that.__ks_func_next_0(2);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.CATCH] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 99) && (that.__ks_func_charAt_0(1) === 97) && (that.__ks_func_charAt_0(2) === 116) && (that.__ks_func_charAt_0(3) === 99) && (that.__ks_func_charAt_0(4) === 104) && that.__ks_func_isBoundary_0(5)) {
						return that.__ks_func_next_0(5);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.COLON] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 58) {
						c = that.__ks_func_charAt_0(1);
						return ((c === 58) || (c === 61)) ? false : that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.COMMA] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 44) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.CLASS] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 99) && (that.__ks_func_charAt_0(1) === 108) && (that.__ks_func_charAt_0(2) === 97) && (that.__ks_func_charAt_0(3) === 115) && (that.__ks_func_charAt_0(4) === 115) && that.__ks_func_isBoundary_0(5)) {
						return that.__ks_func_next_0(5);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.CLASS_VERSION] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					let match, __ks_0, __ks_1;
					if(KSType.isValue(__ks_0 = regex.class_version.exec(that.__ks_func_substringAt_0(0))) ? (match = __ks_0, true) : false) {
						return that.__ks_func_next_0(match[0].length);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.DESC] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 100) && (that.__ks_func_charAt_0(1) === 101) && (that.__ks_func_charAt_0(2) === 115) && (that.__ks_func_charAt_0(3) === 99) && that.__ks_func_isBoundary_0(4)) {
						return that.__ks_func_next_0(4);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.DOT] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 46) && (that.__ks_func_charAt_0(1) !== 46)) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.DOT_DOT] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 46) && (that.__ks_func_charAt_0(1) === 46) && (that.__ks_func_charAt_0(2) !== 46)) {
						return that.__ks_func_next_0(2);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.DOT_DOT_DOT] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 46) && (that.__ks_func_charAt_0(1) === 46) && (that.__ks_func_charAt_0(2) === 46)) {
						return that.__ks_func_next_0(3);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.DYN] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 100) && (that.__ks_func_charAt_0(1) === 121) && (that.__ks_func_charAt_0(2) === 110) && that.__ks_func_isBoundary_0(3)) {
						return that.__ks_func_next_0(3);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.ELSE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 101) && (that.__ks_func_charAt_0(1) === 108) && (that.__ks_func_charAt_0(2) === 115) && (that.__ks_func_charAt_0(3) === 101) && that.__ks_func_isBoundary_0(4)) {
						return that.__ks_func_next_0(4);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.ELSE_IF] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 101) && (that.__ks_func_charAt_0(1) === 108) && (that.__ks_func_charAt_0(2) === 115) && (that.__ks_func_charAt_0(3) === 101) && (that.__ks_func_charAt_0(4) === 32) && (that.__ks_func_charAt_0(5) === 105) && (that.__ks_func_charAt_0(6) === 102) && that.__ks_func_isBoundary_0(7)) {
						return that.__ks_func_next_0(7);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.ENUM] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 101) && (that.__ks_func_charAt_0(1) === 110) && (that.__ks_func_charAt_0(2) === 117) && (that.__ks_func_charAt_0(3) === 109) && that.__ks_func_isBoundary_0(4)) {
						return that.__ks_func_next_0(4);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.EQUALS] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 61) && ((c = that.__ks_func_charAt_0(1)) !== 61) && (c !== 62)) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.EQUALS_RIGHT_ANGLE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 61) && (that.__ks_func_charAt_0(1) === 62)) {
						return that.__ks_func_next_0(2);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.EXCLAMATION] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 33) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.EXTENDS] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 101) && (that.__ks_func_charAt_0(1) === 120) && (that.__ks_func_charAt_0(2) === 116) && (that.__ks_func_charAt_0(3) === 101) && (that.__ks_func_charAt_0(4) === 110) && (that.__ks_func_charAt_0(5) === 100) && (that.__ks_func_charAt_0(6) === 115) && that.__ks_func_isBoundary_0(7)) {
						return that.__ks_func_next_0(7);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.FINAL] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 102) && (that.__ks_func_charAt_0(1) === 105) && (that.__ks_func_charAt_0(2) === 110) && (that.__ks_func_charAt_0(3) === 97) && (that.__ks_func_charAt_0(4) === 108) && that.__ks_func_isBoundary_0(5)) {
						return that.__ks_func_next_0(5);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.FINALLY] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 102) && (that.__ks_func_charAt_0(1) === 105) && (that.__ks_func_charAt_0(2) === 110) && (that.__ks_func_charAt_0(3) === 97) && (that.__ks_func_charAt_0(4) === 108) && (that.__ks_func_charAt_0(5) === 108) && (that.__ks_func_charAt_0(6) === 121) && that.__ks_func_isBoundary_0(7)) {
						return that.__ks_func_next_0(7);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.FOR] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 102) && (that.__ks_func_charAt_0(1) === 111) && (that.__ks_func_charAt_0(2) === 114) && that.__ks_func_isBoundary_0(3)) {
						return that.__ks_func_next_0(3);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.FROM] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 102) && (that.__ks_func_charAt_0(1) === 114) && (that.__ks_func_charAt_0(2) === 111) && (that.__ks_func_charAt_0(3) === 109) && that.__ks_func_isBoundary_0(4)) {
						return that.__ks_func_next_0(4);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.FUNC] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 102) && (that.__ks_func_charAt_0(1) === 117) && (that.__ks_func_charAt_0(2) === 110) && (that.__ks_func_charAt_0(3) === 99) && that.__ks_func_isBoundary_0(4)) {
						return that.__ks_func_next_0(4);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.GET] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 103) && (that.__ks_func_charAt_0(1) === 101) && (that.__ks_func_charAt_0(2) === 116) && that.__ks_func_isBoundary_0(3)) {
						return that.__ks_func_next_0(3);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.HASH_EXCLAMATION_LEFT_SQUARE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 35) && (that.__ks_func_charAt_0(1) === 33) && (that.__ks_func_charAt_0(2) === 91)) {
						return that.__ks_func_next_0(3);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.HASH_LEFT_SQUARE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 35) && (that.__ks_func_charAt_0(1) === 91)) {
						return that.__ks_func_next_0(2);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.IDENTIFIER] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 36) || ((c >= 65) && (c <= 90)) || ((c >= 97) && (c <= 122))) {
						that.__ks_func_scanIdentifier_0(false);
						return true;
					}
					else if((c === 95) && !that.__ks_func_isBoundary_0(1)) {
						that.__ks_func_scanIdentifier_0(false);
						return true;
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.IF] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 105) && (that.__ks_func_charAt_0(1) === 102) && that.__ks_func_isBoundary_0(2)) {
						return that.__ks_func_next_0(2);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.IN] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 105) && (that.__ks_func_charAt_0(1) === 110) && that.__ks_func_isBoundary_0(2)) {
						return that.__ks_func_next_0(2);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.INTERNAL] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 105) && (that.__ks_func_charAt_0(1) === 110) && (that.__ks_func_charAt_0(2) === 116) && (that.__ks_func_charAt_0(3) === 101) && (that.__ks_func_charAt_0(4) === 114) && (that.__ks_func_charAt_0(5) === 110) && (that.__ks_func_charAt_0(6) === 97) && (that.__ks_func_charAt_0(7) === 108) && that.__ks_func_isBoundary_0(8)) {
						return that.__ks_func_next_0(8);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.IS] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 105) && (that.__ks_func_charAt_0(1) === 115) && that.__ks_func_isBoundary_0(2)) {
						return that.__ks_func_next_0(2);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.LATE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 108) && (that.__ks_func_charAt_0(1) === 97) && (that.__ks_func_charAt_0(2) === 116) && (that.__ks_func_charAt_0(3) === 101) && that.__ks_func_isBoundary_0(4)) {
						return that.__ks_func_next_0(4);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.LATEINIT] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 108) && (that.__ks_func_charAt_0(1) === 97) && (that.__ks_func_charAt_0(2) === 116) && (that.__ks_func_charAt_0(3) === 101) && (that.__ks_func_charAt_0(4) === 105) && (that.__ks_func_charAt_0(5) === 110) && (that.__ks_func_charAt_0(6) === 105) && (that.__ks_func_charAt_0(7) === 116) && that.__ks_func_isBoundary_0(8)) {
						return that.__ks_func_next_0(8);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.LEFT_ANGLE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 60) {
						c = that.__ks_func_charAt_0(1);
						return ((c === 60) || (c === 61)) ? false : that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.LEFT_CURLY] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 123) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.LEFT_ROUND] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 40) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.LEFT_SQUARE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 91) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.MACRO] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 109) && (that.__ks_func_charAt_0(1) === 97) && (that.__ks_func_charAt_0(2) === 99) && (that.__ks_func_charAt_0(3) === 114) && (that.__ks_func_charAt_0(4) === 111) && that.__ks_func_isBoundary_0(5)) {
						return that.__ks_func_next_0(5);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.MINUS] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 45) && ((c = that.__ks_func_charAt_0(1)) !== 61)) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.MUT] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 109) && (that.__ks_func_charAt_0(1) === 117) && (that.__ks_func_charAt_0(2) === 116) && that.__ks_func_isBoundary_0(3)) {
						return that.__ks_func_next_0(3);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.NEWLINE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 13) && (that.__ks_func_charAt_0(1) === 10)) {
						return that.__ks_func_nextLine_0(2);
					}
					else if((c === 10) || (c === 13)) {
						return that.__ks_func_nextLine_0(1);
					}
					return false;
				};
				return __ks_rt;
			})();
			d[Token.NUMERAL] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(48 <= c && c <= 57) {
						let i = 1;
						let __ks_0;
						while(48 <= (__ks_0 = that.__ks_func_charAt_0(i)) && __ks_0 <= 57) {
							++i;
						}
						if(that.__ks_func_isBoundary_0(i)) {
							return that.__ks_func_next_0(i);
						}
					}
					return false;
				};
				return __ks_rt;
			})();
			d[Token.OF] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 111) && (that.__ks_func_charAt_0(1) === 102) && that.__ks_func_isBoundary_0(2)) {
						return that.__ks_func_next_0(2);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.ON] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 111) && (that.__ks_func_charAt_0(1) === 110) && that.__ks_func_isBoundary_0(2)) {
						return that.__ks_func_next_0(2);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.OVERRIDE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 111) && (that.__ks_func_charAt_0(1) === 118) && (that.__ks_func_charAt_0(2) === 101) && (that.__ks_func_charAt_0(3) === 114) && (that.__ks_func_charAt_0(4) === 114) && (that.__ks_func_charAt_0(5) === 105) && (that.__ks_func_charAt_0(6) === 100) && (that.__ks_func_charAt_0(7) === 101) && that.__ks_func_isBoundary_0(8)) {
						return that.__ks_func_next_0(8);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.OVERWRITE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 111) && (that.__ks_func_charAt_0(1) === 118) && (that.__ks_func_charAt_0(2) === 101) && (that.__ks_func_charAt_0(3) === 114) && (that.__ks_func_charAt_0(4) === 119) && (that.__ks_func_charAt_0(5) === 114) && (that.__ks_func_charAt_0(6) === 105) && (that.__ks_func_charAt_0(7) === 116) && (that.__ks_func_charAt_0(8) === 101) && that.__ks_func_isBoundary_0(9)) {
						return that.__ks_func_next_0(9);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.PIPE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 124) && (that.__ks_func_charAt_0(1) !== 61)) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.PIPE_PIPE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 124) && (that.__ks_func_charAt_0(1) === 124)) {
						return that.__ks_func_next_0(2);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.PRIVATE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 112) && (that.__ks_func_charAt_0(1) === 114) && (that.__ks_func_charAt_0(2) === 105) && (that.__ks_func_charAt_0(3) === 118) && (that.__ks_func_charAt_0(4) === 97) && (that.__ks_func_charAt_0(5) === 116) && (that.__ks_func_charAt_0(6) === 101) && that.__ks_func_isBoundary_0(7)) {
						return that.__ks_func_next_0(7);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.PROTECTED] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 112) && (that.__ks_func_charAt_0(1) === 114) && (that.__ks_func_charAt_0(2) === 111) && (that.__ks_func_charAt_0(3) === 116) && (that.__ks_func_charAt_0(4) === 101) && (that.__ks_func_charAt_0(5) === 99) && (that.__ks_func_charAt_0(6) === 116) && (that.__ks_func_charAt_0(7) === 101) && (that.__ks_func_charAt_0(8) === 100) && that.__ks_func_isBoundary_0(9)) {
						return that.__ks_func_next_0(9);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.PUBLIC] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 112) && (that.__ks_func_charAt_0(1) === 117) && (that.__ks_func_charAt_0(2) === 98) && (that.__ks_func_charAt_0(3) === 108) && (that.__ks_func_charAt_0(4) === 105) && (that.__ks_func_charAt_0(5) === 99) && that.__ks_func_isBoundary_0(6)) {
						return that.__ks_func_next_0(6);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.QUESTION] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 63) {
						return (((c = that.__ks_func_charAt_0(1)) === 40) || (c === 46) || (c === 61) || (c === 63) || (c === 91)) ? false : that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.RETURN] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 114) && (that.__ks_func_charAt_0(1) === 101) && (that.__ks_func_charAt_0(2) === 116) && (that.__ks_func_charAt_0(3) === 117) && (that.__ks_func_charAt_0(4) === 114) && (that.__ks_func_charAt_0(5) === 110) && that.__ks_func_isBoundary_0(6)) {
						return that.__ks_func_next_0(6);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.RIGHT_ANGLE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 62) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.RIGHT_CURLY] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 125) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.RIGHT_ROUND] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 41) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.RIGHT_SQUARE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 93) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.SET] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 115) && (that.__ks_func_charAt_0(1) === 101) && (that.__ks_func_charAt_0(2) === 116) && that.__ks_func_isBoundary_0(3)) {
						return that.__ks_func_next_0(3);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.STATIC] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 115) && (that.__ks_func_charAt_0(1) === 116) && (that.__ks_func_charAt_0(2) === 97) && (that.__ks_func_charAt_0(3) === 116) && (that.__ks_func_charAt_0(4) === 105) && (that.__ks_func_charAt_0(5) === 99) && that.__ks_func_isBoundary_0(6)) {
						return that.__ks_func_next_0(6);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.STRING] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 34) {
						let match, __ks_0, __ks_1;
						if(KSType.isValue(__ks_0 = regex.double_quote.exec(that.__ks_func_substringAt_0(1))) ? (match = __ks_0, true) : false) {
							return that.__ks_func_next_0(match[0].length + 1);
						}
					}
					else if(c === 39) {
						let match, __ks_0, __ks_1;
						if(KSType.isValue(__ks_0 = regex.single_quote.exec(that.__ks_func_substringAt_0(1))) ? (match = __ks_0, true) : false) {
							return that.__ks_func_next_0(match[0].length + 1);
						}
					}
					return false;
				};
				return __ks_rt;
			})();
			d[Token.SWITCH] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 115) && (that.__ks_func_charAt_0(1) === 119) && (that.__ks_func_charAt_0(2) === 105) && (that.__ks_func_charAt_0(3) === 116) && (that.__ks_func_charAt_0(4) === 99) && (that.__ks_func_charAt_0(5) === 104) && that.__ks_func_isBoundary_0(6)) {
						return that.__ks_func_next_0(6);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.TEMPLATE_BEGIN] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 96) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.TEMPLATE_END] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 96) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.THROW] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 116) && (that.__ks_func_charAt_0(1) === 104) && (that.__ks_func_charAt_0(2) === 114) && (that.__ks_func_charAt_0(3) === 111) && (that.__ks_func_charAt_0(4) === 119) && that.__ks_func_isBoundary_0(5)) {
						return that.__ks_func_next_0(5);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.TIL] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 116) && (that.__ks_func_charAt_0(1) === 105) && (that.__ks_func_charAt_0(2) === 108) && that.__ks_func_isBoundary_0(3)) {
						return that.__ks_func_next_0(3);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.TILDE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 126) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.TILDE_TILDE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 126) && (that.__ks_func_charAt_0(1) === 126)) {
						return that.__ks_func_next_0(2);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.TO] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 116) && (that.__ks_func_charAt_0(1) === 111) && that.__ks_func_isBoundary_0(2)) {
						return that.__ks_func_next_0(2);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.TRY] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 116) && (that.__ks_func_charAt_0(1) === 114) && (that.__ks_func_charAt_0(2) === 121) && that.__ks_func_isBoundary_0(3)) {
						return that.__ks_func_next_0(3);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.UNDERSCORE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if(c === 95) {
						return that.__ks_func_next_0(1);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.UNLESS] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 117) && (that.__ks_func_charAt_0(1) === 110) && (that.__ks_func_charAt_0(2) === 108) && (that.__ks_func_charAt_0(3) === 101) && (that.__ks_func_charAt_0(4) === 115) && (that.__ks_func_charAt_0(5) === 115) && that.__ks_func_isBoundary_0(6)) {
						return that.__ks_func_next_0(6);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.UNTIL] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 117) && (that.__ks_func_charAt_0(1) === 110) && (that.__ks_func_charAt_0(2) === 116) && (that.__ks_func_charAt_0(3) === 105) && (that.__ks_func_charAt_0(4) === 108) && that.__ks_func_isBoundary_0(5)) {
						return that.__ks_func_next_0(5);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.VAR] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 118) && (that.__ks_func_charAt_0(1) === 97) && (that.__ks_func_charAt_0(2) === 114) && that.__ks_func_isBoundary_0(3)) {
						return that.__ks_func_next_0(3);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.WHEN] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 119) && (that.__ks_func_charAt_0(1) === 104) && (that.__ks_func_charAt_0(2) === 101) && (that.__ks_func_charAt_0(3) === 110) && that.__ks_func_isBoundary_0(4)) {
						return that.__ks_func_next_0(4);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.WHILE] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 119) && (that.__ks_func_charAt_0(1) === 104) && (that.__ks_func_charAt_0(2) === 105) && (that.__ks_func_charAt_0(3) === 108) && (that.__ks_func_charAt_0(4) === 101) && that.__ks_func_isBoundary_0(5)) {
						return that.__ks_func_next_0(5);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			d[Token.WITH] = (() => {
				const __ks_rt = (...args) => {
					const t0 = value => KSType.isClassInstance(value, Scanner);
					const t1 = KSType.isNumber;
					if(args.length === 2) {
						if(t0(args[0]) && t1(args[1])) {
							return __ks_rt.__ks_0.call(null, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(that, c) {
					if((c === 119) && (that.__ks_func_charAt_0(1) === 105) && (that.__ks_func_charAt_0(2) === 116) && (that.__ks_func_charAt_0(3) === 104) && that.__ks_func_isBoundary_0(4)) {
						return that.__ks_func_next_0(4);
					}
					else {
						return false;
					}
				};
				return __ks_rt;
			})();
			return d;
		})();
		class Scanner {
			static __ks_new_0(...args) {
				const o = Object.create(Scanner.prototype);
				o.__ks_init();
				o.__ks_cons_0(...args);
				return o;
			}
			constructor() {
				this.__ks_init();
				this.__ks_cons_rt.call(null, this, arguments);
			}
			__ks_init() {
				this._column = 1;
				this._eof = false;
				this._index = 0;
				this._line = 1;
				this._nextColumn = 1;
				this._nextIndex = 0;
				this._nextLine = 1;
			}
			__ks_cons_0(data) {
				this._data = data;
				this._length = this._data.length;
			}
			__ks_cons_rt(that, args) {
				const t0 = KSType.isString;
				if(args.length === 1) {
					if(t0(args[0])) {
						return Scanner.prototype.__ks_cons_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			charAt() {
				return this.__ks_func_charAt_rt.call(null, this, this, arguments);
			}
			__ks_func_charAt_0(d) {
				return this._data.charCodeAt(this._index + d);
			}
			__ks_func_charAt_rt(that, proto, args) {
				const t0 = KSType.isNumber;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_charAt_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			char() {
				return this.__ks_func_char_rt.call(null, this, this, arguments);
			}
			__ks_func_char_0() {
				return this._eof ? "EOF" : this._data[this._index];
			}
			__ks_func_char_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_char_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			column() {
				return this.__ks_func_column_rt.call(null, this, this, arguments);
			}
			__ks_func_column_0() {
				return this._column;
			}
			__ks_func_column_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_column_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			commit() {
				return this.__ks_func_commit_rt.call(null, this, this, arguments);
			}
			__ks_func_commit_0() {
				if(this._eof) {
					return null;
				}
				else {
					this._column = this._nextColumn;
					this._line = this._nextLine;
					this._index = this._nextIndex;
					return Token.INVALID;
				}
			}
			__ks_func_commit_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_commit_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			endPosition() {
				return this.__ks_func_endPosition_rt.call(null, this, this, arguments);
			}
			__ks_func_endPosition_0() {
				return Position.__ks_new(this._nextLine, this._nextColumn);
			}
			__ks_func_endPosition_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_endPosition_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			eof() {
				return this.__ks_func_eof_rt.call(null, this, this, arguments);
			}
			__ks_func_eof_0() {
				this._eof = true;
				return Token.EOF;
			}
			__ks_func_eof_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_eof_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			isBoundary() {
				return this.__ks_func_isBoundary_rt.call(null, this, this, arguments);
			}
			__ks_func_isBoundary_0(d) {
				const c = this._data.charCodeAt(this._index + d);
				return (c === 9) || (c === 10) || (c === 13) || (c === 32) || !(((c >= 48) && (c <= 57)) || ((c >= 65) && (c <= 90)) || ((c >= 97) && (c <= 122)) || (c === 95) || (c === 36));
			}
			__ks_func_isBoundary_rt(that, proto, args) {
				const t0 = KSType.isNumber;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_isBoundary_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			isEOF() {
				return this.__ks_func_isEOF_rt.call(null, this, this, arguments);
			}
			__ks_func_isEOF_0() {
				return this._eof;
			}
			__ks_func_isEOF_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_isEOF_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			line() {
				return this.__ks_func_line_rt.call(null, this, this, arguments);
			}
			__ks_func_line_0() {
				return this._line;
			}
			__ks_func_line_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_line_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			mark() {
				return this.__ks_func_mark_rt.call(null, this, this, arguments);
			}
			__ks_func_mark_0() {
				return Marker.__ks_new(this._eof, this._index, this._line, this._column);
			}
			__ks_func_mark_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_mark_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			match() {
				return this.__ks_func_match_rt.call(null, this, this, arguments);
			}
			__ks_func_match_0(tokens) {
				if(this._eof) {
					return Token.EOF;
				}
				else {
					const c = this.__ks_func_skip_1(this._index - 1);
					if(c === -1) {
						return this.__ks_func_eof_0();
					}
					for(let __ks_0 = 0, __ks_1 = tokens.length, token; __ks_0 < __ks_1; ++__ks_0) {
						token = tokens[__ks_0];
						if(recognize[token](this, c) === true) {
							return token;
						}
					}
					return Token.INVALID;
				}
			}
			__ks_func_match_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, Token);
				const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
				let pts;
				if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
					return proto.__ks_func_match_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
				}
				throw KSHelper.badArgs();
			}
			matchM() {
				return this.__ks_func_matchM_rt.call(null, this, this, arguments);
			}
			__ks_func_matchM_0(matcher) {
				if(this._eof) {
					return Token.EOF;
				}
				else {
					return matcher(this, this._index - 1);
				}
			}
			__ks_func_matchM_rt(that, proto, args) {
				const t0 = KSType.isFunction;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_matchM_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			next() {
				return this.__ks_func_next_rt.call(null, this, this, arguments);
			}
			__ks_func_next_0(length) {
				this._nextIndex = this._index + length;
				this._nextColumn = this._column + length;
				return true;
			}
			__ks_func_next_rt(that, proto, args) {
				const t0 = KSType.isNumber;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_next_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			nextLine() {
				return this.__ks_func_nextLine_rt.call(null, this, this, arguments);
			}
			__ks_func_nextLine_0(length) {
				this._nextIndex = this._index + length;
				this._nextColumn = 1;
				this._nextLine = this._line + 1;
				return true;
			}
			__ks_func_nextLine_rt(that, proto, args) {
				const t0 = KSType.isNumber;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_nextLine_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			position() {
				return this.__ks_func_position_rt.call(null, this, this, arguments);
			}
			__ks_func_position_0() {
				return Range.__ks_new(Position.__ks_new(this._line, this._column), Position.__ks_new(this._nextLine, this._nextColumn));
			}
			__ks_func_position_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_position_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			rollback() {
				return this.__ks_func_rollback_rt.call(null, this, this, arguments);
			}
			__ks_func_rollback_0(mark) {
				this._eof = mark.eof;
				this._index = mark.index;
				this._line = mark.line;
				this._column = mark.column;
				return true;
			}
			__ks_func_rollback_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Marker);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_rollback_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			scanIdentifier() {
				return this.__ks_func_scanIdentifier_rt.call(null, this, this, arguments);
			}
			__ks_func_scanIdentifier_0(substr) {
				let index = this._index - 1;
				let c = this._data.charCodeAt(index);
				while((++index < this._length) && (((c = this._data.charCodeAt(index)) === 36) || ((c >= 48) && (c <= 57)) || ((c >= 65) && (c <= 90)) || (c === 95) || ((c >= 97) && (c <= 122)))) {
				}
				if(substr) {
					let identifier = this._data.substring(this._index + 1, index);
					this.__ks_func_next_0(index - this._index);
					return identifier;
				}
				else {
					this.__ks_func_next_0(index - this._index);
					return null;
				}
			}
			__ks_func_scanIdentifier_rt(that, proto, args) {
				const t0 = KSType.isBoolean;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_scanIdentifier_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			skip() {
				return this.__ks_func_skip_rt.call(null, this, this, arguments);
			}
			__ks_func_skip_0() {
				this.__ks_func_skip_1(this._index - 1);
			}
			__ks_func_skip_1(index) {
				let c = null;
				while(++index < this._length) {
					c = this._data.charCodeAt(index);
					if((c === 32) || (c === 9)) {
						++this._column;
					}
					else if(c === 35) {
						const oldIndex = index;
						c = this._data.charCodeAt(index + 1);
						if((c !== 32) && (c !== 9)) {
							this._nextIndex = this._index = index;
							this._nextColumn = this._column;
							this._nextLine = this._line;
							return 35;
						}
						++index;
						while(++index < this._length) {
							c = this._data.charCodeAt(index);
							if((c !== 32) && (c !== 9)) {
								break;
							}
						}
						c = this._data.charCodeAt(index + 1);
						if(c === 123) {
							if((this._data.charCodeAt(index + 2) !== 123) && (this._data.charCodeAt(index + 3) !== 123)) {
								this._nextIndex = this._index = oldIndex;
								this._nextColumn = this._column;
								this._nextLine = this._line;
								return 35;
							}
							index += 2;
						}
						else if(c === 125) {
							if((this._data.charCodeAt(index + 2) !== 125) && (this._data.charCodeAt(index + 3) !== 125)) {
								this._nextIndex = this._index = oldIndex;
								this._nextColumn = this._column;
								this._nextLine = this._line;
								return 35;
							}
							index += 2;
						}
						else {
							this._nextIndex = this._index = oldIndex;
							this._nextColumn = this._column;
							this._nextLine = this._line;
							return 35;
						}
						while(((index + 1) < this._length) && (this._data.charCodeAt(index + 1) !== 10)) {
							++index;
						}
						this._column += index - oldIndex;
					}
					else if(c === 47) {
						c = this._data.charCodeAt(index + 1);
						if(c === 42) {
							const oldIndex = index;
							let line = this._line;
							let column = this._column;
							let left = 1;
							let lineIndex = index - this._column;
							++index;
							while(++index < this._length) {
								c = this._data.charCodeAt(index);
								if(c === 10) {
									line++;
									column = 1;
									lineIndex = index;
								}
								else if((c === 42) && (this._data.charCodeAt(index + 1) === 47)) {
									--left;
									if(left === 0) {
										++index;
										column += index - lineIndex;
										break;
									}
								}
								else if((c === 47) && (this._data.charCodeAt(index + 1) === 42)) {
									++left;
								}
							}
							if(left !== 0) {
								this._nextIndex = this._index = oldIndex;
								this._nextColumn = this._column;
								this._nextLine = this._line;
								return 47;
							}
							this._line = line;
							this._column = column;
						}
						else if(c === 47) {
							const lineIndex = index;
							while((++index < this._length) && (this._data.charCodeAt(index + 1) !== 10)) {
							}
							this._column += index - lineIndex;
						}
						else {
							this._nextIndex = this._index = index;
							this._nextColumn = this._column;
							this._nextLine = this._line;
							return 47;
						}
					}
					else {
						this._nextIndex = this._index = index;
						this._nextColumn = this._column;
						this._nextLine = this._line;
						return c;
					}
				}
				this._nextIndex = this._index = index;
				this._nextColumn = this._column;
				this._nextLine = this._line;
				this.__ks_func_eof_0();
				return -1;
			}
			__ks_func_skip_rt(that, proto, args) {
				const t0 = KSType.isNumber;
				if(args.length === 0) {
					return proto.__ks_func_skip_0.call(that);
				}
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_skip_1.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			skipComments() {
				return this.__ks_func_skipComments_rt.call(null, this, this, arguments);
			}
			__ks_func_skipComments_0() {
				let index = this._index - 1;
				let c = null;
				while(++index < this._length) {
					c = this._data.charCodeAt(index);
					if((c === 32) || (c === 9)) {
						++this._column;
					}
					else if(c === 47) {
						c = this._data.charCodeAt(index + 1);
						if(c === 42) {
							const oldIndex = index;
							let line = this._line;
							let column = this._column;
							let left = 1;
							let lineIndex = index - this._column;
							++index;
							while(++index < this._length) {
								c = this._data.charCodeAt(index);
								if(c === 10) {
									++line;
									column = 1;
									lineIndex = index;
								}
								else if((c === 42) && (this._data.charCodeAt(index + 1) === 47)) {
									--left;
									if(left === 0) {
										++index;
										column += index - lineIndex;
										break;
									}
								}
								else if((c === 47) && (this._data.charCodeAt(index + 1) === 42)) {
									++left;
								}
							}
							if(left !== 0) {
								this._nextIndex = this._index = oldIndex;
								this._nextColumn = this._column;
								this._nextLine = this._line;
								return 47;
							}
							while(++index < this._length) {
								c = this._data.charCodeAt(index);
								if((c === 32) || (c === 9)) {
									++column;
								}
								else {
									break;
								}
							}
							c = this._data.charCodeAt(index);
							if((c === 13) && (this._data.charCodeAt(index + 1) === 10)) {
								++line;
								column = 1;
								++index;
							}
							else if((c === 10) || (c === 13)) {
								++line;
								column = 1;
							}
							else {
								--index;
							}
							this._line = line;
							this._column = column;
						}
						else if(c === 47) {
							const lineIndex = index;
							while((++index < this._length) && (this._data.charCodeAt(index + 1) !== 10)) {
							}
							this._column += index - lineIndex;
							c = this._data.charCodeAt(index + 1);
							if((c === 13) && (this._data.charCodeAt(index + 2) === 10)) {
								++this._line;
								this._column = 1;
								index += 2;
							}
							else if((c === 10) || (c === 13)) {
								++this._line;
								this._column = 1;
								++index;
							}
						}
						else {
							this._nextIndex = this._index = index;
							this._nextColumn = this._column;
							this._nextLine = this._line;
							return 47;
						}
					}
					else {
						this._nextIndex = this._index = index;
						this._nextColumn = this._column;
						this._nextLine = this._line;
						return c;
					}
				}
				this._nextIndex = this._index = index;
				this._nextColumn = this._column;
				this._nextLine = this._line;
				this.__ks_func_eof_0();
				return -1;
			}
			__ks_func_skipComments_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_skipComments_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			skipNewLine() {
				return this.__ks_func_skipNewLine_rt.call(null, this, this, arguments);
			}
			__ks_func_skipNewLine_0(index) {
				if(index === void 0 || index === null) {
					index = this._index - 1;
				}
				let c = null;
				while(++index < this._length) {
					c = this._data.charCodeAt(index);
					if((c === 13) && (this._data.charCodeAt(index + 1) === 10)) {
						++this._line;
						this._column = 1;
						++index;
					}
					else if((c === 10) || (c === 13)) {
						++this._line;
						this._column = 1;
					}
					else if((c === 32) || (c === 9)) {
						++this._column;
					}
					else if(c === 35) {
						const oldIndex = index;
						c = this._data.charCodeAt(index + 1);
						if((c !== 32) && (c !== 9)) {
							this._nextIndex = this._index = index;
							this._nextColumn = this._column;
							this._nextLine = this._line;
							return 35;
						}
						++index;
						while(++index < this._length) {
							c = this._data.charCodeAt(index);
							if((c !== 32) && (c !== 9)) {
								break;
							}
						}
						c = this._data.charCodeAt(index + 1);
						if(c === 123) {
							if((this._data.charCodeAt(index + 2) !== 123) && (this._data.charCodeAt(index + 3) !== 123)) {
								this._nextIndex = this._index = oldIndex;
								this._nextColumn = this._column;
								this._nextLine = this._line;
								return 35;
							}
							index += 2;
						}
						else if(c === 125) {
							if((this._data.charCodeAt(index + 2) !== 125) && (this._data.charCodeAt(index + 3) !== 125)) {
								this._nextIndex = this._index = oldIndex;
								this._nextColumn = this._column;
								this._nextLine = this._line;
								return 35;
							}
							index += 2;
						}
						else {
							this._nextIndex = this._index = oldIndex;
							this._nextColumn = this._column;
							this._nextLine = this._line;
							return 35;
						}
						while(((index + 1) < this._length) && (this._data.charCodeAt(index + 1) !== 10)) {
							++index;
						}
						this._column += index - oldIndex;
					}
					else if(c === 47) {
						c = this._data.charCodeAt(index + 1);
						if(c === 42) {
							const oldIndex = index;
							let line = this._line;
							let column = this._column;
							let left = 1;
							let lineIndex = index - this._column;
							++index;
							while(++index < this._length) {
								c = this._data.charCodeAt(index);
								if(c === 10) {
									line++;
									column = 1;
									lineIndex = index;
								}
								else if((c === 42) && (this._data.charCodeAt(index + 1) === 47)) {
									--left;
									if(left === 0) {
										++index;
										column += index - lineIndex;
										break;
									}
								}
								else if((c === 47) && (this._data.charCodeAt(index + 1) === 42)) {
									++left;
								}
							}
							if(left !== 0) {
								this._nextIndex = this._index = oldIndex;
								this._nextColumn = this._column;
								this._nextLine = this._line;
								return 47;
							}
							this._line = line;
							this._column = column;
						}
						else if(c === 47) {
							const lineIndex = index;
							while((++index < this._length) && (this._data.charCodeAt(index + 1) !== 10)) {
							}
							this._column += index - lineIndex;
						}
						else {
							this._nextIndex = this._index = index;
							this._nextColumn = this._column;
							this._nextLine = this._line;
							return 47;
						}
					}
					else {
						this._nextIndex = this._index = index;
						this._nextColumn = this._column;
						this._nextLine = this._line;
						return c;
					}
				}
				this._nextIndex = this._index = index;
				this._nextColumn = this._column;
				this._nextLine = this._line;
				this.__ks_func_eof_0();
				return -1;
			}
			__ks_func_skipNewLine_rt(that, proto, args) {
				const t0 = value => KSType.isNumber(value) || KSType.isNull(value);
				const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
				let pts;
				if(args.length <= 1) {
					if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
						return proto.__ks_func_skipNewLine_0.call(that, KSHelper.getVararg(args, 0, pts[1]));
					}
				}
				throw KSHelper.badArgs();
			}
			startPosition() {
				return this.__ks_func_startPosition_rt.call(null, this, this, arguments);
			}
			__ks_func_startPosition_0() {
				return Position.__ks_new(this._line, this._column);
			}
			__ks_func_startPosition_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_startPosition_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			substringAt() {
				return this.__ks_func_substringAt_rt.call(null, this, this, arguments);
			}
			__ks_func_substringAt_0(d) {
				return this._data.substr(this._index + d);
			}
			__ks_func_substringAt_rt(that, proto, args) {
				const t0 = KSType.isNumber;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_substringAt_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			test() {
				return this.__ks_func_test_rt.call(null, this, this, arguments);
			}
			__ks_func_test_0(token) {
				if(this._eof) {
					return Token.EOF === token;
				}
				else {
					const c = this.__ks_func_skip_1(this._index - 1);
					if(c === -1) {
						return this.__ks_func_eof_0() === token;
					}
					return recognize[token](this, c);
				}
			}
			__ks_func_test_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, Token);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_test_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			testNS() {
				return this.__ks_func_testNS_rt.call(null, this, this, arguments);
			}
			__ks_func_testNS_0(token) {
				if(this._eof) {
					return false;
				}
				else {
					return recognize[token](this, this._data.charCodeAt(this._index));
				}
			}
			__ks_func_testNS_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, Token);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_testNS_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			toDebug() {
				return this.__ks_func_toDebug_rt.call(null, this, this, arguments);
			}
			__ks_func_toDebug_0() {
				return KSHelper.concatString("line: ", this._line, ", column: ", this._column, ", token: ", this.__ks_func_toQuote_0());
			}
			__ks_func_toDebug_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_toDebug_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			toQuote() {
				return this.__ks_func_toQuote_rt.call(null, this, this, arguments);
			}
			__ks_func_toQuote_0() {
				if(this._eof) {
					return "\"EOF\"";
				}
				else if((this._index + 1) >= this._nextIndex) {
					const c = this._data.charCodeAt(this._index);
					if(c === 10) {
						return "\"NewLine\"";
					}
					else {
						return KSHelper.concatString("\"", this._data[this._index], "\"");
					}
				}
				else {
					return "\"" + this._data.substring(this._index, this._nextIndex) + "\"";
				}
			}
			__ks_func_toQuote_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_toQuote_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			value() {
				return this.__ks_func_value_rt.call(null, this, this, arguments);
			}
			__ks_func_value_0() {
				return this._data.substring(this._index, this._nextIndex);
			}
			__ks_func_value_1(token) {
				if(KSType.isFunction(overhauls[token])) {
					return overhauls[token](this._data.substring(this._index, this._nextIndex));
				}
				else {
					return this._data.substring(this._index, this._nextIndex);
				}
			}
			__ks_func_value_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, Token);
				if(args.length === 0) {
					return proto.__ks_func_value_0.call(that);
				}
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_value_1.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
		}
		const AmbiguityResult = KSHelper.struct(function(token = null, identifier = null) {
			const _ = new Dictionary();
			_.token = token;
			_.identifier = identifier;
			return _;
		}, function(__ks_new, args) {
			const t0 = value => KSType.isEnumInstance(value, Token) || KSType.isNull(value);
			const t1 = () => true;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 2) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && KSHelper.isVarargs(args, 0, 1, t1, pts, 1) && te(pts, 2)) {
					return __ks_new(KSHelper.getVararg(args, 0, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			throw KSHelper.badArgs();
		});
		const DestructuringMode = KSHelper.enum(Object, {
			Nil: 0n,
			COMPUTED: 1n,
			DEFAULT: 2n,
			RECURSION: 4n,
			THIS_ALIAS: 8n,
			TYPE: 16n
		});
		DestructuringMode.Declaration = DestructuringMode(DestructuringMode.COMPUTED | DestructuringMode.DEFAULT | DestructuringMode.RECURSION | DestructuringMode.TYPE);
		DestructuringMode.Expression = DestructuringMode(DestructuringMode.COMPUTED | DestructuringMode.DEFAULT | DestructuringMode.RECURSION);
		DestructuringMode.Parameter = DestructuringMode(DestructuringMode.DEFAULT | DestructuringMode.RECURSION | DestructuringMode.TYPE);
		const ExpressionMode = KSHelper.enum(Object, {
			Default: 0n,
			NoAnonymousFunction: 1n,
			NoAwait: 2n,
			NoObject: 4n,
			WithMacro: 8n
		});
		const ExternMode = KSHelper.enum(Object, {
			Default: 0n,
			Fallthrough: 1n,
			Namespace: 2n
		});
		const FunctionMode = KSHelper.enum(Number, {
			Function: 0,
			Macro: 1,
			Method: 2
		});
		const MacroTerminator = KSHelper.enum(Object, {
			Nil: 0n,
			COMMA: 1n,
			NEWLINE: 2n,
			RIGHT_CURLY: 4n,
			RIGHT_ROUND: 8n,
			RIGHT_SQUARE: 16n
		});
		MacroTerminator.Array = MacroTerminator(MacroTerminator.COMMA | MacroTerminator.NEWLINE | MacroTerminator.RIGHT_SQUARE);
		MacroTerminator.List = MacroTerminator(MacroTerminator.COMMA | MacroTerminator.NEWLINE | MacroTerminator.RIGHT_ROUND);
		MacroTerminator.Object = MacroTerminator(MacroTerminator.COMMA | MacroTerminator.NEWLINE | MacroTerminator.RIGHT_CURLY);
		MacroTerminator.Parenthesis = MacroTerminator(MacroTerminator.NEWLINE | MacroTerminator.RIGHT_ROUND);
		const ParserMode = KSHelper.enum(Object, {
			Default: 0n,
			MacroExpression: 1n,
			Typing: 2n
		});
		const ClassBits = KSHelper.enum(Object, {
			AbstractMethod: 1n,
			Attribute: 2n,
			FinalMethod: 4n,
			FinalVariable: 8n,
			LateVariable: 16n,
			Method: 32n,
			NoAssignment: 64n,
			NoBody: 128n,
			OverrideMethod: 256n,
			OverrideProperty: 512n,
			OverwriteMethod: 1024n,
			OverwriteProperty: 2048n,
			Property: 4096n,
			RequiredAssignment: 8192n,
			Variable: 16384n
		});
		const NO = Event.__ks_new(false);
		class Parser {
			static __ks_new_0(...args) {
				const o = Object.create(Parser.prototype);
				o.__ks_init();
				o.__ks_cons_0(...args);
				return o;
			}
			constructor() {
				this.__ks_init();
				this.__ks_cons_rt.call(null, this, arguments);
			}
			__ks_init() {
				this._mode = ParserMode.Default;
			}
			__ks_cons_0(data) {
				this._scanner = Scanner.__ks_new_0(data);
			}
			__ks_cons_rt(that, args) {
				const t0 = KSType.isString;
				if(args.length === 1) {
					if(t0(args[0])) {
						return Parser.prototype.__ks_cons_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			commit() {
				return this.__ks_func_commit_rt.call(null, this, this, arguments);
			}
			__ks_func_commit_0() {
				this._token = this._scanner.__ks_func_commit_0();
				return this;
			}
			__ks_func_commit_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_commit_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			error() {
				return this.__ks_func_error_rt.call(null, this, this, arguments);
			}
			__ks_func_error_0(message) {
				const error = new SyntaxError(message);
				error.lineNumber = this._scanner.__ks_func_line_0();
				error.columnNumber = this._scanner.__ks_func_column_0();
				return error;
			}
			__ks_func_error_rt(that, proto, args) {
				const t0 = KSType.isString;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_error_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			mark() {
				return this.__ks_func_mark_rt.call(null, this, this, arguments);
			}
			__ks_func_mark_0() {
				return this._scanner.__ks_func_mark_0();
			}
			__ks_func_mark_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_mark_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			match() {
				return this.__ks_func_match_rt.call(null, this, this, arguments);
			}
			__ks_func_match_0(tokens) {
				return this._token = this._scanner.__ks_func_match_0(tokens);
			}
			__ks_func_match_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, Token);
				const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
				let pts;
				if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
					return proto.__ks_func_match_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
				}
				throw KSHelper.badArgs();
			}
			matchM() {
				return this.__ks_func_matchM_rt.call(null, this, this, arguments);
			}
			__ks_func_matchM_0(matcher) {
				return this._token = this._scanner.__ks_func_matchM_0(matcher);
			}
			__ks_func_matchM_rt(that, proto, args) {
				const t0 = KSType.isFunction;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_matchM_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			position() {
				return this.__ks_func_position_rt.call(null, this, this, arguments);
			}
			__ks_func_position_0() {
				return this._scanner.__ks_func_position_0();
			}
			__ks_func_position_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_position_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			printDebug() {
				return this.__ks_func_printDebug_rt.call(null, this, this, arguments);
			}
			__ks_func_printDebug_0(prefix = null) {
				if(KSType.isValue(prefix)) {
					console.log(prefix, this._scanner.__ks_func_toDebug_0());
				}
				else {
					console.log(this._scanner.__ks_func_toDebug_0());
				}
			}
			__ks_func_printDebug_rt(that, proto, args) {
				const t0 = value => KSType.isString(value) || KSType.isNull(value);
				const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
				let pts;
				if(args.length <= 1) {
					if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
						return proto.__ks_func_printDebug_0.call(that, KSHelper.getVararg(args, 0, pts[1]));
					}
				}
				throw KSHelper.badArgs();
			}
			relocate() {
				return this.__ks_func_relocate_rt.call(null, this, this, arguments);
			}
			__ks_func_relocate_0(event, first, last) {
				if(first === void 0) {
					first = null;
				}
				if(last === void 0) {
					last = null;
				}
				if(first !== null) {
					event.start = event.value.start = first.start;
				}
				if(last !== null) {
					event.end = event.value.end = last.end;
				}
				return event;
			}
			__ks_func_relocate_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isStructInstance(value, Event) || KSType.isNull(value);
				if(args.length === 3) {
					if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
						return proto.__ks_func_relocate_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			}
			rollback() {
				return this.__ks_func_rollback_rt.call(null, this, this, arguments);
			}
			__ks_func_rollback_0(mark) {
				return this._scanner.__ks_func_rollback_0(mark);
			}
			__ks_func_rollback_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Marker);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_rollback_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			skipNewLine() {
				return this.__ks_func_skipNewLine_rt.call(null, this, this, arguments);
			}
			__ks_func_skipNewLine_0() {
				if(this._scanner.__ks_func_skipNewLine_0() === -1) {
					this._token = Token.EOF;
				}
				else {
					this._token = Token.INVALID;
				}
			}
			__ks_func_skipNewLine_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_skipNewLine_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			test() {
				return this.__ks_func_test_rt.call(null, this, this, arguments);
			}
			__ks_func_test_0(token) {
				if(this._scanner.__ks_func_test_0(token)) {
					this._token = token;
					return true;
				}
				else {
					return false;
				}
			}
			__ks_func_test_1(tokens) {
				return tokens.indexOf(this.__ks_func_match_0(tokens)) !== -1;
			}
			__ks_func_test_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, Token);
				const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
				let pts;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_test_0.call(that, args[0]);
					}
					throw KSHelper.badArgs();
				}
				if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
					return proto.__ks_func_test_1.call(that, KSHelper.getVarargs(args, 0, pts[1]));
				}
				throw KSHelper.badArgs();
			}
			testNS() {
				return this.__ks_func_testNS_rt.call(null, this, this, arguments);
			}
			__ks_func_testNS_0(token) {
				if(this._scanner.testNS(token)) {
					this._token = token;
					return true;
				}
				else {
					return false;
				}
			}
			__ks_func_testNS_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_testNS_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			throw() {
				return this.__ks_func_throw_rt.call(null, this, this, arguments);
			}
			__ks_func_throw_0() {
				throw this.__ks_func_error_0("Unexpected " + this._scanner.__ks_func_toQuote_0());
			}
			__ks_func_throw_1(expected) {
				throw this.__ks_func_error_0("Expecting \"" + expected + "\" but got " + this._scanner.__ks_func_toQuote_0());
			}
			__ks_func_throw_2(expecteds) {
				throw this.__ks_func_error_0(KSHelper.concatString("Expecting \"", expecteds.slice(0, expecteds.length - 1).join("\", \""), "\" or \"", expecteds[expecteds.length - 1], "\" but got ", this._scanner.__ks_func_toQuote_0()));
			}
			__ks_func_throw_rt(that, proto, args) {
				const t0 = KSType.isArray;
				const t1 = KSType.isString;
				if(args.length === 0) {
					return proto.__ks_func_throw_0.call(that);
				}
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_throw_2.call(that, args[0]);
					}
					if(t1(args[0])) {
						return proto.__ks_func_throw_1.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			until() {
				return this.__ks_func_until_rt.call(null, this, this, arguments);
			}
			__ks_func_until_0(token) {
				return !this._scanner.test(token) && !this._scanner.__ks_func_isEOF_0();
			}
			__ks_func_until_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_until_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			value() {
				return this.__ks_func_value_rt.call(null, this, this, arguments);
			}
			__ks_func_value_0() {
				return this._scanner.__ks_func_value_1(this._token);
			}
			__ks_func_value_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_value_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			yep() {
				return this.__ks_func_yep_rt.call(null, this, this, arguments);
			}
			__ks_func_yep_0() {
				const position = this._scanner.__ks_func_position_0();
				return Event.__ks_new(true, void 0, position.start, position.end);
			}
			__ks_func_yep_1(value) {
				return Event(true, value, value.start, value.end);
			}
			__ks_func_yep_2(value, first, last) {
				return Event(true, value, first.start, last.end);
			}
			__ks_func_yep_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 0) {
					return proto.__ks_func_yep_0.call(that);
				}
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_yep_1.call(that, args[0]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return proto.__ks_func_yep_2.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			}
			yes() {
				return this.__ks_func_yes_rt.call(null, this, this, arguments);
			}
			__ks_func_yes_0() {
				const position = this._scanner.__ks_func_position_0();
				this.__ks_func_commit_0();
				return Event.__ks_new(true, void 0, position.start, position.end);
			}
			__ks_func_yes_1(value) {
				const start = KSType.isValue(value.start) ? value.start : this._scanner.__ks_func_startPosition_0();
				const end = KSType.isValue(value.end) ? value.end : this._scanner.__ks_func_endPosition_0();
				this.__ks_func_commit_0();
				return Event.__ks_new(true, value, start, end);
			}
			__ks_func_yes_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 0) {
					return proto.__ks_func_yes_0.call(that);
				}
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_yes_1.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			NL_0M() {
				return this.__ks_func_NL_0M_rt.call(null, this, this, arguments);
			}
			__ks_func_NL_0M_0() {
				this.__ks_func_skipNewLine_0();
			}
			__ks_func_NL_0M_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_NL_0M_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			altArrayComprehension() {
				return this.__ks_func_altArrayComprehension_rt.call(null, this, this, arguments);
			}
			__ks_func_altArrayComprehension_0(expression, first, fMode) {
				const loop = this.__ks_func_reqForExpression_0(this.__ks_func_yes_0(), fMode);
				this.__ks_func_NL_0M_0();
				if(!this.__ks_func_test_0(Token.RIGHT_SQUARE)) {
					this.__ks_func_throw_1("]");
				}
				return this.yep(AST.ArrayComprehension.__ks_0(expression, loop, first, this.__ks_func_yes_0()));
			}
			__ks_func_altArrayComprehension_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
						return proto.__ks_func_altArrayComprehension_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			}
			altArrayList() {
				return this.__ks_func_altArrayList_rt.call(null, this, this, arguments);
			}
			__ks_func_altArrayList_0(expression, first, fMode) {
				const values = [expression];
				do {
					if(this.__ks_func_match_0([Token.RIGHT_SQUARE, Token.COMMA, Token.NEWLINE]) === Token.RIGHT_SQUARE) {
						return this.yep(AST.ArrayExpression.__ks_0(values, first, this.__ks_func_yes_0()));
					}
					else if(this._token === Token.COMMA) {
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
						values.push(this.__ks_func_reqExpression_0(null, fMode, MacroTerminator.Array));
					}
					else if(this._token === Token.NEWLINE) {
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
						if(this.__ks_func_match_0([Token.RIGHT_SQUARE, Token.COMMA]) === Token.COMMA) {
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
							values.push(this.__ks_func_reqExpression_0(null, fMode, MacroTerminator.Array));
						}
						else if(this._token === Token.RIGHT_SQUARE) {
							return this.yep(AST.ArrayExpression.__ks_0(values, first, this.__ks_func_yes_0()));
						}
						else {
							values.push(this.__ks_func_reqExpression_0(null, fMode, MacroTerminator.Array));
						}
					}
					else {
						break;
					}
				}
				while(true)
				this.__ks_func_throw_1("]");
			}
			__ks_func_altArrayList_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
						return proto.__ks_func_altArrayList_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			}
			altForExpressionFrom() {
				return this.__ks_func_altForExpressionFrom_rt.call(null, this, this, arguments);
			}
			__ks_func_altForExpressionFrom_0(modifiers, variable, first, fMode) {
				const from = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				let til = null, to = null;
				if(this.__ks_func_match_0([Token.TIL, Token.TO]) === Token.TIL) {
					this.__ks_func_commit_0();
					til = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				else if(this._token === Token.TO) {
					this.__ks_func_commit_0();
					to = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				else {
					this.__ks_func_throw_2(["til", "to"]);
				}
				let by = null;
				if(this.__ks_func_test_0(Token.BY)) {
					this.__ks_func_commit_0();
					by = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				let until = null, __ks_while_1 = null;
				if(this.__ks_func_match_0([Token.UNTIL, Token.WHILE]) === Token.UNTIL) {
					this.__ks_func_commit_0();
					until = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				else if(this._token === Token.WHILE) {
					this.__ks_func_commit_0();
					__ks_while_1 = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				this.__ks_func_NL_0M_0();
				let whenExp = null;
				if(this.__ks_func_test_0(Token.WHEN)) {
					const first = this.__ks_func_yes_0();
					whenExp = this.__ks_func_relocate_0(this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode), first, null);
				}
				return this.yep(AST.ForFromStatement.__ks_0(modifiers, variable, from, til, to, by, until, __ks_while_1, whenExp, first, KSType.isValue(whenExp) ? whenExp : KSType.isValue(__ks_while_1) ? __ks_while_1 : KSType.isValue(until) ? until : KSType.isValue(by) ? by : KSType.isValue(to) ? to : KSType.isValue(til) ? til : from));
			}
			__ks_func_altForExpressionFrom_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isStructInstance(value, Event);
				const t2 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 4) {
					if(t0(args[0]) && t1(args[1]) && t1(args[2]) && t2(args[3])) {
						return proto.__ks_func_altForExpressionFrom_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			}
			altForExpressionIn() {
				return this.__ks_func_altForExpressionIn_rt.call(null, this, this, arguments);
			}
			__ks_func_altForExpressionIn_0(modifiers, value, type, index, expression, first, fMode) {
				let desc = null;
				if(this.__ks_func_test_0(Token.DESC)) {
					desc = this.__ks_func_yes_0();
					modifiers.push(AST.Modifier.__ks_0(ModifierKind.Descending, desc));
				}
				this.__ks_func_NL_0M_0();
				let from = null, til = null, to = null, by = null;
				if(this.__ks_func_test_0(Token.FROM)) {
					this.__ks_func_commit_0();
					from = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				if(this.__ks_func_match_0([Token.TIL, Token.TO]) === Token.TIL) {
					this.__ks_func_commit_0();
					til = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				else if(this._token === Token.TO) {
					this.__ks_func_commit_0();
					to = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				if(this.__ks_func_test_0(Token.BY)) {
					this.__ks_func_commit_0();
					by = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				this.__ks_func_NL_0M_0();
				let until = null, __ks_while_1 = null;
				if(this.__ks_func_match_0([Token.UNTIL, Token.WHILE]) === Token.UNTIL) {
					this.__ks_func_commit_0();
					until = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				else if(this._token === Token.WHILE) {
					this.__ks_func_commit_0();
					__ks_while_1 = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				this.__ks_func_NL_0M_0();
				let whenExp = null;
				if(this.__ks_func_test_0(Token.WHEN)) {
					const first = this.__ks_func_yes_0();
					whenExp = this.__ks_func_relocate_0(this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode), first, null);
				}
				return this.yep(AST.ForInStatement.__ks_0(modifiers, value, type, index, expression, from, til, to, by, until, __ks_while_1, whenExp, first, KSType.isValue(whenExp) ? whenExp : KSType.isValue(__ks_while_1) ? __ks_while_1 : KSType.isValue(until) ? until : KSType.isValue(by) ? by : KSType.isValue(to) ? to : KSType.isValue(til) ? til : KSType.isValue(from) ? from : KSType.isValue(desc) ? desc : expression));
			}
			__ks_func_altForExpressionIn_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isStructInstance(value, Event);
				const t2 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 7) {
					if(t0(args[0]) && t1(args[1]) && t1(args[2]) && t1(args[3]) && t1(args[4]) && t1(args[5]) && t2(args[6])) {
						return proto.__ks_func_altForExpressionIn_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
					}
				}
				throw KSHelper.badArgs();
			}
			altForExpressionInRange() {
				return this.__ks_func_altForExpressionInRange_rt.call(null, this, this, arguments);
			}
			__ks_func_altForExpressionInRange_0(modifiers, value, type, index, first, fMode) {
				let operand = this.__ks_func_tryRangeOperand_0(ExpressionMode.Default, fMode);
				if(operand.ok) {
					if((this.__ks_func_match_0([Token.LEFT_ANGLE, Token.DOT_DOT]) === Token.LEFT_ANGLE) || (this._token === Token.DOT_DOT)) {
						const then = this._token === Token.LEFT_ANGLE;
						if(then) {
							this.__ks_func_commit_0();
							if(!this.__ks_func_test_0(Token.DOT_DOT)) {
								this.__ks_func_throw_1("..");
							}
							this.__ks_func_commit_0();
						}
						else {
							this.__ks_func_commit_0();
						}
						const til = this.__ks_func_test_0(Token.LEFT_ANGLE);
						if(til) {
							this.__ks_func_commit_0();
						}
						const toOperand = this.__ks_func_reqPrefixedOperand_0(ExpressionMode.Default, fMode);
						let byOperand = null;
						if(this.__ks_func_test_0(Token.DOT_DOT)) {
							this.__ks_func_commit_0();
							byOperand = this.__ks_func_reqPrefixedOperand_0(ExpressionMode.Default, fMode);
						}
						return this.__ks_func_altForExpressionRange_0(modifiers, value, index, then ? null : operand, then ? operand : null, til ? toOperand : null, til ? null : toOperand, byOperand, first, fMode);
					}
					else {
						return this.__ks_func_altForExpressionIn_0(modifiers, value, type, index, operand, first, fMode);
					}
				}
				else {
					return this.__ks_func_altForExpressionIn_0(modifiers, value, type, index, this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode), first, fMode);
				}
			}
			__ks_func_altForExpressionInRange_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isStructInstance(value, Event);
				const t2 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 6) {
					if(t0(args[0]) && t1(args[1]) && t1(args[2]) && t1(args[3]) && t1(args[4]) && t2(args[5])) {
						return proto.__ks_func_altForExpressionInRange_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
					}
				}
				throw KSHelper.badArgs();
			}
			altForExpressionOf() {
				return this.__ks_func_altForExpressionOf_rt.call(null, this, this, arguments);
			}
			__ks_func_altForExpressionOf_0(modifiers, value, type, key, first, fMode) {
				const expression = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				let until = null, __ks_while_1 = null;
				if(this.__ks_func_match_0([Token.UNTIL, Token.WHILE]) === Token.UNTIL) {
					this.__ks_func_commit_0();
					until = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				else if(this._token === Token.WHILE) {
					this.__ks_func_commit_0();
					__ks_while_1 = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				this.__ks_func_NL_0M_0();
				let whenExp = null;
				if(this.__ks_func_test_0(Token.WHEN)) {
					const first = this.__ks_func_yes_0();
					whenExp = this.__ks_func_relocate_0(this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode), first, null);
				}
				return this.yep(AST.ForOfStatement.__ks_0(modifiers, value, type, key, expression, until, __ks_while_1, whenExp, first, KSType.isValue(whenExp) ? whenExp : KSType.isValue(__ks_while_1) ? __ks_while_1 : KSType.isValue(until) ? until : expression));
			}
			__ks_func_altForExpressionOf_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isStructInstance(value, Event);
				const t2 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 6) {
					if(t0(args[0]) && t1(args[1]) && t1(args[2]) && t1(args[3]) && t1(args[4]) && t2(args[5])) {
						return proto.__ks_func_altForExpressionOf_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
					}
				}
				throw KSHelper.badArgs();
			}
			altForExpressionRange() {
				return this.__ks_func_altForExpressionRange_rt.call(null, this, this, arguments);
			}
			__ks_func_altForExpressionRange_0(modifiers, value, index, from, then, til, to, by, first, fMode) {
				if(from === void 0) {
					from = null;
				}
				if(then === void 0) {
					then = null;
				}
				if(til === void 0) {
					til = null;
				}
				if(to === void 0) {
					to = null;
				}
				if(by === void 0) {
					by = null;
				}
				let until = null, __ks_while_1 = null;
				if(this.__ks_func_match_0([Token.UNTIL, Token.WHILE]) === Token.UNTIL) {
					this.__ks_func_commit_0();
					until = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				else if(this._token === Token.WHILE) {
					this.__ks_func_commit_0();
					__ks_while_1 = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				this.__ks_func_NL_0M_0();
				let whenExp = null;
				if(this.__ks_func_test_0(Token.WHEN)) {
					const first = this.__ks_func_yes_0();
					whenExp = this.__ks_func_relocate_0(this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode), first, null);
				}
				return this.yep(AST.ForRangeStatement.__ks_0(modifiers, value, index, from, then, til, to, by, until, __ks_while_1, whenExp, first, KSType.isValue(whenExp) ? whenExp : KSType.isValue(__ks_while_1) ? __ks_while_1 : KSType.isValue(until) ? until : KSType.isValue(by) ? by : KSType.isValue(to) ? to : KSType.isValue(til) ? til : KSType.isValue(then) ? then : KSHelper.notNull(from)));
			}
			__ks_func_altForExpressionRange_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isStructInstance(value, Event);
				const t2 = value => KSType.isStructInstance(value, Event) || KSType.isNull(value);
				const t3 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 10) {
					if(t0(args[0]) && t1(args[1]) && t1(args[2]) && t2(args[3]) && t2(args[4]) && t2(args[5]) && t2(args[6]) && t2(args[7]) && t1(args[8]) && t3(args[9])) {
						return proto.__ks_func_altForExpressionRange_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
					}
				}
				throw KSHelper.badArgs();
			}
			isAmbiguousIdentifier() {
				return this.__ks_func_isAmbiguousIdentifier_rt.call(null, this, this, arguments);
			}
			__ks_func_isAmbiguousIdentifier_0(result) {
				if(this.__ks_func_test_0(Token.IDENTIFIER)) {
					result.token = null;
					result.identifier = this.yep(AST.Identifier.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0()));
					return true;
				}
				else {
					return false;
				}
			}
			__ks_func_isAmbiguousIdentifier_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, AmbiguityResult);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_isAmbiguousIdentifier_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			isAmbiguousAccessModifierForEnum() {
				return this.__ks_func_isAmbiguousAccessModifierForEnum_rt.call(null, this, this, arguments);
			}
			__ks_func_isAmbiguousAccessModifierForEnum_0(modifiers, result) {
				let identifier = null;
				let token = null;
				if(this.__ks_func_test_1([Token.PRIVATE, Token.PUBLIC, Token.INTERNAL])) {
					token = this._token;
					identifier = AST.Identifier.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0());
				}
				else {
					return false;
				}
				if(this.__ks_func_test_1([Token.EQUALS, Token.LEFT_ROUND])) {
					result.token = this._token;
					result.identifier = this.yep(identifier);
					return true;
				}
				else {
					if(token === Token.PRIVATE) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Private, identifier)));
					}
					else if(token === Token.PUBLIC) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Public, identifier)));
					}
					else {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Internal, identifier)));
					}
					result.token = null;
					result.identifier = this.yep(identifier);
					return false;
				}
			}
			__ks_func_isAmbiguousAccessModifierForEnum_rt(that, proto, args) {
				const t0 = value => KSType.isArray(value, value => KSType.isStructInstance(value, Event));
				const t1 = value => KSType.isStructInstance(value, AmbiguityResult);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_isAmbiguousAccessModifierForEnum_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			isAmbiguousAsyncModifier() {
				return this.__ks_func_isAmbiguousAsyncModifier_rt.call(null, this, this, arguments);
			}
			__ks_func_isAmbiguousAsyncModifier_0(modifiers, result) {
				if(!this.__ks_func_test_0(Token.ASYNC)) {
					return false;
				}
				const identifier = AST.Identifier.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0());
				if(this.__ks_func_test_0(Token.IDENTIFIER)) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Async, identifier)));
					result.token = this._token;
					result.identifier = this.yep(AST.Identifier.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0()));
				}
				else {
					result.token = null;
					result.identifier = this.yep(identifier);
				}
				return true;
			}
			__ks_func_isAmbiguousAsyncModifier_rt(that, proto, args) {
				const t0 = value => KSType.isArray(value, value => KSType.isStructInstance(value, Event));
				const t1 = value => KSType.isStructInstance(value, AmbiguityResult);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_isAmbiguousAsyncModifier_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			isAmbiguousStaticModifier() {
				return this.__ks_func_isAmbiguousStaticModifier_rt.call(null, this, this, arguments);
			}
			__ks_func_isAmbiguousStaticModifier_0(modifiers, result) {
				let identifier = null;
				if(this.__ks_func_test_0(Token.STATIC)) {
					identifier = AST.Identifier.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0());
				}
				else {
					return false;
				}
				if(this.__ks_func_test_1([Token.EQUALS, Token.LEFT_ROUND])) {
					result.token = this._token;
					result.identifier = this.yep(identifier);
					return true;
				}
				else {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Static, identifier)));
					result.token = null;
					result.identifier = this.yep(identifier);
					return false;
				}
			}
			__ks_func_isAmbiguousStaticModifier_rt(that, proto, args) {
				const t0 = value => KSType.isArray(value, value => KSType.isStructInstance(value, Event));
				const t1 = value => KSType.isStructInstance(value, AmbiguityResult);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_isAmbiguousStaticModifier_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqAccessModifiers() {
				return this.__ks_func_reqAccessModifiers_rt.call(null, this, this, arguments);
			}
			__ks_func_reqAccessModifiers_0(modifiers) {
				if(this.__ks_func_match_0([Token.PRIVATE, Token.PROTECTED, Token.PUBLIC, Token.INTERNAL]) === Token.PRIVATE) {
					modifiers.push(this.yep(AST.Modifier.__ks_0(ModifierKind.Private, this.__ks_func_yes_0())));
				}
				else if(this._token === Token.PROTECTED) {
					modifiers.push(this.yep(AST.Modifier.__ks_0(ModifierKind.Protected, this.__ks_func_yes_0())));
				}
				else if(this._token === Token.PUBLIC) {
					modifiers.push(this.yep(AST.Modifier.__ks_0(ModifierKind.Public, this.__ks_func_yes_0())));
				}
				else if(this._token === Token.INTERNAL) {
					modifiers.push(this.yep(AST.Modifier.__ks_0(ModifierKind.Internal, this.__ks_func_yes_0())));
				}
				return modifiers;
			}
			__ks_func_reqAccessModifiers_rt(that, proto, args) {
				const t0 = value => KSType.isArray(value, value => KSType.isStructInstance(value, Event));
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqAccessModifiers_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqArray() {
				return this.__ks_func_reqArray_rt.call(null, this, this, arguments);
			}
			__ks_func_reqArray_0(first, fMode) {
				if(this.__ks_func_test_0(Token.RIGHT_SQUARE)) {
					return this.yep(AST.ArrayExpression.__ks_0([], first, this.__ks_func_yes_0()));
				}
				const mark = this.__ks_func_mark_0();
				let operand = this.__ks_func_tryRangeOperand_0(ExpressionMode.Default, fMode);
				if(operand.ok && ((this.__ks_func_match_0([Token.LEFT_ANGLE, Token.DOT_DOT]) === Token.LEFT_ANGLE) || (this._token === Token.DOT_DOT))) {
					const then = this._token === Token.LEFT_ANGLE;
					if(then) {
						this.__ks_func_commit_0();
						if(!this.__ks_func_test_0(Token.DOT_DOT)) {
							this.__ks_func_throw_1("..");
						}
						this.__ks_func_commit_0();
					}
					else {
						this.__ks_func_commit_0();
					}
					const til = this.__ks_func_test_0(Token.LEFT_ANGLE);
					if(til) {
						this.__ks_func_commit_0();
					}
					const toOperand = this.__ks_func_reqPrefixedOperand_0(ExpressionMode.Default, fMode);
					let byOperand = null;
					if(this.__ks_func_test_0(Token.DOT_DOT)) {
						this.__ks_func_commit_0();
						byOperand = this.__ks_func_reqPrefixedOperand_0(ExpressionMode.Default, fMode);
					}
					if(!this.__ks_func_test_0(Token.RIGHT_SQUARE)) {
						this.__ks_func_throw_1("]");
					}
					if(then) {
						if(til) {
							return this.yep(AST.ArrayRangeTI.__ks_0(operand, toOperand, byOperand, first, this.__ks_func_yes_0()));
						}
						else {
							return this.yep(AST.ArrayRangeTO.__ks_0(operand, toOperand, byOperand, first, this.__ks_func_yes_0()));
						}
					}
					else {
						if(til) {
							return this.yep(AST.ArrayRangeFI.__ks_0(operand, toOperand, byOperand, first, this.__ks_func_yes_0()));
						}
						else {
							return this.yep(AST.ArrayRangeFO.__ks_0(operand, toOperand, byOperand, first, this.__ks_func_yes_0()));
						}
					}
				}
				else {
					this.__ks_func_rollback_0(mark);
					this.__ks_func_NL_0M_0();
					if(this.__ks_func_test_0(Token.RIGHT_SQUARE)) {
						return this.yep(AST.ArrayExpression.__ks_0([], first, this.__ks_func_yes_0()));
					}
					const expression = this.__ks_func_reqExpression_0(null, fMode, MacroTerminator.Array);
					if(this.__ks_func_match_0([Token.RIGHT_SQUARE, Token.FOR, Token.NEWLINE]) === Token.RIGHT_SQUARE) {
						return this.yep(AST.ArrayExpression.__ks_0([expression], first, this.__ks_func_yes_0()));
					}
					else if(this._token === Token.FOR) {
						return this.__ks_func_altArrayComprehension_0(expression, first, fMode);
					}
					else if(this._token === Token.NEWLINE) {
						const mark = this.__ks_func_mark_0();
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
						if(this.__ks_func_match_0([Token.RIGHT_SQUARE, Token.FOR]) === Token.RIGHT_SQUARE) {
							return this.yep(AST.ArrayExpression.__ks_0([expression], first, this.__ks_func_yes_0()));
						}
						else if(this._token === Token.FOR) {
							return this.__ks_func_altArrayComprehension_0(expression, first, fMode);
						}
						else {
							this.__ks_func_rollback_0(mark);
							return this.__ks_func_altArrayList_0(expression, first, fMode);
						}
					}
					else {
						return this.__ks_func_altArrayList_0(expression, first, fMode);
					}
				}
			}
			__ks_func_reqArray_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqArray_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqAttribute() {
				return this.__ks_func_reqAttribute_rt.call(null, this, this, arguments);
			}
			__ks_func_reqAttribute_0(first, isStatement) {
				const declaration = this.__ks_func_reqAttributeMember_0();
				if(!this.__ks_func_test_0(Token.RIGHT_SQUARE)) {
					this.__ks_func_throw_1("]");
				}
				const last = this.__ks_func_yes_0();
				if(isStatement) {
					if(!this.__ks_func_test_0(Token.NEWLINE)) {
						this.__ks_func_throw_1("NewLine");
					}
					this.__ks_func_commit_0();
				}
				this._scanner.__ks_func_skipComments_0();
				return this.yep(AST.AttributeDeclaration.__ks_0(declaration, first, last));
			}
			__ks_func_reqAttribute_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = KSType.isBoolean;
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqAttribute_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqAttributeIdentifier() {
				return this.__ks_func_reqAttributeIdentifier_rt.call(null, this, this, arguments);
			}
			__ks_func_reqAttributeIdentifier_0() {
				if(this._scanner.__ks_func_test_0(Token.ATTRIBUTE_IDENTIFIER)) {
					return this.yep(AST.Identifier.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0()));
				}
				else {
					this.__ks_func_throw_1("Identifier");
				}
			}
			__ks_func_reqAttributeIdentifier_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_reqAttributeIdentifier_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			reqAttributeMember() {
				return this.__ks_func_reqAttributeMember_rt.call(null, this, this, arguments);
			}
			__ks_func_reqAttributeMember_0() {
				const identifier = this.__ks_func_reqAttributeIdentifier_0();
				if(this.__ks_func_match_0([Token.EQUALS, Token.LEFT_ROUND]) === Token.EQUALS) {
					this.__ks_func_commit_0();
					const value = this.__ks_func_reqString_0();
					return this.yep(AST.AttributeOperation.__ks_0(identifier, value, identifier, value));
				}
				else if(this._token === Token.LEFT_ROUND) {
					this.__ks_func_commit_0();
					const __ks_arguments_1 = [this.__ks_func_reqAttributeMember_0()];
					while(this.__ks_func_test_0(Token.COMMA)) {
						this.__ks_func_commit_0();
						__ks_arguments_1.push(this.__ks_func_reqAttributeMember_0());
					}
					if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
						this.__ks_func_throw_1(")");
					}
					return this.yep(AST.AttributeExpression.__ks_0(identifier, __ks_arguments_1, identifier, this.__ks_func_yes_0()));
				}
				else {
					return identifier;
				}
			}
			__ks_func_reqAttributeMember_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_reqAttributeMember_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			reqAwaitExpression() {
				return this.__ks_func_reqAwaitExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_reqAwaitExpression_0(first, fMode) {
				const operand = this.__ks_func_reqPrefixedOperand_0(ExpressionMode.Default, fMode);
				return this.yep(AST.AwaitExpression.__ks_0([], null, operand, first, operand));
			}
			__ks_func_reqAwaitExpression_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqAwaitExpression_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqBinaryOperand() {
				return this.__ks_func_reqBinaryOperand_rt.call(null, this, this, arguments);
			}
			__ks_func_reqBinaryOperand_0(eMode, fMode) {
				const mark = this.__ks_func_mark_0();
				let expression = null;
				if((expression = this.__ks_func_tryAwaitExpression_0(eMode, fMode)).ok) {
					return expression;
				}
				else if(this.__ks_func_rollback_0(mark) && (expression = this.__ks_func_tryFunctionExpression_0(eMode, fMode)).ok) {
					return expression;
				}
				else if(this.__ks_func_rollback_0(mark) && (expression = this.__ks_func_trySwitchExpression_0(eMode, fMode)).ok) {
					return expression;
				}
				else if(this.__ks_func_rollback_0(mark) && (expression = this.__ks_func_tryTryExpression_0(eMode, fMode)).ok) {
					return expression;
				}
				this.__ks_func_rollback_0(mark);
				return this.__ks_func_reqPrefixedOperand_0(eMode, fMode);
			}
			__ks_func_reqBinaryOperand_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, ExpressionMode);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqBinaryOperand_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqBlock() {
				return this.__ks_func_reqBlock_rt.call(null, this, this, arguments);
			}
			__ks_func_reqBlock_0(first, fMode) {
				if(!first.ok) {
					if(!this.__ks_func_test_0(Token.LEFT_CURLY)) {
						this.__ks_func_throw_1("{");
					}
					first = this.__ks_func_yes_0();
				}
				this.__ks_func_NL_0M_0();
				const attributes = [];
				const statements = [];
				let attrs = [];
				let statement = null;
				while((this.__ks_func_match_0([Token.RIGHT_CURLY, Token.HASH_EXCLAMATION_LEFT_SQUARE, Token.HASH_LEFT_SQUARE]) !== Token.EOF) && (this._token !== Token.RIGHT_CURLY)) {
					if(this.__ks_func_stackInnerAttributes_0(attributes)) {
						continue;
					}
					this.__ks_func_stackOuterAttributes_0(attrs);
					statement = this.__ks_func_reqStatement_0(fMode);
					if(attrs.length > 0) {
						statement.value.attributes.unshift(...KSHelper.mapArray(attrs, function(attr) {
							return attr.value;
						}));
						statement.value.start = statement.value.attributes[0].start;
						attrs = [];
					}
					statements.push(statement);
					this.__ks_func_NL_0M_0();
				}
				if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
					this.__ks_func_throw_1("}");
				}
				return this.yep(AST.Block.__ks_0(attributes, statements, first, this.__ks_func_yes_0()));
			}
			__ks_func_reqBlock_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqBlock_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqBreakStatement() {
				return this.__ks_func_reqBreakStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqBreakStatement_0(first) {
				return this.yep(AST.BreakStatement.__ks_0(first));
			}
			__ks_func_reqBreakStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqBreakStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqCatchOnClause() {
				return this.__ks_func_reqCatchOnClause_rt.call(null, this, this, arguments);
			}
			__ks_func_reqCatchOnClause_0(first, fMode) {
				const type = this.__ks_func_reqIdentifier_0();
				let binding = null;
				if(this.__ks_func_test_0(Token.CATCH)) {
					this.__ks_func_commit_0();
					binding = this.__ks_func_reqIdentifier_0();
				}
				this.__ks_func_NL_0M_0();
				const body = this.__ks_func_reqBlock_0(NO, fMode);
				return this.yep(AST.CatchClause.__ks_0(binding, type, body, first, body));
			}
			__ks_func_reqCatchOnClause_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqCatchOnClause_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqClassMember() {
				return this.__ks_func_reqClassMember_rt.call(null, this, this, arguments);
			}
			__ks_func_reqClassMember_0(attributes, modifiers, bits, first) {
				if(first === void 0) {
					first = null;
				}
				const member = this.__ks_func_tryClassMember_1(attributes, modifiers, bits, first);
				if(!member.ok) {
					this.__ks_func_throw_2(["Identifier", "String", "Template"]);
				}
				return member;
			}
			__ks_func_reqClassMember_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isEnumInstance(value, ClassBits);
				const t2 = value => KSType.isStructInstance(value, Event) || KSType.isNull(value);
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3])) {
						return proto.__ks_func_reqClassMember_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqClassMemberBlock() {
				return this.__ks_func_reqClassMemberBlock_rt.call(null, this, this, arguments);
			}
			__ks_func_reqClassMemberBlock_0(attributes, modifiers, bits, members) {
				this.__ks_func_commit_0().__ks_func_NL_0M_0();
				let attrs = [...attributes];
				bits = ClassBits(bits | ClassBits.Attribute);
				while(this.__ks_func_until_0(Token.RIGHT_CURLY)) {
					if(this.__ks_func_stackInnerAttributes_0(attrs)) {
						continue;
					}
					members.push(this.__ks_func_reqClassMember_0(attrs, modifiers, bits, null));
				}
				if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
					this.__ks_func_throw_1("}");
				}
				this.__ks_func_commit_0().__ks_func_reqNL_1M_0();
			}
			__ks_func_reqClassMemberBlock_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isEnumInstance(value, ClassBits);
				const t2 = value => KSType.isArray(value, value => KSType.isStructInstance(value, Event));
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3])) {
						return proto.__ks_func_reqClassMemberBlock_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqClassMemberList() {
				return this.__ks_func_reqClassMemberList_rt.call(null, this, this, arguments);
			}
			__ks_func_reqClassMemberList_0(members) {
				let first = null;
				const attributes = this.__ks_func_stackOuterAttributes_0([]);
				if(attributes.length !== 0) {
					first = attributes[0];
				}
				const macroMark = this.__ks_func_mark_0();
				if(this.__ks_func_test_0(Token.MACRO)) {
					const second = this.__ks_func_yes_0();
					let identifier;
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
						while(this.__ks_func_until_0(Token.RIGHT_CURLY)) {
							members.push(this.__ks_func_reqMacroStatement_0(attributes));
						}
						if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
							this.__ks_func_throw_1("}");
						}
						this.__ks_func_commit_0().__ks_func_reqNL_1M_0();
						return;
					}
					else if((identifier = this.__ks_func_tryIdentifier_0()).ok) {
						members.push(this.reqMacroStatement(attributes, identifier, KSType.isValue(first) ? first : second));
						return;
					}
					this.__ks_func_rollback_0(macroMark);
				}
				const accessMark = this.__ks_func_mark_0();
				const accessModifier = this.__ks_func_tryAccessModifier_0();
				if(accessModifier.ok && this.__ks_func_test_0(Token.LEFT_CURLY)) {
					return this.__ks_func_reqClassMemberBlock_0(attributes, [accessModifier], ClassBits(ClassBits.Variable | ClassBits.FinalVariable | ClassBits.LateVariable | ClassBits.Property | ClassBits.Method), members);
				}
				if(this.__ks_func_test_0(Token.ABSTRACT)) {
					const mark = this.__ks_func_mark_0();
					const modifier = this.yep(AST.Modifier.__ks_0(ModifierKind.Abstract, this.__ks_func_yes_0()));
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						const modifiers = [modifier];
						if(accessModifier.ok) {
							modifiers.unshift(accessModifier);
						}
						return this.__ks_func_reqClassMemberBlock_0(attributes, modifiers, ClassBits(ClassBits.Method | ClassBits.Property | ClassBits.NoBody), members);
					}
					this.__ks_func_rollback_0(mark);
				}
				else if(this.__ks_func_test_0(Token.OVERRIDE)) {
					const mark = this.__ks_func_mark_0();
					const modifier = this.yep(AST.Modifier.__ks_0(ModifierKind.Override, this.__ks_func_yes_0()));
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						const modifiers = [modifier];
						if(accessModifier.ok) {
							modifiers.unshift(accessModifier);
						}
						return this.__ks_func_reqClassMemberBlock_0(attributes, modifiers, ClassBits(ClassBits.Method | ClassBits.Property), members);
					}
					this.__ks_func_rollback_0(mark);
				}
				const staticMark = this.__ks_func_mark_0();
				let staticModifier = NO;
				if(this.__ks_func_test_0(Token.STATIC)) {
					staticModifier = this.yep(AST.Modifier.__ks_0(ModifierKind.Static, this.__ks_func_yes_0()));
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						const modifiers = [staticModifier];
						if(accessModifier.ok) {
							modifiers.unshift(accessModifier);
						}
						return this.__ks_func_reqClassMemberBlock_0(attributes, modifiers, ClassBits(ClassBits.Variable | ClassBits.FinalVariable | ClassBits.LateVariable | ClassBits.Property | ClassBits.Method | ClassBits.FinalMethod), members);
					}
				}
				const finalMark = this.__ks_func_mark_0();
				let finalModifier = NO;
				if(this.__ks_func_test_0(Token.FINAL)) {
					finalModifier = this.yep(AST.Modifier.__ks_0(ModifierKind.Immutable, this.__ks_func_yes_0()));
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						const modifiers = [finalModifier];
						if(staticModifier.ok) {
							modifiers.unshift(staticModifier);
						}
						if(accessModifier.ok) {
							modifiers.unshift(accessModifier);
						}
						if(staticModifier.ok) {
							return this.__ks_func_reqClassMemberBlock_0(attributes, modifiers, ClassBits(ClassBits.Variable | ClassBits.LateVariable | ClassBits.RequiredAssignment | ClassBits.Property | ClassBits.Method), members);
						}
						else {
							return this.__ks_func_reqClassMemberBlock_0(attributes, modifiers, ClassBits(ClassBits.Variable | ClassBits.LateVariable | ClassBits.RequiredAssignment | ClassBits.Property | ClassBits.OverrideProperty | ClassBits.Method | ClassBits.OverrideMethod), members);
						}
					}
					else if(!staticModifier.ok && this.__ks_func_test_0(Token.OVERRIDE)) {
						const mark = this.__ks_func_mark_0();
						const modifier = this.yep(AST.Modifier.__ks_0(ModifierKind.Override, this.__ks_func_yes_0()));
						if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
							const modifiers = [finalModifier, modifier];
							if(accessModifier.ok) {
								modifiers.unshift(accessModifier);
							}
							return this.__ks_func_reqClassMemberBlock_0(attributes, modifiers, ClassBits(ClassBits.Method | ClassBits.Property), members);
						}
						this.__ks_func_rollback_0(mark);
					}
				}
				if(this.__ks_func_test_0(Token.LATE)) {
					const lateMark = this.__ks_func_mark_0();
					const lateModifier = this.yep(AST.Modifier.__ks_0(ModifierKind.LateInit, this.__ks_func_yes_0()));
					const modifiers = [lateModifier];
					if(finalModifier.ok) {
						modifiers.unshift(finalModifier);
					}
					if(staticModifier.ok) {
						modifiers.unshift(staticModifier);
					}
					if(accessModifier.ok) {
						modifiers.unshift(accessModifier);
					}
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						return this.__ks_func_reqClassMemberBlock_0(attributes, modifiers, finalModifier.ok ? ClassBits.Variable : ClassBits(ClassBits.Variable | ClassBits.FinalVariable), members);
					}
					const member = this.tryClassMember(attributes, modifiers, ClassBits(ClassBits.Variable | ClassBits.NoAssignment), KSType.isValue(first) ? first : modifiers[0]);
					if(member.ok) {
						members.push(member);
						return;
					}
					this.__ks_func_rollback_0(lateMark);
				}
				else if(this.__ks_func_test_0(Token.OVERRIDE)) {
				}
				if(accessModifier.ok) {
					const member = this.tryClassMember(attributes, [accessModifier], staticModifier, staticMark, finalModifier, finalMark, KSType.isValue(first) ? first : accessModifier);
					if(member.ok === true) {
						members.push(member);
						return;
					}
					this.__ks_func_rollback_0(accessMark);
				}
				const member = this.tryClassMember(attributes, [], staticModifier, staticMark, finalModifier, finalMark, first);
				if(!(member.ok === true)) {
					this.__ks_func_throw_2(["Identifier", "String", "Template"]);
				}
				members.push(member);
			}
			__ks_func_reqClassMemberList_rt(that, proto, args) {
				const t0 = value => KSType.isArray(value, value => KSType.isStructInstance(value, Event));
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqClassMemberList_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqClassMethod() {
				return this.__ks_func_reqClassMethod_rt.call(null, this, this, arguments);
			}
			__ks_func_reqClassMethod_0(attributes, modifiers, bits, name, round, first) {
				if(round === void 0) {
					round = null;
				}
				if(first === void 0) {
					first = null;
				}
				const parameters = this.__ks_func_reqClassMethodParameterList_0(round);
				const type = this.__ks_func_tryMethodReturns_0((bits & ClassBits.NoBody) === 0n);
				const __ks_throws_1 = this.__ks_func_tryFunctionThrows_0();
				if((bits & ClassBits.NoBody) !== 0n) {
					this.__ks_func_reqNL_1M_0();
					return this.yep(AST.MethodDeclaration(attributes, modifiers, name, parameters, type, __ks_throws_1, null, first, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
				}
				else {
					const body = this.__ks_func_tryFunctionBody_0(FunctionMode.Method);
					this.__ks_func_reqNL_1M_0();
					return this.yep(AST.MethodDeclaration(attributes, modifiers, name, parameters, type, __ks_throws_1, body, first, KSType.isValue(body) ? body : KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
				}
			}
			__ks_func_reqClassMethod_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isEnumInstance(value, ClassBits);
				const t2 = value => KSType.isStructInstance(value, Event);
				const t3 = value => KSType.isStructInstance(value, Event) || KSType.isNull(value);
				if(args.length === 6) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3]) && t3(args[4]) && t3(args[5])) {
						return proto.__ks_func_reqClassMethod_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqClassMethodParameterList() {
				return this.__ks_func_reqClassMethodParameterList_rt.call(null, this, this, arguments);
			}
			__ks_func_reqClassMethodParameterList_0(top) {
				if(top === void 0 || top === null) {
					top = this.__ks_default_0_0();
				}
				if(!top.ok) {
					if(!this.__ks_func_test_0(Token.LEFT_ROUND)) {
						this.__ks_func_throw_1("(");
					}
					top = this.__ks_func_yes_0();
				}
				const parameters = [];
				const pMode = DestructuringMode(DestructuringMode.Parameter | DestructuringMode.THIS_ALIAS);
				while(this.__ks_func_until_0(Token.RIGHT_ROUND)) {
					while(this.__ks_func_reqParameter_0(parameters, pMode, FunctionMode.Method)) {
					}
				}
				if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
					this.__ks_func_throw_1(")");
				}
				return this.__ks_func_yep_2(parameters, top, this.__ks_func_yes_0());
			}
			__ks_default_0_0() {
				return NO;
			}
			__ks_func_reqClassMethodParameterList_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event) || KSType.isNull(value);
				const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
				let pts;
				if(args.length <= 1) {
					if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
						return proto.__ks_func_reqClassMethodParameterList_0.call(that, KSHelper.getVararg(args, 0, pts[1]));
					}
				}
				throw KSHelper.badArgs();
			}
			reqClassProperty() {
				return this.__ks_func_reqClassProperty_rt.call(null, this, this, arguments);
			}
			__ks_func_reqClassProperty_0(attributes, modifiers, name, type, first) {
				if(type === void 0) {
					type = null;
				}
				let defaultValue = null, accessor = null, mutator = null;
				if(this.__ks_func_test_0(Token.NEWLINE)) {
					this.__ks_func_commit_0().__ks_func_NL_0M_0();
					if(this.__ks_func_match_0([Token.GET, Token.SET]) === Token.GET) {
						const first = this.__ks_func_yes_0();
						if(this.__ks_func_match_0([Token.EQUALS_RIGHT_ANGLE, Token.LEFT_CURLY]) === Token.EQUALS_RIGHT_ANGLE) {
							this.__ks_func_commit_0();
							const expression = this.__ks_func_reqExpression_0(ExpressionMode.Default, FunctionMode.Method);
							accessor = this.yep(AST.AccessorDeclaration.__ks_1(expression, first, expression));
						}
						else if(this._token === Token.LEFT_CURLY) {
							const block = this.__ks_func_reqBlock_0(NO, FunctionMode.Method);
							accessor = this.yep(AST.AccessorDeclaration.__ks_1(block, first, block));
						}
						else {
							accessor = this.yep(AST.AccessorDeclaration.__ks_0(first));
						}
						this.__ks_func_reqNL_1M_0();
						if(this.__ks_func_test_0(Token.SET)) {
							const first = this.__ks_func_yes_0();
							if(this.__ks_func_match_0([Token.EQUALS_RIGHT_ANGLE, Token.LEFT_CURLY]) === Token.EQUALS_RIGHT_ANGLE) {
								this.__ks_func_commit_0();
								const expression = this.__ks_func_reqExpression_0(ExpressionMode.Default, FunctionMode.Method);
								mutator = this.yep(AST.MutatorDeclaration.__ks_1(expression, first, expression));
							}
							else if(this._token === Token.LEFT_CURLY) {
								const block = this.__ks_func_reqBlock_0(NO, FunctionMode.Method);
								mutator = this.yep(AST.MutatorDeclaration.__ks_1(block, first, block));
							}
							else {
								mutator = this.yep(AST.MutatorDeclaration.__ks_0(first));
							}
							this.__ks_func_reqNL_1M_0();
						}
					}
					else if(this._token === Token.SET) {
						const first = this.__ks_func_yes_0();
						if(this.__ks_func_match_0([Token.EQUALS_RIGHT_ANGLE, Token.LEFT_CURLY]) === Token.EQUALS_RIGHT_ANGLE) {
							this.__ks_func_commit_0();
							const expression = this.__ks_func_reqExpression_0(ExpressionMode.Default, FunctionMode.Method);
							mutator = this.yep(AST.MutatorDeclaration.__ks_1(expression, first, expression));
						}
						else if(this._token === Token.LEFT_CURLY) {
							const block = this.__ks_func_reqBlock_0(NO, FunctionMode.Method);
							mutator = this.yep(AST.MutatorDeclaration.__ks_1(block, first, block));
						}
						else {
							mutator = this.yep(AST.MutatorDeclaration.__ks_0(first));
						}
						this.__ks_func_reqNL_1M_0();
					}
					else {
						this.__ks_func_throw_2(["get", "set"]);
					}
				}
				else {
					if(this.__ks_func_match_0([Token.GET, Token.SET]) === Token.GET) {
						accessor = this.yep(AST.AccessorDeclaration.__ks_0(this.__ks_func_yes_0()));
						if(this.__ks_func_test_0(Token.COMMA)) {
							this.__ks_func_commit_0();
							if(this.__ks_func_test_0(Token.SET)) {
								mutator = this.yep(AST.MutatorDeclaration.__ks_0(this.__ks_func_yes_0()));
							}
							else {
								this.__ks_func_throw_1("set");
							}
						}
					}
					else if(this._token === Token.SET) {
						mutator = this.yep(AST.MutatorDeclaration.__ks_0(this.__ks_func_yes_0()));
					}
					else {
						this.__ks_func_throw_2(["get", "set"]);
					}
				}
				if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
					this.__ks_func_throw_1("}");
				}
				let last = this.__ks_func_yes_0();
				if(this.__ks_func_test_0(Token.EQUALS)) {
					this.__ks_func_commit_0();
					defaultValue = this.__ks_func_reqExpression_0(ExpressionMode.Default, FunctionMode.Method);
				}
				this.__ks_func_reqNL_1M_0();
				return this.yep(AST.PropertyDeclaration.__ks_0(attributes, modifiers, name, type, defaultValue, accessor, mutator, first, KSType.isValue(defaultValue) ? defaultValue : last));
			}
			__ks_func_reqClassProperty_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isStructInstance(value, Event);
				const t2 = value => KSType.isStructInstance(value, Event) || KSType.isNull(value);
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3]) && t1(args[4])) {
						return proto.__ks_func_reqClassProperty_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqClassStatement() {
				return this.__ks_func_reqClassStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqClassStatement_0(first, modifiers) {
				if(modifiers === void 0 || modifiers === null) {
					modifiers = [];
				}
				return this.__ks_func_reqClassStatementBody_0(this.__ks_func_reqIdentifier_0(), first, modifiers);
			}
			__ks_func_reqClassStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_reqClassStatement_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqClassStatementBody() {
				return this.__ks_func_reqClassStatementBody_rt.call(null, this, this, arguments);
			}
			__ks_func_reqClassStatementBody_0(name, first, modifiers) {
				if(modifiers === void 0 || modifiers === null) {
					modifiers = [];
				}
				let generic = null;
				if(this.__ks_func_test_0(Token.LEFT_ANGLE)) {
					generic = this.__ks_func_reqTypeGeneric_0(this.__ks_func_yes_0());
				}
				let version = null;
				if(this.__ks_func_test_0(Token.AT)) {
					this.__ks_func_commit_0();
					if(!this.__ks_func_test_0(Token.CLASS_VERSION)) {
						this.__ks_func_throw_1("Class Version");
					}
					const data = this.__ks_func_value_0();
					version = this.__ks_func_yes_1((() => {
						const d = new Dictionary();
						d.major = data[0];
						d.minor = (data.length > 1) ? data[1] : 0;
						d.patch = (data.length > 2) ? data[2] : 0;
						return d;
					})());
					version.value.start = version.start;
					version.value.end = version.end;
				}
				let __ks_extends_1 = null;
				if(this.__ks_func_test_0(Token.EXTENDS)) {
					this.__ks_func_commit_0();
					__ks_extends_1 = this.__ks_func_reqIdentifier_0();
					if(this.__ks_func_testNS_0(Token.DOT)) {
						let property = null;
						do {
							this.__ks_func_commit_0();
							property = this.__ks_func_reqIdentifier_0();
							__ks_extends_1 = this.yep(AST.MemberExpression.__ks_0([], __ks_extends_1, property));
						}
						while(this.__ks_func_testNS_0(Token.DOT))
					}
				}
				if(!this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_throw_1("{");
				}
				this.__ks_func_commit_0().__ks_func_NL_0M_0();
				const attributes = [];
				const members = [];
				while(this.__ks_func_until_0(Token.RIGHT_CURLY)) {
					if(this.__ks_func_stackInnerAttributes_0(attributes)) {
						continue;
					}
					this.__ks_func_reqClassMemberList_0(members);
				}
				if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
					this.__ks_func_throw_1("}");
				}
				return this.yep(AST.ClassDeclaration.__ks_0(attributes, name, version, __ks_extends_1, modifiers, members, first, this.__ks_func_yes_0()));
			}
			__ks_func_reqClassStatementBody_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length >= 2 && args.length <= 3) {
					if(t0(args[0]) && t0(args[1])) {
						return proto.__ks_func_reqClassStatementBody_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqClassVariable() {
				return this.__ks_func_reqClassVariable_rt.call(null, this, this, arguments);
			}
			__ks_func_reqClassVariable_0(attributes, modifiers, bits, name, first) {
				if(name === void 0) {
					name = null;
				}
				if(first === void 0) {
					first = null;
				}
				const variable = this.__ks_func_tryClassVariable_0(attributes, modifiers, bits, name, null, first);
				if(!variable.ok) {
					this.__ks_func_throw_2(["Identifier", "String", "Template"]);
				}
				return variable;
			}
			__ks_func_reqClassVariable_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isEnumInstance(value, ClassBits);
				const t2 = value => KSType.isStructInstance(value, Event) || KSType.isNull(value);
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3]) && t2(args[4])) {
						return proto.__ks_func_reqClassVariable_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqComputedPropertyName() {
				return this.__ks_func_reqComputedPropertyName_rt.call(null, this, this, arguments);
			}
			__ks_func_reqComputedPropertyName_0(first, fMode) {
				const expression = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				if(!this.__ks_func_test_0(Token.RIGHT_SQUARE)) {
					this.__ks_func_throw_1("]");
				}
				return this.yep(AST.ComputedPropertyName.__ks_0(expression, first, this.__ks_func_yes_0()));
			}
			__ks_func_reqComputedPropertyName_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqComputedPropertyName_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqContinueStatement() {
				return this.__ks_func_reqContinueStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqContinueStatement_0(first) {
				return this.yep(AST.ContinueStatement.__ks_0(first));
			}
			__ks_func_reqContinueStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqContinueStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqDestructuringArray() {
				return this.__ks_func_reqDestructuringArray_rt.call(null, this, this, arguments);
			}
			__ks_func_reqDestructuringArray_0(first, dMode, fMode) {
				this.__ks_func_NL_0M_0();
				const elements = [];
				while(true) {
					elements.push(this.__ks_func_reqDestructuringArrayItem_0(dMode, fMode));
					if(this.__ks_func_match_0([Token.COMMA, Token.NEWLINE]) === Token.COMMA) {
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
						continue;
					}
					else if(this._token === Token.NEWLINE) {
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
						if(this.__ks_func_test_0(Token.RIGHT_SQUARE)) {
							break;
						}
					}
					else {
						break;
					}
				}
				if(!this.__ks_func_test_0(Token.RIGHT_SQUARE)) {
					this.__ks_func_throw_1("]");
				}
				return this.yep(AST.ArrayBinding.__ks_0(elements, first, this.__ks_func_yes_0()));
			}
			__ks_func_reqDestructuringArray_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, DestructuringMode);
				const t2 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 3) {
					if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
						return proto.__ks_func_reqDestructuringArray_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqDestructuringArrayItem() {
				return this.__ks_func_reqDestructuringArrayItem_rt.call(null, this, this, arguments);
			}
			__ks_func_reqDestructuringArrayItem_0(dMode, fMode) {
				const modifiers = [];
				let first = null;
				let name = null;
				let type = null;
				let notThis = true;
				if(this.__ks_func_test_0(Token.DOT_DOT_DOT)) {
					modifiers.push(AST.Modifier.__ks_0(ModifierKind.Rest, first = this.__ks_func_yes_0()));
					if(((dMode & DestructuringMode.THIS_ALIAS) !== 0n) && this.__ks_func_test_0(Token.AT)) {
						name = this.__ks_func_reqThisExpression_0(this.__ks_func_yes_0());
						notThis = false;
					}
					else if(this.__ks_func_test_0(Token.IDENTIFIER)) {
						name = this.yep(AST.Identifier.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0()));
					}
				}
				else if(((dMode & DestructuringMode.RECURSION) !== 0n) && this.__ks_func_test_0(Token.LEFT_CURLY)) {
					name = this.__ks_func_reqDestructuringObject_0(this.__ks_func_yes_0(), dMode, fMode);
				}
				else if(((dMode & DestructuringMode.RECURSION) !== 0n) && this.__ks_func_test_0(Token.LEFT_SQUARE)) {
					name = this.__ks_func_reqDestructuringArray_0(this.__ks_func_yes_0(), dMode, fMode);
				}
				else if(((dMode & DestructuringMode.THIS_ALIAS) !== 0n) && this.__ks_func_test_0(Token.AT)) {
					name = this.__ks_func_reqThisExpression_0(this.__ks_func_yes_0());
					notThis = false;
				}
				else if(this.__ks_func_test_0(Token.IDENTIFIER)) {
					name = this.yep(AST.Identifier.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0()));
				}
				else if(this.__ks_func_test_0(Token.UNDERSCORE)) {
					first = this.__ks_func_yes_0();
				}
				else {
					if((dMode & DestructuringMode.RECURSION) !== 0n) {
						this.__ks_func_throw_2(["...", "_", "[", "{", "Identifier"]);
					}
					else {
						this.__ks_func_throw_2(["...", "_", "Identifier"]);
					}
				}
				if(notThis && ((dMode & DestructuringMode.TYPE) !== 0n) && this.__ks_func_test_0(Token.COLON)) {
					this.__ks_func_commit_0();
					type = this.__ks_func_reqTypeVar_0();
				}
				if(name !== null) {
					let defaultValue = null;
					if(((dMode & DestructuringMode.DEFAULT) !== 0n) && this.__ks_func_test_0(Token.EQUALS)) {
						this.__ks_func_commit_0();
						defaultValue = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
					}
					return this.yep(AST.ArrayBindingElement.__ks_0(modifiers, name, type, defaultValue, KSType.isValue(first) ? first : name, KSType.isValue(defaultValue) ? defaultValue : KSType.isValue(type) ? type : name));
				}
				else {
					return this.yep(AST.ArrayBindingElement.__ks_0(modifiers, null, type, null, KSType.isValue(first) ? first : KSType.isValue(type) ? type : this.__ks_func_yep_0(), KSType.isValue(type) ? type : KSType.isValue(first) ? first : this.__ks_func_yep_0()));
				}
			}
			__ks_func_reqDestructuringArrayItem_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, DestructuringMode);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqDestructuringArrayItem_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqDestructuringObject() {
				return this.__ks_func_reqDestructuringObject_rt.call(null, this, this, arguments);
			}
			__ks_func_reqDestructuringObject_0(first, dMode, fMode) {
				this.__ks_func_NL_0M_0();
				const elements = [];
				while(true) {
					elements.push(this.__ks_func_reqDestructuringObjectItem_0(dMode, fMode));
					if((this.__ks_func_match_0([Token.COMMA, Token.NEWLINE]) === Token.COMMA) || (this._token === Token.NEWLINE)) {
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
					}
					else {
						break;
					}
					if(this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						break;
					}
				}
				if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
					this.__ks_func_throw_1("}");
				}
				return this.yep(AST.ObjectBinding.__ks_0(elements, first, this.__ks_func_yes_0()));
			}
			__ks_func_reqDestructuringObject_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, DestructuringMode);
				const t2 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 3) {
					if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
						return proto.__ks_func_reqDestructuringObject_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqDestructuringObjectItem() {
				return this.__ks_func_reqDestructuringObjectItem_rt.call(null, this, this, arguments);
			}
			__ks_func_reqDestructuringObjectItem_0(dMode, fMode) {
				let first = null;
				const modifiers = [];
				let name = null;
				let alias = null;
				let defaultValue = null;
				let notThis = true;
				if(this.__ks_func_test_0(Token.DOT_DOT_DOT)) {
					modifiers.push(AST.Modifier.__ks_0(ModifierKind.Rest, first = this.__ks_func_yes_0()));
					if(((dMode & DestructuringMode.THIS_ALIAS) !== 0n) && this.__ks_func_test_0(Token.AT)) {
						name = this.__ks_func_reqThisExpression_0(this.__ks_func_yes_0());
						notThis = false;
					}
					else {
						name = this.__ks_func_reqIdentifier_0();
					}
				}
				else {
					if(((dMode & DestructuringMode.COMPUTED) !== 0n) && this.__ks_func_test_0(Token.LEFT_SQUARE)) {
						first = this.__ks_func_yes_0();
						if(((dMode & DestructuringMode.THIS_ALIAS) !== 0n) && this.__ks_func_test_0(Token.AT)) {
							name = this.__ks_func_reqThisExpression_0(this.__ks_func_yes_0());
							notThis = false;
						}
						else {
							name = this.__ks_func_reqIdentifier_0();
						}
						if(!this.__ks_func_test_0(Token.RIGHT_SQUARE)) {
							this.__ks_func_throw_1("]");
						}
						modifiers.push(AST.Modifier.__ks_0(ModifierKind.Computed, first, this.__ks_func_yes_0()));
					}
					else {
						if(((dMode & DestructuringMode.THIS_ALIAS) !== 0n) && this.__ks_func_test_0(Token.AT)) {
							name = this.__ks_func_reqThisExpression_0(this.__ks_func_yes_0());
							notThis = false;
						}
						else {
							name = this.__ks_func_reqIdentifier_0();
						}
					}
					if(notThis && this.__ks_func_test_0(Token.COLON)) {
						this.__ks_func_commit_0();
						if(((dMode & DestructuringMode.RECURSION) !== 0n) && this.__ks_func_test_0(Token.LEFT_CURLY)) {
							alias = this.__ks_func_reqDestructuringObject_0(this.__ks_func_yes_0(), dMode, fMode);
						}
						else if(((dMode & DestructuringMode.RECURSION) !== 0n) && this.__ks_func_test_0(Token.LEFT_SQUARE)) {
							alias = this.__ks_func_reqDestructuringArray_0(this.__ks_func_yes_0(), dMode, fMode);
						}
						else if(((dMode & DestructuringMode.THIS_ALIAS) !== 0n) && this.__ks_func_test_0(Token.AT)) {
							alias = this.__ks_func_reqThisExpression_0(this.__ks_func_yes_0());
						}
						else {
							alias = this.__ks_func_reqIdentifier_0();
						}
					}
				}
				if(((dMode & DestructuringMode.DEFAULT) !== 0n) && this.__ks_func_test_0(Token.EQUALS)) {
					this.__ks_func_commit_0();
					defaultValue = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				return this.yep(AST.ObjectBindingElement.__ks_0(modifiers, name, alias, defaultValue, KSType.isValue(first) ? first : name, KSType.isValue(defaultValue) ? defaultValue : KSType.isValue(alias) ? alias : name));
			}
			__ks_func_reqDestructuringObjectItem_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, DestructuringMode);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqDestructuringObjectItem_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqDiscloseStatement() {
				return this.__ks_func_reqDiscloseStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqDiscloseStatement_0(first) {
				const name = this.__ks_func_reqIdentifier_0();
				if(!this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_throw_1("{");
				}
				this.__ks_func_commit_0().__ks_func_NL_0M_0();
				const members = [];
				while(this.__ks_func_until_0(Token.RIGHT_CURLY)) {
					this.__ks_func_reqExternClassMemberList_0(members);
				}
				if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
					this.__ks_func_throw_1("}");
				}
				return this.yep(AST.DiscloseDeclaration.__ks_0(name, members, first, this.__ks_func_yes_0()));
			}
			__ks_func_reqDiscloseStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqDiscloseStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqDoStatement() {
				return this.__ks_func_reqDoStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqDoStatement_0(first, fMode) {
				this.__ks_func_NL_0M_0();
				const body = this.__ks_func_reqBlock_0(NO, fMode);
				this.__ks_func_reqNL_1M_0();
				if(this.__ks_func_match_0([Token.UNTIL, Token.WHILE]) === Token.UNTIL) {
					this.__ks_func_commit_0();
					const condition = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
					return this.yep(AST.DoUntilStatement.__ks_0(condition, body, first, condition));
				}
				else if(this._token === Token.WHILE) {
					this.__ks_func_commit_0();
					const condition = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
					return this.yep(AST.DoWhileStatement.__ks_0(condition, body, first, condition));
				}
				else {
					this.__ks_func_throw_2(["until", "while"]);
				}
			}
			__ks_func_reqDoStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqDoStatement_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqEnumMember() {
				return this.__ks_func_reqEnumMember_rt.call(null, this, this, arguments);
			}
			__ks_func_reqEnumMember_0(members) {
				const attributes = this.__ks_func_stackOuterAttributes_0([]);
				const modifiers = [];
				const result = AmbiguityResult.__ks_new();
				if(this.__ks_func_isAmbiguousAccessModifierForEnum_0(modifiers, result)) {
					this.submitEnumMember(attributes, modifiers, result.identifier, result.token, members);
				}
				else if(this.__ks_func_isAmbiguousStaticModifier_0(modifiers, result)) {
					this.submitEnumMember(attributes, modifiers, result.identifier, result.token, members);
				}
				else if(this.__ks_func_isAmbiguousAsyncModifier_0(modifiers, result)) {
					const {identifier, token} = result;
					const first = KSType.isValue(attributes[0]) ? attributes[0] : KSType.isValue(modifiers[0]) ? modifiers[0] : identifier;
					if(token === Token.IDENTIFIER) {
						members.push(this.reqEnumMethod(attributes, modifiers, identifier, first).value);
					}
					else {
						this.submitEnumMember(attributes, modifiers, identifier, null, members);
					}
				}
				else if(this.__ks_func_isAmbiguousIdentifier_0(result)) {
					this.submitEnumMember(attributes, modifiers, result.identifier, null, members);
				}
				else {
					const mark = this.__ks_func_mark_0();
					this.__ks_func_NL_0M_0();
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
						let attrs = null;
						while(this.__ks_func_until_0(Token.RIGHT_CURLY)) {
							attrs = this.__ks_func_stackOuterAttributes_0([]);
							if(attrs.length !== 0) {
								attrs.unshift(...attributes);
							}
							else {
								attrs = attributes;
							}
							members.push(this.reqEnumMethod(attrs, modifiers, attrs[0]).value);
						}
						if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
							this.__ks_func_throw_1("}");
						}
						this.__ks_func_commit_0().__ks_func_reqNL_1M_0();
					}
					else {
						this.__ks_func_rollback_0(mark);
						this.submitEnumMember(attributes, [], result.identifier, null, members);
					}
				}
			}
			__ks_func_reqEnumMember_rt(that, proto, args) {
				const t0 = KSType.isArray;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqEnumMember_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqEnumMethod() {
				return this.__ks_func_reqEnumMethod_rt.call(null, this, this, arguments);
			}
			__ks_func_reqEnumMethod_0(attributes, modifiers, first) {
				if(first === void 0) {
					first = null;
				}
				let name = null;
				if(this.__ks_func_test_0(Token.ASYNC)) {
					let async = this.__ks_func_reqIdentifier_0();
					name = this.__ks_func_tryIdentifier_0();
					if(name.ok) {
						modifiers = [...modifiers, this.yep(AST.Modifier.__ks_0(ModifierKind.Async, async))];
					}
					else {
						name = async;
					}
				}
				else {
					name = this.__ks_func_reqIdentifier_0();
				}
				return this.__ks_func_reqEnumMethod_1(attributes, modifiers, name, KSType.isValue(first) ? first : name);
			}
			__ks_func_reqEnumMethod_1(attributes, modifiers, name, first) {
				const parameters = this.__ks_func_reqFunctionParameterList_0(FunctionMode.Function);
				const type = this.__ks_func_tryFunctionReturns_0();
				const __ks_throws_1 = this.__ks_func_tryFunctionThrows_0();
				const body = ((this._mode & ParserMode.Typing) !== 0n) ? null : this.__ks_func_reqFunctionBody_0(FunctionMode.Method);
				this.__ks_func_reqNL_1M_0();
				return this.yep(AST.MethodDeclaration.__ks_0(attributes, modifiers, name, parameters, type, __ks_throws_1, body, first, KSType.isValue(body) ? body : KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
			}
			__ks_func_reqEnumMethod_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isStructInstance(value, Event) || KSType.isNull(value);
				const t2 = value => KSType.isStructInstance(value, Event);
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
						return proto.__ks_func_reqEnumMethod_0.call(that, args[0], args[1], args[2]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t2(args[2]) && t0(args[3])) {
						return proto.__ks_func_reqEnumMethod_1.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqEnumStatement() {
				return this.__ks_func_reqEnumStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqEnumStatement_0(first, modifiers) {
				if(modifiers === void 0 || modifiers === null) {
					modifiers = [];
				}
				const name = this.__ks_func_tryIdentifier_0();
				if(!name.ok) {
					return NO;
				}
				let type = null;
				if(this.__ks_func_test_0(Token.LEFT_ANGLE)) {
					this.__ks_func_commit_0();
					type = this.__ks_func_reqTypeEntity_0(NO);
					if(!this.__ks_func_test_0(Token.RIGHT_ANGLE)) {
						this.__ks_func_throw_1(">");
					}
					this.__ks_func_commit_0();
				}
				this.__ks_func_NL_0M_0();
				if(!this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_throw_1("{");
				}
				this.__ks_func_commit_0().__ks_func_NL_0M_0();
				const attributes = [];
				const members = [];
				while(this.__ks_func_until_0(Token.RIGHT_CURLY)) {
					if(this.__ks_func_stackInnerAttributes_0(attributes)) {
					}
					else {
						this.__ks_func_reqEnumMember_0(members);
					}
				}
				if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
					this.__ks_func_throw_1("}");
				}
				return this.yep(AST.EnumDeclaration.__ks_0(attributes, modifiers, name, type, members, first, this.__ks_func_yes_0()));
			}
			__ks_func_reqEnumStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_reqEnumStatement_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqExportDeclarator() {
				return this.__ks_func_reqExportDeclarator_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExportDeclarator_0() {
				let __ks_0 = this.__ks_func_matchM_0(M.EXPORT_STATEMENT);
				if(__ks_0 === Token.ABSTRACT) {
					const first = this.__ks_func_yes_0();
					if(this.__ks_func_test_0(Token.CLASS)) {
						this.__ks_func_commit_0();
						const modifiers = [this.yep(AST.Modifier.__ks_0(ModifierKind.Abstract, first))];
						return this.yep(AST.ExportDeclarationSpecifier.__ks_0(this.__ks_func_reqClassStatement_0(first, modifiers)));
					}
					else {
						this.__ks_func_throw_1("class");
					}
				}
				else if(__ks_0 === Token.ASYNC) {
					const first = this.__ks_func_reqIdentifier_0();
					if(this.__ks_func_test_0(Token.FUNC)) {
						this.__ks_func_commit_0();
						const modifiers = [this.yep(AST.Modifier.__ks_0(ModifierKind.Async, first))];
						return this.yep(AST.ExportDeclarationSpecifier.__ks_0(this.__ks_func_reqFunctionStatement_0(first, modifiers)));
					}
					else {
						return this.__ks_func_reqExportIdentifier_0(first);
					}
				}
				else if(__ks_0 === Token.CLASS) {
					return this.yep(AST.ExportDeclarationSpecifier.__ks_0(this.__ks_func_reqClassStatement_0(this.__ks_func_yes_0())));
				}
				else if(__ks_0 === Token.ENUM) {
					return this.yep(AST.ExportDeclarationSpecifier.__ks_0(this.__ks_func_reqEnumStatement_0(this.__ks_func_yes_0())));
				}
				else if(__ks_0 === Token.FINAL) {
					const first = this.__ks_func_yes_0();
					const modifiers = [this.yep(AST.Modifier.__ks_0(ModifierKind.Immutable, first))];
					if(this.__ks_func_test_0(Token.CLASS)) {
						this.__ks_func_commit_0();
						return this.yep(AST.ExportDeclarationSpecifier.__ks_0(this.__ks_func_reqClassStatement_0(first, modifiers)));
					}
					else if(this.__ks_func_test_0(Token.ABSTRACT)) {
						modifiers.push(this.yep(AST.Modifier.__ks_0(ModifierKind.Abstract, this.__ks_func_yes_0())));
						if(this.__ks_func_test_0(Token.CLASS)) {
							this.__ks_func_commit_0();
							return this.yep(AST.ExportDeclarationSpecifier.__ks_0(this.__ks_func_reqClassStatement_0(first, modifiers)));
						}
						else {
							this.__ks_func_throw_1("class");
						}
					}
					else {
						this.__ks_func_throw_1("class");
					}
				}
				else if(__ks_0 === Token.FLAGGED) {
					const first = this.__ks_func_yes_0();
					if(this.__ks_func_test_0(Token.ENUM)) {
						this.__ks_func_commit_0();
						const modifiers = [this.yep(AST.Modifier.__ks_0(ModifierKind.Flagged, first))];
						return this.yep(AST.ExportDeclarationSpecifier.__ks_0(this.__ks_func_reqEnumStatement_0(first, modifiers)));
					}
					else {
						this.__ks_func_throw_1("enum");
					}
				}
				else if(__ks_0 === Token.FUNC) {
					return this.yep(AST.ExportDeclarationSpecifier.__ks_0(this.__ks_func_reqFunctionStatement_0(this.__ks_func_yes_0())));
				}
				else if(__ks_0 === Token.IDENTIFIER) {
					return this.__ks_func_reqExportIdentifier_0(this.__ks_func_reqIdentifier_0());
				}
				else if(__ks_0 === Token.MACRO) {
					if((this._mode & ParserMode.MacroExpression) === 0n) {
						return this.yep(AST.ExportDeclarationSpecifier.__ks_0(this.__ks_func_tryMacroStatement_0(this.__ks_func_yes_0())));
					}
					else {
						return this.yep(AST.ExportDeclarationSpecifier.__ks_0(this.__ks_func_reqMacroExpression_0(this.__ks_func_yes_0())));
					}
				}
				else if(__ks_0 === Token.NAMESPACE) {
					return this.yep(AST.ExportDeclarationSpecifier.__ks_0(this.__ks_func_tryNamespaceStatement_0(this.__ks_func_yes_0())));
				}
				else if(__ks_0 === Token.SEALED) {
					const first = this.__ks_func_yes_0();
					const modifiers = [this.yep(AST.Modifier.__ks_0(ModifierKind.Sealed, first))];
					if(this.__ks_func_test_0(Token.CLASS)) {
						this.__ks_func_commit_0();
						return this.yep(AST.ExportDeclarationSpecifier.__ks_0(this.__ks_func_reqClassStatement_0(first, modifiers)));
					}
					else if(this.__ks_func_test_0(Token.ABSTRACT)) {
						modifiers.push(this.yep(AST.Modifier.__ks_0(ModifierKind.Abstract, this.__ks_func_yes_0())));
						if(this.__ks_func_test_0(Token.CLASS)) {
							this.__ks_func_commit_0();
							return this.yep(AST.ExportDeclarationSpecifier.__ks_0(this.__ks_func_reqClassStatement_0(first, modifiers)));
						}
						else {
							this.__ks_func_throw_1("class");
						}
					}
					else {
						this.__ks_func_throw_1("class");
					}
				}
				else if(__ks_0 === Token.STRUCT) {
					return this.yep(AST.ExportDeclarationSpecifier.__ks_0(this.__ks_func_reqStructStatement_0(this.__ks_func_yes_0())));
				}
				else if(__ks_0 === Token.TUPLE) {
					return this.yep(AST.ExportDeclarationSpecifier.__ks_0(this.__ks_func_reqTupleStatement_0(this.__ks_func_yes_0())));
				}
				else if(__ks_0 === Token.TYPE) {
					return this.yep(AST.ExportDeclarationSpecifier.__ks_0(this.__ks_func_reqTypeStatement_0(this.__ks_func_yes_0(), this.__ks_func_reqIdentifier_0())));
				}
				else if(__ks_0 === Token.VAR) {
					return this.yep(AST.ExportDeclarationSpecifier.__ks_0(this.__ks_func_reqVarStatement_0(this.__ks_func_yes_0(), ExpressionMode.NoAwait, FunctionMode.Function)));
				}
				else {
					this.__ks_func_throw_0();
				}
			}
			__ks_func_reqExportDeclarator_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_reqExportDeclarator_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			reqExportIdentifier() {
				return this.__ks_func_reqExportIdentifier_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExportIdentifier_0(value) {
				let identifier = null;
				if(this.__ks_func_testNS_0(Token.DOT)) {
					do {
						this.__ks_func_commit_0();
						if(this.__ks_func_testNS_0(Token.ASTERISK)) {
							return this.yep(AST.ExportWildcardSpecifier.__ks_0(value, this.__ks_func_yes_0()));
						}
						else {
							identifier = this.__ks_func_reqIdentifier_0();
							value = this.yep(AST.MemberExpression.__ks_0([], value, identifier));
						}
					}
					while(this.__ks_func_testNS_0(Token.DOT))
				}
				if(this.__ks_func_test_0(Token.EQUALS_RIGHT_ANGLE)) {
					this.__ks_func_commit_0();
					return this.yep(AST.ExportNamedSpecifier.__ks_0(value, this.__ks_func_reqIdentifier_0()));
				}
				else if(this.__ks_func_test_0(Token.FOR)) {
					this.__ks_func_commit_0();
					if(this.__ks_func_test_0(Token.ASTERISK)) {
						return this.yep(AST.ExportWildcardSpecifier.__ks_0(value, this.__ks_func_yes_0()));
					}
					else if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						const members = [];
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
						while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
							identifier = this.__ks_func_reqIdentifier_0();
							if(this.__ks_func_test_0(Token.EQUALS_RIGHT_ANGLE)) {
								this.__ks_func_commit_0();
								members.push(AST.ExportNamedSpecifier.__ks_0(identifier, this.__ks_func_reqIdentifier_0()));
							}
							else {
								members.push(AST.ExportNamedSpecifier.__ks_0(identifier, identifier));
							}
							if(this.__ks_func_test_0(Token.COMMA)) {
								this.__ks_func_commit_0();
							}
							this.__ks_func_reqNL_1M_0();
						}
						if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
							this.__ks_func_throw_1("}");
						}
						return this.yep(AST.ExportPropertiesSpecifier.__ks_0(value, members, this.__ks_func_yes_0()));
					}
					else {
						const members = [];
						identifier = this.__ks_func_reqIdentifier_0();
						if(this.__ks_func_test_0(Token.EQUALS_RIGHT_ANGLE)) {
							this.__ks_func_commit_0();
							members.push(AST.ExportNamedSpecifier.__ks_0(identifier, this.__ks_func_reqIdentifier_0()));
						}
						else {
							members.push(AST.ExportNamedSpecifier.__ks_0(identifier, identifier));
						}
						while(this.__ks_func_test_0(Token.COMMA)) {
							this.__ks_func_commit_0();
							identifier = this.__ks_func_reqIdentifier_0();
							if(this.__ks_func_test_0(Token.EQUALS_RIGHT_ANGLE)) {
								this.__ks_func_commit_0();
								members.push(AST.ExportNamedSpecifier.__ks_0(identifier, this.__ks_func_reqIdentifier_0()));
							}
							else {
								members.push(AST.ExportNamedSpecifier.__ks_0(identifier, identifier));
							}
						}
						return this.yep(AST.ExportPropertiesSpecifier.__ks_0(value, members, this.__ks_func_yep_0()));
					}
				}
				else {
					return this.yep(AST.ExportNamedSpecifier.__ks_0(value, KSType.isValue(identifier) ? identifier : value));
				}
			}
			__ks_func_reqExportIdentifier_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqExportIdentifier_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqExportStatement() {
				return this.__ks_func_reqExportStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExportStatement_0(first) {
				const attributes = [];
				const declarations = [];
				let last = null;
				if(this.__ks_func_match_0([Token.ASTERISK, Token.LEFT_CURLY]) === Token.ASTERISK) {
					const first = this.__ks_func_yes_0();
					if(this.__ks_func_test_0(Token.BUT)) {
						this.__ks_func_commit_0();
						const exclusions = [];
						if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
							while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
								exclusions.push(this.__ks_func_reqIdentifier_0());
								this.__ks_func_reqNL_1M_0();
							}
							if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
								this.__ks_func_throw_1("}");
							}
							last = this.__ks_func_yes_0();
						}
						else {
							exclusions.push(this.__ks_func_reqIdentifier_0());
							while(this.__ks_func_test_0(Token.COMMA)) {
								this.__ks_func_commit_0();
								exclusions.push(this.__ks_func_reqIdentifier_0());
							}
							last = exclusions[exclusions.length - 1];
						}
						declarations.push(this.yep(AST.ExportExclusionSpecifier(exclusions, first, last)));
					}
					else {
						last = this.__ks_func_yep_0();
						declarations.push(this.yep(AST.ExportExclusionSpecifier.__ks_0([], first, last)));
					}
				}
				else if(this._token === Token.LEFT_CURLY) {
					this.__ks_func_commit_0().__ks_func_NL_0M_0();
					let attrs = [];
					let declarator = null;
					while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						if(this.__ks_func_stackInnerAttributes_0(attributes)) {
							continue;
						}
						this.__ks_func_stackOuterAttributes_0(attrs);
						declarator = this.__ks_func_reqExportDeclarator_0();
						if(attrs.length > 0) {
							if(KSHelper.valueOf(declarator.value.kind) !== NodeKind.ExportDeclarationSpecifier.value) {
								this.__ks_func_throw_0();
							}
							declarator.value.declaration.attributes.unshift(...KSHelper.mapArray(attrs, function(attr) {
								return attr.value;
							}));
							declarator.value.start = declarator.value.declaration.start = attrs[0].start;
							attrs = [];
						}
						declarations.push(declarator);
						this.__ks_func_reqNL_1M_0();
					}
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						this.__ks_func_throw_1("}");
					}
					last = this.__ks_func_yes_0();
				}
				else {
					declarations.push(this.__ks_func_reqExportDeclarator_0());
					while(this.__ks_func_test_0(Token.COMMA)) {
						this.__ks_func_commit_0();
						declarations.push(this.__ks_func_reqExportDeclarator_0());
					}
					last = declarations[declarations.length - 1];
				}
				this.__ks_func_reqNL_EOF_1M_0();
				return this.yep(AST.ExportDeclaration(attributes, declarations, first, last));
			}
			__ks_func_reqExportStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqExportStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqExpression() {
				return this.__ks_func_reqExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExpression_0(eMode, fMode, terminator = null) {
				if(eMode === void 0) {
					eMode = null;
				}
				if(eMode === null) {
					if(((this._mode & ParserMode.MacroExpression) !== 0n) && this._scanner.__ks_func_test_0(Token.IDENTIFIER) && (this._scanner.__ks_func_value_0() === "macro")) {
						return this.__ks_func_reqMacroExpression_0(this.__ks_func_yes_0(), terminator);
					}
					else {
						eMode = ExpressionMode.Default;
					}
				}
				return this.__ks_func_reqOperation_0(eMode, fMode);
			}
			__ks_func_reqExpression_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, ExpressionMode) || KSType.isNull(value);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				const t2 = value => KSType.isEnumInstance(value, MacroTerminator) || KSType.isNull(value);
				const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
				let pts;
				if(args.length >= 2 && args.length <= 3) {
					if(t0(args[0]) && t1(args[1]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && te(pts, 1)) {
						return proto.__ks_func_reqExpression_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
					}
				}
				throw KSHelper.badArgs();
			}
			reqExpression0CNList() {
				return this.__ks_func_reqExpression0CNList_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExpression0CNList_0(fMode) {
				this.__ks_func_NL_0M_0();
				if(this.__ks_func_test_0(Token.RIGHT_ROUND)) {
					return this.__ks_func_yep_1([]);
				}
				else {
					const expressions = [];
					while(true) {
						const expression = this.__ks_func_reqExpression_0(null, fMode, MacroTerminator.List);
						if(KSHelper.valueOf(expression.value.kind) === NodeKind.Identifier.value) {
							if(this.__ks_func_test_0(Token.COLON)) {
								this.__ks_func_commit_0();
								const value = this.__ks_func_reqExpression_0(null, fMode, MacroTerminator.List);
								expressions.push(this.yep(AST.NamedArgument.__ks_0(expression, value)));
							}
							else {
								expressions.push(expression);
							}
						}
						else {
							expressions.push(expression);
						}
						if((this.__ks_func_match_0([Token.COMMA, Token.NEWLINE]) === Token.COMMA) || (this._token === Token.NEWLINE)) {
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
						}
						else {
							break;
						}
						if(this.__ks_func_test_0(Token.RIGHT_ROUND)) {
							break;
						}
					}
					if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
						this.__ks_func_throw_1(")");
					}
					return this.__ks_func_yep_1(expressions);
				}
			}
			__ks_func_reqExpression0CNList_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqExpression0CNList_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqExpressionStatement() {
				return this.__ks_func_reqExpressionStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExpressionStatement_0(fMode) {
				const expression = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				if(this.__ks_func_match_0([Token.FOR, Token.IF, Token.UNLESS]) === Token.FOR) {
					const statement = this.__ks_func_reqForExpression_0(this.__ks_func_yes_0(), fMode);
					statement.value.body = expression.value;
					this.__ks_func_relocate_0(statement, expression, null);
					return statement;
				}
				else if(this._token === Token.IF) {
					this.__ks_func_commit_0();
					const condition = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
					return this.yep(AST.IfStatement.__ks_0(condition, expression, null, expression, condition));
				}
				else if(this._token === Token.UNLESS) {
					this.__ks_func_commit_0();
					const condition = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
					return this.yep(AST.UnlessStatement.__ks_0(condition, expression, expression, condition));
				}
				else {
					return this.yep(AST.ExpressionStatement.__ks_0(expression));
				}
			}
			__ks_func_reqExpressionStatement_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqExpressionStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqExternClassDeclaration() {
				return this.__ks_func_reqExternClassDeclaration_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExternClassDeclaration_0(first, modifiers) {
				if(modifiers === void 0 || modifiers === null) {
					modifiers = [];
				}
				const name = this.__ks_func_reqIdentifier_0();
				let generic = null;
				if(this.__ks_func_test_0(Token.LEFT_ANGLE)) {
					generic = this.__ks_func_reqTypeGeneric_0(this.__ks_func_yes_0());
				}
				let __ks_extends_1 = null;
				if(this.__ks_func_test_0(Token.EXTENDS)) {
					this.__ks_func_commit_0();
					__ks_extends_1 = this.__ks_func_reqIdentifier_0();
				}
				if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_commit_0().__ks_func_NL_0M_0();
					const attributes = [];
					const members = [];
					while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						if(this.__ks_func_stackInnerAttributes_0(attributes)) {
							continue;
						}
						this.__ks_func_reqExternClassMemberList_0(members);
					}
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						this.__ks_func_throw_1("}");
					}
					return this.yep(AST.ClassDeclaration.__ks_0(attributes, name, null, __ks_extends_1, modifiers, members, first, this.__ks_func_yes_0()));
				}
				else {
					return this.yep(AST.ClassDeclaration.__ks_0([], name, null, __ks_extends_1, modifiers, [], first, KSType.isValue(__ks_extends_1) ? __ks_extends_1 : KSType.isValue(generic) ? generic : name));
				}
			}
			__ks_func_reqExternClassDeclaration_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_reqExternClassDeclaration_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqExternClassField() {
				return this.__ks_func_reqExternClassField_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExternClassField_0(attributes, modifiers, name, type, first) {
				if(type === void 0) {
					type = null;
				}
				this.__ks_func_reqNL_1M_0();
				return this.yep(AST.FieldDeclaration.__ks_0(attributes, modifiers, name, type, null, first, KSType.isValue(type) ? type : name));
			}
			__ks_func_reqExternClassField_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isStructInstance(value, Event);
				const t2 = value => KSType.isStructInstance(value, Event) || KSType.isNull(value);
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3]) && t1(args[4])) {
						return proto.__ks_func_reqExternClassField_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqExternClassMember() {
				return this.__ks_func_reqExternClassMember_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExternClassMember_0(attributes, modifiers, first) {
				if(first === void 0) {
					first = null;
				}
				const name = this.__ks_func_reqIdentifier_0();
				if(this.__ks_func_match_0([Token.COLON, Token.LEFT_CURLY, Token.LEFT_ROUND]) === Token.COLON) {
					this.__ks_func_commit_0();
					const type = this.__ks_func_reqTypeVar_0();
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						this.__ks_func_throw_0();
					}
					else {
						return this.__ks_func_reqExternClassField_0(attributes, modifiers, name, type, KSType.isValue(first) ? first : name);
					}
				}
				else if(this._token === Token.LEFT_CURLY) {
					this.__ks_func_throw_0();
				}
				else if(this._token === Token.LEFT_ROUND) {
					return this.__ks_func_reqExternClassMethod_0(attributes, modifiers, name, this.__ks_func_yes_0(), KSType.isValue(first) ? first : name);
				}
				else {
					return this.__ks_func_reqExternClassField_0(attributes, modifiers, name, null, KSType.isValue(first) ? first : name);
				}
			}
			__ks_func_reqExternClassMember_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isStructInstance(value, Event) || KSType.isNull(value);
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
						return proto.__ks_func_reqExternClassMember_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqExternClassMemberList() {
				return this.__ks_func_reqExternClassMemberList_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExternClassMemberList_0(members) {
				let first = null;
				const attributes = this.__ks_func_stackOuterAttributes_0([]);
				if(attributes.length !== 0) {
					first = attributes[0];
				}
				const modifiers = this.__ks_func_reqAccessModifiers_0([]);
				if(this.__ks_func_test_0(Token.ABSTRACT)) {
					modifiers.push(this.yep(AST.Modifier.__ks_0(ModifierKind.Abstract, this.__ks_func_yes_0())));
					first = modifiers[0];
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
						first = null;
						let attrs = null;
						while(this.__ks_func_until_0(Token.RIGHT_CURLY)) {
							attrs = this.__ks_func_stackOuterAttributes_0([]);
							if(attrs.length !== 0) {
								first = attrs[0];
								attrs.unshift(...attributes);
							}
							else {
								attrs = attributes;
							}
							members.push(this.reqClassMember(attrs, modifiers, ClassBits(ClassBits.Method | ClassBits.NoBody), first));
						}
						if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
							this.__ks_func_throw_1("}");
						}
						this.__ks_func_commit_0().__ks_func_reqNL_1M_0();
					}
					else {
						members.push(this.__ks_func_reqClassMember_0(attributes, modifiers, ClassBits(ClassBits.Method | ClassBits.NoBody), first));
					}
				}
				else {
					if(this.__ks_func_test_0(Token.STATIC)) {
						modifiers.push(this.yep(AST.Modifier.__ks_0(ModifierKind.Static, this.__ks_func_yes_0())));
					}
					if((first === null) && (modifiers.length !== 0)) {
						first = modifiers[0];
					}
					if((modifiers.length !== 0) && this.__ks_func_test_0(Token.LEFT_CURLY)) {
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
						first = null;
						let attrs = null;
						while(this.__ks_func_until_0(Token.RIGHT_CURLY)) {
							attrs = this.__ks_func_stackOuterAttributes_0([]);
							if(attrs.length !== 0) {
								first = attrs[0];
								attrs.unshift(...attributes);
							}
							else {
								attrs = attributes;
							}
							members.push(this.reqExternClassMember(attrs, modifiers, first));
						}
						if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
							this.__ks_func_throw_1("}");
						}
						this.__ks_func_commit_0().__ks_func_reqNL_1M_0();
					}
					else {
						members.push(this.reqExternClassMember(attributes, modifiers, first));
					}
				}
			}
			__ks_func_reqExternClassMemberList_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqExternClassMemberList_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqExternClassMethod() {
				return this.__ks_func_reqExternClassMethod_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExternClassMethod_0(attributes, modifiers, name, round, first) {
				const parameters = this.__ks_func_reqClassMethodParameterList_0(round);
				const type = this.__ks_func_tryMethodReturns_0(false);
				this.__ks_func_reqNL_1M_0();
				return this.yep(AST.MethodDeclaration.__ks_0(attributes, modifiers, name, parameters, type, null, null, first, KSType.isValue(type) ? type : parameters));
			}
			__ks_func_reqExternClassMethod_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isStructInstance(value, Event);
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t1(args[3]) && t0(args[4])) {
						return proto.__ks_func_reqExternClassMethod_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqExternDeclarator() {
				return this.__ks_func_reqExternDeclarator_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExternDeclarator_0(mode) {
				const token = this.__ks_func_matchM_0(M.EXTERN_STATEMENT);
				if(token === Token.ABSTRACT) {
					const __ks_abstract_1 = this.yep(AST.Modifier.__ks_0(ModifierKind.Abstract, this.__ks_func_yes_0()));
					if(this.__ks_func_test_0(Token.CLASS)) {
						this.__ks_func_commit_0();
						return this.__ks_func_reqExternClassDeclaration_0(__ks_abstract_1, [__ks_abstract_1]);
					}
					else {
						this.__ks_func_throw_1("class");
					}
				}
				else if(token === Token.ASYNC) {
					const first = this.__ks_func_reqIdentifier_0();
					const modifiers = [this.yep(AST.Modifier.__ks_0(ModifierKind.Async, first))];
					if(this.__ks_func_test_0(Token.FUNC)) {
						this.__ks_func_commit_0();
						return this.__ks_func_reqExternFunctionDeclaration_0(modifiers, first);
					}
					else {
						const fn = this.__ks_func_tryExternFunctionDeclaration_0(modifiers, first);
						if(fn.ok) {
							return fn;
						}
						else {
							return this.__ks_func_reqExternVariableDeclarator_0(first);
						}
					}
				}
				else if(token === Token.CLASS) {
					return this.__ks_func_reqExternClassDeclaration_0(this.__ks_func_yes_0(), []);
				}
				else if(token === Token.FINAL) {
					const first = this.__ks_func_yes_0();
					const modifiers = [this.yep(AST.Modifier.__ks_0(ModifierKind.Immutable, first))];
					if(this.__ks_func_test_0(Token.CLASS)) {
						this.__ks_func_commit_0();
						return this.__ks_func_reqExternClassDeclaration_0(first, modifiers);
					}
					else if(this.__ks_func_test_0(Token.ABSTRACT)) {
						modifiers.push(this.yep(AST.Modifier.__ks_0(ModifierKind.Abstract, this.__ks_func_yes_0())));
						if(this.__ks_func_test_0(Token.CLASS)) {
							this.__ks_func_commit_0();
							return this.__ks_func_reqExternClassDeclaration_0(first, modifiers);
						}
						else {
							this.__ks_func_throw_1("class");
						}
					}
					else {
						this.__ks_func_throw_1("class");
					}
				}
				else if(token === Token.FUNC) {
					const first = this.__ks_func_yes_0();
					return this.__ks_func_reqExternFunctionDeclaration_0([], first);
				}
				else if(token === Token.IDENTIFIER && (((mode & ExternMode.Fallthrough) === 0n) || ((mode & ExternMode.Namespace) !== 0n))) {
					return this.__ks_func_reqExternVariableDeclarator_0(this.__ks_func_reqIdentifier_0());
				}
				else if(token === Token.NAMESPACE) {
					return this.__ks_func_reqExternNamespaceDeclaration_0(mode, this.__ks_func_yes_0(), []);
				}
				else if(token === Token.SEALED) {
					const __ks_sealed_1 = this.yep(AST.Modifier.__ks_0(ModifierKind.Sealed, this.__ks_func_yes_0()));
					if(this.__ks_func_matchM_0(M.EXTERN_STATEMENT) === Token.ABSTRACT) {
						const __ks_abstract_1 = this.yep(AST.Modifier.__ks_0(ModifierKind.Abstract, this.__ks_func_yes_0()));
						if(this.__ks_func_test_0(Token.CLASS)) {
							this.__ks_func_commit_0();
							return this.__ks_func_reqExternClassDeclaration_0(__ks_sealed_1, [__ks_sealed_1, __ks_abstract_1]);
						}
						else {
							this.__ks_func_throw_1("class");
						}
					}
					else if(this._token === Token.CLASS) {
						this.__ks_func_commit_0();
						return this.__ks_func_reqExternClassDeclaration_0(__ks_sealed_1, [__ks_sealed_1]);
					}
					else if(this._token === Token.IDENTIFIER) {
						const name = this.__ks_func_reqIdentifier_0();
						const modifiers = [__ks_sealed_1.value];
						if(this.__ks_func_test_0(Token.COLON)) {
							this.__ks_func_commit_0();
							const type = this.__ks_func_reqTypeVar_0();
							return this.yep(AST.VariableDeclarator.__ks_0(modifiers, name, type, __ks_sealed_1, type));
						}
						else {
							return this.yep(AST.VariableDeclarator.__ks_0(modifiers, name, null, __ks_sealed_1, name));
						}
					}
					else if(this._token === Token.NAMESPACE) {
						this.__ks_func_commit_0();
						return this.__ks_func_reqExternNamespaceDeclaration_0(mode, __ks_sealed_1, [__ks_sealed_1]);
					}
					else {
						this.__ks_func_throw_2(["class", "namespace"]);
					}
				}
				else if(token === Token.SYSTEMIC) {
					const systemic = this.yep(AST.Modifier.__ks_0(ModifierKind.Systemic, this.__ks_func_yes_0()));
					if(this.__ks_func_matchM_0(M.EXTERN_STATEMENT) === Token.CLASS) {
						this.__ks_func_commit_0();
						return this.__ks_func_reqExternClassDeclaration_0(systemic, [systemic]);
					}
					else if(this._token === Token.IDENTIFIER) {
						const name = this.__ks_func_reqIdentifier_0();
						const modifiers = [systemic.value];
						if(this.__ks_func_test_0(Token.COLON)) {
							this.__ks_func_commit_0();
							const type = this.__ks_func_reqTypeVar_0();
							return this.yep(AST.VariableDeclarator.__ks_0(modifiers, name, type, systemic, type));
						}
						else {
							return this.yep(AST.VariableDeclarator.__ks_0(modifiers, name, null, systemic, name));
						}
					}
					else if(this._token === Token.NAMESPACE) {
						this.__ks_func_commit_0();
						return this.__ks_func_reqExternNamespaceDeclaration_0(mode, systemic, [systemic]);
					}
					else {
						this.__ks_func_throw_2(["class", "namespace"]);
					}
				}
				else if(token === Token.VAR && ((mode & ExternMode.Namespace) !== 0n)) {
					const first = this.__ks_func_yes_0();
					const name = this.__ks_func_reqIdentifier_0();
					if(this.__ks_func_test_0(Token.COLON)) {
						this.__ks_func_commit_0();
						const type = this.__ks_func_reqTypeVar_0();
						return this.yep(AST.VariableDeclarator.__ks_0([], name, type, first, type));
					}
					else {
						return this.yep(AST.VariableDeclarator.__ks_0([], name, null, first, name));
					}
				}
				else {
					this.__ks_func_throw_0();
				}
			}
			__ks_func_reqExternDeclarator_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, ExternMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqExternDeclarator_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqExternFunctionDeclaration() {
				return this.__ks_func_reqExternFunctionDeclaration_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExternFunctionDeclaration_0(modifiers, first) {
				const name = this.__ks_func_reqIdentifier_0();
				if(this.__ks_func_test_0(Token.LEFT_ROUND)) {
					const parameters = this.__ks_func_reqFunctionParameterList_0(FunctionMode.Function);
					const type = this.__ks_func_tryFunctionReturns_0(false);
					const __ks_throws_1 = this.__ks_func_tryFunctionThrows_0();
					return this.yep(AST.FunctionDeclaration.__ks_0(name, parameters, modifiers, type, __ks_throws_1, null, first, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
				}
				else {
					const position = this.__ks_func_yep_0();
					const type = this.__ks_func_tryFunctionReturns_0(false);
					const __ks_throws_1 = this.__ks_func_tryFunctionThrows_0();
					return this.yep(AST.FunctionDeclaration.__ks_0(name, null, modifiers, type, __ks_throws_1, null, first, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : name));
				}
			}
			__ks_func_reqExternFunctionDeclaration_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isStructInstance(value, Event);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqExternFunctionDeclaration_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqExternNamespaceDeclaration() {
				return this.__ks_func_reqExternNamespaceDeclaration_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExternNamespaceDeclaration_0(mode, first, modifiers) {
				if(modifiers === void 0 || modifiers === null) {
					modifiers = [];
				}
				const name = this.__ks_func_reqIdentifier_0();
				if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_commit_0().__ks_func_NL_0M_0();
					const attributes = [];
					const statements = [];
					let attrs = [];
					let statement = null;
					while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						if(this.__ks_func_stackInnerAttributes_0(attributes)) {
							continue;
						}
						this.__ks_func_stackOuterAttributes_0(attrs);
						statement = this.__ks_func_reqExternDeclarator_0(ExternMode(mode | ExternMode.Namespace));
						this.__ks_func_reqNL_1M_0();
						if(attrs.length > 0) {
							statement.value.attributes.unshift(...KSHelper.mapArray(attrs, function(attr) {
								return attr.value;
							}));
							statement.value.start = statement.value.attributes[0].start;
							attrs = [];
						}
						statements.push(statement);
					}
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						this.__ks_func_throw_1("}");
					}
					return this.yep(AST.NamespaceDeclaration.__ks_0(attributes, modifiers, name, statements, first, this.__ks_func_yes_0()));
				}
				else {
					return this.yep(AST.NamespaceDeclaration.__ks_0([], modifiers, name, [], first, name));
				}
			}
			__ks_func_reqExternNamespaceDeclaration_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, ExternMode);
				const t1 = value => KSType.isStructInstance(value, Event);
				if(args.length >= 2 && args.length <= 3) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqExternNamespaceDeclaration_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqExternOrImportStatement() {
				return this.__ks_func_reqExternOrImportStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExternOrImportStatement_0(first) {
				const attributes = [];
				const declarations = [];
				let last = null;
				if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_commit_0().__ks_func_reqNL_1M_0();
					let attrs = [];
					let declarator = null;
					while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						if(this.__ks_func_stackInnerAttributes_0(attributes)) {
							continue;
						}
						this.__ks_func_stackOuterAttributes_0(attrs);
						declarator = this.__ks_func_reqImportDeclarator_0();
						if(attrs.length > 0) {
							declarator.value.attributes.unshift(...KSHelper.mapArray(attrs, function(attr) {
								return attr.value;
							}));
							declarator.value.start = declarator.value.attributes[0].start;
							attrs = [];
						}
						declarations.push(declarator);
						if(this.__ks_func_test_0(Token.NEWLINE)) {
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
						}
						else {
							break;
						}
					}
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						this.__ks_func_throw_1("}");
					}
					last = this.__ks_func_yes_0();
				}
				else {
					declarations.push(last = this.__ks_func_reqImportDeclarator_0());
				}
				this.__ks_func_reqNL_EOF_1M_0();
				return this.yep(AST.ExternOrImportDeclaration.__ks_0(attributes, declarations, first, last));
			}
			__ks_func_reqExternOrImportStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqExternOrImportStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqExternOrRequireStatement() {
				return this.__ks_func_reqExternOrRequireStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExternOrRequireStatement_0(first) {
				const attributes = [];
				const declarations = [];
				let last = null;
				if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_commit_0().__ks_func_NL_0M_0();
					let attrs = [];
					let declarator = null;
					while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						if(this.__ks_func_stackInnerAttributes_0(attributes)) {
							continue;
						}
						this.__ks_func_stackOuterAttributes_0(attrs);
						declarator = this.__ks_func_reqExternDeclarator_0(ExternMode.Default);
						if(attrs.length > 0) {
							declarator.value.attributes.unshift(...KSHelper.mapArray(attrs, function(attr) {
								return attr.value;
							}));
							declarator.value.start = declarator.value.attributes[0].start;
							attrs = [];
						}
						declarations.push(declarator);
						this.__ks_func_reqNL_1M_0();
					}
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						this.__ks_func_throw_1("}");
					}
					last = this.__ks_func_yes_0();
				}
				else {
					declarations.push(this.__ks_func_reqExternDeclarator_0(ExternMode.Default));
					while(this.__ks_func_test_0(Token.COMMA)) {
						this.__ks_func_commit_0();
						declarations.push(this.__ks_func_reqExternDeclarator_0(ExternMode.Default));
					}
					last = declarations[declarations.length - 1];
				}
				this.__ks_func_reqNL_EOF_1M_0();
				return this.yep(AST.ExternOrRequireDeclaration(attributes, declarations, first, last));
			}
			__ks_func_reqExternOrRequireStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqExternOrRequireStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqExternStatement() {
				return this.__ks_func_reqExternStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExternStatement_0(first) {
				const attributes = [];
				const declarations = [];
				let last = null;
				if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_commit_0().__ks_func_NL_0M_0();
					let attrs = [];
					let declarator = null;
					while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						if(this.__ks_func_stackInnerAttributes_0(attributes)) {
							continue;
						}
						this.__ks_func_stackOuterAttributes_0(attrs);
						declarator = this.__ks_func_reqExternDeclarator_0(ExternMode.Default);
						if(attrs.length > 0) {
							declarator.value.attributes.unshift(...KSHelper.mapArray(attrs, function(attr) {
								return attr.value;
							}));
							declarator.value.start = declarator.value.attributes[0].start;
							attrs = [];
						}
						declarations.push(declarator);
						this.__ks_func_reqNL_1M_0();
					}
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						this.__ks_func_throw_1("}");
					}
					last = this.__ks_func_yes_0();
				}
				else {
					declarations.push(this.__ks_func_reqExternDeclarator_0(ExternMode.Default));
					while(this.__ks_func_test_0(Token.COMMA)) {
						this.__ks_func_commit_0();
						declarations.push(this.__ks_func_reqExternDeclarator_0(ExternMode.Default));
					}
					last = declarations[declarations.length - 1];
				}
				this.__ks_func_reqNL_EOF_1M_0();
				return this.yep(AST.ExternDeclaration(attributes, declarations, first, last));
			}
			__ks_func_reqExternStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqExternStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqExternVariableDeclarator() {
				return this.__ks_func_reqExternVariableDeclarator_rt.call(null, this, this, arguments);
			}
			__ks_func_reqExternVariableDeclarator_0(name) {
				if(this.__ks_func_match_0([Token.COLON, Token.LEFT_ROUND]) === Token.COLON) {
					this.__ks_func_commit_0();
					const type = this.__ks_func_reqTypeVar_0();
					return this.yep(AST.VariableDeclarator.__ks_0([], name, type, name, type));
				}
				else if(this._token === Token.LEFT_ROUND) {
					const parameters = this.__ks_func_reqFunctionParameterList_0(FunctionMode.Function);
					const type = this.__ks_func_tryFunctionReturns_0(false);
					return this.yep(AST.FunctionDeclaration.__ks_0(name, parameters, [], type, null, null, name, KSType.isValue(type) ? type : parameters));
				}
				else {
					return this.yep(AST.VariableDeclarator.__ks_0([], name, null, name, name));
				}
			}
			__ks_func_reqExternVariableDeclarator_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqExternVariableDeclarator_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqFallthroughStatement() {
				return this.__ks_func_reqFallthroughStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqFallthroughStatement_0(first) {
				return this.yep(AST.FallthroughStatement.__ks_0(first));
			}
			__ks_func_reqFallthroughStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqFallthroughStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqForExpression() {
				return this.__ks_func_reqForExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_reqForExpression_0(first, fMode) {
				const modifiers = [];
				const mark = this.__ks_func_mark_0();
				if(this.__ks_func_test_0(Token.VAR)) {
					const mark2 = this.__ks_func_mark_0();
					const first = this.__ks_func_yes_0();
					let modifier = null;
					if(this.__ks_func_test_0(Token.MUT)) {
						modifier = AST.Modifier.__ks_0(ModifierKind.Mutable, this.__ks_func_yes_0());
					}
					else {
						modifier = AST.Modifier.__ks_0(ModifierKind.Immutable, first);
					}
					if(this.__ks_func_test_0(Token.COMMA)) {
						this.__ks_func_rollback_0(mark);
					}
					else if(this.__ks_func_test_1([Token.FROM, Token.IN, Token.OF])) {
						this.__ks_func_commit_0();
						if(this.__ks_func_test_1([Token.FROM, Token.IN, Token.OF])) {
							modifiers.push(AST.Modifier.__ks_0(ModifierKind.Declarative, first), modifier);
							this.__ks_func_rollback_0(mark2);
						}
						else {
							this.__ks_func_rollback_0(mark);
						}
					}
					else {
						modifiers.push(AST.Modifier.__ks_0(ModifierKind.Declarative, first), modifier);
					}
				}
				let identifier1 = NO;
				let type1 = NO;
				let identifier2 = NO;
				let destructuring = NO;
				if(this.__ks_func_test_0(Token.UNDERSCORE)) {
					this.__ks_func_commit_0();
				}
				else if(!(destructuring = this.__ks_func_tryDestructuring_0(fMode)).ok) {
					identifier1 = this.__ks_func_reqIdentifier_0();
					if(this.__ks_func_test_0(Token.COLON)) {
						this.__ks_func_commit_0();
						type1 = this.__ks_func_reqTypeVar_0();
					}
				}
				if(this.__ks_func_test_0(Token.COMMA)) {
					this.__ks_func_commit_0();
					identifier2 = this.__ks_func_reqIdentifier_0();
				}
				this.__ks_func_NL_0M_0();
				if(destructuring.ok) {
					if(this.__ks_func_match_0([Token.IN, Token.OF]) === Token.IN) {
						this.__ks_func_commit_0();
						return this.__ks_func_altForExpressionIn_0(modifiers, destructuring, type1, identifier2, this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode), first, fMode);
					}
					else if(this._token === Token.OF) {
						this.__ks_func_commit_0();
						return this.__ks_func_altForExpressionOf_0(modifiers, destructuring, type1, identifier2, first, fMode);
					}
					else {
						this.__ks_func_throw_2(["in", "of"]);
					}
				}
				else if(identifier2.ok) {
					if(this.__ks_func_match_0([Token.IN, Token.OF]) === Token.IN) {
						this.__ks_func_commit_0();
						return this.__ks_func_altForExpressionInRange_0(modifiers, identifier1, type1, identifier2, first, fMode);
					}
					else if(this._token === Token.OF) {
						this.__ks_func_commit_0();
						return this.__ks_func_altForExpressionOf_0(modifiers, identifier1, type1, identifier2, first, fMode);
					}
					else {
						this.__ks_func_throw_2(["in", "of"]);
					}
				}
				else {
					if(this.__ks_func_match_0([Token.FROM, Token.IN, Token.OF]) === Token.FROM) {
						this.__ks_func_commit_0();
						return this.__ks_func_altForExpressionFrom_0(modifiers, identifier1, first, fMode);
					}
					else if(this._token === Token.IN) {
						this.__ks_func_commit_0();
						return this.__ks_func_altForExpressionInRange_0(modifiers, identifier1, type1, identifier2, first, fMode);
					}
					else if(this._token === Token.OF) {
						this.__ks_func_commit_0();
						return this.__ks_func_altForExpressionOf_0(modifiers, identifier1, type1, identifier2, first, fMode);
					}
					else {
						this.__ks_func_throw_2(["from", "in", "of"]);
					}
				}
			}
			__ks_func_reqForExpression_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqForExpression_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqForStatement() {
				return this.__ks_func_reqForStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqForStatement_0(first, fMode) {
				const statement = this.__ks_func_reqForExpression_0(first, fMode);
				this.__ks_func_NL_0M_0();
				const block = this.__ks_func_reqBlock_0(NO, fMode);
				statement.value.body = block.value;
				this.__ks_func_relocate_0(statement, null, block);
				return statement;
			}
			__ks_func_reqForStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqForStatement_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqFunctionBody() {
				return this.__ks_func_reqFunctionBody_rt.call(null, this, this, arguments);
			}
			__ks_func_reqFunctionBody_0(fMode) {
				this.__ks_func_NL_0M_0();
				if(this.__ks_func_match_0([Token.LEFT_CURLY, Token.EQUALS_RIGHT_ANGLE]) === Token.LEFT_CURLY) {
					return this.__ks_func_reqBlock_0(this.__ks_func_yes_0(), fMode);
				}
				else if(this._token === Token.EQUALS_RIGHT_ANGLE) {
					this.__ks_func_commit_0().__ks_func_NL_0M_0();
					const expression = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
					if(this.__ks_func_match_0([Token.IF, Token.UNLESS]) === Token.IF) {
						this.__ks_func_commit_0();
						const condition = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
						if(this.__ks_func_match_0([Token.ELSE, Token.NEWLINE]) === Token.ELSE) {
							this.__ks_func_commit_0();
							const whenFalse = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
							return this.yep(AST.ReturnStatement.__ks_1(this.yep(AST.IfExpression.__ks_0(condition, expression, whenFalse, expression, whenFalse)), expression, whenFalse));
						}
						else if((this._token === Token.NEWLINE) || (this._token === Token.EOF)) {
							return this.yep(AST.IfStatement.__ks_0(condition, this.yep(AST.ReturnStatement.__ks_1(expression, expression, expression)), null, expression, condition));
						}
						else {
							this.__ks_func_throw_0();
						}
					}
					else if(this._token === Token.UNLESS) {
						this.__ks_func_commit_0();
						const condition = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
						return this.yep(AST.UnlessStatement.__ks_0(condition, this.yep(AST.ReturnStatement.__ks_1(expression, expression, expression)), expression, condition));
					}
					else {
						return expression;
					}
				}
				else {
					this.__ks_func_throw_2(["{", "=>"]);
				}
			}
			__ks_func_reqFunctionBody_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqFunctionBody_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqFunctionParameterList() {
				return this.__ks_func_reqFunctionParameterList_rt.call(null, this, this, arguments);
			}
			__ks_func_reqFunctionParameterList_0(fMode) {
				if(!this.__ks_func_test_0(Token.LEFT_ROUND)) {
					this.__ks_func_throw_1("(");
				}
				const first = this.__ks_func_yes_0();
				const parameters = [];
				if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
					while(this.__ks_func_reqParameter_0(parameters, DestructuringMode.Parameter, fMode)) {
					}
					if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
						this.__ks_func_throw_1(")");
					}
				}
				return this.__ks_func_yep_2(parameters, first, this.__ks_func_yes_0());
			}
			__ks_func_reqFunctionParameterList_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqFunctionParameterList_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqFunctionStatement() {
				return this.__ks_func_reqFunctionStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqFunctionStatement_0(first, modifiers) {
				if(modifiers === void 0 || modifiers === null) {
					modifiers = [];
				}
				const name = this.__ks_func_reqIdentifier_0();
				const parameters = this.__ks_func_reqFunctionParameterList_0(FunctionMode.Function);
				const type = this.__ks_func_tryFunctionReturns_0();
				const __ks_throws_1 = this.__ks_func_tryFunctionThrows_0();
				const body = this.__ks_func_reqFunctionBody_0(FunctionMode.Function);
				return this.yep(AST.FunctionDeclaration.__ks_0(name, parameters, modifiers, type, __ks_throws_1, body, first, body));
			}
			__ks_func_reqFunctionStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_reqFunctionStatement_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqIdentifier() {
				return this.__ks_func_reqIdentifier_rt.call(null, this, this, arguments);
			}
			__ks_func_reqIdentifier_0() {
				if(this._scanner.__ks_func_test_0(Token.IDENTIFIER)) {
					return this.yep(AST.Identifier.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0()));
				}
				else {
					this.__ks_func_throw_1("Identifier");
				}
			}
			__ks_func_reqIdentifier_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_reqIdentifier_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			reqIfStatement() {
				return this.__ks_func_reqIfStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqIfStatement_0(first, fMode) {
				let condition = null;
				if(this.__ks_func_test_0(Token.VAR)) {
					const mark = this.__ks_func_mark_0();
					const first = this.__ks_func_yes_0();
					const modifiers = [];
					if(this.__ks_func_test_0(Token.MUT)) {
						modifiers.push(AST.Modifier.__ks_0(ModifierKind.Mutable, this.__ks_func_yes_0()));
					}
					if(this.__ks_func_test_1([Token.IDENTIFIER, Token.LEFT_CURLY, Token.LEFT_SQUARE])) {
						const variable = this.__ks_func_reqTypedVariable_0(fMode);
						if(this.__ks_func_test_0(Token.COMMA)) {
							const variables = [variable];
							do {
								this.__ks_func_commit_0();
								variables.push(this.__ks_func_reqTypedVariable_0(fMode));
							}
							while(this.__ks_func_test_0(Token.COMMA))
							if(!this.__ks_func_test_0(Token.EQUALS)) {
								this.__ks_func_throw_1("=");
							}
							this.__ks_func_commit_0();
							if(!this.__ks_func_test_0(Token.AWAIT)) {
								this.__ks_func_throw_1("await");
							}
							this.__ks_func_commit_0();
							const operand = this.__ks_func_reqPrefixedOperand_0(ExpressionMode.Default, fMode);
							condition = this.yep(AST.VariableDeclaration.__ks_0(modifiers, variables, operand, first, operand));
						}
						else {
							if(!this.__ks_func_test_0(Token.EQUALS)) {
								this.__ks_func_throw_1("=");
							}
							this.__ks_func_commit_0();
							const expression = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
							condition = this.yep(AST.VariableDeclaration.__ks_0(modifiers, [variable], expression, first, expression));
						}
					}
					else {
						this.__ks_func_rollback_0(mark);
						condition = this.__ks_func_reqExpression_0(ExpressionMode.NoAnonymousFunction, fMode);
					}
				}
				else {
					this.__ks_func_NL_0M_0();
					condition = this.__ks_func_reqExpression_0(ExpressionMode.NoAnonymousFunction, fMode);
				}
				this.__ks_func_NL_0M_0();
				const whenTrue = this.__ks_func_reqBlock_0(NO, fMode);
				if(this.__ks_func_test_0(Token.NEWLINE)) {
					const mark = this.__ks_func_mark_0();
					this.__ks_func_commit_0().__ks_func_NL_0M_0();
					if(this.__ks_func_match_0([Token.ELSE_IF, Token.ELSE]) === Token.ELSE_IF) {
						const position = this.__ks_func_yes_0();
						position.start.column += 5;
						const whenFalse = this.__ks_func_reqIfStatement_0(position, fMode);
						return this.yep(AST.IfStatement.__ks_0(condition, whenTrue, whenFalse, first, whenFalse));
					}
					else if(this._token === Token.ELSE) {
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
						const whenFalse = this.__ks_func_reqBlock_0(NO, fMode);
						return this.yep(AST.IfStatement.__ks_0(condition, whenTrue, whenFalse, first, whenFalse));
					}
					else {
						this.__ks_func_rollback_0(mark);
						return this.yep(AST.IfStatement.__ks_0(condition, whenTrue, null, first, whenTrue));
					}
				}
				else {
					return this.yep(AST.IfStatement.__ks_0(condition, whenTrue, null, first, whenTrue));
				}
			}
			__ks_func_reqIfStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqIfStatement_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqImplementMemberList() {
				return this.__ks_func_reqImplementMemberList_rt.call(null, this, this, arguments);
			}
			__ks_func_reqImplementMemberList_0(members) {
				let first = null;
				const attributes = this.__ks_func_stackOuterAttributes_0([]);
				if(attributes.length !== 0) {
					first = attributes[0];
				}
				const accessMark = this.__ks_func_mark_0();
				const accessModifier = this.__ks_func_tryAccessModifier_0();
				if(accessModifier.ok && this.__ks_func_test_0(Token.LEFT_CURLY)) {
					return this.reqClassMemberBlock(attributes, [accessModifier], ClassBits(ClassBits.Variable | ClassBits.FinalVariable | ClassBits.LateVariable | ClassBits.Property | ClassBits.Method), members);
				}
				if(this.__ks_func_test_1([Token.OVERRIDE, Token.OVERWRITE])) {
					const mark = this.__ks_func_mark_0();
					const modifier = this.yep(AST.Modifier.__ks_0((this._token === Token.OVERRIDE) ? ModifierKind.Override : ModifierKind.Overwrite, this.__ks_func_yes_0()));
					const modifiers = [modifier];
					if(accessModifier.ok) {
						modifiers.unshift(accessModifier);
					}
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						return this.reqClassMemberBlock(attributes, modifiers, ClassBits(ClassBits.Method | ClassBits.Property), members);
					}
					const member = this.tryClassMember(attributes, modifiers, ClassBits(ClassBits.Method | ClassBits.Property), KSType.isValue(first) ? first : modifiers[0]);
					if(member.ok) {
						members.push(member);
						return;
					}
					this.__ks_func_rollback_0(mark);
				}
				const staticMark = this.__ks_func_mark_0();
				let staticModifier = NO;
				if(this.__ks_func_test_0(Token.STATIC)) {
					staticModifier = this.yep(AST.Modifier.__ks_0(ModifierKind.Static, this.__ks_func_yes_0()));
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						const modifiers = [staticModifier];
						if(accessModifier.ok) {
							modifiers.unshift(accessModifier);
						}
						return this.reqClassMemberBlock(attributes, modifiers, ClassBits(ClassBits.Variable | ClassBits.FinalVariable | ClassBits.LateVariable | ClassBits.Property | ClassBits.Method | ClassBits.FinalMethod), members);
					}
				}
				const finalMark = this.__ks_func_mark_0();
				let finalModifier = NO;
				if(this.__ks_func_test_0(Token.FINAL)) {
					finalModifier = this.yep(AST.Modifier.__ks_0(ModifierKind.Immutable, this.__ks_func_yes_0()));
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						const modifiers = [finalModifier];
						if(staticModifier.ok) {
							modifiers.unshift(staticModifier);
						}
						if(accessModifier.ok) {
							modifiers.unshift(accessModifier);
						}
						if(staticModifier.ok) {
							return this.reqClassMemberBlock(attributes, modifiers, ClassBits(ClassBits.Variable | ClassBits.LateVariable | ClassBits.RequiredAssignment | ClassBits.Property | ClassBits.Method), members);
						}
						else {
							return this.reqClassMemberBlock(attributes, modifiers, ClassBits(ClassBits.Variable | ClassBits.LateVariable | ClassBits.RequiredAssignment | ClassBits.Property | ClassBits.OverrideProperty | ClassBits.OverwriteProperty | ClassBits.Method | ClassBits.OverrideMethod | ClassBits.OverwriteMethod), members);
						}
					}
					else if(!staticModifier.ok && this.__ks_func_test_1([Token.OVERRIDE, Token.OVERWRITE])) {
						const mark = this.__ks_func_mark_0();
						const modifier = this.yep(AST.Modifier.__ks_0((this._token === Token.OVERRIDE) ? ModifierKind.Override : ModifierKind.Overwrite, this.__ks_func_yes_0()));
						if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
							const modifiers = [finalModifier, modifier];
							if(accessModifier.ok) {
								modifiers.unshift(accessModifier);
							}
							return this.reqClassMemberBlock(attributes, modifiers, ClassBits(ClassBits.Method | ClassBits.Property), members);
						}
						this.__ks_func_rollback_0(mark);
					}
				}
				if(this.__ks_func_test_0(Token.LATE)) {
					const lateMark = this.__ks_func_mark_0();
					const lateModifier = this.yep(AST.Modifier.__ks_0(ModifierKind.LateInit, this.__ks_func_yes_0()));
					const modifiers = [lateModifier];
					if(finalModifier.ok) {
						modifiers.unshift(finalModifier);
					}
					if(staticModifier.ok) {
						modifiers.unshift(staticModifier);
					}
					if(accessModifier.ok) {
						modifiers.unshift(accessModifier);
					}
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						return this.reqClassMemberBlock(attributes, modifiers, finalModifier.ok ? ClassBits.Variable : ClassBits(ClassBits.Variable | ClassBits.FinalVariable), members);
					}
					const member = this.tryClassMember(attributes, modifiers, ClassBits(ClassBits.Variable | ClassBits.NoAssignment), KSType.isValue(first) ? first : modifiers[0]);
					if(member.ok) {
						members.push(member);
						return;
					}
					this.__ks_func_rollback_0(lateMark);
				}
				else if(this.__ks_func_test_0(Token.OVERRIDE)) {
				}
				if(accessModifier.ok) {
					const member = this.tryClassMember(attributes, [accessModifier], staticModifier, staticMark, finalModifier, finalMark, KSType.isValue(first) ? first : accessModifier);
					if(member.ok === true) {
						members.push(member);
						return;
					}
					this.__ks_func_rollback_0(accessMark);
				}
				const member = this.tryClassMember(attributes, [], staticModifier, staticMark, finalModifier, finalMark, first);
				if(!(member.ok === true)) {
					this.__ks_func_throw_2(["Identifier", "String", "Template"]);
				}
				members.push(member);
			}
			__ks_func_reqImplementMemberList_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqImplementMemberList_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqImplementStatement() {
				return this.__ks_func_reqImplementStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqImplementStatement_0(first) {
				const variable = this.__ks_func_reqIdentifier_0();
				if(this.__ks_func_test_0(Token.LEFT_ANGLE)) {
					this.__ks_func_reqTypeGeneric_0(this.__ks_func_yes_0());
				}
				if(!this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_throw_1("{");
				}
				this.__ks_func_commit_0().__ks_func_NL_0M_0();
				const attributes = [];
				const members = [];
				while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
					if(this.__ks_func_stackInnerAttributes_0(attributes)) {
						continue;
					}
					this.__ks_func_reqImplementMemberList_0(members);
				}
				if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
					this.__ks_func_throw_1("}");
				}
				return this.yep(AST.ImplementDeclaration.__ks_0(attributes, variable, members, first, this.__ks_func_yes_0()));
			}
			__ks_func_reqImplementStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqImplementStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqImportDeclarator() {
				return this.__ks_func_reqImportDeclarator_rt.call(null, this, this, arguments);
			}
			__ks_func_reqImportDeclarator_0() {
				const source = this.__ks_func_reqString_0();
				const modifiers = [];
				let __ks_arguments_1 = null;
				let last = source;
				if(this.__ks_func_test_0(Token.LEFT_ROUND)) {
					this.__ks_func_commit_0();
					__ks_arguments_1 = [];
					if(this.__ks_func_test_0(Token.DOT_DOT_DOT)) {
						modifiers.push(AST.Modifier.__ks_0(ModifierKind.Autofill, this.__ks_func_yes_0()));
						if(this.__ks_func_test_0(Token.COMMA)) {
							this.__ks_func_commit_0();
						}
					}
					while(this.__ks_func_until_0(Token.RIGHT_ROUND)) {
						let name = this.__ks_func_reqExpression_0(ExpressionMode.Default, FunctionMode.Function);
						const modifiers = [];
						if(KSHelper.valueOf(name.value.kind) === NodeKind.Identifier.value) {
							if((name.value.name === "require") && !this.__ks_func_test_1([Token.COLON, Token.COMMA, Token.RIGHT_ROUND])) {
								const first = name;
								modifiers.push(AST.Modifier.__ks_0(ModifierKind.Required, name));
								name = this.__ks_func_reqIdentifier_0();
								if(this.__ks_func_test_0(Token.COLON)) {
									this.__ks_func_commit_0();
									const value = this.__ks_func_reqIdentifier_0();
									__ks_arguments_1.push(AST.ImportArgument.__ks_0(modifiers, name, value, first, value));
								}
								else {
									__ks_arguments_1.push(AST.ImportArgument.__ks_0(modifiers, null, name, first, name));
								}
							}
							else {
								if(this.__ks_func_test_0(Token.COLON)) {
									this.__ks_func_commit_0();
									const value = this.__ks_func_reqExpression_0(ExpressionMode.Default, FunctionMode.Function);
									__ks_arguments_1.push(AST.ImportArgument.__ks_0(modifiers, name, value, name, value));
								}
								else {
									__ks_arguments_1.push(AST.ImportArgument.__ks_0(modifiers, null, name, name, name));
								}
							}
						}
						else {
							__ks_arguments_1.push(AST.ImportArgument.__ks_0(modifiers, null, name, name, name));
						}
						if(this.__ks_func_test_0(Token.COMMA)) {
							this.__ks_func_commit_0();
						}
						else {
							break;
						}
					}
					if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
						this.__ks_func_throw_1(")");
					}
					this.__ks_func_commit_0();
				}
				const attributes = [];
				const specifiers = [];
				if(this.__ks_func_match_0([Token.BUT, Token.EQUALS_RIGHT_ANGLE, Token.FOR, Token.LEFT_CURLY]) === Token.BUT) {
					const first = this.__ks_func_yes_0();
					const exclusions = [];
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
						while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
							exclusions.push(this.__ks_func_reqIdentifier_0());
							this.__ks_func_reqNL_1M_0();
						}
						if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
							this.__ks_func_throw_1("}");
						}
						last = this.__ks_func_yes_0();
					}
					else {
						exclusions.push(this.__ks_func_reqIdentifier_0());
						while(this.__ks_func_test_0(Token.COMMA)) {
							this.__ks_func_commit_0();
							exclusions.push(this.__ks_func_reqIdentifier_0());
						}
						last = exclusions[exclusions.length - 1];
					}
					specifiers.push(this.yep(AST.ImportExclusionSpecifier(exclusions, first, last)));
				}
				else if(this._token === Token.EQUALS_RIGHT_ANGLE) {
					this.__ks_func_commit_0();
					last = this.__ks_func_reqIdentifier_0();
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						specifiers.push(this.yep(AST.ImportNamespaceSpecifier.__ks_0(last, this.__ks_func_reqImportSpecifiers_0(attributes, []), last, this.__ks_func_yes_0())));
					}
					else {
						specifiers.push(this.yep(AST.ImportNamespaceSpecifier.__ks_0(last, null, last, last)));
					}
				}
				else if(this._token === Token.FOR) {
					this.__ks_func_commit_0();
					let imported = null, local = null;
					while(this.__ks_func_until_0(Token.NEWLINE)) {
						imported = this.__ks_func_reqExternDeclarator_0(ExternMode.Default);
						if(this.__ks_func_test_0(Token.EQUALS_RIGHT_ANGLE)) {
							this.__ks_func_commit_0();
							local = this.__ks_func_reqIdentifier_0();
							specifiers.push(this.yep(AST.ImportSpecifier.__ks_0(imported, local, imported, local)));
						}
						else {
							specifiers.push(this.yep(AST.ImportSpecifier.__ks_0(imported, this.yep(imported.value.name), imported, imported)));
						}
						if(this.__ks_func_test_0(Token.COMMA)) {
							this.__ks_func_commit_0();
						}
						else {
							break;
						}
					}
				}
				else if(this._token === Token.LEFT_CURLY) {
					this.__ks_func_reqImportSpecifiers_0(attributes, specifiers);
					last = this.__ks_func_yes_0();
				}
				return this.yep(AST.ImportDeclarator(attributes, modifiers, source, specifiers, __ks_arguments_1, source, last));
			}
			__ks_func_reqImportDeclarator_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_reqImportDeclarator_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			reqImportSpecifiers() {
				return this.__ks_func_reqImportSpecifiers_rt.call(null, this, this, arguments);
			}
			__ks_func_reqImportSpecifiers_0(attributes, specifiers) {
				this.__ks_func_commit_0().__ks_func_reqNL_1M_0();
				let first = null, imported = null, local = null;
				let attrs = [];
				let specifier = null;
				while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
					if(this.stackInnerAttributes(attributes)) {
						continue;
					}
					this.__ks_func_stackOuterAttributes_0(attrs);
					if(this.__ks_func_match_0([Token.ASTERISK]) === Token.ASTERISK) {
						first = this.__ks_func_yes_0();
						if(!this.__ks_func_test_0(Token.EQUALS_RIGHT_ANGLE)) {
							this.__ks_func_throw_1("=>");
						}
						this.__ks_func_commit_0();
						local = this.__ks_func_reqIdentifier_0();
						specifier = this.yep(AST.ImportNamespaceSpecifier.__ks_0(local, null, first, local));
					}
					else {
						imported = this.__ks_func_reqExternDeclarator_0(ExternMode.Default);
						if(this.__ks_func_test_0(Token.EQUALS_RIGHT_ANGLE)) {
							this.__ks_func_commit_0();
							local = this.__ks_func_reqIdentifier_0();
							specifier = this.yep(AST.ImportSpecifier.__ks_0(imported, local, imported, local));
						}
						else {
							specifier = this.yep(AST.ImportSpecifier.__ks_0(imported, this.yep(imported.value.name), imported, imported));
						}
					}
					if(attrs.length > 0) {
						specifier.value.attributes.unshift(...KSHelper.mapArray(attrs, function(attr) {
							return attr.value;
						}));
						specifier.value.start = specifier.value.attributes[0].start;
						attrs = [];
					}
					specifiers.push(specifier);
					if(this.__ks_func_test_0(Token.NEWLINE)) {
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
					}
					else {
						break;
					}
				}
				if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
					this.__ks_func_throw_1("}");
				}
				return specifiers;
			}
			__ks_func_reqImportSpecifiers_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return proto.__ks_func_reqImportSpecifiers_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqImportStatement() {
				return this.__ks_func_reqImportStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqImportStatement_0(first) {
				this.__ks_func_NL_0M_0();
				const attributes = [];
				const declarations = [];
				let last = null;
				if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_commit_0().__ks_func_reqNL_1M_0();
					let attrs = [];
					let declarator = null;
					while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						if(this.__ks_func_stackInnerAttributes_0(attributes)) {
							continue;
						}
						this.__ks_func_stackOuterAttributes_0(attrs);
						declarator = this.__ks_func_reqImportDeclarator_0();
						if(attrs.length > 0) {
							declarator.value.attributes.unshift(...KSHelper.mapArray(attrs, function(attr) {
								return attr.value;
							}));
							declarator.value.start = declarator.value.attributes[0].start;
							attrs = [];
						}
						declarations.push(declarator);
						if(this.__ks_func_test_0(Token.NEWLINE)) {
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
						}
						else {
							break;
						}
					}
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						this.__ks_func_throw_1("}");
					}
					last = this.__ks_func_yes_0();
				}
				else {
					declarations.push(last = this.__ks_func_reqImportDeclarator_0());
				}
				return this.yep(AST.ImportDeclaration.__ks_0(attributes, declarations, first, last));
			}
			__ks_func_reqImportStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqImportStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqIncludeDeclarator() {
				return this.__ks_func_reqIncludeDeclarator_rt.call(null, this, this, arguments);
			}
			__ks_func_reqIncludeDeclarator_0() {
				if(!this.__ks_func_test_0(Token.STRING)) {
					this.__ks_func_throw_1("String");
				}
				const file = this.__ks_func_yes_1(this.__ks_func_value_0());
				return this.yep(AST.IncludeDeclarator.__ks_0(file));
			}
			__ks_func_reqIncludeDeclarator_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_reqIncludeDeclarator_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			reqIncludeStatement() {
				return this.__ks_func_reqIncludeStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqIncludeStatement_0(first) {
				this.__ks_func_NL_0M_0();
				const attributes = [];
				const declarations = [];
				let last = null;
				if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_commit_0().__ks_func_reqNL_1M_0();
					let attrs = [];
					let declarator = null;
					while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						if(this.__ks_func_stackInnerAttributes_0(attributes)) {
							continue;
						}
						this.__ks_func_stackOuterAttributes_0(attrs);
						declarator = this.__ks_func_reqIncludeDeclarator_0();
						if(attrs.length > 0) {
							declarator.value.attributes.unshift(...KSHelper.mapArray(attrs, function(attr) {
								return attr.value;
							}));
							declarator.value.start = declarator.value.attributes[0].start;
							attrs = [];
						}
						declarations.push(declarator);
						if(this.__ks_func_test_0(Token.NEWLINE)) {
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
						}
						else {
							break;
						}
					}
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						this.__ks_func_throw_1("}");
					}
					last = this.__ks_func_yes_0();
				}
				else {
					declarations.push(last = this.__ks_func_reqIncludeDeclarator_0());
				}
				return this.yep(AST.IncludeDeclaration.__ks_0(attributes, declarations, first, last));
			}
			__ks_func_reqIncludeStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqIncludeStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqIncludeAgainStatement() {
				return this.__ks_func_reqIncludeAgainStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqIncludeAgainStatement_0(first) {
				this.__ks_func_NL_0M_0();
				const attributes = [];
				const declarations = [];
				let last = null;
				if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_commit_0().__ks_func_reqNL_1M_0();
					let attrs = [];
					let declarator = null;
					while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						if(this.__ks_func_stackInnerAttributes_0(attributes)) {
							continue;
						}
						this.__ks_func_stackOuterAttributes_0(attrs);
						declarator = this.__ks_func_reqIncludeDeclarator_0();
						if(attrs.length > 0) {
							declarator.value.attributes.unshift(...KSHelper.mapArray(attrs, function(attr) {
								return attr.value;
							}));
							declarator.value.start = declarator.value.attributes[0].start;
							attrs = [];
						}
						declarations.push(declarator);
						if(this.__ks_func_test_0(Token.NEWLINE)) {
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
						}
						else {
							break;
						}
					}
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						this.__ks_func_throw_1("}");
					}
					last = this.__ks_func_yes_0();
				}
				else {
					declarations.push(last = this.__ks_func_reqIncludeDeclarator_0());
				}
				return this.yep(AST.IncludeAgainDeclaration.__ks_0(attributes, declarations, first, last));
			}
			__ks_func_reqIncludeAgainStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqIncludeAgainStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqJunctionExpression() {
				return this.__ks_func_reqJunctionExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_reqJunctionExpression_0(operator, eMode, fMode, values, type) {
				this.__ks_func_NL_0M_0();
				const operands = [values.pop()];
				if(type === true) {
					operands.push(this.__ks_func_reqTypeEntity_0(NO).value);
				}
				else {
					operands.push(this.reqBinaryOperand(eMode, fMode).value);
				}
				const kind = operator.value.kind;
				while(true) {
					const mark = this.__ks_func_mark_0();
					const operator = this.__ks_func_tryJunctionOperator_0();
					if(operator.ok && (operator.value.kind === kind)) {
						this.__ks_func_NL_0M_0();
						if(type === true) {
							operands.push(this.__ks_func_reqTypeEntity_0(NO).value);
						}
						else {
							operands.push(this.reqBinaryOperand(eMode, fMode).value);
						}
					}
					else {
						this.__ks_func_rollback_0(mark);
						break;
					}
				}
				return AST.JunctionExpression.__ks_0(operator, operands);
			}
			__ks_func_reqJunctionExpression_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4])) {
						return proto.__ks_func_reqJunctionExpression_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqMacroElements() {
				return this.__ks_func_reqMacroElements_rt.call(null, this, this, arguments);
			}
			__ks_func_reqMacroElements_0(elements, terminator) {
				const history = [];
				let literal = null;
				let first = null, last = null;
				const addLiteral = (() => {
					const __ks_rt = (...args) => {
						if(args.length === 0) {
							return __ks_rt.__ks_0.call(this);
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = () => {
						if(literal !== null) {
							elements.push(this.yep(AST.MacroElementLiteral.__ks_0(literal, first, last)));
							literal = null;
						}
					};
					return __ks_rt;
				})();
				const addToLiteral = (() => {
					const __ks_rt = (...args) => {
						if(args.length === 0) {
							return __ks_rt.__ks_0.call(this);
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = () => {
						if(literal === null) {
							literal = this._scanner.__ks_func_value_0();
							first = last = this.__ks_func_yep_0();
						}
						else {
							literal += this._scanner.__ks_func_value_0();
							last = this.__ks_func_yep_0();
						}
						this.__ks_func_commit_0();
					};
					return __ks_rt;
				})();
				const pushToLiteral = (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (value, position) => {
						if(literal === null) {
							literal = value;
							first = last = position;
						}
						else {
							literal = KSOperator.addOrConcat(literal, value);
							last = position;
						}
					};
					return __ks_rt;
				})();
				while(true) {
					let __ks_0 = this.__ks_func_matchM_0(M.MACRO);
					if(__ks_0 === Token.EOF) {
						if((history.length === 0) && ((terminator & MacroTerminator.NEWLINE) === 0n)) {
							this.__ks_func_throw_0();
						}
						break;
					}
					else if(__ks_0 === Token.HASH) {
						const first = this.__ks_func_yes_0();
						if(this.__ks_func_testNS_0(Token.IDENTIFIER)) {
							addLiteral.__ks_0();
							const identifier = this._scanner.__ks_func_value_0();
							const last = this.__ks_func_yes_0();
							const mark = this.__ks_func_mark_0();
							if((identifier.length === 1) && ((identifier === "a") || (identifier === "e") || (identifier === "s") || (identifier === "w")) && this.__ks_func_test_0(Token.LEFT_ROUND)) {
								const reification = AST.MacroReification.__ks_0(identifier, last);
								this.__ks_func_commit_0();
								const expression = this.__ks_func_reqExpression_0(ExpressionMode.Default, FunctionMode.Function);
								if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
									this.__ks_func_throw_1(")");
								}
								elements.push(this.yep(AST.MacroElementExpression.__ks_0(expression, reification, first, this.__ks_func_yes_0())));
							}
							else if((identifier.length === 1) && (identifier === "j")) {
								const reification = AST.MacroReification.__ks_0(identifier, last);
								this.__ks_func_commit_0();
								if(!this.__ks_func_test_0(Token.LEFT_ROUND)) {
									this.__ks_func_throw_1("(");
								}
								this.__ks_func_commit_0();
								const expression = this.__ks_func_reqExpression_0(ExpressionMode.Default, FunctionMode.Function);
								if(!this.__ks_func_test_0(Token.COMMA)) {
									this.__ks_func_throw_1(",");
								}
								this.__ks_func_commit_0();
								const separator = this.__ks_func_reqExpression_0(ExpressionMode.Default, FunctionMode.Function);
								if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
									this.__ks_func_throw_1(")");
								}
								const ast = AST.MacroElementExpression.__ks_0(expression, reification, first, this.__ks_func_yes_0());
								ast.separator = separator.value;
								elements.push(this.yep(ast));
							}
							else {
								this.__ks_func_rollback_0(mark);
								const expression = this.yep(AST.Identifier.__ks_0(identifier, last));
								elements.push(this.yep(AST.MacroElementExpression.__ks_0(expression, null, first, expression)));
							}
						}
						else if(this.__ks_func_testNS_0(Token.LEFT_ROUND)) {
							addLiteral.__ks_0();
							this.__ks_func_commit_0();
							const expression = this.__ks_func_reqExpression_0(ExpressionMode.Default, FunctionMode.Function);
							if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
								this.__ks_func_throw_1(")");
							}
							elements.push(this.yep(AST.MacroElementExpression.__ks_0(expression, null, first, this.__ks_func_yes_0())));
						}
						else {
							pushToLiteral.__ks_0("#", first);
						}
					}
					else if(__ks_0 === Token.INVALID) {
						addToLiteral.__ks_0();
					}
					else if(__ks_0 === Token.LEFT_CURLY) {
						addToLiteral.__ks_0();
						history.unshift(Token.RIGHT_CURLY);
					}
					else if(__ks_0 === Token.LEFT_ROUND) {
						addToLiteral.__ks_0();
						history.unshift(Token.RIGHT_ROUND);
					}
					else if(__ks_0 === Token.NEWLINE) {
						if((history.length === 0) && ((terminator & MacroTerminator.NEWLINE) !== 0n)) {
							break;
						}
						else {
							addLiteral.__ks_0();
							elements.push(this.yep(AST.MacroElementNewLine.__ks_0(this.__ks_func_yes_0())));
							this._scanner.__ks_func_skip_0();
						}
					}
					else if(__ks_0 === Token.RIGHT_CURLY) {
						if(history.length === 0) {
							if((terminator & MacroTerminator.RIGHT_CURLY) === 0n) {
								addToLiteral.__ks_0();
							}
							else {
								break;
							}
						}
						else {
							addToLiteral.__ks_0();
							if(KSHelper.valueOf(history[0]) === Token.RIGHT_CURLY.value) {
								history.shift();
							}
						}
					}
					else if(__ks_0 === Token.RIGHT_ROUND) {
						if(history.length === 0) {
							if((terminator & MacroTerminator.RIGHT_ROUND) === 0n) {
								addToLiteral.__ks_0();
							}
							else {
								break;
							}
						}
						else {
							addToLiteral.__ks_0();
							if(KSHelper.valueOf(history[0]) === Token.RIGHT_ROUND.value) {
								history.shift();
							}
						}
					}
				}
				if(!(history.length === 0)) {
					this.__ks_func_throw_0();
				}
				if(literal !== null) {
					elements.push(this.yep(AST.MacroElementLiteral.__ks_0(literal, first, last)));
				}
			}
			__ks_func_reqMacroElements_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isEnumInstance(value, MacroTerminator);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqMacroElements_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqMacroExpression() {
				return this.__ks_func_reqMacroExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_reqMacroExpression_0(first, terminator) {
				if(terminator === void 0 || terminator === null) {
					terminator = MacroTerminator.NEWLINE;
				}
				const elements = [];
				if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
					if(first.ok) {
						this.__ks_func_commit_0();
					}
					else {
						first = this.__ks_func_yes_0();
					}
					this.__ks_func_reqNL_1M_0();
					this.__ks_func_reqMacroElements_0(elements, MacroTerminator.RIGHT_CURLY);
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						this.__ks_func_throw_1("}");
					}
					return this.yep(AST.MacroExpression.__ks_0(elements, first, this.__ks_func_yes_0()));
				}
				else {
					if(!first.ok) {
						first = this.__ks_func_yep_0();
					}
					this.__ks_func_reqMacroElements_0(elements, terminator);
					return this.yep(AST.MacroExpression(elements, first, elements[elements.length - 1]));
				}
			}
			__ks_func_reqMacroExpression_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, MacroTerminator) || KSType.isNull(value);
				const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
				let pts;
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
						return proto.__ks_func_reqMacroExpression_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
					}
				}
				throw KSHelper.badArgs();
			}
			reqMacroParameterList() {
				return this.__ks_func_reqMacroParameterList_rt.call(null, this, this, arguments);
			}
			__ks_func_reqMacroParameterList_0() {
				if(!this.__ks_func_test_0(Token.LEFT_ROUND)) {
					this.__ks_func_throw_1("(");
				}
				const first = this.__ks_func_yes_0();
				const parameters = [];
				if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
					while(this.__ks_func_reqParameter_0(parameters, DestructuringMode.Parameter, FunctionMode.Macro)) {
					}
					if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
						this.__ks_func_throw_1(")");
					}
				}
				return this.__ks_func_yep_2(parameters, first, this.__ks_func_yes_0());
			}
			__ks_func_reqMacroParameterList_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_reqMacroParameterList_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			reqMacroBody() {
				return this.__ks_func_reqMacroBody_rt.call(null, this, this, arguments);
			}
			__ks_func_reqMacroBody_0() {
				if(this.__ks_func_match_0([Token.LEFT_CURLY, Token.EQUALS_RIGHT_ANGLE]) === Token.LEFT_CURLY) {
					this._mode = ParserMode(this._mode | ParserMode.MacroExpression);
					const body = this.__ks_func_reqBlock_0(this.__ks_func_yes_0(), FunctionMode.Function);
					this._mode = ParserMode(this._mode & ~ParserMode.MacroExpression);
					return body;
				}
				else if(this._token === Token.EQUALS_RIGHT_ANGLE) {
					return this.__ks_func_reqMacroExpression_0(this.__ks_func_yes_0());
				}
				else {
					this.__ks_func_throw_2(["{", "=>"]);
				}
			}
			__ks_func_reqMacroBody_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_reqMacroBody_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			reqMacroStatement() {
				return this.__ks_func_reqMacroStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqMacroStatement_0(attributes) {
				if(attributes === void 0 || attributes === null) {
					attributes = [];
				}
				const name = this.__ks_func_reqIdentifier_0();
				const parameters = this.__ks_func_reqMacroParameterList_0();
				const body = this.__ks_func_reqMacroBody_0();
				this.__ks_func_reqNL_1M_0();
				return this.yep(AST.MacroDeclaration.__ks_0(attributes, name, parameters, body, name, body));
			}
			__ks_func_reqMacroStatement_1(attributes, name, first) {
				if(attributes === void 0 || attributes === null) {
					attributes = [];
				}
				const parameters = this.__ks_func_reqMacroParameterList_0();
				const body = this.__ks_func_reqMacroBody_0();
				this.__ks_func_reqNL_1M_0();
				return this.yep(AST.MacroDeclaration.__ks_0(attributes, name, parameters, body, first, body));
			}
			__ks_func_reqMacroStatement_rt(that, proto, args) {
				const t0 = () => true;
				const t1 = value => KSType.isStructInstance(value, Event);
				const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
				let pts;
				if(args.length <= 1) {
					return proto.__ks_func_reqMacroStatement_0.call(that, args[0]);
				}
				if(args.length >= 2 && args.length <= 3) {
					if(KSHelper.isVarargs(args, 0, args.length - 2, t0, pts = [0], 0) && KSHelper.isVarargs(args, 1, 1, t1, pts, 1) && KSHelper.isVarargs(args, 1, 1, t1, pts, 2) && te(pts, 3)) {
						return proto.__ks_func_reqMacroStatement_1.call(that, KSHelper.getVararg(args, 0, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
					}
				}
				throw KSHelper.badArgs();
			}
			reqModule() {
				return this.__ks_func_reqModule_rt.call(null, this, this, arguments);
			}
			__ks_func_reqModule_0() {
				this.__ks_func_NL_0M_0();
				const attributes = [];
				const body = [];
				let attrs = [];
				let statement = null;
				while(!this._scanner.__ks_func_isEOF_0()) {
					if(this.__ks_func_stackInnerAttributes_0(attributes)) {
						continue;
					}
					this.__ks_func_stackOuterAttributes_0(attrs);
					let __ks_0 = this.__ks_func_matchM_0(M.MODULE_STATEMENT);
					if(__ks_0 === Token.DISCLOSE) {
						statement = this.__ks_func_reqDiscloseStatement_0(this.__ks_func_yes_0()).value;
					}
					else if(__ks_0 === Token.EXPORT) {
						statement = this.__ks_func_reqExportStatement_0(this.__ks_func_yes_0()).value;
					}
					else if(__ks_0 === Token.EXTERN) {
						statement = this.__ks_func_reqExternStatement_0(this.__ks_func_yes_0()).value;
					}
					else if(__ks_0 === Token.EXTERN_IMPORT) {
						statement = this.__ks_func_reqExternOrImportStatement_0(this.__ks_func_yes_0()).value;
					}
					else if(__ks_0 === Token.EXTERN_REQUIRE) {
						statement = this.__ks_func_reqExternOrRequireStatement_0(this.__ks_func_yes_0()).value;
					}
					else if(__ks_0 === Token.INCLUDE) {
						statement = this.__ks_func_reqIncludeStatement_0(this.__ks_func_yes_0()).value;
					}
					else if(__ks_0 === Token.INCLUDE_AGAIN) {
						statement = this.__ks_func_reqIncludeAgainStatement_0(this.__ks_func_yes_0()).value;
					}
					else if(__ks_0 === Token.REQUIRE) {
						statement = this.__ks_func_reqRequireStatement_0(this.__ks_func_yes_0()).value;
					}
					else if(__ks_0 === Token.REQUIRE_EXTERN) {
						statement = this.__ks_func_reqRequireOrExternStatement_0(this.__ks_func_yes_0()).value;
					}
					else if(__ks_0 === Token.REQUIRE_IMPORT) {
						statement = this.__ks_func_reqRequireOrImportStatement_0(this.__ks_func_yes_0()).value;
					}
					else {
						statement = this.__ks_func_reqStatement_0(FunctionMode.Function).value;
					}
					if(attrs.length > 0) {
						statement.attributes.unshift(...KSHelper.mapArray(attrs, function(attr) {
							return attr.value;
						}));
						statement.start = statement.attributes[0].start;
						attrs = [];
					}
					body.push(statement);
					this.__ks_func_NL_0M_0();
				}
				return AST.Module.__ks_0(attributes, body, this);
			}
			__ks_func_reqModule_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_reqModule_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			reqNameIST() {
				return this.__ks_func_reqNameIST_rt.call(null, this, this, arguments);
			}
			__ks_func_reqNameIST_0(fMode) {
				if(this.__ks_func_match_0([Token.IDENTIFIER, Token.STRING, Token.TEMPLATE_BEGIN]) === Token.IDENTIFIER) {
					return this.__ks_func_reqIdentifier_0();
				}
				else if(this._token === Token.STRING) {
					return this.__ks_func_reqString_0();
				}
				else if(this._token === Token.TEMPLATE_BEGIN) {
					return this.__ks_func_reqTemplateExpression_0(this.__ks_func_yes_0(), fMode);
				}
				else {
					this.__ks_func_throw_2(["Identifier", "String", "Template"]);
				}
			}
			__ks_func_reqNameIST_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqNameIST_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqNamespaceStatement() {
				return this.__ks_func_reqNamespaceStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqNamespaceStatement_0(first, name) {
				this.__ks_func_NL_0M_0();
				if(!this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_throw_1("{");
				}
				this.__ks_func_commit_0();
				this.__ks_func_NL_0M_0();
				const attributes = [];
				const statements = [];
				let attrs = [];
				let statement = null;
				while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
					if(this.__ks_func_stackInnerAttributes_0(attributes)) {
						continue;
					}
					this.__ks_func_stackOuterAttributes_0(attrs);
					if(this.__ks_func_matchM_0(M.MODULE_STATEMENT) === Token.EXPORT) {
						statement = this.__ks_func_reqExportStatement_0(this.__ks_func_yes_0());
					}
					else if(this._token === Token.EXTERN) {
						statement = this.__ks_func_reqExternStatement_0(this.__ks_func_yes_0());
					}
					else if(this._token === Token.INCLUDE) {
						statement = this.__ks_func_reqIncludeStatement_0(this.__ks_func_yes_0());
					}
					else if(this._token === Token.INCLUDE_AGAIN) {
						statement = this.__ks_func_reqIncludeAgainStatement_0(this.__ks_func_yes_0());
					}
					else {
						statement = this.__ks_func_reqStatement_0(FunctionMode.Function);
					}
					if(attrs.length > 0) {
						statement.value.attributes.unshift(...KSHelper.mapArray(attrs, function(attr) {
							return attr.value;
						}));
						statement.value.start = statement.value.attributes[0].start;
						attrs = [];
					}
					statements.push(statement);
					this.__ks_func_NL_0M_0();
				}
				if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
					this.__ks_func_throw_1("}");
				}
				return this.yep(AST.NamespaceDeclaration.__ks_0(attributes, [], name, statements, first, this.__ks_func_yes_0()));
			}
			__ks_func_reqNamespaceStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return proto.__ks_func_reqNamespaceStatement_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqNumber() {
				return this.__ks_func_reqNumber_rt.call(null, this, this, arguments);
			}
			__ks_func_reqNumber_0() {
				let value;
				if((value = this.__ks_func_tryNumber_0()).ok) {
					return value;
				}
				else {
					this.__ks_func_throw_1("Number");
				}
			}
			__ks_func_reqNumber_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_reqNumber_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			reqNumeralIdentifier() {
				return this.__ks_func_reqNumeralIdentifier_rt.call(null, this, this, arguments);
			}
			__ks_func_reqNumeralIdentifier_0() {
				if(this.__ks_func_test_1([Token.IDENTIFIER, Token.NUMERAL])) {
					return this.yep(AST.Identifier.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0()));
				}
				else {
					this.__ks_func_throw_1("Identifier");
				}
			}
			__ks_func_reqNumeralIdentifier_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_reqNumeralIdentifier_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			reqNL_1M() {
				return this.__ks_func_reqNL_1M_rt.call(null, this, this, arguments);
			}
			__ks_func_reqNL_1M_0() {
				if(this.__ks_func_test_0(Token.NEWLINE)) {
					this.__ks_func_commit_0();
					this.__ks_func_skipNewLine_0();
				}
				else {
					this.__ks_func_throw_1("NewLine");
				}
			}
			__ks_func_reqNL_1M_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_reqNL_1M_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			reqNL_EOF_1M() {
				return this.__ks_func_reqNL_EOF_1M_rt.call(null, this, this, arguments);
			}
			__ks_func_reqNL_EOF_1M_0() {
				if(this.__ks_func_match_0([Token.NEWLINE]) === Token.NEWLINE) {
					this.__ks_func_commit_0();
					this.__ks_func_skipNewLine_0();
				}
				else if(this._token !== Token.EOF) {
					this.__ks_func_throw_2(["NewLine", "EOF"]);
				}
			}
			__ks_func_reqNL_EOF_1M_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_reqNL_EOF_1M_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			reqObject() {
				return this.__ks_func_reqObject_rt.call(null, this, this, arguments);
			}
			__ks_func_reqObject_0(first, fMode) {
				this.__ks_func_NL_0M_0();
				const attributes = [];
				const properties = [];
				while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
					if(this.__ks_func_stackInnerAttributes_0(attributes)) {
						continue;
					}
					properties.push(this.__ks_func_reqObjectItem_0(fMode));
					if(this.__ks_func_match_0([Token.COMMA, Token.NEWLINE]) === Token.COMMA) {
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
					}
					else if(this._token === Token.NEWLINE) {
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
						if(this.__ks_func_test_0(Token.COMMA)) {
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
						}
					}
					else {
						break;
					}
				}
				if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
					this.__ks_func_throw_1("}");
				}
				return this.yep(AST.ObjectExpression.__ks_0(attributes, properties, first, this.__ks_func_yes_0()));
			}
			__ks_func_reqObject_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqObject_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqObjectItem() {
				return this.__ks_func_reqObjectItem_rt.call(null, this, this, arguments);
			}
			__ks_func_reqObjectItem_0(fMode) {
				let first = null;
				const attributes = this.__ks_func_stackOuterAttributes_0([]);
				if(attributes.length > 0) {
					first = attributes[0];
				}
				if(this.__ks_func_test_0(Token.ASYNC)) {
					const marker = this.__ks_func_mark_0();
					const async = this.__ks_func_yes_0();
					const name = this.__ks_func_tryNameIST_0(fMode);
					if(name.ok) {
						const modifiers = [this.yep(AST.Modifier.__ks_0(ModifierKind.Async, async))];
						const parameters = this.__ks_func_reqFunctionParameterList_0(fMode);
						const type = this.__ks_func_tryFunctionReturns_0();
						const __ks_throws_1 = this.__ks_func_tryFunctionThrows_0();
						const body = this.__ks_func_reqFunctionBody_0(fMode);
						return this.yep(AST.ObjectMember.__ks_2(attributes, name, this.yep(AST.FunctionExpression.__ks_0(parameters, modifiers, type, __ks_throws_1, body, parameters, body)), KSType.isValue(first) ? first : KSType.isValue(async) ? async : name, body));
					}
					else {
						this.__ks_func_rollback_0(marker);
					}
				}
				let name = null;
				if(this.__ks_func_match_0([Token.AT, Token.DOT_DOT_DOT, Token.IDENTIFIER, Token.LEFT_SQUARE, Token.STRING, Token.TEMPLATE_BEGIN]) === Token.IDENTIFIER) {
					name = this.__ks_func_reqIdentifier_0();
				}
				else if(this._token === Token.LEFT_SQUARE) {
					name = this.__ks_func_reqComputedPropertyName_0(this.__ks_func_yes_0(), fMode);
				}
				else if(this._token === Token.STRING) {
					name = this.__ks_func_reqString_0();
				}
				else if(this._token === Token.TEMPLATE_BEGIN) {
					name = this.__ks_func_reqTemplateExpression_0(this.__ks_func_yes_0(), fMode);
				}
				else if((fMode === FunctionMode.Method) && (this._token === Token.AT)) {
					name = this.__ks_func_reqThisExpression_0(this.__ks_func_yes_0());
					return this.yep(AST.ShorthandProperty.__ks_0(attributes, name, KSType.isValue(first) ? first : name, name));
				}
				else if(this._token === Token.DOT_DOT_DOT) {
					const operator = this.yep(AST.UnaryOperator.__ks_0(UnaryOperatorKind.Spread, this.__ks_func_yes_0()));
					const operand = this.__ks_func_reqPrefixedOperand_0(ExpressionMode.Default, fMode);
					return this.yep(AST.UnaryExpression.__ks_0(operator, operand, operator, operand));
				}
				else {
					this.__ks_func_throw_2(["Identifier", "String", "Template", "Computed Property Name"]);
				}
				if(this.__ks_func_test_0(Token.COLON)) {
					this.__ks_func_commit_0();
					const value = this.__ks_func_reqExpression_0(null, fMode, MacroTerminator.Object);
					return this.yep(AST.ObjectMember.__ks_2(attributes, name, value, KSType.isValue(first) ? first : name, value));
				}
				else if(this.__ks_func_test_0(Token.LEFT_ROUND)) {
					const parameters = this.__ks_func_reqFunctionParameterList_0(fMode);
					const type = this.__ks_func_tryFunctionReturns_0();
					const __ks_throws_1 = this.__ks_func_tryFunctionThrows_0();
					const body = this.__ks_func_reqFunctionBody_0(fMode);
					return this.yep(AST.ObjectMember.__ks_2(attributes, name, this.yep(AST.FunctionExpression.__ks_0(parameters, null, type, __ks_throws_1, body, parameters, body)), KSType.isValue(first) ? first : name, body));
				}
				else {
					return this.yep(AST.ShorthandProperty.__ks_0(attributes, name, KSType.isValue(first) ? first : name, name));
				}
			}
			__ks_func_reqObjectItem_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqObjectItem_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqOperand() {
				return this.__ks_func_reqOperand_rt.call(null, this, this, arguments);
			}
			__ks_func_reqOperand_0(eMode, fMode) {
				let value;
				if((value = this.__ks_func_tryOperand_0(eMode, fMode)).ok) {
					return value;
				}
				else {
					this.__ks_func_throw_0();
				}
			}
			__ks_func_reqOperand_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, ExpressionMode);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqOperand_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqOperation() {
				return this.__ks_func_reqOperation_rt.call(null, this, this, arguments);
			}
			__ks_func_reqOperation_0(eMode, fMode) {
				let mark = this.__ks_func_mark_0();
				let operand = null, operator = null;
				if((operand = this.__ks_func_tryDestructuring_0(fMode)).ok) {
					this.__ks_func_NL_0M_0();
					if((operator = this.__ks_func_tryAssignementOperator_0()).ok) {
						const values = [operand.value, AST.BinaryExpression.__ks_0(operator)];
						this.__ks_func_NL_0M_0();
						values.push(this.__ks_func_reqBinaryOperand_0(eMode, fMode).value);
						return this.yep(AST.reorderExpression.__ks_0(values));
					}
				}
				this.__ks_func_rollback_0(mark);
				operand = this.__ks_func_reqBinaryOperand_0(eMode, fMode);
				const values = [operand.value];
				let type = false;
				while(true) {
					mark = this.__ks_func_mark_0();
					this.__ks_func_NL_0M_0();
					if((operator = this.__ks_func_tryBinaryOperator_0()).ok) {
						values.push(AST.BinaryExpression.__ks_0(operator));
						this.__ks_func_NL_0M_0();
						values.push(this.__ks_func_reqBinaryOperand_0(eMode, fMode).value);
					}
					else if(!type && (operator = this.__ks_func_tryTypeOperator_0()).ok) {
						if(mark.line !== operator.start.line) {
							this.__ks_func_rollback_0(mark);
							break;
						}
						else {
							values.push(AST.BinaryExpression.__ks_0(operator), this.__ks_func_reqTypeEntity_0(NO).value);
							type = true;
							continue;
						}
					}
					else if(this.__ks_func_test_0(Token.QUESTION)) {
						values.push(AST.ConditionalExpression.__ks_0(this.__ks_func_yes_0()));
						values.push(this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode).value);
						if(!this.__ks_func_test_0(Token.COLON)) {
							this.__ks_func_throw_1(":");
						}
						this.__ks_func_commit_0();
						values.push(this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode).value);
					}
					else if((operator = this.__ks_func_tryJunctionOperator_0()).ok) {
						values.push(this.__ks_func_reqJunctionExpression_0(operator, eMode, fMode, values, type));
					}
					else {
						this.__ks_func_rollback_0(mark);
						break;
					}
					if(type) {
						type = false;
					}
				}
				if(values.length === 1) {
					return this.__ks_func_yep_1(values[0]);
				}
				else {
					return this.yep(AST.reorderExpression.__ks_0(values));
				}
			}
			__ks_func_reqOperation_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, ExpressionMode);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqOperation_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqParameter() {
				return this.__ks_func_reqParameter_rt.call(null, this, this, arguments);
			}
			__ks_func_reqParameter_0(parameters, pMode, fMode) {
				let firstAttr = null;
				const attributes = this.__ks_func_stackInlineAttributes_0([]);
				if(attributes.length > 0) {
					firstAttr = attributes[0];
				}
				const mutMark = this.__ks_func_mark_0();
				let mutModifier = null;
				if(this.__ks_func_test_0(Token.MUT)) {
					mutModifier = AST.Modifier.__ks_0(ModifierKind.Mutable, this.__ks_func_yes_0());
				}
				if((this.__ks_func_match_0([Token.LEFT_CURLY, Token.LEFT_SQUARE]) === Token.LEFT_CURLY) || (this._token === Token.LEFT_SQUARE)) {
					if(fMode === FunctionMode.Macro) {
						this.__ks_func_throw_0();
					}
					const modifiers = [];
					if(KSType.isValue(mutModifier)) {
						modifiers.push(mutModifier);
					}
					let name = null;
					if(this._token === Token.LEFT_CURLY) {
						name = this.__ks_func_reqDestructuringObject_0(this.__ks_func_yes_0(), pMode, fMode);
					}
					else {
						name = this.__ks_func_reqDestructuringArray_0(this.__ks_func_yes_0(), pMode, fMode);
					}
					if(this.__ks_func_match_0([Token.COLON, Token.EQUALS]) === Token.COLON) {
						this.__ks_func_commit_0();
						const type = this.__ks_func_reqTypeVar_0();
						if(this.__ks_func_test_0(Token.EQUALS)) {
							this.__ks_func_commit_0();
							const defaultValue = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
							parameters.push(this.yep(AST.Parameter.__ks_1(attributes, modifiers, name, type, defaultValue, KSType.isValue(firstAttr) ? firstAttr : name, defaultValue)));
						}
						else {
							parameters.push(this.yep(AST.Parameter.__ks_1(attributes, modifiers, name, type, null, KSType.isValue(firstAttr) ? firstAttr : name, type)));
						}
					}
					else if(this._token === Token.EQUALS) {
						this.__ks_func_commit_0();
						const defaultValue = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
						parameters.push(this.yep(AST.Parameter.__ks_1(attributes, modifiers, name, null, defaultValue, KSType.isValue(firstAttr) ? firstAttr : name, defaultValue)));
					}
					else {
						parameters.push(this.yep(AST.Parameter.__ks_1(attributes, modifiers, name, null, null, KSType.isValue(firstAttr) ? firstAttr : name, name)));
					}
					if(this.__ks_func_test_0(Token.COMMA)) {
						this.__ks_func_commit_0();
						return true;
					}
					else {
						return false;
					}
				}
				let restModifier = null;
				if(this.__ks_func_test_0(Token.DOT_DOT_DOT)) {
					const first = this.__ks_func_yes_0();
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						this.__ks_func_commit_0();
						let min = null, max = null;
						if(this.__ks_func_test_0(Token.COMMA)) {
							this.__ks_func_commit_0();
							min = 0;
							max = this.__ks_func_reqNumber_0().value.value;
						}
						else {
							min = this.__ks_func_reqNumber_0().value.value;
							if(this.__ks_func_test_0(Token.COMMA)) {
								this.__ks_func_commit_0();
								if(this.__ks_func_test_0(Token.RIGHT_CURLY)) {
									max = Infinity;
								}
								else {
									max = this.__ks_func_reqNumber_0().value.value;
								}
							}
							else {
								max = min;
							}
						}
						if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
							this.__ks_func_throw_1("}");
						}
						restModifier = AST.RestModifier(min, max, first, this.__ks_func_yes_0());
					}
					else {
						restModifier = AST.RestModifier.__ks_0(0, Infinity, first, first);
					}
				}
				if(KSType.isValue(mutModifier)) {
					if(this.__ks_func_test_0(Token.IDENTIFIER)) {
						const modifiers = [mutModifier];
						if(KSType.isValue(restModifier)) {
							modifiers.push(restModifier);
						}
						parameters.push(this.__ks_func_reqParameterIdendifier_0(attributes, modifiers, KSType.isValue(firstAttr) ? firstAttr : mutModifier, fMode));
						if(this.__ks_func_test_0(Token.COMMA)) {
							this.__ks_func_commit_0();
							return true;
						}
						else {
							return false;
						}
					}
					if(KSType.isValue(restModifier)) {
						this.__ks_func_throw_0();
					}
					else {
						this.__ks_func_rollback_0(mutMark);
					}
				}
				const modifiers = [];
				if(KSType.isValue(restModifier)) {
					modifiers.push(restModifier);
				}
				if(this.__ks_func_test_0(Token.AT)) {
					if(fMode === FunctionMode.Macro) {
						const first = this.__ks_func_yes_0();
						modifiers.push(AST.Modifier.__ks_0(ModifierKind.AutoEvaluate, first));
						parameters.push(this.__ks_func_reqParameterIdendifier_0(attributes, modifiers, KSType.isValue(firstAttr) ? firstAttr : first, fMode));
					}
					else if((fMode === FunctionMode.Method) && ((pMode & DestructuringMode.THIS_ALIAS) !== 0n)) {
						const first = this.__ks_func_yes_0();
						parameters.push(this.__ks_func_reqParameterThis_0(attributes, modifiers, KSType.isValue(firstAttr) ? firstAttr : first, fMode));
					}
					else {
						this.__ks_func_throw_0();
					}
					if(this.__ks_func_test_0(Token.COMMA)) {
						this.__ks_func_commit_0();
					}
					else {
						return false;
					}
				}
				else if(this.__ks_func_test_0(Token.IDENTIFIER)) {
					const first = (modifiers.length === 0) ? null : modifiers[0];
					parameters.push(this.__ks_func_reqParameterIdendifier_0(attributes, modifiers, KSType.isValue(firstAttr) ? firstAttr : first, fMode));
					if(this.__ks_func_test_0(Token.COMMA)) {
						this.__ks_func_commit_0();
					}
					else {
						return false;
					}
				}
				else if(this.__ks_func_test_0(Token.UNDERSCORE)) {
					const first = this.__ks_func_yes_0();
					if(this.__ks_func_test_0(Token.EXCLAMATION)) {
						modifiers.push(AST.Modifier.__ks_0(ModifierKind.Required, this.__ks_func_yes_0()));
					}
					if(this.__ks_func_test_0(Token.COLON)) {
						this.__ks_func_commit_0();
						const type = this.__ks_func_reqTypeVar_0();
						parameters.push(this.yep(AST.Parameter.__ks_1(attributes, modifiers, null, type, null, KSType.isValue(firstAttr) ? firstAttr : first, type)));
					}
					else if(this.__ks_func_test_0(Token.QUESTION)) {
						const type = this.yep(AST.Nullable.__ks_0(this.__ks_func_yes_0()));
						parameters.push(this.yep(AST.Parameter.__ks_1(attributes, modifiers, null, type, null, KSType.isValue(firstAttr) ? firstAttr : first, type)));
					}
					else {
						parameters.push(this.yep(AST.Parameter.__ks_1(attributes, modifiers, null, null, null, first, KSType.isValue(firstAttr) ? firstAttr : first)));
					}
					if(this.__ks_func_test_0(Token.COMMA)) {
						this.__ks_func_commit_0();
					}
					else {
						return false;
					}
				}
				else if(modifiers.length !== 0) {
					parameters.push(this.yep(AST.Parameter(attributes, modifiers, null, null, null, KSType.isValue(firstAttr) ? firstAttr : modifiers[0], modifiers[0])));
					if(this.__ks_func_test_0(Token.COMMA)) {
						this.__ks_func_commit_0();
					}
					else {
						return false;
					}
				}
				else {
					this.__ks_func_throw_0();
				}
				return true;
			}
			__ks_func_reqParameter_rt(that, proto, args) {
				const t0 = value => KSType.isArray(value, value => KSType.isStructInstance(value, Event));
				const t1 = value => KSType.isEnumInstance(value, DestructuringMode);
				const t2 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 3) {
					if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
						return proto.__ks_func_reqParameter_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqParameterIdendifier() {
				return this.__ks_func_reqParameterIdendifier_rt.call(null, this, this, arguments);
			}
			__ks_func_reqParameterIdendifier_0(attributes, modifiers, first, fMode) {
				if(first === void 0) {
					first = null;
				}
				const identifier = this.__ks_func_reqIdentifier_0();
				if(this.__ks_func_test_0(Token.EXCLAMATION)) {
					modifiers.push(AST.Modifier.__ks_0(ModifierKind.Required, this.__ks_func_yes_0()));
				}
				if(this.__ks_func_match_0([Token.COLON, Token.EQUALS, Token.QUESTION]) === Token.COLON) {
					this.__ks_func_commit_0();
					const type = this.__ks_func_reqTypeVar_0();
					if(this.__ks_func_test_0(Token.EQUALS)) {
						this.__ks_func_commit_0();
						const defaultValue = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
						return this.yep(AST.Parameter.__ks_1(attributes, modifiers, identifier, type, defaultValue, KSType.isValue(first) ? first : identifier, defaultValue));
					}
					else {
						return this.yep(AST.Parameter.__ks_1(attributes, modifiers, identifier, type, null, KSType.isValue(first) ? first : identifier, type));
					}
				}
				else if(this._token === Token.EQUALS) {
					this.__ks_func_commit_0();
					const defaultValue = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
					return this.yep(AST.Parameter.__ks_1(attributes, modifiers, identifier, null, defaultValue, KSType.isValue(first) ? first : identifier, defaultValue));
				}
				else if(this._token === Token.QUESTION) {
					const type = this.yep(AST.Nullable.__ks_0(this.__ks_func_yes_0()));
					if(this.__ks_func_test_0(Token.EQUALS)) {
						this.__ks_func_commit_0();
						const defaultValue = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
						return this.yep(AST.Parameter.__ks_1(attributes, modifiers, identifier, type, defaultValue, KSType.isValue(first) ? first : identifier, defaultValue));
					}
					else {
						return this.yep(AST.Parameter.__ks_1(attributes, modifiers, identifier, type, null, KSType.isValue(first) ? first : identifier, type));
					}
				}
				else {
					return this.yep(AST.Parameter.__ks_1(attributes, modifiers, identifier, null, null, KSType.isValue(first) ? first : identifier, identifier));
				}
			}
			__ks_func_reqParameterIdendifier_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t1(args[3])) {
						return proto.__ks_func_reqParameterIdendifier_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqParameterThis() {
				return this.__ks_func_reqParameterThis_rt.call(null, this, this, arguments);
			}
			__ks_func_reqParameterThis_0(attributes, modifiers, first, fMode) {
				const name = this.reqThisExpression(first);
				if(this.__ks_func_test_0(Token.EQUALS)) {
					this.__ks_func_commit_0();
					const defaultValue = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
					return this.yep(AST.Parameter.__ks_1(attributes, modifiers, name, null, defaultValue, KSType.isValue(first) ? first : name, defaultValue));
				}
				else {
					return this.yep(AST.Parameter.__ks_1(attributes, modifiers, name, null, null, KSType.isValue(first) ? first : name, name));
				}
			}
			__ks_func_reqParameterThis_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t1(args[3])) {
						return proto.__ks_func_reqParameterThis_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqParenthesis() {
				return this.__ks_func_reqParenthesis_rt.call(null, this, this, arguments);
			}
			__ks_func_reqParenthesis_0(first, fMode) {
				if(this.__ks_func_test_0(Token.NEWLINE)) {
					this.__ks_func_commit_0().__ks_func_NL_0M_0();
					const expression = this.__ks_func_reqExpression_0(null, fMode, MacroTerminator.Parenthesis);
					this.__ks_func_NL_0M_0();
					if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
						this.__ks_func_throw_1(")");
					}
					this.__ks_func_relocate_0(expression, first, this.__ks_func_yes_0());
					return expression;
				}
				else {
					const expressions = [this.__ks_func_reqExpression_0(null, fMode, MacroTerminator.List)];
					while(this.__ks_func_test_0(Token.COMMA)) {
						this.__ks_func_commit_0();
						expressions.push(this.__ks_func_reqExpression_0(null, fMode, MacroTerminator.List));
					}
					if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
						this.__ks_func_throw_1(")");
					}
					if(expressions.length === 1) {
						this.__ks_func_relocate_0(expressions[0], first, this.__ks_func_yes_0());
						return expressions[0];
					}
					else {
						return this.yep(AST.SequenceExpression.__ks_0(expressions, first, this.__ks_func_yes_0()));
					}
				}
			}
			__ks_func_reqParenthesis_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqParenthesis_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqPostfixedOperand() {
				return this.__ks_func_reqPostfixedOperand_rt.call(null, this, this, arguments);
			}
			__ks_func_reqPostfixedOperand_0(operand, eMode, fMode) {
				if(operand === void 0) {
					operand = null;
				}
				operand = this.__ks_func_reqUnaryOperand_0(operand, eMode, fMode);
				let operator = null;
				let __ks_0 = this.__ks_func_matchM_0(M.POSTFIX_OPERATOR);
				if(__ks_0 === Token.EXCLAMATION_EXCLAMATION) {
					operator = this.yep(AST.UnaryOperator.__ks_0(UnaryOperatorKind.ForcedTypeCasting, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.EXCLAMATION_QUESTION) {
					operator = this.yep(AST.UnaryOperator.__ks_0(UnaryOperatorKind.NullableTypeCasting, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.MINUS_MINUS) {
					operator = this.yep(AST.UnaryOperator.__ks_0(UnaryOperatorKind.DecrementPostfix, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.PLUS_PLUS) {
					operator = this.yep(AST.UnaryOperator.__ks_0(UnaryOperatorKind.IncrementPostfix, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.QUESTION) {
					operator = this.yep(AST.UnaryOperator.__ks_0(UnaryOperatorKind.Existential, this.__ks_func_yes_0()));
				}
				else {
					return operand;
				}
				return this.__ks_func_reqPostfixedOperand_0(this.yep(AST.UnaryExpression.__ks_0(operator, operand, operand, operator)), eMode, fMode);
			}
			__ks_func_reqPostfixedOperand_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event) || KSType.isNull(value);
				const t1 = value => KSType.isEnumInstance(value, ExpressionMode);
				const t2 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 3) {
					if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
						return proto.__ks_func_reqPostfixedOperand_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqPrefixedOperand() {
				return this.__ks_func_reqPrefixedOperand_rt.call(null, this, this, arguments);
			}
			__ks_func_reqPrefixedOperand_0(eMode, fMode) {
				let __ks_0 = this.__ks_func_matchM_0(M.PREFIX_OPERATOR);
				if(__ks_0 === Token.DOT_DOT_DOT) {
					const operator = this.yep(AST.UnaryOperator.__ks_0(UnaryOperatorKind.Spread, this.__ks_func_yes_0()));
					const operand = this.__ks_func_reqPrefixedOperand_0(eMode, fMode);
					return this.yep(AST.UnaryExpression.__ks_0(operator, operand, operator, operand));
				}
				else if(__ks_0 === Token.EXCLAMATION) {
					const operator = this.yep(AST.UnaryOperator.__ks_0(UnaryOperatorKind.Negation, this.__ks_func_yes_0()));
					const operand = this.__ks_func_reqPrefixedOperand_0(eMode, fMode);
					return this.yep(AST.UnaryExpression.__ks_0(operator, operand, operator, operand));
				}
				else if(__ks_0 === Token.MINUS) {
					const first = this.__ks_func_yes_0();
					const operand = this.__ks_func_reqPrefixedOperand_0(eMode, fMode);
					if(KSHelper.valueOf(operand.value.kind) === NodeKind.NumericExpression.value) {
						operand.value.value = KSOperator.negative(operand.value.value);
						return this.__ks_func_relocate_0(operand, first, null);
					}
					else {
						const operator = this.yep(AST.UnaryOperator.__ks_0(UnaryOperatorKind.Negative, first));
						return this.yep(AST.UnaryExpression.__ks_0(operator, operand, operator, operand));
					}
				}
				else if(__ks_0 === Token.MINUS_MINUS) {
					const operator = this.yep(AST.UnaryOperator.__ks_0(UnaryOperatorKind.DecrementPrefix, this.__ks_func_yes_0()));
					const operand = this.__ks_func_reqPrefixedOperand_0(eMode, fMode);
					return this.yep(AST.UnaryExpression.__ks_0(operator, operand, operator, operand));
				}
				else if(__ks_0 === Token.PLUS_PLUS) {
					const operator = this.yep(AST.UnaryOperator.__ks_0(UnaryOperatorKind.IncrementPrefix, this.__ks_func_yes_0()));
					const operand = this.__ks_func_reqPrefixedOperand_0(eMode, fMode);
					return this.yep(AST.UnaryExpression.__ks_0(operator, operand, operator, operand));
				}
				else if(__ks_0 === Token.QUESTION) {
					const operator = this.yep(AST.UnaryOperator.__ks_0(UnaryOperatorKind.Existential, this.__ks_func_yes_0()));
					const operand = this.__ks_func_reqPrefixedOperand_0(eMode, fMode);
					return this.yep(AST.UnaryExpression.__ks_0(operator, operand, operator, operand));
				}
				else if(__ks_0 === Token.TILDE_TILDE_TILDE) {
					const operator = this.yep(AST.UnaryOperator.__ks_0(UnaryOperatorKind.BitwiseNot, this.__ks_func_yes_0()));
					const operand = this.__ks_func_reqPrefixedOperand_0(eMode, fMode);
					return this.yep(AST.UnaryExpression.__ks_0(operator, operand, operator, operand));
				}
				else {
					return this.__ks_func_reqPostfixedOperand_0(null, eMode, fMode);
				}
			}
			__ks_func_reqPrefixedOperand_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, ExpressionMode);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqPrefixedOperand_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqRequireDeclarator() {
				return this.__ks_func_reqRequireDeclarator_rt.call(null, this, this, arguments);
			}
			__ks_func_reqRequireDeclarator_0() {
				const declarator = this.__ks_func_tryExternDeclarator_0(ExternMode.Fallthrough);
				if(declarator.ok) {
					return declarator;
				}
				let __ks_0 = this.__ks_func_matchM_0(M.REQUIRE_STATEMENT);
				if(__ks_0 === Token.ENUM) {
					this._mode = ParserMode(this._mode | ParserMode.Typing);
					const declarator = this.__ks_func_reqEnumStatement_0(this.__ks_func_yes_0());
					this._mode = ParserMode(this._mode & ~ParserMode.Typing);
					return declarator;
				}
				else if(__ks_0 === Token.FLAGGED) {
					const first = this.__ks_func_reqIdentifier_0();
					if(this.__ks_func_test_0(Token.ENUM)) {
						this.__ks_func_commit_0();
						const modifiers = [this.yep(AST.Modifier.__ks_0(ModifierKind.Flagged, first))];
						this._mode = ParserMode(this._mode | ParserMode.Typing);
						const declarator = this.__ks_func_reqEnumStatement_0(first, modifiers);
						this._mode = ParserMode(this._mode & ~ParserMode.Typing);
						return declarator;
					}
					else {
						return this.__ks_func_reqExternVariableDeclarator_0(first);
					}
				}
				else if(__ks_0 === Token.IDENTIFIER) {
					return this.__ks_func_reqExternVariableDeclarator_0(this.__ks_func_reqIdentifier_0());
				}
				else if(__ks_0 === Token.STRUCT) {
					return this.__ks_func_reqStructStatement_0(this.__ks_func_yes_0());
				}
				else if(__ks_0 === Token.TUPLE) {
					return this.__ks_func_reqTupleStatement_0(this.__ks_func_yes_0());
				}
				else {
					this.__ks_func_throw_0();
				}
			}
			__ks_func_reqRequireDeclarator_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_reqRequireDeclarator_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			reqRequireStatement() {
				return this.__ks_func_reqRequireStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqRequireStatement_0(first) {
				const attributes = [];
				const declarations = [];
				let last = null;
				if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_commit_0().__ks_func_NL_0M_0();
					let attrs = [];
					let declarator = null;
					while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						if(this.__ks_func_stackInnerAttributes_0(attributes)) {
							continue;
						}
						this.__ks_func_stackOuterAttributes_0(attrs);
						declarator = this.__ks_func_reqRequireDeclarator_0();
						if(attrs.length > 0) {
							declarator.value.attributes.unshift(...KSHelper.mapArray(attrs, function(attr) {
								return attr.value;
							}));
							declarator.value.start = declarator.value.attributes[0].start;
							attrs = [];
						}
						declarations.push(declarator);
						this.__ks_func_reqNL_1M_0();
					}
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						this.__ks_func_throw_1("}");
					}
					last = this.__ks_func_yes_0();
				}
				else {
					declarations.push(this.__ks_func_reqRequireDeclarator_0());
					while(this.__ks_func_test_0(Token.COMMA)) {
						this.__ks_func_commit_0();
						declarations.push(this.__ks_func_reqRequireDeclarator_0());
					}
					last = declarations[declarations.length - 1];
				}
				this.__ks_func_reqNL_EOF_1M_0();
				return this.yep(AST.RequireDeclaration(attributes, declarations, first, last));
			}
			__ks_func_reqRequireStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqRequireStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqRequireOrExternStatement() {
				return this.__ks_func_reqRequireOrExternStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqRequireOrExternStatement_0(first) {
				const attributes = [];
				const declarations = [];
				let last = null;
				if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_commit_0().__ks_func_NL_0M_0();
					let attrs = [];
					let declarator = null;
					while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						if(this.__ks_func_stackInnerAttributes_0(attributes)) {
							continue;
						}
						this.__ks_func_stackOuterAttributes_0(attrs);
						declarator = this.__ks_func_reqExternDeclarator_0(ExternMode.Default);
						if(attrs.length > 0) {
							declarator.value.attributes.unshift(...KSHelper.mapArray(attrs, function(attr) {
								return attr.value;
							}));
							declarator.value.start = declarator.value.attributes[0].start;
							attrs = [];
						}
						declarations.push(declarator);
						this.__ks_func_reqNL_1M_0();
					}
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						this.__ks_func_throw_1("}");
					}
					last = this.__ks_func_yes_0();
				}
				else {
					declarations.push(this.__ks_func_reqExternDeclarator_0(ExternMode.Default));
					while(this.__ks_func_test_0(Token.COMMA)) {
						this.__ks_func_commit_0();
						declarations.push(this.__ks_func_reqExternDeclarator_0(ExternMode.Default));
					}
					last = declarations[declarations.length - 1];
				}
				this.__ks_func_reqNL_EOF_1M_0();
				return this.yep(AST.RequireOrExternDeclaration(attributes, declarations, first, last));
			}
			__ks_func_reqRequireOrExternStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqRequireOrExternStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqRequireOrImportStatement() {
				return this.__ks_func_reqRequireOrImportStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqRequireOrImportStatement_0(first) {
				const attributes = [];
				const declarations = [];
				let last = null;
				if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_commit_0().__ks_func_reqNL_1M_0();
					let attrs = [];
					let declarator = null;
					while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						if(this.__ks_func_stackInnerAttributes_0(attributes)) {
							continue;
						}
						this.__ks_func_stackOuterAttributes_0(attrs);
						declarator = this.__ks_func_reqImportDeclarator_0();
						if(attrs.length > 0) {
							declarator.value.attributes.unshift(...KSHelper.mapArray(attrs, function(attr) {
								return attr.value;
							}));
							declarator.value.start = declarator.value.attributes[0].start;
							attrs = [];
						}
						declarations.push(declarator);
						if(this.__ks_func_test_0(Token.NEWLINE)) {
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
						}
						else {
							break;
						}
					}
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						this.__ks_func_throw_1("}");
					}
					last = this.__ks_func_yes_0();
				}
				else {
					declarations.push(last = this.__ks_func_reqImportDeclarator_0());
				}
				this.__ks_func_reqNL_EOF_1M_0();
				return this.yep(AST.RequireOrImportDeclaration.__ks_0(attributes, declarations, first, last));
			}
			__ks_func_reqRequireOrImportStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqRequireOrImportStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqReturnStatement() {
				return this.__ks_func_reqReturnStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqReturnStatement_0(first, fMode) {
				if(this.__ks_func_match_0([Token.IF, Token.UNLESS, Token.NEWLINE]) === Token.IF) {
					this.__ks_func_commit_0();
					const condition = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
					return this.yep(AST.IfStatement.__ks_0(condition, this.yep(AST.ReturnStatement.__ks_0(first)), null, first, condition));
				}
				else if((this._token === Token.NEWLINE) || (this._token === Token.EOF)) {
					return this.yep(AST.ReturnStatement.__ks_0(first));
				}
				else if(this._token === Token.UNLESS) {
					this.__ks_func_commit_0();
					const condition = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
					return this.yep(AST.UnlessStatement.__ks_0(condition, this.yep(AST.ReturnStatement.__ks_0(first)), first, condition));
				}
				else {
					const expression = this.__ks_func_tryExpression_0(ExpressionMode.Default, fMode);
					if(!expression.ok) {
						return NO;
					}
					if(this.__ks_func_match_0([Token.IF, Token.UNLESS, Token.NEWLINE]) === Token.IF) {
						this.__ks_func_commit_0();
						const condition = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
						if(this.__ks_func_match_0([Token.ELSE, Token.NEWLINE]) === Token.ELSE) {
							this.__ks_func_commit_0();
							const whenFalse = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
							return this.yep(AST.ReturnStatement.__ks_1(this.yep(AST.IfExpression.__ks_0(condition, expression, whenFalse, expression, whenFalse)), first, whenFalse));
						}
						else if((this._token === Token.NEWLINE) || (this._token === Token.EOF)) {
							return this.yep(AST.IfStatement.__ks_0(condition, this.yep(AST.ReturnStatement.__ks_1(expression, first, expression)), null, first, condition));
						}
						else {
							this.__ks_func_throw_0();
						}
					}
					else if((this._token === Token.NEWLINE) || (this._token === Token.EOF)) {
						return this.yep(AST.ReturnStatement.__ks_1(expression, first, expression));
					}
					else if(this._token === Token.UNLESS) {
						this.__ks_func_commit_0();
						const condition = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
						return this.yep(AST.UnlessStatement.__ks_0(condition, this.yep(AST.ReturnStatement.__ks_1(expression, first, expression)), first, condition));
					}
					else {
						this.__ks_func_throw_0();
					}
				}
			}
			__ks_func_reqReturnStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqReturnStatement_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqStatement() {
				return this.__ks_func_reqStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqStatement_0(fMode) {
				const mark = this.__ks_func_mark_0();
				let statement = NO;
				let __ks_0 = this.__ks_func_matchM_0(M.STATEMENT);
				if(__ks_0 === Token.ABSTRACT) {
					const first = this.__ks_func_yes_0();
					if(this.__ks_func_test_0(Token.CLASS)) {
						this.__ks_func_commit_0();
						const modifiers = [this.yep(AST.Modifier.__ks_0(ModifierKind.Abstract, first))];
						statement = this.__ks_func_reqClassStatement_0(first, modifiers);
					}
					else {
						statement = NO;
					}
				}
				else if(__ks_0 === Token.ASYNC) {
					const first = this.__ks_func_yes_0();
					if(this.__ks_func_test_0(Token.FUNC)) {
						this.__ks_func_commit_0();
						const modifiers = [this.yep(AST.Modifier.__ks_0(ModifierKind.Async, first))];
						statement = this.__ks_func_reqFunctionStatement_0(first, modifiers);
					}
					else {
						statement = NO;
					}
				}
				else if(__ks_0 === Token.BREAK) {
					statement = this.__ks_func_reqBreakStatement_0(this.__ks_func_yes_0());
				}
				else if(__ks_0 === Token.CLASS) {
					statement = this.__ks_func_tryClassStatement_0(this.__ks_func_yes_0());
				}
				else if(__ks_0 === Token.CONTINUE) {
					statement = this.__ks_func_reqContinueStatement_0(this.__ks_func_yes_0());
				}
				else if(__ks_0 === Token.DELETE) {
					statement = this.__ks_func_tryDestroyStatement_0(this.__ks_func_yes_0(), fMode);
				}
				else if(__ks_0 === Token.DO) {
					statement = this.__ks_func_reqDoStatement_0(this.__ks_func_yes_0(), fMode);
				}
				else if(__ks_0 === Token.ENUM) {
					statement = this.__ks_func_reqEnumStatement_0(this.__ks_func_yes_0());
				}
				else if(__ks_0 === Token.FALLTHROUGH) {
					statement = this.__ks_func_reqFallthroughStatement_0(this.__ks_func_yes_0());
				}
				else if(__ks_0 === Token.FINAL) {
					const first = this.__ks_func_yes_0();
					const modifiers = [this.yep(AST.Modifier.__ks_0(ModifierKind.Immutable, first))];
					if(this.__ks_func_test_0(Token.CLASS)) {
						this.__ks_func_commit_0();
						statement = this.__ks_func_reqClassStatement_0(first, modifiers);
					}
					else if(this.__ks_func_test_0(Token.ABSTRACT)) {
						modifiers.push(this.yep(AST.Modifier.__ks_0(ModifierKind.Abstract, this.__ks_func_yes_0())));
						if(this.__ks_func_test_0(Token.CLASS)) {
							this.__ks_func_commit_0();
							statement = this.__ks_func_reqClassStatement_0(first, modifiers);
						}
						else {
							this.__ks_func_throw_1("class");
						}
					}
					else {
						statement = NO;
					}
				}
				else if(__ks_0 === Token.FLAGGED) {
					const first = this.__ks_func_yes_0();
					if(this.__ks_func_test_0(Token.ENUM)) {
						this.__ks_func_commit_0();
						const modifiers = [this.yep(AST.Modifier.__ks_0(ModifierKind.Flagged, first))];
						statement = this.__ks_func_reqEnumStatement_0(first, modifiers);
					}
					else {
						statement = NO;
					}
				}
				else if(__ks_0 === Token.FOR) {
					statement = this.__ks_func_reqForStatement_0(this.__ks_func_yes_0(), fMode);
				}
				else if(__ks_0 === Token.FUNC) {
					statement = this.__ks_func_reqFunctionStatement_0(this.__ks_func_yes_0());
				}
				else if(__ks_0 === Token.IF) {
					statement = this.__ks_func_reqIfStatement_0(this.__ks_func_yes_0(), fMode);
				}
				else if(__ks_0 === Token.IMPL) {
					statement = this.__ks_func_reqImplementStatement_0(this.__ks_func_yes_0());
				}
				else if(__ks_0 === Token.IMPORT) {
					statement = this.__ks_func_reqImportStatement_0(this.__ks_func_yes_0());
				}
				else if(__ks_0 === Token.MACRO) {
					if((this._mode & ParserMode.MacroExpression) === 0n) {
						statement = this.__ks_func_tryMacroStatement_0(this.__ks_func_yes_0());
					}
					else {
						statement = this.__ks_func_reqMacroExpression_0(this.__ks_func_yes_0());
					}
				}
				else if(__ks_0 === Token.NAMESPACE) {
					statement = this.__ks_func_tryNamespaceStatement_0(this.__ks_func_yes_0());
				}
				else if(__ks_0 === Token.RETURN) {
					statement = this.__ks_func_reqReturnStatement_0(this.__ks_func_yes_0(), fMode);
				}
				else if(__ks_0 === Token.SEALED) {
					const first = this.__ks_func_yes_0();
					const modifiers = [this.yep(AST.Modifier.__ks_0(ModifierKind.Sealed, first))];
					if(this.__ks_func_test_0(Token.CLASS)) {
						this.__ks_func_commit_0();
						statement = this.__ks_func_reqClassStatement_0(first, modifiers);
					}
					else if(this.__ks_func_test_0(Token.ABSTRACT)) {
						modifiers.push(this.yep(AST.Modifier.__ks_0(ModifierKind.Abstract, this.__ks_func_yes_0())));
						if(this.__ks_func_test_0(Token.CLASS)) {
							this.__ks_func_commit_0();
							statement = this.__ks_func_reqClassStatement_0(first, modifiers);
						}
						else {
							this.__ks_func_throw_1("class");
						}
					}
					else {
						statement = NO;
					}
				}
				else if(__ks_0 === Token.STRUCT) {
					statement = this.__ks_func_reqStructStatement_0(this.__ks_func_yes_0());
				}
				else if(__ks_0 === Token.SWITCH) {
					statement = this.__ks_func_reqSwitchStatement_0(this.__ks_func_yes_0(), fMode);
				}
				else if(__ks_0 === Token.THROW) {
					statement = this.__ks_func_reqThrowStatement_0(this.__ks_func_yes_0(), fMode);
				}
				else if(__ks_0 === Token.TRY) {
					statement = this.__ks_func_reqTryStatement_0(this.__ks_func_yes_0(), fMode);
				}
				else if(__ks_0 === Token.TUPLE) {
					statement = this.__ks_func_reqTupleStatement_0(this.__ks_func_yes_0());
				}
				else if(__ks_0 === Token.TYPE) {
					statement = this.__ks_func_tryTypeStatement_0(this.__ks_func_yes_0());
				}
				else if(__ks_0 === Token.UNLESS) {
					statement = this.__ks_func_reqUnlessStatement_0(this.__ks_func_yes_0(), fMode);
				}
				else if(__ks_0 === Token.UNTIL) {
					statement = this.__ks_func_tryUntilStatement_0(this.__ks_func_yes_0(), fMode);
				}
				else if(__ks_0 === Token.VAR) {
					statement = this.__ks_func_reqVarStatement_0(this.__ks_func_yes_0(), ExpressionMode.Default, fMode);
				}
				else if(__ks_0 === Token.WHILE) {
					statement = this.__ks_func_tryWhileStatement_0(this.__ks_func_yes_0(), fMode);
				}
				if(!statement.ok) {
					this.__ks_func_rollback_0(mark);
					if(!(statement = this.__ks_func_tryAssignementStatement_0(fMode)).ok) {
						this.__ks_func_rollback_0(mark);
						statement = this.__ks_func_reqExpressionStatement_0(fMode);
					}
				}
				this.__ks_func_reqNL_EOF_1M_0();
				return statement;
			}
			__ks_func_reqStatement_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqString() {
				return this.__ks_func_reqString_rt.call(null, this, this, arguments);
			}
			__ks_func_reqString_0() {
				if(this.__ks_func_test_0(Token.STRING)) {
					return this.yep(AST.Literal.__ks_0(this.__ks_func_value_0(), this.__ks_func_yes_0()));
				}
				else {
					this.__ks_func_throw_1("String");
				}
			}
			__ks_func_reqString_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_reqString_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			reqStructStatement() {
				return this.__ks_func_reqStructStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqStructStatement_0(first) {
				const name = this.__ks_func_tryIdentifier_0();
				if(!name.ok) {
					return NO;
				}
				const attributes = [];
				const elements = [];
				let __ks_extends_1 = null;
				let last = name;
				if(this.__ks_func_test_0(Token.EXTENDS)) {
					this.__ks_func_commit_0();
					__ks_extends_1 = this.__ks_func_reqIdentifier_0();
				}
				if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
					const first = this.__ks_func_yes_0();
					this.__ks_func_NL_0M_0();
					this.__ks_func_stackInnerAttributes_0(attributes);
					while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						const name = this.__ks_func_reqIdentifier_0();
						let type = null;
						if(this.__ks_func_test_0(Token.COLON)) {
							this.__ks_func_commit_0();
							type = this.__ks_func_reqTypeVar_0();
						}
						else if(this.__ks_func_test_0(Token.QUESTION)) {
							type = this.yep(AST.Nullable.__ks_0(this.__ks_func_yes_0()));
						}
						let defaultValue = null;
						if(this.__ks_func_test_0(Token.EQUALS)) {
							this.__ks_func_commit_0();
							defaultValue = this.__ks_func_reqExpression_0(ExpressionMode.Default, FunctionMode.Function);
						}
						elements.push(AST.StructField.__ks_0(name, type, defaultValue, name, KSType.isValue(defaultValue) ? defaultValue : KSType.isValue(type) ? type : name));
						if(this.__ks_func_match_0([Token.COMMA, Token.NEWLINE]) === Token.COMMA) {
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
						}
						else if(this._token === Token.NEWLINE) {
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
							if(this.__ks_func_test_0(Token.COMMA)) {
								this.__ks_func_commit_0().__ks_func_NL_0M_0();
							}
						}
						else {
							break;
						}
					}
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						this.__ks_func_throw_1("}");
					}
					last = this.__ks_func_yes_0();
				}
				return this.yep(AST.StructDeclaration.__ks_0(attributes, name, __ks_extends_1, elements, first, last));
			}
			__ks_func_reqStructStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqStructStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqSwitchBinding() {
				return this.__ks_func_reqSwitchBinding_rt.call(null, this, this, arguments);
			}
			__ks_func_reqSwitchBinding_0(fMode) {
				const bindings = [this.__ks_func_reqSwitchBindingValue_0(fMode)];
				while(this.__ks_func_test_0(Token.COMMA)) {
					this.__ks_func_commit_0();
					bindings.push(this.__ks_func_reqSwitchBindingValue_0(fMode));
				}
				return this.__ks_func_yep_1(bindings);
			}
			__ks_func_reqSwitchBinding_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqSwitchBinding_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqSwitchBindingValue() {
				return this.__ks_func_reqSwitchBindingValue_rt.call(null, this, this, arguments);
			}
			__ks_func_reqSwitchBindingValue_0(fMode) {
				let __ks_0 = this.__ks_func_match_0([Token.LEFT_CURLY, Token.LEFT_SQUARE]);
				if(__ks_0 === Token.LEFT_CURLY) {
					return this.__ks_func_reqDestructuringObject_0(this.__ks_func_yes_0(), DestructuringMode.Nil, fMode);
				}
				else if(__ks_0 === Token.LEFT_SQUARE) {
					return this.__ks_func_reqDestructuringArray_0(this.__ks_func_yes_0(), DestructuringMode.Nil, fMode);
				}
				else {
					const name = this.__ks_func_reqIdentifier_0();
					if(this.__ks_func_test_0(Token.AS)) {
						this.__ks_func_commit_0();
						const type = this.__ks_func_reqTypeVar_0();
						return this.yep(AST.SwitchTypeCasting.__ks_0(name, type));
					}
					else {
						return name;
					}
				}
			}
			__ks_func_reqSwitchBindingValue_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqSwitchBindingValue_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqSwitchCaseExpression() {
				return this.__ks_func_reqSwitchCaseExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_reqSwitchCaseExpression_0(fMode) {
				let __ks_0 = this.__ks_func_match_0([Token.LEFT_CURLY, Token.RETURN, Token.THROW]);
				if(__ks_0 === Token.LEFT_CURLY) {
					return this.__ks_func_reqBlock_0(this.__ks_func_yes_0(), fMode);
				}
				else if(__ks_0 === Token.RETURN) {
					return this.__ks_func_reqReturnStatement_0(this.__ks_func_yes_0(), fMode);
				}
				else if(__ks_0 === Token.THROW) {
					const first = this.__ks_func_yes_0();
					const expression = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
					return this.yep(AST.ThrowStatement.__ks_1(expression, first, expression));
				}
				else {
					return this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
			}
			__ks_func_reqSwitchCaseExpression_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqSwitchCaseExpression_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqSwitchCaseList() {
				return this.__ks_func_reqSwitchCaseList_rt.call(null, this, this, arguments);
			}
			__ks_func_reqSwitchCaseList_0(fMode) {
				this.__ks_func_NL_0M_0();
				if(!this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_throw_1("{");
				}
				this.__ks_func_commit_0().__ks_func_NL_0M_0();
				const clauses = [];
				let conditions = null, bindings = null, filter = null, body = null, first = null;
				while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
					first = conditions = bindings = filter = null;
					if(this.__ks_func_test_0(Token.EQUALS_RIGHT_ANGLE)) {
						first = this.__ks_func_yes_0();
						body = this.__ks_func_reqSwitchCaseExpression_0(fMode);
					}
					else {
						if(this.__ks_func_test_0(Token.UNDERSCORE)) {
							first = this.__ks_func_yes_0();
						}
						else if(!this.__ks_func_test_1([Token.WITH, Token.WHEN])) {
							first = this.__ks_func_reqSwitchCondition_0(fMode);
							conditions = [first];
							while(this.__ks_func_test_0(Token.COMMA)) {
								this.__ks_func_commit_0();
								conditions.push(this.__ks_func_reqSwitchCondition_0(fMode));
							}
							this.__ks_func_NL_0M_0();
						}
						if(this.__ks_func_test_0(Token.WITH)) {
							if(first === null) {
								first = this.__ks_func_yes_0();
							}
							else {
								this.__ks_func_commit_0();
							}
							bindings = this.__ks_func_reqSwitchBinding_0(fMode);
							this.__ks_func_NL_0M_0();
						}
						if(this.__ks_func_test_0(Token.WHEN)) {
							if(first === null) {
								first = this.__ks_func_yes_0();
							}
							else {
								this.__ks_func_commit_0();
							}
							filter = this.__ks_func_reqExpression_0(ExpressionMode.NoAnonymousFunction, fMode);
							this.__ks_func_NL_0M_0();
						}
						if(!this.__ks_func_test_0(Token.EQUALS_RIGHT_ANGLE)) {
							this.__ks_func_throw_1("=>");
						}
						this.__ks_func_commit_0();
						body = this.__ks_func_reqSwitchCaseExpression_0(fMode);
					}
					this.__ks_func_reqNL_1M_0();
					clauses.push(AST.SwitchClause.__ks_0(conditions, bindings, filter, body, first, body));
				}
				if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
					this.__ks_func_throw_1("}");
				}
				return this.__ks_func_yes_1(clauses);
			}
			__ks_func_reqSwitchCaseList_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqSwitchCaseList_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqSwitchCondition() {
				return this.__ks_func_reqSwitchCondition_rt.call(null, this, this, arguments);
			}
			__ks_func_reqSwitchCondition_0(fMode) {
				let __ks_0 = this.__ks_func_match_0([Token.LEFT_CURLY, Token.LEFT_SQUARE, Token.IS, Token.COLON]);
				if(__ks_0 === Token.COLON) {
					throw new Error("Not Implemented");
				}
				else if(__ks_0 === Token.IS) {
					const first = this.__ks_func_yes_0();
					const type = this.__ks_func_reqTypeVar_0();
					return this.yep(AST.SwitchConditionType.__ks_0(type, first, type));
				}
				else if(__ks_0 === Token.LEFT_CURLY) {
					let first = this.__ks_func_yes_0();
					const members = [];
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						let name = null;
						while(true) {
							name = this.__ks_func_reqIdentifier_0();
							if(this.__ks_func_test_0(Token.COLON)) {
								this.__ks_func_commit_0();
								members.push(this.yep(AST.ObjectMember.__ks_1(name, this.__ks_func_reqSwitchConditionValue_0(fMode))));
							}
							else {
								members.push(this.yep(AST.ObjectMember.__ks_0(name)));
							}
							if(this.__ks_func_test_0(Token.COMMA)) {
								this.__ks_func_commit_0();
							}
							else {
								break;
							}
						}
					}
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						this.__ks_func_throw_1("}");
					}
					return this.yep(AST.SwitchConditionObject.__ks_0(members, first, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.LEFT_SQUARE) {
					let first = this.__ks_func_yes_0();
					const values = [];
					while(!this.__ks_func_test_0(Token.RIGHT_SQUARE)) {
						if(this.__ks_func_test_0(Token.UNDERSCORE)) {
							values.push(this.yep(AST.OmittedExpression.__ks_0([], this.__ks_func_yes_0())));
						}
						else if(this.__ks_func_test_0(Token.DOT_DOT_DOT)) {
							let modifier = AST.Modifier.__ks_0(ModifierKind.Rest, this.__ks_func_yes_0());
							values.push(this.yep(AST.OmittedExpression([modifier], modifier)));
						}
						else {
							values.push(this.__ks_func_reqSwitchConditionValue_0(fMode));
						}
						if(this.__ks_func_test_0(Token.COMMA)) {
							this.__ks_func_commit_0();
							if(this.__ks_func_test_0(Token.RIGHT_SQUARE)) {
								values.push(this.yep(AST.OmittedExpression.__ks_0([], this.__ks_func_yep_0())));
							}
						}
						else {
							break;
						}
					}
					if(!this.__ks_func_test_0(Token.RIGHT_SQUARE)) {
						this.__ks_func_throw_1("]");
					}
					return this.yep(AST.SwitchConditionArray.__ks_0(values, first, this.__ks_func_yes_0()));
				}
				else {
					return this.__ks_func_reqSwitchConditionValue_0(fMode);
				}
			}
			__ks_func_reqSwitchCondition_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqSwitchCondition_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqSwitchConditionValue() {
				return this.__ks_func_reqSwitchConditionValue_rt.call(null, this, this, arguments);
			}
			__ks_func_reqSwitchConditionValue_0(fMode) {
				const operand = this.__ks_func_reqPrefixedOperand_0(ExpressionMode.Default, fMode);
				if(this.__ks_func_match_0([Token.LEFT_ANGLE, Token.DOT_DOT]) === Token.DOT_DOT) {
					this.__ks_func_commit_0();
					if(this.__ks_func_test_0(Token.LEFT_ANGLE)) {
						this.__ks_func_commit_0();
						return this.yep(AST.SwitchConditionRangeFI.__ks_0(operand, this.__ks_func_reqPrefixedOperand_0(ExpressionMode.Default, fMode)));
					}
					else {
						return this.yep(AST.SwitchConditionRangeFO.__ks_0(operand, this.__ks_func_reqPrefixedOperand_0(ExpressionMode.Default, fMode)));
					}
				}
				else if(this._token === Token.LEFT_ANGLE) {
					this.__ks_func_commit_0();
					if(!this.__ks_func_test_0(Token.DOT_DOT)) {
						this.__ks_func_throw_1("..");
					}
					this.__ks_func_commit_0();
					if(this.__ks_func_test_0(Token.LEFT_ANGLE)) {
						this.__ks_func_commit_0();
						return this.yep(AST.SwitchConditionRangeTI.__ks_0(operand, this.__ks_func_reqPrefixedOperand_0(ExpressionMode.Default, fMode)));
					}
					else {
						return this.yep(AST.SwitchConditionRangeTO.__ks_0(operand, this.__ks_func_reqPrefixedOperand_0(ExpressionMode.Default, fMode)));
					}
				}
				else {
					return operand;
				}
			}
			__ks_func_reqSwitchConditionValue_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqSwitchConditionValue_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqSwitchStatement() {
				return this.__ks_func_reqSwitchStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqSwitchStatement_0(first, fMode) {
				const expression = this.__ks_func_reqOperation_0(ExpressionMode.Default, fMode);
				const clauses = this.__ks_func_reqSwitchCaseList_0(fMode);
				return this.yep(AST.SwitchStatement.__ks_0(expression, clauses, first, clauses));
			}
			__ks_func_reqSwitchStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqSwitchStatement_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqTemplateExpression() {
				return this.__ks_func_reqTemplateExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_reqTemplateExpression_0(first, fMode) {
				const elements = [];
				while(true) {
					if(this.__ks_func_matchM_0(M.TEMPLATE) === Token.TEMPLATE_ELEMENT) {
						this.__ks_func_commit_0();
						elements.push(this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode));
						if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
							this.__ks_func_throw_1(")");
						}
						this.__ks_func_commit_0();
					}
					else if(this._token === Token.TEMPLATE_VALUE) {
						elements.push(this.yep(AST.Literal.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0())));
					}
					else {
						break;
					}
				}
				if(!this.__ks_func_test_0(Token.TEMPLATE_END)) {
					this.__ks_func_throw_1("`");
				}
				return this.yep(AST.TemplateExpression.__ks_0(elements, first, this.__ks_func_yes_0()));
			}
			__ks_func_reqTemplateExpression_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqTemplateExpression_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqThisExpression() {
				return this.__ks_func_reqThisExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_reqThisExpression_0(first) {
				const identifier = this.__ks_func_reqIdentifier_0();
				return this.yep(AST.ThisExpression.__ks_0(identifier, first, identifier));
			}
			__ks_func_reqThisExpression_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqThisExpression_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqThrowStatement() {
				return this.__ks_func_reqThrowStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqThrowStatement_0(first, fMode) {
				const expression = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				if(this.__ks_func_match_0([Token.IF, Token.UNLESS, Token.NEWLINE]) === Token.IF) {
					this.__ks_func_commit_0();
					const condition = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
					if(this.__ks_func_match_0([Token.ELSE, Token.NEWLINE]) === Token.ELSE) {
						this.__ks_func_commit_0();
						const whenFalse = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
						return this.yep(AST.ThrowStatement.__ks_1(this.yep(AST.IfExpression.__ks_0(condition, expression, whenFalse, expression, whenFalse)), first, whenFalse));
					}
					else if((this._token === Token.NEWLINE) || (this._token === Token.EOF)) {
						return this.yep(AST.IfStatement.__ks_0(condition, this.yep(AST.ThrowStatement.__ks_1(expression, first, expression)), null, first, condition));
					}
					else {
						this.__ks_func_throw_0();
					}
				}
				else if((this._token === Token.NEWLINE) || (this._token === Token.EOF)) {
					return this.yep(AST.ThrowStatement.__ks_1(expression, first, expression));
				}
				else if(this._token === Token.UNLESS) {
					this.__ks_func_commit_0();
					const condition = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
					return this.yep(AST.UnlessStatement.__ks_0(condition, this.yep(AST.ThrowStatement.__ks_1(expression, first, expression)), first, condition));
				}
				else {
					this.__ks_func_throw_0();
				}
			}
			__ks_func_reqThrowStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqThrowStatement_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqTryCatchClause() {
				return this.__ks_func_reqTryCatchClause_rt.call(null, this, this, arguments);
			}
			__ks_func_reqTryCatchClause_0(first, fMode) {
				let binding = null;
				if(this.__ks_func_test_0(Token.IDENTIFIER)) {
					binding = this.__ks_func_reqIdentifier_0();
				}
				this.__ks_func_NL_0M_0();
				const body = this.__ks_func_reqBlock_0(NO, fMode);
				return this.yep(AST.CatchClause.__ks_0(binding, null, body, first, body));
			}
			__ks_func_reqTryCatchClause_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqTryCatchClause_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqTryExpression() {
				return this.__ks_func_reqTryExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_reqTryExpression_0(first, fMode) {
				const modifiers = [];
				if(this.__ks_func_testNS_0(Token.EXCLAMATION)) {
					modifiers.push(AST.Modifier.__ks_0(ModifierKind.Disabled, this.__ks_func_yes_0()));
				}
				const operand = this.__ks_func_reqPrefixedOperand_0(ExpressionMode.Default, fMode);
				let __ks_default_1 = null;
				if(this.__ks_func_test_0(Token.TILDE)) {
					this.__ks_func_commit_0();
					__ks_default_1 = this.__ks_func_reqPrefixedOperand_0(ExpressionMode.Default, fMode);
				}
				return this.yep(AST.TryExpression.__ks_0(modifiers, operand, __ks_default_1, first, KSType.isValue(__ks_default_1) ? __ks_default_1 : operand));
			}
			__ks_func_reqTryExpression_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqTryExpression_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqTryStatement() {
				return this.__ks_func_reqTryStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqTryStatement_0(first, fMode) {
				this.__ks_func_NL_0M_0();
				const body = this.__ks_func_tryBlock_0(fMode);
				if(!body.ok) {
					return NO;
				}
				let last = body;
				let mark = this.__ks_func_mark_0();
				const catchClauses = [];
				let catchClause = null, finalizer = null;
				this.__ks_func_NL_0M_0();
				if(this.__ks_func_test_0(Token.ON)) {
					do {
						catchClauses.push(last = this.__ks_func_reqCatchOnClause_0(this.__ks_func_yes_0(), fMode));
						mark = this.__ks_func_mark_0();
						this.__ks_func_NL_0M_0();
					}
					while(this.__ks_func_test_0(Token.ON))
				}
				else {
					this.__ks_func_rollback_0(mark);
					this.__ks_func_NL_0M_0();
				}
				if(this.__ks_func_test_0(Token.CATCH)) {
					catchClause = last = this.__ks_func_reqTryCatchClause_0(this.__ks_func_yes_0(), fMode);
					mark = this.__ks_func_mark_0();
				}
				else {
					this.__ks_func_rollback_0(mark);
				}
				this.__ks_func_NL_0M_0();
				if(this.__ks_func_test_0(Token.FINALLY)) {
					this.__ks_func_commit_0();
					finalizer = last = this.__ks_func_reqBlock_0(NO, fMode);
				}
				else {
					this.__ks_func_rollback_0(mark);
				}
				return this.yep(AST.TryStatement.__ks_0(body, catchClauses, catchClause, finalizer, first, last));
			}
			__ks_func_reqTryStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqTryStatement_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqTupleStatement() {
				return this.__ks_func_reqTupleStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqTupleStatement_0(first) {
				const name = this.__ks_func_tryIdentifier_0();
				if(!name.ok) {
					return NO;
				}
				const attributes = [];
				const modifiers = [];
				const elements = [];
				let __ks_extends_1 = null;
				let last = name;
				if(this.__ks_func_test_0(Token.EXTENDS)) {
					this.__ks_func_commit_0();
					__ks_extends_1 = this.__ks_func_reqIdentifier_0();
				}
				if((__ks_extends_1 === null) && this.__ks_func_test_0(Token.LEFT_ROUND)) {
					const first = this.__ks_func_yes_0();
					this.__ks_func_NL_0M_0();
					this.__ks_func_stackInnerAttributes_0(attributes);
					while(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
						const type = this.__ks_func_reqTypeVar_0();
						if(this.__ks_func_test_0(Token.EQUALS)) {
							this.__ks_func_commit_0();
							const defaultValue = this.__ks_func_reqExpression_0(ExpressionMode.Default, FunctionMode.Function);
							elements.push(AST.TupleField.__ks_0(null, type, defaultValue, type, defaultValue));
						}
						else {
							elements.push(AST.TupleField.__ks_0(null, type, null, type, type));
						}
						if(this.__ks_func_match_0([Token.COMMA, Token.NEWLINE]) === Token.COMMA) {
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
						}
						else if(this._token === Token.NEWLINE) {
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
							if(this.__ks_func_test_0(Token.COMMA)) {
								this.__ks_func_commit_0().__ks_func_NL_0M_0();
							}
						}
						else {
							break;
						}
					}
					if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
						this.__ks_func_throw_1(")");
					}
					last = this.__ks_func_yes_0();
					if(this.__ks_func_test_0(Token.EXTENDS)) {
						this.__ks_func_commit_0();
						last = __ks_extends_1 = this.__ks_func_reqIdentifier_0();
					}
				}
				else if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
					const first = this.__ks_func_yes_0();
					this.__ks_func_NL_0M_0();
					modifiers.push(AST.Modifier.__ks_0(ModifierKind.Named, first));
					this.__ks_func_stackInnerAttributes_0(attributes);
					while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						const name = this.__ks_func_reqIdentifier_0();
						let type = null;
						if(this.__ks_func_test_0(Token.COLON)) {
							this.__ks_func_commit_0();
							type = this.__ks_func_reqTypeVar_0();
						}
						else if(this.__ks_func_test_0(Token.QUESTION)) {
							type = this.yep(AST.Nullable.__ks_0(this.__ks_func_yes_0()));
						}
						let defaultValue = null;
						if(this.__ks_func_test_0(Token.EQUALS)) {
							this.__ks_func_commit_0();
							defaultValue = this.__ks_func_reqExpression_0(ExpressionMode.Default, FunctionMode.Function);
						}
						elements.push(AST.TupleField.__ks_0(name, type, defaultValue, name, KSType.isValue(defaultValue) ? defaultValue : KSType.isValue(type) ? type : name));
						if(this.__ks_func_match_0([Token.COMMA, Token.NEWLINE]) === Token.COMMA) {
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
						}
						else if(this._token === Token.NEWLINE) {
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
							if(this.__ks_func_test_0(Token.COMMA)) {
								this.__ks_func_commit_0().__ks_func_NL_0M_0();
							}
						}
						else {
							break;
						}
					}
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						this.__ks_func_throw_1("]");
					}
					last = this.__ks_func_yes_0();
				}
				return this.yep(AST.TupleDeclaration.__ks_0(attributes, modifiers, name, __ks_extends_1, elements, first, last));
			}
			__ks_func_reqTupleStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqTupleStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqTypeEntity() {
				return this.__ks_func_reqTypeEntity_rt.call(null, this, this, arguments);
			}
			__ks_func_reqTypeEntity_0(nullable = null) {
				const marker = this.__ks_func_mark_0();
				if(this.__ks_func_match_0([Token.ASYNC, Token.FUNC, Token.LEFT_ROUND]) === Token.ASYNC) {
					const async = this.__ks_func_yes_0();
					if(this.__ks_func_test_0(Token.FUNC)) {
						this.__ks_func_commit_0();
					}
					if(this.__ks_func_test_0(Token.LEFT_ROUND)) {
						const modifiers = [this.yep(AST.Modifier.__ks_0(ModifierKind.Async, async))];
						const parameters = this.__ks_func_reqFunctionParameterList_0(FunctionMode.Function);
						const type = this.__ks_func_tryFunctionReturns_0(false);
						const __ks_throws_1 = this.__ks_func_tryFunctionThrows_0();
						return this.yep(AST.FunctionExpression.__ks_0(parameters, modifiers, type, __ks_throws_1, null, async, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
					}
					else {
						this.__ks_func_rollback_0(marker);
					}
				}
				else if(this._token === Token.FUNC) {
					const first = this.__ks_func_yes_0();
					if(this.__ks_func_test_0(Token.LEFT_ROUND)) {
						const parameters = this.__ks_func_reqFunctionParameterList_0(FunctionMode.Function);
						const type = this.__ks_func_tryFunctionReturns_0(false);
						const __ks_throws_1 = this.__ks_func_tryFunctionThrows_0();
						return this.yep(AST.FunctionExpression.__ks_0(parameters, null, type, __ks_throws_1, null, first, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
					}
					else {
						this.__ks_func_rollback_0(marker);
					}
				}
				else if(this._token === Token.LEFT_ROUND) {
					const parameters = this.__ks_func_reqFunctionParameterList_0(FunctionMode.Function);
					const type = this.__ks_func_tryFunctionReturns_0(false);
					const __ks_throws_1 = this.__ks_func_tryFunctionThrows_0();
					return this.yep(AST.FunctionExpression.__ks_0(parameters, null, type, __ks_throws_1, null, parameters, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
				}
				let name = this.__ks_func_reqIdentifier_0();
				if(this.__ks_func_testNS_0(Token.DOT)) {
					let property = null;
					do {
						this.__ks_func_commit_0();
						property = this.__ks_func_reqIdentifier_0();
						name = this.yep(AST.MemberExpression.__ks_0([], name, property));
					}
					while(this.__ks_func_testNS_0(Token.DOT))
				}
				let last = name;
				let generic = null;
				if(this.__ks_func_testNS_0(Token.LEFT_ANGLE)) {
					generic = last = this.__ks_func_reqTypeGeneric_0(this.__ks_func_yes_0());
				}
				const modifiers = [];
				if((nullable === null) && this.__ks_func_testNS_0(Token.QUESTION)) {
					last = this.__ks_func_yes_0();
					modifiers.push(AST.Modifier.__ks_0(ModifierKind.Nullable, last));
				}
				return this.yep(AST.TypeReference.__ks_1(modifiers, name, generic, name, last));
			}
			__ks_func_reqTypeEntity_rt(that, proto, args) {
				if(args.length <= 1) {
					return proto.__ks_func_reqTypeEntity_0.call(that, args[0]);
				}
				throw KSHelper.badArgs();
			}
			reqTypeGeneric() {
				return this.__ks_func_reqTypeGeneric_rt.call(null, this, this, arguments);
			}
			__ks_func_reqTypeGeneric_0(first) {
				const entities = [this.__ks_func_reqTypeEntity_0()];
				while(this.__ks_func_test_0(Token.COMMA)) {
					this.__ks_func_commit_0();
					entities.push(this.__ks_func_reqTypeEntity_0());
				}
				if(!this.__ks_func_test_0(Token.RIGHT_ANGLE)) {
					this.__ks_func_throw_1(">");
				}
				return this.__ks_func_yes_1(entities);
			}
			__ks_func_reqTypeGeneric_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqTypeGeneric_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqTypeStatement() {
				return this.__ks_func_reqTypeStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqTypeStatement_0(first, name) {
				if(!this.__ks_func_test_0(Token.EQUALS)) {
					this.__ks_func_throw_1("=");
				}
				this.__ks_func_commit_0();
				const type = this.__ks_func_reqTypeVar_0(true);
				return this.yep(AST.TypeAliasDeclaration.__ks_0(name, type, first, type));
			}
			__ks_func_reqTypeStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return proto.__ks_func_reqTypeStatement_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqTypeVar() {
				return this.__ks_func_reqTypeVar_rt.call(null, this, this, arguments);
			}
			__ks_func_reqTypeVar_0(isMultiLines) {
				if(isMultiLines === void 0 || isMultiLines === null) {
					isMultiLines = false;
				}
				if(isMultiLines) {
					this.__ks_func_NL_0M_0();
				}
				const type = this.__ks_func_reqTypeReference_0(isMultiLines);
				let mark = this.__ks_func_mark_0();
				if(isMultiLines) {
					const types = [type];
					this.__ks_func_NL_0M_0();
					if(this.__ks_func_match_0([Token.PIPE, Token.AMPERSAND, Token.CARET]) === Token.PIPE) {
						do {
							this.__ks_func_commit_0();
							if(this.__ks_func_test_0(Token.PIPE)) {
								this.__ks_func_commit_0();
							}
							this.__ks_func_NL_0M_0();
							types.push(this.__ks_func_reqTypeReference_0(true));
							mark = this.__ks_func_mark_0();
							this.__ks_func_NL_0M_0();
						}
						while(this.__ks_func_test_0(Token.PIPE))
						this.__ks_func_rollback_0(mark);
						if(types.length === 1) {
							return types[0];
						}
						else {
							return this.yep(AST.UnionType.__ks_0(types, type, types[types.length - 1]));
						}
					}
					else if(this._token === Token.AMPERSAND) {
						do {
							this.__ks_func_commit_0();
							if(this.__ks_func_test_0(Token.AMPERSAND)) {
								this.__ks_func_commit_0();
							}
							this.__ks_func_NL_0M_0();
							types.push(this.__ks_func_reqTypeReference_0(true));
							mark = this.__ks_func_mark_0();
							this.__ks_func_NL_0M_0();
						}
						while(this.__ks_func_test_0(Token.AMPERSAND))
						this.__ks_func_rollback_0(mark);
						if(types.length === 1) {
							return types[0];
						}
						else {
							return this.yep(AST.FusionType.__ks_0(types, type, types[types.length - 1]));
						}
					}
					else if(this._token === Token.CARET) {
						do {
							this.__ks_func_commit_0();
							if(this.__ks_func_test_0(Token.CARET)) {
								this.__ks_func_commit_0();
							}
							this.__ks_func_NL_0M_0();
							types.push(this.__ks_func_reqTypeReference_0(true));
							mark = this.__ks_func_mark_0();
							this.__ks_func_NL_0M_0();
						}
						while(this.__ks_func_test_0(Token.CARET))
						this.__ks_func_rollback_0(mark);
						if(types.length === 1) {
							return types[0];
						}
						else {
							return this.yep(AST.ExclusionType.__ks_0(types, type, types[types.length - 1]));
						}
					}
					else {
						this.__ks_func_rollback_0(mark);
					}
				}
				else {
					if(this.__ks_func_match_0([Token.PIPE_PIPE, Token.PIPE, Token.AMPERSAND_AMPERSAND, Token.AMPERSAND, Token.CARET_CARET, Token.CARET]) === Token.PIPE) {
						this.__ks_func_commit_0();
						if(this.__ks_func_test_0(Token.NEWLINE)) {
							this.__ks_func_rollback_0(mark);
							return type;
						}
						const types = [type];
						do {
							this.__ks_func_commit_0();
							types.push(this.__ks_func_reqTypeReference_0(false));
						}
						while(this.__ks_func_test_0(Token.PIPE))
						return this.yep(AST.UnionType.__ks_0(types, type, types[types.length - 1]));
					}
					else if(this._token === Token.AMPERSAND) {
						this.__ks_func_commit_0();
						if(this.__ks_func_test_0(Token.NEWLINE)) {
							this.__ks_func_rollback_0(mark);
							return type;
						}
						const types = [type];
						do {
							this.__ks_func_commit_0();
							types.push(this.__ks_func_reqTypeReference_0(false));
						}
						while(this.__ks_func_test_0(Token.AMPERSAND))
						return this.yep(AST.FusionType.__ks_0(types, type, types[types.length - 1]));
					}
					else if(this._token === Token.CARET) {
						this.__ks_func_commit_0();
						if(this.__ks_func_test_0(Token.NEWLINE)) {
							this.__ks_func_rollback_0(mark);
							return type;
						}
						const types = [type];
						do {
							this.__ks_func_commit_0();
							types.push(this.__ks_func_reqTypeReference_0(false));
						}
						while(this.__ks_func_test_0(Token.CARET))
						return this.yep(AST.ExclusionType.__ks_0(types, type, types[types.length - 1]));
					}
				}
				return type;
			}
			__ks_func_reqTypeVar_rt(that, proto, args) {
				const t0 = value => KSType.isBoolean(value) || KSType.isNull(value);
				const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
				let pts;
				if(args.length <= 1) {
					if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
						return proto.__ks_func_reqTypeVar_0.call(that, KSHelper.getVararg(args, 0, pts[1]));
					}
				}
				throw KSHelper.badArgs();
			}
			reqTypeObjectMember() {
				return this.__ks_func_reqTypeObjectMember_rt.call(null, this, this, arguments);
			}
			__ks_func_reqTypeObjectMember_0() {
				const identifier = this.__ks_func_reqIdentifier_0();
				let type = null;
				if(this.__ks_func_test_0(Token.COLON)) {
					this.__ks_func_commit_0();
					type = this.__ks_func_reqTypeVar_0();
				}
				else {
					const parameters = this.__ks_func_reqFunctionParameterList_0(FunctionMode.Function);
					type = this.__ks_func_tryFunctionReturns_0();
					const __ks_throws_1 = this.__ks_func_tryFunctionThrows_0();
					type = this.yep(AST.FunctionExpression.__ks_0(parameters, null, type, __ks_throws_1, null, parameters, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
				}
				return this.yep(AST.ObjectMemberReference.__ks_0(identifier, type));
			}
			__ks_func_reqTypeObjectMember_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_reqTypeObjectMember_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			reqTypeReference() {
				return this.__ks_func_reqTypeReference_rt.call(null, this, this, arguments);
			}
			__ks_func_reqTypeReference_0(isMultiLines) {
				if(this.__ks_func_match_0([Token.LEFT_CURLY, Token.LEFT_SQUARE]) === Token.LEFT_CURLY) {
					const first = this.__ks_func_yes_0();
					const properties = [];
					this.__ks_func_NL_0M_0();
					while(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						if(this.__ks_func_match_0([Token.ASYNC, Token.FUNC, Token.IDENTIFIER]) === Token.IDENTIFIER) {
							properties.push(this.__ks_func_reqTypeObjectMember_0());
						}
						else if(this._token === Token.ASYNC) {
							const marker = this.__ks_func_mark_0();
							const async = this.__ks_func_yes_0();
							if(this.__ks_func_test_0(Token.FUNC)) {
								this.__ks_func_commit_0();
							}
							const identifier = this.__ks_func_reqIdentifier_0();
							if(this.__ks_func_test_0(Token.LEFT_ROUND)) {
								const modifiers = [this.yep(AST.Modifier.__ks_0(ModifierKind.Async, async))];
								const parameters = this.__ks_func_reqFunctionParameterList_0(FunctionMode.Function);
								const type = this.__ks_func_tryFunctionReturns_0(false);
								const __ks_throws_1 = this.__ks_func_tryFunctionThrows_0();
								const objectType = this.yep(AST.FunctionExpression.__ks_0(parameters, modifiers, type, __ks_throws_1, null, parameters, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
								properties.push(this.yep(AST.ObjectMemberReference.__ks_0(identifier, objectType)));
							}
							else {
								this.__ks_func_rollback_0(marker);
								properties.push(this.__ks_func_reqTypeObjectMember_0());
							}
						}
						else if(this._token === Token.FUNC) {
							const marker = this.__ks_func_mark_0();
							const first = this.__ks_func_yes_0();
							const identifier = this.__ks_func_reqIdentifier_0();
							if(this.__ks_func_test_0(Token.LEFT_ROUND)) {
								const parameters = this.__ks_func_reqFunctionParameterList_0(FunctionMode.Function);
								const type = this.__ks_func_tryFunctionReturns_0(false);
								const __ks_throws_1 = this.__ks_func_tryFunctionThrows_0();
								const objectType = this.yep(AST.FunctionExpression.__ks_0(parameters, null, type, __ks_throws_1, null, parameters, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
								properties.push(this.yep(AST.ObjectMemberReference.__ks_0(identifier, objectType)));
							}
							else {
								this.__ks_func_rollback_0(marker);
								properties.push(this.__ks_func_reqTypeObjectMember_0());
							}
						}
						else {
							this.__ks_func_throw_2(["async", "func", "Identifier"]);
						}
						if(this.__ks_func_test_0(Token.COMMA)) {
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
						}
						else if(this.__ks_func_test_0(Token.NEWLINE)) {
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
							if(this.__ks_func_test_0(Token.COMMA)) {
								this.__ks_func_commit_0().__ks_func_NL_0M_0();
							}
						}
						else {
							break;
						}
					}
					if(!this.__ks_func_test_0(Token.RIGHT_CURLY)) {
						this.__ks_func_throw_1("}");
					}
					return this.yep(AST.ObjectReference.__ks_0(properties, first, this.__ks_func_yes_0()));
				}
				else if(this._token === Token.LEFT_SQUARE) {
					const first = this.__ks_func_yes_0();
					const elements = [];
					this.__ks_func_NL_0M_0();
					while(this.__ks_func_until_0(Token.RIGHT_SQUARE)) {
						if(this.__ks_func_test_0(Token.COMMA)) {
							elements.push(AST.OmittedReference.__ks_0(this.__ks_func_yep_0()));
							this.__ks_func_commit_0().__ks_func_NL_0M_0();
						}
						else {
							elements.push(this.__ks_func_reqTypeVar_0(isMultiLines));
							if(this.__ks_func_test_0(Token.COMMA)) {
								this.__ks_func_commit_0().__ks_func_NL_0M_0();
							}
							else if(this.__ks_func_test_0(Token.NEWLINE)) {
								this.__ks_func_commit_0().__ks_func_NL_0M_0();
							}
							else {
								break;
							}
						}
					}
					if(!this.__ks_func_test_0(Token.RIGHT_SQUARE)) {
						this.__ks_func_throw_1("]");
					}
					return this.yep(AST.ArrayReference.__ks_0(elements, first, this.__ks_func_yes_0()));
				}
				else {
					return this.__ks_func_reqTypeEntity_0();
				}
			}
			__ks_func_reqTypeReference_rt(that, proto, args) {
				const t0 = KSType.isBoolean;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqTypeReference_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqTypedVariable() {
				return this.__ks_func_reqTypedVariable_rt.call(null, this, this, arguments);
			}
			__ks_func_reqTypedVariable_0(fMode) {
				let name = null;
				let type = null;
				let __ks_0;
				if(this.__ks_func_match_0([Token.LEFT_CURLY, Token.LEFT_SQUARE]) === Token.LEFT_CURLY) {
					name = this.__ks_func_reqDestructuringObject_0(this.__ks_func_yes_0(), DestructuringMode.Declaration, fMode);
				}
				else if(this._token === Token.LEFT_SQUARE) {
					name = this.__ks_func_reqDestructuringArray_0(this.__ks_func_yes_0(), DestructuringMode.Declaration, fMode);
				}
				else if(KSType.isValue(__ks_0 = this.__ks_func_tryIdentifier_0()) ? (name = __ks_0, false) : true) {
					this.__ks_func_throw_2(["Identifier", "{", "["]);
				}
				if(this.__ks_func_test_0(Token.COLON)) {
					this.__ks_func_commit_0();
					type = this.__ks_func_reqTypeVar_0();
				}
				return this.yep(AST.VariableDeclarator.__ks_0([], name, type, name, KSType.isValue(type) ? type : name));
			}
			__ks_func_reqTypedVariable_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqTypedVariable_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqUnaryOperand() {
				return this.__ks_func_reqUnaryOperand_rt.call(null, this, this, arguments);
			}
			__ks_func_reqUnaryOperand_0(value, eMode, fMode) {
				if(value === void 0) {
					value = null;
				}
				if(value === null) {
					value = this.__ks_func_reqOperand_0(eMode, fMode);
				}
				let expression = null, mark = null, first = null;
				while(true) {
					let __ks_0 = this.__ks_func_matchM_0(M.OPERAND_JUNCTION);
					if(__ks_0 === Token.ASTERISK_ASTERISK_LEFT_ROUND) {
						this.__ks_func_commit_0();
						value = this.yep(AST.CallExpression.__ks_0([], AST.Scope.__ks_0(ScopeKind.Null), value, this.__ks_func_reqExpression0CNList_0(fMode), value, this.__ks_func_yes_0()));
					}
					else if(__ks_0 === Token.ASTERISK_DOLLAR_LEFT_ROUND) {
						this.__ks_func_commit_0();
						const __ks_arguments_1 = this.__ks_func_reqExpression0CNList_0(fMode);
						value = this.yep(AST.CallExpression.__ks_0([], AST.Scope(ScopeKind.Argument, __ks_arguments_1.value.shift()), value, __ks_arguments_1, value, this.__ks_func_yes_0()));
					}
					else if(__ks_0 === Token.CARET_AT_LEFT_ROUND) {
						this.__ks_func_commit_0();
						value = this.yep(AST.CurryExpression(AST.Scope.__ks_0(ScopeKind.This), value, this.__ks_func_reqExpression0CNList_0(fMode), value, this.__ks_func_yes_0()));
					}
					else if(__ks_0 === Token.CARET_CARET_LEFT_ROUND) {
						this.__ks_func_commit_0();
						value = this.yep(AST.CurryExpression(AST.Scope.__ks_0(ScopeKind.Null), value, this.__ks_func_reqExpression0CNList_0(fMode), value, this.__ks_func_yes_0()));
					}
					else if(__ks_0 === Token.CARET_DOLLAR_LEFT_ROUND) {
						this.__ks_func_commit_0();
						const __ks_arguments_1 = this.__ks_func_reqExpression0CNList_0(fMode);
						value = this.yep(AST.CurryExpression(AST.Scope(ScopeKind.Argument, __ks_arguments_1.value.shift()), value, __ks_arguments_1, value, this.__ks_func_yes_0()));
					}
					else if(__ks_0 === Token.COLON) {
						first = this.__ks_func_yes_0();
						expression = this.__ks_func_reqIdentifier_0();
						value = this.yep(AST.BinaryExpression.__ks_1(value, this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.TypeCasting, first)), this.yep(AST.TypeReference.__ks_0(expression)), value, expression));
					}
					else if(__ks_0 === Token.COLON_COLON) {
						this.__ks_func_commit_0();
						expression = this.__ks_func_reqIdentifier_0();
						value = this.yep(AST.EnumExpression.__ks_0(value, expression));
					}
					else if(__ks_0 === Token.COLON_EXCLAMATION) {
						first = this.__ks_func_yes_0();
						const operator = this.yep(AST.BinaryOperator.__ks_1([AST.Modifier.__ks_0(ModifierKind.Forced, first)], BinaryOperatorKind.TypeCasting, first));
						expression = this.__ks_func_reqIdentifier_0();
						value = this.yep(AST.BinaryExpression.__ks_1(value, operator, this.yep(AST.TypeReference.__ks_0(expression)), value, expression));
					}
					else if(__ks_0 === Token.COLON_QUESTION) {
						first = this.__ks_func_yes_0();
						const operator = this.yep(AST.BinaryOperator.__ks_1([AST.Modifier.__ks_0(ModifierKind.Nullable, first)], BinaryOperatorKind.TypeCasting, first));
						expression = this.__ks_func_reqIdentifier_0();
						value = this.yep(AST.BinaryExpression.__ks_1(value, operator, this.yep(AST.TypeReference.__ks_0(expression)), value, expression));
					}
					else if(__ks_0 === Token.DOT) {
						this.__ks_func_commit_0();
						value = this.yep(AST.MemberExpression.__ks_0([], value, this.__ks_func_reqNumeralIdentifier_0()));
					}
					else if(__ks_0 === Token.EXCLAMATION_LEFT_ROUND) {
						this.__ks_func_commit_0();
						value = this.yep(AST.CallMacroExpression.__ks_0(value, this.__ks_func_reqExpression0CNList_0(fMode), value, this.__ks_func_yes_0()));
					}
					else if(__ks_0 === Token.LEFT_SQUARE) {
						const modifiers = [AST.Modifier.__ks_0(ModifierKind.Computed, this.__ks_func_yes_0())];
						expression = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
						if(!this.__ks_func_test_0(Token.RIGHT_SQUARE)) {
							this.__ks_func_throw_1("]");
						}
						value = this.yep(AST.MemberExpression.__ks_0(modifiers, value, expression, value, this.__ks_func_yes_0()));
					}
					else if(__ks_0 === Token.LEFT_ROUND) {
						this.__ks_func_commit_0();
						value = this.yep(AST.CallExpression.__ks_0([], void 0, value, this.__ks_func_reqExpression0CNList_0(fMode), value, this.__ks_func_yes_0()));
					}
					else if(__ks_0 === Token.NEWLINE) {
						mark = this.__ks_func_mark_0();
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
						if(this.__ks_func_test_0(Token.DOT)) {
							this.__ks_func_commit_0();
							value = this.yep(AST.MemberExpression.__ks_0([], value, this.__ks_func_reqIdentifier_0()));
						}
						else {
							this.__ks_func_rollback_0(mark);
							break;
						}
					}
					else if(__ks_0 === Token.QUESTION_DOT) {
						const modifiers = [AST.Modifier.__ks_0(ModifierKind.Nullable, this.__ks_func_yes_0())];
						expression = this.__ks_func_reqIdentifier_0();
						value = this.yep(AST.MemberExpression.__ks_0(modifiers, value, expression, value, expression));
					}
					else if(__ks_0 === Token.QUESTION_LEFT_ROUND) {
						const modifiers = [AST.Modifier.__ks_0(ModifierKind.Nullable, this.__ks_func_yes_0())];
						value = this.yep(AST.CallExpression.__ks_0(modifiers, AST.Scope.__ks_0(ScopeKind.This), value, this.__ks_func_reqExpression0CNList_0(fMode), value, this.__ks_func_yes_0()));
					}
					else if(__ks_0 === Token.QUESTION_LEFT_SQUARE) {
						const position = this.__ks_func_yes_0();
						const modifiers = [AST.Modifier.__ks_0(ModifierKind.Nullable, position), AST.Modifier.__ks_0(ModifierKind.Computed, position)];
						expression = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
						if(!this.__ks_func_test_0(Token.RIGHT_SQUARE)) {
							this.__ks_func_throw_1("]");
						}
						value = this.yep(AST.MemberExpression.__ks_0(modifiers, value, expression, value, this.__ks_func_yes_0()));
					}
					else if(__ks_0 === Token.TEMPLATE_BEGIN) {
						value = this.yep(AST.TaggedTemplateExpression.__ks_0(value, this.__ks_func_reqTemplateExpression_0(this.__ks_func_yes_0(), fMode), value, this.__ks_func_yes_0()));
					}
					else {
						break;
					}
				}
				return value;
			}
			__ks_func_reqUnaryOperand_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event) || KSType.isNull(value);
				const t1 = value => KSType.isEnumInstance(value, ExpressionMode);
				const t2 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 3) {
					if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
						return proto.__ks_func_reqUnaryOperand_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqUnlessStatement() {
				return this.__ks_func_reqUnlessStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqUnlessStatement_0(first, fMode) {
				const condition = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				const whenFalse = this.__ks_func_reqBlock_0(NO, fMode);
				return this.yep(AST.UnlessStatement.__ks_0(condition, whenFalse, first, whenFalse));
			}
			__ks_func_reqUnlessStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqUnlessStatement_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqVarStatement() {
				return this.__ks_func_reqVarStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_reqVarStatement_0(first, eMode, fMode) {
				const mark = this.__ks_func_mark_0();
				const modifiers = [];
				const variables = [];
				let immutable = false;
				let lateinit = false;
				if(this.__ks_func_match_0([Token.DYN, Token.LATE, Token.MUT]) === Token.INVALID) {
					immutable = true;
					if(this.__ks_func_test_1([Token.LEFT_CURLY, Token.LEFT_SQUARE, Token.IDENTIFIER])) {
						variables.push(this.__ks_func_reqTypedVariable_0(fMode));
					}
					else {
						return NO;
					}
				}
				else {
					let modifier = null;
					if(this._token === Token.DYN) {
						modifier = AST.Modifier.__ks_0(ModifierKind.Dynamic, this.__ks_func_yes_0());
					}
					else if(this._token === Token.LATE) {
						modifier = AST.Modifier.__ks_0(ModifierKind.LateInit, this.__ks_func_yes_0());
						lateinit = true;
					}
					else if(this._token === Token.MUT) {
						modifier = AST.Modifier.__ks_0(ModifierKind.Mutable, this.__ks_func_yes_0());
					}
					if(this.__ks_func_test_1([Token.COLON, Token.EQUALS, Token.NEWLINE])) {
						this.__ks_func_rollback_0(mark);
					}
					else {
						modifiers.push(modifier);
					}
					variables.push(this.__ks_func_reqTypedVariable_0(fMode));
				}
				if(this.__ks_func_test_0(Token.COMMA)) {
					do {
						this.__ks_func_commit_0();
						variables.push(this.__ks_func_reqTypedVariable_0(fMode));
					}
					while(this.__ks_func_test_0(Token.COMMA))
				}
				if(this.__ks_func_test_0(Token.EQUALS)) {
					if(lateinit) {
						this.__ks_func_throw_2([":", ",", "NewLine"]);
					}
					this.__ks_func_commit_0().__ks_func_NL_0M_0();
					let init = null;
					if(variables.length === 1) {
						init = this.__ks_func_reqExpression_0(eMode, fMode);
					}
					else {
						if(!this.__ks_func_test_0(Token.AWAIT)) {
							this.__ks_func_throw_1("await");
						}
						this.__ks_func_commit_0();
						const operand = this.__ks_func_reqPrefixedOperand_0(eMode, fMode);
						init = this.yep(AST.AwaitExpression([], variables, operand, variables[0], operand));
					}
					if(this.__ks_func_match_0([Token.IF, Token.UNLESS]) === Token.IF) {
						const first = this.__ks_func_yes_0();
						const condition = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
						if(this.__ks_func_test_0(Token.ELSE)) {
							this.__ks_func_commit_0();
							const whenFalse = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
							init = this.yep(AST.IfExpression.__ks_0(condition, init, whenFalse, init, whenFalse));
						}
						else {
							init = this.yep(AST.IfExpression.__ks_0(condition, init, null, init, condition));
						}
					}
					else if(this._token === Token.UNLESS) {
						this.__ks_func_commit_0();
						const condition = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
						init = this.yep(AST.UnlessExpression.__ks_0(condition, init, init, condition));
					}
					return this.yep(AST.VariableDeclaration.__ks_0(modifiers, variables, init, first, init));
				}
				else {
					if(immutable) {
						this.__ks_func_throw_1("=");
					}
					return this.yep(AST.VariableDeclaration(modifiers, variables, null, first, variables[variables.length - 1]));
				}
			}
			__ks_func_reqVarStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, ExpressionMode);
				const t2 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 3) {
					if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
						return proto.__ks_func_reqVarStatement_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqVariable() {
				return this.__ks_func_reqVariable_rt.call(null, this, this, arguments);
			}
			__ks_func_reqVariable_0() {
				const name = this.__ks_func_reqIdentifier_0();
				return this.yep(AST.VariableDeclarator.__ks_0([], name, null, name, name));
			}
			__ks_func_reqVariable_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_reqVariable_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			reqVariableIdentifier() {
				return this.__ks_func_reqVariableIdentifier_rt.call(null, this, this, arguments);
			}
			__ks_func_reqVariableIdentifier_0(fMode) {
				if(this.__ks_func_match_0([Token.IDENTIFIER, Token.LEFT_CURLY, Token.LEFT_SQUARE]) === Token.IDENTIFIER) {
					return this.yep(AST.Identifier.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0()));
				}
				else if(this._token === Token.LEFT_CURLY) {
					return this.__ks_func_reqDestructuringObject_0(this.__ks_func_yes_0(), DestructuringMode.Expression, fMode);
				}
				else if(this._token === Token.LEFT_SQUARE) {
					return this.__ks_func_reqDestructuringArray_0(this.__ks_func_yes_0(), DestructuringMode.Expression, fMode);
				}
				else {
					this.__ks_func_throw_2(["Identifier", "{", "["]);
				}
			}
			__ks_func_reqVariableIdentifier_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_reqVariableIdentifier_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			reqVariableName() {
				return this.__ks_func_reqVariableName_rt.call(null, this, this, arguments);
			}
			__ks_func_reqVariableName_0(object, fMode) {
				if(!object.ok) {
					if((fMode === FunctionMode.Method) && this.__ks_func_test_0(Token.AT)) {
						object = this.__ks_func_reqThisExpression_0(this.__ks_func_yes_0());
					}
					else {
						object = this.__ks_func_reqIdentifier_0();
					}
				}
				let property = null;
				while(true) {
					if(this.__ks_func_match_0([Token.DOT, Token.LEFT_SQUARE]) === Token.DOT) {
						this.__ks_func_commit_0();
						property = this.__ks_func_reqIdentifier_0();
						object = this.yep(AST.MemberExpression.__ks_0([], object, property));
					}
					else if(this._token === Token.LEFT_SQUARE) {
						const modifiers = [AST.Modifier.__ks_0(ModifierKind.Computed, this.__ks_func_yes_0())];
						property = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
						if(!this.__ks_func_test_0(Token.RIGHT_SQUARE)) {
							this.__ks_func_throw_1("]");
						}
						object = this.yep(AST.MemberExpression.__ks_0(modifiers, object, property, object, this.__ks_func_yes_0()));
					}
					else {
						break;
					}
				}
				return object;
			}
			__ks_func_reqVariableName_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_reqVariableName_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			stackInlineAttributes() {
				return this.__ks_func_stackInlineAttributes_rt.call(null, this, this, arguments);
			}
			__ks_func_stackInlineAttributes_0(attributes) {
				while(this.__ks_func_test_0(Token.HASH_LEFT_SQUARE)) {
					attributes.push(this.__ks_func_reqAttribute_0(this.__ks_func_yes_0(), false));
				}
				return attributes;
			}
			__ks_func_stackInlineAttributes_rt(that, proto, args) {
				const t0 = KSType.isArray;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_stackInlineAttributes_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			stackInnerAttributes() {
				return this.__ks_func_stackInnerAttributes_rt.call(null, this, this, arguments);
			}
			__ks_func_stackInnerAttributes_0(attributes) {
				if(this.__ks_func_test_0(Token.HASH_EXCLAMATION_LEFT_SQUARE)) {
					do {
						const first = this.__ks_func_yes_0();
						const declaration = this.__ks_func_reqAttributeMember_0();
						if(!this.__ks_func_test_0(Token.RIGHT_SQUARE)) {
							this.__ks_func_throw_1("]");
						}
						attributes.push(this.yep(AST.AttributeDeclaration.__ks_0(declaration, first, this.__ks_func_yes_0())));
						this.__ks_func_reqNL_EOF_1M_0();
					}
					while(this.__ks_func_test_0(Token.HASH_EXCLAMATION_LEFT_SQUARE))
					return true;
				}
				else {
					return false;
				}
			}
			__ks_func_stackInnerAttributes_rt(that, proto, args) {
				const t0 = KSType.isArray;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_stackInnerAttributes_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			stackOuterAttributes() {
				return this.__ks_func_stackOuterAttributes_rt.call(null, this, this, arguments);
			}
			__ks_func_stackOuterAttributes_0(attributes) {
				while(this.__ks_func_test_0(Token.HASH_LEFT_SQUARE)) {
					attributes.push(this.__ks_func_reqAttribute_0(this.__ks_func_yes_0(), true));
					this.__ks_func_NL_0M_0();
				}
				return attributes;
			}
			__ks_func_stackOuterAttributes_rt(that, proto, args) {
				const t0 = KSType.isArray;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_stackOuterAttributes_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			submitEnumMember() {
				return this.__ks_func_submitEnumMember_rt.call(null, this, this, arguments);
			}
			__ks_func_submitEnumMember_0(attributes, modifiers, identifier, token, members) {
				if(token === void 0) {
					token = null;
				}
				const first = KSType.isValue(attributes[0]) ? attributes[0] : KSType.isValue(modifiers[0]) ? modifiers[0] : identifier;
				let __ks_0 = KSType.isValue(token) ? token : this.__ks_func_match_0([Token.EQUALS, Token.LEFT_ROUND]);
				if(__ks_0 === Token.EQUALS) {
					if((this._mode & ParserMode.Typing) !== 0n) {
						this.__ks_func_throw_0();
					}
					this.__ks_func_commit_0();
					const value = this.__ks_func_reqExpression_0(ExpressionMode.Default, FunctionMode.Function);
					members.push(AST.FieldDeclaration.__ks_0(attributes, modifiers, identifier, null, value, first, value));
					this.__ks_func_reqNL_1M_0();
				}
				else if(__ks_0 === Token.LEFT_ROUND) {
					members.push(this.__ks_func_reqEnumMethod_1(attributes, modifiers, identifier, first).value);
				}
				else if(token === null) {
					members.push(AST.FieldDeclaration.__ks_0(attributes, modifiers, identifier, null, null, first, identifier));
					this.__ks_func_reqNL_1M_0();
				}
			}
			__ks_func_submitEnumMember_rt(that, proto, args) {
				const t0 = KSType.isArray;
				const t1 = value => KSType.isStructInstance(value, Event);
				const t2 = value => KSType.isEnumInstance(value, Token) || KSType.isNull(value);
				if(args.length === 5) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3]) && t0(args[4])) {
						return proto.__ks_func_submitEnumMember_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryAccessModifier() {
				return this.__ks_func_tryAccessModifier_rt.call(null, this, this, arguments);
			}
			__ks_func_tryAccessModifier_0() {
				if(this.__ks_func_match_0([Token.PRIVATE, Token.PROTECTED, Token.PUBLIC, Token.INTERNAL]) === Token.PRIVATE) {
					return this.yep(AST.Modifier.__ks_0(ModifierKind.Private, this.__ks_func_yes_0()));
				}
				else if(this._token === Token.PROTECTED) {
					return this.yep(AST.Modifier.__ks_0(ModifierKind.Protected, this.__ks_func_yes_0()));
				}
				else if(this._token === Token.PUBLIC) {
					return this.yep(AST.Modifier.__ks_0(ModifierKind.Public, this.__ks_func_yes_0()));
				}
				else if(this._token === Token.INTERNAL) {
					return this.yep(AST.Modifier.__ks_0(ModifierKind.Internal, this.__ks_func_yes_0()));
				}
				return NO;
			}
			__ks_func_tryAccessModifier_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_tryAccessModifier_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			tryAssignementOperator() {
				return this.__ks_func_tryAssignementOperator_rt.call(null, this, this, arguments);
			}
			__ks_func_tryAssignementOperator_0() {
				let __ks_0 = this.__ks_func_matchM_0(M.ASSIGNEMENT_OPERATOR);
				if(__ks_0 === Token.AMPERSAND_AMPERSAND_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.BitwiseAnd, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.ASTERISK_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.Multiplication, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.CARET_CARET_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.BitwiseXor, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.Equality, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.EXCLAMATION_QUESTION_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.NonExistential, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.LEFT_ANGLE_LEFT_ANGLE_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.BitwiseLeftShift, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.MINUS_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.Subtraction, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.PERCENT_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.Modulo, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.PIPE_PIPE_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.BitwiseOr, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.PLUS_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.Addition, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.QUESTION_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.Existential, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.QUESTION_QUESTION_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.NullCoalescing, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.RIGHT_ANGLE_RIGHT_ANGLE_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.BitwiseRightShift, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.SLASH_DOT_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.Quotient, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.SLASH_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.Division, this.__ks_func_yes_0()));
				}
				else {
					return NO;
				}
			}
			__ks_func_tryAssignementOperator_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_tryAssignementOperator_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			tryAssignementStatement() {
				return this.__ks_func_tryAssignementStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_tryAssignementStatement_0(fMode) {
				let identifier = NO;
				if(this.__ks_func_match_0([Token.IDENTIFIER, Token.LEFT_CURLY, Token.LEFT_SQUARE, Token.AT]) === Token.IDENTIFIER) {
					identifier = this.__ks_func_reqUnaryOperand_0(this.__ks_func_reqIdentifier_0(), ExpressionMode.Default, fMode);
				}
				else if(this._token === Token.LEFT_CURLY) {
					identifier = this.__ks_func_tryDestructuringObject_0(this.__ks_func_yes_0(), fMode);
				}
				else if(this._token === Token.LEFT_SQUARE) {
					identifier = this.__ks_func_tryDestructuringArray_0(this.__ks_func_yes_0(), fMode);
				}
				else if((fMode === FunctionMode.Method) && (this._token === Token.AT)) {
					identifier = this.__ks_func_reqUnaryOperand_0(this.__ks_func_reqThisExpression_0(this.__ks_func_yes_0()), ExpressionMode.Default, fMode);
				}
				if(!identifier.ok) {
					return NO;
				}
				let statement = null;
				if(this.__ks_func_match_0([Token.COMMA, Token.EQUALS]) === Token.COMMA) {
					if(!((KSHelper.valueOf(identifier.value.kind) === NodeKind.Identifier.value) || (KSHelper.valueOf(identifier.value.kind) === NodeKind.ArrayBinding.value) || (KSHelper.valueOf(identifier.value.kind) === NodeKind.ObjectBinding.value))) {
						return NO;
					}
					const variables = [identifier];
					do {
						this.__ks_func_commit_0();
						variables.push(this.__ks_func_reqVariableIdentifier_0(fMode));
					}
					while(this.__ks_func_test_0(Token.COMMA))
					if(this.__ks_func_test_0(Token.EQUALS)) {
						this.__ks_func_commit_0().__ks_func_NL_0M_0();
						if(!this.__ks_func_test_0(Token.AWAIT)) {
							this.__ks_func_throw_1("await");
						}
						const operand = this.__ks_func_reqPrefixedOperand_0(ExpressionMode.Default, fMode);
						statement = this.yep(AST.AwaitExpression.__ks_0([], variables, operand, identifier, operand));
					}
					else {
						this.__ks_func_throw_1("=");
					}
				}
				else if(this._token === Token.EQUALS) {
					const equals = this.__ks_func_yes_0();
					this.__ks_func_NL_0M_0();
					const expression = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
					statement = this.yep(AST.BinaryExpression.__ks_1(identifier, this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.Equality, equals)), expression, identifier, expression));
				}
				else {
					return NO;
				}
				if(this.__ks_func_match_0([Token.IF, Token.UNLESS]) === Token.IF) {
					const first = this.__ks_func_yes_0();
					const condition = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
					if(this.__ks_func_test_0(Token.ELSE)) {
						this.__ks_func_commit_0();
						const whenFalse = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
						statement.value.right = AST.IfExpression.__ks_0(condition, this.yep(statement.value.right), whenFalse, first, whenFalse);
						this.__ks_func_relocate_0(statement, statement, whenFalse);
					}
					else {
						statement = this.yep(AST.IfExpression.__ks_0(condition, statement, null, statement, condition));
					}
				}
				else if(this._token === Token.UNLESS) {
					this.__ks_func_commit_0();
					const condition = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
					statement = this.yep(AST.UnlessExpression.__ks_0(condition, statement, statement, condition));
				}
				return this.yep(AST.ExpressionStatement.__ks_0(statement));
			}
			__ks_func_tryAssignementStatement_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_tryAssignementStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryAwaitExpression() {
				return this.__ks_func_tryAwaitExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_tryAwaitExpression_0(eMode, fMode) {
				if(!this.__ks_func_test_0(Token.AWAIT)) {
					return NO;
				}
				try {
					return this.__ks_func_reqAwaitExpression_0(this.__ks_func_yes_0(), fMode);
				}
				catch(__ks_0) {
					return NO;
				}
			}
			__ks_func_tryAwaitExpression_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, ExpressionMode);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_tryAwaitExpression_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryBinaryOperator() {
				return this.__ks_func_tryBinaryOperator_rt.call(null, this, this, arguments);
			}
			__ks_func_tryBinaryOperator_0() {
				let __ks_0 = this.__ks_func_matchM_0(M.BINARY_OPERATOR);
				if(__ks_0 === Token.AMPERSAND_AMPERSAND) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.And, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.AMPERSAND_AMPERSAND_AMPERSAND) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.BitwiseAnd, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.AMPERSAND_AMPERSAND_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.BitwiseAnd, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.ASTERISK) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.Multiplication, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.ASTERISK_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.Multiplication, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.CARET_CARET) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.Xor, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.CARET_CARET_CARET) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.BitwiseXor, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.CARET_CARET_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.BitwiseXor, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.Equality, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.EQUALS_EQUALS) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.Equality, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.EXCLAMATION_EQUALS) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.Inequality, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.EXCLAMATION_TILDE) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.Mismatch, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.EXCLAMATION_QUESTION_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.NonExistential, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.LEFT_ANGLE) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.LessThan, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.LEFT_ANGLE_EQUALS) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.LessThanOrEqual, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.LEFT_ANGLE_LEFT_ANGLE_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.BitwiseLeftShift, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.LEFT_ANGLE_LEFT_ANGLE_LEFT_ANGLE) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.BitwiseLeftShift, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.MINUS) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.Subtraction, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.MINUS_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.Subtraction, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.MINUS_RIGHT_ANGLE) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.Imply, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.PERCENT) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.Modulo, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.PERCENT_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.Modulo, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.PIPE_PIPE) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.Or, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.PIPE_PIPE_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.BitwiseOr, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.PIPE_PIPE_PIPE) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.BitwiseOr, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.PLUS) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.Addition, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.PLUS_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.Addition, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.QUESTION_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.Existential, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.QUESTION_QUESTION) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.NullCoalescing, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.QUESTION_QUESTION_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.NullCoalescing, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.RIGHT_ANGLE) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.GreaterThan, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.RIGHT_ANGLE_EQUALS) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.GreaterThanOrEqual, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.RIGHT_ANGLE_RIGHT_ANGLE_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.BitwiseRightShift, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.RIGHT_ANGLE_RIGHT_ANGLE_RIGHT_ANGLE) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.BitwiseRightShift, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.SLASH) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.Division, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.SLASH_DOT) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.Quotient, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.SLASH_DOT_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.Quotient, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.SLASH_EQUALS) {
					return this.yep(AST.AssignmentOperator.__ks_0(AssignmentOperatorKind.Division, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.TILDE_TILDE) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.Match, this.__ks_func_yes_0()));
				}
				else {
					return NO;
				}
			}
			__ks_func_tryBinaryOperator_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_tryBinaryOperator_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			tryBlock() {
				return this.__ks_func_tryBlock_rt.call(null, this, this, arguments);
			}
			__ks_func_tryBlock_0(fMode) {
				try {
					return this.__ks_func_reqBlock_0(NO, fMode);
				}
				catch(__ks_0) {
					return NO;
				}
			}
			__ks_func_tryBlock_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_tryBlock_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryClassMember() {
				return this.__ks_func_tryClassMember_rt.call(null, this, this, arguments);
			}
			__ks_func_tryClassMember_0(attributes, modifiers, staticModifier, staticMark, finalModifier, finalMark, first) {
				if(staticModifier === void 0) {
					staticModifier = null;
				}
				if(finalModifier === void 0) {
					finalModifier = null;
				}
				if(first === void 0) {
					first = null;
				}
				if(staticModifier.ok) {
					if(finalModifier.ok) {
						const member = this.__ks_func_tryClassMember_1(attributes, [...modifiers, staticModifier, finalModifier], ClassBits(ClassBits.Variable | ClassBits.LateVariable | ClassBits.Property | ClassBits.Method), KSType.isValue(first) ? first : staticModifier);
						if(member.ok) {
							return member;
						}
						this.__ks_func_rollback_0(finalMark);
					}
					const member = this.__ks_func_tryClassMember_1(attributes, [...modifiers, staticModifier], ClassBits(ClassBits.Variable | ClassBits.FinalVariable | ClassBits.LateVariable | ClassBits.Property | ClassBits.Method | ClassBits.FinalMethod), KSType.isValue(first) ? first : staticModifier);
					if(member.ok) {
						return member;
					}
					this.__ks_func_rollback_0(staticMark);
				}
				else if(finalModifier.ok) {
					const member = this.__ks_func_tryClassMember_1(attributes, [...modifiers, finalModifier], ClassBits(ClassBits.Variable | ClassBits.RequiredAssignment | ClassBits.Property | ClassBits.Method), KSType.isValue(first) ? first : finalModifier);
					if(member.ok) {
						return member;
					}
					this.__ks_func_rollback_0(finalMark);
				}
				return this.__ks_func_tryClassMember_1(attributes, [...modifiers], ClassBits(ClassBits.Variable | ClassBits.FinalVariable | ClassBits.LateVariable | ClassBits.Property | ClassBits.Method | ClassBits.OverrideMethod | ClassBits.AbstractMethod), first);
			}
			__ks_func_tryClassMember_1(attributes, modifiers, bits, first) {
				if(first === void 0) {
					first = null;
				}
				const mark = this.__ks_func_mark_0();
				if((bits & ClassBits.Attribute) !== 0n) {
					const attrs = this.__ks_func_stackOuterAttributes_0([]);
					if(attrs.length !== 0) {
						attributes = [...attributes, ...attrs];
						if(!KSType.isValue(first)) {
							first = attrs[0];
						}
					}
				}
				if((bits & ClassBits.Method) !== 0n) {
					const mark = this.__ks_func_mark_0();
					if(((bits & ClassBits.AbstractMethod) !== 0n) && this.__ks_func_test_0(Token.ABSTRACT)) {
						const modifier = this.yep(AST.Modifier.__ks_0(ModifierKind.Abstract, this.__ks_func_yes_0()));
						const method = this.__ks_func_tryClassMethod_0(attributes, [...modifiers, modifier], ClassBits(bits | ClassBits.NoBody), KSType.isValue(first) ? first : modifier);
						if(method.ok) {
							return method;
						}
						this.__ks_func_rollback_0(mark);
					}
					else if(((bits & ClassBits.FinalMethod) !== 0n) && this.__ks_func_test_0(Token.FINAL)) {
						const modifier = this.yep(AST.Modifier.__ks_0(ModifierKind.Immutable, this.__ks_func_yes_0()));
						const mark2 = this.__ks_func_mark_0();
						if(((bits & ClassBits.OverrideMethod) !== 0n) && this.__ks_func_test_0(Token.OVERRIDE)) {
							const modifier2 = this.yep(AST.Modifier.__ks_0(ModifierKind.Override, this.__ks_func_yes_0()));
							const method = this.__ks_func_tryClassMethod_0(attributes, [...modifiers, modifier, modifier2], bits, KSType.isValue(first) ? first : modifier);
							if(method.ok) {
								return method;
							}
							if((bits & ClassBits.OverrideProperty) !== 0n) {
								const property = this.__ks_func_tryClassProperty_0(attributes, [...modifiers, modifier, modifier2], bits, KSType.isValue(first) ? first : modifier);
								if(property.ok) {
									return property;
								}
							}
							this.__ks_func_rollback_0(mark2);
						}
						else if(((bits & ClassBits.OverwriteMethod) !== 0n) && this.__ks_func_test_0(Token.OVERWRITE)) {
							const modifier2 = this.yep(AST.Modifier.__ks_0(ModifierKind.Overwrite, this.__ks_func_yes_0()));
							const method = this.__ks_func_tryClassMethod_0(attributes, [...modifiers, modifier, modifier2], bits, KSType.isValue(first) ? first : modifier);
							if(method.ok) {
								return method;
							}
							this.__ks_func_rollback_0(mark2);
						}
						const method = this.__ks_func_tryClassMethod_0(attributes, [...modifiers, modifier], bits, KSType.isValue(first) ? first : modifier);
						if(method.ok) {
							return method;
						}
						this.__ks_func_rollback_0(mark);
					}
					else if(((bits & ClassBits.OverrideMethod) !== 0n) && this.__ks_func_test_0(Token.OVERRIDE)) {
						const modifier = this.yep(AST.Modifier.__ks_0(ModifierKind.Override, this.__ks_func_yes_0()));
						const method = this.__ks_func_tryClassMethod_0(attributes, [...modifiers, modifier], bits, KSType.isValue(first) ? first : modifier);
						if(method.ok) {
							return method;
						}
						if((bits & ClassBits.OverrideProperty) !== 0n) {
							const property = this.__ks_func_tryClassProperty_0(attributes, [...modifiers, modifier], bits, KSType.isValue(first) ? first : modifier);
							if(property.ok) {
								return property;
							}
						}
						this.__ks_func_rollback_0(mark);
					}
					else if(((bits & ClassBits.OverwriteMethod) !== 0n) && this.__ks_func_test_0(Token.OVERWRITE)) {
					}
					const method = this.__ks_func_tryClassMethod_0(attributes, modifiers, bits, first);
					if(method.ok) {
						return method;
					}
					this.__ks_func_rollback_0(mark);
				}
				if((bits & ClassBits.Property) !== 0n) {
					const mark = this.__ks_func_mark_0();
					if(((bits & ClassBits.OverrideProperty) !== 0n) && this.__ks_func_test_0(Token.OVERRIDE)) {
						const modifier = this.yep(AST.Modifier.__ks_0(ModifierKind.Override, this.__ks_func_yes_0()));
						const property = this.__ks_func_tryClassProperty_0(attributes, [...modifiers, modifier], bits, KSType.isValue(first) ? first : modifier);
						if(property.ok) {
							return property;
						}
						this.__ks_func_rollback_0(mark);
					}
					const property = this.__ks_func_tryClassProperty_0(attributes, modifiers, bits, first);
					if(property.ok) {
						return property;
					}
					this.__ks_func_rollback_0(mark);
				}
				if((bits & ClassBits.Variable) !== 0n) {
					const mark = this.__ks_func_mark_0();
					if(((bits & ClassBits.FinalVariable) !== 0n) && this.__ks_func_test_0(Token.FINAL)) {
						const modifier = this.yep(AST.Modifier.__ks_0(ModifierKind.Immutable, this.__ks_func_yes_0()));
						const mark2 = this.__ks_func_mark_0();
						if(((bits & ClassBits.LateVariable) !== 0n) && this.__ks_func_test_0(Token.LATE)) {
							const modifier2 = this.yep(AST.Modifier.__ks_0(ModifierKind.LateInit, this.__ks_func_yes_0()));
							const method = this.__ks_func_tryClassVariable_0(attributes, [...modifiers, modifier, modifier2], ClassBits(bits & ~ClassBits.RequiredAssignment), null, null, KSType.isValue(first) ? first : modifier);
							if(method.ok) {
								return method;
							}
							this.__ks_func_rollback_0(mark2);
						}
						const variable = this.__ks_func_tryClassVariable_0(attributes, [...modifiers, modifier], ClassBits(bits | ClassBits.RequiredAssignment), null, null, KSType.isValue(first) ? first : modifier);
						if(variable.ok) {
							return variable;
						}
						this.__ks_func_rollback_0(mark);
					}
					else if(((bits & ClassBits.LateVariable) !== 0n) && this.__ks_func_test_0(Token.LATE)) {
						const modifier = this.yep(AST.Modifier.__ks_0(ModifierKind.LateInit, this.__ks_func_yes_0()));
						const method = this.__ks_func_tryClassVariable_0(attributes, [...modifiers, modifier], ClassBits(bits & ~ClassBits.RequiredAssignment), null, null, KSType.isValue(first) ? first : modifier);
						if(method.ok) {
							return method;
						}
						this.__ks_func_rollback_0(mark);
					}
					const variable = this.__ks_func_tryClassVariable_0(attributes, modifiers, bits, null, null, first);
					if(variable.ok) {
						return variable;
					}
				}
				this.__ks_func_rollback_0(mark);
				return NO;
			}
			__ks_func_tryClassMember_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isEnumInstance(value, ClassBits);
				const t2 = value => KSType.isStructInstance(value, Event) || KSType.isNull(value);
				const t3 = value => KSType.isStructInstance(value, Marker);
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3])) {
						return proto.__ks_func_tryClassMember_1.call(that, args[0], args[1], args[2], args[3]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 7) {
					if(t0(args[0]) && t0(args[1]) && t2(args[2]) && t3(args[3]) && t2(args[4]) && t3(args[5]) && t2(args[6])) {
						return proto.__ks_func_tryClassMember_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryClassMethod() {
				return this.__ks_func_tryClassMethod_rt.call(null, this, this, arguments);
			}
			__ks_func_tryClassMethod_0(attributes, modifiers, bits, first) {
				if(first === void 0) {
					first = null;
				}
				let name = null;
				if(this.__ks_func_test_0(Token.ASYNC)) {
					let modifier = this.__ks_func_reqIdentifier_0();
					name = this.__ks_func_tryIdentifier_0();
					if(name.ok) {
						modifiers = [...modifiers, this.yep(AST.Modifier.__ks_0(ModifierKind.Async, modifier))];
						first = modifier;
					}
					else {
						name = modifier;
					}
				}
				else {
					name = this.__ks_func_tryIdentifier_0();
					if(!name.ok) {
						return NO;
					}
				}
				if(this.__ks_func_test_0(Token.LEFT_ROUND)) {
					return this.__ks_func_reqClassMethod_0(attributes, modifiers, bits, name, null, KSType.isValue(first) ? first : name);
				}
				return NO;
			}
			__ks_func_tryClassMethod_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isEnumInstance(value, ClassBits);
				const t2 = value => KSType.isStructInstance(value, Event) || KSType.isNull(value);
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3])) {
						return proto.__ks_func_tryClassMethod_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryClassProperty() {
				return this.__ks_func_tryClassProperty_rt.call(null, this, this, arguments);
			}
			__ks_func_tryClassProperty_0(attributes, modifiers, bits, first) {
				if(first === void 0) {
					first = null;
				}
				const mark = this.__ks_func_mark_0();
				if(this.__ks_func_test_0(Token.AT)) {
					const modifier = this.yep(AST.Modifier.__ks_0(ModifierKind.ThisAlias, this.__ks_func_yes_0()));
					modifiers = [...modifiers, modifier];
					if(!KSType.isValue(first)) {
						first = modifier;
					}
				}
				const name = this.__ks_func_tryIdentifier_0();
				if(!name.ok) {
					this.__ks_func_rollback_0(mark);
					return NO;
				}
				let type = NO;
				if(this.__ks_func_test_0(Token.COLON)) {
					this.__ks_func_commit_0();
					type = this.__ks_func_reqTypeVar_0();
				}
				if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
					this.__ks_func_commit_0();
					return this.__ks_func_reqClassProperty_0(attributes, modifiers, name, type, KSType.isValue(first) ? first : name);
				}
				else if(type.ok && ((bits & ClassBits.Variable) !== 0n)) {
					return this.__ks_func_tryClassVariable_0(attributes, modifiers, bits, name, type, first);
				}
				return NO;
			}
			__ks_func_tryClassProperty_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isEnumInstance(value, ClassBits);
				const t2 = value => KSType.isStructInstance(value, Event) || KSType.isNull(value);
				if(args.length === 4) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3])) {
						return proto.__ks_func_tryClassProperty_0.call(that, args[0], args[1], args[2], args[3]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryClassStatement() {
				return this.__ks_func_tryClassStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_tryClassStatement_0(first, modifiers) {
				if(modifiers === void 0 || modifiers === null) {
					modifiers = [];
				}
				const name = this.__ks_func_tryIdentifier_0();
				if(!name.ok) {
					return NO;
				}
				return this.__ks_func_reqClassStatementBody_0(name, first, modifiers);
			}
			__ks_func_tryClassStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_tryClassStatement_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryClassVariable() {
				return this.__ks_func_tryClassVariable_rt.call(null, this, this, arguments);
			}
			__ks_func_tryClassVariable_0(attributes, modifiers, bits, name, type, first) {
				if(name === void 0) {
					name = null;
				}
				if(type === void 0) {
					type = null;
				}
				if(first === void 0) {
					first = null;
				}
				const mark = this.__ks_func_mark_0();
				if(!KSType.isValue(name)) {
					if(this.__ks_func_test_0(Token.AT)) {
						const modifier = this.yep(AST.Modifier.__ks_0(ModifierKind.ThisAlias, this.__ks_func_yes_0()));
						modifiers = [...modifiers, modifier];
						if(!KSType.isValue(first)) {
							first = modifier;
						}
					}
					name = this.__ks_func_tryIdentifier_0();
					if(!name.ok) {
						this.__ks_func_rollback_0(mark);
						return NO;
					}
				}
				if(!KSType.isValue(type)) {
					if(this.__ks_func_test_0(Token.COLON)) {
						this.__ks_func_commit_0();
						type = this.__ks_func_reqTypeVar_0();
					}
				}
				let value = null;
				if((bits & ClassBits.NoAssignment) !== 0n) {
				}
				else if(this.__ks_func_test_0(Token.EQUALS)) {
					this.__ks_func_commit_0();
					value = this.__ks_func_reqExpression_0(ExpressionMode.Default, FunctionMode.Method);
				}
				else if((bits & ClassBits.RequiredAssignment) !== 0n) {
					this.__ks_func_throw_1("=");
				}
				this.__ks_func_reqNL_1M_0();
				return this.yep(AST.FieldDeclaration.__ks_0(attributes, modifiers, name, type, value, KSType.isValue(first) ? first : name, KSType.isValue(value) ? value : KSType.isValue(type) ? type : name));
			}
			__ks_func_tryClassVariable_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isEnumInstance(value, ClassBits);
				const t2 = value => KSType.isStructInstance(value, Event) || KSType.isNull(value);
				if(args.length === 6) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3]) && t2(args[4]) && t2(args[5])) {
						return proto.__ks_func_tryClassVariable_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryCreateExpression() {
				return this.__ks_func_tryCreateExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_tryCreateExpression_0(first, fMode) {
				if(this.__ks_func_test_0(Token.LEFT_ROUND)) {
					this.__ks_func_commit_0();
					const __ks_class_1 = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
					if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
						this.__ks_func_throw_1(")");
					}
					this.__ks_func_commit_0();
					if(!this.__ks_func_test_0(Token.LEFT_ROUND)) {
						this.__ks_func_throw_1("(");
					}
					this.__ks_func_commit_0();
					return this.yep(AST.CreateExpression.__ks_0(__ks_class_1, this.__ks_func_reqExpression0CNList_0(fMode), first, this.__ks_func_yes_0()));
				}
				let __ks_class_1 = this.__ks_func_tryVariableName_0(fMode);
				if(!__ks_class_1.ok) {
					return NO;
				}
				if(this.__ks_func_match_0([Token.LEFT_ANGLE, Token.LEFT_SQUARE]) === Token.LEFT_ANGLE) {
					const generic = this.__ks_func_reqTypeGeneric_0(this.__ks_func_yes_0());
					__ks_class_1 = this.yep(AST.TypeReference.__ks_1([], __ks_class_1, generic, __ks_class_1, generic));
				}
				if(this.__ks_func_test_0(Token.LEFT_ROUND)) {
					this.__ks_func_commit_0();
					return this.yep(AST.CreateExpression.__ks_0(__ks_class_1, this.__ks_func_reqExpression0CNList_0(fMode), first, this.__ks_func_yes_0()));
				}
				else {
					return this.yep(AST.CreateExpression.__ks_0(__ks_class_1, this.__ks_func_yep_1([]), first, __ks_class_1));
				}
			}
			__ks_func_tryCreateExpression_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_tryCreateExpression_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryDestroyStatement() {
				return this.__ks_func_tryDestroyStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_tryDestroyStatement_0(first, fMode) {
				const variable = this.__ks_func_tryVariableName_0(fMode);
				if(variable.ok) {
					return this.yep(AST.DestroyStatement.__ks_0(variable, first, variable));
				}
				else {
					return NO;
				}
			}
			__ks_func_tryDestroyStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_tryDestroyStatement_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryDestructuring() {
				return this.__ks_func_tryDestructuring_rt.call(null, this, this, arguments);
			}
			__ks_func_tryDestructuring_0(fMode) {
				if(this.__ks_func_match_0([Token.LEFT_CURLY, Token.LEFT_SQUARE]) === Token.LEFT_CURLY) {
					try {
						return this.reqDestructuringObject(this.__ks_func_yes_0(), DestructuringMode.Expression, fMode);
					}
					catch(__ks_0) {
					}
				}
				else if(this._token === Token.LEFT_SQUARE) {
					try {
						return this.reqDestructuringArray(this.__ks_func_yes_0(), DestructuringMode.Expression, fMode);
					}
					catch(__ks_0) {
					}
				}
				return NO;
			}
			__ks_func_tryDestructuring_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_tryDestructuring_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryDestructuringArray() {
				return this.__ks_func_tryDestructuringArray_rt.call(null, this, this, arguments);
			}
			__ks_func_tryDestructuringArray_0(first, fMode) {
				let dMode = null;
				if(fMode === FunctionMode.Method) {
					dMode = DestructuringMode(DestructuringMode.Expression | DestructuringMode.THIS_ALIAS);
				}
				else {
					dMode = DestructuringMode.Expression;
				}
				try {
					return this.__ks_func_reqDestructuringArray_0(first, dMode, fMode);
				}
				catch(__ks_0) {
					return NO;
				}
			}
			__ks_func_tryDestructuringArray_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_tryDestructuringArray_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryDestructuringObject() {
				return this.__ks_func_tryDestructuringObject_rt.call(null, this, this, arguments);
			}
			__ks_func_tryDestructuringObject_0(first, fMode) {
				let dMode = null;
				if(fMode === FunctionMode.Method) {
					dMode = DestructuringMode(DestructuringMode.Expression | DestructuringMode.THIS_ALIAS);
				}
				else {
					dMode = DestructuringMode.Expression;
				}
				try {
					return this.__ks_func_reqDestructuringObject_0(first, dMode, fMode);
				}
				catch(__ks_0) {
					return NO;
				}
			}
			__ks_func_tryDestructuringObject_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_tryDestructuringObject_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryEnumMethod() {
				return this.__ks_func_tryEnumMethod_rt.call(null, this, this, arguments);
			}
			__ks_func_tryEnumMethod_0(attributes, modifiers, first) {
				if(first === void 0) {
					first = null;
				}
				let name = null;
				if(this.__ks_func_test_0(Token.ASYNC)) {
					let first = this.__ks_func_reqIdentifier_0();
					name = this.__ks_func_tryIdentifier_0();
					if(name.ok) {
						modifiers = [...modifiers, this.yep(AST.Modifier.__ks_0(ModifierKind.Async, first))];
					}
					else {
						name = first;
					}
				}
				else {
					name = this.__ks_func_tryIdentifier_0();
					if(!name.ok) {
						return NO;
					}
				}
				return this.__ks_func_reqEnumMethod_1(attributes, modifiers, name, KSType.isValue(first) ? first : name);
			}
			__ks_func_tryEnumMethod_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isStructInstance(value, Event) || KSType.isNull(value);
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
						return proto.__ks_func_tryEnumMethod_0.call(that, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryExpression() {
				return this.__ks_func_tryExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_tryExpression_0(eMode, fMode) {
				try {
					return this.__ks_func_reqExpression_0(eMode, fMode);
				}
				catch(__ks_0) {
					return NO;
				}
			}
			__ks_func_tryExpression_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, ExpressionMode);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_tryExpression_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryExternDeclarator() {
				return this.__ks_func_tryExternDeclarator_rt.call(null, this, this, arguments);
			}
			__ks_func_tryExternDeclarator_0(mode) {
				try {
					return this.__ks_func_reqExternDeclarator_0(mode);
				}
				catch(__ks_0) {
					return NO;
				}
			}
			__ks_func_tryExternDeclarator_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, ExternMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_tryExternDeclarator_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryExternFunctionDeclaration() {
				return this.__ks_func_tryExternFunctionDeclaration_rt.call(null, this, this, arguments);
			}
			__ks_func_tryExternFunctionDeclaration_0(modifiers, first) {
				try {
					return this.__ks_func_reqExternFunctionDeclaration_0(modifiers, first);
				}
				catch(__ks_0) {
					return NO;
				}
			}
			__ks_func_tryExternFunctionDeclaration_rt(that, proto, args) {
				const t0 = KSType.isValue;
				const t1 = value => KSType.isStructInstance(value, Event);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_tryExternFunctionDeclaration_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryFunctionBody() {
				return this.__ks_func_tryFunctionBody_rt.call(null, this, this, arguments);
			}
			__ks_func_tryFunctionBody_0(fMode) {
				const mark = this.__ks_func_mark_0();
				this.__ks_func_NL_0M_0();
				if(this.__ks_func_test_1([Token.LEFT_CURLY, Token.EQUALS_RIGHT_ANGLE])) {
					return this.__ks_func_reqFunctionBody_0(fMode);
				}
				else {
					this.__ks_func_rollback_0(mark);
					return null;
				}
			}
			__ks_func_tryFunctionBody_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_tryFunctionBody_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryFunctionExpression() {
				return this.__ks_func_tryFunctionExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_tryFunctionExpression_0(eMode, fMode) {
				if((eMode & ExpressionMode.NoAnonymousFunction) !== 0n) {
					return NO;
				}
				if(this.__ks_func_match_0([Token.ASYNC, Token.FUNC, Token.LEFT_ROUND, Token.IDENTIFIER]) === Token.ASYNC) {
					const first = this.__ks_func_yes_0();
					const modifiers = [this.yep(AST.Modifier.__ks_0(ModifierKind.Async, first))];
					if(this.__ks_func_test_0(Token.FUNC)) {
						this.__ks_func_commit_0();
						const parameters = this.__ks_func_reqFunctionParameterList_0(FunctionMode.Function);
						const type = this.__ks_func_tryFunctionReturns_0();
						const __ks_throws_1 = this.__ks_func_tryFunctionThrows_0();
						const body = this.__ks_func_reqFunctionBody_0(FunctionMode.Function);
						return this.yep(AST.FunctionExpression.__ks_0(parameters, modifiers, type, __ks_throws_1, body, first, body));
					}
					else {
						const parameters = this.__ks_func_tryFunctionParameterList_0(fMode);
						if(!parameters.ok) {
							return NO;
						}
						const type = this.__ks_func_tryFunctionReturns_0();
						const __ks_throws_1 = this.__ks_func_tryFunctionThrows_0();
						const body = this.__ks_func_reqFunctionBody_0(fMode);
						return this.yep(AST.LambdaExpression.__ks_0(parameters, modifiers, type, __ks_throws_1, body, first, body));
					}
				}
				else if(this._token === Token.FUNC) {
					const first = this.__ks_func_yes_0();
					const parameters = this.__ks_func_tryFunctionParameterList_0(FunctionMode.Function);
					if(!parameters.ok) {
						return NO;
					}
					const type = this.__ks_func_tryFunctionReturns_0();
					const __ks_throws_1 = this.__ks_func_tryFunctionThrows_0();
					const body = this.__ks_func_reqFunctionBody_0(FunctionMode.Function);
					return this.yep(AST.FunctionExpression.__ks_0(parameters, null, type, __ks_throws_1, body, first, body));
				}
				else if(this._token === Token.LEFT_ROUND) {
					const parameters = this.__ks_func_tryFunctionParameterList_0(fMode);
					const type = this.__ks_func_tryFunctionReturns_0();
					const __ks_throws_1 = this.__ks_func_tryFunctionThrows_0();
					if(!parameters.ok || !this.__ks_func_test_0(Token.EQUALS_RIGHT_ANGLE)) {
						return NO;
					}
					this.__ks_func_commit_0();
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						const body = this.__ks_func_reqBlock_0(NO, fMode);
						return this.yep(AST.LambdaExpression.__ks_0(parameters, null, type, __ks_throws_1, body, parameters, body));
					}
					else {
						const body = this.__ks_func_reqExpression_0(ExpressionMode(eMode | ExpressionMode.NoObject), fMode);
						return this.yep(AST.LambdaExpression.__ks_0(parameters, null, type, __ks_throws_1, body, parameters, body));
					}
				}
				else if(this._token === Token.IDENTIFIER) {
					const name = this.__ks_func_reqIdentifier_0();
					if(!this.__ks_func_test_0(Token.EQUALS_RIGHT_ANGLE)) {
						return NO;
					}
					this.__ks_func_commit_0();
					const parameters = this.__ks_func_yep_2([this.yep(AST.Parameter.__ks_0(name))], name, name);
					if(this.__ks_func_test_0(Token.LEFT_CURLY)) {
						const body = this.__ks_func_reqBlock_0(NO, fMode);
						return this.yep(AST.LambdaExpression.__ks_0(parameters, null, null, null, body, parameters, body));
					}
					else {
						const body = this.__ks_func_reqExpression_0(ExpressionMode(eMode | ExpressionMode.NoObject), fMode);
						return this.yep(AST.LambdaExpression.__ks_0(parameters, null, null, null, body, parameters, body));
					}
				}
				else {
					return NO;
				}
			}
			__ks_func_tryFunctionExpression_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, ExpressionMode);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_tryFunctionExpression_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryFunctionParameterList() {
				return this.__ks_func_tryFunctionParameterList_rt.call(null, this, this, arguments);
			}
			__ks_func_tryFunctionParameterList_0(fMode) {
				if(!this.__ks_func_test_0(Token.LEFT_ROUND)) {
					return NO;
				}
				const first = this.__ks_func_yes_0();
				const parameters = [];
				if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
					try {
						while(this.__ks_func_reqParameter_0(parameters, DestructuringMode.Parameter, fMode)) {
						}
					}
					catch(__ks_0) {
						return NO;
					}
					if(!this.__ks_func_test_0(Token.RIGHT_ROUND)) {
						return NO;
					}
				}
				return this.__ks_func_yep_2(parameters, first, this.__ks_func_yes_0());
			}
			__ks_func_tryFunctionParameterList_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_tryFunctionParameterList_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryFunctionReturns() {
				return this.__ks_func_tryFunctionReturns_rt.call(null, this, this, arguments);
			}
			__ks_func_tryFunctionReturns_0(isAllowingAuto) {
				if(isAllowingAuto === void 0 || isAllowingAuto === null) {
					isAllowingAuto = true;
				}
				const mark = this.__ks_func_mark_0();
				this.__ks_func_NL_0M_0();
				if(this.__ks_func_test_0(Token.COLON)) {
					this.__ks_func_commit_0();
					const mark = this.__ks_func_mark_0();
					if(this._scanner.__ks_func_test_0(Token.IDENTIFIER)) {
						const value = this._scanner.__ks_func_value_0();
						if((value === "this") || (!isAllowingAuto && (value === "auto"))) {
							throw this.__ks_func_error_0("The return type \"" + value + "\" can't be used");
						}
						else if(value === "auto") {
							const identifier = this.yep(AST.Identifier.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0()));
							return this.yep(AST.ReturnTypeReference.__ks_0(identifier));
						}
						else {
							this.__ks_func_rollback_0(mark);
							return this.__ks_func_reqTypeVar_0();
						}
					}
					else {
						return this.__ks_func_reqTypeVar_0();
					}
				}
				else {
					this.__ks_func_rollback_0(mark);
					return null;
				}
			}
			__ks_func_tryFunctionReturns_rt(that, proto, args) {
				const t0 = value => KSType.isBoolean(value) || KSType.isNull(value);
				const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
				let pts;
				if(args.length <= 1) {
					if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
						return proto.__ks_func_tryFunctionReturns_0.call(that, KSHelper.getVararg(args, 0, pts[1]));
					}
				}
				throw KSHelper.badArgs();
			}
			tryFunctionThrows() {
				return this.__ks_func_tryFunctionThrows_rt.call(null, this, this, arguments);
			}
			__ks_func_tryFunctionThrows_0() {
				const mark = this.__ks_func_mark_0();
				this.__ks_func_NL_0M_0();
				if(this.__ks_func_test_0(Token.TILDE)) {
					this.__ks_func_commit_0();
					const exceptions = [this.__ks_func_reqIdentifier_0()];
					while(this.__ks_func_test_0(Token.COMMA)) {
						this.__ks_func_commit_0();
						exceptions.push(this.__ks_func_reqIdentifier_0());
					}
					return this.__ks_func_yep_1(exceptions);
				}
				else {
					this.__ks_func_rollback_0(mark);
					return null;
				}
			}
			__ks_func_tryFunctionThrows_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_tryFunctionThrows_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			tryIdentifier() {
				return this.__ks_func_tryIdentifier_rt.call(null, this, this, arguments);
			}
			__ks_func_tryIdentifier_0() {
				if(this._scanner.__ks_func_test_0(Token.IDENTIFIER)) {
					return this.yep(AST.Identifier.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0()));
				}
				else {
					return NO;
				}
			}
			__ks_func_tryIdentifier_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_tryIdentifier_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			tryJunctionOperator() {
				return this.__ks_func_tryJunctionOperator_rt.call(null, this, this, arguments);
			}
			__ks_func_tryJunctionOperator_0() {
				let __ks_0 = this.__ks_func_matchM_0(M.JUNCTION_OPERATOR);
				if(__ks_0 === Token.AMPERSAND) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.And, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.CARET) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.Xor, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.PIPE) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.Or, this.__ks_func_yes_0()));
				}
				else {
					return NO;
				}
			}
			__ks_func_tryJunctionOperator_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_tryJunctionOperator_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			tryMacroStatement() {
				return this.__ks_func_tryMacroStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_tryMacroStatement_0(first) {
				const name = this.__ks_func_tryIdentifier_0();
				if(!name.ok) {
					return NO;
				}
				const parameters = this.__ks_func_reqMacroParameterList_0();
				const body = this.__ks_func_reqMacroBody_0();
				return this.yep(AST.MacroDeclaration.__ks_0([], name, parameters, body, first, body));
			}
			__ks_func_tryMacroStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_tryMacroStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryMethodReturns() {
				return this.__ks_func_tryMethodReturns_rt.call(null, this, this, arguments);
			}
			__ks_func_tryMethodReturns_0(isAllowingAuto) {
				if(isAllowingAuto === void 0 || isAllowingAuto === null) {
					isAllowingAuto = true;
				}
				const mark = this.__ks_func_mark_0();
				this.__ks_func_NL_0M_0();
				if(this.__ks_func_test_0(Token.COLON)) {
					this.__ks_func_commit_0();
					const mark = this.__ks_func_mark_0();
					if(this._scanner.__ks_func_test_0(Token.IDENTIFIER)) {
						const value = this._scanner.__ks_func_value_0();
						if(!isAllowingAuto && (value === "auto")) {
							throw this.__ks_func_error_0("The return type \"auto\" can't be used");
						}
						else if((value === "this") || (value === "auto")) {
							const identifier = this.yep(AST.Identifier.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0()));
							return this.yep(AST.ReturnTypeReference.__ks_0(identifier));
						}
						else {
							this.__ks_func_rollback_0(mark);
							return this.__ks_func_reqTypeVar_0();
						}
					}
					else if(this.__ks_func_test_0(Token.AT)) {
						const alias = this.__ks_func_reqThisExpression_0(this.__ks_func_yes_0());
						return this.yep(AST.ReturnTypeReference.__ks_0(alias));
					}
					else {
						return this.__ks_func_reqTypeVar_0();
					}
				}
				else {
					this.__ks_func_rollback_0(mark);
					return null;
				}
			}
			__ks_func_tryMethodReturns_rt(that, proto, args) {
				const t0 = value => KSType.isBoolean(value) || KSType.isNull(value);
				const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
				let pts;
				if(args.length <= 1) {
					if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
						return proto.__ks_func_tryMethodReturns_0.call(that, KSHelper.getVararg(args, 0, pts[1]));
					}
				}
				throw KSHelper.badArgs();
			}
			tryNameIST() {
				return this.__ks_func_tryNameIST_rt.call(null, this, this, arguments);
			}
			__ks_func_tryNameIST_0(fMode) {
				if(this.__ks_func_match_0([Token.IDENTIFIER, Token.STRING, Token.TEMPLATE_BEGIN]) === Token.IDENTIFIER) {
					return this.__ks_func_reqIdentifier_0();
				}
				else if(this._token === Token.STRING) {
					return this.__ks_func_reqString_0();
				}
				else if(this._token === Token.TEMPLATE_BEGIN) {
					return this.__ks_func_reqTemplateExpression_0(this.__ks_func_yes_0(), fMode);
				}
				else {
					return NO;
				}
			}
			__ks_func_tryNameIST_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_tryNameIST_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryNamespaceStatement() {
				return this.__ks_func_tryNamespaceStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_tryNamespaceStatement_0(first) {
				const name = this.__ks_func_tryIdentifier_0();
				if(!name.ok) {
					return NO;
				}
				return this.__ks_func_reqNamespaceStatement_0(first, name);
			}
			__ks_func_tryNamespaceStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_tryNamespaceStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryNumber() {
				return this.__ks_func_tryNumber_rt.call(null, this, this, arguments);
			}
			__ks_func_tryNumber_0() {
				if(this.__ks_func_matchM_0(M.NUMBER) === Token.BINARY_NUMBER) {
					return this.yep(AST.NumericExpression.__ks_0(parseInt(this._scanner.__ks_func_value_0().slice(2).replace(/\_/g, ""), 2), this.__ks_func_yes_0()));
				}
				else if(this._token === Token.OCTAL_NUMBER) {
					const radix = 8;
					const number = this._scanner.__ks_func_value_0().slice(2).replace(/\_/g, "").split("p");
					const literals = number[0].split(".");
					let value = parseInt(literals[0], radix);
					if(literals.length > 1) {
						const floating = literals[1];
						let power = 1;
						for(let i = 0, __ks_0 = floating.length; i < __ks_0; ++i) {
							power *= radix;
							value += parseInt(floating[i], radix) / power;
						}
					}
					if((number.length > 1) && (number[1] !== "0")) {
						value *= Math.pow(2, parseInt(number[1]));
					}
					return this.yep(AST.NumericExpression.__ks_0(value, this.__ks_func_yes_0()));
				}
				else if(this._token === Token.HEX_NUMBER) {
					const radix = 16;
					const number = this._scanner.__ks_func_value_0().slice(2).replace(/\_/g, "").split("p");
					const literals = number[0].split(".");
					let value = parseInt(literals[0], radix);
					if(literals.length > 1) {
						const floating = literals[1];
						let power = 1;
						for(let i = 0, __ks_0 = floating.length; i < __ks_0; ++i) {
							power *= radix;
							value += parseInt(floating[i], radix) / power;
						}
					}
					if((number.length > 1) && (number[1] !== "0")) {
						value *= Math.pow(2, parseInt(number[1]));
					}
					return this.yep(AST.NumericExpression.__ks_0(value, this.__ks_func_yes_0()));
				}
				else if(this._token === Token.RADIX_NUMBER) {
					const data = /^(\d+)r(.*)$/.exec(this._scanner.__ks_func_value_0());
					return this.yep(AST.NumericExpression.__ks_0(parseInt(data[2].replace(/\_/g, ""), parseInt(data[1])), this.__ks_func_yes_0()));
				}
				else if(this._token === Token.DECIMAL_NUMBER) {
					return this.yep(AST.NumericExpression.__ks_0(parseFloat(this._scanner.__ks_func_value_0().replace(/\_/g, ""), 10), this.__ks_func_yes_0()));
				}
				else {
					return NO;
				}
			}
			__ks_func_tryNumber_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_tryNumber_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			tryOperand() {
				return this.__ks_func_tryOperand_rt.call(null, this, this, arguments);
			}
			__ks_func_tryOperand_0(eMode, fMode) {
				if((this.__ks_func_matchM_0(M.OPERAND) === Token.AT) && (fMode === FunctionMode.Method)) {
					return this.__ks_func_reqThisExpression_0(this.__ks_func_yes_0());
				}
				else if(this._token === Token.IDENTIFIER) {
					return this.yep(AST.Identifier.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0()));
				}
				else if(this._token === Token.LEFT_CURLY) {
					return this.__ks_func_reqObject_0(this.__ks_func_yes_0(), fMode);
				}
				else if(this._token === Token.LEFT_ROUND) {
					return this.__ks_func_reqParenthesis_0(this.__ks_func_yes_0(), fMode);
				}
				else if(this._token === Token.LEFT_SQUARE) {
					return this.__ks_func_reqArray_0(this.__ks_func_yes_0(), fMode);
				}
				else if(this._token === Token.NEW) {
					const first = this.yep(AST.Identifier.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0()));
					const operand = this.__ks_func_tryCreateExpression_0(first, fMode);
					if(operand.ok) {
						return operand;
					}
					else {
						return first;
					}
				}
				else if(this._token === Token.REGEXP) {
					return this.yep(AST.RegularExpression.__ks_0(this._scanner.__ks_func_value_0(), this.__ks_func_yes_0()));
				}
				else if(this._token === Token.STRING) {
					return this.yep(AST.Literal.__ks_0(this.__ks_func_value_0(), this.__ks_func_yes_0()));
				}
				else if(this._token === Token.TEMPLATE_BEGIN) {
					return this.__ks_func_reqTemplateExpression_0(this.__ks_func_yes_0(), fMode);
				}
				else {
					return this.__ks_func_tryNumber_0();
				}
			}
			__ks_func_tryOperand_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, ExpressionMode);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_tryOperand_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryRangeOperand() {
				return this.__ks_func_tryRangeOperand_rt.call(null, this, this, arguments);
			}
			__ks_func_tryRangeOperand_0(eMode, fMode) {
				const operand = this.__ks_func_tryOperand_0(eMode, fMode);
				if(!operand.ok) {
					return NO;
				}
				return this.__ks_func_reqPostfixedOperand_0(operand, eMode, fMode);
			}
			__ks_func_tryRangeOperand_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, ExpressionMode);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_tryRangeOperand_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			trySwitchExpression() {
				return this.__ks_func_trySwitchExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_trySwitchExpression_0(eMode, fMode) {
				if(!this.__ks_func_test_0(Token.SWITCH)) {
					return NO;
				}
				const first = this.__ks_func_yes_0();
				const expression = this.__ks_func_reqOperation_0(eMode, fMode);
				const clauses = this.__ks_func_reqSwitchCaseList_0(fMode);
				return this.yep(AST.SwitchExpression.__ks_0(expression, clauses, first, clauses));
			}
			__ks_func_trySwitchExpression_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, ExpressionMode);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_trySwitchExpression_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryTryExpression() {
				return this.__ks_func_tryTryExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_tryTryExpression_0(eMode, fMode) {
				if(!this.__ks_func_test_0(Token.TRY)) {
					return NO;
				}
				try {
					return this.__ks_func_reqTryExpression_0(this.__ks_func_yes_0(), fMode);
				}
				catch(__ks_0) {
					return NO;
				}
			}
			__ks_func_tryTryExpression_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, ExpressionMode);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_tryTryExpression_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryTypeOperator() {
				return this.__ks_func_tryTypeOperator_rt.call(null, this, this, arguments);
			}
			__ks_func_tryTypeOperator_0() {
				let __ks_0 = this.__ks_func_matchM_0(M.TYPE_OPERATOR);
				if(__ks_0 === Token.AS) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.TypeCasting, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.AS_EXCLAMATION) {
					const position = this.__ks_func_yes_0();
					return this.yep(AST.BinaryOperator.__ks_1([AST.Modifier.__ks_0(ModifierKind.Forced, position)], BinaryOperatorKind.TypeCasting, position));
				}
				else if(__ks_0 === Token.AS_QUESTION) {
					const position = this.__ks_func_yes_0();
					return this.yep(AST.BinaryOperator.__ks_1([AST.Modifier.__ks_0(ModifierKind.Nullable, position)], BinaryOperatorKind.TypeCasting, position));
				}
				else if(__ks_0 === Token.IS) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.TypeEquality, this.__ks_func_yes_0()));
				}
				else if(__ks_0 === Token.IS_NOT) {
					return this.yep(AST.BinaryOperator.__ks_0(BinaryOperatorKind.TypeInequality, this.__ks_func_yes_0()));
				}
				else {
					return NO;
				}
			}
			__ks_func_tryTypeOperator_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_tryTypeOperator_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			tryTypeStatement() {
				return this.__ks_func_tryTypeStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_tryTypeStatement_0(first) {
				const name = this.__ks_func_tryIdentifier_0();
				if(!name.ok) {
					return NO;
				}
				return this.__ks_func_reqTypeStatement_0(first, name);
			}
			__ks_func_tryTypeStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_tryTypeStatement_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryUntilStatement() {
				return this.__ks_func_tryUntilStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_tryUntilStatement_0(first, fMode) {
				const condition = this.__ks_func_tryExpression_0(ExpressionMode.Default, fMode);
				if(!condition.ok) {
					return NO;
				}
				let body = null;
				if(this.__ks_func_match_0([Token.LEFT_CURLY, Token.EQUALS_RIGHT_ANGLE]) === Token.LEFT_CURLY) {
					body = this.__ks_func_reqBlock_0(this.__ks_func_yes_0(), fMode);
				}
				else if(this._token === Token.EQUALS_RIGHT_ANGLE) {
					this.__ks_func_commit_0();
					body = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				else {
					this.__ks_func_throw_2(["{", "=>"]);
				}
				return this.yep(AST.UntilStatement.__ks_0(condition, body, first, body));
			}
			__ks_func_tryUntilStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_tryUntilStatement_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryVariable() {
				return this.__ks_func_tryVariable_rt.call(null, this, this, arguments);
			}
			__ks_func_tryVariable_0() {
				const name = this.__ks_func_tryIdentifier_0();
				if(name.ok) {
					return this.yep(AST.VariableDeclarator.__ks_0([], name, null, name, name));
				}
				else {
					return NO;
				}
			}
			__ks_func_tryVariable_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_tryVariable_0.call(that);
				}
				throw KSHelper.badArgs();
			}
			tryVariableName() {
				return this.__ks_func_tryVariableName_rt.call(null, this, this, arguments);
			}
			__ks_func_tryVariableName_0(fMode) {
				let object = null;
				if((fMode === FunctionMode.Method) && this.__ks_func_test_0(Token.AT)) {
					object = this.__ks_func_reqThisExpression_0(this.__ks_func_yes_0());
				}
				else {
					object = this.__ks_func_tryIdentifier_0();
					if(!object.ok) {
						return NO;
					}
				}
				return this.__ks_func_reqVariableName_0(object, fMode);
			}
			__ks_func_tryVariableName_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_tryVariableName_0.call(that, args[0]);
					}
				}
				throw KSHelper.badArgs();
			}
			tryWhileStatement() {
				return this.__ks_func_tryWhileStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_tryWhileStatement_0(first, fMode) {
				let condition = null;
				if(this.__ks_func_test_0(Token.VAR)) {
					const mark = this.__ks_func_mark_0();
					const first = this.__ks_func_yes_0();
					const modifiers = [];
					if(this.__ks_func_test_0(Token.MUT)) {
						modifiers.push(AST.Modifier.__ks_0(ModifierKind.Mutable, this.__ks_func_yes_0()));
					}
					if(this.__ks_func_test_1([Token.IDENTIFIER, Token.LEFT_CURLY, Token.LEFT_SQUARE])) {
						const variable = this.__ks_func_reqTypedVariable_0(fMode);
						if(this.__ks_func_test_0(Token.COMMA)) {
							const variables = [variable];
							do {
								this.__ks_func_commit_0();
								variables.push(this.__ks_func_reqTypedVariable_0(fMode));
							}
							while(this.__ks_func_test_0(Token.COMMA))
							if(!this.__ks_func_test_0(Token.EQUALS)) {
								this.__ks_func_throw_1("=");
							}
							this.__ks_func_commit_0();
							if(!this.__ks_func_test_0(Token.AWAIT)) {
								this.__ks_func_throw_1("await");
							}
							this.__ks_func_commit_0();
							const operand = this.__ks_func_reqPrefixedOperand_0(ExpressionMode.Default, fMode);
							condition = this.yep(AST.VariableDeclaration.__ks_0(modifiers, variables, operand, first, operand));
						}
						else {
							if(!this.__ks_func_test_0(Token.EQUALS)) {
								this.__ks_func_throw_1("=");
							}
							this.__ks_func_commit_0();
							const expression = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
							condition = this.yep(AST.VariableDeclaration.__ks_0(modifiers, [variable], expression, first, expression));
						}
					}
					else {
						this.__ks_func_rollback_0(mark);
						condition = this.__ks_func_tryExpression_0(ExpressionMode.Default, fMode);
					}
				}
				else {
					condition = this.__ks_func_tryExpression_0(ExpressionMode.Default, fMode);
				}
				if(!condition.ok) {
					return NO;
				}
				let body = null;
				if(this.__ks_func_match_0([Token.LEFT_CURLY, Token.EQUALS_RIGHT_ANGLE]) === Token.LEFT_CURLY) {
					body = this.__ks_func_reqBlock_0(this.__ks_func_yes_0(), fMode);
				}
				else if(this._token === Token.EQUALS_RIGHT_ANGLE) {
					this.__ks_func_commit_0();
					body = this.__ks_func_reqExpression_0(ExpressionMode.Default, fMode);
				}
				else {
					this.__ks_func_throw_2(["{", "=>"]);
				}
				return this.yep(AST.WhileStatement.__ks_0(condition, body, first, body));
			}
			__ks_func_tryWhileStatement_rt(that, proto, args) {
				const t0 = value => KSType.isStructInstance(value, Event);
				const t1 = value => KSType.isEnumInstance(value, FunctionMode);
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return proto.__ks_func_tryWhileStatement_0.call(that, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			}
		}
		function parse() {
			return parse.__ks_rt(this, arguments);
		};
		parse.__ks_0 = function(data) {
			const parser = Parser.__ks_new_0(data);
			return parser.__ks_func_reqModule_0();
		};
		parse.__ks_rt = function(that, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return parse.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		return {
			parse
		};
	});
	var TimSort = require("timsort");
	function $clone() {
		return $clone.__ks_rt(this, arguments);
	};
	$clone.__ks_0 = function(value = null) {
		if(value === null) {
			return null;
		}
		else if(KSType.isArray(value)) {
			return __ks_Array.__ks_func_clone_0.call(value);
		}
		else if(KSType.isDictionary(value)) {
			return __ks_Dictionary.__ks_sttc_clone_0(value);
		}
		else {
			return value;
		}
	};
	$clone.__ks_rt = function(that, args) {
		if(args.length <= 1) {
			return $clone.__ks_0.call(that, args[0]);
		}
		throw KSHelper.badArgs();
	};
	function $merge() {
		return $merge.__ks_rt(this, arguments);
	};
	$merge.__ks_0 = function(source, key, value) {
		if(KSType.isArray(value)) {
			source[key] = __ks_Array.__ks_func_clone_0.call(value);
		}
		else if(!KSType.isPrimitive(value)) {
			if(KSType.isDictionary(source[key]) || KSType.isObject(source[key])) {
				$mergeObject(source[key], value);
			}
			else {
				source[key] = $clone.__ks_0(value);
			}
		}
		else {
			source[key] = value;
		}
		return source;
	};
	$merge.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 3) {
			if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
				return $merge.__ks_0.call(that, args[0], args[1], args[2]);
			}
		}
		throw KSHelper.badArgs();
	};
	function $mergeObject() {
		return $mergeObject.__ks_rt(this, arguments);
	};
	$mergeObject.__ks_0 = function(source, current) {
		for(const key in current) {
			if(KSType.isValue(source[key])) {
				$merge(source, key, current[key]);
			}
			else {
				source[key] = current[key];
			}
		}
	};
	$mergeObject.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 2) {
			if(t0(args[0]) && t0(args[1])) {
				return $mergeObject.__ks_0.call(that, args[0], args[1]);
			}
		}
		throw KSHelper.badArgs();
	};
	var __ks_Array = {};
	var __ks_Dictionary = {};
	__ks_Array.__ks_sttc_merge_0 = function(args) {
		let source = [];
		let i = 0;
		let l = args.length;
		while((i < l) && !((KSType.isValue(args[i]) ? (source = args[i], true) : false) && KSType.isArray(source))) {
			++i;
		}
		++i;
		while(i < l) {
			if(KSType.isArray(args[i])) {
				for(let __ks_0 = 0, __ks_1 = args[i].length, value; __ks_0 < __ks_1; ++__ks_0) {
					value = args[i][__ks_0];
					__ks_Array.__ks_func_pushUniq_0.call(source, [value]);
				}
			}
			++i;
		}
		return source;
	};
	__ks_Array.__ks_sttc_same_0 = function(a, b) {
		if(a.length !== b.length) {
			return false;
		}
		for(let i = 0, __ks_0 = a.length; i < __ks_0; ++i) {
			if(a[i] !== b[i]) {
				return false;
			}
		}
		return true;
	};
	__ks_Array.__ks_func_append_0 = function(args) {
		let l = null, i = null, j = null, arg = null;
		for(let k = 0, __ks_0 = args.length; k < __ks_0; ++k) {
			arg = KSHelper.array(args[k]);
			if((l = arg.length) > 50000) {
				i = 0;
				j = 50000;
				while(i < l) {
					this.push(...arg.slice(i, j));
					i = j;
					j += 50000;
				}
			}
			else {
				this.push(...arg);
			}
		}
		return this;
	};
	__ks_Array.__ks_func_appendUniq_0 = function(args) {
		if(args.length === 1) {
			__ks_Array.__ks_func_pushUniq_0.call(this, [].concat(args[0]));
		}
		else {
			for(let i = 0, __ks_0 = args.length; i < __ks_0; ++i) {
				__ks_Array.__ks_func_pushUniq_0.call(this, [].concat(args[i]));
			}
		}
		return this;
	};
	__ks_Array.__ks_func_any_0 = function(fn) {
		for(let index = 0, __ks_0 = this.length, item; index < __ks_0; ++index) {
			item = this[index];
			if(fn(item, index, this) === true) {
				return true;
			}
		}
		return false;
	};
	__ks_Array.__ks_func_clear_0 = function() {
		this.length = 0;
		return this;
	};
	__ks_Array.__ks_func_clone_0 = function() {
		let i = this.length;
		let clone = new Array(i);
		while(i > 0) {
			clone[--i] = $clone.__ks_0(this[i]);
		}
		return clone;
	};
	__ks_Array.__ks_func_contains_0 = function(item, from) {
		if(item === void 0) {
			item = null;
		}
		if(from === void 0 || from === null) {
			from = 0;
		}
		return this.indexOf(item, from) !== -1;
	};
	__ks_Array.__ks_func_intersection_0 = function(arrays) {
		const result = [];
		let seen = null;
		for(let __ks_0 = 0, __ks_1 = this.length, value; __ks_0 < __ks_1; ++__ks_0) {
			value = this[__ks_0];
			seen = true;
			for(let __ks_2 = 0, __ks_3 = arrays.length, array; __ks_2 < __ks_3 && seen; ++__ks_2) {
				array = arrays[__ks_2];
				if(array.indexOf(value) === -1) {
					seen = false;
				}
			}
			if(seen) {
				result.push(value);
			}
		}
		return result;
	};
	__ks_Array.__ks_func_last_0 = function(index) {
		if(index === void 0 || index === null) {
			index = 1;
		}
		return (this.length !== 0) ? this[this.length - index] : null;
	};
	__ks_Array.__ks_func_pushUniq_0 = function(args) {
		if(args.length === 1) {
			if(!__ks_Array.__ks_func_contains_0.call(this, args[0])) {
				this.push(args[0]);
			}
		}
		else {
			for(let __ks_0 = 0, __ks_1 = args.length, item; __ks_0 < __ks_1; ++__ks_0) {
				item = args[__ks_0];
				if(!__ks_Array.__ks_func_contains_0.call(this, item)) {
					this.push(item);
				}
			}
		}
		return this;
	};
	__ks_Array.__ks_func_remove_0 = function(items) {
		if(items.length === 1) {
			let item = items[0];
			for(let i = this.length - 1; i >= 0; --i) {
				if(this[i] === item) {
					this.splice(i, 1);
				}
			}
		}
		else {
			for(let __ks_0 = 0, __ks_1 = items.length, item; __ks_0 < __ks_1; ++__ks_0) {
				item = items[__ks_0];
				for(let i = this.length - 1; i >= 0; --i) {
					if(this[i] === item) {
						this.splice(i, 1);
					}
				}
			}
		}
		return this;
	};
	__ks_Array.__ks_func_sort_0 = function(compareFn) {
		TimSort.sort(this, compareFn);
		return this;
	};
	__ks_Array._sm_merge = function() {
		const t0 = KSType.isValue;
		const te = (pts, idx) => KSHelper.isUsingAllArgs(arguments, pts, idx);
		let pts;
		if(KSHelper.isVarargs(arguments, 0, arguments.length, t0, pts = [0], 0) && te(pts, 1)) {
			return __ks_Array.__ks_sttc_merge_0(KSHelper.getVarargs(arguments, 0, pts[1]));
		}
		if(Array.merge) {
			return Array.merge(...arguments);
		}
		throw KSHelper.badArgs();
	};
	__ks_Array._sm_same = function() {
		const t0 = KSType.isValue;
		if(arguments.length === 2) {
			if(t0(arguments[0]) && t0(arguments[1])) {
				return __ks_Array.__ks_sttc_same_0(arguments[0], arguments[1]);
			}
		}
		if(Array.same) {
			return Array.same(...arguments);
		}
		throw KSHelper.badArgs();
	};
	__ks_Array._im_append = function(that, ...args) {
		return __ks_Array.__ks_func_append_rt(that, args);
	};
	__ks_Array.__ks_func_append_rt = function(that, args) {
		return __ks_Array.__ks_func_append_0.call(that, Array.from(args));
	};
	__ks_Array._im_appendUniq = function(that, ...args) {
		return __ks_Array.__ks_func_appendUniq_rt(that, args);
	};
	__ks_Array.__ks_func_appendUniq_rt = function(that, args) {
		return __ks_Array.__ks_func_appendUniq_0.call(that, Array.from(args));
	};
	__ks_Array._im_any = function(that, ...args) {
		return __ks_Array.__ks_func_any_rt(that, args);
	};
	__ks_Array.__ks_func_any_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 1) {
			if(t0(args[0])) {
				return __ks_Array.__ks_func_any_0.call(that, args[0]);
			}
		}
		if(that.any) {
			return that.any(...args);
		}
		throw KSHelper.badArgs();
	};
	__ks_Array._im_clear = function(that, ...args) {
		return __ks_Array.__ks_func_clear_rt(that, args);
	};
	__ks_Array.__ks_func_clear_rt = function(that, args) {
		if(args.length === 0) {
			return __ks_Array.__ks_func_clear_0.call(that);
		}
		if(that.clear) {
			return that.clear(...args);
		}
		throw KSHelper.badArgs();
	};
	__ks_Array._im_clone = function(that, ...args) {
		return __ks_Array.__ks_func_clone_rt(that, args);
	};
	__ks_Array.__ks_func_clone_rt = function(that, args) {
		if(args.length === 0) {
			return __ks_Array.__ks_func_clone_0.call(that);
		}
		if(that.clone) {
			return that.clone(...args);
		}
		throw KSHelper.badArgs();
	};
	__ks_Array._im_contains = function(that, ...args) {
		return __ks_Array.__ks_func_contains_rt(that, args);
	};
	__ks_Array.__ks_func_contains_rt = function(that, args) {
		const t0 = value => KSType.isNumber(value) || KSType.isNull(value);
		const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
		let pts;
		if(args.length >= 1 && args.length <= 2) {
			if(KSHelper.isVarargs(args, 0, 1, t0, pts = [1], 0) && te(pts, 1)) {
				return __ks_Array.__ks_func_contains_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
			}
		}
		if(that.contains) {
			return that.contains(...args);
		}
		throw KSHelper.badArgs();
	};
	__ks_Array._im_intersection = function(that, ...args) {
		return __ks_Array.__ks_func_intersection_rt(that, args);
	};
	__ks_Array.__ks_func_intersection_rt = function(that, args) {
		const t0 = KSType.isValue;
		const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
		let pts;
		if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
			return __ks_Array.__ks_func_intersection_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
		}
		if(that.intersection) {
			return that.intersection(...args);
		}
		throw KSHelper.badArgs();
	};
	__ks_Array._im_last = function(that, ...args) {
		return __ks_Array.__ks_func_last_rt(that, args);
	};
	__ks_Array.__ks_func_last_rt = function(that, args) {
		const t0 = value => KSType.isNumber(value) || KSType.isNull(value);
		const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
		let pts;
		if(args.length <= 1) {
			if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
				return __ks_Array.__ks_func_last_0.call(that, KSHelper.getVararg(args, 0, pts[1]));
			}
		}
		if(that.last) {
			return that.last(...args);
		}
		throw KSHelper.badArgs();
	};
	__ks_Array._im_pushUniq = function(that, ...args) {
		return __ks_Array.__ks_func_pushUniq_rt(that, args);
	};
	__ks_Array.__ks_func_pushUniq_rt = function(that, args) {
		return __ks_Array.__ks_func_pushUniq_0.call(that, Array.from(args));
	};
	__ks_Array._im_remove = function(that, ...args) {
		return __ks_Array.__ks_func_remove_rt(that, args);
	};
	__ks_Array.__ks_func_remove_rt = function(that, args) {
		return __ks_Array.__ks_func_remove_0.call(that, Array.from(args));
	};
	__ks_Array._im_sort = function(that, ...args) {
		return __ks_Array.__ks_func_sort_rt(that, args);
	};
	__ks_Array.__ks_func_sort_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 1) {
			if(t0(args[0])) {
				return __ks_Array.__ks_func_sort_0.call(that, args[0]);
			}
		}
		if(that.sort) {
			return that.sort(...args);
		}
		throw KSHelper.badArgs();
	};
	__ks_Dictionary.__ks_sttc_clone_0 = function(dict) {
		if(KSType.isFunction(dict.clone)) {
			return dict.clone();
		}
		let clone = new Dictionary();
		for(const key in dict) {
			const value = dict[key];
			clone[key] = $clone.__ks_0(value);
		}
		return clone;
	};
	__ks_Dictionary.__ks_sttc_defaults_0 = function(args) {
		return __ks_Dictionary.__ks_sttc_merge_0([new Dictionary(), ...args]);
	};
	__ks_Dictionary.__ks_sttc_isEmpty_0 = function(dict) {
		for(let __ks_0 in dict) {
			const value = dict[__ks_0];
			return false;
		}
		return true;
	};
	__ks_Dictionary.__ks_sttc_key_0 = function(dict, index) {
		let i = -1;
		for(const key in dict) {
			if(++i === index) {
				return key;
			}
		}
		return null;
	};
	__ks_Dictionary.__ks_sttc_length_0 = function(dict) {
		return Dictionary.keys(dict).length;
	};
	__ks_Dictionary.__ks_sttc_merge_0 = function(args) {
		let source = new Dictionary();
		let i = 0;
		let l = args.length;
		let src = null;
		while((i < l) && !((KSType.isValue(args[i]) ? (src = args[i], true) : false) && KSType.isDictionary(src))) {
			++i;
		}
		++i;
		if(KSType.isValue(src) && KSType.isDictionary(src)) {
			source = src;
		}
		while(i < l) {
			if(KSType.isDictionary(args[i]) || KSType.isObject(args[i])) {
				for(const key in args[i]) {
					const value = args[i][key];
					$merge(source, key, value);
				}
			}
			++i;
		}
		return source;
	};
	__ks_Dictionary.__ks_sttc_value_0 = function(dict, index) {
		let i = -1;
		for(let __ks_0 in dict) {
			const value = dict[__ks_0];
			if(++i === index) {
				return value;
			}
		}
		return null;
	};
	__ks_Dictionary._sm_clone = function() {
		const t0 = KSType.isDictionary;
		if(arguments.length === 1) {
			if(t0(arguments[0])) {
				return __ks_Dictionary.__ks_sttc_clone_0(arguments[0]);
			}
		}
		if(Dictionary.clone) {
			return Dictionary.clone(...arguments);
		}
		throw KSHelper.badArgs();
	};
	__ks_Dictionary._sm_defaults = function() {
		const t0 = KSType.isValue;
		const te = (pts, idx) => KSHelper.isUsingAllArgs(arguments, pts, idx);
		let pts;
		if(KSHelper.isVarargs(arguments, 0, arguments.length, t0, pts = [0], 0) && te(pts, 1)) {
			return __ks_Dictionary.__ks_sttc_defaults_0(KSHelper.getVarargs(arguments, 0, pts[1]));
		}
		if(Dictionary.defaults) {
			return Dictionary.defaults(...arguments);
		}
		throw KSHelper.badArgs();
	};
	__ks_Dictionary._sm_isEmpty = function() {
		const t0 = KSType.isDictionary;
		if(arguments.length === 1) {
			if(t0(arguments[0])) {
				return __ks_Dictionary.__ks_sttc_isEmpty_0(arguments[0]);
			}
		}
		if(Dictionary.isEmpty) {
			return Dictionary.isEmpty(...arguments);
		}
		throw KSHelper.badArgs();
	};
	__ks_Dictionary._sm_key = function() {
		const t0 = KSType.isDictionary;
		const t1 = KSType.isNumber;
		if(arguments.length === 2) {
			if(t0(arguments[0]) && t1(arguments[1])) {
				return __ks_Dictionary.__ks_sttc_key_0(arguments[0], arguments[1]);
			}
		}
		if(Dictionary.key) {
			return Dictionary.key(...arguments);
		}
		throw KSHelper.badArgs();
	};
	__ks_Dictionary._sm_length = function() {
		const t0 = KSType.isDictionary;
		if(arguments.length === 1) {
			if(t0(arguments[0])) {
				return __ks_Dictionary.__ks_sttc_length_0(arguments[0]);
			}
		}
		if(Dictionary.length) {
			return Dictionary.length(...arguments);
		}
		throw KSHelper.badArgs();
	};
	__ks_Dictionary._sm_merge = function() {
		return __ks_Dictionary.__ks_sttc_merge_0(Array.from(arguments));
	};
	__ks_Dictionary._sm_value = function() {
		const t0 = KSType.isDictionary;
		const t1 = KSType.isNumber;
		if(arguments.length === 2) {
			if(t0(arguments[0]) && t1(arguments[1])) {
				return __ks_Dictionary.__ks_sttc_value_0(arguments[0], arguments[1]);
			}
		}
		if(Dictionary.value) {
			return Dictionary.value(...arguments);
		}
		throw KSHelper.badArgs();
	};
	const __ks_String = {};
	__ks_String.__ks_func_dasherize_0 = function() {
		return this.replace(/([A-Z])/g, "-$1").replace(/[^A-Za-z0-9]+/g, "-").toLowerCase();
	};
	__ks_String.__ks_func_toFirstLowerCase_0 = function() {
		return KSHelper.cast(this.charAt(0).toLowerCase(), "String", false, null, "String") + KSHelper.cast(this.substring(1), "String", false, null, "String");
	};
	__ks_String._im_dasherize = function(that, ...args) {
		return __ks_String.__ks_func_dasherize_rt(that, args);
	};
	__ks_String.__ks_func_dasherize_rt = function(that, args) {
		if(args.length === 0) {
			return __ks_String.__ks_func_dasherize_0.call(that);
		}
		if(that.dasherize) {
			return that.dasherize(...args);
		}
		throw KSHelper.badArgs();
	};
	__ks_String._im_toFirstLowerCase = function(that, ...args) {
		return __ks_String.__ks_func_toFirstLowerCase_rt(that, args);
	};
	__ks_String.__ks_func_toFirstLowerCase_rt = function(that, args) {
		if(args.length === 0) {
			return __ks_String.__ks_func_toFirstLowerCase_0.call(that);
		}
		if(that.toFirstLowerCase) {
			return that.toFirstLowerCase(...args);
		}
		throw KSHelper.badArgs();
	};
	var __ks_Error = {};
	Error.prepareStackTrace = (() => {
		const __ks_rt = (...args) => {
			const t0 = value => KSType.isClassInstance(value, Error);
			const t1 = KSType.isArray;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return __ks_rt.__ks_0.call(null, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		__ks_rt.__ks_0 = function(error, stack) {
			let message = error.toString();
			for(let i = 0, __ks_0 = Math.min(12, stack.length); i < __ks_0; ++i) {
				message = KSHelper.concatString(message, "\n    ", stack[i].toString());
			}
			return message;
		};
		return __ks_rt;
	})();
	class Exception extends Error {
		constructor() {
			const __ks_cons_0 = (message) => {
				super();
				this.__ks_init();
				this.message = message;
				this.name = this.constructor.name;
			};
			const __ks_cons_1 = (message, fileName, lineNumber) => {
				if(fileName === void 0) {
					fileName = null;
				}
				__ks_cons_0(message);
				this.fileName = fileName;
				this.lineNumber = lineNumber;
			};
			const __ks_cons_2 = (message, node) => {
				__ks_cons_rt([message, node.__ks_func_file_0(), node._data.start.line]);
			};
			const __ks_cons_3 = (message, node, data) => {
				__ks_cons_rt([message, node.__ks_func_file_0(), data.start.line]);
			};
			const __ks_cons_rt = (args) => {
				const t0 = KSType.isString;
				const t1 = value => KSType.isClassInstance(value, AbstractNode);
				const t2 = KSType.isValue;
				const t3 = value => KSType.isString(value) || KSType.isNull(value);
				const t4 = KSType.isNumber;
				if(args.length === 1) {
					if(t0(args[0])) {
						return __ks_cons_0(args[0]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 2) {
					if(t0(args[0]) && t1(args[1])) {
						return __ks_cons_2(args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 3) {
					if(t0(args[0])) {
						if(t1(args[1])) {
							if(t2(args[2])) {
								return __ks_cons_3(args[0], args[1], args[2]);
							}
							throw KSHelper.badArgs();
						}
						if(t3(args[1]) && t4(args[2])) {
							return __ks_cons_1(args[0], args[1], args[2]);
						}
						throw KSHelper.badArgs();
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_cons_rt(arguments);
		}
		__ks_init_0() {
			this.fileName = null;
			this.lineNumber = 0;
		}
		__ks_init() {
			Exception.prototype.__ks_init_0.call(this);
		}
		toString() {
			return this.__ks_func_toString_rt.call(null, this, this, arguments);
		}
		__ks_func_toString_0() {
			if(this.lineNumber === 0) {
				if(this.message.length === 0) {
					return this.name + ": Unexpected error";
				}
				else {
					return this.name + ": " + this.message;
				}
			}
			else {
				if(this.message.length === 0) {
					return KSHelper.concatString(this.name, ": ", this.fileName, ":", this.lineNumber);
				}
				else {
					return KSHelper.concatString(this.name, ": ", this.message, " (", this.fileName, ":", this.lineNumber, ")");
				}
			}
		}
		__ks_func_toString_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toString_0.call(that);
			}
			if(super.__ks_func_toString_rt) {
				return super.__ks_func_toString_rt.call(null, that, Error.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_validateReportedError_0(error, node) {
			while(!KSType.isClassInstance(error, NamedType)) {
				if(error.isExtending() === true) {
					error = error.extends();
				}
				else {
					error = node.scope().getVariable("Error").type();
				}
			}
			const options = node._options.error;
			if(options.level === "fatal") {
				if(!(node.parent().isConsumedError(error) === true)) {
					if(options.ignore.length === 0) {
						SyntaxException.throwUnreportedError(error.name(), node);
					}
					else {
						const hierarchy = error.getHierarchy();
						let nf = true;
						for(let __ks_0 = 0, __ks_1 = hierarchy.length, name; __ks_0 < __ks_1 && nf; ++__ks_0) {
							name = hierarchy[__ks_0];
							if(__ks_Array.__ks_func_contains_0.call(KSHelper.cast(options.ignore, "Array", false, null, "Array"), name)) {
								nf = false;
							}
						}
						if(nf) {
							SyntaxException.throwUnreportedError(error.name(), node);
						}
						else if(options.raise.length !== 0) {
							for(let __ks_0 = 0, __ks_1 = hierarchy.length, name; __ks_0 < __ks_1; ++__ks_0) {
								name = hierarchy[__ks_0];
								if(__ks_Array.__ks_func_contains_0.call(KSHelper.cast(options.raise, "Array", false, null, "Array"), name)) {
									SyntaxException.throwUnreportedError(error.name(), node);
								}
							}
						}
					}
				}
			}
		}
		static validateReportedError() {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t1(arguments[1])) {
					return Exception.__ks_sttc_validateReportedError_0(arguments[0], arguments[1]);
				}
			}
			if(Error.validateReportedError) {
				return Error.validateReportedError.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class IOException extends Exception {
		constructor() {
			super(...arguments);
		}
		__ks_init() {
			Exception.prototype.__ks_init.call(this);
		}
		static __ks_sttc_throwNotFoundFile_0(path, node) {
			throw new IOException(KSHelper.concatString("The file \"", path, "\" can't be found"), node);
		}
		static __ks_sttc_throwNotFoundFile_1(path, directory, node) {
			throw new IOException(KSHelper.concatString("The file \"", path, "\" can't be found in the directory \"", directory, "\""), node);
		}
		static throwNotFoundFile() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return IOException.__ks_sttc_throwNotFoundFile_0(arguments[0], arguments[1]);
				}
			}
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return IOException.__ks_sttc_throwNotFoundFile_1(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwNotFoundFile) {
				return Exception.throwNotFoundFile.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotFoundModule_0(name, node) {
			throw new IOException(KSHelper.concatString("The module \"", name, "\" can't be found"), node);
		}
		static __ks_sttc_throwNotFoundModule_1(name, directory, node) {
			throw new IOException(KSHelper.concatString("The module \"", name, "\" can't be found in the directory \"", directory, "\""), node);
		}
		static throwNotFoundModule() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return IOException.__ks_sttc_throwNotFoundModule_0(arguments[0], arguments[1]);
				}
			}
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return IOException.__ks_sttc_throwNotFoundModule_1(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwNotFoundModule) {
				return Exception.throwNotFoundModule.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class NotImplementedException extends Exception {
		constructor() {
			const __ks_cons_0 = (message) => {
				if(message === void 0 || message === null) {
					message = "Not Implemented";
				}
				super(message);
			};
			const __ks_cons_1 = (message, node) => {
				if(message === void 0 || message === null) {
					message = "Not Implemented";
				}
				super(message, node);
			};
			const __ks_cons_2 = (message, node, data) => {
				if(message === void 0 || message === null) {
					message = "Not Implemented";
				}
				super(message, node, data);
			};
			const __ks_cons_3 = (message, fileName, lineNumber) => {
				if(message === void 0 || message === null) {
					message = "Not Implemented";
				}
				super(message, fileName, lineNumber);
			};
			const __ks_cons_rt = (args) => {
				const t0 = value => KSType.isClassInstance(value, AbstractNode);
				const t1 = KSType.isValue;
				if(args.length === 0) {
					return __ks_cons_0();
				}
				if(args.length === 1) {
					if(t0(args[0])) {
						return __ks_cons_1(void 0, args[0]);
					}
					return __ks_cons_0(args[0]);
				}
				if(args.length === 2) {
					if(t0(args[0])) {
						if(t1(args[1])) {
							return __ks_cons_2(void 0, args[0], args[1]);
						}
					}
					if(t1(args[0])) {
						if(t1(args[1])) {
							return __ks_cons_3(void 0, args[0], args[1]);
						}
					}
					if(t0(args[1])) {
						return __ks_cons_1(args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 3) {
					if(t0(args[1])) {
						if(t1(args[2])) {
							return __ks_cons_2(args[0], args[1], args[2]);
						}
					}
					if(t1(args[1]) && t1(args[2])) {
						return __ks_cons_3(args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_cons_rt(arguments);
		}
		__ks_init() {
			Exception.prototype.__ks_init.call(this);
		}
		static __ks_sttc_throw_0(__ks_arguments_1) {
			throw new NotImplementedException(...__ks_arguments_1);
		}
		static throw() {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(arguments, pts, idx);
			let pts;
			if(KSHelper.isVarargs(arguments, 0, arguments.length, t0, pts = [0], 0) && te(pts, 1)) {
				return NotImplementedException.__ks_sttc_throw_0(KSHelper.getVarargs(arguments, 0, pts[1]));
			}
			if(Exception.throw) {
				return Exception.throw.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class NotSupportedException extends Exception {
		constructor() {
			const __ks_cons_0 = (message) => {
				if(message === void 0 || message === null) {
					message = "Not Supported";
				}
				super(message);
			};
			const __ks_cons_1 = (message, node) => {
				if(message === void 0 || message === null) {
					message = "Not Supported";
				}
				super(message, node);
			};
			const __ks_cons_2 = (message, node, data) => {
				if(message === void 0 || message === null) {
					message = "Not Supported";
				}
				super(message, node, data);
			};
			const __ks_cons_rt = (args) => {
				const t0 = value => KSType.isClassInstance(value, AbstractNode);
				const t1 = KSType.isValue;
				if(args.length === 0) {
					return __ks_cons_0();
				}
				if(args.length === 1) {
					if(t0(args[0])) {
						return __ks_cons_1(void 0, args[0]);
					}
					return __ks_cons_0(args[0]);
				}
				if(args.length === 2) {
					if(t0(args[0])) {
						if(t1(args[1])) {
							return __ks_cons_2(void 0, args[0], args[1]);
						}
					}
					if(t0(args[1])) {
						return __ks_cons_1(args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(args.length === 3) {
					if(t0(args[1]) && t1(args[2])) {
						return __ks_cons_2(args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_cons_rt(arguments);
		}
		__ks_init() {
			Exception.prototype.__ks_init.call(this);
		}
		static __ks_sttc_throw_1(__ks_arguments_1) {
			throw new NotSupportedException(...__ks_arguments_1);
		}
		static throw() {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(arguments, pts, idx);
			let pts;
			if(KSHelper.isVarargs(arguments, 0, arguments.length, t0, pts = [0], 0) && te(pts, 1)) {
				return NotSupportedException.__ks_sttc_throw_1(KSHelper.getVarargs(arguments, 0, pts[1]));
			}
			if(Exception.throw) {
				return Exception.throw.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class ReferenceException extends Exception {
		constructor() {
			super(...arguments);
		}
		__ks_init() {
			Exception.prototype.__ks_init.call(this);
		}
		static __ks_sttc_throwAlreadyDefinedField_0(name, node) {
			throw new ReferenceException(KSHelper.concatString("Field \"", name, "\" is already defined by its parent class"), node);
		}
		static throwAlreadyDefinedField() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return ReferenceException.__ks_sttc_throwAlreadyDefinedField_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwAlreadyDefinedField) {
				return Exception.throwAlreadyDefinedField.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwBindingExceedArray_0(name, node) {
			throw new ReferenceException(KSHelper.concatString("The destructuring variable \"", name, "\" can't be matched"), node);
		}
		static throwBindingExceedArray() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return ReferenceException.__ks_sttc_throwBindingExceedArray_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwBindingExceedArray) {
				return Exception.throwBindingExceedArray.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwConfusingArguments_0(name, node) {
			throw new ReferenceException(KSHelper.concatString("The arguments (indexed/named) can be matched to the function \"", name, "\" in multiple ways"), node);
		}
		static throwConfusingArguments() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return ReferenceException.__ks_sttc_throwConfusingArguments_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwConfusingArguments) {
				return Exception.throwConfusingArguments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwDefined_0(name, node) {
			throw new ReferenceException(KSHelper.concatString("\"", name, "\" should not be defined"), node);
		}
		static throwDefined() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return ReferenceException.__ks_sttc_throwDefined_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwDefined) {
				return Exception.throwDefined.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwImmutable_0(name, node) {
			throw new ReferenceException("The identifier \"" + name + "\" is immutable", node);
		}
		static __ks_sttc_throwImmutable_1(node) {
			throw new ReferenceException(KSHelper.concatString("The expression \"", node.toQuote(), "\" is immutable"), node);
		}
		static throwImmutable() {
			const t0 = KSType.isValue;
			const t1 = KSType.isString;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return ReferenceException.__ks_sttc_throwImmutable_1(arguments[0]);
				}
			}
			if(arguments.length === 2) {
				if(t1(arguments[0]) && t0(arguments[1])) {
					return ReferenceException.__ks_sttc_throwImmutable_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwImmutable) {
				return Exception.throwImmutable.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwImmutableField_0(name, node) {
			throw new ReferenceException(KSHelper.concatString("The class variable \"", name, "\" is immutable"), node);
		}
		static throwImmutableField() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return ReferenceException.__ks_sttc_throwImmutableField_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwImmutableField) {
				return Exception.throwImmutableField.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwIncompleteVariable_0(argname, modname, node) {
			throw new ReferenceException(KSHelper.concatString("The variable \"", argname, "\" must be complete before passing it to the module \"", modname, "\""), node);
		}
		static throwIncompleteVariable() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return ReferenceException.__ks_sttc_throwIncompleteVariable_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwIncompleteVariable) {
				return Exception.throwIncompleteVariable.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidAssignment_0(node) {
			throw new ReferenceException("Invalid left-hand side in assignment", node);
		}
		static throwInvalidAssignment() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return ReferenceException.__ks_sttc_throwInvalidAssignment_0(arguments[0]);
				}
			}
			if(Exception.throwInvalidAssignment) {
				return Exception.throwInvalidAssignment.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwLoopingAlias_0(name, node) {
			throw new ReferenceException(KSHelper.concatString("Alias \"@", name, "\" is looping on itself"), node);
		}
		static throwLoopingAlias() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return ReferenceException.__ks_sttc_throwLoopingAlias_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwLoopingAlias) {
				return Exception.throwLoopingAlias.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNoMatchingConstructor_0(name, __ks_arguments_1, node) {
			if(__ks_arguments_1.length === 0) {
				throw new ReferenceException(KSHelper.concatString("The constructor of class \"", name, "\" can't be matched to no arguments"), node);
			}
			else {
				throw new ReferenceException(KSHelper.concatString("The constructor of class \"", name, "\" can't be matched to given arguments (", KSHelper.mapArray(__ks_arguments_1, function(argument) {
					return KSHelper.toString(argument.type().toQuote());
				}).join(", "), ")"), node);
			}
		}
		static throwNoMatchingConstructor() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return ReferenceException.__ks_sttc_throwNoMatchingConstructor_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwNoMatchingConstructor) {
				return Exception.throwNoMatchingConstructor.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNoMatchingFunction_0(name, __ks_arguments_1, node) {
			if(__ks_arguments_1.length === 0) {
				throw new ReferenceException(KSHelper.concatString("The function \"", name, "\" can't be matched to no arguments"), node);
			}
			else {
				throw new ReferenceException(KSHelper.concatString("The function \"", name, "\" can't be matched to given arguments (", KSHelper.mapArray(__ks_arguments_1, function(argument) {
					return KSHelper.toString(argument.toTypeQuote());
				}).join(", "), ")"), node);
			}
		}
		static throwNoMatchingFunction() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return ReferenceException.__ks_sttc_throwNoMatchingFunction_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwNoMatchingFunction) {
				return Exception.throwNoMatchingFunction.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNoMatchingFunctionInNamespace_0(name, __ks_namespace_1, __ks_arguments_1, node) {
			if(__ks_arguments_1.length === 0) {
				throw new ReferenceException(KSHelper.concatString("The function \"", name, "\" in namespace ", __ks_namespace_1.toQuote(true), " can't be matched to no arguments"), node);
			}
			else {
				throw new ReferenceException(KSHelper.concatString("The function \"", name, "\" in namespace ", __ks_namespace_1.toQuote(true), " can't be matched to given arguments (", KSHelper.mapArray(__ks_arguments_1, function(argument) {
					return KSHelper.toString(argument.type().toQuote());
				}).join(", "), ")"), node);
			}
		}
		static throwNoMatchingFunctionInNamespace() {
			const t0 = KSType.isValue;
			if(arguments.length === 4) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3])) {
					return ReferenceException.__ks_sttc_throwNoMatchingFunctionInNamespace_0(arguments[0], arguments[1], arguments[2], arguments[3]);
				}
			}
			if(Exception.throwNoMatchingFunctionInNamespace) {
				return Exception.throwNoMatchingFunctionInNamespace.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNoMatchingClassMethod_0(method, __ks_class_1, __ks_arguments_1, node) {
			if(__ks_arguments_1.length === 0) {
				throw new ReferenceException(KSHelper.concatString("The method \"", method, "\" of the class \"", __ks_class_1, "\" can't be matched to no arguments"), node);
			}
			else {
				throw new ReferenceException(KSHelper.concatString("The method \"", method, "\" of the class \"", __ks_class_1, "\" can't be matched to given arguments (", KSHelper.mapArray(__ks_arguments_1, function(argument) {
					return KSHelper.toString(argument.toQuote());
				}).join(", "), ")"), node);
			}
		}
		static throwNoMatchingClassMethod() {
			const t0 = KSType.isValue;
			if(arguments.length === 4) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3])) {
					return ReferenceException.__ks_sttc_throwNoMatchingClassMethod_0(arguments[0], arguments[1], arguments[2], arguments[3]);
				}
			}
			if(Exception.throwNoMatchingClassMethod) {
				return Exception.throwNoMatchingClassMethod.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNoMatchingEnumMethod_0(method, __ks_enum_1, __ks_arguments_1, node) {
			if(__ks_arguments_1.length === 0) {
				throw new ReferenceException(KSHelper.concatString("The method \"", method, "\" of the enum \"", __ks_enum_1, "\" can't be matched to no arguments"), node);
			}
			else {
				throw new ReferenceException(KSHelper.concatString("The method \"", method, "\" of the enum \"", __ks_enum_1, "\" can't be matched to given arguments (", KSHelper.mapArray(__ks_arguments_1, function(argument) {
					return KSHelper.toString(argument.toQuote());
				}).join(", "), ")"), node);
			}
		}
		static throwNoMatchingEnumMethod() {
			const t0 = KSType.isValue;
			if(arguments.length === 4) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3])) {
					return ReferenceException.__ks_sttc_throwNoMatchingEnumMethod_0(arguments[0], arguments[1], arguments[2], arguments[3]);
				}
			}
			if(Exception.throwNoMatchingEnumMethod) {
				return Exception.throwNoMatchingEnumMethod.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUnrecognizedNamedArgument_0(name, node) {
			throw new ReferenceException(KSHelper.concatString("The argument \"", name, "\" isn't recognized"), node);
		}
		static throwUnrecognizedNamedArgument() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return ReferenceException.__ks_sttc_throwUnrecognizedNamedArgument_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwUnrecognizedNamedArgument) {
				return Exception.throwUnrecognizedNamedArgument.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNoMatchingStruct_0(name, __ks_arguments_1, node) {
			if(__ks_arguments_1.length === 0) {
				throw new ReferenceException(KSHelper.concatString("The struct \"", name, "\" can't be matched to no arguments"), node);
			}
			else {
				throw new ReferenceException(KSHelper.concatString("The struct \"", name, "\" can't be matched to given arguments (", KSHelper.mapArray(__ks_arguments_1, function(argument) {
					return KSHelper.toString(argument.type().toQuote());
				}).join(", "), ")"), node);
			}
		}
		static throwNoMatchingStruct() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return ReferenceException.__ks_sttc_throwNoMatchingStruct_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwNoMatchingStruct) {
				return Exception.throwNoMatchingStruct.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNoMatchingTuple_0(name, __ks_arguments_1, node) {
			if(__ks_arguments_1.length === 0) {
				throw new ReferenceException(KSHelper.concatString("The tuple \"", name, "\" can't be matched to no arguments"), node);
			}
			else {
				throw new ReferenceException(KSHelper.concatString("The tuple \"", name, "\" can't be matched to given arguments (", KSHelper.mapArray(__ks_arguments_1, function(argument) {
					return KSHelper.toString(argument.type().toQuote());
				}).join(", "), ")"), node);
			}
		}
		static throwNoMatchingTuple() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return ReferenceException.__ks_sttc_throwNoMatchingTuple_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwNoMatchingTuple) {
				return Exception.throwNoMatchingTuple.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotDefined_0(name, node) {
			throw new ReferenceException(KSHelper.concatString("\"", name, "\" is not defined"), node);
		}
		static throwNotDefined() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return ReferenceException.__ks_sttc_throwNotDefined_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotDefined) {
				return Exception.throwNotDefined.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotDefinedEnumElement_0(element, __ks_enum_1, node) {
			throw new ReferenceException(KSHelper.concatString("Element \"", element, "\" is not defined in enum \"", __ks_enum_1, "\""), node);
		}
		static throwNotDefinedEnumElement() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return ReferenceException.__ks_sttc_throwNotDefinedEnumElement_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwNotDefinedEnumElement) {
				return Exception.throwNotDefinedEnumElement.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotDefinedInModule_0(name, module, node) {
			throw new ReferenceException(KSHelper.concatString("\"", name, "\" is not defined in the module \"", module, "\""), node);
		}
		static throwNotDefinedInModule() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return ReferenceException.__ks_sttc_throwNotDefinedInModule_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwNotDefinedInModule) {
				return Exception.throwNotDefinedInModule.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotDefinedMember_0(name, node) {
			throw new ReferenceException(KSHelper.concatString("Member \"", name, "\" is not defined"), node);
		}
		static throwNotDefinedMember() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return ReferenceException.__ks_sttc_throwNotDefinedMember_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotDefinedMember) {
				return Exception.throwNotDefinedMember.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotDefinedProperty_0(name, node) {
			throw new ReferenceException(KSHelper.concatString("Property \"", name, "\" is not defined"), node);
		}
		static throwNotDefinedProperty() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return ReferenceException.__ks_sttc_throwNotDefinedProperty_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotDefinedProperty) {
				return Exception.throwNotDefinedProperty.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotExportable_0(name, node) {
			throw new ReferenceException(KSHelper.concatString("The exported variable \"", name, "\" is not exportable"), node);
		}
		static throwNotExportable() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return ReferenceException.__ks_sttc_throwNotExportable_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotExportable) {
				return Exception.throwNotExportable.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotFoundClassMethod_0(method, __ks_class_1, node) {
			throw new ReferenceException(KSHelper.concatString("The method \"", method, "\" can't be found in the class \"", __ks_class_1, "\""), node);
		}
		static throwNotFoundClassMethod() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return ReferenceException.__ks_sttc_throwNotFoundClassMethod_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwNotFoundClassMethod) {
				return Exception.throwNotFoundClassMethod.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotFoundEnumMethod_0(method, __ks_enum_1, node) {
			throw new ReferenceException(KSHelper.concatString("The method \"", method, "\" can't be found in the enum \"", __ks_enum_1, "\""), node);
		}
		static throwNotFoundEnumMethod() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return ReferenceException.__ks_sttc_throwNotFoundEnumMethod_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwNotFoundEnumMethod) {
				return Exception.throwNotFoundEnumMethod.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotPassed_0(name, module, node) {
			throw new ReferenceException(KSHelper.concatString("To overwrite \"", name, "\", it needs to be passed to the module \"", module, "\""), node);
		}
		static throwNotPassed() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return ReferenceException.__ks_sttc_throwNotPassed_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwNotPassed) {
				return Exception.throwNotPassed.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNullExpression_0(expression, node) {
			throw new ReferenceException(KSHelper.concatString("The expression ", expression.toQuote(true), " is \"null\""), node);
		}
		static throwNullExpression() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return ReferenceException.__ks_sttc_throwNullExpression_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNullExpression) {
				return Exception.throwNullExpression.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUndefinedBindingVariable_0(name, node) {
			throw new ReferenceException(KSHelper.concatString("The destructuring variable \"", name, "\" can't be matched"), node);
		}
		static throwUndefinedBindingVariable() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return ReferenceException.__ks_sttc_throwUndefinedBindingVariable_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwUndefinedBindingVariable) {
				return Exception.throwUndefinedBindingVariable.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUndefinedClassField_0(name, node) {
			throw new ReferenceException(KSHelper.concatString("The class field \"", name, "\" isn't defined"), node);
		}
		static throwUndefinedClassField() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return ReferenceException.__ks_sttc_throwUndefinedClassField_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwUndefinedClassField) {
				return Exception.throwUndefinedClassField.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUndefinedInstanceField_0(name, node) {
			throw new ReferenceException(KSHelper.concatString("The instance field \"", name, "\" isn't defined"), node);
		}
		static throwUndefinedInstanceField() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return ReferenceException.__ks_sttc_throwUndefinedInstanceField_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwUndefinedInstanceField) {
				return Exception.throwUndefinedInstanceField.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUndefinedFunction_0(name, node) {
			throw new ReferenceException(KSHelper.concatString("The function \"", name, "\" can't be found"), node);
		}
		static throwUndefinedFunction() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return ReferenceException.__ks_sttc_throwUndefinedFunction_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwUndefinedFunction) {
				return Exception.throwUndefinedFunction.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class SyntaxException extends Exception {
		constructor() {
			super(...arguments);
		}
		__ks_init() {
			Exception.prototype.__ks_init.call(this);
		}
		static __ks_sttc_throwAfterDefaultClause_0(node) {
			throw new SyntaxException("Clause is must be before the default clause", node);
		}
		static throwAfterDefaultClause() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwAfterDefaultClause_0(arguments[0]);
				}
			}
			if(Exception.throwAfterDefaultClause) {
				return Exception.throwAfterDefaultClause.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwAfterRestParameter_0(node) {
			throw new SyntaxException("Parameter must be before the rest parameter", node);
		}
		static throwAfterRestParameter() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwAfterRestParameter_0(arguments[0]);
				}
			}
			if(Exception.throwAfterRestParameter) {
				return Exception.throwAfterRestParameter.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwAlreadyDeclared_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("Identifier \"", name, "\" has already been declared"), node);
		}
		static throwAlreadyDeclared() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwAlreadyDeclared_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwAlreadyDeclared) {
				return Exception.throwAlreadyDeclared.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwAlreadyImported_0(name, module, line, node) {
			throw new SyntaxException(KSHelper.concatString("The variable \"", name, "\" has already been imported by \"", module, "\" at line ", line), node);
		}
		static throwAlreadyImported() {
			const t0 = KSType.isValue;
			if(arguments.length === 4) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3])) {
					return SyntaxException.__ks_sttc_throwAlreadyImported_0(arguments[0], arguments[1], arguments[2], arguments[3]);
				}
			}
			if(Exception.throwAlreadyImported) {
				return Exception.throwAlreadyImported.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwDeadCode_0(node) {
			throw new SyntaxException("Dead code", node);
		}
		static throwDeadCode() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwDeadCode_0(arguments[0]);
				}
			}
			if(Exception.throwDeadCode) {
				return Exception.throwDeadCode.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwDeadCodeParameter_0(node) {
			throw new SyntaxException("The default value of a required and nullable parameter can only be 'null'", node);
		}
		static throwDeadCodeParameter() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwDeadCodeParameter_0(arguments[0]);
				}
			}
			if(Exception.throwDeadCodeParameter) {
				return Exception.throwDeadCodeParameter.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwDuplicateConstructor_0(node) {
			throw new SyntaxException("The constructor is matching an existing constructor", node);
		}
		static throwDuplicateConstructor() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwDuplicateConstructor_0(arguments[0]);
				}
			}
			if(Exception.throwDuplicateConstructor) {
				return Exception.throwDuplicateConstructor.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwDuplicateKey_0(node) {
			throw new SyntaxException("Duplicate key has been found in object", node);
		}
		static throwDuplicateKey() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwDuplicateKey_0(arguments[0]);
				}
			}
			if(Exception.throwDuplicateKey) {
				return Exception.throwDuplicateKey.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwDuplicateMethod_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The method \"", name, "\" is matching an existing method"), node);
		}
		static throwDuplicateMethod() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwDuplicateMethod_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwDuplicateMethod) {
				return Exception.throwDuplicateMethod.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwEnumOverflow_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The bit flags enum \"", name, "\" can only have at most 53 bits."), node);
		}
		static throwEnumOverflow() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwEnumOverflow_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwEnumOverflow) {
				return Exception.throwEnumOverflow.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwExcessiveRequirement_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The import don't require the argument \"", name, "\""), node);
		}
		static throwExcessiveRequirement() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwExcessiveRequirement_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwExcessiveRequirement) {
				return Exception.throwExcessiveRequirement.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwHiddenMethod_0(name, class1, method1, class2, method2, node) {
			throw new SyntaxException(KSHelper.concatString("The method \"", class1.toQuote(), ".", name, method1.toQuote(), "\" hides the method \"", class2.toQuote(), ".", name, method2.toQuote(), "\""), node);
		}
		static throwHiddenMethod() {
			const t0 = KSType.isValue;
			if(arguments.length === 6) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3]) && t0(arguments[4]) && t0(arguments[5])) {
					return SyntaxException.__ks_sttc_throwHiddenMethod_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
				}
			}
			if(Exception.throwHiddenMethod) {
				return Exception.throwHiddenMethod.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwIdenticalConstructor_0(node) {
			throw new SyntaxException("The constructor is identical with another constructor", node);
		}
		static throwIdenticalConstructor() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwIdenticalConstructor_0(arguments[0]);
				}
			}
			if(Exception.throwIdenticalConstructor) {
				return Exception.throwIdenticalConstructor.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwIdenticalFunction_0(name, type, node) {
			throw new SyntaxException(KSHelper.concatString("The function \"", name, type.toQuote(), "\" is a duplicate"), node);
		}
		static throwIdenticalFunction() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return SyntaxException.__ks_sttc_throwIdenticalFunction_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwIdenticalFunction) {
				return Exception.throwIdenticalFunction.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwIdenticalMethod_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The method \"", name, "\" is matching another method with the same types of parameters"), node);
		}
		static throwIdenticalMethod() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwIdenticalMethod_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwIdenticalMethod) {
				return Exception.throwIdenticalMethod.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwIllegalStatement_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The statement \"", name, "\" is illegal"), node);
		}
		static throwIllegalStatement() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwIllegalStatement_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwIllegalStatement) {
				return Exception.throwIllegalStatement.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwIndistinguishableFunctions_0(name, functions, node) {
			const last = functions.length - 1;
			let fragments = "";
			for(let i = 0, __ks_0 = functions.length, __ks_function_1; i < __ks_0; ++i) {
				__ks_function_1 = functions[i];
				if(i === last) {
					fragments += " and ";
				}
				else if(i !== 0) {
					fragments += ", ";
				}
				fragments += "\"" + name + __ks_function_1.__ks_func_toQuote_0() + "\"";
			}
			throw new SyntaxException("The functions " + fragments + " can't be distinguished", node);
		}
		static __ks_sttc_throwIndistinguishableFunctions_1(name, __ks_arguments_1, functions, node) {
			const args = KSHelper.concatString("(", __ks_arguments_1.map((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 3) {
						if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (type, __ks_0, __ks_1) => {
					return type.toQuote(true);
				};
				return __ks_rt;
			})()).join(", "), ")");
			const last = functions.length - 1;
			let fragments = "the function \"" + name + "\" can be matched with ";
			for(let i = 0, __ks_0 = functions.length, __ks_function_1; i < __ks_0; ++i) {
				__ks_function_1 = functions[i];
				if(i === last) {
					fragments += " or ";
				}
				else if(i !== 0) {
					fragments += ", ";
				}
				fragments += "\"" + name + __ks_function_1.__ks_func_toQuote_0() + "\"";
			}
			if(__ks_arguments_1.length === 0) {
				throw new SyntaxException("When there are no arguments, " + fragments, node);
			}
			else {
				throw new SyntaxException("When the arguments are " + args + ", " + fragments, node);
			}
		}
		static __ks_sttc_throwIndistinguishableFunctions_2(name, functions, count, node) {
			const last = functions.length - 1;
			let fragments = "";
			for(let i = 0, __ks_0 = functions.length, __ks_function_1; i < __ks_0; ++i) {
				__ks_function_1 = functions[i];
				if(i === last) {
					fragments += " and ";
				}
				else if(i !== 0) {
					fragments += ", ";
				}
				fragments += "\"" + name + __ks_function_1.__ks_func_toQuote_0() + "\"";
			}
			if(count === 0) {
				throw new SyntaxException("The functions " + fragments + " can't be distinguished when there are no arguments", node);
			}
			else if(count === 1) {
				throw new SyntaxException("The functions " + fragments + " can't be distinguished when there is only one argument", node);
			}
			else {
				throw new SyntaxException(KSHelper.concatString("The functions ", fragments, " can't be distinguished when there are ", count, " arguments"), node);
			}
		}
		static throwIndistinguishableFunctions() {
			const t0 = KSType.isString;
			const t1 = value => KSType.isArray(value, value => KSType.isClassInstance(value, Type));
			const t2 = KSType.isValue;
			const t3 = KSType.isNumber;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t1(arguments[1]) && t2(arguments[2])) {
					return SyntaxException.__ks_sttc_throwIndistinguishableFunctions_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(arguments.length === 4) {
				if(t0(arguments[0]) && t1(arguments[1])) {
					if(t3(arguments[2])) {
						if(t2(arguments[3])) {
							return SyntaxException.__ks_sttc_throwIndistinguishableFunctions_2(arguments[0], arguments[1], arguments[2], arguments[3]);
						}
						throw KSHelper.badArgs();
					}
					if(t1(arguments[2]) && t2(arguments[3])) {
						return SyntaxException.__ks_sttc_throwIndistinguishableFunctions_1(arguments[0], arguments[1], arguments[2], arguments[3]);
					}
					throw KSHelper.badArgs();
				}
			}
			if(Exception.throwIndistinguishableFunctions) {
				return Exception.throwIndistinguishableFunctions.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInheritanceLoop_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("An inheritance loop is occurring the class \"", name, "\""), node);
		}
		static throwInheritanceLoop() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwInheritanceLoop_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwInheritanceLoop) {
				return Exception.throwInheritanceLoop.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidAwait_0(node) {
			throw new SyntaxException("\"await\" can only be used in functions or binary module", node);
		}
		static throwInvalidAwait() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwInvalidAwait_0(arguments[0]);
				}
			}
			if(Exception.throwInvalidAwait) {
				return Exception.throwInvalidAwait.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidEnumAccess_0(node) {
			throw new SyntaxException("Accessing an enum can only be done with \"::\"", node);
		}
		static throwInvalidEnumAccess() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwInvalidEnumAccess_0(arguments[0]);
				}
			}
			if(Exception.throwInvalidEnumAccess) {
				return Exception.throwInvalidEnumAccess.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidEnumValue_0(data, node) {
			throw new SyntaxException("The enum's value isn't valid", node, data);
		}
		static throwInvalidEnumValue() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwInvalidEnumValue_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwInvalidEnumValue) {
				return Exception.throwInvalidEnumValue.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidForcedTypeCasting_0(node) {
			throw new SyntaxException("The forced type casting \"!!\" can't determine the expected type", node);
		}
		static throwInvalidForcedTypeCasting() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwInvalidForcedTypeCasting_0(arguments[0]);
				}
			}
			if(Exception.throwInvalidForcedTypeCasting) {
				return Exception.throwInvalidForcedTypeCasting.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidLateInitAssignment_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The lateinit variable \"", name, "\" can't be initialized by the statement at"), node);
		}
		static throwInvalidLateInitAssignment() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwInvalidLateInitAssignment_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwInvalidLateInitAssignment) {
				return Exception.throwInvalidLateInitAssignment.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidMethodReturn_0(className, methodName, node) {
			throw new SyntaxException(KSHelper.concatString("Method \"", methodName, "\" of the class \"", className, "\" has an invalid return type"), node);
		}
		static throwInvalidMethodReturn() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return SyntaxException.__ks_sttc_throwInvalidMethodReturn_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwInvalidMethodReturn) {
				return Exception.throwInvalidMethodReturn.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidImportAliasArgument_0(name, node) {
			throw new SyntaxException("Aliases arguments can't be used with classic JavaScript module", node);
		}
		static throwInvalidImportAliasArgument() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwInvalidImportAliasArgument_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwInvalidImportAliasArgument) {
				return Exception.throwInvalidImportAliasArgument.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidIdentifier_0(value, node) {
			throw new SyntaxException(KSHelper.concatString("\"", value, "\" is an invalid identifier"), node);
		}
		static throwInvalidIdentifier() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwInvalidIdentifier_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwInvalidIdentifier) {
				return Exception.throwInvalidIdentifier.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidSyncMethods_0(className, methodName, node) {
			throw new SyntaxException(KSHelper.concatString("Method \"", methodName, "\" of the class \"", className, "\" can be neither sync nor async"), node);
		}
		static throwInvalidSyncMethods() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return SyntaxException.__ks_sttc_throwInvalidSyncMethods_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwInvalidSyncMethods) {
				return Exception.throwInvalidSyncMethods.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidRule_0(name, fileName, lineNumber) {
			throw new SyntaxException(KSHelper.concatString("The rule \"", name, "\" is invalid"), fileName, lineNumber);
		}
		static throwInvalidRule() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return SyntaxException.__ks_sttc_throwInvalidRule_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwInvalidRule) {
				return Exception.throwInvalidRule.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwLoopingImport_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The import \"", name, "\" is looping"), node);
		}
		static throwLoopingImport() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwLoopingImport_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwLoopingImport) {
				return Exception.throwLoopingImport.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwMismatchedInclude_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("Inclusions of \"", name, "\" should have the same version"), node);
		}
		static throwMismatchedInclude() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwMismatchedInclude_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwMismatchedInclude) {
				return Exception.throwMismatchedInclude.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwMissingAbstractMethods_0(name, methods, node) {
			const fragments = [];
			for(const name in methods) {
				const __ks_methods_1 = methods[name];
				for(let __ks_0 = 0, __ks_1 = __ks_methods_1.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = __ks_methods_1[__ks_0];
					fragments.push(KSHelper.concatString("\"", name, method.toQuote(), "\""));
				}
			}
			throw new SyntaxException(KSHelper.concatString("Class \"", name, "\" doesn't implement the following abstract method", ((fragments.length > 1) ? "s" : ""), ": ", fragments.join(", ")), node);
		}
		static throwMissingAbstractMethods() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return SyntaxException.__ks_sttc_throwMissingAbstractMethods_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwMissingAbstractMethods) {
				return Exception.throwMissingAbstractMethods.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwMissingAssignmentIfFalse_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The lateinit variable \"", name, "\" isn't fully initialized when the condition is false"), node);
		}
		static throwMissingAssignmentIfFalse() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwMissingAssignmentIfFalse_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwMissingAssignmentIfFalse) {
				return Exception.throwMissingAssignmentIfFalse.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwMissingAssignmentIfNoElse_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The lateinit variable \"", name, "\" isn't fully initialized due to the missing \"else\" statement"), node);
		}
		static throwMissingAssignmentIfNoElse() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwMissingAssignmentIfNoElse_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwMissingAssignmentIfNoElse) {
				return Exception.throwMissingAssignmentIfNoElse.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwMissingAssignmentIfTrue_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The lateinit variable \"", name, "\" isn't fully initialized when the condition is true"), node);
		}
		static throwMissingAssignmentIfTrue() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwMissingAssignmentIfTrue_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwMissingAssignmentIfTrue) {
				return Exception.throwMissingAssignmentIfTrue.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwMissingAssignmentSwitchClause_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The lateinit variable \"", name, "\" isn't fully initialized by the clause at"), node);
		}
		static throwMissingAssignmentSwitchClause() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwMissingAssignmentSwitchClause_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwMissingAssignmentSwitchClause) {
				return Exception.throwMissingAssignmentSwitchClause.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwMissingAssignmentSwitchNoDefault_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The lateinit variable \"", name, "\" isn't fully initialized due to the missing default clause"), node);
		}
		static throwMissingAssignmentSwitchNoDefault() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwMissingAssignmentSwitchNoDefault_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwMissingAssignmentSwitchNoDefault) {
				return Exception.throwMissingAssignmentSwitchNoDefault.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwMissingRequirement_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("import is missing the argument \"", name, "\""), node);
		}
		static __ks_sttc_throwMissingRequirement_1(argname, modname, node) {
			throw new TypeException(KSHelper.concatString("The module \"", modname, "\" is missing the argument \"", argname, "\""), node);
		}
		static throwMissingRequirement() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwMissingRequirement_0(arguments[0], arguments[1]);
				}
			}
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return SyntaxException.__ks_sttc_throwMissingRequirement_1(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwMissingRequirement) {
				return Exception.throwMissingRequirement.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwMissingStructField_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The field \"", name, "\" is missing to create the struct"), node);
		}
		static throwMissingStructField() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwMissingStructField_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwMissingStructField) {
				return Exception.throwMissingStructField.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwMissingTupleField_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The field \"", name, "\" is missing to create the tuple"), node);
		}
		static throwMissingTupleField() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwMissingTupleField_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwMissingTupleField) {
				return Exception.throwMissingTupleField.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwMixedOverloadedFunction_0(node) {
			throw new SyntaxException("Overloaded functions can't mix sync/async", node);
		}
		static throwMixedOverloadedFunction() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwMixedOverloadedFunction_0(arguments[0]);
				}
			}
			if(Exception.throwMixedOverloadedFunction) {
				return Exception.throwMixedOverloadedFunction.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNoDefaultParameter_0(node) {
			throw new SyntaxException("Parameter can't have a default value", node);
		}
		static throwNoDefaultParameter() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwNoDefaultParameter_0(arguments[0]);
				}
			}
			if(Exception.throwNoDefaultParameter) {
				return Exception.throwNoDefaultParameter.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNoExport_0(module, node) {
			throw new SyntaxException(KSHelper.concatString("No export can be found in module \"", module, "\""), node);
		}
		static throwNoExport() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwNoExport_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNoExport) {
				return Exception.throwNoExport.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNoNullParameter_0(node) {
			throw new SyntaxException("Parameter can't be nullable", node);
		}
		static throwNoNullParameter() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwNoNullParameter_0(arguments[0]);
				}
			}
			if(Exception.throwNoNullParameter) {
				return Exception.throwNoNullParameter.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNoOverridableConstructor_0(__ks_class_1, parameters, node) {
			throw new SyntaxException(KSHelper.concatString("The constructor \"", __ks_class_1.toQuote(), FunctionType.__ks_sttc_toQuote_0(parameters), "\" can't override a suitable constructor"), node);
		}
		static throwNoOverridableConstructor() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return SyntaxException.__ks_sttc_throwNoOverridableConstructor_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwNoOverridableConstructor) {
				return Exception.throwNoOverridableConstructor.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNoOverridableMethod_0(__ks_class_1, name, parameters, node) {
			throw new SyntaxException(KSHelper.concatString("The method \"", __ks_class_1.toQuote(), ".", name, FunctionType.__ks_sttc_toQuote_0(parameters), "\" can't override a suitable method"), node);
		}
		static throwNoOverridableMethod() {
			const t0 = KSType.isValue;
			if(arguments.length === 4) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3])) {
					return SyntaxException.__ks_sttc_throwNoOverridableMethod_0(arguments[0], arguments[1], arguments[2], arguments[3]);
				}
			}
			if(Exception.throwNoOverridableMethod) {
				return Exception.throwNoOverridableMethod.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNoRestParameter_0(node) {
			throw new SyntaxException("Parameter can't be a rest parameter", node);
		}
		static throwNoRestParameter() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwNoRestParameter_0(arguments[0]);
				}
			}
			if(Exception.throwNoRestParameter) {
				return Exception.throwNoRestParameter.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNoSuitableOverwrite_0(__ks_class_1, name, type, node) {
			throw new SyntaxException(KSHelper.concatString("\"", __ks_class_1.toQuote(), ".", name, type.toQuote(), "\" can't be matched to any suitable method to overwrite"), node);
		}
		static throwNoSuitableOverwrite() {
			const t0 = KSType.isValue;
			if(arguments.length === 4) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3])) {
					return SyntaxException.__ks_sttc_throwNoSuitableOverwrite_0(arguments[0], arguments[1], arguments[2], arguments[3]);
				}
			}
			if(Exception.throwNoSuitableOverwrite) {
				return Exception.throwNoSuitableOverwrite.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNoSuperCall_0(node) {
			throw new SyntaxException("Call \"super()\" is missing", node);
		}
		static throwNoSuperCall() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwNoSuperCall_0(arguments[0]);
				}
			}
			if(Exception.throwNoSuperCall) {
				return Exception.throwNoSuperCall.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotAbstractClass_0(className, methodName, node) {
			throw new SyntaxException(KSHelper.concatString("Method \"", methodName, "\" is abstract but the class \"", className, "\" is not"), node);
		}
		static throwNotAbstractClass() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return SyntaxException.__ks_sttc_throwNotAbstractClass_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwNotAbstractClass) {
				return Exception.throwNotAbstractClass.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotBinary_0(tag, node) {
			throw new SyntaxException(KSHelper.concatString("Binary file can't use \"", tag, "\" statement"), node);
		}
		static throwNotBinary() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwNotBinary_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotBinary) {
				return Exception.throwNotBinary.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotCompatibleConstructor_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("Parent's constructor of class \"", name, "\" can't be called"), node);
		}
		static throwNotCompatibleConstructor() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwNotCompatibleConstructor_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotCompatibleConstructor) {
				return Exception.throwNotCompatibleConstructor.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotEnoughStructFields_0(node) {
			throw new SyntaxException("There is not enough fields to create the struct", node);
		}
		static throwNotEnoughStructFields() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwNotEnoughStructFields_0(arguments[0]);
				}
			}
			if(Exception.throwNotEnoughStructFields) {
				return Exception.throwNotEnoughStructFields.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotEnoughTupleFields_0(node) {
			throw new SyntaxException("There is not enough fields to create the tuple", node);
		}
		static throwNotEnoughTupleFields() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwNotEnoughTupleFields_0(arguments[0]);
				}
			}
			if(Exception.throwNotEnoughTupleFields) {
				return Exception.throwNotEnoughTupleFields.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotFullyInitializedVariable_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The lateinit variable \"", name, "\" is only partially initialized"), node);
		}
		static throwNotFullyInitializedVariable() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwNotFullyInitializedVariable_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotFullyInitializedVariable) {
				return Exception.throwNotFullyInitializedVariable.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotInitializedField_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The class variable \"", name, "\" isn't initialized"), node);
		}
		static throwNotInitializedField() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwNotInitializedField_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotInitializedField) {
				return Exception.throwNotInitializedField.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotInitializedVariable_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The lateinit variable \"", name, "\" isn't initialized"), node);
		}
		static throwNotInitializedVariable() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwNotInitializedVariable_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotInitializedVariable) {
				return Exception.throwNotInitializedVariable.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotNamedParameter_0(node) {
			throw new SyntaxException("Parameter must be named", node);
		}
		static throwNotNamedParameter() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwNotNamedParameter_0(arguments[0]);
				}
			}
			if(Exception.throwNotNamedParameter) {
				return Exception.throwNotNamedParameter.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotOverloadableFunction_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("Variable \"", name, "\" is not an overloadable function"), node);
		}
		static throwNotOverloadableFunction() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwNotOverloadableFunction_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotOverloadableFunction) {
				return Exception.throwNotOverloadableFunction.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotSealedOverwrite_0(node) {
			throw new SyntaxException("A method can be overwritten only in a sealed class", node);
		}
		static throwNotSealedOverwrite() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwNotSealedOverwrite_0(arguments[0]);
				}
			}
			if(Exception.throwNotSealedOverwrite) {
				return Exception.throwNotSealedOverwrite.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwOnlyStaticImport_0(modname, node) {
			throw new TypeException(KSHelper.concatString("The arguments of the module \"", modname, "\" must have unmodified types"), node);
		}
		static __ks_sttc_throwOnlyStaticImport_1(argname, modname, node) {
			throw new TypeException(KSHelper.concatString("The argument \"", argname, "\" of the module \"", modname, "\" must have an unmodified type"), node);
		}
		static throwOnlyStaticImport() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwOnlyStaticImport_0(arguments[0], arguments[1]);
				}
			}
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return SyntaxException.__ks_sttc_throwOnlyStaticImport_1(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwOnlyStaticImport) {
				return Exception.throwOnlyStaticImport.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwReservedClassMethod_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The class method \"", name, "\" is reserved"), node);
		}
		static throwReservedClassMethod() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwReservedClassMethod_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwReservedClassMethod) {
				return Exception.throwReservedClassMethod.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwReservedClassVariable_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The class variable \"", name, "\" is reserved"), node);
		}
		static throwReservedClassVariable() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwReservedClassVariable_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwReservedClassVariable) {
				return Exception.throwReservedClassVariable.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwShadowFunction_0(name, __ks_function_1, node) {
			throw new SyntaxException(KSHelper.concatString("The function \"", name, __ks_function_1.toQuote(), "\" is been concealed by others functions"), node);
		}
		static throwShadowFunction() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return SyntaxException.__ks_sttc_throwShadowFunction_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwShadowFunction) {
				return Exception.throwShadowFunction.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwTooMuchAttributesForIfAttribute_0() {
			throw new SyntaxException("Expected 1 argument for 'if' attribute");
		}
		static throwTooMuchAttributesForIfAttribute() {
			if(arguments.length === 0) {
				return SyntaxException.__ks_sttc_throwTooMuchAttributesForIfAttribute_0();
			}
			if(Exception.throwTooMuchAttributesForIfAttribute) {
				return Exception.throwTooMuchAttributesForIfAttribute.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwTooMuchStructFields_0(node) {
			throw new SyntaxException("There is too much fields to create the struct", node);
		}
		static throwTooMuchStructFields() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwTooMuchStructFields_0(arguments[0]);
				}
			}
			if(Exception.throwTooMuchStructFields) {
				return Exception.throwTooMuchStructFields.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwTooMuchTupleFields_0(node) {
			throw new SyntaxException("There is too much fields to create the tuple", node);
		}
		static throwTooMuchTupleFields() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwTooMuchTupleFields_0(arguments[0]);
				}
			}
			if(Exception.throwTooMuchTupleFields) {
				return Exception.throwTooMuchTupleFields.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwTooMuchRestParameter_0(node) {
			throw new SyntaxException("Rest parameter has already been declared", node);
		}
		static throwTooMuchRestParameter() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwTooMuchRestParameter_0(arguments[0]);
				}
			}
			if(Exception.throwTooMuchRestParameter) {
				return Exception.throwTooMuchRestParameter.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUnexpectedAlias_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("Alias \"@", name, "\" is expected in an instance method/variable"), node);
		}
		static throwUnexpectedAlias() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwUnexpectedAlias_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwUnexpectedAlias) {
				return Exception.throwUnexpectedAlias.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUnmatchedImportArguments_0(names, node) {
			const fragments = KSHelper.mapArray(names, function(name) {
				return KSHelper.concatString("\"", name, "\"");
			});
			throw new SyntaxException(KSHelper.concatString("The import can't match the argument", ((fragments.length > 1) ? "s" : ""), ": ", fragments.join(", ")), node);
		}
		static throwUnmatchedImportArguments() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwUnmatchedImportArguments_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwUnmatchedImportArguments) {
				return Exception.throwUnmatchedImportArguments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUnmatchedMacro_0(name, node, data) {
			throw new SyntaxException(KSHelper.concatString("The macro \"", name, "\" can't be matched"), node, data);
		}
		static throwUnmatchedMacro() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return SyntaxException.__ks_sttc_throwUnmatchedMacro_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwUnmatchedMacro) {
				return Exception.throwUnmatchedMacro.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUnnamedWildcardImport_0(node) {
			throw new SyntaxException("Wilcard import can't be named", node);
		}
		static throwUnnamedWildcardImport() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwUnnamedWildcardImport_0(arguments[0]);
				}
			}
			if(Exception.throwUnnamedWildcardImport) {
				return Exception.throwUnnamedWildcardImport.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUnrecognizedStructField_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The argument \"", name, "\" isn't recognized to create the struct"), node);
		}
		static throwUnrecognizedStructField() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwUnrecognizedStructField_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwUnrecognizedStructField) {
				return Exception.throwUnrecognizedStructField.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUnrecognizedTupleField_0(name, node) {
			throw new SyntaxException(KSHelper.concatString("The argument \"", name, "\" isn't recognized to create the tuple"), node);
		}
		static throwUnrecognizedTupleField() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwUnrecognizedTupleField_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwUnrecognizedTupleField) {
				return Exception.throwUnrecognizedTupleField.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUnreportedError_0(node) {
			throw new SyntaxException("An error is unreported, it must be caught or declared to be thrown", node);
		}
		static __ks_sttc_throwUnreportedError_1(name, node) {
			throw new SyntaxException(KSHelper.concatString("An error \"", name, "\" is unreported, it must be caught or declared to be thrown"), node);
		}
		static throwUnreportedError() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwUnreportedError_0(arguments[0]);
				}
			}
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return SyntaxException.__ks_sttc_throwUnreportedError_1(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwUnreportedError) {
				return Exception.throwUnreportedError.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUnsupportedDestructuringAssignment_0(node) {
			throw new SyntaxException("The current destructuring assignment is unsupported", node);
		}
		static throwUnsupportedDestructuringAssignment() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return SyntaxException.__ks_sttc_throwUnsupportedDestructuringAssignment_0(arguments[0]);
				}
			}
			if(Exception.throwUnsupportedDestructuringAssignment) {
				return Exception.throwUnsupportedDestructuringAssignment.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class TargetException extends Exception {
		constructor() {
			super(...arguments);
		}
		__ks_init() {
			Exception.prototype.__ks_init.call(this);
		}
		static __ks_sttc_throwNotSupported_0(target, node) {
			throw new TargetException(KSHelper.concatString("The target \"", target.name, "-v", target.version, "\" isn't supported"), node);
		}
		static throwNotSupported() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TargetException.__ks_sttc_throwNotSupported_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotSupported) {
				return Exception.throwNotSupported.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class TypeException extends Exception {
		constructor() {
			super(...arguments);
		}
		__ks_init() {
			Exception.prototype.__ks_init.call(this);
		}
		static __ks_sttc_throwCannotBeInstantiated_0(name, node) {
			throw new TypeException(KSHelper.concatString("Class \"", name, "\" is abstract so it can't be instantiated"), node);
		}
		static throwCannotBeInstantiated() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwCannotBeInstantiated_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwCannotBeInstantiated) {
				return Exception.throwCannotBeInstantiated.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwConstructorWithoutNew_0(name, node) {
			throw new TypeException(KSHelper.concatString("Class constructor \"", name, "\" cannot be invoked without 'new'"), node);
		}
		static throwConstructorWithoutNew() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwConstructorWithoutNew_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwConstructorWithoutNew) {
				return Exception.throwConstructorWithoutNew.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwExpectedReturnedValue_0(type, node) {
			throw new TypeException(KSHelper.concatString("A value of type ", type.toQuote(true), " is expected to be returned"), node);
		}
		static throwExpectedReturnedValue() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwExpectedReturnedValue_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwExpectedReturnedValue) {
				return Exception.throwExpectedReturnedValue.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwExpectedThrownError_0(node) {
			throw new TypeException("An error is expected to be thrown", node);
		}
		static throwExpectedThrownError() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return TypeException.__ks_sttc_throwExpectedThrownError_0(arguments[0]);
				}
			}
			if(Exception.throwExpectedThrownError) {
				return Exception.throwExpectedThrownError.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwImplFieldToSealedType_0(node) {
			throw new TypeException("impl can add field to only non-sealed type", node);
		}
		static throwImplFieldToSealedType() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return TypeException.__ks_sttc_throwImplFieldToSealedType_0(arguments[0]);
				}
			}
			if(Exception.throwImplFieldToSealedType) {
				return Exception.throwImplFieldToSealedType.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwImplInvalidType_0(node) {
			throw new TypeException("impl has an invalid type", node);
		}
		static throwImplInvalidType() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return TypeException.__ks_sttc_throwImplInvalidType_0(arguments[0]);
				}
			}
			if(Exception.throwImplInvalidType) {
				return Exception.throwImplInvalidType.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalid_0(name, node) {
			throw new TypeException(KSHelper.concatString("Invalid type \"", name, "\""), node);
		}
		static throwInvalid() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwInvalid_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwInvalid) {
				return Exception.throwInvalid.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidAssignement_0(declaredType, valueType, node) {
			if(valueType.__ks_func_isNull_0() === true) {
				throw new TypeException("The variable of type " + declaredType.__ks_func_toQuote_1(true) + " can't be assigned with the value \"null\"", node);
			}
			else {
				throw new TypeException("The variable of type " + declaredType.__ks_func_toQuote_1(true) + " can't be assigned with a value of type " + valueType.__ks_func_toQuote_1(true), node);
			}
		}
		static __ks_sttc_throwInvalidAssignement_1(name, declaredType, valueType, node) {
			if(valueType.__ks_func_isNull_0() === true) {
				throw new TypeException("The variable \"" + name + "\" of type " + declaredType.__ks_func_toQuote_1(true) + " can't be assigned with the value \"null\"", node);
			}
			else {
				throw new TypeException("The variable \"" + name + "\" of type " + declaredType.__ks_func_toQuote_1(true) + " can't be assigned with a value of type " + valueType.__ks_func_toQuote_1(true), node);
			}
		}
		static __ks_sttc_throwInvalidAssignement_2(name, declaredType, valueType, node) {
			if(valueType.__ks_func_isNull_0() === true) {
				throw new TypeException(KSHelper.concatString("The variable ", name.toQuote(true), " of type ", declaredType.__ks_func_toQuote_1(true), " can't be assigned with the value \"null\""), node);
			}
			else {
				throw new TypeException(KSHelper.concatString("The variable ", name.toQuote(true), " of type ", declaredType.__ks_func_toQuote_1(true), " can't be assigned with a value of type ", valueType.__ks_func_toQuote_1(true)), node);
			}
		}
		static throwInvalidAssignement() {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = KSType.isValue;
			const t2 = KSType.isString;
			const t3 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2])) {
					return TypeException.__ks_sttc_throwInvalidAssignement_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(arguments.length === 4) {
				if(t2(arguments[0])) {
					if(t0(arguments[1]) && t0(arguments[2]) && t1(arguments[3])) {
						return TypeException.__ks_sttc_throwInvalidAssignement_1(arguments[0], arguments[1], arguments[2], arguments[3]);
					}
					throw KSHelper.badArgs();
				}
				if(t3(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t1(arguments[3])) {
					return TypeException.__ks_sttc_throwInvalidAssignement_2(arguments[0], arguments[1], arguments[2], arguments[3]);
				}
			}
			if(Exception.throwInvalidAssignement) {
				return Exception.throwInvalidAssignement.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidBinding_0(expected, node) {
			throw new TypeException(KSHelper.concatString("The binding is expected to be of type \"", expected, "\""), node);
		}
		static throwInvalidBinding() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwInvalidBinding_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwInvalidBinding) {
				return Exception.throwInvalidBinding.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidCasting_0(node) {
			throw new TypeException("Only variables can be casted", node);
		}
		static throwInvalidCasting() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return TypeException.__ks_sttc_throwInvalidCasting_0(arguments[0]);
				}
			}
			if(Exception.throwInvalidCasting) {
				return Exception.throwInvalidCasting.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidComparison_0(left, right, node) {
			throw new TypeException(KSHelper.concatString("The expression ", left.toQuote(true), " of type ", left.type().toQuote(true), " can't be compared to a value of type ", right.type().toQuote(true)), node);
		}
		static throwInvalidComparison() {
			const t0 = value => KSType.isClassInstance(value, AbstractNode);
			const t1 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2])) {
					return TypeException.__ks_sttc_throwInvalidComparison_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwInvalidComparison) {
				return Exception.throwInvalidComparison.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidCondition_0(expression, node) {
			throw new TypeException(KSHelper.concatString("The condition ", expression.toQuote(true), " is expected to be of type \"Boolean\" or \"Any\" and not of type ", expression.type().toQuote(true)), node);
		}
		static throwInvalidCondition() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwInvalidCondition_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwInvalidCondition) {
				return Exception.throwInvalidCondition.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidForInExpression_0(node) {
			throw new TypeException("\"for..in\" must be used with an array", node);
		}
		static throwInvalidForInExpression() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return TypeException.__ks_sttc_throwInvalidForInExpression_0(arguments[0]);
				}
			}
			if(Exception.throwInvalidForInExpression) {
				return Exception.throwInvalidForInExpression.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidForOfExpression_0(node) {
			throw new TypeException("\"for..of\" must be used with a dictionary", node);
		}
		static throwInvalidForOfExpression() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return TypeException.__ks_sttc_throwInvalidForOfExpression_0(arguments[0]);
				}
			}
			if(Exception.throwInvalidForOfExpression) {
				return Exception.throwInvalidForOfExpression.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidOperand_0(expression, operator, node) {
			throw new TypeException(KSHelper.concatString("The expression ", expression.toQuote(true), " of type ", expression.type().toQuote(true), " is expected to be of type \"", $operatorTypes[operator].join("\", \""), "\" or \"Any\" in a ", operator, " operation"), node);
		}
		static throwInvalidOperand() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return TypeException.__ks_sttc_throwInvalidOperand_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwInvalidOperand) {
				return Exception.throwInvalidOperand.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidSpread_0(node) {
			throw new TypeException("Spread operator require an array", node);
		}
		static throwInvalidSpread() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return TypeException.__ks_sttc_throwInvalidSpread_0(arguments[0]);
				}
			}
			if(Exception.throwInvalidSpread) {
				return Exception.throwInvalidSpread.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwInvalidTypeChecking_0(left, right, node) {
			throw new TypeException(KSHelper.concatString("The variable of type ", left.toQuote(true), " can never be of type ", right.toQuote(true)), node);
		}
		static throwInvalidTypeChecking() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return TypeException.__ks_sttc_throwInvalidTypeChecking_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwInvalidTypeChecking) {
				return Exception.throwInvalidTypeChecking.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotAlien_0(name, node) {
			throw new TypeException(KSHelper.concatString("The type \"", name, "\" must be declared externally"), node);
		}
		static throwNotAlien() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwNotAlien_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotAlien) {
				return Exception.throwNotAlien.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotAsyncFunction_0(name, node) {
			throw new TypeException(KSHelper.concatString("The function \"", name, "\" is not asynchronous"), node);
		}
		static throwNotAsyncFunction() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwNotAsyncFunction_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotAsyncFunction) {
				return Exception.throwNotAsyncFunction.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotCastableTo_0(valueType, castingType, node) {
			throw new TypeException("The type " + valueType.__ks_func_toQuote_1(true) + " can't be casted as a " + castingType.__ks_func_toQuote_1(true), node);
		}
		static throwNotCastableTo() {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2])) {
					return TypeException.__ks_sttc_throwNotCastableTo_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwNotCastableTo) {
				return Exception.throwNotCastableTo.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotClass_0(name, node) {
			throw new TypeException(KSHelper.concatString("Identifier \"", name, "\" is not a class"), node);
		}
		static throwNotClass() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwNotClass_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotClass) {
				return Exception.throwNotClass.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotCompatibleArgument_0(argname, modname, node) {
			throw new TypeException(KSHelper.concatString("The argument \"", argname, "\" of the module \"", modname, "\" isn't compatible"), node);
		}
		static __ks_sttc_throwNotCompatibleArgument_1(varname, argname, modname, node) {
			throw new TypeException(KSHelper.concatString("The variable \"", varname, "\" and the argument \"", argname, "\" of the module \"", modname, "\" aren't compatible"), node);
		}
		static throwNotCompatibleArgument() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return TypeException.__ks_sttc_throwNotCompatibleArgument_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(arguments.length === 4) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3])) {
					return TypeException.__ks_sttc_throwNotCompatibleArgument_1(arguments[0], arguments[1], arguments[2], arguments[3]);
				}
			}
			if(Exception.throwNotCompatibleArgument) {
				return Exception.throwNotCompatibleArgument.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotCompatibleDefinition_0(varname, argname, modname, node) {
			throw new TypeException(KSHelper.concatString("The definition for \"", varname, "\" and the variable \"", argname, "\" of the module \"", modname, "\" aren't compatible"), node);
		}
		static throwNotCompatibleDefinition() {
			const t0 = KSType.isValue;
			if(arguments.length === 4) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3])) {
					return TypeException.__ks_sttc_throwNotCompatibleDefinition_0(arguments[0], arguments[1], arguments[2], arguments[3]);
				}
			}
			if(Exception.throwNotCompatibleDefinition) {
				return Exception.throwNotCompatibleDefinition.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotEnum_0(name, node) {
			throw new TypeException(KSHelper.concatString("Identifier \"", name, "\" is not an enum"), node);
		}
		static throwNotEnum() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwNotEnum_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotEnum) {
				return Exception.throwNotEnum.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotNamespace_0(name, node) {
			throw new TypeException(KSHelper.concatString("Identifier \"", name, "\" is not a namespace"), node);
		}
		static throwNotNamespace() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwNotNamespace_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotNamespace) {
				return Exception.throwNotNamespace.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotNullableExistential_0(expression, node) {
			throw new TypeException(KSHelper.concatString("The existential test of ", expression.toQuote(true), " is always positive"), node);
		}
		static throwNotNullableExistential() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwNotNullableExistential_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotNullableExistential) {
				return Exception.throwNotNullableExistential.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotNullableOperand_0(expression, operator, node) {
			throw new TypeException(KSHelper.concatString("The operand ", expression.toQuote(true), " can't be nullable in a ", operator, " operation"), node);
		}
		static throwNotNullableOperand() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return TypeException.__ks_sttc_throwNotNullableOperand_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwNotNullableOperand) {
				return Exception.throwNotNullableOperand.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotStruct_0(name, node) {
			throw new TypeException(KSHelper.concatString("Identifier \"", name, "\" is not a struct"), node);
		}
		static throwNotStruct() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwNotStruct_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotStruct) {
				return Exception.throwNotStruct.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotTuple_0(name, node) {
			throw new TypeException(KSHelper.concatString("Identifier \"", name, "\" is not a tuple"), node);
		}
		static throwNotTuple() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwNotTuple_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotTuple) {
				return Exception.throwNotTuple.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNotSyncFunction_0(name, node) {
			throw new TypeException(KSHelper.concatString("The function \"", name, "\" is not synchronous"), node);
		}
		static throwNotSyncFunction() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwNotSyncFunction_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNotSyncFunction) {
				return Exception.throwNotSyncFunction.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNullableCaller_0(property, node) {
			throw new TypeException(KSHelper.concatString("The caller of \"", property, "\" can't be nullable"), node);
		}
		static throwNullableCaller() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwNullableCaller_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNullableCaller) {
				return Exception.throwNullableCaller.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNullTypeChecking_0(type, node) {
			throw new TypeException(KSHelper.concatString("The variable is \"null\" and can't be checked against the type ", type.toQuote(true)), node);
		}
		static throwNullTypeChecking() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwNullTypeChecking_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNullTypeChecking) {
				return Exception.throwNullTypeChecking.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwNullTypeVariable_0(name, node) {
			throw new TypeException(KSHelper.concatString("The variable \"", name, "\" can't be of type \"Null\""), node);
		}
		static throwNullTypeVariable() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwNullTypeVariable_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwNullTypeVariable) {
				return Exception.throwNullTypeVariable.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwRequireClass_0(node) {
			throw new TypeException("An instance is required", node);
		}
		static throwRequireClass() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return TypeException.__ks_sttc_throwRequireClass_0(arguments[0]);
				}
			}
			if(Exception.throwRequireClass) {
				return Exception.throwRequireClass.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUnexpectedExportType_0(name, expected, unexpected, node) {
			throw new TypeException(KSHelper.concatString("The type of export \"", name, "\" must be ", expected.toQuote(true), " and not ", unexpected.toQuote(true)), node);
		}
		static throwUnexpectedExportType() {
			const t0 = KSType.isValue;
			if(arguments.length === 4) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3])) {
					return TypeException.__ks_sttc_throwUnexpectedExportType_0(arguments[0], arguments[1], arguments[2], arguments[3]);
				}
			}
			if(Exception.throwUnexpectedExportType) {
				return Exception.throwUnexpectedExportType.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUnexpectedInoperative_0(operand, node) {
			throw new TypeException(KSHelper.concatString("The operand ", operand.toQuote(true), " can't be of type ", operand.type().toQuote(true)), node);
		}
		static throwUnexpectedInoperative() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwUnexpectedInoperative_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwUnexpectedInoperative) {
				return Exception.throwUnexpectedInoperative.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUnexpectedReturnedValue_0(node) {
			throw new TypeException("No values are expected to be returned", node);
		}
		static throwUnexpectedReturnedValue() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return TypeException.__ks_sttc_throwUnexpectedReturnedValue_0(arguments[0]);
				}
			}
			if(Exception.throwUnexpectedReturnedValue) {
				return Exception.throwUnexpectedReturnedValue.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUnexpectedReturnType_0(expected, unexpected, node) {
			throw new TypeException(KSHelper.concatString("The return type must be ", expected.toQuote(true), " and not ", unexpected.toQuote(true)), node);
		}
		static throwUnexpectedReturnType() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return TypeException.__ks_sttc_throwUnexpectedReturnType_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Exception.throwUnexpectedReturnType) {
				return Exception.throwUnexpectedReturnType.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_throwUnnecessaryTypeChecking_0(type, node) {
			throw new TypeException(KSHelper.concatString("The variable is always of type ", type.toQuote(true)), node);
		}
		static throwUnnecessaryTypeChecking() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return TypeException.__ks_sttc_throwUnnecessaryTypeChecking_0(arguments[0], arguments[1]);
				}
			}
			if(Exception.throwUnnecessaryTypeChecking) {
				return Exception.throwUnnecessaryTypeChecking.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	const $extensions = (() => {
		const d = new Dictionary();
		d.binary = ".ksb";
		d.exports = ".kse";
		d.hash = ".ksh";
		d.requirements = ".ksr";
		d.source = ".ks";
		return d;
	})();
	const $targetRegex = /^(\w+)-v((?:\d+)(?:\.\d+)?(?:\.\d+)?)$/;
	const $typeofs = (() => {
		const d = new Dictionary();
		d.Array = true;
		d.Boolean = true;
		d.Class = true;
		d.Dictionary = true;
		d.Enum = true;
		d.Function = true;
		d.Namespace = true;
		d.Number = true;
		d.Object = true;
		d.Primitive = true;
		d.RegExp = true;
		d.String = true;
		d.Struct = true;
		d.Tuple = true;
		return d;
	})();
	const $ast = (() => {
		const d = new Dictionary();
		d.block = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return __ks_rt.__ks_0.call(null, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(data) {
				if(KSHelper.valueOf(data.kind) === NodeKind.Block.value) {
					return data;
				}
				else {
					return (() => {
						const d = new Dictionary();
						d.kind = NodeKind.Block;
						d.statements = [data];
						d.start = data.start;
						d.end = data.end;
						return d;
					})();
				}
			};
			return __ks_rt;
		})();
		d.body = (() => {
			const __ks_rt = (...args) => {
				if(args.length === 1) {
					return __ks_rt.__ks_0.call(null, args[0]);
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(data) {
				if(data === void 0) {
					data = null;
				}
				if(!KSType.isValue(data.body)) {
					return (() => {
						const d = new Dictionary();
						d.kind = NodeKind.Block;
						d.statements = [];
						d.start = data.start;
						d.end = data.end;
						return d;
					})();
				}
				else if((KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) || (KSHelper.valueOf(data.body.kind) === NodeKind.ReturnStatement.value)) {
					return data.body;
				}
				else if((KSHelper.valueOf(data.body.kind) === NodeKind.IfStatement.value) || (KSHelper.valueOf(data.body.kind) === NodeKind.UnlessStatement.value)) {
					return (() => {
						const d = new Dictionary();
						d.kind = NodeKind.Block;
						d.statements = [data.body];
						d.start = data.body.start;
						d.end = data.body.end;
						return d;
					})();
				}
				else {
					return (() => {
						const d = new Dictionary();
						d.kind = NodeKind.ReturnStatement;
						d.value = data.body;
						d.start = data.body.start;
						d.end = data.body.end;
						return d;
					})();
				}
			};
			return __ks_rt;
		})();
		d.identifier = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return __ks_rt.__ks_0.call(null, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(name) {
				if(KSType.isString(name)) {
					return (() => {
						const d = new Dictionary();
						d.kind = NodeKind.Identifier;
						d.name = name;
						return d;
					})();
				}
				else {
					return name;
				}
			};
			return __ks_rt;
		})();
		return d;
	})();
	const $runtime = (() => {
		const d = new Dictionary();
		d.dictionary = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return __ks_rt.__ks_0.call(null, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(node) {
				KSType.isFunction(node.module) ? node.module().flag("Dictionary") : null;
				return node._options.runtime.dictionary.alias;
			};
			return __ks_rt;
		})();
		d.getVariable = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return __ks_rt.__ks_0.call(null, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(name, node) {
				if((node._options.runtime.dictionary.alias === name) || ((node.isIncluded() === true) && (name === "Dictionary"))) {
					KSType.isFunction(node.module) ? node.module().flag("Dictionary") : null;
					return node._options.runtime.dictionary.alias;
				}
				else if((node._options.runtime.helper.alias === name) || ((node.isIncluded() === true) && (name === "Helper"))) {
					KSType.isFunction(node.module) ? node.module().flag("Helper") : null;
					return node._options.runtime.helper.alias;
				}
				else if((node._options.runtime.type.alias === name) || ((node.isIncluded() === true) && (name === "Type"))) {
					KSType.isFunction(node.module) ? node.module().flag("Type") : null;
					return node._options.runtime.type.alias;
				}
				else {
					return null;
				}
			};
			return __ks_rt;
		})();
		d.helper = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return __ks_rt.__ks_0.call(null, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(node) {
				KSType.isFunction(node.module) ? node.module().flag("Helper") : null;
				return node._options.runtime.helper.alias;
			};
			return __ks_rt;
		})();
		d.immutableScope = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return __ks_rt.__ks_0.call(null, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(node) {
				return (node._options.format.variables === "es5") ? "var " : "const ";
			};
			return __ks_rt;
		})();
		d.initFlag = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return __ks_rt.__ks_0.call(null, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(node) {
				KSType.isFunction(node.module) ? node.module().flag("initFlag") : null;
				return node._options.runtime.initFlag.alias;
			};
			return __ks_rt;
		})();
		d.operator = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return __ks_rt.__ks_0.call(null, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(node) {
				KSType.isFunction(node.module) ? node.module().flag("Operator") : null;
				return node._options.runtime.operator.alias;
			};
			return __ks_rt;
		})();
		d.scope = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return __ks_rt.__ks_0.call(null, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(node) {
				return (node._options.format.variables === "es5") ? "var " : "let ";
			};
			return __ks_rt;
		})();
		d.type = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return __ks_rt.__ks_0.call(null, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(node) {
				KSType.isFunction(node.module) ? node.module().flag("Type") : null;
				return node._options.runtime.type.alias;
			};
			return __ks_rt;
		})();
		d.typeof = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return __ks_rt.__ks_0.call(null, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(type, node = null) {
				if(KSType.isValue(node)) {
					if($typeofs[type] === true) {
						return KSHelper.concatString($runtime.type.__ks_0(node), ".is", type);
					}
					else {
						return null;
					}
				}
				else {
					return $typeofs[type];
				}
			};
			return __ks_rt;
		})();
		return d;
	})();
	class AbstractNode {
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
			this._data = null;
			this._parent = null;
			this._scope = null;
		}
		__ks_cons_0() {
		}
		__ks_cons_1(data, parent, scope = KSType.isValue(parent) ? parent.__ks_func_scope_0() : null) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			this._data = data;
			this._parent = parent;
			this._scope = scope;
			this._options = parent._options;
		}
		__ks_cons_2(data, parent, scope, kind) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			this._data = data;
			this._parent = parent;
			this._options = parent._options;
			this._scope = this.__ks_func_newScope_0(scope, kind);
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t2 = value => KSType.isClassInstance(value, Scope);
			const t3 = value => KSType.isEnumInstance(value, ScopeType);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 0) {
				return AbstractNode.prototype.__ks_cons_0.call(that);
			}
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return AbstractNode.prototype.__ks_cons_1.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 4) {
				if(t0(args[1]) && t2(args[2]) && t3(args[3])) {
					return AbstractNode.prototype.__ks_cons_2.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		authority() {
			return this.__ks_func_authority_rt.call(null, this, this, arguments);
		}
		__ks_func_authority_0() {
			return this._parent.__ks_func_authority_0();
		}
		__ks_func_authority_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_authority_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		data() {
			return this.__ks_func_data_rt.call(null, this, this, arguments);
		}
		__ks_func_data_0() {
			return this._data;
		}
		__ks_func_data_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_data_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		directory() {
			return this.__ks_func_directory_rt.call(null, this, this, arguments);
		}
		__ks_func_directory_0() {
			return this._parent.__ks_func_directory_0();
		}
		__ks_func_directory_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_directory_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		enhance() {
			return this.__ks_func_enhance_rt.call(null, this, this, arguments);
		}
		__ks_func_enhance_0() {
		}
		__ks_func_enhance_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_enhance_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		file() {
			return this.__ks_func_file_rt.call(null, this, this, arguments);
		}
		__ks_func_file_0() {
			return this._parent.__ks_func_file_0();
		}
		__ks_func_file_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_file_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		getFunctionNode() {
			return this.__ks_func_getFunctionNode_rt.call(null, this, this, arguments);
		}
		__ks_func_getFunctionNode_0() {
			return KSType.isValue(this._parent) ? this._parent.__ks_func_getFunctionNode_0() : null;
		}
		__ks_func_getFunctionNode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getFunctionNode_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		initiate() {
			return this.__ks_func_initiate_rt.call(null, this, this, arguments);
		}
		__ks_func_initiate_0() {
		}
		__ks_func_initiate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_initiate_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isConsumedError() {
			return this.__ks_func_isConsumedError_rt.call(null, this, this, arguments);
		}
		__ks_func_isConsumedError_0(error) {
			return this._parent.__ks_func_isConsumedError_0(error);
		}
		__ks_func_isConsumedError_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isConsumedError_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		isIncluded() {
			return this.__ks_func_isIncluded_rt.call(null, this, this, arguments);
		}
		__ks_func_isIncluded_0() {
			return this.__ks_func_file_0() !== this.__ks_func_module_0().file();
		}
		__ks_func_isIncluded_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isIncluded_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		module() {
			return this.__ks_func_module_rt.call(null, this, this, arguments);
		}
		__ks_func_module_0() {
			return this._parent.__ks_func_module_0();
		}
		__ks_func_module_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_module_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		newScope() {
			return this.__ks_func_newScope_rt.call(null, this, this, arguments);
		}
		__ks_func_newScope_0(scope, type) {
			if(type === ScopeType.Bleeding) {
				return BleedingScope.__ks_new_0(scope);
			}
			else if(type === ScopeType.Block) {
				return BlockScope.__ks_new_0(scope);
			}
			else if(type === ScopeType.Function) {
				return FunctionScope.__ks_new_0(scope);
			}
			else if(type === ScopeType.Hollow) {
				return HollowScope.__ks_new_0(scope);
			}
			else if(type === ScopeType.InlineBlock) {
				if(this._options.format.variables === "es6") {
					return InlineBlockScope.__ks_new_0(scope);
				}
				else {
					return LaxInlineBlockScope.__ks_new_0(scope);
				}
			}
			else if(type === ScopeType.Operation) {
				return OperationScope.__ks_new_0(scope);
			}
		}
		__ks_func_newScope_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Scope);
			const t1 = value => KSType.isEnumInstance(value, ScopeType);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_newScope_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		parent() {
			return this.__ks_func_parent_rt.call(null, this, this, arguments);
		}
		__ks_func_parent_0() {
			return this._parent;
		}
		__ks_func_parent_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parent_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		printDebug() {
			return this.__ks_func_printDebug_rt.call(null, this, this, arguments);
		}
		__ks_func_printDebug_0() {
			console.log(KSHelper.concatString(this.__ks_func_file_0(), ":", this._data.start.line));
		}
		__ks_func_printDebug_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_printDebug_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		reference() {
			return this.__ks_func_reference_rt.call(null, this, this, arguments);
		}
		__ks_func_reference_0() {
			if(KSType.isValue(this._parent) && KSType.isValue(this._parent.__ks_func_reference_0())) {
				return KSOperator.addOrConcat(this._parent.__ks_func_reference_0(), this._reference);
			}
			else {
				return this._reference;
			}
		}
		__ks_func_reference_1(reference) {
			if(reference === void 0) {
				reference = null;
			}
			this._reference = reference;
		}
		__ks_func_reference_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 0) {
				return proto.__ks_func_reference_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_reference_1.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		scope() {
			return this.__ks_func_scope_rt.call(null, this, this, arguments);
		}
		__ks_func_scope_0() {
			return this._scope;
		}
		__ks_func_scope_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_scope_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		statement() {
			return this.__ks_func_statement_rt.call(null, this, this, arguments);
		}
		__ks_func_statement_0() {
			return KSType.isValue(this._parent) ? this._parent.__ks_func_statement_0() : null;
		}
		__ks_func_statement_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_statement_0.call(that);
			}
			throw KSHelper.badArgs();
		}
	}
	const AttributeData = KSHelper.enum(Number, {
		Conditional: 0
	});
	const AttributeTarget = KSHelper.enum(Object, {
		Class: 1n,
		Conditional: 2n,
		Constructor: 4n,
		Field: 8n,
		Global: 16n,
		Method: 32n,
		Parameter: 64n,
		Property: 128n,
		Statement: 256n
	});
	const $attributes = new Dictionary();
	const $semverRegex = /^(\w+)(?:-v((?:\d+)(?:\.\d+)?(?:\.\d+)?))?$/;
	const $rules = (() => {
		const d = new Dictionary();
		d["no-undefined"] = ["noUndefined", true];
		d["non-exhaustive"] = ["nonExhaustive", true];
		d["ignore-misfit"] = ["ignoreMisfit", true];
		d["dont-ignore-misfit"] = ["ignoreMisfit", false];
		d["assert-override"] = ["assertOverride", true];
		d["dont-assert-override"] = ["assertOverride", false];
		d["assert-parameter"] = ["assertParameter", true];
		d["dont-assert-parameter"] = ["assertParameter", false];
		d["assert-parameter-type"] = ["assertParameterType", true];
		d["dont-assert-parameter-type"] = ["assertParameterType", false];
		d["assert-new-struct"] = ["assertNewStruct", true];
		d["dont-assert-new-struct"] = ["assertNewStruct", false];
		d["assert-new-tuple"] = ["assertNewTuple", true];
		d["dont-assert-new-tuple"] = ["assertNewTuple", false];
		return d;
	})();
	class Attribute {
		static __ks_new_0() {
			const o = Object.create(Attribute.prototype);
			o.__ks_init();
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
		}
		__ks_cons_rt(that, args) {
			if(args.length !== 0) {
				throw KSHelper.badArgs();
			}
		}
		static __ks_sttc_conditional_0(data, node) {
			if(KSType.isValue(data.attributes) ? KSOperator.gt(data.attributes.length, 0) : false) {
				for(let __ks_0 = 0, __ks_1 = data.attributes.length, attr; __ks_0 < __ks_1; ++__ks_0) {
					attr = data.attributes[__ks_0];
					let attribute = Attribute.get(attr.declaration, AttributeTarget.Conditional);
					if(KSType.isValue(attribute)) {
						return attribute.evaluate(node);
					}
				}
			}
			return true;
		}
		static conditional() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return Attribute.__ks_sttc_conditional_0(arguments[0], arguments[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_configure_0(data, options, mode, fileName, force) {
			if(options === void 0) {
				options = null;
			}
			if(force === void 0 || force === null) {
				force = false;
			}
			const clone = !(force === true) && (options !== null) && (KSOperator.bitwiseAnd(AttributeTarget.Global, mode) === 0n);
			if(options === null) {
				options = (() => {
					const d = new Dictionary();
					d.rules = new Dictionary();
					return d;
				})();
			}
			if(KSType.isValue(data.attributes) ? KSOperator.gt(data.attributes.length, 0) : false) {
				const cloned = new Dictionary();
				if(force === true) {
					options = __ks_Dictionary._sm_clone(options);
				}
				else if(clone) {
					const original = options;
					options = new Dictionary();
					for(const key in original) {
						const value = original[key];
						options[key] = value;
					}
				}
				for(let __ks_0 = 0, __ks_1 = data.attributes.length, attr; __ks_0 < __ks_1; ++__ks_0) {
					attr = data.attributes[__ks_0];
					let attribute = Attribute.get(attr.declaration, mode);
					if(KSType.isValue(attribute)) {
						if(clone) {
							options = attribute.clone(options, cloned);
						}
						options = attribute.configure(options, fileName, attr.start.line);
					}
				}
			}
			return options;
		}
		static configure() {
			const t0 = KSType.isValue;
			if(arguments.length >= 4 && arguments.length <= 5) {
				if(t0(arguments[0]) && t0(arguments[2]) && t0(arguments[3])) {
					return Attribute.__ks_sttc_configure_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
				}
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_get_0(data, targets) {
			let name = null;
			if(KSHelper.valueOf(data.kind) === NodeKind.AttributeExpression.value) {
				name = data.name.name;
			}
			else if(KSHelper.valueOf(data.kind) === NodeKind.Identifier.value) {
				name = data.name;
			}
			let clazz;
			if(KSType.isValue(name) && (KSType.isValue($attributes[name]) ? (clazz = $attributes[name], true) : false) && (KSOperator.bitwiseAnd(clazz.target(), targets) !== 0n)) {
				return new clazz(data);
			}
			else {
				return null;
			}
		}
		static get() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return Attribute.__ks_sttc_get_0(arguments[0], arguments[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_register_0(__ks_class_1) {
			let name = __ks_String.__ks_func_dasherize_0.call(__ks_String.__ks_func_toFirstLowerCase_0.call(KSHelper.cast(__ks_class_1.name, "String", false, null, "String")));
			if(KSOperator.gt(name.length, 10) && (name.substr(-10) === "-attribute")) {
				name = name.substr(0, KSOperator.subtraction(name.length, 10));
			}
			$attributes[name] = __ks_class_1;
		}
		static register() {
			const t0 = KSType.isClass;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return Attribute.__ks_sttc_register_0(arguments[0]);
				}
			}
			throw KSHelper.badArgs();
		}
	}
	class ElseAttribute extends Attribute {
		static __ks_new_0(...args) {
			const o = Object.create(ElseAttribute.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data) {
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return ElseAttribute.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		clone() {
			return this.__ks_func_clone_rt.call(null, this, this, arguments);
		}
		__ks_func_clone_0(options, cloned) {
			return options;
		}
		__ks_func_clone_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_clone_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_clone_rt) {
				return super.__ks_func_clone_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		evaluate() {
			return this.__ks_func_evaluate_rt.call(null, this, this, arguments);
		}
		__ks_func_evaluate_0(node) {
			let flag = node.getAttributeData(AttributeData.Conditional);
			if(KSType.isValue(flag)) {
				return !(flag === true);
			}
			else {
				SyntaxException.throwNoIfAttribute();
			}
		}
		__ks_func_evaluate_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_evaluate_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_evaluate_rt) {
				return super.__ks_func_evaluate_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_target_0() {
			return AttributeTarget.Conditional;
		}
		static target() {
			if(arguments.length === 0) {
				return ElseAttribute.__ks_sttc_target_0();
			}
			if(Attribute.target) {
				return Attribute.target.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class ErrorAttribute extends Attribute {
		static __ks_new_0(...args) {
			const o = Object.create(ErrorAttribute.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data) {
			if(data === void 0) {
				data = null;
			}
			this._data = data;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return ErrorAttribute.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		clone() {
			return this.__ks_func_clone_rt.call(null, this, this, arguments);
		}
		__ks_func_clone_1(options, cloned) {
			if(!KSType.isValue(cloned.error)) {
				options.error = __ks_Dictionary._sm_clone(options.error);
				cloned.error = true;
			}
			return options;
		}
		__ks_func_clone_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_clone_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_clone_rt) {
				return super.__ks_func_clone_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		configure() {
			return this.__ks_func_configure_rt.call(null, this, this, arguments);
		}
		__ks_func_configure_0(options, fileName, lineNumber) {
			for(let __ks_0 = 0, __ks_1 = this._data.arguments.length, arg; __ks_0 < __ks_1; ++__ks_0) {
				arg = this._data.arguments[__ks_0];
				let __ks_2 = arg.kind.valueOf();
				if(__ks_2 === NodeKind.AttributeExpression.value) {
					if(arg.name.name === "ignore") {
						for(let __ks_3 = 0, __ks_4 = arg.arguments.length, a; __ks_3 < __ks_4; ++__ks_3) {
							a = arg.arguments[__ks_3];
							options.error.ignore.push(a.name);
						}
					}
					else if(arg.name.name === "raise") {
						for(let __ks_3 = 0, __ks_4 = arg.arguments.length, a; __ks_3 < __ks_4; ++__ks_3) {
							a = arg.arguments[__ks_3];
							options.error.raise.push(a.name);
						}
					}
				}
				else if(__ks_2 === NodeKind.Identifier.value) {
					let __ks_3 = arg.name;
					if(__ks_3 === "off") {
						options.error.level = "off";
					}
				}
			}
			return options;
		}
		__ks_func_configure_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_configure_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_configure_rt) {
				return super.__ks_func_configure_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_target_1() {
			return AttributeTarget(AttributeTarget.Global | AttributeTarget.Property | AttributeTarget.Statement);
		}
		static target() {
			if(arguments.length === 0) {
				return ErrorAttribute.__ks_sttc_target_1();
			}
			if(Attribute.target) {
				return Attribute.target.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class FormatAttribute extends Attribute {
		static __ks_new_0(...args) {
			const o = Object.create(FormatAttribute.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data) {
			if(data === void 0) {
				data = null;
			}
			this._data = data;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return FormatAttribute.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		clone() {
			return this.__ks_func_clone_rt.call(null, this, this, arguments);
		}
		__ks_func_clone_2(options, cloned) {
			if(!KSType.isValue(cloned.format)) {
				options.format = __ks_Dictionary._sm_clone(options.format);
				cloned.format = true;
			}
			return options;
		}
		__ks_func_clone_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_clone_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_clone_rt) {
				return super.__ks_func_clone_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		configure() {
			return this.__ks_func_configure_rt.call(null, this, this, arguments);
		}
		__ks_func_configure_1(options, fileName, lineNumber) {
			for(let __ks_0 = 0, __ks_1 = this._data.arguments.length, arg; __ks_0 < __ks_1; ++__ks_0) {
				arg = this._data.arguments[__ks_0];
				if(KSHelper.valueOf(arg.kind) === NodeKind.AttributeOperation.value) {
					options.format[arg.name.name] = arg.value.value;
				}
			}
			return options;
		}
		__ks_func_configure_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_configure_1.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_configure_rt) {
				return super.__ks_func_configure_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_target_2() {
			return AttributeTarget(AttributeTarget.Global | AttributeTarget.Statement);
		}
		static target() {
			if(arguments.length === 0) {
				return FormatAttribute.__ks_sttc_target_2();
			}
			if(Attribute.target) {
				return Attribute.target.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class IfAttribute extends Attribute {
		static __ks_new_0(...args) {
			const o = Object.create(IfAttribute.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data) {
			if(data === void 0) {
				data = null;
			}
			this._data = data;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return IfAttribute.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		clone() {
			return this.__ks_func_clone_rt.call(null, this, this, arguments);
		}
		__ks_func_clone_3(options, cloned) {
			return options;
		}
		__ks_func_clone_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_clone_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_clone_rt) {
				return super.__ks_func_clone_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		compareVersion() {
			return this.__ks_func_compareVersion_rt.call(null, this, this, arguments);
		}
		__ks_func_compareVersion_0(a, b) {
			const as = a.split(".");
			const bs = b.split(".");
			let ai = parseInt(as[0]);
			let bi = parseInt(bs[0]);
			if(KSOperator.lt(ai, bi)) {
				return -1;
			}
			else if(KSOperator.gt(ai, bi)) {
				return 1;
			}
			else {
				ai = (as.length === 1) ? 0 : parseInt(as[1]);
				bi = (bs.length === 1) ? 0 : parseInt(bs[1]);
				if(KSOperator.lt(ai, bi)) {
					return -1;
				}
				else if(KSOperator.gt(ai, bi)) {
					return 1;
				}
				else {
					return 0;
				}
			}
		}
		__ks_func_compareVersion_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_compareVersion_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_compareVersion_rt) {
				return super.__ks_func_compareVersion_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		evaluate() {
			return this.__ks_func_evaluate_rt.call(null, this, this, arguments);
		}
		__ks_func_evaluate_1(node) {
			if(this._data.arguments.length !== 1) {
				SyntaxException.__ks_sttc_throwTooMuchAttributesForIfAttribute_0();
			}
			const flag = this.evaluate(this._data.arguments[0], node.target());
			node.setAttributeData(AttributeData.Conditional, flag);
			return flag;
		}
		__ks_func_evaluate_2(data, target) {
			if(KSHelper.valueOf(data.kind) === NodeKind.AttributeExpression.value) {
				let __ks_0 = data.name.name;
				if(__ks_0 === "all") {
					for(let __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
						arg = data.arguments[__ks_1];
						if(!(this.evaluate(arg, target) === true)) {
							return false;
						}
					}
					return true;
				}
				else if(__ks_0 === "any") {
					for(let __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
						arg = data.arguments[__ks_1];
						if(this.evaluate(arg, target) === true) {
							return true;
						}
					}
					return false;
				}
				else if(__ks_0 === "gt") {
					let match = $semverRegex.exec(data.arguments[0].name);
					if(KSType.isValue(match)) {
						if((match[1] !== target.name) || !KSType.isValue(match[2])) {
							return false;
						}
						return KSOperator.gt(this.compareVersion(target.version, match[2]), 0);
					}
					else {
						return false;
					}
				}
				else if(__ks_0 === "gte") {
					let match = $semverRegex.exec(data.arguments[0].name);
					if(KSType.isValue(match)) {
						if(match[1] !== target.name) {
							return false;
						}
						else if(!KSType.isValue(match[2])) {
							return true;
						}
						return KSOperator.gte(this.compareVersion(target.version, match[2]), 0);
					}
					else {
						return false;
					}
				}
				else if(__ks_0 === "lt") {
					let match = $semverRegex.exec(data.arguments[0].name);
					if(KSType.isValue(match)) {
						if((match[1] !== target.name) || !KSType.isValue(match[2])) {
							return false;
						}
						return KSOperator.lt(this.compareVersion(target.version, match[2]), 0);
					}
					else {
						return false;
					}
				}
				else if(__ks_0 === "lte") {
					let match = $semverRegex.exec(data.arguments[0].name);
					if(KSType.isValue(match)) {
						if(match[1] !== target.name) {
							return false;
						}
						else if(!KSType.isValue(match[2])) {
							return true;
						}
						return KSOperator.lte(this.compareVersion(target.version, match[2]), 0);
					}
					else {
						return false;
					}
				}
				else if(__ks_0 === "none") {
					for(let __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
						arg = data.arguments[__ks_1];
						if(this.evaluate(arg, target) === true) {
							return false;
						}
					}
					return true;
				}
				else if(__ks_0 === "one") {
					let count = 0;
					for(let __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
						arg = data.arguments[__ks_1];
						if(this.evaluate(arg, target) === true) {
							++count;
						}
					}
					return count === 1;
				}
				else {
					console.info(data);
					throw new NotImplementedException();
				}
			}
			else if(KSHelper.valueOf(data.kind) === NodeKind.Identifier.value) {
				let match, __ks_0;
				if(KSType.isValue(__ks_0 = $semverRegex.exec(data.name)) ? (match = __ks_0, true) : false) {
					if(KSType.isValue(match[2])) {
						return (target.name === match[1]) && (target.version === match[2]);
					}
					else {
						return target.name === match[1];
					}
				}
				else {
					return false;
				}
			}
		}
		__ks_func_evaluate_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_evaluate_1.call(that, args[0]);
				}
			}
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_evaluate_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_evaluate_rt) {
				return super.__ks_func_evaluate_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_target_3() {
			return AttributeTarget.Conditional;
		}
		static target() {
			if(arguments.length === 0) {
				return IfAttribute.__ks_sttc_target_3();
			}
			if(Attribute.target) {
				return Attribute.target.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class ParseAttribute extends Attribute {
		static __ks_new_0(...args) {
			const o = Object.create(ParseAttribute.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data) {
			if(data === void 0) {
				data = null;
			}
			this._data = data;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return ParseAttribute.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		clone() {
			return this.__ks_func_clone_rt.call(null, this, this, arguments);
		}
		__ks_func_clone_4(options, cloned) {
			if(!KSType.isValue(cloned.parse)) {
				options.parse = __ks_Dictionary._sm_clone(options.parse);
				cloned.parse = true;
			}
			return options;
		}
		__ks_func_clone_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_clone_4.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_clone_rt) {
				return super.__ks_func_clone_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		configure() {
			return this.__ks_func_configure_rt.call(null, this, this, arguments);
		}
		__ks_func_configure_2(options, fileName, lineNumber) {
			for(let __ks_0 = 0, __ks_1 = this._data.arguments.length, arg; __ks_0 < __ks_1; ++__ks_0) {
				arg = this._data.arguments[__ks_0];
				if(KSHelper.valueOf(arg.kind) === NodeKind.AttributeOperation.value) {
					options.parse[arg.name.name] = arg.value.value;
				}
			}
			return options;
		}
		__ks_func_configure_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_configure_2.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_configure_rt) {
				return super.__ks_func_configure_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_target_4() {
			return AttributeTarget(AttributeTarget.Global | AttributeTarget.Statement);
		}
		static target() {
			if(arguments.length === 0) {
				return ParseAttribute.__ks_sttc_target_4();
			}
			if(Attribute.target) {
				return Attribute.target.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class PreserveAttribute extends Attribute {
		static __ks_new_0(...args) {
			const o = Object.create(PreserveAttribute.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data) {
			if(data === void 0) {
				data = null;
			}
			this._data = data;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return PreserveAttribute.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		clone() {
			return this.__ks_func_clone_rt.call(null, this, this, arguments);
		}
		__ks_func_clone_5(options, cloned) {
			if(!KSType.isValue(cloned.parameters)) {
				options.parameters = __ks_Dictionary._sm_clone(options.parameters);
				cloned.parameters = true;
			}
			return options;
		}
		__ks_func_clone_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_clone_5.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_clone_rt) {
				return super.__ks_func_clone_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		configure() {
			return this.__ks_func_configure_rt.call(null, this, this, arguments);
		}
		__ks_func_configure_3(options, fileName, lineNumber) {
			options.parameters.preserve = true;
			return options;
		}
		__ks_func_configure_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_configure_3.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_configure_rt) {
				return super.__ks_func_configure_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_target_5() {
			return AttributeTarget.Parameter;
		}
		static target() {
			if(arguments.length === 0) {
				return PreserveAttribute.__ks_sttc_target_5();
			}
			if(Attribute.target) {
				return Attribute.target.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class PreserveParametersAttribute extends PreserveAttribute {
		static __ks_new_0(...args) {
			const o = Object.create(PreserveParametersAttribute.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		static __ks_sttc_target_5() {
			return AttributeTarget(AttributeTarget.Global | AttributeTarget.Statement);
		}
		static target() {
			if(arguments.length === 0) {
				return PreserveParametersAttribute.__ks_sttc_target_5();
			}
			if(PreserveAttribute.target) {
				return PreserveAttribute.target.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class RulesAttribute extends Attribute {
		static __ks_new_0(...args) {
			const o = Object.create(RulesAttribute.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data) {
			if(data === void 0) {
				data = null;
			}
			this._data = data;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return RulesAttribute.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		clone() {
			return this.__ks_func_clone_rt.call(null, this, this, arguments);
		}
		__ks_func_clone_6(options, cloned) {
			if(!KSType.isValue(cloned.rules)) {
				options.rules = __ks_Dictionary._sm_clone(options.rules);
				cloned.rules = true;
			}
			return options;
		}
		__ks_func_clone_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_clone_6.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_clone_rt) {
				return super.__ks_func_clone_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		configure() {
			return this.__ks_func_configure_rt.call(null, this, this, arguments);
		}
		__ks_func_configure_4(options, fileName, lineNumber) {
			for(let __ks_0 = 0, __ks_1 = this._data.arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._data.arguments[__ks_0];
				if(KSHelper.valueOf(argument.kind) === NodeKind.Identifier.value) {
					const name = argument.name.toLowerCase();
					let data = $rules[name];
					if(KSType.isValue(data)) {
						options.rules[data[0]] = data[1];
					}
					else {
						SyntaxException.throwInvalidRule(name, fileName, lineNumber);
					}
				}
			}
			return options;
		}
		__ks_func_configure_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_configure_4.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_configure_rt) {
				return super.__ks_func_configure_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_target_6() {
			return AttributeTarget(AttributeTarget.Global | AttributeTarget.Property | AttributeTarget.Statement);
		}
		static target() {
			if(arguments.length === 0) {
				return RulesAttribute.__ks_sttc_target_6();
			}
			if(Attribute.target) {
				return Attribute.target.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class RuntimeAttribute extends Attribute {
		static __ks_new_0(...args) {
			const o = Object.create(RuntimeAttribute.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data) {
			if(data === void 0) {
				data = null;
			}
			this._data = data;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return RuntimeAttribute.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		configure() {
			return this.__ks_func_configure_rt.call(null, this, this, arguments);
		}
		__ks_func_configure_5(options, fileName, lineNumber) {
			for(let __ks_0 = 0, __ks_1 = this._data.arguments.length, arg; __ks_0 < __ks_1; ++__ks_0) {
				arg = this._data.arguments[__ks_0];
				if(KSHelper.valueOf(arg.kind) === NodeKind.AttributeOperation.value) {
					if(arg.name.name === "package") {
						options.runtime.helper.package = options.runtime.type.package = arg.value.value;
					}
					else if(arg.name.name === "prefix") {
						const prefix = arg.value.value;
						options.runtime.helper.alias = KSOperator.addOrConcat(prefix, options.runtime.helper.alias);
						options.runtime.operator.alias = KSOperator.addOrConcat(prefix, options.runtime.operator.alias);
						options.runtime.type.alias = KSOperator.addOrConcat(prefix, options.runtime.type.alias);
					}
				}
				else if(KSHelper.valueOf(arg.kind) === NodeKind.AttributeExpression.value) {
					if(arg.name.name === "helper") {
						for(let __ks_2 = 0, __ks_3 = arg.arguments.length, __ks_arg_1; __ks_2 < __ks_3; ++__ks_2) {
							__ks_arg_1 = arg.arguments[__ks_2];
							if(KSHelper.valueOf(__ks_arg_1.kind) === NodeKind.AttributeOperation.value) {
								let __ks_4 = __ks_arg_1.name.name;
								if(__ks_4 === "alias") {
									options.runtime.helper.alias = __ks_arg_1.value.value;
								}
								else if(__ks_4 === "member") {
									options.runtime.helper.member = __ks_arg_1.value.value;
								}
								else if(__ks_4 === "package") {
									options.runtime.helper.package = __ks_arg_1.value.value;
								}
							}
						}
					}
					else if(arg.name.name === "operator") {
						for(let __ks_2 = 0, __ks_3 = arg.arguments.length, __ks_arg_1; __ks_2 < __ks_3; ++__ks_2) {
							__ks_arg_1 = arg.arguments[__ks_2];
							if(KSHelper.valueOf(__ks_arg_1.kind) === NodeKind.AttributeOperation.value) {
								let __ks_4 = __ks_arg_1.name.name;
								if(__ks_4 === "alias") {
									options.runtime.operator.alias = __ks_arg_1.value.value;
								}
								else if(__ks_4 === "member") {
									options.runtime.operator.member = __ks_arg_1.value.value;
								}
								else if(__ks_4 === "package") {
									options.runtime.operator.package = __ks_arg_1.value.value;
								}
							}
						}
					}
					else if(arg.name.name === "type") {
						for(let __ks_2 = 0, __ks_3 = arg.arguments.length, __ks_arg_1; __ks_2 < __ks_3; ++__ks_2) {
							__ks_arg_1 = arg.arguments[__ks_2];
							if(KSHelper.valueOf(__ks_arg_1.kind) === NodeKind.AttributeOperation.value) {
								let __ks_4 = __ks_arg_1.name.name;
								if(__ks_4 === "alias") {
									options.runtime.type.alias = __ks_arg_1.value.value;
								}
								else if(__ks_4 === "member") {
									options.runtime.type.member = __ks_arg_1.value.value;
								}
								else if(__ks_4 === "package") {
									options.runtime.type.package = __ks_arg_1.value.value;
								}
							}
						}
					}
				}
			}
			return options;
		}
		__ks_func_configure_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_configure_5.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_configure_rt) {
				return super.__ks_func_configure_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_target_7() {
			return AttributeTarget.Global;
		}
		static target() {
			if(arguments.length === 0) {
				return RuntimeAttribute.__ks_sttc_target_7();
			}
			if(Attribute.target) {
				return Attribute.target.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class TargetAttribute extends Attribute {
		static __ks_new_0(...args) {
			const o = Object.create(TargetAttribute.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data) {
			if(data === void 0) {
				data = null;
			}
			this._data = data;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return TargetAttribute.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		clone() {
			return this.__ks_func_clone_rt.call(null, this, this, arguments);
		}
		__ks_func_clone_7(options, cloned) {
			if(!KSType.isValue(cloned.target)) {
				options.target = __ks_Dictionary._sm_clone(options.target);
				cloned.target = true;
			}
			if(!KSType.isValue(cloned.parse)) {
				options.parse = __ks_Dictionary._sm_clone(options.parse);
				cloned.parse = true;
			}
			if(!KSType.isValue(cloned.format)) {
				options.format = __ks_Dictionary._sm_clone(options.format);
				cloned.format = true;
			}
			return options;
		}
		__ks_func_clone_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_clone_7.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_clone_rt) {
				return super.__ks_func_clone_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		configure() {
			return this.__ks_func_configure_rt.call(null, this, this, arguments);
		}
		__ks_func_configure_6(options, fileName, lineNumber) {
			for(let __ks_0 = 0, __ks_1 = this._data.arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._data.arguments[__ks_0];
				if(KSHelper.valueOf(argument.kind) === NodeKind.Identifier.value) {
					let match, __ks_2;
					if(KSType.isValue(__ks_2 = $targetRegex.exec(argument.name)) ? (match = __ks_2, false) : true) {
						throw new Error(KSHelper.concatString("Invalid target syntax: ", argument.name));
					}
					options.target = (() => {
						const d = new Dictionary();
						d.name = match[1];
						d.version = match[2];
						return d;
					})();
					options = $expandOptions.__ks_0(options);
				}
			}
			return options;
		}
		__ks_func_configure_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_configure_6.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_configure_rt) {
				return super.__ks_func_configure_rt.call(null, that, Attribute.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_target_8() {
			return AttributeTarget(AttributeTarget.Global | AttributeTarget.Statement);
		}
		static target() {
			if(arguments.length === 0) {
				return TargetAttribute.__ks_sttc_target_8();
			}
			if(Attribute.target) {
				return Attribute.target.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	Attribute.__ks_sttc_register_0(ElseAttribute);
	Attribute.__ks_sttc_register_0(ErrorAttribute);
	Attribute.__ks_sttc_register_0(FormatAttribute);
	Attribute.__ks_sttc_register_0(IfAttribute);
	Attribute.__ks_sttc_register_0(ParseAttribute);
	Attribute.__ks_sttc_register_0(PreserveAttribute);
	Attribute.__ks_sttc_register_0(PreserveParametersAttribute);
	Attribute.__ks_sttc_register_0(ParseAttribute);
	Attribute.__ks_sttc_register_0(RulesAttribute);
	Attribute.__ks_sttc_register_0(RuntimeAttribute);
	Attribute.__ks_sttc_register_0(TargetAttribute);
	class Writer {
		static __ks_new_0(...args) {
			const o = Object.create(Writer.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
			this._cache = (() => {
				const d = new Dictionary();
				d.array = new Dictionary();
				d.block = new Dictionary();
				d.comment = new Dictionary();
				d.control = new Dictionary();
				d.expression = new Dictionary();
				d.indent = new Dictionary();
				d.line = new Dictionary();
				d.object = new Dictionary();
				return d;
			})();
			this._fragments = [];
		}
		__ks_cons_0(options) {
			if(options === void 0 || options === null) {
				options = new Dictionary();
			}
			this._options = __ks_Dictionary.__ks_sttc_merge_0([(() => {
				const d = new Dictionary();
				d.indent = (() => {
					const d = new Dictionary();
					d.level = 0;
					d.style = "tab";
					d.size = 4;
					return d;
				})();
				d.terminators = (() => {
					const d = new Dictionary();
					d.line = ";";
					d.list = ",";
					return d;
				})();
				d.classes = (() => {
					const d = new Dictionary();
					d.array = ArrayWriter;
					d.block = BlockWriter;
					d.comment = CommentWriter;
					d.control = ControlWriter;
					d.expression = ExpressionWriter;
					d.fragment = Fragment;
					d.line = LineWriter;
					d.mark = MarkWriter;
					d.object = ObjectWriter;
					return d;
				})();
				return d;
			})(), options]);
			this._indent = this._options.indent.level;
			this.Array = this._options.classes.array;
			this.Block = this._options.classes.block;
			this.Comment = this._options.classes.comment;
			this.Control = this._options.classes.control;
			this.Expression = this._options.classes.expression;
			this.Fragment = this._options.classes.fragment;
			this.Line = this._options.classes.line;
			this.Mark = this._options.classes.mark;
			this.Object = this._options.classes.object;
			this.breakTerminator = this.__ks_func_newFragment_0(["\n"]);
			this.lineTerminator = this.__ks_func_newFragment_0([KSHelper.concatString(this._options.terminators.line, "\n")]);
			this.listTerminator = this.__ks_func_newFragment_0([KSHelper.concatString(this._options.terminators.list, "\n")]);
		}
		__ks_cons_rt(that, args) {
			if(args.length <= 1) {
				return Writer.prototype.__ks_cons_0.call(that, args[0]);
			}
			throw KSHelper.badArgs();
		}
		comment() {
			return this.__ks_func_comment_rt.call(null, this, this, arguments);
		}
		__ks_func_comment_0(args) {
			this.__ks_func_newComment_0(this._indent).code(...args).done();
			return this;
		}
		__ks_func_comment_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return proto.__ks_func_comment_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			throw KSHelper.badArgs();
		}
		insertAt() {
			return this.__ks_func_insertAt_rt.call(null, this, this, arguments);
		}
		__ks_func_insertAt_0(index, args) {
			const l = this._fragments.length;
			this._fragments.splice(index, 0, ...args);
			return this._fragments.length - l;
		}
		__ks_func_insertAt_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, args.length - 1, t0, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_insertAt_0.call(that, args[0], KSHelper.getVarargs(args, 1, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		length() {
			return this.__ks_func_length_rt.call(null, this, this, arguments);
		}
		__ks_func_length_0() {
			return this._fragments.length;
		}
		__ks_func_length_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_length_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		line() {
			return this.__ks_func_line_rt.call(null, this, this, arguments);
		}
		__ks_func_line_0(args) {
			this.__ks_func_newLine_0(this._indent).code(...args).done();
			return this;
		}
		__ks_func_line_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return proto.__ks_func_line_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			throw KSHelper.badArgs();
		}
		mark() {
			return this.__ks_func_mark_rt.call(null, this, this, arguments);
		}
		__ks_func_mark_0(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			return new this.Mark(this, indent, this._fragments.length);
		}
		__ks_func_mark_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_mark_0.call(that, args[0]);
			}
			throw KSHelper.badArgs();
		}
		newArray() {
			return this.__ks_func_newArray_rt.call(null, this, this, arguments);
		}
		__ks_func_newArray_0(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(!KSType.isValue(this._cache.array[indent])) {
				this._cache.array[indent] = new this.Array(this, indent);
			}
			return this._cache.array[indent].init();
		}
		__ks_func_newArray_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_newArray_0.call(that, args[0]);
			}
			throw KSHelper.badArgs();
		}
		newBlock() {
			return this.__ks_func_newBlock_rt.call(null, this, this, arguments);
		}
		__ks_func_newBlock_0(indent, breakable) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(breakable === void 0 || breakable === null) {
				breakable = false;
			}
			const key = KSHelper.concatString(indent, "|", breakable);
			if(!KSType.isValue(this._cache.block[key])) {
				this._cache.block[key] = new this.Block(this, indent, breakable);
			}
			return this._cache.block[key].init();
		}
		__ks_func_newBlock_rt(that, proto, args) {
			const t0 = () => true;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 2) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && KSHelper.isVarargs(args, 0, 1, t0, pts, 1) && te(pts, 2)) {
					return proto.__ks_func_newBlock_0.call(that, KSHelper.getVararg(args, 0, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			throw KSHelper.badArgs();
		}
		newComment() {
			return this.__ks_func_newComment_rt.call(null, this, this, arguments);
		}
		__ks_func_newComment_0(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(!KSType.isValue(this._cache.comment[indent])) {
				this._cache.comment[indent] = new this.Comment(this, indent);
			}
			return this._cache.comment[indent].init();
		}
		__ks_func_newComment_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_newComment_0.call(that, args[0]);
			}
			throw KSHelper.badArgs();
		}
		newControl() {
			return this.__ks_func_newControl_rt.call(null, this, this, arguments);
		}
		__ks_func_newControl_0(indent, initiator, terminator) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(initiator === void 0 || initiator === null) {
				initiator = true;
			}
			if(terminator === void 0 || terminator === null) {
				terminator = true;
			}
			const key = KSHelper.concatString(indent, "|", initiator, "|", terminator);
			if(!KSType.isValue(this._cache.control[key])) {
				this._cache.control[key] = new this.Control(this, indent, initiator, terminator);
			}
			return this._cache.control[key].init();
		}
		__ks_func_newControl_rt(that, proto, args) {
			const t0 = () => true;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 3) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && KSHelper.isVarargs(args, 0, 1, t0, pts, 1) && KSHelper.isVarargs(args, 0, 1, t0, pts, 2) && te(pts, 3)) {
					return proto.__ks_func_newControl_0.call(that, KSHelper.getVararg(args, 0, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
				}
			}
			throw KSHelper.badArgs();
		}
		newExpression() {
			return this.__ks_func_newExpression_rt.call(null, this, this, arguments);
		}
		__ks_func_newExpression_0(indent, initiator) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(initiator === void 0 || initiator === null) {
				initiator = true;
			}
			const key = KSHelper.concatString(indent, "|", initiator);
			if(!KSType.isValue(this._cache.expression[key])) {
				this._cache.expression[key] = new this.Expression(this, indent, initiator);
			}
			return this._cache.expression[key].init();
		}
		__ks_func_newExpression_rt(that, proto, args) {
			const t0 = () => true;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 2) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && KSHelper.isVarargs(args, 0, 1, t0, pts, 1) && te(pts, 2)) {
					return proto.__ks_func_newExpression_0.call(that, KSHelper.getVararg(args, 0, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			throw KSHelper.badArgs();
		}
		newFragment() {
			return this.__ks_func_newFragment_rt.call(null, this, this, arguments);
		}
		__ks_func_newFragment_0(args) {
			return new this.Fragment(...args);
		}
		__ks_func_newFragment_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return proto.__ks_func_newFragment_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			throw KSHelper.badArgs();
		}
		newIndent() {
			return this.__ks_func_newIndent_rt.call(null, this, this, arguments);
		}
		__ks_func_newIndent_0(indent) {
			return KSType.isValue(this._cache.indent[indent]) ? this._cache.indent[indent] : this._cache.indent[indent] = new this.Fragment("\t".repeat(indent));
		}
		__ks_func_newIndent_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_newIndent_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		newLine() {
			return this.__ks_func_newLine_rt.call(null, this, this, arguments);
		}
		__ks_func_newLine_0(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(!KSType.isValue(this._cache.line[indent])) {
				this._cache.line[indent] = new this.Line(this, indent);
			}
			return this._cache.line[indent].init();
		}
		__ks_func_newLine_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_newLine_0.call(that, args[0]);
			}
			throw KSHelper.badArgs();
		}
		newObject() {
			return this.__ks_func_newObject_rt.call(null, this, this, arguments);
		}
		__ks_func_newObject_0(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(!KSType.isValue(this._cache.object[indent])) {
				this._cache.object[indent] = new this.Object(this, indent);
			}
			return this._cache.object[indent].init();
		}
		__ks_func_newObject_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_newObject_0.call(that, args[0]);
			}
			throw KSHelper.badArgs();
		}
		push() {
			return this.__ks_func_push_rt.call(null, this, this, arguments);
		}
		__ks_func_push_0(args) {
			this._fragments.push(...args);
			return this;
		}
		__ks_func_push_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return proto.__ks_func_push_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			throw KSHelper.badArgs();
		}
		toArray() {
			return this.__ks_func_toArray_rt.call(null, this, this, arguments);
		}
		__ks_func_toArray_0() {
			return this._fragments;
		}
		__ks_func_toArray_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toArray_0.call(that);
			}
			throw KSHelper.badArgs();
		}
	}
	class Fragment {
		static __ks_new_0(...args) {
			const o = Object.create(Fragment.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
		}
		__ks_cons_0(code) {
			if(code === void 0) {
				code = null;
			}
			this.code = code;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return Fragment.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		toString() {
			return this.__ks_func_toString_rt.call(null, this, this, arguments);
		}
		__ks_func_toString_0() {
			return this.code;
		}
		__ks_func_toString_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toString_0.call(that);
			}
			throw KSHelper.badArgs();
		}
	}
	class ArrayWriter {
		static __ks_new_0(...args) {
			const o = Object.create(ArrayWriter.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
			this._line = null;
		}
		__ks_cons_0(writer, indent) {
			if(writer === void 0) {
				writer = null;
			}
			this._writer = writer;
			this._indent = indent;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isNumber;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return ArrayWriter.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		done() {
			return this.__ks_func_done_rt.call(null, this, this, arguments);
		}
		__ks_func_done_0() {
			if(this._line !== null) {
				this._line.done();
				this._line = null;
				this._writer.push(this._writer.newFragment("\n"), this._writer.newIndent(this._indent), this._writer.newFragment("]"));
			}
			else {
				this._writer.push(this._writer.newFragment("]"));
			}
		}
		__ks_func_done_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_done_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		init() {
			return this.__ks_func_init_rt.call(null, this, this, arguments);
		}
		__ks_func_init_0() {
			this._line = null;
			this._writer.push(this._writer.newFragment("["));
			return this;
		}
		__ks_func_init_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_init_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		line() {
			return this.__ks_func_line_rt.call(null, this, this, arguments);
		}
		__ks_func_line_0(args) {
			this.__ks_func_newLine_0().code(...args);
			return this;
		}
		__ks_func_line_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return proto.__ks_func_line_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			throw KSHelper.badArgs();
		}
		newControl() {
			return this.__ks_func_newControl_rt.call(null, this, this, arguments);
		}
		__ks_func_newControl_0() {
			if(this._line !== null) {
				this._line.done();
				this._writer.push(this._writer.newFragment(",\n"));
			}
			else {
				this._writer.push(this._writer.newFragment("\n"));
			}
			return this._line = this._writer.newControl(this._indent + 1, false);
		}
		__ks_func_newControl_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_newControl_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		newLine() {
			return this.__ks_func_newLine_rt.call(null, this, this, arguments);
		}
		__ks_func_newLine_0() {
			if(this._line !== null) {
				this._line.done();
				this._writer.push(this._writer.newFragment(this._writer.listTerminator));
			}
			else {
				this._writer.push(this._writer.newFragment("\n"));
			}
			return this._line = this._writer.newExpression(this._indent + 1);
		}
		__ks_func_newLine_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_newLine_0.call(that);
			}
			throw KSHelper.badArgs();
		}
	}
	class BlockWriter {
		static __ks_new_0(...args) {
			const o = Object.create(BlockWriter.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
			this._undone = true;
		}
		__ks_cons_0(writer, indent, breakable) {
			if(writer === void 0) {
				writer = null;
			}
			if(breakable === void 0 || breakable === null) {
				breakable = false;
			}
			this._writer = writer;
			this._indent = indent;
			this._breakable = breakable;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t1(args[1]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && te(pts, 1)) {
					return BlockWriter.prototype.__ks_cons_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		done() {
			return this.__ks_func_done_rt.call(null, this, this, arguments);
		}
		__ks_func_done_0() {
			if(this._undone) {
				this._writer.push(this._writer.newIndent(this._indent), this._writer.newFragment("}"));
				if(this._breakable) {
					this._writer.push(this._writer.breakTerminator);
				}
				this._undone = false;
				return true;
			}
			else {
				return false;
			}
		}
		__ks_func_done_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_done_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		init() {
			return this.__ks_func_init_rt.call(null, this, this, arguments);
		}
		__ks_func_init_0() {
			if(this._breakable) {
				this._writer.push(this._writer.newIndent(this._indent), this._writer.newFragment("{\n"));
			}
			else {
				this._writer.push(this._writer.newFragment(" {\n"));
			}
			this._undone = true;
			return this;
		}
		__ks_func_init_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_init_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		length() {
			return this.__ks_func_length_rt.call(null, this, this, arguments);
		}
		__ks_func_length_0() {
			return this._writer.length();
		}
		__ks_func_length_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_length_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		line() {
			return this.__ks_func_line_rt.call(null, this, this, arguments);
		}
		__ks_func_line_0(args) {
			this._writer.newLine(this._indent + 1).code(...args).done();
			return this;
		}
		__ks_func_line_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return proto.__ks_func_line_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			throw KSHelper.badArgs();
		}
		mark() {
			return this.__ks_func_mark_rt.call(null, this, this, arguments);
		}
		__ks_func_mark_0(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			return this._writer.mark(indent);
		}
		__ks_func_mark_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_mark_0.call(that, args[0]);
			}
			throw KSHelper.badArgs();
		}
		newBlock() {
			return this.__ks_func_newBlock_rt.call(null, this, this, arguments);
		}
		__ks_func_newBlock_0(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			return this._writer.newBlock(indent, true);
		}
		__ks_func_newBlock_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_newBlock_0.call(that, args[0]);
			}
			throw KSHelper.badArgs();
		}
		newControl() {
			return this.__ks_func_newControl_rt.call(null, this, this, arguments);
		}
		__ks_func_newControl_0(indent, initiator, terminator) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			if(initiator === void 0 || initiator === null) {
				initiator = true;
			}
			if(terminator === void 0 || terminator === null) {
				terminator = true;
			}
			return this._writer.newControl(indent, initiator, terminator);
		}
		__ks_func_newControl_rt(that, proto, args) {
			const t0 = () => true;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 3) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && KSHelper.isVarargs(args, 0, 1, t0, pts, 1) && KSHelper.isVarargs(args, 0, 1, t0, pts, 2) && te(pts, 3)) {
					return proto.__ks_func_newControl_0.call(that, KSHelper.getVararg(args, 0, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
				}
			}
			throw KSHelper.badArgs();
		}
		newLine() {
			return this.__ks_func_newLine_rt.call(null, this, this, arguments);
		}
		__ks_func_newLine_0(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			return this._writer.newLine(indent);
		}
		__ks_func_newLine_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_newLine_0.call(that, args[0]);
			}
			throw KSHelper.badArgs();
		}
	}
	class ControlWriter {
		static __ks_new_0(...args) {
			const o = Object.create(ControlWriter.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
			this._firstStep = true;
		}
		__ks_cons_0(writer, indent, initiator, terminator) {
			if(writer === void 0) {
				writer = null;
			}
			if(initiator === void 0 || initiator === null) {
				initiator = true;
			}
			if(terminator === void 0 || terminator === null) {
				terminator = true;
			}
			this._writer = writer;
			this._indent = indent;
			this._initiator = initiator;
			this._terminator = terminator;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 4) {
				if(t0(args[0]) && t1(args[1]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && KSHelper.isVarargs(args, 0, 1, t2, pts, 1) && te(pts, 2)) {
					return ControlWriter.prototype.__ks_cons_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			throw KSHelper.badArgs();
		}
		code() {
			return this.__ks_func_code_rt.call(null, this, this, arguments);
		}
		__ks_func_code_0(args) {
			this._step.code(...args);
			return this;
		}
		__ks_func_code_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return proto.__ks_func_code_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			throw KSHelper.badArgs();
		}
		done() {
			return this.__ks_func_done_rt.call(null, this, this, arguments);
		}
		__ks_func_done_0() {
			if((this._step.done() === true) && this._terminator) {
				this._writer.push(this._writer.breakTerminator);
			}
		}
		__ks_func_done_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_done_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isFirstStep() {
			return this.__ks_func_isFirstStep_rt.call(null, this, this, arguments);
		}
		__ks_func_isFirstStep_0() {
			return this._firstStep;
		}
		__ks_func_isFirstStep_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isFirstStep_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		init() {
			return this.__ks_func_init_rt.call(null, this, this, arguments);
		}
		__ks_func_init_0() {
			this._step = this._writer.newExpression(this._indent, this._initiator);
			this._firstStep = true;
			return this;
		}
		__ks_func_init_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_init_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		line() {
			return this.__ks_func_line_rt.call(null, this, this, arguments);
		}
		__ks_func_line_0(args) {
			this._step.line(...args);
			return this;
		}
		__ks_func_line_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return proto.__ks_func_line_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			throw KSHelper.badArgs();
		}
		newControl() {
			return this.__ks_func_newControl_rt.call(null, this, this, arguments);
		}
		__ks_func_newControl_0() {
			return this._step.newControl();
		}
		__ks_func_newControl_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_newControl_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		newLine() {
			return this.__ks_func_newLine_rt.call(null, this, this, arguments);
		}
		__ks_func_newLine_0() {
			return this._step.newLine();
		}
		__ks_func_newLine_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_newLine_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		step() {
			return this.__ks_func_step_rt.call(null, this, this, arguments);
		}
		__ks_func_step_0() {
			this._step.done();
			if(KSType.isClassInstance(this._step, ExpressionWriter)) {
				this._step = this._writer.newBlock(this._indent);
			}
			else {
				if(this._terminator) {
					this._writer.push(this._writer.newFragment("\n"));
				}
				this._step = this._writer.newExpression(this._indent);
			}
			if(this._firstStep) {
				this._firstStep = false;
			}
			return this;
		}
		__ks_func_step_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_step_0.call(that);
			}
			throw KSHelper.badArgs();
		}
	}
	class ExpressionWriter {
		static __ks_new_0(...args) {
			const o = Object.create(ExpressionWriter.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
			this._undone = true;
		}
		__ks_cons_0(writer, indent, initiator) {
			if(writer === void 0) {
				writer = null;
			}
			if(initiator === void 0 || initiator === null) {
				initiator = true;
			}
			this._writer = writer;
			this._indent = indent;
			this._initiator = initiator;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t1(args[1]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && te(pts, 1)) {
					return ExpressionWriter.prototype.__ks_cons_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		code() {
			return this.__ks_func_code_rt.call(null, this, this, arguments);
		}
		__ks_func_code_0(args) {
			for(let __ks_0 = 0, __ks_1 = args.length, arg; __ks_0 < __ks_1; ++__ks_0) {
				arg = args[__ks_0];
				if(KSType.isArray(arg)) {
					this.__ks_func_code_0(arg);
				}
				else if(KSType.isDictionary(arg)) {
					this._writer.push(arg);
				}
				else {
					this._writer.push(this._writer.newFragment(arg));
				}
			}
			return this;
		}
		__ks_func_code_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return proto.__ks_func_code_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			throw KSHelper.badArgs();
		}
		done() {
			return this.__ks_func_done_rt.call(null, this, this, arguments);
		}
		__ks_func_done_0() {
			if(this._undone) {
				this._undone = false;
				return true;
			}
			else {
				return false;
			}
		}
		__ks_func_done_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_done_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		init() {
			return this.__ks_func_init_rt.call(null, this, this, arguments);
		}
		__ks_func_init_0() {
			if(this._initiator) {
				this._writer.push(this._writer.newIndent(this._indent));
			}
			this._undone = true;
			return this;
		}
		__ks_func_init_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_init_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		newArray() {
			return this.__ks_func_newArray_rt.call(null, this, this, arguments);
		}
		__ks_func_newArray_0(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			return this._writer.newArray(indent);
		}
		__ks_func_newArray_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_newArray_0.call(that, args[0]);
			}
			throw KSHelper.badArgs();
		}
		newBlock() {
			return this.__ks_func_newBlock_rt.call(null, this, this, arguments);
		}
		__ks_func_newBlock_0(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			return this._writer.newBlock(indent);
		}
		__ks_func_newBlock_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_newBlock_0.call(that, args[0]);
			}
			throw KSHelper.badArgs();
		}
		newControl() {
			return this.__ks_func_newControl_rt.call(null, this, this, arguments);
		}
		__ks_func_newControl_0(indent, initiator, terminator) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			if(initiator === void 0 || initiator === null) {
				initiator = true;
			}
			if(terminator === void 0 || terminator === null) {
				terminator = true;
			}
			return this._writer.newControl(indent, initiator, terminator);
		}
		__ks_func_newControl_rt(that, proto, args) {
			const t0 = () => true;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 3) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && KSHelper.isVarargs(args, 0, 1, t0, pts, 1) && KSHelper.isVarargs(args, 0, 1, t0, pts, 2) && te(pts, 3)) {
					return proto.__ks_func_newControl_0.call(that, KSHelper.getVararg(args, 0, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
				}
			}
			throw KSHelper.badArgs();
		}
		newLine() {
			return this.__ks_func_newLine_rt.call(null, this, this, arguments);
		}
		__ks_func_newLine_0(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			return this._writer.newLine(indent);
		}
		__ks_func_newLine_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_newLine_0.call(that, args[0]);
			}
			throw KSHelper.badArgs();
		}
		newObject() {
			return this.__ks_func_newObject_rt.call(null, this, this, arguments);
		}
		__ks_func_newObject_0(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			return this._writer.newObject(indent);
		}
		__ks_func_newObject_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_newObject_0.call(that, args[0]);
			}
			throw KSHelper.badArgs();
		}
	}
	class CommentWriter extends ExpressionWriter {
		static __ks_new_0(...args) {
			const o = Object.create(CommentWriter.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_done_0() {
			if(this._undone) {
				this._writer.push(this._writer.breakTerminator);
				this._undone = false;
			}
		}
		__ks_func_newLine_1() {
			return this;
		}
		__ks_func_newLine_0(indent) {
			return this.__ks_func_newLine_1(indent);
		}
		__ks_func_newLine_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_newLine_1.call(that);
			}
			return super.__ks_func_newLine_rt.call(null, that, ExpressionWriter.prototype, args);
		}
	}
	class LineWriter extends ExpressionWriter {
		static __ks_new_0(...args) {
			const o = Object.create(LineWriter.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_done_0() {
			if(this._undone) {
				this._writer.push(this._writer.lineTerminator);
				this._undone = false;
			}
		}
		__ks_func_newControl_0(indent, initiator, terminator) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(initiator === void 0 || initiator === null) {
				initiator = true;
			}
			if(terminator === void 0 || terminator === null) {
				terminator = true;
			}
			return this._writer.newControl(indent, initiator, terminator);
		}
		__ks_func_newLine_2() {
			return this;
		}
		__ks_func_newLine_0(indent) {
			return this.__ks_func_newLine_2(indent);
		}
		__ks_func_newLine_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_newLine_2.call(that);
			}
			return super.__ks_func_newLine_rt.call(null, that, ExpressionWriter.prototype, args);
		}
	}
	class ObjectWriter {
		static __ks_new_0(...args) {
			const o = Object.create(ObjectWriter.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
			this._line = null;
		}
		__ks_cons_0(writer, indent) {
			if(writer === void 0) {
				writer = null;
			}
			this._writer = writer;
			this._indent = indent;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isNumber;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return ObjectWriter.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		done() {
			return this.__ks_func_done_rt.call(null, this, this, arguments);
		}
		__ks_func_done_0() {
			if(this._line !== null) {
				this._line.done();
				this._line = null;
				this._writer.push(this._writer.newFragment("\n"), this._writer.newIndent(this._indent), this._writer.newFragment("}"));
			}
			else {
				this._writer.push(this._writer.newFragment("}"));
			}
		}
		__ks_func_done_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_done_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		init() {
			return this.__ks_func_init_rt.call(null, this, this, arguments);
		}
		__ks_func_init_0() {
			this._line = null;
			this._writer.push(this._writer.newFragment("{"));
			return this;
		}
		__ks_func_init_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_init_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		line() {
			return this.__ks_func_line_rt.call(null, this, this, arguments);
		}
		__ks_func_line_0(args) {
			this.__ks_func_newLine_0().code(...args);
			return this;
		}
		__ks_func_line_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return proto.__ks_func_line_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			throw KSHelper.badArgs();
		}
		newControl() {
			return this.__ks_func_newControl_rt.call(null, this, this, arguments);
		}
		__ks_func_newControl_0() {
			if(this._line !== null) {
				this._line.done();
				this._writer.push(this._writer.newFragment(this._writer.listTerminator));
			}
			else {
				this._writer.push(this._writer.newFragment("\n"));
			}
			return this._line = this._writer.newControl(this._indent + 1, true, false);
		}
		__ks_func_newControl_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_newControl_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		newLine() {
			return this.__ks_func_newLine_rt.call(null, this, this, arguments);
		}
		__ks_func_newLine_0() {
			if(this._line !== null) {
				this._line.done();
				this._writer.push(this._writer.newFragment(this._writer.listTerminator));
			}
			else {
				this._writer.push(this._writer.newFragment("\n"));
			}
			return this._line = this._writer.newExpression(this._indent + 1);
		}
		__ks_func_newLine_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_newLine_0.call(that);
			}
			throw KSHelper.badArgs();
		}
	}
	class MarkWriter {
		static __ks_new_0(...args) {
			const o = Object.create(MarkWriter.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(MarkWriter.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(MarkWriter.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
			this._delta = 0;
			this._index = -1;
			this._mark = null;
			this._relative = false;
		}
		__ks_cons_0(writer, indent) {
			if(writer === void 0) {
				writer = null;
			}
			this._writer = writer;
			this._indent = indent;
			this.breakTerminator = this._writer.breakTerminator;
			this.lineTerminator = this._writer.lineTerminator;
			this.listTerminator = this._writer.listTerminator;
		}
		__ks_cons_1(writer, indent, index) {
			if(writer === void 0) {
				writer = null;
			}
			MarkWriter.prototype.__ks_cons_0.call(this, writer, indent);
			this._index = index;
		}
		__ks_cons_2(mark) {
			MarkWriter.prototype.__ks_cons_rt.call(null, this, [mark._writer, mark._indent]);
			this._mark = mark;
			this._relative = true;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, MarkWriter);
			const t1 = KSType.isValue;
			const t2 = KSType.isNumber;
			if(args.length === 1) {
				if(t0(args[0])) {
					return MarkWriter.prototype.__ks_cons_2.call(that, args[0]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 2) {
				if(t1(args[0]) && t2(args[1])) {
					return MarkWriter.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 3) {
				if(t1(args[0]) && t2(args[1]) && t2(args[2])) {
					return MarkWriter.prototype.__ks_cons_1.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		index() {
			return this.__ks_func_index_rt.call(null, this, this, arguments);
		}
		__ks_func_index_0() {
			if(this._relative) {
				return KSOperator.addOrConcat(this._mark.__ks_func_index_0(), this._delta);
			}
			else {
				return this._index;
			}
		}
		__ks_func_index_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_index_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		line() {
			return this.__ks_func_line_rt.call(null, this, this, arguments);
		}
		__ks_func_line_0(args) {
			this.__ks_func_newLine_0().code(...args).done();
			return this;
		}
		__ks_func_line_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return proto.__ks_func_line_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			throw KSHelper.badArgs();
		}
		mark() {
			return this.__ks_func_mark_rt.call(null, this, this, arguments);
		}
		__ks_func_mark_0() {
			return MarkWriter.__ks_new_2(this);
		}
		__ks_func_mark_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_mark_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		newControl() {
			return this.__ks_func_newControl_rt.call(null, this, this, arguments);
		}
		__ks_func_newControl_0() {
			return (new this._writer.Control(this, this._indent)).init();
		}
		__ks_func_newControl_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_newControl_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		newFragment() {
			return this.__ks_func_newFragment_rt.call(null, this, this, arguments);
		}
		__ks_func_newFragment_0(args) {
			return this._writer.newFragment(...args);
		}
		__ks_func_newFragment_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return proto.__ks_func_newFragment_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			throw KSHelper.badArgs();
		}
		newIndent() {
			return this.__ks_func_newIndent_rt.call(null, this, this, arguments);
		}
		__ks_func_newIndent_0(indent) {
			return this._writer.newIndent(indent);
		}
		__ks_func_newIndent_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_newIndent_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		newLine() {
			return this.__ks_func_newLine_rt.call(null, this, this, arguments);
		}
		__ks_func_newLine_0() {
			return (new this._writer.Line(this, this._indent)).init();
		}
		__ks_func_newLine_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_newLine_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		push() {
			return this.__ks_func_push_rt.call(null, this, this, arguments);
		}
		__ks_func_push_0(args) {
			if(this._relative) {
				this._delta = KSOperator.addOrConcat(this._delta, this._writer.insertAt(this.__ks_func_index_0(), ...args));
			}
			else {
				this._index = KSOperator.addOrConcat(this._index, this._writer.insertAt(this._index, ...args));
			}
			return this;
		}
		__ks_func_push_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return proto.__ks_func_push_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			throw KSHelper.badArgs();
		}
	}
	let Generator = KSHelper.namespace(function() {
		const AssignmentOperatorSymbol = (() => {
			const d = new Dictionary();
			d[AssignmentOperatorKind.Addition] = " += ";
			d[AssignmentOperatorKind.BitwiseAnd] = " &= ";
			d[AssignmentOperatorKind.BitwiseLeftShift] = " <<= ";
			d[AssignmentOperatorKind.BitwiseOr] = " |= ";
			d[AssignmentOperatorKind.BitwiseRightShift] = " >>= ";
			d[AssignmentOperatorKind.BitwiseXor] = " ^= ";
			d[AssignmentOperatorKind.Division] = " /= ";
			d[AssignmentOperatorKind.Equality] = " = ";
			d[AssignmentOperatorKind.Existential] = " ?= ";
			d[AssignmentOperatorKind.Modulo] = " %= ";
			d[AssignmentOperatorKind.Multiplication] = " *= ";
			d[AssignmentOperatorKind.NonExistential] = " !?= ";
			d[AssignmentOperatorKind.NullCoalescing] = " ??= ";
			d[AssignmentOperatorKind.Quotient] = " /.= ";
			d[AssignmentOperatorKind.Subtraction] = " -= ";
			return d;
		})();
		const BinaryOperatorSymbol = (() => {
			const d = new Dictionary();
			d[BinaryOperatorKind.Addition] = " + ";
			d[BinaryOperatorKind.And] = " && ";
			d[BinaryOperatorKind.BitwiseAnd] = " & ";
			d[BinaryOperatorKind.BitwiseLeftShift] = " << ";
			d[BinaryOperatorKind.BitwiseOr] = " | ";
			d[BinaryOperatorKind.BitwiseRightShift] = " >> ";
			d[BinaryOperatorKind.BitwiseXor] = " ^ ";
			d[BinaryOperatorKind.Division] = " / ";
			d[BinaryOperatorKind.Equality] = " == ";
			d[BinaryOperatorKind.GreaterThan] = " > ";
			d[BinaryOperatorKind.GreaterThanOrEqual] = " >= ";
			d[BinaryOperatorKind.Imply] = " -> ";
			d[BinaryOperatorKind.Inequality] = " != ";
			d[BinaryOperatorKind.LessThan] = " < ";
			d[BinaryOperatorKind.LessThanOrEqual] = " <= ";
			d[BinaryOperatorKind.Match] = " ~~ ";
			d[BinaryOperatorKind.Mismatch] = " !~ ";
			d[BinaryOperatorKind.Modulo] = " % ";
			d[BinaryOperatorKind.Multiplication] = " * ";
			d[BinaryOperatorKind.NullCoalescing] = " ?? ";
			d[BinaryOperatorKind.Or] = " || ";
			d[BinaryOperatorKind.Quotient] = " /. ";
			d[BinaryOperatorKind.Subtraction] = " - ";
			d[BinaryOperatorKind.TypeEquality] = " is ";
			d[BinaryOperatorKind.TypeInequality] = " is not ";
			d[BinaryOperatorKind.Xor] = " ^^ ";
			return d;
		})();
		const JunctionOperatorSymbol = (() => {
			const d = new Dictionary();
			d[BinaryOperatorKind.And] = " & ";
			d[BinaryOperatorKind.Or] = " | ";
			d[BinaryOperatorKind.Xor] = " ^ ";
			return d;
		})();
		const UnaryPrefixOperatorSymbol = (() => {
			const d = new Dictionary();
			d[UnaryOperatorKind.BitwiseNot] = "~";
			d[UnaryOperatorKind.DecrementPrefix] = "--";
			d[UnaryOperatorKind.Existential] = "?";
			d[UnaryOperatorKind.IncrementPrefix] = "++";
			d[UnaryOperatorKind.Negation] = "!";
			d[UnaryOperatorKind.Negative] = "-";
			d[UnaryOperatorKind.Spread] = "...";
			return d;
		})();
		const UnaryPostfixOperatorSymbol = (() => {
			const d = new Dictionary();
			d[UnaryOperatorKind.DecrementPostfix] = "--";
			d[UnaryOperatorKind.ForcedTypeCasting] = "!!";
			d[UnaryOperatorKind.IncrementPostfix] = "++";
			d[UnaryOperatorKind.NullableTypeCasting] = "!?";
			return d;
		})();
		const KSWriterMode = KSHelper.enum(Number, {
			Default: 0,
			Extern: 1,
			Property: 2
		});
		const AttributeMode = KSHelper.enum(Number, {
			Inline: 0,
			Inner: 1,
			Outer: 2
		});
		function $nilFilter() {
			return $nilFilter.__ks_rt(this, arguments);
		};
		$nilFilter.__ks_0 = function(__ks_0) {
			return false;
		};
		$nilFilter.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return $nilFilter.__ks_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			throw KSHelper.badArgs();
		};
		function $nilTransformer() {
			return $nilTransformer.__ks_rt(this, arguments);
		};
		$nilTransformer.__ks_0 = function(args) {
			return args[0];
		};
		$nilTransformer.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return $nilTransformer.__ks_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			throw KSHelper.badArgs();
		};
		class KSWriter extends Writer {
			static __ks_new_0(...args) {
				const o = Object.create(KSWriter.prototype);
				o.__ks_init();
				o.__ks_cons_0(...args);
				return o;
			}
			__ks_init() {
				super.__ks_init();
				this._stack = [];
			}
			__ks_cons_0(options = null) {
				Writer.prototype.__ks_cons_0.call(this, __ks_Dictionary.__ks_sttc_merge_0([(() => {
					const d = new Dictionary();
					d.mode = KSWriterMode.Default;
					d.classes = (() => {
						const d = new Dictionary();
						d.block = KSBlockWriter;
						d.control = KSControlWriter;
						d.expression = KSExpressionWriter;
						d.line = KSLineWriter;
						d.object = KSObjectWriter;
						return d;
					})();
					d.filters = (() => {
						const d = new Dictionary();
						d.expression = $nilFilter;
						d.statement = $nilFilter;
						return d;
					})();
					d.terminators = (() => {
						const d = new Dictionary();
						d.line = "";
						d.list = "";
						return d;
					})();
					d.transformers = (() => {
						const d = new Dictionary();
						d.expression = $nilTransformer;
						d.statement = $nilTransformer;
						return d;
					})();
					return d;
				})(), options]));
				this._mode = this._options.mode;
			}
			__ks_cons_rt(that, args) {
				if(args.length <= 1) {
					return KSWriter.prototype.__ks_cons_0.call(that, args[0]);
				}
				throw KSHelper.badArgs();
			}
			filterExpression() {
				return this.__ks_func_filterExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_filterExpression_0(data, writer) {
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._options.filters.expression(data, writer);
			}
			__ks_func_filterExpression_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_filterExpression_0.call(that, args[0], args[1]);
					}
				}
				if(super.__ks_func_filterExpression_rt) {
					return super.__ks_func_filterExpression_rt.call(null, that, Writer.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			filterStatement() {
				return this.__ks_func_filterStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_filterStatement_0(data, writer) {
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._options.filters.statement(data, writer);
			}
			__ks_func_filterStatement_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_filterStatement_0.call(that, args[0], args[1]);
					}
				}
				if(super.__ks_func_filterStatement_rt) {
					return super.__ks_func_filterStatement_rt.call(null, that, Writer.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			mode() {
				return this.__ks_func_mode_rt.call(null, this, this, arguments);
			}
			__ks_func_mode_0() {
				return this._mode;
			}
			__ks_func_mode_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_mode_0.call(that);
				}
				if(super.__ks_func_mode_rt) {
					return super.__ks_func_mode_rt.call(null, that, Writer.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			popMode() {
				return this.__ks_func_popMode_rt.call(null, this, this, arguments);
			}
			__ks_func_popMode_0() {
				this._mode = this._stack.pop();
			}
			__ks_func_popMode_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_popMode_0.call(that);
				}
				if(super.__ks_func_popMode_rt) {
					return super.__ks_func_popMode_rt.call(null, that, Writer.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			pushMode() {
				return this.__ks_func_pushMode_rt.call(null, this, this, arguments);
			}
			__ks_func_pushMode_0(mode) {
				this._stack.push(this._mode);
				this._mode = mode;
			}
			__ks_func_pushMode_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, KSWriterMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_pushMode_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_pushMode_rt) {
					return super.__ks_func_pushMode_rt.call(null, that, Writer.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			statement() {
				return this.__ks_func_statement_rt.call(null, this, this, arguments);
			}
			__ks_func_statement_0(data) {
				if(!(this.__ks_func_filterStatement_0(data) === true)) {
					toAttributes.__ks_0(data, AttributeMode.Outer, this);
					toStatement(this.__ks_func_transformStatement_0(data), this);
				}
				return this;
			}
			__ks_func_statement_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_statement_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_statement_rt) {
					return super.__ks_func_statement_rt.call(null, that, Writer.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			toSource() {
				return this.__ks_func_toSource_rt.call(null, this, this, arguments);
			}
			__ks_func_toSource_0() {
				let source = "";
				for(let __ks_0 = 0, __ks_1 = this.__ks_func_toArray_0(), __ks_2 = __ks_1.length, fragment; __ks_0 < __ks_2; ++__ks_0) {
					fragment = __ks_1[__ks_0];
					source = KSHelper.concatString(source, fragment.code);
				}
				if(source.length !== 0) {
					return source.substr(0, KSOperator.subtraction(source.length, 1));
				}
				else {
					return source;
				}
			}
			__ks_func_toSource_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_toSource_0.call(that);
				}
				if(super.__ks_func_toSource_rt) {
					return super.__ks_func_toSource_rt.call(null, that, Writer.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			transformExpression() {
				return this.__ks_func_transformExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_transformExpression_0(data, writer) {
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._options.transformers.expression(data, writer);
			}
			__ks_func_transformExpression_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_transformExpression_0.call(that, args[0], args[1]);
					}
				}
				if(super.__ks_func_transformExpression_rt) {
					return super.__ks_func_transformExpression_rt.call(null, that, Writer.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			transformStatement() {
				return this.__ks_func_transformStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_transformStatement_0(data, writer) {
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._options.transformers.statement(data, writer);
			}
			__ks_func_transformStatement_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_transformStatement_0.call(that, args[0], args[1]);
					}
				}
				if(super.__ks_func_transformStatement_rt) {
					return super.__ks_func_transformStatement_rt.call(null, that, Writer.prototype, args);
				}
				throw KSHelper.badArgs();
			}
		}
		class KSBlockWriter extends BlockWriter {
			static __ks_new_0(...args) {
				const o = Object.create(KSBlockWriter.prototype);
				o.__ks_init();
				o.__ks_cons_0(...args);
				return o;
			}
			__ks_cons_rt(that, args) {
				super.__ks_cons_rt.call(null, that, args);
			}
			expression() {
				return this.__ks_func_expression_rt.call(null, this, this, arguments);
			}
			__ks_func_expression_0(data) {
				if(!(this.__ks_func_filterExpression_0(data) === true)) {
					toExpression(this.__ks_func_transformExpression_0(data), this);
				}
				return this;
			}
			__ks_func_expression_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_expression_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_expression_rt) {
					return super.__ks_func_expression_rt.call(null, that, BlockWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			filterExpression() {
				return this.__ks_func_filterExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_filterExpression_0(data) {
				return this._writer.filterExpression(data, this);
			}
			__ks_func_filterExpression_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_filterExpression_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_filterExpression_rt) {
					return super.__ks_func_filterExpression_rt.call(null, that, BlockWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			filterStatement() {
				return this.__ks_func_filterStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_filterStatement_0(data) {
				return this._writer.filterStatement(data, this);
			}
			__ks_func_filterStatement_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_filterStatement_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_filterStatement_rt) {
					return super.__ks_func_filterStatement_rt.call(null, that, BlockWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			mode() {
				return this.__ks_func_mode_rt.call(null, this, this, arguments);
			}
			__ks_func_mode_0() {
				return this._writer.mode();
			}
			__ks_func_mode_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_mode_0.call(that);
				}
				if(super.__ks_func_mode_rt) {
					return super.__ks_func_mode_rt.call(null, that, BlockWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			popMode() {
				return this.__ks_func_popMode_rt.call(null, this, this, arguments);
			}
			__ks_func_popMode_0() {
				return this._writer.popMode();
			}
			__ks_func_popMode_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_popMode_0.call(that);
				}
				if(super.__ks_func_popMode_rt) {
					return super.__ks_func_popMode_rt.call(null, that, BlockWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			pushMode() {
				return this.__ks_func_pushMode_rt.call(null, this, this, arguments);
			}
			__ks_func_pushMode_0(mode) {
				return this._writer.pushMode(mode);
			}
			__ks_func_pushMode_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, KSWriterMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_pushMode_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_pushMode_rt) {
					return super.__ks_func_pushMode_rt.call(null, that, BlockWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			statement() {
				return this.__ks_func_statement_rt.call(null, this, this, arguments);
			}
			__ks_func_statement_0(data) {
				if(!(this.__ks_func_filterStatement_0(data) === true)) {
					toAttributes.__ks_0(data, AttributeMode.Outer, this);
					toStatement(this.__ks_func_transformStatement_0(data), this);
				}
				return this;
			}
			__ks_func_statement_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_statement_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_statement_rt) {
					return super.__ks_func_statement_rt.call(null, that, BlockWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			transformExpression() {
				return this.__ks_func_transformExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_transformExpression_0(data, writer) {
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformExpression(data, this);
			}
			__ks_func_transformExpression_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_transformExpression_0.call(that, args[0], args[1]);
					}
				}
				if(super.__ks_func_transformExpression_rt) {
					return super.__ks_func_transformExpression_rt.call(null, that, BlockWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			transformStatement() {
				return this.__ks_func_transformStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_transformStatement_0(data, writer) {
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformStatement(data, this);
			}
			__ks_func_transformStatement_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_transformStatement_0.call(that, args[0], args[1]);
					}
				}
				if(super.__ks_func_transformStatement_rt) {
					return super.__ks_func_transformStatement_rt.call(null, that, BlockWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
		}
		class KSControlWriter extends ControlWriter {
			static __ks_new_0(...args) {
				const o = Object.create(KSControlWriter.prototype);
				o.__ks_init();
				o.__ks_cons_0(...args);
				return o;
			}
			__ks_cons_rt(that, args) {
				super.__ks_cons_rt.call(null, that, args);
			}
			expression() {
				return this.__ks_func_expression_rt.call(null, this, this, arguments);
			}
			__ks_func_expression_0(data) {
				if(!(this.__ks_func_filterExpression_0(data) === true)) {
					toExpression(this.__ks_func_transformExpression_0(data), this);
				}
				return this;
			}
			__ks_func_expression_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_expression_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_expression_rt) {
					return super.__ks_func_expression_rt.call(null, that, ControlWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			filterExpression() {
				return this.__ks_func_filterExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_filterExpression_0(data) {
				return this._writer.filterExpression(data, this);
			}
			__ks_func_filterExpression_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_filterExpression_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_filterExpression_rt) {
					return super.__ks_func_filterExpression_rt.call(null, that, ControlWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			filterStatement() {
				return this.__ks_func_filterStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_filterStatement_0(data) {
				return this._writer.filterStatement(data, this);
			}
			__ks_func_filterStatement_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_filterStatement_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_filterStatement_rt) {
					return super.__ks_func_filterStatement_rt.call(null, that, ControlWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			mode() {
				return this.__ks_func_mode_rt.call(null, this, this, arguments);
			}
			__ks_func_mode_0() {
				return this._writer.mode();
			}
			__ks_func_mode_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_mode_0.call(that);
				}
				if(super.__ks_func_mode_rt) {
					return super.__ks_func_mode_rt.call(null, that, ControlWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			popMode() {
				return this.__ks_func_popMode_rt.call(null, this, this, arguments);
			}
			__ks_func_popMode_0() {
				return this._writer.popMode();
			}
			__ks_func_popMode_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_popMode_0.call(that);
				}
				if(super.__ks_func_popMode_rt) {
					return super.__ks_func_popMode_rt.call(null, that, ControlWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			pushMode() {
				return this.__ks_func_pushMode_rt.call(null, this, this, arguments);
			}
			__ks_func_pushMode_0(mode) {
				return this._writer.pushMode(mode);
			}
			__ks_func_pushMode_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, KSWriterMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_pushMode_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_pushMode_rt) {
					return super.__ks_func_pushMode_rt.call(null, that, ControlWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			statement() {
				return this.__ks_func_statement_rt.call(null, this, this, arguments);
			}
			__ks_func_statement_0(data) {
				if(!(this.__ks_func_filterStatement_0(data) === true)) {
					toAttributes.__ks_0(data, AttributeMode.Outer, this);
					toStatement(this.__ks_func_transformStatement_0(data), this);
				}
				return this;
			}
			__ks_func_statement_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_statement_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_statement_rt) {
					return super.__ks_func_statement_rt.call(null, that, ControlWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			transformExpression() {
				return this.__ks_func_transformExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_transformExpression_0(data, writer) {
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformExpression(data, this);
			}
			__ks_func_transformExpression_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_transformExpression_0.call(that, args[0], args[1]);
					}
				}
				if(super.__ks_func_transformExpression_rt) {
					return super.__ks_func_transformExpression_rt.call(null, that, ControlWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			transformStatement() {
				return this.__ks_func_transformStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_transformStatement_0(data, writer) {
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformStatement(data, this);
			}
			__ks_func_transformStatement_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_transformStatement_0.call(that, args[0], args[1]);
					}
				}
				if(super.__ks_func_transformStatement_rt) {
					return super.__ks_func_transformStatement_rt.call(null, that, ControlWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			wrap() {
				return this.__ks_func_wrap_rt.call(null, this, this, arguments);
			}
			__ks_func_wrap_0(data) {
				if(!(this.__ks_func_filterExpression_0(data) === true)) {
					toWrap(this.__ks_func_transformExpression_0(data), this);
				}
				return this;
			}
			__ks_func_wrap_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_wrap_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_wrap_rt) {
					return super.__ks_func_wrap_rt.call(null, that, ControlWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
		}
		class KSExpressionWriter extends ExpressionWriter {
			static __ks_new_0(...args) {
				const o = Object.create(KSExpressionWriter.prototype);
				o.__ks_init();
				o.__ks_cons_0(...args);
				return o;
			}
			__ks_cons_rt(that, args) {
				super.__ks_cons_rt.call(null, that, args);
			}
			expression() {
				return this.__ks_func_expression_rt.call(null, this, this, arguments);
			}
			__ks_func_expression_0(data) {
				if(!(this.__ks_func_filterExpression_0(data) === true)) {
					toExpression(this.__ks_func_transformExpression_0(data), this);
				}
				return this;
			}
			__ks_func_expression_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_expression_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_expression_rt) {
					return super.__ks_func_expression_rt.call(null, that, ExpressionWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			filterExpression() {
				return this.__ks_func_filterExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_filterExpression_0(data) {
				return this._writer.filterExpression(data, this);
			}
			__ks_func_filterExpression_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_filterExpression_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_filterExpression_rt) {
					return super.__ks_func_filterExpression_rt.call(null, that, ExpressionWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			mode() {
				return this.__ks_func_mode_rt.call(null, this, this, arguments);
			}
			__ks_func_mode_0() {
				return this._writer.mode();
			}
			__ks_func_mode_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_mode_0.call(that);
				}
				if(super.__ks_func_mode_rt) {
					return super.__ks_func_mode_rt.call(null, that, ExpressionWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			popMode() {
				return this.__ks_func_popMode_rt.call(null, this, this, arguments);
			}
			__ks_func_popMode_0() {
				return this._writer.popMode();
			}
			__ks_func_popMode_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_popMode_0.call(that);
				}
				if(super.__ks_func_popMode_rt) {
					return super.__ks_func_popMode_rt.call(null, that, ExpressionWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			pushMode() {
				return this.__ks_func_pushMode_rt.call(null, this, this, arguments);
			}
			__ks_func_pushMode_0(mode) {
				return this._writer.pushMode(mode);
			}
			__ks_func_pushMode_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, KSWriterMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_pushMode_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_pushMode_rt) {
					return super.__ks_func_pushMode_rt.call(null, that, ExpressionWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			transformExpression() {
				return this.__ks_func_transformExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_transformExpression_0(data, writer) {
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformExpression(data, this);
			}
			__ks_func_transformExpression_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_transformExpression_0.call(that, args[0], args[1]);
					}
				}
				if(super.__ks_func_transformExpression_rt) {
					return super.__ks_func_transformExpression_rt.call(null, that, ExpressionWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			wrap() {
				return this.__ks_func_wrap_rt.call(null, this, this, arguments);
			}
			__ks_func_wrap_0(data) {
				if(!(this.__ks_func_filterExpression_0(data) === true)) {
					toWrap(this.__ks_func_transformExpression_0(data), this);
				}
				return this;
			}
			__ks_func_wrap_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_wrap_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_wrap_rt) {
					return super.__ks_func_wrap_rt.call(null, that, ExpressionWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
		}
		class KSLineWriter extends LineWriter {
			static __ks_new_0(...args) {
				const o = Object.create(KSLineWriter.prototype);
				o.__ks_init();
				o.__ks_cons_0(...args);
				return o;
			}
			__ks_cons_rt(that, args) {
				super.__ks_cons_rt.call(null, that, args);
			}
			expression() {
				return this.__ks_func_expression_rt.call(null, this, this, arguments);
			}
			__ks_func_expression_1(data) {
				if(!(this.__ks_func_filterExpression_1(data) === true)) {
					toExpression(this.__ks_func_transformExpression_1(data), this);
				}
				return this;
			}
			__ks_func_expression_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_expression_1.call(that, args[0]);
					}
				}
				if(super.__ks_func_expression_rt) {
					return super.__ks_func_expression_rt.call(null, that, LineWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			filterExpression() {
				return this.__ks_func_filterExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_filterExpression_1(data) {
				return this._writer.filterExpression(data, this);
			}
			__ks_func_filterExpression_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_filterExpression_1.call(that, args[0]);
					}
				}
				if(super.__ks_func_filterExpression_rt) {
					return super.__ks_func_filterExpression_rt.call(null, that, LineWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			filterStatement() {
				return this.__ks_func_filterStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_filterStatement_0(data) {
				return this._writer.filterStatement(data, this);
			}
			__ks_func_filterStatement_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_filterStatement_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_filterStatement_rt) {
					return super.__ks_func_filterStatement_rt.call(null, that, LineWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			mode() {
				return this.__ks_func_mode_rt.call(null, this, this, arguments);
			}
			__ks_func_mode_1() {
				return this._writer.mode();
			}
			__ks_func_mode_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_mode_1.call(that);
				}
				if(super.__ks_func_mode_rt) {
					return super.__ks_func_mode_rt.call(null, that, LineWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			popMode() {
				return this.__ks_func_popMode_rt.call(null, this, this, arguments);
			}
			__ks_func_popMode_1() {
				return this._writer.popMode();
			}
			__ks_func_popMode_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_popMode_1.call(that);
				}
				if(super.__ks_func_popMode_rt) {
					return super.__ks_func_popMode_rt.call(null, that, LineWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			pushMode() {
				return this.__ks_func_pushMode_rt.call(null, this, this, arguments);
			}
			__ks_func_pushMode_1(mode) {
				return this._writer.pushMode(mode);
			}
			__ks_func_pushMode_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, KSWriterMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_pushMode_1.call(that, args[0]);
					}
				}
				if(super.__ks_func_pushMode_rt) {
					return super.__ks_func_pushMode_rt.call(null, that, LineWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			run() {
				return this.__ks_func_run_rt.call(null, this, this, arguments);
			}
			__ks_func_run_0(data, fn) {
				fn(data, this);
				return this;
			}
			__ks_func_run_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return proto.__ks_func_run_0.call(that, args[0], args[1]);
					}
				}
				if(super.__ks_func_run_rt) {
					return super.__ks_func_run_rt.call(null, that, LineWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			statement() {
				return this.__ks_func_statement_rt.call(null, this, this, arguments);
			}
			__ks_func_statement_0(data) {
				if(!(this.__ks_func_filterStatement_0(data) === true)) {
					toAttributes.__ks_0(data, AttributeMode.Outer, this);
					toStatement(this.__ks_func_transformStatement_0(data), this);
				}
				return this;
			}
			__ks_func_statement_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_statement_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_statement_rt) {
					return super.__ks_func_statement_rt.call(null, that, LineWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			transformExpression() {
				return this.__ks_func_transformExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_transformExpression_1(data, writer) {
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformExpression(data, this);
			}
			__ks_func_transformExpression_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_transformExpression_1.call(that, args[0], args[1]);
					}
				}
				if(super.__ks_func_transformExpression_rt) {
					return super.__ks_func_transformExpression_rt.call(null, that, LineWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			transformStatement() {
				return this.__ks_func_transformStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_transformStatement_0(data, writer) {
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformStatement(data, this);
			}
			__ks_func_transformStatement_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_transformStatement_0.call(that, args[0], args[1]);
					}
				}
				if(super.__ks_func_transformStatement_rt) {
					return super.__ks_func_transformStatement_rt.call(null, that, LineWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			wrap() {
				return this.__ks_func_wrap_rt.call(null, this, this, arguments);
			}
			__ks_func_wrap_1(data) {
				if(!(this.__ks_func_filterExpression_1(data) === true)) {
					toWrap(this.__ks_func_transformExpression_1(data), this);
				}
				return this;
			}
			__ks_func_wrap_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_wrap_1.call(that, args[0]);
					}
				}
				if(super.__ks_func_wrap_rt) {
					return super.__ks_func_wrap_rt.call(null, that, LineWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
		}
		class KSObjectWriter extends ObjectWriter {
			static __ks_new_0(...args) {
				const o = Object.create(KSObjectWriter.prototype);
				o.__ks_init();
				o.__ks_cons_0(...args);
				return o;
			}
			__ks_cons_rt(that, args) {
				super.__ks_cons_rt.call(null, that, args);
			}
			filterExpression() {
				return this.__ks_func_filterExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_filterExpression_0(data) {
				return this._writer.filterExpression(data, this);
			}
			__ks_func_filterExpression_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_filterExpression_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_filterExpression_rt) {
					return super.__ks_func_filterExpression_rt.call(null, that, ObjectWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			filterStatement() {
				return this.__ks_func_filterStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_filterStatement_0(data) {
				return this._writer.filterStatement(data, this);
			}
			__ks_func_filterStatement_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_filterStatement_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_filterStatement_rt) {
					return super.__ks_func_filterStatement_rt.call(null, that, ObjectWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			mode() {
				return this.__ks_func_mode_rt.call(null, this, this, arguments);
			}
			__ks_func_mode_0() {
				return this._writer.mode();
			}
			__ks_func_mode_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_mode_0.call(that);
				}
				if(super.__ks_func_mode_rt) {
					return super.__ks_func_mode_rt.call(null, that, ObjectWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			popMode() {
				return this.__ks_func_popMode_rt.call(null, this, this, arguments);
			}
			__ks_func_popMode_0() {
				return this._writer.popMode();
			}
			__ks_func_popMode_rt(that, proto, args) {
				if(args.length === 0) {
					return proto.__ks_func_popMode_0.call(that);
				}
				if(super.__ks_func_popMode_rt) {
					return super.__ks_func_popMode_rt.call(null, that, ObjectWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			pushMode() {
				return this.__ks_func_pushMode_rt.call(null, this, this, arguments);
			}
			__ks_func_pushMode_0(mode) {
				return this._writer.pushMode(mode);
			}
			__ks_func_pushMode_rt(that, proto, args) {
				const t0 = value => KSType.isEnumInstance(value, KSWriterMode);
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_pushMode_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_pushMode_rt) {
					return super.__ks_func_pushMode_rt.call(null, that, ObjectWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			statement() {
				return this.__ks_func_statement_rt.call(null, this, this, arguments);
			}
			__ks_func_statement_0(data) {
				if(!(this.__ks_func_filterStatement_0(data) === true)) {
					toAttributes.__ks_0(data, AttributeMode.Outer, this);
					toStatement(this.__ks_func_transformStatement_0(data), this);
				}
				return this;
			}
			__ks_func_statement_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return proto.__ks_func_statement_0.call(that, args[0]);
					}
				}
				if(super.__ks_func_statement_rt) {
					return super.__ks_func_statement_rt.call(null, that, ObjectWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			transformExpression() {
				return this.__ks_func_transformExpression_rt.call(null, this, this, arguments);
			}
			__ks_func_transformExpression_0(data, writer) {
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformExpression(data, this);
			}
			__ks_func_transformExpression_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_transformExpression_0.call(that, args[0], args[1]);
					}
				}
				if(super.__ks_func_transformExpression_rt) {
					return super.__ks_func_transformExpression_rt.call(null, that, ObjectWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
			transformStatement() {
				return this.__ks_func_transformStatement_rt.call(null, this, this, arguments);
			}
			__ks_func_transformStatement_0(data, writer) {
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformStatement(data, this);
			}
			__ks_func_transformStatement_rt(that, proto, args) {
				const t0 = KSType.isValue;
				if(args.length >= 1 && args.length <= 2) {
					if(t0(args[0])) {
						return proto.__ks_func_transformStatement_0.call(that, args[0], args[1]);
					}
				}
				if(super.__ks_func_transformStatement_rt) {
					return super.__ks_func_transformStatement_rt.call(null, that, ObjectWriter.prototype, args);
				}
				throw KSHelper.badArgs();
			}
		}
		function generate() {
			return generate.__ks_rt(this, arguments);
		};
		generate.__ks_0 = function(data, options = null) {
			const writer = KSWriter.__ks_new_0(options);
			toStatement.__ks_0(data, writer);
			return writer.__ks_func_toSource_0();
		};
		generate.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0])) {
					return generate.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function toAttribute() {
			return toAttribute.__ks_rt(this, arguments);
		};
		toAttribute.__ks_0 = function(data, mode, writer) {
			return writer.code((mode === AttributeMode.Inner) ? "#![" : "#[").expression(data.declaration).code("]");
		};
		toAttribute.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, AttributeMode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t0(args[2])) {
					return toAttribute.__ks_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function toAttributes() {
			return toAttributes.__ks_rt(this, arguments);
		};
		toAttributes.__ks_0 = function(data, mode, writer) {
			if(KSType.isValue(data.attributes) ? KSOperator.gt(data.attributes.length, 0) : false) {
				if(mode === AttributeMode.Inline) {
					for(let __ks_0 = 0, __ks_1 = data.attributes.length, attribute; __ks_0 < __ks_1; ++__ks_0) {
						attribute = data.attributes[__ks_0];
						toAttribute(attribute, mode, writer).code(" ");
					}
				}
				else {
					for(let __ks_0 = 0, __ks_1 = data.attributes.length, attribute; __ks_0 < __ks_1; ++__ks_0) {
						attribute = data.attributes[__ks_0];
						toAttribute(attribute, mode, writer.newLine()).done();
					}
					if(mode === AttributeMode.Inner) {
						writer.newLine().done();
					}
				}
			}
		};
		toAttributes.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, AttributeMode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t0(args[2])) {
					return toAttributes.__ks_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function toExpression() {
			return toExpression.__ks_rt(this, arguments);
		};
		toExpression.__ks_0 = function(data, writer, header = null) {
			let __ks_0 = data.kind.valueOf();
			if(__ks_0 === NodeKind.ArrayBinding.value) {
				writer.code("[");
				for(let index = 0, __ks_1 = data.elements.length, element; index < __ks_1; ++index) {
					element = data.elements[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(element);
				}
				writer.code("]");
			}
			else if(__ks_0 === NodeKind.ArrayComprehension.value) {
				writer.code("[").expression(data.body).run(data.loop, toLoopHeader).code("]");
			}
			else if(__ks_0 === NodeKind.ArrayExpression.value) {
				writer.code("[");
				for(let index = 0, __ks_1 = data.values.length, value; index < __ks_1; ++index) {
					value = data.values[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(value);
				}
				writer.code("]");
			}
			else if(__ks_0 === NodeKind.ArrayRange.value) {
				writer.code("[");
				if(KSType.isValue(data.from)) {
					writer.expression(data.from);
				}
				else {
					writer.expression(data.then).code("<");
				}
				if(KSType.isValue(data.to)) {
					writer.code("..").expression(data.to);
				}
				else {
					writer.code("..<").expression(data.til);
				}
				if(KSType.isValue(data.by)) {
					writer.code("..").expression(data.by);
				}
				writer.code("]");
			}
			else if(__ks_0 === NodeKind.AttributeExpression.value) {
				writer.expression(data.name).code("(");
				for(let index = 0, __ks_1 = data.arguments.length, argument; index < __ks_1; ++index) {
					argument = data.arguments[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(argument);
				}
				writer.code(")");
			}
			else if(__ks_0 === NodeKind.AttributeOperation.value) {
				writer.expression(data.name).code(" = ").expression(data.value);
			}
			else if(__ks_0 === NodeKind.AwaitExpression.value) {
				writer.code("await ").expression(data.operation);
			}
			else if(__ks_0 === NodeKind.BinaryExpression.value) {
				if(KSHelper.valueOf(data.operator.kind) === BinaryOperatorKind.TypeCasting.value) {
					writer.code("(").expression(data.left);
					let nf = true;
					for(let __ks_1 = 0, __ks_2 = data.operator.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
						modifier = data.operator.modifiers[__ks_1];
						if(KSHelper.valueOf(modifier.kind) === ModifierKind.Forced.value) {
							writer.code(" as! ");
							nf = false;
						}
						else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value) {
							writer.code(" as? ");
							nf = false;
						}
					}
					if(nf) {
						writer.code(" as ");
					}
					writer.expression(data.right).code(")");
				}
				else {
					writer.wrap(data.left);
					if(KSHelper.valueOf(data.operator.kind) === BinaryOperatorKind.Assignment.value) {
						writer.code(AssignmentOperatorSymbol[data.operator.assignment]);
					}
					else {
						writer.code(BinaryOperatorSymbol[data.operator.kind]);
					}
					writer.wrap(data.right);
				}
			}
			else if(__ks_0 === NodeKind.BindingElement.value) {
				let computed = false;
				let thisAlias = false;
				let rest = false;
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Computed.value) {
						computed = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Rest.value) {
						writer.code("...");
						rest = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.ThisAlias.value) {
						thisAlias = true;
					}
				}
				if(KSType.isValue(data.name)) {
					if(KSType.isValue(data.alias)) {
						if(computed) {
							writer.code("[").expression(data.name).code("]");
						}
						else {
							writer.expression(data.name);
						}
						writer.code(": ");
						if(thisAlias) {
							writer.code("@");
						}
						writer.expression(data.alias);
					}
					else {
						if(computed) {
							writer.code("[");
						}
						if(thisAlias) {
							writer.code("@");
						}
						writer.expression(data.name);
						if(computed) {
							writer.code("]");
						}
						if(KSType.isValue(data.type)) {
							writer.code(": ").expression(data.type);
						}
					}
					if(KSType.isValue(data.defaultValue)) {
						writer.code(" = ").expression(data.defaultValue);
					}
				}
				else if(!rest) {
					writer.code("_");
				}
			}
			else if(__ks_0 === NodeKind.Block.value) {
				toAttributes.__ks_0(data, AttributeMode.Inner, writer);
				for(let __ks_1 = 0, __ks_2 = data.statements.length, statement; __ks_1 < __ks_2; ++__ks_1) {
					statement = data.statements[__ks_1];
					writer.statement(statement);
				}
			}
			else if(__ks_0 === NodeKind.CallExpression.value) {
				writer.expression(data.callee);
				if(data.modifiers.some((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
						let pts;
						if(args.length >= 1) {
							if(t0(args[0]) && KSHelper.isVarargs(args, 0, args.length - 1, t0, pts = [1], 0) && te(pts, 1)) {
								return __ks_rt.__ks_0.call(this, args[0], KSHelper.getVarargs(args, 1, pts[1]));
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (modifier, __ks_0) => {
						return KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value;
					};
					return __ks_rt;
				})()) === true) {
					writer.code("?");
				}
				let __ks_1 = data.scope.kind.valueOf();
				if(__ks_1 === ScopeKind.Argument.value) {
					writer.code("*$(").expression(data.scope.value);
					if(data.arguments.length !== 0) {
						writer.code(", ");
					}
				}
				else if(__ks_1 === ScopeKind.Null.value) {
					writer.code("**(");
				}
				else if(__ks_1 === ScopeKind.This.value) {
					writer.code("(");
				}
				for(let index = 0, __ks_1 = data.arguments.length, argument; index < __ks_1; ++index) {
					argument = data.arguments[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(argument);
				}
				writer.code(")");
			}
			else if(__ks_0 === NodeKind.CallMacroExpression.value) {
				writer.expression(data.callee).code("!(");
				for(let index = 0, __ks_1 = data.arguments.length, argument; index < __ks_1; ++index) {
					argument = data.arguments[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(argument);
				}
				writer.code(")");
			}
			else if(__ks_0 === NodeKind.ClassDeclaration.value) {
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					let __ks_3 = modifier.kind.valueOf();
					if(__ks_3 === ModifierKind.Abstract.value) {
						writer.code("abstract ");
					}
					else if(__ks_3 === ModifierKind.Sealed.value) {
						writer.code("sealed ");
					}
				}
				writer.code("class ").expression(data.name);
			}
			else if(__ks_0 === NodeKind.ComparisonExpression.value) {
				for(let i = 0, __ks_1 = data.values.length, value; i < __ks_1; ++i) {
					value = data.values[i];
					if((i % 2) === 0) {
						writer.wrap(value);
					}
					else {
						writer.code(BinaryOperatorSymbol[value.kind]);
					}
				}
			}
			else if(__ks_0 === NodeKind.ComputedPropertyName.value) {
				writer.code("[").expression(data.expression).code("]");
			}
			else if(__ks_0 === NodeKind.ConditionalExpression.value) {
				writer.wrap(data.condition).code(" ? ").wrap(data.whenTrue).code(" : ").wrap(data.whenFalse);
			}
			else if(__ks_0 === NodeKind.CreateExpression.value) {
				writer.code("new ");
				if((KSHelper.valueOf(data.class.kind) === NodeKind.Identifier.value) || (KSHelper.valueOf(data.class.kind) === NodeKind.MemberExpression.value) || (KSHelper.valueOf(data.class.kind) === NodeKind.ThisExpression.value)) {
					writer.expression(data.class);
				}
				else {
					writer.code("(").expression(data.class).code(")");
				}
				writer.code("(");
				for(let index = 0, __ks_1 = data.arguments.length, argument; index < __ks_1; ++index) {
					argument = data.arguments[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(argument);
				}
				writer.code(")");
			}
			else if(__ks_0 === NodeKind.CurryExpression.value) {
				writer.expression(data.callee);
				let __ks_1 = data.scope.kind.valueOf();
				if(__ks_1 === ScopeKind.Argument.value) {
					writer.code("^$(").expression(data.scope.value);
					if(data.arguments.length === true) {
						writer.code(", ");
					}
				}
				else if(__ks_1 === ScopeKind.Null.value) {
					writer.code("^^(");
				}
				else if(__ks_1 === ScopeKind.This.value) {
					writer.code("^@(");
				}
				for(let index = 0, __ks_1 = data.arguments.length, argument; index < __ks_1; ++index) {
					argument = data.arguments[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(argument);
				}
				writer.code(")");
			}
			else if(__ks_0 === NodeKind.EnumExpression.value) {
				writer.expression(data.enum).code("::").expression(data.member);
			}
			else if(__ks_0 === NodeKind.ExclusionType.value) {
				for(let index = 0, __ks_1 = data.types.length, type; index < __ks_1; ++index) {
					type = data.types[index];
					if(index !== 0) {
						writer.code((KSHelper.valueOf(type.kind) === NodeKind.FunctionExpression.value) ? " ^^ " : " ^ ");
					}
					writer.expression(type);
				}
			}
			else if(__ks_0 === NodeKind.FunctionDeclaration.value) {
				toFunctionHeader.__ks_0(data, (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 1) {
							if(t0(args[0])) {
								return __ks_rt.__ks_0.call(this, args[0]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (writer) => {
						return writer.code("func ");
					};
					return __ks_rt;
				})(), writer);
			}
			else if(__ks_0 === NodeKind.FunctionExpression.value) {
				toFunctionHeader.__ks_0(data, (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 1) {
							if(t0(args[0])) {
								return __ks_rt.__ks_0.call(this, args[0]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (writer) => {
						if(KSHelper.valueOf(writer.mode()) === KSWriterMode.Property.value) {
							if(KSType.isValue(header)) {
								header(writer);
							}
						}
						else {
							writer.code("func");
						}
					};
					return __ks_rt;
				})(), writer);
				if(KSType.isValue(data.body)) {
					if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
						writer.newBlock().expression(data.body).done();
					}
					else {
						writer.code(" => ").expression(data.body);
					}
				}
			}
			else if(__ks_0 === NodeKind.FusionType.value) {
				for(let index = 0, __ks_1 = data.types.length, type; index < __ks_1; ++index) {
					type = data.types[index];
					if(index !== 0) {
						writer.code((KSHelper.valueOf(type.kind) === NodeKind.FunctionExpression.value) ? " && " : " & ");
					}
					writer.expression(type);
				}
			}
			else if(__ks_0 === NodeKind.Identifier.value) {
				writer.code(data.name);
			}
			else if(__ks_0 === NodeKind.IfExpression.value) {
				writer.expression(data.whenTrue).code(" if ").expression(data.condition);
				if(KSType.isValue(data.whenFalse)) {
					writer.code(" else ").expression(data.whenFalse);
				}
			}
			else if(__ks_0 === NodeKind.ImportArgument.value) {
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Required.value) {
						writer.code("require ");
					}
				}
				if(KSType.isValue(data.name)) {
					writer.expression(data.name).code(": ");
				}
				writer.expression(data.value);
			}
			else if(__ks_0 === NodeKind.ImportDeclarator.value) {
				writer.expression(data.source);
				let autofill = false;
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Autofill.value) {
						autofill = true;
					}
				}
				if(KSType.isValue(data.arguments) ? data.arguments.length !== 0 : false) {
					writer.code("(");
					for(let index = 0, __ks_1 = data.arguments.length, argument; index < __ks_1; ++index) {
						argument = data.arguments[index];
						if(index !== 0) {
							writer.code(", ");
						}
						writer.expression(argument);
					}
					writer.code(")");
				}
				else if(autofill) {
					writer.code("(...)");
				}
				if((data.specifiers.length === 1) && (data.specifiers[0].attributes.length === 0)) {
					const specifier = data.specifiers[0];
					let __ks_1 = specifier.kind.valueOf();
					if(__ks_1 === NodeKind.ImportSpecifier.value) {
						writer.code(" for ").expression(specifier);
					}
					else if(__ks_1 === NodeKind.ImportExclusionSpecifier.value) {
						writer.code(" but ").expression(specifier);
					}
					else if(__ks_1 === NodeKind.ImportNamespaceSpecifier.value) {
						writer.code(" => ").expression(specifier);
					}
				}
				else if(data.specifiers.length !== 0) {
					const block = writer.newBlock();
					for(let __ks_1 = 0, __ks_2 = data.specifiers.length, specifier; __ks_1 < __ks_2; ++__ks_1) {
						specifier = data.specifiers[__ks_1];
						toAttributes(specifier, AttributeMode.Outer, block);
						block.newLine().expression(specifier).done();
					}
					block.done();
				}
			}
			else if(__ks_0 === NodeKind.ImportExclusionSpecifier.value) {
				for(let i = 0, __ks_1 = data.exclusions.length, exclusion; i < __ks_1; ++i) {
					exclusion = data.exclusions[i];
					if(i !== 0) {
						writer.code(", ");
					}
					writer.expression(exclusion);
				}
			}
			else if(__ks_0 === NodeKind.ImportNamespaceSpecifier.value) {
				writer.expression(data.local);
				if(KSType.isValue(data.specifiers) ? data.specifiers.length !== 0 : false) {
					const block = writer.newBlock();
					for(let __ks_1 = 0, __ks_2 = data.specifiers.length, specifier; __ks_1 < __ks_2; ++__ks_1) {
						specifier = data.specifiers[__ks_1];
						block.newLine().expression(specifier).done();
					}
					block.done();
				}
			}
			else if(__ks_0 === NodeKind.ImportSpecifier.value) {
				writer.expression(data.imported);
				if(!((KSHelper.valueOf(data.imported.kind) === NodeKind.ClassDeclaration.value) || (KSHelper.valueOf(data.imported.kind) === NodeKind.FunctionDeclaration.value) || (KSHelper.valueOf(data.imported.kind) === NodeKind.VariableDeclarator.value)) || (data.local.name !== data.imported.name.name)) {
					writer.code(" => ").expression(data.local);
				}
			}
			else if(__ks_0 === NodeKind.IncludeDeclarator.value) {
				toAttributes.__ks_0(data, AttributeMode.Outer, writer);
				writer.newLine().code(toQuote(data.file)).done();
			}
			else if(__ks_0 === NodeKind.JunctionExpression.value) {
				const operator = JunctionOperatorSymbol[data.operator.kind];
				for(let i = 0, __ks_1 = data.operands.length, operand; i < __ks_1; ++i) {
					operand = data.operands[i];
					if(i !== 0) {
						writer.code(operator);
					}
					writer.expression(operand);
				}
			}
			else if(__ks_0 === NodeKind.LambdaExpression.value) {
				toFunctionHeader.__ks_0(data, (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 1) {
							if(t0(args[0])) {
								return __ks_rt.__ks_0.call(this, args[0]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (writer) => {
					};
					return __ks_rt;
				})(), writer);
				if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
					writer.code(" =>").newBlock().expression(data.body).done();
				}
				else {
					writer.code(" => ").expression(data.body);
				}
			}
			else if(__ks_0 === NodeKind.Literal.value) {
				writer.code(toQuote(data.value));
			}
			else if(__ks_0 === NodeKind.MacroExpression.value) {
				writer.code("macro ");
				if(data.elements[0].start.line === data.elements[KSOperator.subtraction(data.elements.length, 1)].end.line) {
					toMacroElements(data.elements, writer);
				}
				else {
					const o = writer.newObject();
					let line = o.newLine();
					toMacroElements(data.elements, line, o);
					o.done();
				}
			}
			else if(__ks_0 === NodeKind.MemberExpression.value) {
				let nullable = false;
				let computed = false;
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Computed.value) {
						computed = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value) {
						nullable = true;
					}
				}
				writer.wrap(data.object);
				if(nullable) {
					writer.code("?");
				}
				if(computed) {
					writer.code("[").expression(data.property).code("]");
				}
				else {
					writer.code(".").expression(data.property);
				}
			}
			else if(__ks_0 === NodeKind.NamedArgument.value) {
				writer.expression(data.name).code(": ").expression(data.value);
			}
			else if(__ks_0 === NodeKind.NumericExpression.value) {
				writer.code(data.value);
			}
			else if(__ks_0 === NodeKind.ObjectBinding.value) {
				writer.code("{");
				for(let index = 0, __ks_1 = data.elements.length, element; index < __ks_1; ++index) {
					element = data.elements[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(element);
				}
				writer.code("}");
			}
			else if(__ks_0 === NodeKind.ObjectExpression.value) {
				const o = writer.newObject();
				toAttributes(data, AttributeMode.Inner, o);
				o.pushMode(KSWriterMode.Property);
				for(let __ks_1 = 0, __ks_2 = data.properties.length, property; __ks_1 < __ks_2; ++__ks_1) {
					property = data.properties[__ks_1];
					toAttributes(property, AttributeMode.Outer, o);
					o.newLine().expression(property).done();
				}
				o.popMode();
				o.done();
			}
			else if(__ks_0 === NodeKind.ObjectMember.value) {
				const value = KSType.isValue(data.value) ? data.value : data.type;
				if(KSType.isValue(value)) {
					const element = writer.transformExpression(value);
					if(KSHelper.valueOf(element.kind) === NodeKind.FunctionExpression.value) {
						toExpression(element, writer, (() => {
							const __ks_rt = (...args) => {
								const t0 = KSType.isValue;
								if(args.length === 1) {
									if(t0(args[0])) {
										return __ks_rt.__ks_0.call(this, args[0]);
									}
								}
								throw KSHelper.badArgs();
							};
							__ks_rt.__ks_0 = (writer) => {
								return writer.expression(data.name);
							};
							return __ks_rt;
						})());
					}
					else {
						writer.expression(data.name).code(": ").expression(element);
					}
				}
				else {
					writer.expression(data.name);
				}
			}
			else if(__ks_0 === NodeKind.OmittedExpression.value) {
				if(data.spread === true) {
					writer.code("...");
				}
				else {
					writer.code("_");
				}
			}
			else if(__ks_0 === NodeKind.Parameter.value) {
				toAttributes.__ks_0(data, AttributeMode.Inline, writer);
				let rest = false;
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					let __ks_3 = modifier.kind.valueOf();
					if(__ks_3 === ModifierKind.AutoEvaluate.value) {
						writer.code("@");
					}
					else if(__ks_3 === ModifierKind.Mutable.value) {
						writer.code("mut ");
					}
					else if(__ks_3 === ModifierKind.Rest.value) {
						writer.code("...");
						if((modifier.arity.min !== 0) || (KSOperator.neq(modifier.arity.max, Infinity))) {
							writer.code("{");
							if(modifier.arity.min === modifier.arity.max) {
								writer.code(modifier.arity.min);
							}
							else {
								if(modifier.arity.min !== 0) {
									writer.code(modifier.arity.min);
								}
								writer.code(",");
								if(KSOperator.neq(modifier.arity.max, Infinity)) {
									writer.code(modifier.arity.max);
								}
							}
							writer.code("}");
						}
						rest = true;
					}
					else if(__ks_3 === ModifierKind.ThisAlias.value) {
						writer.code("@");
					}
				}
				if(KSType.isValue(data.name)) {
					writer.expression(data.name);
					for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
						modifier = data.modifiers[__ks_1];
						let __ks_3 = modifier.kind.valueOf();
						if(__ks_3 === ModifierKind.Required.value) {
							writer.code("!");
						}
						else if(__ks_3 === ModifierKind.SetterAlias.value) {
							writer.code("()");
						}
					}
				}
				else if(!rest) {
					writer.code("_");
				}
				if(KSType.isValue(data.type)) {
					writer.code(": ").expression(data.type);
				}
				if(KSType.isValue(data.defaultValue)) {
					writer.code(" = ").expression(data.defaultValue);
				}
			}
			else if(__ks_0 === NodeKind.PolyadicExpression.value) {
				writer.wrap(data.operands[0]);
				for(let __ks_1 = 1, __ks_2 = data.operands.length, operand; __ks_1 < __ks_2; ++__ks_1) {
					operand = data.operands[__ks_1];
					writer.code(BinaryOperatorSymbol[data.operator.kind]).wrap(operand);
				}
			}
			else if(__ks_0 === NodeKind.RegularExpression.value) {
				writer.code(data.value);
			}
			else if(__ks_0 === NodeKind.ReturnTypeReference.value) {
				writer.expression(data.value);
			}
			else if(__ks_0 === NodeKind.SequenceExpression.value) {
				writer.code("(");
				for(let index = 0, __ks_1 = data.expressions.length, expression; index < __ks_1; ++index) {
					expression = data.expressions[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(expression);
				}
				writer.code(")");
			}
			else if(__ks_0 === NodeKind.ShorthandProperty.value) {
				writer.expression(data.name);
			}
			else if(__ks_0 === NodeKind.SwitchConditionArray.value) {
				writer.code("[");
				for(let index = 0, __ks_1 = data.values.length, value; index < __ks_1; ++index) {
					value = data.values[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(value);
				}
				writer.code("]");
			}
			else if(__ks_0 === NodeKind.SwitchConditionObject.value) {
				writer.code("{");
				for(let index = 0, __ks_1 = data.members.length, member; index < __ks_1; ++index) {
					member = data.members[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(member);
				}
				writer.code("}");
			}
			else if(__ks_0 === NodeKind.SwitchConditionRange.value) {
				if(KSType.isValue(data.from)) {
					writer.expression(data.from);
				}
				else {
					writer.expression(data.then).code("<");
				}
				if(KSType.isValue(data.to)) {
					writer.code("..").expression(data.to);
				}
				else {
					writer.code("..<").expression(data.til);
				}
				if(KSType.isValue(data.by)) {
					writer.code("..").expression(data.by);
				}
			}
			else if(__ks_0 === NodeKind.SwitchConditionType.value) {
				writer.code("is ").expression(data.type);
			}
			else if(__ks_0 === NodeKind.SwitchExpression.value) {
				writer.code("switch ").expression(data.expression);
				const block = writer.newBlock();
				for(let __ks_1 = 0, __ks_2 = data.clauses.length, clause; __ks_1 < __ks_2; ++__ks_1) {
					clause = data.clauses[__ks_1];
					block.statement(clause);
				}
				block.done();
			}
			else if(__ks_0 === NodeKind.SwitchTypeCasting.value) {
				writer.expression(data.name).code(" as ").expression(data.type);
			}
			else if(__ks_0 === NodeKind.TaggedTemplateExpression.value) {
				writer.expression(data.tag).expression(data.template);
			}
			else if(__ks_0 === NodeKind.TemplateExpression.value) {
				writer.code("`");
				for(let __ks_1 = 0, __ks_2 = data.elements.length, element; __ks_1 < __ks_2; ++__ks_1) {
					element = data.elements[__ks_1];
					if(KSHelper.valueOf(element.kind) === NodeKind.Literal.value) {
						writer.code(element.value);
					}
					else {
						writer.code("\\(").expression(element).code(")");
					}
				}
				writer.code("`");
			}
			else if(__ks_0 === NodeKind.ThisExpression.value) {
				writer.code("@").expression(data.name);
			}
			else if(__ks_0 === NodeKind.TryExpression.value) {
				writer.code("try");
				if(data.modifiers.some((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
						let pts;
						if(args.length >= 1) {
							if(t0(args[0]) && KSHelper.isVarargs(args, 0, args.length - 1, t0, pts = [1], 0) && te(pts, 1)) {
								return __ks_rt.__ks_0.call(this, args[0], KSHelper.getVarargs(args, 1, pts[1]));
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (modifier, __ks_0) => {
						return KSHelper.valueOf(modifier.kind) === ModifierKind.Disabled.value;
					};
					return __ks_rt;
				})()) === true) {
					writer.code("!");
				}
				writer.code(" ").expression(data.argument);
				if(KSType.isValue(data.defaultValue)) {
					writer.code(" ~~ ").expression(data.defaultValue);
				}
			}
			else if(__ks_0 === NodeKind.TypeReference.value) {
				if(KSType.isValue(data.properties)) {
					const o = writer.newObject();
					o.pushMode(KSWriterMode.Property);
					for(let __ks_1 = 0, __ks_2 = data.properties.length, property; __ks_1 < __ks_2; ++__ks_1) {
						property = data.properties[__ks_1];
						o.statement(property);
					}
					o.popMode();
					o.done();
				}
				else if(KSType.isValue(data.elements)) {
					writer.code("[");
					for(let index = 0, __ks_1 = data.elements.length, element; index < __ks_1; ++index) {
						element = data.elements[index];
						if(index !== 0) {
							writer.code(", ");
						}
						writer.expression(element);
					}
					writer.code("]");
				}
				else {
					writer.expression(data.typeName);
					if(KSType.isValue(data.typeParameters)) {
						writer.code("<");
						for(let index = 0, __ks_1 = data.typeParameters.length, parameter; index < __ks_1; ++index) {
							parameter = data.typeParameters[index];
							if(index !== 0) {
								writer.code(", ");
							}
							writer.expression(parameter);
						}
						writer.code(">");
					}
					if(data.modifiers.some((() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
							let pts;
							if(args.length >= 1) {
								if(t0(args[0]) && KSHelper.isVarargs(args, 0, args.length - 1, t0, pts = [1], 0) && te(pts, 1)) {
									return __ks_rt.__ks_0.call(this, args[0], KSHelper.getVarargs(args, 1, pts[1]));
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (modifier, __ks_0) => {
							return KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value;
						};
						return __ks_rt;
					})()) === true) {
						writer.code("?");
					}
				}
			}
			else if(__ks_0 === NodeKind.UnaryExpression.value) {
				if(KSType.isValue(UnaryPrefixOperatorSymbol[data.operator.kind])) {
					writer.code(UnaryPrefixOperatorSymbol[data.operator.kind]).wrap(data.argument);
				}
				else {
					writer.wrap(data.argument).code(UnaryPostfixOperatorSymbol[data.operator.kind]);
				}
			}
			else if(__ks_0 === NodeKind.UnionType.value) {
				for(let index = 0, __ks_1 = data.types.length, type; index < __ks_1; ++index) {
					type = data.types[index];
					if(index !== 0) {
						writer.code((KSHelper.valueOf(type.kind) === NodeKind.FunctionExpression.value) ? " || " : " | ");
					}
					writer.expression(type);
				}
			}
			else if(__ks_0 === NodeKind.UnlessExpression.value) {
				writer.expression(data.whenFalse).code(" unless ").expression(data.condition);
			}
			else if(__ks_0 === NodeKind.VariableDeclaration.value) {
				writer.code("var ");
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Mutable.value) {
						writer.code("mut ");
					}
				}
				for(let index = 0, __ks_1 = data.variables.length, variable; index < __ks_1; ++index) {
					variable = data.variables[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(variable);
				}
				writer.code(" = ");
				if(data.await === true) {
					writer.code("await ");
				}
				writer.expression(data.init);
			}
			else if(__ks_0 === NodeKind.VariableDeclarator.value) {
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					let __ks_3 = modifier.kind.valueOf();
					if(__ks_3 === ModifierKind.Immutable.value) {
						writer.code("final ");
					}
					else if(__ks_3 === ModifierKind.Systemic.value) {
						writer.code("systemic ");
					}
				}
				writer.expression(data.name);
				if(KSType.isValue(data.type)) {
					writer.code(": ").expression(data.type);
				}
			}
			else {
				console.error(data);
				throw new Error("Not Implemented");
			}
		};
		toExpression.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1])) {
					return toExpression.__ks_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function toFunctionHeader() {
			return toFunctionHeader.__ks_rt(this, arguments);
		};
		toFunctionHeader.__ks_0 = function(data, header, writer) {
			if(KSType.isValue(data.modifiers)) {
				for(let __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
					modifier = data.modifiers[__ks_0];
					let __ks_2 = modifier.kind.valueOf();
					if(__ks_2 === ModifierKind.Abstract.value) {
						writer.code("abstract ");
					}
					else if(__ks_2 === ModifierKind.Async.value) {
						writer.code("async ");
					}
					else if(__ks_2 === ModifierKind.Immutable.value) {
						writer.code("final ");
					}
					else if(__ks_2 === ModifierKind.Internal.value) {
						writer.code("internal ");
					}
					else if(__ks_2 === ModifierKind.Override.value) {
						writer.code("override ");
					}
					else if(__ks_2 === ModifierKind.Overwrite.value) {
						writer.code("overwrite ");
					}
					else if(__ks_2 === ModifierKind.Private.value) {
						writer.code("private ");
					}
					else if(__ks_2 === ModifierKind.Protected.value) {
						writer.code("protected ");
					}
					else if(__ks_2 === ModifierKind.Public.value) {
						writer.code("public ");
					}
					else if(__ks_2 === ModifierKind.Static.value) {
						writer.code("static ");
					}
				}
			}
			header(writer);
			if(KSType.isValue(data.name)) {
				writer.expression(data.name);
			}
			if(KSType.isValue(data.parameters)) {
				writer.code("(");
				for(let i = 0, __ks_0 = data.parameters.length, parameter; i < __ks_0; ++i) {
					parameter = data.parameters[i];
					if(i !== 0) {
						writer.code(", ");
					}
					writer.expression(parameter);
				}
				writer.code(")");
			}
			if(KSType.isValue(data.type)) {
				writer.code(": ").expression(data.type);
			}
			if(KSType.isValue(data.throws) ? KSOperator.gt(data.throws.length, 0) : false) {
				writer.code(" ~ ");
				for(let index = 0, __ks_0 = data.throws.length, __ks_throw_1; index < __ks_0; ++index) {
					__ks_throw_1 = data.throws[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(__ks_throw_1);
				}
			}
		};
		toFunctionHeader.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return toFunctionHeader.__ks_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function toFunctionBody() {
			return toFunctionBody.__ks_rt(this, arguments);
		};
		toFunctionBody.__ks_0 = function(data, writer) {
			if(KSHelper.valueOf(data.kind) === NodeKind.Block.value) {
				writer.newBlock().expression(data).done();
			}
			else if(KSHelper.valueOf(data.kind) === NodeKind.IfStatement.value) {
				writer.code(" => ").expression(data.whenTrue.value).code(" if ").expression(data.condition);
				if(KSType.isValue(data.whenFalse)) {
					writer.code(" else ").expression(data.whenFalse.value);
				}
			}
			else if(KSHelper.valueOf(data.kind) === NodeKind.ReturnStatement.value) {
				writer.code(" => ").expression(data.value);
			}
			else {
				writer.code(" => ").expression(data);
			}
		};
		toFunctionBody.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return toFunctionBody.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function toLoopHeader() {
			return toLoopHeader.__ks_rt(this, arguments);
		};
		toLoopHeader.__ks_0 = function(data, writer) {
			let __ks_0 = data.kind.valueOf();
			if(__ks_0 === NodeKind.ForFromStatement.value) {
				writer.code(" for ");
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						writer.code("var ");
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Mutable.value) {
						writer.code("var mut ");
					}
				}
				writer.expression(data.variable).code(" from ").expression(data.from);
				if(KSType.isValue(data.til)) {
					writer.code(" til ").expression(data.til);
				}
				else if(KSType.isValue(data.to)) {
					writer.code(" to ").expression(data.to);
				}
				if(KSType.isValue(data.by)) {
					writer.code(" by ").expression(data.by);
				}
				if(KSType.isValue(data.until)) {
					writer.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					writer.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					writer.code(" when ").expression(data.when);
				}
			}
			else if(__ks_0 === NodeKind.ForInStatement.value) {
				let descending = false;
				writer.code(" for ");
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Descending.value) {
						descending = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						writer.code("var ");
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Mutable.value) {
						writer.code("var mut ");
					}
				}
				if(KSType.isValue(data.value)) {
					writer.expression(data.value);
					if(KSType.isValue(data.index)) {
						writer.code(", ").expression(data.index);
					}
				}
				else {
					writer.code("_, ").expression(data.index);
				}
				writer.code(" in ").expression(data.expression);
				if(descending) {
					writer.code(" desc");
				}
				if(KSType.isValue(data.from)) {
					writer.code(" from ").expression(data.from);
				}
				if(KSType.isValue(data.til)) {
					writer.code(" til ").expression(data.til);
				}
				else if(KSType.isValue(data.to)) {
					writer.code(" to ").expression(data.to);
				}
				if(KSType.isValue(data.until)) {
					writer.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					writer.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					writer.code(" when ").expression(data.when);
				}
			}
			else if(__ks_0 === NodeKind.ForOfStatement.value) {
				writer.code(" for ");
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						writer.code("var ");
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Mutable.value) {
						writer.code("var mut ");
					}
				}
				if(KSType.isValue(data.value)) {
					writer.expression(data.value);
					if(KSType.isValue(data.key)) {
						writer.code(", ").expression(data.key);
					}
				}
				else {
					writer.code("_, ").expression(data.key);
				}
				writer.code(" of ").expression(data.expression);
				if(KSType.isValue(data.until)) {
					writer.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					writer.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					writer.code(" when ").expression(data.when);
				}
			}
			else if(__ks_0 === NodeKind.ForRangeStatement.value) {
				writer.code(" for ");
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						writer.code("var ");
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Mutable.value) {
						writer.code("var mut ");
					}
				}
				writer.expression(data.value).code(" in ");
				if(KSType.isValue(data.from)) {
					writer.expression(data.from).code("..");
				}
				else if(KSType.isValue(data.then)) {
					writer.expression(data.then).code("<..");
				}
				if(KSType.isValue(data.til)) {
					writer.code("<").expression(data.til);
				}
				else if(KSType.isValue(data.to)) {
					writer.code("").expression(data.to);
				}
				if(KSType.isValue(data.by)) {
					writer.code("..").expression(data.by);
				}
				if(KSType.isValue(data.until)) {
					writer.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					writer.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					writer.code(" when ").expression(data.when);
				}
			}
		};
		toLoopHeader.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return toLoopHeader.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function toMacroElements() {
			return toMacroElements.__ks_rt(this, arguments);
		};
		toMacroElements.__ks_0 = function(elements, writer, parent = null) {
			const last = KSOperator.subtraction(elements.length, 1);
			for(let index = 0, __ks_0 = elements.length, element; index < __ks_0; ++index) {
				element = elements[index];
				let __ks_1 = element.kind.valueOf();
				if(__ks_1 === MacroElementKind.Expression.value) {
					writer.code("#");
					if((KSHelper.valueOf(element.reification.kind) === ReificationKind.Expression.value) && (KSHelper.valueOf(element.expression.kind) === NodeKind.Identifier.value)) {
						writer.expression(element.expression);
					}
					else if(KSHelper.valueOf(element.reification.kind) === ReificationKind.Join.value) {
						writer.code("j(").expression(element.expression).code(", ").expression(element.separator).code(")");
					}
					else {
						let __ks_2 = element.reification.kind.valueOf();
						if(__ks_2 === ReificationKind.Argument.value) {
							writer.code("a");
						}
						else if(__ks_2 === ReificationKind.Expression.value) {
							writer.code("e");
						}
						else if(__ks_2 === ReificationKind.Statement.value) {
							writer.code("s");
						}
						else if(__ks_2 === ReificationKind.Write.value) {
							writer.code("w");
						}
						writer.code("(").expression(element.expression).code(")");
					}
				}
				else if(__ks_1 === MacroElementKind.Literal.value) {
					writer.code(element.value);
				}
				else if(__ks_1 === MacroElementKind.NewLine.value) {
					if((index !== 0) && (index !== last) && (KSHelper.valueOf(elements[index - 1].kind) !== MacroElementKind.NewLine.value)) {
						parent.newLine();
					}
				}
			}
		};
		toMacroElements.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1])) {
					return toMacroElements.__ks_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function toQuote() {
			return toQuote.__ks_rt(this, arguments);
		};
		toQuote.__ks_0 = function(value) {
			return KSHelper.concatString("\"", value.replace(/"/g, "\\\"").replace(/\n/g, "\\n"), "\"");
		};
		toQuote.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return toQuote.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function toStatement() {
			return toStatement.__ks_rt(this, arguments);
		};
		toStatement.__ks_0 = function(data, writer) {
			let __ks_0 = data.kind.valueOf();
			if(__ks_0 === NodeKind.AccessorDeclaration.value) {
				const line = writer.newLine().code("get");
				if(KSType.isValue(data.body)) {
					if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
						line.newBlock().expression(data.body).done();
					}
					else {
						line.code(" => ").expression(data.body);
					}
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.BreakStatement.value) {
				writer.newLine().code("break").done();
			}
			else if(__ks_0 === NodeKind.CatchClause.value) {
				if(KSType.isValue(data.type)) {
					writer.code("on ").expression(data.type);
					if(KSType.isValue(data.binding)) {
						writer.code(" catch ").expression(data.binding);
					}
				}
				else {
					writer.code("catch");
					if(KSType.isValue(data.binding)) {
						writer.code(" ").expression(data.binding);
					}
				}
				writer.step().expression(data.body);
			}
			else if(__ks_0 === NodeKind.ClassDeclaration.value) {
				const line = writer.newLine();
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					let __ks_3 = modifier.kind.valueOf();
					if(__ks_3 === ModifierKind.Abstract.value) {
						line.code("abstract ");
					}
					else if(__ks_3 === ModifierKind.Immutable.value) {
						line.code("final ");
					}
					else if(__ks_3 === ModifierKind.Sealed.value) {
						line.code("sealed ");
					}
					else if(__ks_3 === ModifierKind.Systemic.value) {
						line.code("systemic ");
					}
				}
				line.code("class ").expression(data.name);
				if(KSType.isValue(data.version)) {
					line.code(KSHelper.concatString("@", data.version.major, ".", data.version.minor, ".", data.version.patch));
				}
				if(KSType.isValue(data.extends)) {
					line.code(" extends ").expression(data.extends);
				}
				const block = line.newBlock();
				for(let __ks_1 = 0, __ks_2 = data.members.length, member; __ks_1 < __ks_2; ++__ks_1) {
					member = data.members[__ks_1];
					block.statement(member);
				}
				block.done();
				line.done();
			}
			else if(__ks_0 === NodeKind.ContinueStatement.value) {
				writer.newLine().code("continue").done();
			}
			else if(__ks_0 === NodeKind.DestroyStatement.value) {
				writer.newLine().code("delete ").expression(data.variable).done();
			}
			else if(__ks_0 === NodeKind.DiscloseDeclaration.value) {
				const line = writer.newLine().code("disclose ").expression(data.name);
				const block = line.newBlock();
				for(let __ks_1 = 0, __ks_2 = data.members.length, member; __ks_1 < __ks_2; ++__ks_1) {
					member = data.members[__ks_1];
					block.statement(member);
				}
				block.done();
				line.done();
			}
			else if(__ks_0 === NodeKind.DoUntilStatement.value) {
				writer.newControl().code("do").step().expression(data.body).step().code("until ").expression(data.condition).done();
			}
			else if(__ks_0 === NodeKind.DoWhileStatement.value) {
				writer.newControl().code("do").step().expression(data.body).step().code("while ").expression(data.condition).done();
			}
			else if(__ks_0 === NodeKind.EnumDeclaration.value) {
				const line = writer.newLine();
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					let __ks_3 = modifier.kind.valueOf();
					if(__ks_3 === ModifierKind.Flagged.value) {
						line.code("flagged ");
					}
				}
				line.code("enum ").expression(data.name);
				if(KSType.isValue(data.type)) {
					line.code("<").expression(data.type).code(">");
				}
				const block = line.newBlock();
				for(let __ks_1 = 0, __ks_2 = data.members.length, member; __ks_1 < __ks_2; ++__ks_1) {
					member = data.members[__ks_1];
					block.statement(member);
				}
				block.done();
				line.done();
			}
			else if(__ks_0 === NodeKind.ExportDeclaration.value) {
				const line = writer.newLine();
				if((data.declarations.length === 1) && (!KSType.isValue(data.declarations[0].declaration) || (data.declarations[0].declaration.attributes.length === 0))) {
					line.code("export ").statement(data.declarations[0]);
				}
				else {
					const block = line.code("export").newBlock();
					for(let __ks_1 = 0, __ks_2 = data.declarations.length, declaration; __ks_1 < __ks_2; ++__ks_1) {
						declaration = data.declarations[__ks_1];
						block.statement(declaration);
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.ExportDeclarationSpecifier.value) {
				writer.statement(data.declaration);
			}
			else if(__ks_0 === NodeKind.ExportExclusionSpecifier.value) {
				const line = writer.newLine().code("*");
				if(data.exclusions.length !== 0) {
					line.code(" but ");
					for(let i = 0, __ks_1 = data.exclusions.length, exclusion; i < __ks_1; ++i) {
						exclusion = data.exclusions[i];
						if(i !== 0) {
							line.code(", ");
						}
						line.expression(exclusion);
					}
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.ExportNamedSpecifier.value) {
				if((data.local.kind === data.exported.kind) && (data.local.name === data.exported.name)) {
					writer.newLine().code(data.local.name).done();
				}
				else {
					writer.newLine().expression(data.local).code(KSHelper.concatString(" => ", data.exported.name)).done();
				}
			}
			else if(__ks_0 === NodeKind.ExportPropertiesSpecifier.value) {
				const line = writer.newLine();
				line.expression(data.object);
				if(data.properties.length === 1) {
					line.code(" for ").statement(data.dpropertieseclarations[0]);
				}
				else {
					const block = line.code(" for").newBlock();
					for(let __ks_1 = 0, __ks_2 = data.properties.length, property; __ks_1 < __ks_2; ++__ks_1) {
						property = data.properties[__ks_1];
						block.statement(property);
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.ExportWildcardSpecifier.value) {
				writer.newLine().expression(data.local).code(" for *").done();
			}
			else if(__ks_0 === NodeKind.ExternDeclaration.value) {
				const line = writer.newLine();
				if(data.declarations.length === 1) {
					line.code("extern ").statement(data.declarations[0]);
				}
				else {
					writer.pushMode(KSWriterMode.Extern);
					const block = line.code("extern").newBlock();
					for(let __ks_1 = 0, __ks_2 = data.declarations.length, declaration; __ks_1 < __ks_2; ++__ks_1) {
						declaration = data.declarations[__ks_1];
						block.statement(declaration);
					}
					block.done();
					writer.popMode();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.ExternOrRequireDeclaration.value) {
				const line = writer.newLine();
				if((data.declarations.length === 1) && (data.declarations[0].attributes.length === 0)) {
					line.code("extern|require ").statement(data.declarations[0]);
				}
				else {
					writer.pushMode(KSWriterMode.Extern);
					const block = line.code("extern|require").newBlock();
					for(let __ks_1 = 0, __ks_2 = data.declarations.length, declaration; __ks_1 < __ks_2; ++__ks_1) {
						declaration = data.declarations[__ks_1];
						block.statement(declaration);
					}
					block.done();
					writer.popMode();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.ExternOrImportDeclaration.value) {
				const line = writer.newLine();
				if((data.declarations.length === 1) && (data.declarations[0].attributes.length === 0)) {
					line.code("extern|import ").expression(data.declarations[0]);
				}
				else {
					const block = line.code("extern|import").newBlock();
					for(let __ks_1 = 0, __ks_2 = data.declarations.length, declaration; __ks_1 < __ks_2; ++__ks_1) {
						declaration = data.declarations[__ks_1];
						toAttributes(declaration, AttributeMode.Outer, block);
						block.newLine().expression(declaration).done();
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.FallthroughStatement.value) {
				writer.newLine().code("fallthrough").done();
			}
			else if(__ks_0 === NodeKind.FieldDeclaration.value) {
				const line = writer.newLine();
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					let __ks_3 = modifier.kind.valueOf();
					if(__ks_3 === ModifierKind.Dynamic.value) {
						line.code("dyn ");
					}
					else if(__ks_3 === ModifierKind.Immutable.value) {
						line.code("final ");
					}
					else if(__ks_3 === ModifierKind.Internal.value) {
						line.code("internal ");
					}
					else if(__ks_3 === ModifierKind.LateInit.value) {
						line.code("late ");
					}
					else if(__ks_3 === ModifierKind.Private.value) {
						line.code("private ");
					}
					else if(__ks_3 === ModifierKind.Protected.value) {
						line.code("protected ");
					}
					else if(__ks_3 === ModifierKind.Public.value) {
						line.code("public ");
					}
					else if(__ks_3 === ModifierKind.Static.value) {
						line.code("static ");
					}
				}
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.ThisAlias.value) {
						line.code("@");
						break;
					}
				}
				line.expression(data.name);
				if(KSType.isValue(data.type)) {
					line.code(": ").expression(data.type);
				}
				if(KSType.isValue(data.value)) {
					line.code(" = ").expression(data.value);
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.ForFromStatement.value) {
				const ctrl = writer.newControl().code("for ");
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Mutable.value) {
						ctrl.code("var mut ");
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						ctrl.code("var ");
					}
				}
				ctrl.expression(data.variable).code(" from ").expression(data.from);
				if(KSType.isValue(data.til)) {
					ctrl.code(" til ").expression(data.til);
				}
				else {
					ctrl.code(" to ").expression(data.to);
				}
				if(KSType.isValue(data.by)) {
					ctrl.code(" by ").expression(data.by);
				}
				if(KSType.isValue(data.until)) {
					ctrl.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					ctrl.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					ctrl.code(" when ").expression(data.when);
				}
				ctrl.step().expression(data.body).done();
			}
			else if(__ks_0 === NodeKind.ForInStatement.value) {
				let descending = false;
				let ctrl = null;
				if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
					ctrl = writer.newControl().code("for ");
				}
				else {
					ctrl = writer.newLine().expression(data.body).code(" for ");
				}
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Mutable.value) {
						ctrl.code("var mut ");
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						ctrl.code("var ");
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Descending.value) {
						descending = true;
					}
				}
				if(KSType.isValue(data.value)) {
					ctrl.expression(data.value);
					if(KSType.isValue(data.type)) {
						ctrl.code(": ").expression(data.type);
					}
					if(KSType.isValue(data.index)) {
						ctrl.code(", ").expression(data.index);
					}
				}
				else {
					ctrl.code("_, ").expression(data.index);
				}
				ctrl.code(" in ").expression(data.expression);
				if(descending) {
					ctrl.code(" desc");
				}
				if(KSType.isValue(data.from)) {
					ctrl.code(" from ").expression(data.from);
				}
				if(KSType.isValue(data.til)) {
					ctrl.code(" til ").expression(data.til);
				}
				else if(KSType.isValue(data.to)) {
					ctrl.code(" to ").expression(data.to);
				}
				if(KSType.isValue(data.by)) {
					ctrl.code(" by ").expression(data.by);
				}
				if(KSType.isValue(data.until)) {
					ctrl.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					ctrl.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					ctrl.code(" when ").expression(data.when);
				}
				if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
					ctrl.step().expression(data.body);
				}
				ctrl.done();
			}
			else if(__ks_0 === NodeKind.ForRangeStatement.value) {
				const ctrl = writer.newControl().code("for ");
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Mutable.value) {
						ctrl.code("var mut ");
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						ctrl.code("var ");
					}
				}
				ctrl.expression(data.value).code(" in ");
				if(KSType.isValue(data.from)) {
					ctrl.expression(data.from);
				}
				else {
					ctrl.expression(data.then).code("<");
				}
				if(KSType.isValue(data.to)) {
					ctrl.code("..").expression(data.to);
				}
				else {
					ctrl.code("..<").expression(data.til);
				}
				if(KSType.isValue(data.by)) {
					ctrl.code("..").expression(data.by);
				}
				if(KSType.isValue(data.until)) {
					ctrl.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					ctrl.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					ctrl.code(" when ").expression(data.when);
				}
				ctrl.step().expression(data.body);
				ctrl.done();
			}
			else if(__ks_0 === NodeKind.ForOfStatement.value) {
				let ctrl = null;
				if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
					ctrl = writer.newControl().code("for ");
				}
				else {
					ctrl = writer.newLine().expression(data.body).code(" for ");
				}
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Mutable.value) {
						ctrl.code("var mut ");
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						ctrl.code("var ");
					}
				}
				if(KSType.isValue(data.value)) {
					ctrl.expression(data.value);
					if(KSType.isValue(data.type)) {
						ctrl.code(": ").expression(data.type);
					}
					if(KSType.isValue(data.key)) {
						ctrl.code(", ").expression(data.key);
					}
				}
				else {
					ctrl.code("_, ").expression(data.key);
				}
				ctrl.code(" of ").expression(data.expression);
				if(KSType.isValue(data.until)) {
					ctrl.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					ctrl.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					ctrl.code(" when ").expression(data.when);
				}
				if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
					ctrl.step().expression(data.body);
				}
				ctrl.done();
			}
			else if(__ks_0 === NodeKind.FunctionDeclaration.value) {
				const line = writer.newLine();
				toFunctionHeader(data, (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 1) {
							if(t0(args[0])) {
								return __ks_rt.__ks_0.call(this, args[0]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (writer) => {
						if(KSHelper.valueOf(writer.mode()) !== KSWriterMode.Extern.value) {
							writer.code("func ");
						}
					};
					return __ks_rt;
				})(), line);
				if(KSType.isValue(data.body)) {
					toFunctionBody(data.body, line);
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.IfStatement.value) {
				let __ks_1 = data.whenTrue.kind.valueOf();
				if(__ks_1 === NodeKind.Block.value) {
					const ctrl = writer.newControl().code("if ").expression(data.condition).step().expression(data.whenTrue);
					while(KSType.isValue(data.whenFalse)) {
						if(KSHelper.valueOf(data.whenFalse.kind) === NodeKind.IfStatement.value) {
							data = data.whenFalse;
							ctrl.step().code("else if ").expression(data.condition).step().expression(data.whenTrue);
						}
						else {
							ctrl.step().code("else").step().expression(data.whenFalse);
							break;
						}
					}
					ctrl.done();
				}
				else if(__ks_1 === NodeKind.ReturnStatement.value) {
					if(KSType.isValue(data.whenTrue.value)) {
						writer.newLine().code("return ").expression(data.whenTrue.value).code(" if ").expression(data.condition).done();
					}
					else {
						writer.newLine().code("return if ").expression(data.condition).done();
					}
				}
				else if(__ks_1 === NodeKind.ThrowStatement.value) {
					writer.newLine().code("throw ").expression(data.whenTrue.value).code(" if ").expression(data.condition).done();
				}
				else {
					writer.newLine().expression(data.whenTrue).code(" if ").expression(data.condition).done();
				}
			}
			else if(__ks_0 === NodeKind.ImplementDeclaration.value) {
				const line = writer.newLine().code("impl ").expression(data.variable);
				const block = line.newBlock();
				for(let __ks_1 = 0, __ks_2 = data.properties.length, property; __ks_1 < __ks_2; ++__ks_1) {
					property = data.properties[__ks_1];
					block.statement(property);
				}
				block.done();
				line.done();
			}
			else if(__ks_0 === NodeKind.ImportDeclaration.value) {
				const line = writer.newLine();
				if((data.declarations.length === 1) && (data.declarations[0].attributes.length === 0)) {
					line.code("import ").expression(data.declarations[0]);
				}
				else {
					const block = line.code("import").newBlock();
					for(let __ks_1 = 0, __ks_2 = data.declarations.length, declaration; __ks_1 < __ks_2; ++__ks_1) {
						declaration = data.declarations[__ks_1];
						toAttributes(declaration, AttributeMode.Outer, block);
						block.newLine().expression(declaration).done();
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.IncludeAgainDeclaration.value) {
				const line = writer.newLine();
				if(data.declarations.length === 1) {
					line.code("include again ").statement(data.declarations[0]);
				}
				else {
					const block = line.code("include again").newBlock();
					for(let __ks_1 = 0, __ks_2 = data.declarations.length, declaration; __ks_1 < __ks_2; ++__ks_1) {
						declaration = data.declarations[__ks_1];
						block.newLine().statement(declaration).done();
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.IncludeDeclaration.value) {
				const line = writer.newLine();
				const block = line.code("include").newBlock();
				for(let __ks_1 = 0, __ks_2 = data.declarations.length, declaration; __ks_1 < __ks_2; ++__ks_1) {
					declaration = data.declarations[__ks_1];
					block.expression(declaration);
				}
				block.done();
				line.done();
			}
			else if(__ks_0 === NodeKind.MacroDeclaration.value) {
				const line = writer.newLine();
				toFunctionHeader(data, (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 1) {
							if(t0(args[0])) {
								return __ks_rt.__ks_0.call(this, args[0]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (writer) => {
						writer.code("macro ");
					};
					return __ks_rt;
				})(), line);
				if(KSHelper.valueOf(data.body.kind) === NodeKind.MacroExpression.value) {
					line.code(" => ");
					toMacroElements(data.body.elements, line);
				}
				else {
					line.newBlock().expression(data.body).done();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.MethodDeclaration.value) {
				const line = writer.newLine();
				toFunctionHeader(data, (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 1) {
							if(t0(args[0])) {
								return __ks_rt.__ks_0.call(this, args[0]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (writer) => {
					};
					return __ks_rt;
				})(), line);
				if(KSType.isValue(data.body)) {
					toFunctionBody(data.body, line);
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.Module.value) {
				toAttributes.__ks_0(data, AttributeMode.Inner, writer);
				for(let __ks_1 = 0, __ks_2 = data.body.length, node; __ks_1 < __ks_2; ++__ks_1) {
					node = data.body[__ks_1];
					writer.statement(node);
				}
			}
			else if(__ks_0 === NodeKind.MutatorDeclaration.value) {
				const line = writer.newLine().code("set");
				if(KSType.isValue(data.body)) {
					if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
						line.newBlock().expression(data.body).done();
					}
					else {
						line.code(" => ").expression(data.body);
					}
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.NamespaceDeclaration.value) {
				const line = writer.newLine();
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					let __ks_3 = modifier.kind.valueOf();
					if(__ks_3 === ModifierKind.Sealed.value) {
						line.code("sealed ");
					}
				}
				line.code("namespace ").expression(data.name);
				if(data.statements.length !== 0) {
					const block = line.newBlock();
					for(let __ks_1 = 0, __ks_2 = data.statements.length, statement; __ks_1 < __ks_2; ++__ks_1) {
						statement = data.statements[__ks_1];
						block.statement(statement);
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.PropertyDeclaration.value) {
				const line = writer.newLine();
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					let __ks_3 = modifier.kind.valueOf();
					if(__ks_3 === ModifierKind.Private.value) {
						line.code("private ");
					}
					else if(__ks_3 === ModifierKind.Protected.value) {
						line.code("protected ");
					}
					else if(__ks_3 === ModifierKind.Public.value) {
						line.code("public ");
					}
				}
				line.expression(data.name);
				if(KSType.isValue(data.type)) {
					line.code(": ").expression(data.type);
				}
				const block = line.newBlock();
				if(KSType.isValue(data.accessor)) {
					block.statement(data.accessor);
				}
				if(KSType.isValue(data.mutator)) {
					block.statement(data.mutator);
				}
				block.done();
				if(KSType.isValue(data.defaultValue)) {
					line.code(" = ");
					line.expression(data.defaultValue);
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.RequireDeclaration.value) {
				const line = writer.newLine();
				if((data.declarations.length === 1) && (data.declarations[0].attributes.length === 0)) {
					line.code("require ").statement(data.declarations[0]);
				}
				else {
					writer.pushMode(KSWriterMode.Extern);
					const block = line.code("require").newBlock();
					for(let __ks_1 = 0, __ks_2 = data.declarations.length, declaration; __ks_1 < __ks_2; ++__ks_1) {
						declaration = data.declarations[__ks_1];
						block.statement(declaration);
					}
					block.done();
					writer.popMode();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.RequireOrExternDeclaration.value) {
				const line = writer.newLine();
				if((data.declarations.length === 1) && (data.declarations[0].attributes.length === 0)) {
					line.code("require|extern ").statement(data.declarations[0]);
				}
				else {
					writer.pushMode(KSWriterMode.Extern);
					const block = line.code("require|extern").newBlock();
					for(let __ks_1 = 0, __ks_2 = data.declarations.length, declaration; __ks_1 < __ks_2; ++__ks_1) {
						declaration = data.declarations[__ks_1];
						block.statement(declaration);
					}
					block.done();
					writer.popMode();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.RequireOrImportDeclaration.value) {
				const line = writer.newLine();
				if((data.declarations.length === 1) && (data.declarations[0].attributes.length === 0)) {
					line.code("require|import ").expression(data.declarations[0]);
				}
				else {
					const block = line.code("require|import").newBlock();
					for(let __ks_1 = 0, __ks_2 = data.declarations.length, declaration; __ks_1 < __ks_2; ++__ks_1) {
						declaration = data.declarations[__ks_1];
						toAttributes(declaration, AttributeMode.Outer, block);
						block.newLine().expression(declaration).done();
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.ReturnStatement.value) {
				if(KSType.isValue(data.value)) {
					writer.newLine().code("return ").expression(data.value).done();
				}
				else {
					writer.newLine().code("return").done();
				}
			}
			else if(__ks_0 === NodeKind.StructDeclaration.value) {
				const line = writer.newLine();
				line.code("struct ").expression(data.name);
				if(KSType.isValue(data.extends)) {
					line.code(" extends ").expression(data.extends);
				}
				if(data.fields.length !== 0) {
					const block = line.newBlock();
					for(let __ks_1 = 0, __ks_2 = data.fields.length, field; __ks_1 < __ks_2; ++__ks_1) {
						field = data.fields[__ks_1];
						block.statement(field);
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.StructField.value) {
				const line = writer.newLine();
				line.expression(data.name);
				if(KSType.isValue(data.type)) {
					line.code(": ").expression(data.type);
				}
				if(KSType.isValue(data.defaultValue)) {
					line.code(" = ").expression(data.defaultValue);
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.SwitchClause.value) {
				const line = writer.newLine();
				if(data.conditions.length !== 0) {
					for(let index = 0, __ks_1 = data.conditions.length, condition; index < __ks_1; ++index) {
						condition = data.conditions[index];
						if(index !== 0) {
							line.code(", ");
						}
						line.expression(condition);
					}
					line.code(" ");
				}
				if(data.bindings.length !== 0) {
					line.code("with ");
					for(let index = 0, __ks_1 = data.bindings.length, binding; index < __ks_1; ++index) {
						binding = data.bindings[index];
						if(index !== 0) {
							line.code(", ");
						}
						line.expression(binding);
					}
					line.code(" ");
				}
				if(KSType.isValue(data.filter)) {
					line.code("when ").expression(data.filter).code(" ");
				}
				if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
					line.code("=>").newBlock().expression(data.body).done();
				}
				else {
					line.code("=> ").statement(data.body);
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.SwitchStatement.value) {
				const ctrl = writer.newControl().code("switch ").expression(data.expression).step();
				for(let __ks_1 = 0, __ks_2 = data.clauses.length, clause; __ks_1 < __ks_2; ++__ks_1) {
					clause = data.clauses[__ks_1];
					ctrl.statement(clause);
				}
				ctrl.done();
			}
			else if(__ks_0 === NodeKind.ThrowStatement.value) {
				writer.newLine().code("throw ").expression(data.value).done();
			}
			else if(__ks_0 === NodeKind.TryStatement.value) {
				const ctrl = writer.newControl().code("try").step().expression(data.body);
				for(let __ks_1 = 0, __ks_2 = data.catchClauses.length, clause; __ks_1 < __ks_2; ++__ks_1) {
					clause = data.catchClauses[__ks_1];
					ctrl.step().statement(clause);
				}
				if(KSType.isValue(data.catchClause)) {
					ctrl.step().statement(data.catchClause);
				}
				if(KSType.isValue(data.finalizer)) {
					ctrl.step().code("finally").step().expression(data.finalizer);
				}
				ctrl.done();
			}
			else if(__ks_0 === NodeKind.TupleDeclaration.value) {
				let named = false;
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Named.value) {
						named = true;
					}
				}
				const line = writer.newLine();
				line.code("tuple ").expression(data.name);
				if(data.fields.length !== 0) {
					if(named) {
						if(KSType.isValue(data.extends)) {
							line.code(" extends ").expression(data.extends);
						}
						const block = line.newBlock();
						for(let __ks_1 = 0, __ks_2 = data.fields.length, field; __ks_1 < __ks_2; ++__ks_1) {
							field = data.fields[__ks_1];
							block.newLine().statement(field).done();
						}
						block.done();
					}
					else {
						line.code("(");
						for(let index = 0, __ks_1 = data.fields.length, field; index < __ks_1; ++index) {
							field = data.fields[index];
							if(index !== 0) {
								line.code(", ");
							}
							line.statement(field);
						}
						line.code(")");
						if(KSType.isValue(data.extends)) {
							line.code(" extends ").expression(data.extends);
						}
					}
				}
				else {
					if(KSType.isValue(data.extends)) {
						line.code(" extends ").expression(data.extends);
					}
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.TupleField.value) {
				if(KSType.isValue(data.name)) {
					writer.expression(data.name);
					if(KSType.isValue(data.type)) {
						writer.code(": ").expression(data.type);
					}
				}
				else {
					writer.expression(data.type);
				}
				if(KSType.isValue(data.defaultValue)) {
					writer.code(" = ").expression(data.defaultValue);
				}
			}
			else if(__ks_0 === NodeKind.TypeAliasDeclaration.value) {
				writer.newLine().code("type ").expression(data.name).code(" = ").expression(data.type).done();
			}
			else if(__ks_0 === NodeKind.UnlessStatement.value) {
				let __ks_1 = data.whenFalse.kind.valueOf();
				if(__ks_1 === NodeKind.Block.value) {
					const ctrl = writer.newControl().code("unless ").expression(data.condition).step().expression(data.whenFalse);
					ctrl.done();
				}
				else if(__ks_1 === NodeKind.ReturnStatement.value) {
					if(KSType.isValue(data.whenFalse.value)) {
						writer.newLine().code("return ").expression(data.whenFalse.value).code(" unless ").expression(data.condition).done();
					}
					else {
						writer.newLine().code("return unless ").expression(data.condition).done();
					}
				}
				else if(__ks_1 === NodeKind.ThrowStatement.value) {
					writer.newLine().code("throw ").expression(data.whenFalse.value).code(" unless ").expression(data.condition).done();
				}
				else {
					writer.newLine().expression(data.whenFalse).code(" unless ").expression(data.condition).done();
				}
			}
			else if(__ks_0 === NodeKind.UntilStatement.value) {
				writer.newControl().code("until ").expression(data.condition).step().expression(data.body).done();
			}
			else if(__ks_0 === NodeKind.VariableDeclaration.value) {
				const line = writer.newLine();
				line.code("var ");
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Dynamic.value) {
						line.code("dyn ");
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.LateInit.value) {
						line.code("late ");
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Mutable.value) {
						line.code("mut ");
					}
				}
				for(let index = 0, __ks_1 = data.variables.length, variable; index < __ks_1; ++index) {
					variable = data.variables[index];
					if(index !== 0) {
						line.code(", ");
					}
					line.expression(variable);
				}
				if(KSType.isValue(data.init)) {
					line.code(" = ");
					if(data.await === true) {
						line.code("await ");
					}
					line.expression(data.init);
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.WhileStatement.value) {
				writer.newControl().code("while ").expression(data.condition).step().expression(data.body).done();
			}
			else {
				writer.newLine().expression(data).done();
			}
		};
		toStatement.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return toStatement.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function toWrap() {
			return toWrap.__ks_rt(this, arguments);
		};
		toWrap.__ks_0 = function(data, writer) {
			let __ks_0 = data.kind.valueOf();
			if(__ks_0 === NodeKind.BinaryExpression.value && (KSHelper.valueOf(data.operator.kind) !== BinaryOperatorKind.TypeCasting.value)) {
				writer.code("(").expression(data).code(")");
			}
			else if(__ks_0 === NodeKind.ComparisonExpression.value || __ks_0 === NodeKind.ConditionalExpression.value || __ks_0 === NodeKind.PolyadicExpression.value) {
				writer.code("(").expression(data).code(")");
			}
			else {
				writer.expression(data);
			}
		};
		toWrap.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return toWrap.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		return {
			generate,
			KSWriter,
			KSWriterMode
		};
	});
	const Mode = KSHelper.enum(Number, {
		None: 0,
		Async: 1
	});
	class CodeFragment extends Fragment {
		static __ks_new_0(...args) {
			const o = Object.create(CodeFragment.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(CodeFragment.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this.end = null;
			this.start = null;
		}
		__ks_cons_0(code) {
			if(code === void 0) {
				code = null;
			}
			Fragment.prototype.__ks_cons_0.call(this, code);
		}
		__ks_cons_1(code, start, end) {
			if(code === void 0) {
				code = null;
			}
			if(start === void 0) {
				start = null;
			}
			if(end === void 0) {
				end = null;
			}
			Fragment.prototype.__ks_cons_0.call(this, code);
			this.start = start;
			this.end = end;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return CodeFragment.prototype.__ks_cons_0.call(that, args[0]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return CodeFragment.prototype.__ks_cons_1.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
	}
	function $code() {
		return $code.__ks_rt(this, arguments);
	};
	$code.__ks_0 = function(code) {
		return CodeFragment.__ks_new_0(code);
	};
	$code.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 1) {
			if(t0(args[0])) {
				return $code.__ks_0.call(that, args[0]);
			}
		}
		throw KSHelper.badArgs();
	};
	function $const() {
		return $const.__ks_rt(this, arguments);
	};
	$const.__ks_0 = function(node) {
		return (node._options.format.variables === "es5") ? "var " : "const ";
	};
	$const.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 1) {
			if(t0(args[0])) {
				return $const.__ks_0.call(that, args[0]);
			}
		}
		throw KSHelper.badArgs();
	};
	function $quote() {
		return $quote.__ks_rt(this, arguments);
	};
	$quote.__ks_0 = function(value) {
		return KSHelper.concatString("\"", value.replace(/"/g, "\\\"").replace(/\n/g, "\\n"), "\"");
	};
	$quote.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 1) {
			if(t0(args[0])) {
				return $quote.__ks_0.call(that, args[0]);
			}
		}
		throw KSHelper.badArgs();
	};
	const $comma = $code.__ks_0(", ");
	const $dot = $code.__ks_0(".");
	const $equals = $code.__ks_0(" = ");
	const $space = $code.__ks_0(" ");
	class FragmentBuilder extends Writer {
		static __ks_new_0(...args) {
			const o = Object.create(FragmentBuilder.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(indent) {
			Writer.prototype.__ks_cons_0.call(this, (() => {
				const d = new Dictionary();
				d.indent = (() => {
					const d = new Dictionary();
					d.level = indent;
					return d;
				})();
				d.classes = (() => {
					const d = new Dictionary();
					d.array = ArrayWriter;
					d.block = BlockBuilder;
					d.control = ControlBuilder;
					d.expression = ExpressionBuilder;
					d.fragment = CodeFragment;
					d.line = LineBuilder;
					d.object = ObjectWriter;
					return d;
				})();
				return d;
			})());
			this._indent = indent;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isNumber;
			if(args.length === 1) {
				if(t0(args[0])) {
					return FragmentBuilder.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_line_0(args) {
			const line = this.__ks_func_newLine_0(this._indent);
			if((args.length === 1) && !KSType.isPrimitive(args[0])) {
				line.compile(args[0]);
			}
			else {
				line.code(...args);
			}
			line.done();
			return this;
		}
	}
	class BlockBuilder extends BlockWriter {
		static __ks_new_0(...args) {
			const o = Object.create(BlockBuilder.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		compile() {
			return this.__ks_func_compile_rt.call(null, this, this, arguments);
		}
		__ks_func_compile_0(node, mode) {
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			if(!KSType.isPrimitive(node)) {
				node.toFragments(this, mode);
			}
			else {
				this._writer.push(this._writer.newFragment(node));
			}
			return this;
		}
		__ks_func_compile_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0])) {
					return proto.__ks_func_compile_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_compile_rt) {
				return super.__ks_func_compile_rt.call(null, that, BlockWriter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_line_0(args) {
			const line = this._writer.newLine(this._indent + 1);
			if((args.length === 1) && !KSType.isPrimitive(args[0])) {
				line.compile(args[0]);
			}
			else {
				line.code(...args);
			}
			line.done();
			return this;
		}
	}
	class ControlBuilder extends ControlWriter {
		static __ks_new_0(...args) {
			const o = Object.create(ControlBuilder.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		block() {
			return this.__ks_func_block_rt.call(null, this, this, arguments);
		}
		__ks_func_block_0() {
			if(KSType.isClassInstance(this._step, BlockBuilder)) {
				return this._step;
			}
			else {
				return null;
			}
		}
		__ks_func_block_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_block_0.call(that);
			}
			if(super.__ks_func_block_rt) {
				return super.__ks_func_block_rt.call(null, that, ControlWriter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		compile() {
			return this.__ks_func_compile_rt.call(null, this, this, arguments);
		}
		__ks_func_compile_0(node, mode) {
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			this._step.compile(node, mode);
			return this;
		}
		__ks_func_compile_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0])) {
					return proto.__ks_func_compile_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_compile_rt) {
				return super.__ks_func_compile_rt.call(null, that, ControlWriter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		compileBoolean() {
			return this.__ks_func_compileBoolean_rt.call(null, this, this, arguments);
		}
		__ks_func_compileBoolean_0(node, mode, junction) {
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			this._step.compileBoolean(node, mode, junction);
			return this;
		}
		__ks_func_compileBoolean_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = () => true;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 3) {
				if(t0(args[0])) {
					if(KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t1, pts, 1) && te(pts, 2)) {
						return proto.__ks_func_compileBoolean_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
					}
					throw KSHelper.badArgs();
				}
			}
			if(super.__ks_func_compileBoolean_rt) {
				return super.__ks_func_compileBoolean_rt.call(null, that, ControlWriter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		compileNullable() {
			return this.__ks_func_compileNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_compileNullable_0(node) {
			this._step.compileNullable(node);
			return this;
		}
		__ks_func_compileNullable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_compileNullable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_compileNullable_rt) {
				return super.__ks_func_compileNullable_rt.call(null, that, ControlWriter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		compileReusable() {
			return this.__ks_func_compileReusable_rt.call(null, this, this, arguments);
		}
		__ks_func_compileReusable_0(node) {
			if(!KSType.isPrimitive(node)) {
				node.toReusableFragments(this);
			}
			else {
				this._writer.push(this._writer.newFragment(node));
			}
			return this;
		}
		__ks_func_compileReusable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_compileReusable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_compileReusable_rt) {
				return super.__ks_func_compileReusable_rt.call(null, that, ControlWriter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		wrap() {
			return this.__ks_func_wrap_rt.call(null, this, this, arguments);
		}
		__ks_func_wrap_1(node, mode = null) {
			this._step.wrap(node, mode);
			return this;
		}
		__ks_func_wrap_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0])) {
					return proto.__ks_func_wrap_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_wrap_rt) {
				return super.__ks_func_wrap_rt.call(null, that, ControlWriter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		wrapBoolean() {
			return this.__ks_func_wrapBoolean_rt.call(null, this, this, arguments);
		}
		__ks_func_wrapBoolean_0(node, mode, junction) {
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			this._step.wrapBoolean(node, mode, junction);
			return this;
		}
		__ks_func_wrapBoolean_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = () => true;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 3) {
				if(t0(args[0])) {
					if(KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t1, pts, 1) && te(pts, 2)) {
						return proto.__ks_func_wrapBoolean_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
					}
					throw KSHelper.badArgs();
				}
			}
			if(super.__ks_func_wrapBoolean_rt) {
				return super.__ks_func_wrapBoolean_rt.call(null, that, ControlWriter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		wrapNullable() {
			return this.__ks_func_wrapNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_wrapNullable_0(node) {
			this._step.wrapNullable(node);
			return this;
		}
		__ks_func_wrapNullable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_wrapNullable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_wrapNullable_rt) {
				return super.__ks_func_wrapNullable_rt.call(null, that, ControlWriter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ExpressionBuilder extends ExpressionWriter {
		static __ks_new_0(...args) {
			const o = Object.create(ExpressionBuilder.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_code_0(args) {
			let data = null;
			for(let i = 0, __ks_0 = args.length, arg; i < __ks_0; ++i) {
				arg = args[i];
				if(KSType.isArray(arg)) {
					this.__ks_func_code_0(arg);
				}
				else if(!KSType.isPrimitive(arg)) {
					this._writer.push(arg);
				}
				else {
					if(((i + 1) < args.length) && !KSType.isPrimitive(data = args[i + 1]) && KSType.isValue(data.kind)) {
						if(KSType.isValue(data.start)) {
							this._writer.push(this._writer.newFragment(arg, data.start, data.end));
						}
						else {
							this._writer.push(this._writer.newFragment(arg));
						}
						i++;
					}
					else {
						this._writer.push(this._writer.newFragment(arg));
					}
				}
			}
			return this;
		}
		compile() {
			return this.__ks_func_compile_rt.call(null, this, this, arguments);
		}
		__ks_func_compile_0(node, mode) {
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			if(!KSType.isPrimitive(node)) {
				node.toFragments(this, mode);
			}
			else {
				this._writer.push(this._writer.newFragment(node));
			}
			return this;
		}
		__ks_func_compile_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0])) {
					return proto.__ks_func_compile_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_compile_rt) {
				return super.__ks_func_compile_rt.call(null, that, ExpressionWriter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		compileBoolean() {
			return this.__ks_func_compileBoolean_rt.call(null, this, this, arguments);
		}
		__ks_func_compileBoolean_0(node, mode, junction) {
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			if(!KSType.isPrimitive(node)) {
				node.toBooleanFragments(this, mode, junction);
			}
			else {
				this._writer.push(this._writer.newFragment(node));
			}
			return this;
		}
		__ks_func_compileBoolean_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = () => true;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 3) {
				if(t0(args[0])) {
					if(KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t1, pts, 1) && te(pts, 2)) {
						return proto.__ks_func_compileBoolean_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
					}
					throw KSHelper.badArgs();
				}
			}
			if(super.__ks_func_compileBoolean_rt) {
				return super.__ks_func_compileBoolean_rt.call(null, that, ExpressionWriter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		compileNullable() {
			return this.__ks_func_compileNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_compileNullable_0(node) {
			if(!KSType.isPrimitive(node)) {
				node.toNullableFragments(this);
			}
			else {
				this._writer.push(this._writer.newFragment(node));
			}
			return this;
		}
		__ks_func_compileNullable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_compileNullable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_compileNullable_rt) {
				return super.__ks_func_compileNullable_rt.call(null, that, ExpressionWriter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		compileReusable() {
			return this.__ks_func_compileReusable_rt.call(null, this, this, arguments);
		}
		__ks_func_compileReusable_0(node) {
			if(!KSType.isPrimitive(node)) {
				node.toReusableFragments(this);
			}
			else {
				this._writer.push(this._writer.newFragment(node));
			}
			return this;
		}
		__ks_func_compileReusable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_compileReusable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_compileReusable_rt) {
				return super.__ks_func_compileReusable_rt.call(null, that, ExpressionWriter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		wrap() {
			return this.__ks_func_wrap_rt.call(null, this, this, arguments);
		}
		__ks_func_wrap_2(node, mode) {
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			if(node.isComputed() === true) {
				this.__ks_func_code_0(["("]);
				node.toFragments(this, mode);
				this.__ks_func_code_0([")"]);
			}
			else {
				node.toFragments(this, mode);
			}
			return this;
		}
		__ks_func_wrap_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0])) {
					return proto.__ks_func_wrap_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_wrap_rt) {
				return super.__ks_func_wrap_rt.call(null, that, ExpressionWriter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		wrapBoolean() {
			return this.__ks_func_wrapBoolean_rt.call(null, this, this, arguments);
		}
		__ks_func_wrapBoolean_0(node, mode, junction) {
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			if(node.isBooleanComputed(junction) === true) {
				this.__ks_func_code_0(["("]);
				node.toBooleanFragments(this, mode, junction);
				this.__ks_func_code_0([")"]);
			}
			else {
				node.toBooleanFragments(this, mode, junction);
			}
			return this;
		}
		__ks_func_wrapBoolean_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = () => true;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 3) {
				if(t0(args[0])) {
					if(KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t1, pts, 1) && te(pts, 2)) {
						return proto.__ks_func_wrapBoolean_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
					}
					throw KSHelper.badArgs();
				}
			}
			if(super.__ks_func_wrapBoolean_rt) {
				return super.__ks_func_wrapBoolean_rt.call(null, that, ExpressionWriter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		wrapNullable() {
			return this.__ks_func_wrapNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_wrapNullable_0(node) {
			if(node.isNullableComputed() === true) {
				this.__ks_func_code_0(["("]);
				node.toNullableFragments(this);
				this.__ks_func_code_0([")"]);
			}
			else {
				node.toNullableFragments(this);
			}
			return this;
		}
		__ks_func_wrapNullable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_wrapNullable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_wrapNullable_rt) {
				return super.__ks_func_wrapNullable_rt.call(null, that, ExpressionWriter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class LineBuilder extends ExpressionBuilder {
		static __ks_new_0(...args) {
			const o = Object.create(LineBuilder.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._whenDone = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		block() {
			return this.__ks_func_block_rt.call(null, this, this, arguments);
		}
		__ks_func_block_0() {
			return this.__ks_func_newBlock_0();
		}
		__ks_func_block_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_block_0.call(that);
			}
			if(super.__ks_func_block_rt) {
				return super.__ks_func_block_rt.call(null, that, ExpressionBuilder.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_done_0() {
			if(this._undone) {
				this._writer.push(this._writer.lineTerminator);
				this._undone = false;
				if(this._whenDone !== null) {
					this._whenDone();
					this._whenDone = null;
				}
			}
		}
		__ks_func_newControl_0(indent, initiator, terminator) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(initiator === void 0 || initiator === null) {
				initiator = true;
			}
			if(terminator === void 0 || terminator === null) {
				terminator = true;
			}
			return this._writer.newControl(indent, initiator, terminator);
		}
		__ks_func_newLine_3() {
			return this;
		}
		__ks_func_newLine_0(indent) {
			return this.__ks_func_newLine_3(indent);
		}
		__ks_func_newLine_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_newLine_3.call(that);
			}
			return super.__ks_func_newLine_rt.call(null, that, ExpressionBuilder.prototype, args);
		}
		whenDone() {
			return this.__ks_func_whenDone_rt.call(null, this, this, arguments);
		}
		__ks_func_whenDone_0(whenDone) {
			if(whenDone === void 0) {
				whenDone = null;
			}
			this._whenDone = whenDone;
		}
		__ks_func_whenDone_rt(that, proto, args) {
			const t0 = value => KSType.isFunction(value) || KSType.isNull(value);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_whenDone_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_whenDone_rt) {
				return super.__ks_func_whenDone_rt.call(null, that, ExpressionBuilder.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	const $importTypeModifiers = /^(\w+)(!)?(\?)?$/;
	const $natives = (() => {
		const d = new Dictionary();
		d.Any = true;
		d.any = true;
		d.Array = true;
		d.array = true;
		d.Boolean = true;
		d.bool = true;
		d.Class = true;
		d.class = true;
		d.Date = true;
		d.date = true;
		d.Dictionary = true;
		d.dict = true;
		d.Enum = true;
		d.enum = true;
		d.Error = true;
		d.Function = true;
		d.func = true;
		d.Never = true;
		d.never = true;
		d.Namespace = true;
		d.Null = true;
		d.null = true;
		d.Number = true;
		d.number = true;
		d.Primitive = true;
		d.Object = true;
		d.object = true;
		d.RegExp = true;
		d.regex = true;
		d.String = true;
		d.string = true;
		d.Struct = true;
		d.struct = true;
		d.Tuple = true;
		d.tuple = true;
		d.Void = true;
		d.void = true;
		return d;
	})();
	const $types = (() => {
		const d = new Dictionary();
		d.any = "Any";
		d.array = "Array";
		d.bool = "Boolean";
		d.class = "Class";
		d.date = "Date";
		d.dict = "Dictionary";
		d.enum = "Enum";
		d.func = "Function";
		d.never = "Never";
		d.number = "Number";
		d.object = "Object";
		d.string = "String";
		d.struct = "Struct";
		d.void = "Void";
		return d;
	})();
	const $virtuals = (() => {
		const d = new Dictionary();
		d.Enum = true;
		d.Namespace = true;
		d.Primitive = true;
		d.Struct = true;
		d.Tuple = true;
		return d;
	})();
	const ExportMode = KSHelper.enum(Object, {
		Default: 0n,
		Alien: 1n,
		Export: 2n,
		Requirement: 4n,
		OverloadedFunction: 8n
	});
	const MatchingMode = KSHelper.enum(Object, {
		Default: 0n,
		Exact: 1n,
		ExactError: 2n,
		ExactParameter: 4n,
		ExactReturn: 8n,
		Similar: 16n,
		SimilarErrors: 32n,
		SimilarParameter: 64n,
		SimilarReturn: 128n,
		Missing: 256n,
		MissingArity: 512n,
		MissingDefault: 1024n,
		MissingError: 2048n,
		MissingParameter: 4096n,
		MissingParameterArity: 8192n,
		MissingParameterDefault: 16384n,
		MissingParameterType: 32768n,
		MissingReturn: 65536n,
		MissingType: 131072n,
		Subclass: 262144n,
		SubclassError: 524288n,
		SubclassParameter: 1048576n,
		SubclassReturn: 2097152n,
		Subset: 4194304n,
		SubsetParameter: 8388608n,
		Superclass: 16777216n,
		NonNullToNull: 33554432n,
		NonNullToNullParameter: 67108864n,
		NullToNonNull: 134217728n,
		NullToNonNullParameter: 268435456n,
		AdditionalParameter: 536870912n,
		ShiftableParameters: 1073741824n,
		RequireAllParameters: 2147483648n,
		Renamed: 4294967296n,
		IgnoreError: 8589934592n,
		IgnoreName: 17179869184n,
		IgnoreReturn: 34359738368n,
		AutoCast: 68719476736n
	});
	MatchingMode.Signature = MatchingMode(MatchingMode.Similar | MatchingMode.MissingParameter | MatchingMode.ShiftableParameters | MatchingMode.MissingParameterType | MatchingMode.RequireAllParameters | MatchingMode.MissingReturn);
	MatchingMode.FunctionSignature = MatchingMode(MatchingMode.ExactParameter | MatchingMode.SubclassParameter | MatchingMode.NonNullToNullParameter | MatchingMode.MissingParameterDefault | MatchingMode.AdditionalParameter | MatchingMode.MissingParameterType | MatchingMode.MissingParameterArity);
	const QuoteMode = KSHelper.enum(Object, {
		None: 0n,
		Double: 1n,
		Single: 2n
	});
	const TypeKind = KSHelper.enum(String, {
		Alias: "alias",
		Array: "array",
		Class: "class",
		Dictionary: "dictionary",
		Enum: "enum",
		Exclusion: "exclusion",
		Function: "function",
		Fusion: "fusion",
		Namespace: "namespace",
		OverloadedFunction: "overloadedfunction",
		Reference: "reference",
		Sealable: "sealable",
		Struct: "struct",
		Tuple: "tuple",
		Union: "union"
	});
	const Junction = KSHelper.enum(Number, {
		NONE: 0,
		AND: 1,
		OR: 2
	});
	const TypeOrigin = KSHelper.enum(Object, {
		None: 0n,
		Extern: 1n,
		ExternOrRequire: 2n,
		Import: 4n,
		Require: 8n,
		RequireOrExtern: 16n
	});
	class Type {
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
			this._alien = false;
			this._exhaustive = null;
			this._exported = false;
			this._origin = null;
			this._referenced = false;
			this._referenceIndex = -1;
			this._required = false;
			this._requirement = false;
			this._sealed = false;
			this._systemic = false;
		}
		__ks_cons_0(scope) {
			if(scope === void 0) {
				scope = null;
			}
			this._scope = scope;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			if(args.length === 1) {
				if(t0(args[0])) {
					return Type.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		canBeBoolean() {
			return this.__ks_func_canBeBoolean_rt.call(null, this, this, arguments);
		}
		__ks_func_canBeBoolean_0() {
			return (this.__ks_func_isAny_0() === true) || (this.__ks_func_isBoolean_0() === true);
		}
		__ks_func_canBeBoolean_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_canBeBoolean_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		canBeFunction() {
			return this.__ks_func_canBeFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_canBeFunction_0(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return (any && (this.__ks_func_isAny_0() === true)) || (this.__ks_func_isFunction_0() === true);
		}
		__ks_func_canBeFunction_rt(that, proto, args) {
			const t0 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 1) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
					return proto.__ks_func_canBeFunction_0.call(that, KSHelper.getVararg(args, 0, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		canBeNumber() {
			return this.__ks_func_canBeNumber_rt.call(null, this, this, arguments);
		}
		__ks_func_canBeNumber_0(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return (any && (this.__ks_func_isAny_0() === true)) || (this.__ks_func_isNumber_0() === true);
		}
		__ks_func_canBeNumber_rt(that, proto, args) {
			const t0 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 1) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
					return proto.__ks_func_canBeNumber_0.call(that, KSHelper.getVararg(args, 0, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		canBeString() {
			return this.__ks_func_canBeString_rt.call(null, this, this, arguments);
		}
		__ks_func_canBeString_0(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return (any && (this.__ks_func_isAny_0() === true)) || (this.__ks_func_isString_0() === true);
		}
		__ks_func_canBeString_rt(that, proto, args) {
			const t0 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 1) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
					return proto.__ks_func_canBeString_0.call(that, KSHelper.getVararg(args, 0, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		canBeVirtual() {
			return this.__ks_func_canBeVirtual_rt.call(null, this, this, arguments);
		}
		__ks_func_canBeVirtual_0(name) {
			if(this.__ks_func_isAny_0() === true) {
				return true;
			}
			if(name === "Enum") {
				return this.__ks_func_isEnum_0();
			}
			else if(name === "Namespace") {
				return this.__ks_func_isNamespace_0();
			}
			else if(name === "Struct") {
				return this.__ks_func_isStruct_0();
			}
			else if(name === "Tuple") {
				return this.__ks_func_isTuple_0();
			}
			return false;
		}
		__ks_func_canBeVirtual_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_canBeVirtual_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		clone() {
			return this.__ks_func_clone_rt.call(null, this, this, arguments);
		}
		__ks_func_clone_0(scope) {
			const clone = this.__ks_func_clone_1();
			clone._scope = scope;
			return clone;
		}
		__ks_func_clone_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Scope);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_clone_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		compareTo() {
			return this.__ks_func_compareTo_rt.call(null, this, this, arguments);
		}
		__ks_func_compareTo_0(value) {
			return false;
		}
		__ks_func_compareTo_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_compareTo_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		discard() {
			return this.__ks_func_discard_rt.call(null, this, this, arguments);
		}
		__ks_func_discard_0() {
			return this;
		}
		__ks_func_discard_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_discard_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		discardAlias() {
			return this.__ks_func_discardAlias_rt.call(null, this, this, arguments);
		}
		__ks_func_discardAlias_0() {
			return this;
		}
		__ks_func_discardAlias_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_discardAlias_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		discardName() {
			return this.__ks_func_discardName_rt.call(null, this, this, arguments);
		}
		__ks_func_discardName_0() {
			return this;
		}
		__ks_func_discardName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_discardName_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		discardReference() {
			return this.__ks_func_discardReference_rt.call(null, this, this, arguments);
		}
		__ks_func_discardReference_0() {
			return this;
		}
		__ks_func_discardReference_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_discardReference_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		discardSpread() {
			return this.__ks_func_discardSpread_rt.call(null, this, this, arguments);
		}
		__ks_func_discardSpread_0() {
			return this;
		}
		__ks_func_discardSpread_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_discardSpread_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		discardVariable() {
			return this.__ks_func_discardVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_discardVariable_0() {
			return this;
		}
		__ks_func_discardVariable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_discardVariable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		equals() {
			return this.__ks_func_equals_rt.call(null, this, this, arguments);
		}
		__ks_func_equals_0(value) {
			if(value === void 0) {
				value = null;
			}
			return KSType.isValue(value) && (this.isSubsetOf(value, MatchingMode.Exact) === true);
		}
		__ks_func_equals_rt(that, proto, args) {
			if(args.length === 1) {
				return proto.__ks_func_equals_0.call(that, args[0]);
			}
			throw KSHelper.badArgs();
		}
		flagAlien() {
			return this.__ks_func_flagAlien_rt.call(null, this, this, arguments);
		}
		__ks_func_flagAlien_0() {
			this._alien = true;
			return this;
		}
		__ks_func_flagAlien_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagAlien_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		flagAltering() {
			return this.__ks_func_flagAltering_rt.call(null, this, this, arguments);
		}
		__ks_func_flagAltering_0() {
			return this;
		}
		__ks_func_flagAltering_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagAltering_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		flagExported() {
			return this.__ks_func_flagExported_rt.call(null, this, this, arguments);
		}
		__ks_func_flagExported_0(explicitly) {
			this._exported = true;
			return this;
		}
		__ks_func_flagExported_rt(that, proto, args) {
			const t0 = KSType.isBoolean;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_flagExported_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		flagReferenced() {
			return this.__ks_func_flagReferenced_rt.call(null, this, this, arguments);
		}
		__ks_func_flagReferenced_0() {
			this._referenced = true;
			return this;
		}
		__ks_func_flagReferenced_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagReferenced_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		flagRequired() {
			return this.__ks_func_flagRequired_rt.call(null, this, this, arguments);
		}
		__ks_func_flagRequired_0() {
			this._required = true;
			return this;
		}
		__ks_func_flagRequired_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagRequired_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		flagRequirement() {
			return this.__ks_func_flagRequirement_rt.call(null, this, this, arguments);
		}
		__ks_func_flagRequirement_0() {
			this._requirement = true;
			return this;
		}
		__ks_func_flagRequirement_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagRequirement_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		flagSealed() {
			return this.__ks_func_flagSealed_rt.call(null, this, this, arguments);
		}
		__ks_func_flagSealed_0() {
			this._sealed = true;
			return this;
		}
		__ks_func_flagSealed_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagSealed_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		flagSystemic() {
			return this.__ks_func_flagSystemic_rt.call(null, this, this, arguments);
		}
		__ks_func_flagSystemic_0() {
			this._systemic = true;
			return this.__ks_func_flagSealed_0();
		}
		__ks_func_flagSystemic_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagSystemic_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		getExhaustive() {
			return this.__ks_func_getExhaustive_rt.call(null, this, this, arguments);
		}
		__ks_func_getExhaustive_0() {
			return this._exhaustive;
		}
		__ks_func_getExhaustive_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getExhaustive_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		getProperty() {
			return this.__ks_func_getProperty_rt.call(null, this, this, arguments);
		}
		__ks_func_getProperty_0(name) {
			return null;
		}
		__ks_func_getProperty_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getProperty_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		getMajorReferenceIndex() {
			return this.__ks_func_getMajorReferenceIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_getMajorReferenceIndex_0() {
			return this._referenceIndex;
		}
		__ks_func_getMajorReferenceIndex_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getMajorReferenceIndex_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		hashCode() {
			return this.__ks_func_hashCode_rt.call(null, this, this, arguments);
		}
		__ks_func_hashCode_0() {
			return "";
		}
		__ks_func_hashCode_1(fattenNull) {
			return this.__ks_func_hashCode_0();
		}
		__ks_func_hashCode_rt(that, proto, args) {
			const t0 = KSType.isBoolean;
			if(args.length === 0) {
				return proto.__ks_func_hashCode_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hashCode_1.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		hasProperty() {
			return this.__ks_func_hasProperty_rt.call(null, this, this, arguments);
		}
		__ks_func_hasProperty_0(name) {
			return false;
		}
		__ks_func_hasProperty_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasProperty_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		isAlias() {
			return this.__ks_func_isAlias_rt.call(null, this, this, arguments);
		}
		__ks_func_isAlias_0() {
			return false;
		}
		__ks_func_isAlias_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAlias_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isAlien() {
			return this.__ks_func_isAlien_rt.call(null, this, this, arguments);
		}
		__ks_func_isAlien_0() {
			return this._alien;
		}
		__ks_func_isAlien_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAlien_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isAltering() {
			return this.__ks_func_isAltering_rt.call(null, this, this, arguments);
		}
		__ks_func_isAltering_0() {
			return false;
		}
		__ks_func_isAltering_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAltering_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isAny() {
			return this.__ks_func_isAny_rt.call(null, this, this, arguments);
		}
		__ks_func_isAny_0() {
			return false;
		}
		__ks_func_isAny_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAny_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isAnonymous() {
			return this.__ks_func_isAnonymous_rt.call(null, this, this, arguments);
		}
		__ks_func_isAnonymous_0() {
			return false;
		}
		__ks_func_isAnonymous_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAnonymous_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isArray() {
			return this.__ks_func_isArray_rt.call(null, this, this, arguments);
		}
		__ks_func_isArray_0() {
			return false;
		}
		__ks_func_isArray_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isArray_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isAssignableToVariable() {
			return this.__ks_func_isAssignableToVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssignableToVariable_0(value) {
			return this.__ks_func_isAssignableToVariable_2(value, true, false, true);
		}
		__ks_func_isAssignableToVariable_1(value, downcast) {
			return this.__ks_func_isAssignableToVariable_2(value, true, false, downcast);
		}
		__ks_func_isAssignableToVariable_2(value, anycast, nullcast, downcast, limited) {
			if(limited === void 0 || limited === null) {
				limited = false;
			}
			if(this === value) {
				return true;
			}
			else if(value.__ks_func_isAny_0() === true) {
				if(this.__ks_func_isNullable_0() === true) {
					return nullcast || (value.__ks_func_isNullable_0() === true);
				}
				else {
					return true;
				}
			}
			else if(this.__ks_func_isAlias_0() === true) {
				return this.__ks_func_discardAlias_0().__ks_func_isAssignableToVariable_2(value, anycast, nullcast, downcast);
			}
			else {
				return false;
			}
		}
		__ks_func_isAssignableToVariable_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = KSType.isBoolean;
			const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isAssignableToVariable_0.call(that, args[0]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_isAssignableToVariable_1.call(that, args[0], args[1]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length >= 4 && args.length <= 5) {
				if(t0(args[0]) && t1(args[1]) && t1(args[2]) && t1(args[3]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [4], 0) && te(pts, 1)) {
					return proto.__ks_func_isAssignableToVariable_2.call(that, args[0], args[1], args[2], args[3], KSHelper.getVararg(args, 4, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		isBoolean() {
			return this.__ks_func_isBoolean_rt.call(null, this, this, arguments);
		}
		__ks_func_isBoolean_0() {
			return false;
		}
		__ks_func_isBoolean_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isBoolean_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isCloned() {
			return this.__ks_func_isCloned_rt.call(null, this, this, arguments);
		}
		__ks_func_isCloned_0() {
			return false;
		}
		__ks_func_isCloned_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isCloned_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isClass() {
			return this.__ks_func_isClass_rt.call(null, this, this, arguments);
		}
		__ks_func_isClass_0() {
			return false;
		}
		__ks_func_isClass_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isClass_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isClassInstance() {
			return this.__ks_func_isClassInstance_rt.call(null, this, this, arguments);
		}
		__ks_func_isClassInstance_0() {
			return false;
		}
		__ks_func_isClassInstance_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isClassInstance_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isComparableWith() {
			return this.__ks_func_isComparableWith_rt.call(null, this, this, arguments);
		}
		__ks_func_isComparableWith_0(type) {
			return type.__ks_func_isAssignableToVariable_2(this, true, false, false);
		}
		__ks_func_isComparableWith_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isComparableWith_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		isContainedIn() {
			return this.__ks_func_isContainedIn_rt.call(null, this, this, arguments);
		}
		__ks_func_isContainedIn_0(types) {
			for(let __ks_0 = 0, __ks_1 = types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = types[__ks_0];
				if(this.__ks_func_equals_0(type)) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isContainedIn_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isContainedIn_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		isContainer() {
			return this.__ks_func_isContainer_rt.call(null, this, this, arguments);
		}
		__ks_func_isContainer_0() {
			return false;
		}
		__ks_func_isContainer_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isContainer_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isDictionary() {
			return this.__ks_func_isDictionary_rt.call(null, this, this, arguments);
		}
		__ks_func_isDictionary_0() {
			return false;
		}
		__ks_func_isDictionary_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isDictionary_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isEnum() {
			return this.__ks_func_isEnum_rt.call(null, this, this, arguments);
		}
		__ks_func_isEnum_0() {
			return false;
		}
		__ks_func_isEnum_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isEnum_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isExclusion() {
			return this.__ks_func_isExclusion_rt.call(null, this, this, arguments);
		}
		__ks_func_isExclusion_0() {
			return false;
		}
		__ks_func_isExclusion_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExclusion_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isExhaustive() {
			return this.__ks_func_isExhaustive_rt.call(null, this, this, arguments);
		}
		__ks_func_isExhaustive_0() {
			if(this._exhaustive === null) {
				return !this._alien && !this._required;
			}
			else {
				return this._exhaustive;
			}
		}
		__ks_func_isExhaustive_1(node) {
			return (this.__ks_func_isExhaustive_0() === true) && !(node._options.rules.ignoreMisfit === true);
		}
		__ks_func_isExhaustive_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 0) {
				return proto.__ks_func_isExhaustive_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isExhaustive_1.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		isExplicit() {
			return this.__ks_func_isExplicit_rt.call(null, this, this, arguments);
		}
		__ks_func_isExplicit_0() {
			return true;
		}
		__ks_func_isExplicit_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExplicit_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isExplicitlyExported() {
			return this.__ks_func_isExplicitlyExported_rt.call(null, this, this, arguments);
		}
		__ks_func_isExplicitlyExported_0() {
			return this._exported;
		}
		__ks_func_isExplicitlyExported_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExplicitlyExported_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isExportable() {
			return this.__ks_func_isExportable_rt.call(null, this, this, arguments);
		}
		__ks_func_isExportable_0() {
			return (this.__ks_func_isAlien_0() === true) || (this.__ks_func_isExported_0() === true) || (this.__ks_func_isNative_0() === true) || (this.__ks_func_isRequirement_0() === true) || (this._referenceIndex !== -1);
		}
		__ks_func_isExportable_1(mode) {
			return ((mode & ExportMode.Requirement) !== 0n) || (this.__ks_func_isExportable_0() === true);
		}
		__ks_func_isExportable_rt(that, proto, args) {
			const t0 = value => KSType.isEnumInstance(value, ExportMode);
			if(args.length === 0) {
				return proto.__ks_func_isExportable_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isExportable_1.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		isExportingFragment() {
			return this.__ks_func_isExportingFragment_rt.call(null, this, this, arguments);
		}
		__ks_func_isExportingFragment_0() {
			return (!(this.__ks_func_isVirtual_0() === true) && !(this.__ks_func_isSystemic_0() === true)) || ((this.__ks_func_isSealed_0() === true) && (this.__ks_func_isExtendable_0() === true));
		}
		__ks_func_isExportingFragment_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExportingFragment_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isExported() {
			return this.__ks_func_isExported_rt.call(null, this, this, arguments);
		}
		__ks_func_isExported_0() {
			return this._exported;
		}
		__ks_func_isExported_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExported_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isExtendable() {
			return this.__ks_func_isExtendable_rt.call(null, this, this, arguments);
		}
		__ks_func_isExtendable_0() {
			return false;
		}
		__ks_func_isExtendable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExtendable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isFlexible() {
			return this.__ks_func_isFlexible_rt.call(null, this, this, arguments);
		}
		__ks_func_isFlexible_0() {
			return false;
		}
		__ks_func_isFlexible_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isFlexible_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isFunction() {
			return this.__ks_func_isFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_isFunction_0() {
			return false;
		}
		__ks_func_isFunction_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isFunction_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isFusion() {
			return this.__ks_func_isFusion_rt.call(null, this, this, arguments);
		}
		__ks_func_isFusion_0() {
			return false;
		}
		__ks_func_isFusion_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isFusion_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isHybrid() {
			return this.__ks_func_isHybrid_rt.call(null, this, this, arguments);
		}
		__ks_func_isHybrid_0() {
			return false;
		}
		__ks_func_isHybrid_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isHybrid_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isImmutable() {
			return this.__ks_func_isImmutable_rt.call(null, this, this, arguments);
		}
		__ks_func_isImmutable_0() {
			return false;
		}
		__ks_func_isImmutable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isImmutable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isInoperative() {
			return this.__ks_func_isInoperative_rt.call(null, this, this, arguments);
		}
		__ks_func_isInoperative_0() {
			return (this.__ks_func_isNever_0() === true) || (this.__ks_func_isVoid_0() === true);
		}
		__ks_func_isInoperative_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInoperative_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isInstance() {
			return this.__ks_func_isInstance_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstance_0() {
			return false;
		}
		__ks_func_isInstance_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstance_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isMergeable() {
			return this.__ks_func_isMergeable_rt.call(null, this, this, arguments);
		}
		__ks_func_isMergeable_0(type) {
			return false;
		}
		__ks_func_isMergeable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isMergeable_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		isMethod() {
			return this.__ks_func_isMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isMethod_0() {
			return false;
		}
		__ks_func_isMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isMethod_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isMorePreciseThan() {
			return this.__ks_func_isMorePreciseThan_rt.call(null, this, this, arguments);
		}
		__ks_func_isMorePreciseThan_0(value) {
			return false;
		}
		__ks_func_isMorePreciseThan_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isMorePreciseThan_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		isNamed() {
			return this.__ks_func_isNamed_rt.call(null, this, this, arguments);
		}
		__ks_func_isNamed_0() {
			return false;
		}
		__ks_func_isNamed_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNamed_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isNamespace() {
			return this.__ks_func_isNamespace_rt.call(null, this, this, arguments);
		}
		__ks_func_isNamespace_0() {
			return false;
		}
		__ks_func_isNamespace_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNamespace_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isNative() {
			return this.__ks_func_isNative_rt.call(null, this, this, arguments);
		}
		__ks_func_isNative_0() {
			return false;
		}
		__ks_func_isNative_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNative_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isNever() {
			return this.__ks_func_isNever_rt.call(null, this, this, arguments);
		}
		__ks_func_isNever_0() {
			return false;
		}
		__ks_func_isNever_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNever_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isNumber() {
			return this.__ks_func_isNumber_rt.call(null, this, this, arguments);
		}
		__ks_func_isNumber_0() {
			return false;
		}
		__ks_func_isNumber_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNumber_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isNull() {
			return this.__ks_func_isNull_rt.call(null, this, this, arguments);
		}
		__ks_func_isNull_0() {
			return false;
		}
		__ks_func_isNull_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNull_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isNullable() {
			return this.__ks_func_isNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_isNullable_0() {
			return false;
		}
		__ks_func_isNullable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNullable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isObject() {
			return this.__ks_func_isObject_rt.call(null, this, this, arguments);
		}
		__ks_func_isObject_0() {
			return false;
		}
		__ks_func_isObject_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isObject_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isPredefined() {
			return this.__ks_func_isPredefined_rt.call(null, this, this, arguments);
		}
		__ks_func_isPredefined_0() {
			return false;
		}
		__ks_func_isPredefined_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isPredefined_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isPrimitive() {
			return this.__ks_func_isPrimitive_rt.call(null, this, this, arguments);
		}
		__ks_func_isPrimitive_0() {
			return false;
		}
		__ks_func_isPrimitive_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isPrimitive_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isReducible() {
			return this.__ks_func_isReducible_rt.call(null, this, this, arguments);
		}
		__ks_func_isReducible_0() {
			return false;
		}
		__ks_func_isReducible_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isReducible_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isReference() {
			return this.__ks_func_isReference_rt.call(null, this, this, arguments);
		}
		__ks_func_isReference_0() {
			return false;
		}
		__ks_func_isReference_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isReference_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isReferenced() {
			return this.__ks_func_isReferenced_rt.call(null, this, this, arguments);
		}
		__ks_func_isReferenced_0() {
			return this._referenced;
		}
		__ks_func_isReferenced_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isReferenced_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isRequired() {
			return this.__ks_func_isRequired_rt.call(null, this, this, arguments);
		}
		__ks_func_isRequired_0() {
			return this._required;
		}
		__ks_func_isRequired_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRequired_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isRequirement() {
			return this.__ks_func_isRequirement_rt.call(null, this, this, arguments);
		}
		__ks_func_isRequirement_0() {
			return this._requirement;
		}
		__ks_func_isRequirement_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRequirement_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isSealable() {
			return this.__ks_func_isSealable_rt.call(null, this, this, arguments);
		}
		__ks_func_isSealable_0() {
			return false;
		}
		__ks_func_isSealable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSealable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isSealed() {
			return this.__ks_func_isSealed_rt.call(null, this, this, arguments);
		}
		__ks_func_isSealed_0() {
			return this._sealed;
		}
		__ks_func_isSealed_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSealed_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isSealedAlien() {
			return this.__ks_func_isSealedAlien_rt.call(null, this, this, arguments);
		}
		__ks_func_isSealedAlien_0() {
			return this._alien && this._sealed;
		}
		__ks_func_isSealedAlien_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSealedAlien_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isSplittable() {
			return this.__ks_func_isSplittable_rt.call(null, this, this, arguments);
		}
		__ks_func_isSplittable_0() {
			return (this.__ks_func_isNullable_0() === true) || (this.__ks_func_isUnion_0() === true);
		}
		__ks_func_isSplittable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSplittable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isSpread() {
			return this.__ks_func_isSpread_rt.call(null, this, this, arguments);
		}
		__ks_func_isSpread_0() {
			return false;
		}
		__ks_func_isSpread_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSpread_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isString() {
			return this.__ks_func_isString_rt.call(null, this, this, arguments);
		}
		__ks_func_isString_0() {
			return false;
		}
		__ks_func_isString_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isString_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isStruct() {
			return this.__ks_func_isStruct_rt.call(null, this, this, arguments);
		}
		__ks_func_isStruct_0() {
			return false;
		}
		__ks_func_isStruct_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isStruct_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isSubsetOf() {
			return this.__ks_func_isSubsetOf_rt.call(null, this, this, arguments);
		}
		__ks_func_isSubsetOf_0(value, mode) {
			return false;
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		isSystemic() {
			return this.__ks_func_isSystemic_rt.call(null, this, this, arguments);
		}
		__ks_func_isSystemic_0() {
			return this._systemic;
		}
		__ks_func_isSystemic_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSystemic_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isTuple() {
			return this.__ks_func_isTuple_rt.call(null, this, this, arguments);
		}
		__ks_func_isTuple_0() {
			return false;
		}
		__ks_func_isTuple_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isTuple_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isTypeOf() {
			return this.__ks_func_isTypeOf_rt.call(null, this, this, arguments);
		}
		__ks_func_isTypeOf_0() {
			return false;
		}
		__ks_func_isTypeOf_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isTypeOf_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isUnion() {
			return this.__ks_func_isUnion_rt.call(null, this, this, arguments);
		}
		__ks_func_isUnion_0() {
			return false;
		}
		__ks_func_isUnion_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isUnion_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isVirtual() {
			return this.__ks_func_isVirtual_rt.call(null, this, this, arguments);
		}
		__ks_func_isVirtual_0() {
			return false;
		}
		__ks_func_isVirtual_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isVirtual_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isVoid() {
			return this.__ks_func_isVoid_rt.call(null, this, this, arguments);
		}
		__ks_func_isVoid_0() {
			return false;
		}
		__ks_func_isVoid_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isVoid_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		matchContentOf() {
			return this.__ks_func_matchContentOf_rt.call(null, this, this, arguments);
		}
		__ks_func_matchContentOf_0(value) {
			if(value === void 0) {
				value = null;
			}
			return this.__ks_func_equals_0(value);
		}
		__ks_func_matchContentOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type) || KSType.isNull(value);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_matchContentOf_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		minorOriginal() {
			return this.__ks_func_minorOriginal_rt.call(null, this, this, arguments);
		}
		__ks_func_minorOriginal_0() {
			return null;
		}
		__ks_func_minorOriginal_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_minorOriginal_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		origin() {
			return this.__ks_func_origin_rt.call(null, this, this, arguments);
		}
		__ks_func_origin_0() {
			return this._origin;
		}
		__ks_func_origin_1(origin) {
			if(origin === void 0) {
				origin = null;
			}
			this._origin = origin;
			return this;
		}
		__ks_func_origin_rt(that, proto, args) {
			const t0 = value => KSType.isEnumInstance(value, TypeOrigin) || KSType.isNull(value);
			if(args.length === 0) {
				return proto.__ks_func_origin_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_origin_1.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		reduce() {
			return this.__ks_func_reduce_rt.call(null, this, this, arguments);
		}
		__ks_func_reduce_0(type) {
			return this;
		}
		__ks_func_reduce_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_reduce_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		reference() {
			return this.__ks_func_reference_rt.call(null, this, this, arguments);
		}
		__ks_func_reference_0(scope) {
			if(scope === void 0 || scope === null) {
				scope = this._scope;
			}
			return scope.reference(this);
		}
		__ks_func_reference_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_reference_0.call(that, args[0]);
			}
			throw KSHelper.badArgs();
		}
		referenceIndex() {
			return this.__ks_func_referenceIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_referenceIndex_0() {
			return this._referenceIndex;
		}
		__ks_func_referenceIndex_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_referenceIndex_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		resetReferences() {
			return this.__ks_func_resetReferences_rt.call(null, this, this, arguments);
		}
		__ks_func_resetReferences_0() {
			this._referenceIndex = -1;
		}
		__ks_func_resetReferences_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_resetReferences_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		scope() {
			return this.__ks_func_scope_rt.call(null, this, this, arguments);
		}
		__ks_func_scope_0() {
			return this._scope;
		}
		__ks_func_scope_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_scope_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		setExhaustive() {
			return this.__ks_func_setExhaustive_rt.call(null, this, this, arguments);
		}
		__ks_func_setExhaustive_0(exhaustive) {
			if(exhaustive === void 0) {
				exhaustive = null;
			}
			this._exhaustive = exhaustive;
			return this;
		}
		__ks_func_setExhaustive_rt(that, proto, args) {
			const t0 = value => KSType.isBoolean(value) || KSType.isNull(value);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setExhaustive_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		setNullable() {
			return this.__ks_func_setNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_setNullable_0(nullable) {
			return this;
		}
		__ks_func_setNullable_1(type) {
			if(!(type.__ks_func_isNullable_0() === true)) {
				return this.__ks_func_setNullable_0(false);
			}
			else {
				return this;
			}
		}
		__ks_func_setNullable_rt(that, proto, args) {
			const t0 = KSType.isBoolean;
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setNullable_0.call(that, args[0]);
				}
				if(t1(args[0])) {
					return proto.__ks_func_setNullable_1.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		shallBeNamed() {
			return this.__ks_func_shallBeNamed_rt.call(null, this, this, arguments);
		}
		__ks_func_shallBeNamed_0() {
			return false;
		}
		__ks_func_shallBeNamed_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_shallBeNamed_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		sort() {
			return this.__ks_func_sort_rt.call(null, this, this, arguments);
		}
		__ks_func_sort_0() {
			return this;
		}
		__ks_func_sort_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_sort_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		split() {
			return this.__ks_func_split_rt.call(null, this, this, arguments);
		}
		__ks_func_split_0(types) {
			if(this.__ks_func_isNullable_0() === true) {
				__ks_Array.__ks_func_pushUniq_0.call(types, [this.__ks_func_setNullable_0(false), Type.Null]);
			}
			else {
				__ks_Array.__ks_func_pushUniq_0.call(types, [this]);
			}
			return types;
		}
		__ks_func_split_rt(that, proto, args) {
			const t0 = KSType.isArray;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_split_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		toExportFragment() {
			return this.__ks_func_toExportFragment_rt.call(null, this, this, arguments);
		}
		__ks_func_toExportFragment_0(fragments, name, variable) {
			if(!(this.__ks_func_isVirtual_0() === true) && !(this.__ks_func_isSystemic_0() === true)) {
				const varname = KSType.isFunction(variable.name) ? variable.name() : null;
				if(name === varname) {
					fragments.line(name);
				}
				else {
					fragments.newLine().code(KSHelper.concatString(name, ": ")).compile(variable).done();
				}
			}
			if((this.__ks_func_isSealed_0() === true) && (this.__ks_func_isExtendable_0() === true)) {
				const varname = this.getSealedName();
				if((KSHelper.concatString("__ks_", name)) === varname) {
					fragments.line(varname);
				}
				else {
					fragments.line(KSHelper.concatString("__ks_", name, ": ", this.getSealedName()));
				}
			}
		}
		__ks_func_toExportFragment_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toExportFragment_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		toExportOrIndex() {
			return this.__ks_func_toExportOrIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_toExportOrIndex_0(references, indexDelta, mode, module) {
			if(this._referenceIndex !== -1) {
				return this._referenceIndex;
			}
			else if(this.__ks_func_isReferenced_0() === true) {
				return this.__ks_func_toMetadata_0(references, indexDelta, mode, module);
			}
			else {
				return this.__ks_func_export_0(references, indexDelta, mode, module);
			}
		}
		__ks_func_toExportOrIndex_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_toExportOrIndex_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		toExportOrReference() {
			return this.__ks_func_toExportOrReference_rt.call(null, this, this, arguments);
		}
		__ks_func_toExportOrReference_0(references, indexDelta, mode, module) {
			if(this._referenceIndex !== -1) {
				return this._referenceIndex;
			}
			else if(this.__ks_func_isReferenced_0() === true) {
				return (() => {
					const d = new Dictionary();
					d.reference = this.__ks_func_toMetadata_0(references, indexDelta, mode, module);
					return d;
				})();
			}
			else {
				return this.__ks_func_export_0(references, indexDelta, mode, module);
			}
		}
		__ks_func_toExportOrReference_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_toExportOrReference_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		toGenericParameter() {
			return this.__ks_func_toGenericParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_toGenericParameter_0(references, indexDelta, mode, module) {
			const reference = this.__ks_func_getMajorReferenceIndex_0();
			if(reference !== -1) {
				return (() => {
					const d = new Dictionary();
					d.reference = reference;
					return d;
				})();
			}
			else if(this.__ks_func_isReferenced_0() === true) {
				return (() => {
					const d = new Dictionary();
					d.reference = this.__ks_func_toMetadata_0(references, indexDelta, mode, module);
					return d;
				})();
			}
			else {
				return this.__ks_func_export_0(references, indexDelta, mode, module);
			}
		}
		__ks_func_toGenericParameter_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_toGenericParameter_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		toMetadata() {
			return this.__ks_func_toMetadata_rt.call(null, this, this, arguments);
		}
		__ks_func_toMetadata_0(references, indexDelta, mode, module) {
			if(this._referenceIndex === -1) {
				const index = references.length;
				this._referenceIndex = index + indexDelta;
				references.push(null);
				references[index] = this.__ks_func_export_0(references, indexDelta, mode, module);
			}
			return this._referenceIndex;
		}
		__ks_func_toMetadata_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_toMetadata_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		toNegativeTestFragments() {
			return this.__ks_func_toNegativeTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toNegativeTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			return this.toPositiveTestFragments(fragments.code("!"), node, junction);
		}
		__ks_func_toNegativeTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toNegativeTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		toQuote() {
			return this.__ks_func_toQuote_rt.call(null, this, this, arguments);
		}
		__ks_func_toQuote_0() {
			throw new NotSupportedException();
		}
		__ks_func_toQuote_1(__ks_double_1) {
			if(__ks_double_1) {
				return "\"" + this.__ks_func_toQuote_0() + "\"";
			}
			else {
				return "'" + this.__ks_func_toQuote_0() + "'";
			}
		}
		__ks_func_toQuote_rt(that, proto, args) {
			const t0 = KSType.isBoolean;
			if(args.length === 0) {
				return proto.__ks_func_toQuote_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toQuote_1.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		toReference() {
			return this.__ks_func_toReference_rt.call(null, this, this, arguments);
		}
		__ks_func_toReference_0(references, indexDelta, mode, module) {
			return (() => {
				const d = new Dictionary();
				d.reference = this.__ks_func_toMetadata_0(references, indexDelta, mode, module);
				return d;
			})();
		}
		__ks_func_toReference_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_toReference_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		toRequiredMetadata() {
			return this.__ks_func_toRequiredMetadata_rt.call(null, this, this, arguments);
		}
		__ks_func_toRequiredMetadata_0(requirements) {
			if(this._required) {
				return true;
			}
			for(let __ks_0 = 0, __ks_1 = requirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
				requirement = requirements[__ks_0];
				if(this === requirement.__ks_func_alternative_0()) {
					return requirement.__ks_func_type_0().referenceIndex();
				}
			}
			return false;
		}
		__ks_func_toRequiredMetadata_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, value => KSType.isClassInstance(value, Requirement));
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toRequiredMetadata_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		toRouteTestFragments() {
			return this.__ks_func_toRouteTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toRouteTestFragments_0(fragments, node, junction) {
			NotImplementedException.__ks_sttc_throw_0([]);
		}
		__ks_func_toRouteTestFragments_1(fragments, node, argName, from, to, __ks_default_1, junction) {
			NotImplementedException.__ks_sttc_throw_0([]);
		}
		__ks_func_toRouteTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction);
			const t2 = KSType.isString;
			const t3 = KSType.isNumber;
			const t4 = KSType.isBoolean;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
					return proto.__ks_func_toRouteTestFragments_0.call(that, args[0], args[1], args[2]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 7) {
				if(t0(args[0]) && t0(args[1]) && t2(args[2]) && t3(args[3]) && t3(args[4]) && t4(args[5]) && t1(args[6])) {
					return proto.__ks_func_toRouteTestFragments_1.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
				}
			}
			throw KSHelper.badArgs();
		}
		toTestFunctionFragments() {
			return this.__ks_func_toTestFunctionFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toTestFunctionFragments_0(fragments, node) {
			if(node._options.format.functions === "es5") {
				fragments.code("function(value) { return ");
			}
			else {
				fragments.code("value => ");
			}
			this.__ks_func_toTestFunctionFragments_1(fragments, node, Junction.NONE);
			if(node._options.format.functions === "es5") {
				fragments.code("; }");
			}
		}
		__ks_func_toTestFunctionFragments_1(fragments, node, junction) {
			NotImplementedException.__ks_sttc_throw_0([]);
		}
		__ks_func_toTestFunctionFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toTestFunctionFragments_0.call(that, args[0], args[1]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toTestFunctionFragments_1.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		toTestType() {
			return this.__ks_func_toTestType_rt.call(null, this, this, arguments);
		}
		__ks_func_toTestType_0() {
			return this;
		}
		__ks_func_toTestType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toTestType_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		toTypeQuote() {
			return this.__ks_func_toTypeQuote_rt.call(null, this, this, arguments);
		}
		__ks_func_toTypeQuote_0() {
			return this.__ks_func_toQuote_0();
		}
		__ks_func_toTypeQuote_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toTypeQuote_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		unflagAltering() {
			return this.__ks_func_unflagAltering_rt.call(null, this, this, arguments);
		}
		__ks_func_unflagAltering_0() {
			return this;
		}
		__ks_func_unflagAltering_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_unflagAltering_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		unflagRequired() {
			return this.__ks_func_unflagRequired_rt.call(null, this, this, arguments);
		}
		__ks_func_unflagRequired_0() {
			this._required = false;
			return this;
		}
		__ks_func_unflagRequired_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_unflagRequired_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_arrayOf_0(parameter, scope) {
			return ReferenceType.__ks_new_0(scope, "Array", false, [parameter]);
		}
		static arrayOf() {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isClassInstance(value, Scope);
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t1(arguments[1])) {
					return Type.__ks_sttc_arrayOf_0(arguments[0], arguments[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_fromAST_0(data, node) {
			if(data === void 0) {
				data = null;
			}
			return Type.fromAST(data, node.__ks_func_scope_0(), true, node);
		}
		static __ks_sttc_fromAST_1(data, scope, defined, node) {
			if(data === void 0) {
				data = null;
			}
			if(!KSType.isValue(data)) {
				return AnyType.NullableUnexplicit;
			}
			else if(KSType.isClassInstance(data, Type)) {
				return data;
			}
			data = data;
			let __ks_0 = data.kind.valueOf();
			if(__ks_0 === NodeKind.ClassDeclaration.value) {
				const type = ClassType.__ks_new_0(scope);
				for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Abstract.value) {
						type._abstract = data.abstract;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Sealed.value) {
						type.__ks_func_flagSealed_0();
					}
				}
				return new NamedType(data.name.name, type);
			}
			else if(__ks_0 === NodeKind.ExclusionType.value) {
				return ExclusionType.__ks_new_0(scope, KSHelper.mapArray(data.types, function(type) {
					return Type.__ks_sttc_fromAST_1(type, scope, defined, node);
				}));
			}
			else if(__ks_0 === NodeKind.FunctionDeclaration.value || __ks_0 === NodeKind.MethodDeclaration.value) {
				if(KSType.isValue(data.parameters)) {
					return FunctionType.__ks_new_2(KSHelper.mapArray(data.parameters, function(parameter) {
						return ParameterType.fromAST(parameter, false, scope, defined, node);
					}), data, node);
				}
				else {
					return FunctionType.__ks_new_2([new ParameterType(scope, AnyType.NullableUnexplicit, 0, Infinity)], data, node);
				}
			}
			else if(__ks_0 === NodeKind.FunctionExpression.value || __ks_0 === NodeKind.MethodDeclaration.value) {
				return FunctionType.__ks_new_2(KSHelper.mapArray(data.parameters, function(parameter) {
					return ParameterType.fromAST(parameter, false, scope, defined, node);
				}), data, node);
			}
			else if(__ks_0 === NodeKind.FusionType.value) {
				return FusionType.__ks_new_0(scope, KSHelper.mapArray(data.types, function(type) {
					return Type.__ks_sttc_fromAST_1(type, scope, defined, node);
				}));
			}
			else if(__ks_0 === NodeKind.Identifier.value) {
				let variable = scope.getVariable(data.name);
				if(KSType.isValue(variable)) {
					return variable.__ks_func_getDeclaredType_0();
				}
				else if($runtime.getVariable(data.name, node) !== null) {
					return Type.Any;
				}
				else {
					ReferenceException.throwNotDefined(data.name, node);
				}
			}
			else if(__ks_0 === NodeKind.MemberExpression.value) {
				const object = Type.__ks_sttc_fromAST_1(data.object, scope, defined, node);
				if(object.__ks_func_isAny_0() === true) {
					return Type.Any;
				}
				else {
					return object.getProperty(data.property.name);
				}
			}
			else if(__ks_0 === NodeKind.NumericExpression.value) {
				return scope.__ks_func_reference_0("Number");
			}
			else if(__ks_0 === NodeKind.TypeReference.value) {
				if(KSType.isValue(data.elements)) {
					const type = ArrayType.__ks_new_0(scope);
					for(let __ks_1 = 0, __ks_2 = data.elements.length, element; __ks_1 < __ks_2; ++__ks_1) {
						element = data.elements[__ks_1];
						type.__ks_func_addElement_0(Type.__ks_sttc_fromAST_1(element, scope, defined, node));
					}
					return type;
				}
				else if(KSType.isValue(data.properties)) {
					const type = DictionaryType.__ks_new_0(scope);
					for(let __ks_1 = 0, __ks_2 = data.properties.length, property; __ks_1 < __ks_2; ++__ks_1) {
						property = data.properties[__ks_1];
						type.addProperty(property.name.name, Type.__ks_sttc_fromAST_1(property.type, scope, defined, node));
					}
					return type;
				}
				else if(KSType.isValue(data.typeName)) {
					let nullable = false;
					for(let __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
						modifier = data.modifiers[__ks_1];
						if(KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value) {
							nullable = true;
						}
					}
					if(KSHelper.valueOf(data.typeName.kind) === NodeKind.Identifier.value) {
						const name = Type.renameNative(data.typeName.name);
						if(name === "Any") {
							return nullable ? AnyType.NullableExplicit : AnyType.Explicit;
						}
						else if(!defined || (Type.isNative(name) === true) || scope.hasVariable(name, -1)) {
							if(KSType.isValue(data.typeParameters)) {
								const type = new ReferenceType(scope, name, nullable);
								for(let __ks_1 = 0, __ks_2 = data.typeParameters.length, parameter; __ks_1 < __ks_2; ++__ks_1) {
									parameter = data.typeParameters[__ks_1];
									type._parameters.push(Type.__ks_sttc_fromAST_1(parameter, scope, defined, node));
								}
								return type;
							}
							else {
								return scope.reference(name, nullable);
							}
						}
						else {
							ReferenceException.throwNotDefined(data.typeName.name, node);
						}
					}
					else if((KSHelper.valueOf(data.typeName.kind) === NodeKind.MemberExpression.value) && !(data.typeName.computed === true)) {
						const __ks_namespace_1 = Type.__ks_sttc_fromAST_1(data.typeName.object, scope, defined, node);
						const type = new ReferenceType(__ks_namespace_1.__ks_func_scope_0(), data.typeName.property.name, nullable);
						if(KSType.isValue(data.typeParameters)) {
							for(let __ks_1 = 0, __ks_2 = data.typeParameters.length, parameter; __ks_1 < __ks_2; ++__ks_1) {
								parameter = data.typeParameters[__ks_1];
								type._parameters.push(Type.__ks_sttc_fromAST_1(parameter, scope, defined, node));
							}
						}
						return type;
					}
				}
			}
			else if(__ks_0 === NodeKind.UnionType.value) {
				return UnionType.__ks_new_0(scope, KSHelper.mapArray(data.types, function(type) {
					return Type.__ks_sttc_fromAST_1(type, scope, defined, node);
				}));
			}
			else if(__ks_0 === NodeKind.VariableDeclarator.value || __ks_0 === NodeKind.FieldDeclaration.value) {
				return Type.__ks_sttc_fromAST_1(data.type, scope, defined, node);
			}
			console.info(data);
			throw new NotImplementedException(node);
		}
		static fromAST() {
			const t0 = value => KSType.isClassInstance(value, AbstractNode);
			const t1 = value => KSType.isClassInstance(value, Scope);
			const t2 = KSType.isBoolean;
			if(arguments.length === 2) {
				if(t0(arguments[1])) {
					return Type.__ks_sttc_fromAST_0(arguments[0], arguments[1]);
				}
				throw KSHelper.badArgs();
			}
			if(arguments.length === 4) {
				if(t1(arguments[1]) && t2(arguments[2]) && t0(arguments[3])) {
					return Type.__ks_sttc_fromAST_1(arguments[0], arguments[1], arguments[2], arguments[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_0(index, metadata, references, alterations, queue, scope, node) {
			const data = KSType.isNumber(index) ? metadata[index] : index;
			if(!KSType.isValue(data)) {
				return Type.Any;
			}
			else if(KSType.isString(data)) {
				if(data === "Null") {
					return Type.Null;
				}
				let match = $importTypeModifiers.exec(data);
				if(KSType.isValue(match)) {
					const nullable = KSType.isValue(match[3]);
					if(match[1] === "Any") {
						if(KSType.isValue(match[2])) {
							return nullable ? AnyType.NullableExplicit : AnyType.Explicit;
						}
						else {
							return nullable ? AnyType.NullableUnexplicit : AnyType.Unexplicit;
						}
					}
					else {
						return scope.reference(match[1], nullable);
					}
				}
				else {
					return scope.__ks_func_reference_0(data);
				}
			}
			else if(KSType.isArray(data)) {
				if(KSType.isNumber(data[0])) {
					let type;
					if(data[0] === -1) {
						throw new NotImplementedException(node);
					}
					else if(KSType.isValue((type = references[data[0]]))) {
						return references[data[0]].name(data[1]);
					}
					else {
						const type = Type.__ks_sttc_toNamedType_1(Type.__ks_sttc_import_0(data[0], metadata, references, alterations, queue, scope, node), false, scope, node);
						references[data[0]] = type;
						return scope.__ks_func_reference_0(type);
					}
				}
			}
			else if(KSType.isValue(data.reference)) {
				if(KSType.isValue(references[data.reference])) {
					return scope.reference(references[data.reference]);
				}
				else {
					const type = Type.__ks_sttc_toNamedType_1(Type.import(data.reference, metadata, references, alterations, queue, scope, node), false, scope, node);
					references[data.reference] = type;
					return scope.__ks_func_reference_0(type);
				}
			}
			else if(KSType.isValue(data.kind)) {
				let __ks_0 = data.kind.valueOf();
				if(__ks_0 === TypeKind.Alias.value) {
					return AliasType.__ks_sttc_import_4(index, data, metadata, references, alterations, queue, scope, node);
				}
				else if(__ks_0 === TypeKind.Class.value) {
					return ClassType.__ks_sttc_import_5(index, data, metadata, references, alterations, queue, scope, node);
				}
				else if(__ks_0 === TypeKind.Dictionary.value) {
					return DictionaryType.__ks_sttc_import_8(index, data, metadata, references, alterations, queue, scope, node);
				}
				else if(__ks_0 === TypeKind.Enum.value) {
					return EnumType.__ks_sttc_import_6(index, data, metadata, references, alterations, queue, scope, node);
				}
				else if(__ks_0 === TypeKind.Function.value) {
					return FunctionType.__ks_sttc_import_1(index, data, metadata, references, alterations, queue, scope, node);
				}
				else if(__ks_0 === TypeKind.Fusion.value) {
					return FusionType.__ks_sttc_import_14(index, data, metadata, references, alterations, queue, scope, node);
				}
				else if(__ks_0 === TypeKind.Namespace.value) {
					return NamespaceType.__ks_sttc_import_7(index, data, metadata, references, alterations, queue, scope, node);
				}
				else if(__ks_0 === TypeKind.OverloadedFunction.value) {
					return OverloadedFunctionType.__ks_sttc_import_2(index, data, metadata, references, alterations, queue, scope, node);
				}
				else if(__ks_0 === TypeKind.Reference.value) {
					return ReferenceType.__ks_sttc_import_3(index, data, metadata, references, alterations, queue, scope, node);
				}
				else if(__ks_0 === TypeKind.Struct.value) {
					return StructType.__ks_sttc_import_9(index, data, metadata, references, alterations, queue, scope, node);
				}
				else if(__ks_0 === TypeKind.Tuple.value) {
					return TupleType.__ks_sttc_import_11(index, data, metadata, references, alterations, queue, scope, node);
				}
				else if(__ks_0 === TypeKind.Union.value) {
					return UnionType.__ks_sttc_import_15(index, data, metadata, references, alterations, queue, scope, node);
				}
			}
			else if(KSType.isValue(data.type)) {
				return Type.import(data.type, metadata, references, alterations, queue, scope, node);
			}
			else if(KSType.isValue(data.originals)) {
				const first = references[data.originals[0]];
				const second = references[data.originals[1]];
				const requirement = KSOperator.bitwiseAnd(first.origin(), TypeOrigin.Require) !== 0n;
				const [major, minor] = requirement ? [first, second] : [second, first];
				const origin = requirement ? TypeOrigin.RequireOrExtern : TypeOrigin.ExternOrRequire;
				const type = ClassType.__ks_new_0(scope);
				type.origin(origin).originals(major.type(), minor.type());
				queue.push((() => {
					const __ks_rt = (...args) => {
						if(args.length === 0) {
							return __ks_rt.__ks_0.call(this);
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = () => {
						type.copyFrom(major.type());
					};
					return __ks_rt;
				})());
				return type;
			}
			console.info(data);
			throw new NotImplementedException(node);
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 7) {
				if(t0(arguments[0]) && t1(arguments[1]) && t2(arguments[2]) && t2(arguments[3]) && t1(arguments[4]) && t3(arguments[5]) && t4(arguments[6])) {
					return Type.__ks_sttc_import_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
				}
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_isNative_0(name) {
			return $natives[name] === true;
		}
		static isNative() {
			const t0 = KSType.isString;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return Type.__ks_sttc_isNative_0(arguments[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_renameNative_0(name) {
			return KSType.isString($types[name]) ? $types[name] : name;
		}
		static renameNative() {
			const t0 = KSType.isString;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return Type.__ks_sttc_renameNative_0(arguments[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toNamedType_0(name, type) {
			if(!(type.__ks_func_shallBeNamed_0() === true)) {
				return type;
			}
			if(type.__ks_func_isContainer_0() === true) {
				return NamedContainerType.__ks_new_0(name, type);
			}
			else {
				return NamedType.__ks_new_0(name, type);
			}
		}
		static __ks_sttc_toNamedType_1(type, declare, scope, node) {
			if(!(type.__ks_func_shallBeNamed_0() === true)) {
				return type;
			}
			const namedType = (type.__ks_func_isContainer_0() === true) ? NamedContainerType.__ks_new_0(scope.__ks_func_acquireTempName_0(declare), type) : NamedType.__ks_new_0(scope.__ks_func_acquireTempName_0(declare), type);
			scope.define(namedType.__ks_func_name_0(), true, namedType, node);
			return namedType;
		}
		static toNamedType() {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Type);
			const t2 = KSType.isBoolean;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t1(arguments[1])) {
					return Type.__ks_sttc_toNamedType_0(arguments[0], arguments[1]);
				}
				throw KSHelper.badArgs();
			}
			if(arguments.length === 4) {
				if(t1(arguments[0]) && t2(arguments[1]) && t3(arguments[2]) && t4(arguments[3])) {
					return Type.__ks_sttc_toNamedType_1(arguments[0], arguments[1], arguments[2], arguments[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_union_0(scope, types) {
			if(types.length === 1) {
				return types[0];
			}
			const union = UnionType.__ks_new_0(scope);
			for(let __ks_0 = 0, __ks_1 = types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = types[__ks_0];
				union.addType(type);
			}
			return union.__ks_func_type_0();
		}
		static union() {
			const t0 = value => KSType.isClassInstance(value, Scope);
			const t1 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(arguments, pts, idx);
			let pts;
			if(arguments.length >= 1) {
				if(t0(arguments[0]) && KSHelper.isVarargs(arguments, 0, arguments.length - 1, t1, pts = [1], 0) && te(pts, 1)) {
					return Type.__ks_sttc_union_0(arguments[0], KSHelper.getVarargs(arguments, 1, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
	}
	class FunctionType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(FunctionType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(FunctionType.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(FunctionType.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		static __ks_new_3(...args) {
			const o = Object.create(FunctionType.prototype);
			o.__ks_init();
			o.__ks_cons_3(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._assessment = null;
			this._async = false;
			this._errors = [];
			this._hasRest = false;
			this._index = -1;
			this._max = 0;
			this._maxBefore = 0;
			this._maxAfter = 0;
			this._min = 0;
			this._minBefore = 0;
			this._minAfter = 0;
			this._missingParameters = false;
			this._missingReturn = true;
			this._parameters = [];
			this._restIndex = -1;
			this._returnType = AnyType.NullableUnexplicit;
		}
		__ks_cons_0(scope) {
			if(scope === void 0) {
				scope = null;
			}
			Type.prototype.__ks_cons_0.call(this, scope);
		}
		__ks_cons_1(scope, index) {
			if(scope === void 0) {
				scope = null;
			}
			Type.prototype.__ks_cons_0.call(this, scope);
			this._index = index;
		}
		__ks_cons_2(parameters, data, node) {
			Type.prototype.__ks_cons_rt.call(null, this, [node.scope()]);
			if(KSType.isValue(data.type)) {
				if(KSHelper.valueOf(data.type.kind) !== NodeKind.ReturnTypeReference.value) {
					this._returnType = Type.fromAST(data.type, node);
				}
				this._missingReturn = false;
			}
			for(let __ks_0 = 0, __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = parameters[__ks_0];
				if(KSOperator.eq(parameter.__ks_func_max_2(), Infinity)) {
					if(KSOperator.eq(this._max, Infinity)) {
						SyntaxException.__ks_sttc_throwTooMuchRestParameter_0(node);
					}
					else {
						this._max = Infinity;
					}
				}
				else {
					this._max += parameter.__ks_func_max_2();
				}
				this._min += parameter.__ks_func_min_2();
				this._parameters.push(parameter);
			}
			if(KSType.isValue(data.modifiers)) {
				this.processModifiers(data.modifiers);
			}
			if(KSType.isValue(data.throws)) {
				let type = null;
				for(let __ks_0 = 0, __ks_1 = data.throws.length, __ks_throw_1; __ks_0 < __ks_1; ++__ks_0) {
					__ks_throw_1 = data.throws[__ks_0];
					let __ks_2;
					if((KSType.isValue(__ks_2 = Type.fromAST(__ks_throw_1, node).__ks_func_discardReference_0()) ? (type = __ks_2, true) : false) && (type.__ks_func_isNamed_0() === true) && (type.__ks_func_isClass_0() === true)) {
						this._errors.push(type);
					}
					else {
						TypeException.throwNotClass(__ks_throw_1.name, node);
					}
				}
			}
			this.__ks_func_updateParameters_0();
		}
		__ks_cons_3(parameters, data, index, node) {
			FunctionType.prototype.__ks_cons_2.call(this, parameters, data, node);
			this._index = index;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isArray(value, value => KSType.isClassInstance(value, ParameterType));
			const t3 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return FunctionType.prototype.__ks_cons_0.call(that, args[0]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return FunctionType.prototype.__ks_cons_1.call(that, args[0], args[1]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 3) {
				if(t2(args[0]) && t3(args[1]) && t3(args[2])) {
					return FunctionType.prototype.__ks_cons_2.call(that, args[0], args[1], args[2]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 4) {
				if(t2(args[0]) && t3(args[1]) && t1(args[2]) && t3(args[3])) {
					return FunctionType.prototype.__ks_cons_3.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		absoluteMax() {
			return this.__ks_func_absoluteMax_rt.call(null, this, this, arguments);
		}
		__ks_func_absoluteMax_0() {
			return this._async ? this._max + 1 : this._max;
		}
		__ks_func_absoluteMax_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_absoluteMax_0.call(that);
			}
			if(super.__ks_func_absoluteMax_rt) {
				return super.__ks_func_absoluteMax_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		absoluteMin() {
			return this.__ks_func_absoluteMin_rt.call(null, this, this, arguments);
		}
		__ks_func_absoluteMin_0() {
			return this._async ? this._min + 1 : this._min;
		}
		__ks_func_absoluteMin_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_absoluteMin_0.call(that);
			}
			if(super.__ks_func_absoluteMin_rt) {
				return super.__ks_func_absoluteMin_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addError() {
			return this.__ks_func_addError_rt.call(null, this, this, arguments);
		}
		__ks_func_addError_0(types) {
			__ks_Array.__ks_func_pushUniq_0.call(this._errors, types);
		}
		__ks_func_addError_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return proto.__ks_func_addError_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			if(super.__ks_func_addError_rt) {
				return super.__ks_func_addError_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addParameter() {
			return this.__ks_func_addParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_addParameter_0(type, name, min, max) {
			if(name === void 0) {
				name = null;
			}
			this._parameters.push(new ParameterType(this._scope, name, type, min, max));
			if(this._hasRest) {
				this._max = KSOperator.addOrConcat(this._max, max);
				this._minAfter = KSOperator.addOrConcat(this._minAfter, min);
				this._maxAfter = KSOperator.addOrConcat(this._maxAfter, max);
			}
			else if(KSOperator.eq(max, Infinity)) {
				this._max = Infinity;
				this._restIndex = this._parameters.length - 1;
				this._hasRest = true;
			}
			else {
				this._max = KSOperator.addOrConcat(this._max, max);
				this._minBefore = KSOperator.addOrConcat(this._minBefore, min);
				this._maxBefore = KSOperator.addOrConcat(this._maxBefore, max);
			}
			this._min = KSOperator.addOrConcat(this._min, min);
		}
		__ks_func_addParameter_1(type) {
			this._parameters.push(type);
			if(this._hasRest) {
				this._max += type.__ks_func_max_2();
				this._minAfter += type.__ks_func_min_2();
				this._maxAfter += type.__ks_func_max_2();
			}
			else if(KSOperator.eq(type.__ks_func_max_2(), Infinity)) {
				this._max = Infinity;
				this._restIndex = this._parameters.length - 1;
				this._hasRest = true;
			}
			else {
				this._max += type.__ks_func_max_2();
				this._minBefore += type.__ks_func_min_2();
				this._maxBefore += type.__ks_func_max_2();
			}
			this._min += type.__ks_func_min_2();
		}
		__ks_func_addParameter_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ParameterType);
			const t1 = value => KSType.isClassInstance(value, Type);
			const t2 = value => KSType.isString(value) || KSType.isNull(value);
			const t3 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addParameter_1.call(that, args[0]);
				}
			}
			if(args.length === 4) {
				if(t1(args[0]) && t2(args[1]) && t3(args[2]) && t3(args[3])) {
					return proto.__ks_func_addParameter_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_addParameter_rt) {
				return super.__ks_func_addParameter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		assessment() {
			return this.__ks_func_assessment_rt.call(null, this, this, arguments);
		}
		__ks_func_assessment_0(name, node) {
			if(this._assessment === null) {
				this._assessment = Router.assess.__ks_1([this], name, node);
			}
			return this._assessment;
		}
		__ks_func_assessment_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_assessment_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_assessment_rt) {
				return super.__ks_func_assessment_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		async() {
			return this.__ks_func_async_rt.call(null, this, this, arguments);
		}
		__ks_func_async_0() {
			this._async = true;
		}
		__ks_func_async_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_async_0.call(that);
			}
			if(super.__ks_func_async_rt) {
				return super.__ks_func_async_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			throw new NotSupportedException();
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			const result = (() => {
				const d = new Dictionary();
				d.kind = TypeKind.Function;
				return d;
			})();
			if(!(this.__ks_func_isAlien_0() === true) && (this._index !== -1)) {
				result.index = this._index;
			}
			result.async = this._async;
			if((mode & ExportMode.OverloadedFunction) === 0n) {
				result.exhaustive = this.__ks_func_isExhaustive_0();
			}
			result.min = this._min;
			result.max = this._max;
			result.parameters = KSHelper.mapArray(this._parameters, function(parameter) {
				return parameter.__ks_func_export_0(references, indexDelta, mode, module);
			});
			result.returns = this._returnType.__ks_func_toReference_0(references, indexDelta, mode, module);
			result.errors = KSHelper.mapArray(this._errors, function(__ks_throw_1) {
				return __ks_throw_1.__ks_func_toReference_0(references, indexDelta, mode, module);
			});
			return result;
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_flagExported_0(explicitly) {
			if(this._exported) {
				return this;
			}
			this._exported = true;
			for(let __ks_0 = 0, __ks_1 = this._errors.length, error; __ks_0 < __ks_1; ++__ks_0) {
				error = this._errors[__ks_0];
				error.__ks_func_flagExported_0(false);
			}
			this._returnType.__ks_func_flagExported_0(false);
			return this;
		}
		getCallIndex() {
			return this.__ks_func_getCallIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_getCallIndex_0() {
			return this._alien ? 0 : this._index;
		}
		__ks_func_getCallIndex_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getCallIndex_0.call(that);
			}
			if(super.__ks_func_getCallIndex_rt) {
				return super.__ks_func_getCallIndex_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getMaxAfter() {
			return this.__ks_func_getMaxAfter_rt.call(null, this, this, arguments);
		}
		__ks_func_getMaxAfter_0() {
			return this._maxAfter;
		}
		__ks_func_getMaxAfter_1(excludes) {
			if(excludes === void 0) {
				excludes = null;
			}
			if(!this._hasRest) {
				return 0;
			}
			if(KSType.isValue(excludes)) {
				let max = 0;
				for(let __ks_0 = this._restIndex + 1, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = this._parameters[__ks_0];
					if(!__ks_Array.__ks_func_contains_0.call(excludes, parameter.__ks_func_name_3())) {
						max += parameter.__ks_func_max_2();
					}
				}
				return max;
			}
			else {
				return this._maxAfter;
			}
		}
		__ks_func_getMaxAfter_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString) || KSType.isNull(value);
			if(args.length === 0) {
				return proto.__ks_func_getMaxAfter_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getMaxAfter_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_getMaxAfter_rt) {
				return super.__ks_func_getMaxAfter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getMaxBefore() {
			return this.__ks_func_getMaxBefore_rt.call(null, this, this, arguments);
		}
		__ks_func_getMaxBefore_0() {
			return this._maxBefore;
		}
		__ks_func_getMaxBefore_1(excludes) {
			if(excludes === void 0) {
				excludes = null;
			}
			if(!this._hasRest) {
				return 0;
			}
			if(KSType.isValue(excludes)) {
				let max = 0;
				for(let __ks_0 = 0, __ks_1 = Math.min(this._parameters.length, this._restIndex), parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = this._parameters[__ks_0];
					if(!__ks_Array.__ks_func_contains_0.call(excludes, parameter.__ks_func_name_3())) {
						max += parameter.__ks_func_max_2();
					}
				}
				return max;
			}
			else {
				return this._maxBefore;
			}
		}
		__ks_func_getMaxBefore_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString) || KSType.isNull(value);
			if(args.length === 0) {
				return proto.__ks_func_getMaxBefore_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getMaxBefore_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_getMaxBefore_rt) {
				return super.__ks_func_getMaxBefore_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getMinAfter() {
			return this.__ks_func_getMinAfter_rt.call(null, this, this, arguments);
		}
		__ks_func_getMinAfter_0() {
			return this._minAfter;
		}
		__ks_func_getMinAfter_1(excludes) {
			if(excludes === void 0) {
				excludes = null;
			}
			if(!this._hasRest) {
				return 0;
			}
			if(KSType.isValue(excludes)) {
				let min = 0;
				for(let __ks_0 = this._restIndex + 1, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = this._parameters[__ks_0];
					if(!__ks_Array.__ks_func_contains_0.call(excludes, parameter.__ks_func_name_3())) {
						min += parameter.__ks_func_min_2();
					}
				}
				return min;
			}
			else {
				return this._minAfter;
			}
		}
		__ks_func_getMinAfter_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString) || KSType.isNull(value);
			if(args.length === 0) {
				return proto.__ks_func_getMinAfter_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getMinAfter_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_getMinAfter_rt) {
				return super.__ks_func_getMinAfter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getMinBefore() {
			return this.__ks_func_getMinBefore_rt.call(null, this, this, arguments);
		}
		__ks_func_getMinBefore_0() {
			return this._minBefore;
		}
		__ks_func_getMinBefore_1(excludes) {
			if(excludes === void 0) {
				excludes = null;
			}
			if(!this._hasRest) {
				return 0;
			}
			if(KSType.isValue(excludes)) {
				let min = 0;
				for(let __ks_0 = 0, __ks_1 = Math.min(this._parameters.length, this._restIndex), parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = this._parameters[__ks_0];
					if(!__ks_Array.__ks_func_contains_0.call(excludes, parameter.__ks_func_name_3())) {
						min += parameter.__ks_func_min_2();
					}
				}
				return min;
			}
			else {
				return this._minBefore;
			}
		}
		__ks_func_getMinBefore_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString) || KSType.isNull(value);
			if(args.length === 0) {
				return proto.__ks_func_getMinBefore_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getMinBefore_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_getMinBefore_rt) {
				return super.__ks_func_getMinBefore_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getProperty_0(name) {
			return Type.Any;
		}
		getRestIndex() {
			return this.__ks_func_getRestIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_getRestIndex_0() {
			return this._restIndex;
		}
		__ks_func_getRestIndex_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getRestIndex_0.call(that);
			}
			if(super.__ks_func_getRestIndex_rt) {
				return super.__ks_func_getRestIndex_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getRestParameter() {
			return this.__ks_func_getRestParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_getRestParameter_0() {
			return this._parameters[this._restIndex];
		}
		__ks_func_getRestParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getRestParameter_0.call(that);
			}
			if(super.__ks_func_getRestParameter_rt) {
				return super.__ks_func_getRestParameter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getReturnType() {
			return this.__ks_func_getReturnType_rt.call(null, this, this, arguments);
		}
		__ks_func_getReturnType_0() {
			return this._returnType;
		}
		__ks_func_getReturnType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getReturnType_0.call(that);
			}
			if(super.__ks_func_getReturnType_rt) {
				return super.__ks_func_getReturnType_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_hashCode_0() {
			return "Function";
		}
		hasRestParameter() {
			return this.__ks_func_hasRestParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_hasRestParameter_0() {
			return this._hasRest;
		}
		__ks_func_hasRestParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasRestParameter_0.call(that);
			}
			if(super.__ks_func_hasRestParameter_rt) {
				return super.__ks_func_hasRestParameter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasVarargsParameter() {
			return this.__ks_func_hasVarargsParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_hasVarargsParameter_0() {
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				if(parameter.__ks_func_isVarargs_0() === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_hasVarargsParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasVarargsParameter_0.call(that);
			}
			if(super.__ks_func_hasVarargsParameter_rt) {
				return super.__ks_func_hasVarargsParameter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		index() {
			return this.__ks_func_index_rt.call(null, this, this, arguments);
		}
		__ks_func_index_0() {
			return this._index;
		}
		__ks_func_index_1(index) {
			this._index = index;
			return this;
		}
		__ks_func_index_rt(that, proto, args) {
			const t0 = KSType.isNumber;
			if(args.length === 0) {
				return proto.__ks_func_index_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_index_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_index_rt) {
				return super.__ks_func_index_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isAssignableToVariable_2(value, anycast, nullcast, downcast, limited) {
			if(limited === void 0 || limited === null) {
				limited = false;
			}
			if((value.__ks_func_isAny_0() === true) || (value.__ks_func_isFunction_0() === true)) {
				return true;
			}
			else if(KSType.isClassInstance(value, UnionType)) {
				for(let __ks_0 = 0, __ks_1 = value.__ks_func_types_1(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
					type = __ks_1[__ks_0];
					if(this.isAssignableToVariable(type, anycast, nullcast, downcast)) {
						return true;
					}
				}
			}
			return false;
		}
		isAsync() {
			return this.__ks_func_isAsync_rt.call(null, this, this, arguments);
		}
		__ks_func_isAsync_0() {
			return this._async;
		}
		__ks_func_isAsync_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAsync_0.call(that);
			}
			if(super.__ks_func_isAsync_rt) {
				return super.__ks_func_isAsync_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isCatchingError() {
			return this.__ks_func_isCatchingError_rt.call(null, this, this, arguments);
		}
		__ks_func_isCatchingError_0(error) {
			if(this._errors.length !== 0) {
				for(let __ks_0 = 0, __ks_1 = this._errors.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = this._errors[__ks_0];
					if(error.matchInheritanceOf(type) === true) {
						return true;
					}
				}
			}
			else if(this._returnType.__ks_func_isNever_0() === true) {
				return true;
			}
			return false;
		}
		__ks_func_isCatchingError_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isCatchingError_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isCatchingError_rt) {
				return super.__ks_func_isCatchingError_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isExportable_0() {
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				if(!(parameter.__ks_func_isExportable_0() === true)) {
					return false;
				}
			}
			if(!(this._returnType.__ks_func_isExportable_0() === true)) {
				return false;
			}
			return true;
		}
		__ks_func_isExtendable_0() {
			return true;
		}
		__ks_func_isFunction_0() {
			return true;
		}
		isMissingError() {
			return this.__ks_func_isMissingError_rt.call(null, this, this, arguments);
		}
		__ks_func_isMissingError_0() {
			return this._errors.length === 0;
		}
		__ks_func_isMissingError_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isMissingError_0.call(that);
			}
			if(super.__ks_func_isMissingError_rt) {
				return super.__ks_func_isMissingError_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isMissingReturn() {
			return this.__ks_func_isMissingReturn_rt.call(null, this, this, arguments);
		}
		__ks_func_isMissingReturn_0() {
			return this._missingReturn;
		}
		__ks_func_isMissingReturn_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isMissingReturn_0.call(that);
			}
			if(super.__ks_func_isMissingReturn_rt) {
				return super.__ks_func_isMissingReturn_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isMorePreciseThan_1(value) {
			if(this._parameters.length !== value._parameters.length) {
				return false;
			}
			for(let i = 0, __ks_0 = this._parameters.length, parameter; i < __ks_0; ++i) {
				parameter = this._parameters[i];
				if(parameter.__ks_func_isMorePreciseThan_4(value._parameters[i])) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isMorePreciseThan_0(value) {
			if(KSType.isClassInstance(value, FunctionType)) {
				return this.__ks_func_isMorePreciseThan_1(value);
			}
			return this.__ks_func_isMorePreciseThan_2(value);
		}
		__ks_func_isMorePreciseThan_2(value) {
			return value.__ks_func_isAny_0();
		}
		__ks_func_isMorePreciseThan_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, FunctionType);
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isMorePreciseThan_1.call(that, args[0]);
				}
				if(t1(args[0])) {
					return proto.__ks_func_isMorePreciseThan_2.call(that, args[0]);
				}
			}
			return super.__ks_func_isMorePreciseThan_rt.call(null, that, Type.prototype, args);
		}
		isInstanceOf() {
			return this.__ks_func_isInstanceOf_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstanceOf_0(target) {
			return target.__ks_func_name_2() === "Function";
		}
		__ks_func_isInstanceOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ReferenceType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInstanceOf_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInstanceOf_rt) {
				return super.__ks_func_isInstanceOf_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isParametersMatching() {
			return this.__ks_func_isParametersMatching_rt.call(null, this, this, arguments);
		}
		__ks_func_isParametersMatching_0(__ks_arguments_1, mode) {
			return this.__ks_func_isParametersMatching_1(0, -1, __ks_arguments_1, 0, -1, mode);
		}
		__ks_func_isParametersMatching_1(pIndex, pStep, __ks_arguments_1, aIndex, aStep, mode) {
			if(pStep === -1) {
				if(KSOperator.gte(pIndex, this._parameters.length)) {
					if((mode & MatchingMode.RequireAllParameters) === 0n) {
						return FunctionType.__ks_sttc_isOptional_0(__ks_arguments_1, aIndex, aStep);
					}
					else {
						return KSOperator.gte(aIndex, __ks_arguments_1.length) || ((KSOperator.addOrConcat(aIndex, 1) === __ks_arguments_1.length) && KSOperator.gt(aStep, __ks_arguments_1[aIndex].max()));
					}
				}
				const parameter = this._parameters[pIndex];
				if(KSOperator.eq(parameter.__ks_func_max_2(), Infinity)) {
					return this.__ks_func_isParametersMatching_1(pIndex, 1, __ks_arguments_1, aIndex, aStep, mode);
				}
				for(let i = 1, __ks_0 = parameter.__ks_func_min_2(); i <= __ks_0; ++i) {
					if(!(this.__ks_func_isParametersMatching_1(pIndex, i, __ks_arguments_1, aIndex, aStep, mode) === true)) {
						return false;
					}
				}
				if(parameter.__ks_func_min_2() === parameter.__ks_func_max_2()) {
					return true;
				}
				for(let i = parameter.__ks_func_min_2() + 1, __ks_0 = parameter.__ks_func_max_2(); i <= __ks_0; ++i) {
					if(this.__ks_func_isParametersMatching_1(pIndex, i, __ks_arguments_1, aIndex, aStep, mode) === true) {
						return true;
					}
				}
				return false;
			}
			else if(KSOperator.gt(pStep, this._parameters[pIndex].__ks_func_max_2())) {
				return this.__ks_func_isParametersMatching_1(KSOperator.addOrConcat(pIndex, 1), -1, __ks_arguments_1, aIndex, aStep, mode);
			}
			else if(aStep === -1) {
				if(KSOperator.gte(aIndex, __ks_arguments_1.length)) {
					return FunctionType.__ks_sttc_isOptional_0(this._parameters, pIndex, pStep);
				}
				const argument = __ks_arguments_1[aIndex];
				if(KSOperator.eq(argument.max(), Infinity)) {
					return this.__ks_func_isParametersMatching_1(pIndex, pStep, __ks_arguments_1, aIndex, 1, mode);
				}
				for(let i = 1, __ks_0 = argument.min(); i <= __ks_0; ++i) {
					if(!(this.__ks_func_isParametersMatching_1(pIndex, pStep, __ks_arguments_1, aIndex, i, mode) === true)) {
						return false;
					}
				}
				if(argument.min() === argument.max()) {
					return true;
				}
				for(let i = KSOperator.addOrConcat(argument.min(), 1), __ks_0 = argument.max(); i <= __ks_0; ++i) {
					if(this.__ks_func_isParametersMatching_1(pIndex, pStep, __ks_arguments_1, aIndex, i, mode) === true) {
						return true;
					}
				}
				return false;
			}
			else if(KSOperator.gt(aStep, __ks_arguments_1[aIndex].max())) {
				return this.__ks_func_isParametersMatching_1(pIndex, pStep, __ks_arguments_1, KSOperator.addOrConcat(aIndex, 1), -1, mode);
			}
			else if(__ks_arguments_1[aIndex].isSubsetOf(this._parameters[pIndex], mode) === true) {
				if(KSOperator.eq(this._parameters[pIndex].__ks_func_max_2(), Infinity)) {
					if(KSOperator.eq(__ks_arguments_1[aIndex].max(), Infinity)) {
						return true;
					}
					else {
						return this.__ks_func_isParametersMatching_1(pIndex, pStep, __ks_arguments_1, aIndex, KSOperator.addOrConcat(aStep, 1), mode);
					}
				}
				else {
					return this.__ks_func_isParametersMatching_1(pIndex, KSOperator.addOrConcat(pStep, 1), __ks_arguments_1, aIndex, KSOperator.addOrConcat(aStep, 1), mode);
				}
			}
			else {
				return false;
			}
		}
		__ks_func_isParametersMatching_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			const t2 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_isParametersMatching_0.call(that, args[0], args[1]);
				}
			}
			if(args.length === 6) {
				if(t2(args[0]) && t2(args[1]) && t2(args[2]) && t2(args[3]) && t2(args[4]) && t1(args[5])) {
					return proto.__ks_func_isParametersMatching_1.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
				}
			}
			if(super.__ks_func_isParametersMatching_rt) {
				return super.__ks_func_isParametersMatching_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isSubsetOf_1(value, mode) {
			return value.__ks_func_isFunction_0();
		}
		__ks_func_isSubsetOf_2(value, mode) {
			if(this._async !== value._async) {
				return false;
			}
			if((mode & MatchingMode.Exact) !== 0n) {
				mode = MatchingMode(mode | MatchingMode.ExactParameter | MatchingMode.ExactReturn);
			}
			else if((mode & MatchingMode.Similar) !== 0n) {
				mode = MatchingMode(mode | MatchingMode.SimilarParameter | MatchingMode.SimilarReturn);
			}
			if(((mode & MatchingMode.MissingParameter) !== 0n) && this._missingParameters) {
			}
			else if((mode & MatchingMode.ShiftableParameters) !== 0n) {
				let parameterMode = null;
				if((mode & MatchingMode.ExactParameter) !== 0n) {
					parameterMode = MatchingMode.Exact;
				}
				else if((mode & MatchingMode.MissingParameterType) !== 0n) {
					parameterMode = MatchingMode(MatchingMode.Similar | MatchingMode.Missing);
				}
				else {
					parameterMode = MatchingMode.Similar;
				}
				if((mode & MatchingMode.RequireAllParameters) !== 0n) {
					parameterMode = MatchingMode(parameterMode | MatchingMode.RequireAllParameters);
				}
				if(!value.__ks_func_isParametersMatching_0(this._parameters, parameterMode)) {
					return false;
				}
			}
			else {
				if((mode & MatchingMode.AdditionalParameter) !== 0n) {
					if(this._parameters.length < value._parameters.length) {
						if(((mode & MatchingMode.MissingParameterDefault) === 0n) && (this._min < value._min)) {
							return false;
						}
						for(let __ks_0 = this._parameters.length, __ks_1 = value._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
							parameter = value._parameters[__ks_0];
							if(parameter.__ks_func_min_2() !== 0) {
								return false;
							}
						}
					}
					else {
						if((mode & MatchingMode.MissingParameterArity) === 0n) {
							if(this._max < value._max) {
								return false;
							}
							if(((mode & MatchingMode.MissingParameterDefault) === 0n) && (this._min < value._min)) {
								return false;
							}
						}
						for(let __ks_0 = value._parameters.length, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
							parameter = this._parameters[__ks_0];
							if(parameter.__ks_func_min_2() !== 0) {
								return false;
							}
						}
					}
				}
				else if((mode & MatchingMode.MissingParameter) !== 0n) {
					if(this._parameters.length > value._parameters.length) {
						return false;
					}
					for(let __ks_0 = this._parameters.length, __ks_1 = value._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
						parameter = value._parameters[__ks_0];
						if(!(parameter.__ks_func_min_2() === 0)) {
							return false;
						}
					}
					if(((mode & MatchingMode.MissingParameterArity) === 0n) && ((this._hasRest !== value._hasRest) || (this._restIndex !== value._restIndex))) {
						return false;
					}
					if(((mode & MatchingMode.MissingParameterDefault) === 0n) && (this._min !== value._min)) {
						return false;
					}
				}
				else {
					if(this._parameters.length !== value._parameters.length) {
						return false;
					}
					if(((mode & MatchingMode.MissingParameterArity) === 0n) && ((this._hasRest !== value._hasRest) || (this._restIndex !== value._restIndex))) {
						return false;
					}
					if(((mode & MatchingMode.MissingParameterDefault) === 0n) && ((this._min !== value._min) || (this._max !== value._max))) {
						return false;
					}
				}
				let paramMode = MatchingMode.Default;
				if((mode & MatchingMode.ExactParameter) !== 0n) {
					paramMode = MatchingMode(paramMode | MatchingMode.Exact);
				}
				if((mode & MatchingMode.SimilarParameter) !== 0n) {
					paramMode = MatchingMode(paramMode | MatchingMode.Similar);
				}
				if((mode & MatchingMode.MissingParameterType) !== 0n) {
					paramMode = MatchingMode(paramMode | MatchingMode.MissingType);
				}
				if((mode & MatchingMode.SubclassParameter) !== 0n) {
					paramMode = MatchingMode(paramMode | MatchingMode.Subclass);
				}
				if((mode & MatchingMode.SubsetParameter) !== 0n) {
					paramMode = MatchingMode(paramMode | MatchingMode.Subset);
				}
				if((mode & MatchingMode.NonNullToNullParameter) !== 0n) {
					paramMode = MatchingMode(paramMode | MatchingMode.NonNullToNull);
				}
				if((mode & MatchingMode.MissingParameterDefault) !== 0n) {
					paramMode = MatchingMode(paramMode | MatchingMode.MissingDefault);
				}
				if((mode & MatchingMode.MissingParameterArity) !== 0n) {
					paramMode = MatchingMode(paramMode | MatchingMode.MissingArity);
				}
				if((mode & MatchingMode.Renamed) !== 0n) {
					paramMode = MatchingMode(paramMode | MatchingMode.Renamed);
				}
				if((mode & MatchingMode.IgnoreName) !== 0n) {
					paramMode = MatchingMode(paramMode | MatchingMode.IgnoreName);
				}
				if(paramMode.value !== 0) {
					for(let index = 0, __ks_0 = Math.min(this._parameters.length, value._parameters.length), parameter; index < __ks_0; ++index) {
						parameter = this._parameters[index];
						if(!(parameter.__ks_func_isSubsetOf_24(value._parameters[index], paramMode) === true)) {
							return false;
						}
					}
				}
			}
			if((mode & MatchingMode.IgnoreReturn) !== 0n) {
			}
			else if(!KSType.isValue(this._returnType)) {
				if(!(value.__ks_func_isMissingReturn_0() === true)) {
					return false;
				}
			}
			else if(!(((mode & MatchingMode.MissingReturn) !== 0n) && (value.__ks_func_isMissingReturn_0() === true))) {
				let returnMode = MatchingMode.Default;
				if((mode & MatchingMode.ExactReturn) !== 0n) {
					returnMode = MatchingMode(returnMode | MatchingMode.Exact);
				}
				if((mode & MatchingMode.SimilarReturn) !== 0n) {
					returnMode = MatchingMode(returnMode | MatchingMode.Similar);
				}
				if((mode & MatchingMode.SubclassReturn) !== 0n) {
					returnMode = MatchingMode(returnMode | MatchingMode.Subclass);
				}
				if(returnMode.value !== 0) {
					const newType = value.__ks_func_getReturnType_0();
					if(!((newType.__ks_func_isSubsetOf_0(this._returnType, returnMode) === true) || (this._returnType.isInstanceOf(newType) === true))) {
						return false;
					}
				}
			}
			if((mode & MatchingMode.IgnoreError) !== 0n) {
			}
			else if(this._errors.length === 0) {
				if(!(value.__ks_func_isMissingError_0() === true)) {
					return false;
				}
			}
			else if(!(((mode & MatchingMode.MissingError) !== 0n) && (value.__ks_func_isMissingError_0() === true))) {
				let errorMode = MatchingMode.Default;
				if((mode & MatchingMode.ExactError) !== 0n) {
					errorMode = MatchingMode(errorMode | MatchingMode.Exact);
				}
				if((mode & MatchingMode.SimilarErrors) !== 0n) {
					errorMode = MatchingMode(errorMode | MatchingMode.Similar);
				}
				if((mode & MatchingMode.SubclassError) !== 0n) {
					errorMode = MatchingMode(errorMode | MatchingMode.Subclass);
				}
				if(errorMode.value !== 0) {
					const newTypes = value.__ks_func_listErrors_0();
					for(let __ks_0 = 0, __ks_1 = this._errors.length, oldType; __ks_0 < __ks_1; ++__ks_0) {
						oldType = this._errors[__ks_0];
						let matched = false;
						for(let __ks_2 = 0, __ks_3 = newTypes.length, newType; __ks_2 < __ks_3 && !(matched); ++__ks_2) {
							newType = newTypes[__ks_2];
							if((newType.isSubsetOf(oldType, errorMode) === true) || (oldType.isInstanceOf(newType) === true)) {
								matched = true;
							}
						}
						if(!matched) {
							return false;
						}
					}
				}
			}
			return true;
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, ReferenceType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_1(value, mode);
			}
			if(KSType.isClassInstance(value, FunctionType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_2(value, mode);
			}
			return super.__ks_func_isSubsetOf_0(value, mode);
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, FunctionType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			const t2 = value => KSType.isClassInstance(value, ReferenceType);
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_2.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t2(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_1.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, Type.prototype, args);
		}
		length() {
			return this.__ks_func_length_rt.call(null, this, this, arguments);
		}
		__ks_func_length_0() {
			return 1;
		}
		__ks_func_length_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_length_0.call(that);
			}
			if(super.__ks_func_length_rt) {
				return super.__ks_func_length_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listErrors() {
			return this.__ks_func_listErrors_rt.call(null, this, this, arguments);
		}
		__ks_func_listErrors_0() {
			return this._errors;
		}
		__ks_func_listErrors_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_listErrors_0.call(that);
			}
			if(super.__ks_func_listErrors_rt) {
				return super.__ks_func_listErrors_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		matchArguments() {
			return this.__ks_func_matchArguments_rt.call(null, this, this, arguments);
		}
		__ks_func_matchArguments_0(__ks_arguments_1, node) {
			const assessment = this.__ks_func_assessment_0("", node);
			return KSType.isValue(Router.matchArguments(assessment, __ks_arguments_1, node));
		}
		__ks_func_matchArguments_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_matchArguments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_matchArguments_rt) {
				return super.__ks_func_matchArguments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_matchContentOf_1(value) {
			if((value.__ks_func_isAny_0() === true) || (value.__ks_func_isFunction_0() === true)) {
				return true;
			}
			if(KSType.isClassInstance(value, UnionType)) {
				for(let __ks_0 = 0, __ks_1 = value.__ks_func_types_1(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
					type = __ks_1[__ks_0];
					if(this.matchContentOf(type)) {
						return true;
					}
				}
			}
			return false;
		}
		__ks_func_matchContentOf_0(value) {
			if(KSType.isClassInstance(value, Type)) {
				return this.__ks_func_matchContentOf_1(value);
			}
			return super.__ks_func_matchContentOf_0(value);
		}
		__ks_func_matchContentOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_matchContentOf_1.call(that, args[0]);
				}
			}
			return super.__ks_func_matchContentOf_rt.call(null, that, Type.prototype, args);
		}
		max() {
			return this.__ks_func_max_rt.call(null, this, this, arguments);
		}
		__ks_func_max_0() {
			return this._max;
		}
		__ks_func_max_1(excludes) {
			if(excludes === void 0) {
				excludes = null;
			}
			if(KSType.isValue(excludes)) {
				let max = 0;
				for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = this._parameters[__ks_0];
					if(!__ks_Array.__ks_func_contains_0.call(excludes, parameter.__ks_func_name_3())) {
						max += parameter.__ks_func_max_2();
					}
				}
				return max;
			}
			else {
				return this._max;
			}
		}
		__ks_func_max_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString) || KSType.isNull(value);
			if(args.length === 0) {
				return proto.__ks_func_max_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_max_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_max_rt) {
				return super.__ks_func_max_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		min() {
			return this.__ks_func_min_rt.call(null, this, this, arguments);
		}
		__ks_func_min_0() {
			return this._min;
		}
		__ks_func_min_1(excludes) {
			if(excludes === void 0) {
				excludes = null;
			}
			if(KSType.isValue(excludes)) {
				let min = 0;
				for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = this._parameters[__ks_0];
					if(!__ks_Array.__ks_func_contains_0.call(excludes, parameter.__ks_func_name_3())) {
						min += parameter.__ks_func_min_2();
					}
				}
				return min;
			}
			else {
				return this._min;
			}
		}
		__ks_func_min_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString) || KSType.isNull(value);
			if(args.length === 0) {
				return proto.__ks_func_min_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_min_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_min_rt) {
				return super.__ks_func_min_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameter() {
			return this.__ks_func_parameter_rt.call(null, this, this, arguments);
		}
		__ks_func_parameter_0(index) {
			return this._parameters[index];
		}
		__ks_func_parameter_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_parameter_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_parameter_rt) {
				return super.__ks_func_parameter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameters() {
			return this.__ks_func_parameters_rt.call(null, this, this, arguments);
		}
		__ks_func_parameters_0() {
			return this._parameters;
		}
		__ks_func_parameters_1(excludes) {
			if(excludes === void 0) {
				excludes = null;
			}
			if(KSType.isValue(excludes)) {
				return KSHelper.mapArray(this._parameters, function(parameter) {
					return parameter;
				}, function(parameter) {
					return !__ks_Array.__ks_func_contains_0.call(excludes, parameter.__ks_func_name_3());
				});
			}
			else {
				return this._parameters;
			}
		}
		__ks_func_parameters_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString) || KSType.isNull(value);
			if(args.length === 0) {
				return proto.__ks_func_parameters_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_parameters_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_parameters_rt) {
				return super.__ks_func_parameters_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		processModifiers() {
			return this.__ks_func_processModifiers_rt.call(null, this, this, arguments);
		}
		__ks_func_processModifiers_0(modifiers) {
			for(let __ks_0 = 0, __ks_1 = modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Async.value) {
					this._async = true;
				}
			}
		}
		__ks_func_processModifiers_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_processModifiers_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_processModifiers_rt) {
				return super.__ks_func_processModifiers_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		pushTo() {
			return this.__ks_func_pushTo_rt.call(null, this, this, arguments);
		}
		__ks_func_pushTo_0(methods) {
			for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				if(this.isSubsetOf(method, MatchingMode.SimilarParameter) === true) {
					return;
				}
			}
			methods.push(this);
		}
		__ks_func_pushTo_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_pushTo_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_pushTo_rt) {
				return super.__ks_func_pushTo_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setReturnType() {
			return this.__ks_func_setReturnType_rt.call(null, this, this, arguments);
		}
		__ks_func_setReturnType_0(returnType) {
			this._returnType = returnType;
			return this;
		}
		__ks_func_setReturnType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setReturnType_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_setReturnType_rt) {
				return super.__ks_func_setReturnType_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			fragments.code("Function");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			let fragments = "";
			fragments += "(";
			for(let index = 0, __ks_0 = this._parameters.length, parameter; index < __ks_0; ++index) {
				parameter = this._parameters[index];
				if(index !== 0) {
					fragments += ", ";
				}
				fragments += parameter.__ks_func_toQuote_0();
			}
			fragments += ")";
			if(!(this._returnType.__ks_func_isAny_0() === true) || !(this._returnType.__ks_func_isNullable_0() === true)) {
				fragments += ": " + this._returnType.__ks_func_toQuote_0();
			}
			return fragments;
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isFunction(")).compile(node).code(")");
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toTestFunctionFragments_0(fragments, node) {
			fragments.code(KSHelper.toString($runtime.typeof.__ks_0("Function", node)));
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("func", 1);
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		updateParameters() {
			return this.__ks_func_updateParameters_rt.call(null, this, this, arguments);
		}
		__ks_func_updateParameters_0() {
			for(let i = 0, __ks_0 = this._parameters.length, parameter; i < __ks_0; ++i) {
				parameter = this._parameters[i];
				if(this._hasRest) {
					this._minAfter += parameter.__ks_func_min_2();
					this._maxAfter += parameter.__ks_func_max_2();
				}
				else if(KSOperator.eq(parameter.__ks_func_max_2(), Infinity)) {
					this._restIndex = i;
					this._hasRest = true;
				}
				else {
					this._minBefore += parameter.__ks_func_min_2();
					this._maxBefore += parameter.__ks_func_max_2();
				}
			}
		}
		__ks_func_updateParameters_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_updateParameters_0.call(that);
			}
			if(super.__ks_func_updateParameters_rt) {
				return super.__ks_func_updateParameters_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_clone_0(source, target) {
			for(let __ks_0 = 0, __ks_1 = ["_async", "_hasRest", "_index", "_max", "_maxBefore", "_maxAfter", "_min", "_minBefore", "_minAfter", "_missingParameters", "_missingReturn", "_restIndex", "_returnType"], __ks_2 = __ks_1.length, key; __ks_0 < __ks_2; ++__ks_0) {
				key = __ks_1[__ks_0];
				target[key] = source[key];
			}
			target._parameters = [...source._parameters];
			target._errors = [...source._errors];
			return target;
		}
		static clone() {
			const t0 = value => KSType.isClassInstance(value, FunctionType);
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return FunctionType.__ks_sttc_clone_0(arguments[0], arguments[1]);
				}
			}
			return Type.clone.apply(null, arguments);
		}
		static __ks_sttc_fromAST_2(data, node) {
			return FunctionType.fromAST(data, node.__ks_func_scope_0(), true, node);
		}
		static __ks_sttc_fromAST_3(data, scope, defined, node) {
			if(KSType.isValue(data.parameters)) {
				return FunctionType.__ks_new_2(KSHelper.mapArray(data.parameters, function(parameter) {
					return ParameterType.fromAST(parameter, false, scope, defined, node);
				}), data, node);
			}
			else {
				return FunctionType.__ks_new_2([new ParameterType(scope, Type.Any, 0, Infinity)], data, node);
			}
		}
		static fromAST() {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			const t2 = value => KSType.isClassInstance(value, Scope);
			const t3 = KSType.isBoolean;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t1(arguments[1])) {
					return FunctionType.__ks_sttc_fromAST_2(arguments[0], arguments[1]);
				}
			}
			if(arguments.length === 4) {
				if(t0(arguments[0]) && t2(arguments[1]) && t3(arguments[2]) && t1(arguments[3])) {
					return FunctionType.__ks_sttc_fromAST_3(arguments[0], arguments[1], arguments[2], arguments[3]);
				}
			}
			if(Type.fromAST) {
				return Type.fromAST.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_1(index, data, metadata, references, alterations, queue, scope, node) {
			const type = FunctionType.__ks_new_0(scope);
			type._index = KSType.isValue(data.index) ? data.index : -1;
			type._async = data.async;
			type._min = data.min;
			type._max = data.max;
			if(KSType.isValue(data.exhaustive)) {
				type._exhaustive = data.exhaustive;
			}
			queue.push((() => {
				const __ks_rt = (...args) => {
					if(args.length === 0) {
						return __ks_rt.__ks_0.call(this);
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = () => {
					type._errors = KSHelper.mapArray(data.errors, function(__ks_throw_1) {
						return Type.import(__ks_throw_1, metadata, references, alterations, queue, scope, node);
					});
					if(KSType.isValue(data.returns)) {
						type._returnType = Type.import(data.returns, metadata, references, alterations, queue, scope, node);
						type._missingReturn = false;
					}
					type._parameters = KSHelper.mapArray(data.parameters, function(parameter) {
						return ParameterType.import(parameter, metadata, references, alterations, queue, scope, node);
					});
					type.__ks_func_updateParameters_0();
				};
				return __ks_rt;
			})());
			return type;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 8) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2]) && t2(arguments[3]) && t2(arguments[4]) && t1(arguments[5]) && t3(arguments[6]) && t4(arguments[7])) {
					return FunctionType.__ks_sttc_import_1(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(Type.import) {
				return Type.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_isOptional_0(parameters, index, step) {
			if(KSOperator.gte(index, parameters.length)) {
				return true;
			}
			if(KSOperator.lte(step, parameters[index].min())) {
				return false;
			}
			for(let __ks_0 = KSOperator.addOrConcat(index, 1), __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = parameters[__ks_0];
				if(parameter.min() !== 0) {
					return false;
				}
			}
			return true;
		}
		static isOptional() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return FunctionType.__ks_sttc_isOptional_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Type.isOptional) {
				return Type.isOptional.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toQuote_0(parameters) {
			let fragments = "";
			fragments += "(";
			for(let index = 0, __ks_0 = parameters.length, parameter; index < __ks_0; ++index) {
				parameter = parameters[index];
				if(index !== 0) {
					fragments += ", ";
				}
				fragments = KSHelper.concatString(fragments, parameter.toQuote());
			}
			fragments += ")";
			return fragments;
		}
		static toQuote() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return FunctionType.__ks_sttc_toQuote_0(arguments[0]);
				}
			}
			return Type.toQuote.apply(null, arguments);
		}
	}
	class OverloadedFunctionType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(OverloadedFunctionType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._altering = false;
			this._assessment = null;
			this._async = false;
			this._functions = [];
			this._references = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		addFunction() {
			return this.__ks_func_addFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_addFunction_0(type) {
			if(this._functions.length === 0) {
				this._async = type.__ks_func_isAsync_0();
			}
			if(type.__ks_func_index_0() === -1) {
				type.__ks_func_index_1(this._functions.length);
			}
			__ks_Array.__ks_func_pushUniq_0.call(this._references, [type]);
			this._functions.push(type);
			if(type._exhaustive !== null) {
				if(type._exhaustive === true) {
					this._exhaustive = true;
				}
				else if(this._exhaustive === null) {
					this._exhaustive = false;
				}
			}
		}
		__ks_func_addFunction_1(type) {
			if(this._functions.length === 0) {
				this._async = type.__ks_func_isAsync_1();
			}
			__ks_Array.__ks_func_pushUniq_0.call(this._references, [type]);
			for(let __ks_0 = 0, __ks_1 = type.__ks_func_functions_0(), __ks_2 = __ks_1.length, __ks_function_1; __ks_0 < __ks_2; ++__ks_0) {
				__ks_function_1 = __ks_1[__ks_0];
				if(__ks_function_1.index() === -1) {
					__ks_function_1.index(this._functions.length);
				}
				this._functions.push(__ks_function_1);
				if(__ks_function_1._exhaustive !== null) {
					if(__ks_function_1._exhaustive === true) {
						this._exhaustive = true;
					}
					else if(this._exhaustive === null) {
						this._exhaustive = false;
					}
				}
			}
		}
		__ks_func_addFunction_2(type) {
			if(this._functions.length === 0) {
				this._async = type.__ks_func_isAsync_2();
			}
			const fn = FunctionType.__ks_new_1(this._scope, 0);
			fn.addParameter(AnyType.NullableExplicit, null, 0, Infinity);
			fn._missingParameters = true;
			this._functions.push(fn);
			__ks_Array.__ks_func_pushUniq_0.call(this._references, [type]);
		}
		__ks_func_addFunction_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, FunctionType);
			const t1 = value => KSType.isClassInstance(value, OverloadedFunctionType);
			const t2 = value => KSType.isClassInstance(value, ReferenceType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addFunction_0.call(that, args[0]);
				}
				if(t1(args[0])) {
					return proto.__ks_func_addFunction_1.call(that, args[0]);
				}
				if(t2(args[0])) {
					return proto.__ks_func_addFunction_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_addFunction_rt) {
				return super.__ks_func_addFunction_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		assessment() {
			return this.__ks_func_assessment_rt.call(null, this, this, arguments);
		}
		__ks_func_assessment_1(name, node) {
			if(this._assessment === null) {
				this._assessment = Router.assess.__ks_1(this._functions, name, node);
			}
			return this._assessment;
		}
		__ks_func_assessment_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_assessment_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_assessment_rt) {
				return super.__ks_func_assessment_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			throw new NotSupportedException();
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			const functions = [];
			const overloadedMode = ExportMode(mode | ExportMode.OverloadedFunction);
			for(let __ks_0 = 0, __ks_1 = this._references.length, reference; __ks_0 < __ks_1; ++__ks_0) {
				reference = this._references[__ks_0];
				if((reference._referenceIndex === -1) && KSType.isClassInstance(reference, OverloadedFunctionType)) {
					for(let __ks_2 = 0, __ks_3 = reference.__ks_func_functions_0(), __ks_4 = __ks_3.length, fn; __ks_2 < __ks_4; ++__ks_2) {
						fn = __ks_3[__ks_2];
						if(fn.isExportable(mode) === true) {
							functions.push(fn.toExportOrReference(references, indexDelta, overloadedMode, module));
						}
					}
				}
				else if(reference.__ks_func_isExportable_1(mode) === true) {
					functions.push(reference.__ks_func_toExportOrReference_0(references, indexDelta, overloadedMode, module));
				}
			}
			return (() => {
				const d = new Dictionary();
				d.kind = TypeKind.OverloadedFunction;
				d.exhaustive = this.__ks_func_isExhaustive_0();
				d.functions = functions;
				return d;
			})();
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		functions() {
			return this.__ks_func_functions_rt.call(null, this, this, arguments);
		}
		__ks_func_functions_0() {
			return this._functions;
		}
		__ks_func_functions_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_functions_0.call(that);
			}
			if(super.__ks_func_functions_rt) {
				return super.__ks_func_functions_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasFunction() {
			return this.__ks_func_hasFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_hasFunction_0(type) {
			for(let __ks_0 = 0, __ks_1 = this._functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_function_1 = this._functions[__ks_0];
				if(__ks_function_1.__ks_func_equals_0(type)) {
					return true;
				}
			}
			return false;
		}
		__ks_func_hasFunction_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, FunctionType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasFunction_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasFunction_rt) {
				return super.__ks_func_hasFunction_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAsync() {
			return this.__ks_func_isAsync_rt.call(null, this, this, arguments);
		}
		__ks_func_isAsync_1() {
			return this._async;
		}
		__ks_func_isAsync_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAsync_1.call(that);
			}
			if(super.__ks_func_isAsync_rt) {
				return super.__ks_func_isAsync_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isExportable_0() {
			for(let __ks_0 = 0, __ks_1 = this._references.length, reference; __ks_0 < __ks_1; ++__ks_0) {
				reference = this._references[__ks_0];
				if(reference.__ks_func_isExportable_0() === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isExtendable_0() {
			return true;
		}
		__ks_func_isFunction_0() {
			return true;
		}
		__ks_func_isMergeable_0(type) {
			return KSType.isClassInstance(type, OverloadedFunctionType) && (this._async === type.__ks_func_isAsync_1());
		}
		__ks_func_isMorePreciseThan_0(value) {
			if(value.__ks_func_isAny_0() === true) {
				return true;
			}
			return false;
		}
		__ks_func_isSubsetOf_3(value, mode) {
			if((mode & MatchingMode.Exact) !== 0n) {
				return false;
			}
			return value.__ks_func_isFunction_0();
		}
		__ks_func_isSubsetOf_4(value, mode) {
			if((mode & MatchingMode.Exact) !== 0n) {
				return false;
			}
			for(let __ks_0 = 0, __ks_1 = this._functions.length, fn; __ks_0 < __ks_1; ++__ks_0) {
				fn = this._functions[__ks_0];
				if(fn.__ks_func_isSubsetOf_2(value, mode) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isSubsetOf_5(value, mode) {
			if((mode & MatchingMode.Exact) !== 0n) {
				return false;
			}
			let nf = null;
			for(let __ks_0 = 0, __ks_1 = value.__ks_func_functions_0(), __ks_2 = __ks_1.length, fb; __ks_0 < __ks_2; ++__ks_0) {
				fb = __ks_1[__ks_0];
				nf = true;
				for(let __ks_3 = 0, __ks_4 = this._functions.length, fn; __ks_3 < __ks_4 && nf; ++__ks_3) {
					fn = this._functions[__ks_3];
					if(fn.isSubsetOf(fb, mode) === true) {
						nf = false;
					}
				}
				if(nf) {
					return false;
				}
			}
			return true;
		}
		__ks_func_isSubsetOf_6(value, mode) {
			if((mode & MatchingMode.Exact) !== 0n) {
				return false;
			}
			return this.isSubsetOf(value.__ks_func_type_0(), mode);
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, ReferenceType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_3(value, mode);
			}
			if(KSType.isClassInstance(value, FunctionType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_4(value, mode);
			}
			if(KSType.isClassInstance(value, OverloadedFunctionType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_5(value, mode);
			}
			if(KSType.isClassInstance(value, NamedType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_6(value, mode);
			}
			return super.__ks_func_isSubsetOf_0(value, mode);
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, FunctionType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			const t2 = value => KSType.isClassInstance(value, NamedType);
			const t3 = value => KSType.isClassInstance(value, OverloadedFunctionType);
			const t4 = value => KSType.isClassInstance(value, ReferenceType);
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_4.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t2(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_6.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t3(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_5.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t4(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_3.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, Type.prototype, args);
		}
		length() {
			return this.__ks_func_length_rt.call(null, this, this, arguments);
		}
		__ks_func_length_1() {
			return this._functions.length;
		}
		__ks_func_length_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_length_1.call(that);
			}
			if(super.__ks_func_length_rt) {
				return super.__ks_func_length_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		matchArguments() {
			return this.__ks_func_matchArguments_rt.call(null, this, this, arguments);
		}
		__ks_func_matchArguments_1(__ks_arguments_1, node) {
			const assessment = this.__ks_func_assessment_1("", node);
			return KSType.isValue(Router.matchArguments(assessment, __ks_arguments_1, node));
		}
		__ks_func_matchArguments_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_matchArguments_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_matchArguments_rt) {
				return super.__ks_func_matchArguments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		originals() {
			return this.__ks_func_originals_rt.call(null, this, this, arguments);
		}
		__ks_func_originals_0(majorOriginal) {
			if(majorOriginal === void 0) {
				majorOriginal = null;
			}
			this._majorOriginal = majorOriginal;
			this._altering = true;
			return this;
		}
		__ks_func_originals_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type) || KSType.isNull(value);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_originals_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_originals_rt) {
				return super.__ks_func_originals_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			throw new NotImplementedException();
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			throw new NotImplementedException();
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("func", this._functions.length);
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_2(index, data, metadata, references, alterations, queue, scope, node) {
			const type = OverloadedFunctionType.__ks_new_0(scope);
			if(KSType.isValue(data.exhaustive)) {
				type._exhaustive = data.exhaustive;
			}
			queue.push((() => {
				const __ks_rt = (...args) => {
					if(args.length === 0) {
						return __ks_rt.__ks_0.call(this);
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = () => {
					for(let __ks_0 = 0, __ks_1 = data.functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
						__ks_function_1 = data.functions[__ks_0];
						type.addFunction(Type.import(__ks_function_1, metadata, references, alterations, queue, scope, node));
					}
				};
				return __ks_rt;
			})());
			return type;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 8) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2]) && t2(arguments[3]) && t2(arguments[4]) && t1(arguments[5]) && t3(arguments[6]) && t4(arguments[7])) {
					return OverloadedFunctionType.__ks_sttc_import_2(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(Type.import) {
				return Type.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class NamedType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(NamedType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._cloned = false;
			this._container = null;
		}
		__ks_cons_0(name, type) {
			Type.prototype.__ks_cons_rt.call(null, this, [type.__ks_func_scope_0()]);
			this._name = name;
			this._type = type;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return NamedType.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_canBeBoolean_0() {
			return this._type.__ks_func_canBeBoolean_0();
		}
		__ks_func_canBeFunction_1(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return this._type.canBeFunction(any);
		}
		__ks_func_canBeFunction_0(any) {
			return this.__ks_func_canBeFunction_1(any);
		}
		__ks_func_canBeFunction_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_canBeFunction_1.call(that, args[0]);
			}
			return super.__ks_func_canBeFunction_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_canBeNumber_1(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return this._type.canBeNumber(any);
		}
		__ks_func_canBeNumber_0(any) {
			return this.__ks_func_canBeNumber_1(any);
		}
		__ks_func_canBeNumber_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_canBeNumber_1.call(that, args[0]);
			}
			return super.__ks_func_canBeNumber_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_canBeString_1(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return this._type.canBeString(any);
		}
		__ks_func_canBeString_0(any) {
			return this.__ks_func_canBeString_1(any);
		}
		__ks_func_canBeString_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_canBeString_1.call(that, args[0]);
			}
			return super.__ks_func_canBeString_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_clone_1() {
			this._cloned = true;
			return NamedType.__ks_new_0(this._name, this._type.__ks_func_clone_1());
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		container() {
			return this.__ks_func_container_rt.call(null, this, this, arguments);
		}
		__ks_func_container_0() {
			return this._container;
		}
		__ks_func_container_1(container) {
			if(container === void 0) {
				container = null;
			}
			this._container = container;
			return this;
		}
		__ks_func_container_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, NamedContainerType) || KSType.isNull(value);
			if(args.length === 0) {
				return proto.__ks_func_container_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_container_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_container_rt) {
				return super.__ks_func_container_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_discard_0() {
			return this._type.__ks_func_discard_0();
		}
		__ks_func_discardAlias_0() {
			return (this.__ks_func_isAlias_0() === true) ? this._type.__ks_func_discardAlias_0() : this;
		}
		__ks_func_discardName_0() {
			return this._type;
		}
		duplicate() {
			return this.__ks_func_duplicate_rt.call(null, this, this, arguments);
		}
		__ks_func_duplicate_0() {
			return NamedType.__ks_new_0(this._name, this._type);
		}
		__ks_func_duplicate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_duplicate_0.call(that);
			}
			if(super.__ks_func_duplicate_rt) {
				return super.__ks_func_duplicate_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			if(KSType.isClassInstance(this._type, ClassType) && ((this._type.__ks_func_isPredefined_0() === true) || !((this._type.__ks_func_isExported_0() === true) || (this._type.__ks_func_isAlien_0() === true)))) {
				return this._name;
			}
			else {
				return this._type.__ks_func_export_0(references, indexDelta, mode, module);
			}
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_flagAlien_0() {
			this._type.__ks_func_flagAlien_0();
			return this;
		}
		__ks_func_flagAltering_0() {
			this._type.__ks_func_flagAltering_0();
			return this;
		}
		__ks_func_flagExported_0(explicitly) {
			this._type.__ks_func_flagExported_0(explicitly);
			return this;
		}
		__ks_func_flagReferenced_0() {
			this._type.__ks_func_flagReferenced_0();
			return this;
		}
		__ks_func_flagRequired_0() {
			this._type.__ks_func_flagRequired_0();
			return this;
		}
		__ks_func_flagRequirement_0() {
			this._type.__ks_func_flagRequirement_0();
			return this;
		}
		__ks_func_flagSealed_0() {
			this._type.__ks_func_flagSealed_0();
			return this;
		}
		getAlterationReference() {
			return this.__ks_func_getAlterationReference_rt.call(null, this, this, arguments);
		}
		__ks_func_getAlterationReference_0() {
			return this._type.getAlterationReference();
		}
		__ks_func_getAlterationReference_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getAlterationReference_0.call(that);
			}
			if(super.__ks_func_getAlterationReference_rt) {
				return super.__ks_func_getAlterationReference_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getHierarchy() {
			return this.__ks_func_getHierarchy_rt.call(null, this, this, arguments);
		}
		__ks_func_getHierarchy_0() {
			if(KSType.isClassInstance(this._type, ClassType)) {
				return this._type.__ks_func_getHierarchy_1(this._name);
			}
			else {
				return [this._name];
			}
		}
		__ks_func_getHierarchy_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getHierarchy_0.call(that);
			}
			if(super.__ks_func_getHierarchy_rt) {
				return super.__ks_func_getHierarchy_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getMajorReferenceIndex_0() {
			return this._type.__ks_func_getMajorReferenceIndex_0();
		}
		__ks_func_getProperty_0(name) {
			return this._type.__ks_func_getProperty_0(name);
		}
		getSealedName() {
			return this.__ks_func_getSealedName_rt.call(null, this, this, arguments);
		}
		__ks_func_getSealedName_0() {
			return "__ks_" + this._name;
		}
		__ks_func_getSealedName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getSealedName_0.call(that);
			}
			if(super.__ks_func_getSealedName_rt) {
				return super.__ks_func_getSealedName_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getSealedPath() {
			return this.__ks_func_getSealedPath_rt.call(null, this, this, arguments);
		}
		__ks_func_getSealedPath_0() {
			if(KSType.isValue(this._container)) {
				return KSHelper.concatString(this._container.__ks_func_path_0(), ".", this.__ks_func_getSealedName_0());
			}
			else {
				return this.__ks_func_getSealedName_0();
			}
		}
		__ks_func_getSealedPath_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getSealedPath_0.call(that);
			}
			if(super.__ks_func_getSealedPath_rt) {
				return super.__ks_func_getSealedPath_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasContainer() {
			return this.__ks_func_hasContainer_rt.call(null, this, this, arguments);
		}
		__ks_func_hasContainer_0() {
			return KSType.isValue(this._container);
		}
		__ks_func_hasContainer_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasContainer_0.call(that);
			}
			if(super.__ks_func_hasContainer_rt) {
				return super.__ks_func_hasContainer_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_hashCode_0() {
			return "&" + this._name;
		}
		__ks_func_hasProperty_0(name) {
			return this._type.__ks_func_hasProperty_0(name);
		}
		__ks_func_isAlias_0() {
			return this._type.__ks_func_isAlias_0();
		}
		__ks_func_isAlien_0() {
			return this._type.__ks_func_isAlien_0();
		}
		__ks_func_isAltering_0() {
			return this._type.__ks_func_isAltering_0();
		}
		__ks_func_isArray_0() {
			return this._type.__ks_func_isArray_0();
		}
		__ks_func_isAssignableToVariable_2(value, anycast, nullcast, downcast, limited) {
			if(limited === void 0 || limited === null) {
				limited = false;
			}
			if(super.__ks_func_isAssignableToVariable_2(value, anycast, nullcast, downcast)) {
				return true;
			}
			else if(KSType.isClassInstance(value, NamedType)) {
				if(value.__ks_func_isAlias_0() === true) {
					if(this.__ks_func_isAlias_0() === true) {
						return (this._name === value.__ks_func_name_0()) || this.__ks_func_discardAlias_0().__ks_func_isAssignableToVariable_2(value.__ks_func_discardAlias_0(), anycast, nullcast, downcast);
					}
					else {
						return this.__ks_func_isAssignableToVariable_2(value.__ks_func_discardAlias_0(), anycast, nullcast, downcast);
					}
				}
				else if((this._type.__ks_func_isClass_0() === true) && (value.__ks_func_isClass_0() === true)) {
					return (this._name === "Class") || (this.__ks_func_isInheriting_0(value) === true) || (downcast && (value.__ks_func_isInheriting_0(this) === true));
				}
				else if(this._type.__ks_func_isEnum_0() === true) {
					return this._type.__ks_func_type_0().isAssignableToVariable(value, anycast, nullcast, downcast);
				}
				else if((this._type.__ks_func_isStruct_0() === true) && (value.__ks_func_isStruct_0() === true)) {
					return (this._name === "Struct") || (this.__ks_func_isInheriting_0(value) === true) || (downcast && (value.__ks_func_isInheriting_0(this) === true));
				}
				else if((this._type.__ks_func_isTuple_0() === true) && (value.__ks_func_isTuple_0() === true)) {
					return (this._name === "Tuple") || (this.__ks_func_isInheriting_0(value) === true) || (downcast && (value.__ks_func_isInheriting_0(this) === true));
				}
				else {
					return false;
				}
			}
			else if(KSType.isClassInstance(value, ReferenceType)) {
				if(value.__ks_func_name_2() === "Class") {
					return this._type.__ks_func_isClass_0();
				}
				else if(value.__ks_func_name_2() === "Enum") {
					return this._type.__ks_func_isEnum_0();
				}
				else if(value.__ks_func_name_2() === "Namespace") {
					return this._type.__ks_func_isNamespace_0();
				}
				else if(value.__ks_func_name_2() === "Struct") {
					return this._type.__ks_func_isStruct_0();
				}
				else if(value.__ks_func_name_2() === "Tuple") {
					return this._type.__ks_func_isTuple_0();
				}
				else if(this._type.__ks_func_isClass_0() === true) {
					return value.__ks_func_name_2() === "Class";
				}
				else if(this._type.__ks_func_isEnum_0() === true) {
					return value.__ks_func_name_2() === "Enum";
				}
				else if(this._type.__ks_func_isNamespace_0() === true) {
					return value.__ks_func_name_2() === "Namespace";
				}
				else if(this._type.__ks_func_isStruct_0() === true) {
					return value.__ks_func_name_2() === "Struct";
				}
				else if(this._type.__ks_func_isTuple_0() === true) {
					return value.__ks_func_name_2() === "Tuple";
				}
				else {
					return this.isAssignableToVariable(value.__ks_func_type_0(), anycast, nullcast, downcast, limited);
				}
			}
			else if(KSType.isClassInstance(value, UnionType)) {
				for(let __ks_0 = 0, __ks_1 = value.__ks_func_types_1(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
					type = __ks_1[__ks_0];
					if(this.isAssignableToVariable(type.discardReference(), anycast, nullcast, downcast, limited)) {
						return true;
					}
				}
				return false;
			}
			else if(KSType.isClassInstance(value, ExclusionType)) {
				const types = value.__ks_func_types_0();
				if(!this.isAssignableToVariable(types[0].discardReference(), anycast, nullcast, downcast)) {
					return false;
				}
				for(let __ks_0 = 1, __ks_1 = types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = types[__ks_0];
					if(this.isAssignableToVariable(type.discardReference(), anycast, nullcast, downcast)) {
						return false;
					}
				}
				return true;
			}
			else {
				return false;
			}
		}
		__ks_func_isBoolean_0() {
			return this._type.__ks_func_isBoolean_0();
		}
		__ks_func_isCloned_0() {
			return this._cloned;
		}
		__ks_func_isClass_0() {
			return this._type.__ks_func_isClass_0();
		}
		__ks_func_isComparableWith_0(type) {
			return this._type.__ks_func_isComparableWith_0(type);
		}
		__ks_func_isDictionary_0() {
			return this._type.__ks_func_isDictionary_0();
		}
		__ks_func_isEnum_0() {
			return this._type.__ks_func_isEnum_0();
		}
		__ks_func_isExclusion_0() {
			return this._type.__ks_func_isExclusion_0();
		}
		__ks_func_isExhaustive_0() {
			return this._type.__ks_func_isExhaustive_0();
		}
		__ks_func_isExhaustive_1(node) {
			return (this.__ks_func_isExhaustive_0() === true) && !(node._options.rules.ignoreMisfit === true);
		}
		__ks_func_isExplicit_0() {
			return true;
		}
		__ks_func_isExplicitlyExported_0() {
			return this._type.__ks_func_isExplicitlyExported_0();
		}
		__ks_func_isExportable_0() {
			return this._type.__ks_func_isExportable_0();
		}
		__ks_func_isExported_0() {
			return this._type.__ks_func_isExported_0();
		}
		__ks_func_isExportingFragment_0() {
			return this._type.__ks_func_isExportingFragment_0();
		}
		__ks_func_isExtendable_0() {
			return this._type.__ks_func_isExtendable_0();
		}
		__ks_func_isFlexible_0() {
			return this._type.__ks_func_isFlexible_0();
		}
		__ks_func_isHybrid_0() {
			return this._type.__ks_func_isHybrid_0();
		}
		isInheriting() {
			return this.__ks_func_isInheriting_rt.call(null, this, this, arguments);
		}
		__ks_func_isInheriting_0(superclass) {
			let name = superclass.__ks_func_name_0();
			let that = this;
			while(that.__ks_func_type_0().isExtending() === true) {
				that = that.__ks_func_type_0().extends();
				if(that.__ks_func_name_0() === name) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isInheriting_1(superclass) {
			if(!(superclass.__ks_func_isInstance_0() === true)) {
				return false;
			}
			return this.isInheriting(superclass.__ks_func_type_0());
		}
		__ks_func_isInheriting_2(superclass) {
			return false;
		}
		__ks_func_isInheriting_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, NamedType);
			const t1 = value => KSType.isClassInstance(value, ReferenceType);
			const t2 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInheriting_0.call(that, args[0]);
				}
				if(t1(args[0])) {
					return proto.__ks_func_isInheriting_1.call(that, args[0]);
				}
				if(t2(args[0])) {
					return proto.__ks_func_isInheriting_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInheriting_rt) {
				return super.__ks_func_isInheriting_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInstanceOf() {
			return this.__ks_func_isInstanceOf_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstanceOf_1(value) {
			return this._type.isInstanceOf(value);
		}
		__ks_func_isInstanceOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInstanceOf_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInstanceOf_rt) {
				return super.__ks_func_isInstanceOf_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isMorePreciseThan_0(value) {
			if(KSType.isClassInstance(value, NamedType)) {
				if((this.__ks_func_isClass_0() === true) && (value.__ks_func_isClass_0() === true)) {
					return (this._name !== value.__ks_func_name_0()) && (this.__ks_func_matchInheritanceOf_0(value) === true);
				}
				else if(value.__ks_func_isAlias_0() === true) {
					return this.__ks_func_isMorePreciseThan_0(value.__ks_func_discardAlias_0());
				}
			}
			else if(KSType.isClassInstance(value, UnionType)) {
				for(let __ks_0 = 0, __ks_1 = value.__ks_func_types_1(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
					type = __ks_1[__ks_0];
					if(this.__ks_func_matchContentOf_0(value)) {
						return true;
					}
				}
				return false;
			}
			return false;
		}
		__ks_func_isNamed_0() {
			return true;
		}
		__ks_func_isNamespace_0() {
			return this._type.__ks_func_isNamespace_0();
		}
		__ks_func_isNative_0() {
			return $natives[this._name] === true;
		}
		__ks_func_isNullable_0() {
			return this._type.__ks_func_isNullable_0();
		}
		__ks_func_isNumber_0() {
			return this._type.__ks_func_isNumber_0();
		}
		__ks_func_isPredefined_0() {
			return this._type.__ks_func_isPredefined_0();
		}
		__ks_func_isReducible_0() {
			return true;
		}
		__ks_func_isReferenced_0() {
			return this._type.__ks_func_isReferenced_0();
		}
		__ks_func_isRequired_0() {
			return this._type.__ks_func_isRequired_0();
		}
		__ks_func_isRequirement_0() {
			return this._type.__ks_func_isRequirement_0();
		}
		__ks_func_isSealable_0() {
			return this._type.__ks_func_isSealable_0();
		}
		__ks_func_isSealed_0() {
			return this._type.__ks_func_isSealed_0();
		}
		__ks_func_isSealedAlien_0() {
			return this._type.__ks_func_isSealedAlien_0();
		}
		__ks_func_isString_0() {
			return this._type.__ks_func_isString_0();
		}
		__ks_func_isStruct_0() {
			return this._type.__ks_func_isStruct_0();
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(this === value) {
				return true;
			}
			else if(((mode & MatchingMode.Exact) !== 0n) && ((mode & MatchingMode.Subclass) === 0n)) {
				return false;
			}
			else {
				if(value.__ks_func_isAny_0() === true) {
					return true;
				}
				else if(value.__ks_func_isVoid_0() === true) {
					return false;
				}
				else if(KSType.isClassInstance(value, NamedType)) {
					if(KSType.isClassInstance(this._type, ClassType) && KSType.isClassInstance(value.__ks_func_type_0(), ClassType)) {
						if((value.__ks_func_isSystemic_0() === true) && !(this._type.__ks_func_isSystemic_0() === true)) {
							return false;
						}
						else if((value.__ks_func_isSealed_0() === true) && !(this._type.__ks_func_isSealed_0() === true)) {
							return false;
						}
						else if((this._type.__ks_func_isPredefined_0() === true) && (value.__ks_func_isPredefined_0() === true)) {
							return this._scope.isRenamed(this._name, value.__ks_func_name_0(), value.__ks_func_scope_0(), mode);
						}
						else {
							return this._type.isSubsetOf(value.__ks_func_type_0(), MatchingMode(mode | MatchingMode.Subclass));
						}
					}
					else if(KSType.isClassInstance(value.__ks_func_type_0(), EnumType)) {
						if(KSType.isClassInstance(this._type, EnumType)) {
							return this._scope.isRenamed(this._name, value.__ks_func_name_0(), value.__ks_func_scope_0(), mode);
						}
						else {
							return this.isSubsetOf(value.__ks_func_type_0().type(), mode);
						}
					}
					else if(KSType.isClassInstance(value.__ks_func_type_0(), ClassType) && (value.__ks_func_name_0() === "Enum")) {
						return this.__ks_func_isEnum_0();
					}
					else if(value.__ks_func_isAlias_0() === true) {
						if(this.__ks_func_isAlias_0() === true) {
							return (this._scope.isRenamed(this._name, value.__ks_func_name_0(), value.__ks_func_scope_0(), mode) === true) || (this.__ks_func_discardAlias_0().__ks_func_isSubsetOf_0(value.__ks_func_discardAlias_0(), mode) === true);
						}
						else {
							return this.__ks_func_isSubsetOf_0(value.__ks_func_discardAlias_0(), mode);
						}
					}
					else {
						return this._type.isSubsetOf(value.__ks_func_type_0(), mode);
					}
				}
				else if(this.__ks_func_isAlias_0() === true) {
					return this.__ks_func_discardAlias_0().__ks_func_isSubsetOf_0(value, mode);
				}
				else if(KSType.isClassInstance(value, UnionType)) {
					for(let __ks_0 = 0, __ks_1 = value.__ks_func_types_1(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
						type = __ks_1[__ks_0];
						if(this.isSubsetOf(type, mode) === true) {
							return true;
						}
					}
					return false;
				}
				else if(KSType.isClassInstance(value, ReferenceType)) {
					return (this._scope.isRenamed(this._name, value.__ks_func_name_2(), value.__ks_func_scope_0(), mode) === true) || (this.isSubsetOf(value.__ks_func_discardReference_0(), mode) === true);
				}
				else {
					return this._type.__ks_func_isSubsetOf_0(value, mode);
				}
			}
		}
		__ks_func_isSystemic_0() {
			return this._type.__ks_func_isSystemic_0();
		}
		__ks_func_isTuple_0() {
			return this._type.__ks_func_isTuple_0();
		}
		__ks_func_isTypeOf_0() {
			return $typeofs[this._name];
		}
		__ks_func_isUnion_0() {
			return this._type.__ks_func_isUnion_0();
		}
		__ks_func_isVirtual_0() {
			return $virtuals[this._name];
		}
		majorOriginal() {
			return this.__ks_func_majorOriginal_rt.call(null, this, this, arguments);
		}
		__ks_func_majorOriginal_0() {
			return this._type.majorOriginal();
		}
		__ks_func_majorOriginal_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_majorOriginal_0.call(that);
			}
			if(super.__ks_func_majorOriginal_rt) {
				return super.__ks_func_majorOriginal_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		matchClassName() {
			return this.__ks_func_matchClassName_rt.call(null, this, this, arguments);
		}
		__ks_func_matchClassName_0(that) {
			if(that === void 0) {
				that = null;
			}
			if(that === null) {
				return false;
			}
			else if(KSType.isClassInstance(that, NamedType)) {
				if(KSType.isClassInstance(this._type, ClassType) && KSType.isClassInstance(that.__ks_func_type_0(), ClassType)) {
					return this._name === that.__ks_func_name_0();
				}
			}
			else if(KSType.isClassInstance(that, ReferenceType)) {
				return (this._name === that.__ks_func_name_2()) || (this.__ks_func_matchClassName_0(that.__ks_func_discardReference_0()) === true);
			}
			return false;
		}
		__ks_func_matchClassName_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type) || KSType.isNull(value);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_matchClassName_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_matchClassName_rt) {
				return super.__ks_func_matchClassName_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_matchContentOf_0(value) {
			if(value === void 0) {
				value = null;
			}
			if(value === null) {
				return false;
			}
			else if(value.__ks_func_isAny_0() === true) {
				return true;
			}
			else if((this._name === "Object") && KSType.isClassInstance(this._type, ClassType)) {
				return this._scope.module().getPredefined("Object").matchContentOf(value);
			}
			else if(KSType.isClassInstance(value, NamedType)) {
				if((value.__ks_func_name_0() === "Object") && KSType.isClassInstance(value.__ks_func_type_0(), ClassType)) {
					return this.matchContentOf(this._scope.module().getPredefined("Object"));
				}
				else if(KSType.isClassInstance(this._type, ClassType) && KSType.isClassInstance(value.__ks_func_type_0(), ClassType)) {
					return this.__ks_func_matchInheritanceOf_0(value);
				}
				else if(KSType.isClassInstance(value.__ks_func_type_0(), EnumType)) {
					if(KSType.isClassInstance(this._type, EnumType)) {
						return this._name === value.__ks_func_name_0();
					}
					else {
						return this.matchContentOf(value.__ks_func_type_0());
					}
				}
				else if(KSType.isClassInstance(value.__ks_func_type_0(), StructType)) {
					if(KSType.isClassInstance(this._type, StructType)) {
						return this.__ks_func_matchInheritanceOf_0(value);
					}
					else {
						return this._type.matchContentOf(value.__ks_func_type_0());
					}
				}
				else if(KSType.isClassInstance(value.__ks_func_type_0(), TupleType)) {
					if(KSType.isClassInstance(this._type, TupleType)) {
						return this.__ks_func_matchInheritanceOf_0(value);
					}
					else {
						return this._type.matchContentOf(value.__ks_func_type_0());
					}
				}
				else if(value.__ks_func_isAlias_0() === true) {
					if(this.__ks_func_isAlias_0() === true) {
						return (this._name === value.__ks_func_name_0()) || this._type.__ks_func_discardAlias_0().__ks_func_matchContentOf_0(value.__ks_func_discardAlias_0());
					}
					else {
						return this.__ks_func_matchContentOf_0(value.__ks_func_discardAlias_0());
					}
				}
				else {
					return this._type.__ks_func_matchContentOf_0(value);
				}
			}
			else if(this.__ks_func_isAlias_0() === true) {
				return this._type.__ks_func_discardAlias_0().__ks_func_matchContentOf_0(value);
			}
			else if(KSType.isClassInstance(value, UnionType)) {
				for(let __ks_0 = 0, __ks_1 = value.__ks_func_types_1(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
					type = __ks_1[__ks_0];
					if(this.matchContentOf(type)) {
						return true;
					}
				}
				return false;
			}
			else if(KSType.isClassInstance(value, ExclusionType)) {
				const types = value.__ks_func_types_0();
				if(!this.matchContentOf(types[0])) {
					return false;
				}
				for(let __ks_0 = 1, __ks_1 = types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = types[__ks_0];
					if(this.matchContentOf(type)) {
						return false;
					}
				}
				return true;
			}
			else if(KSType.isClassInstance(value, ReferenceType)) {
				return (this._name === value.__ks_func_name_2()) || this.__ks_func_matchContentOf_0(value.__ks_func_discardReference_0());
			}
			else if(KSType.isClassInstance(value, DictionaryType)) {
				return this._name === "Dictionary";
			}
			else {
				return this._type.__ks_func_matchContentOf_0(value);
			}
		}
		matchInheritanceOf() {
			return this.__ks_func_matchInheritanceOf_rt.call(null, this, this, arguments);
		}
		__ks_func_matchInheritanceOf_0(base) {
			const basename = base.name();
			if(this._name === basename) {
				return true;
			}
			let that = this;
			while(that.__ks_func_type_0().isExtending() === true) {
				that = that.__ks_func_type_0().extends();
				if(that.__ks_func_name_0() === basename) {
					return true;
				}
			}
			return false;
		}
		__ks_func_matchInheritanceOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_matchInheritanceOf_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_matchInheritanceOf_rt) {
				return super.__ks_func_matchInheritanceOf_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		metaReference() {
			return this.__ks_func_metaReference_rt.call(null, this, this, arguments);
		}
		__ks_func_metaReference_0(references, indexDelta, mode, module) {
			if(KSType.isClassInstance(this._type, ClassType) || KSType.isClassInstance(this._type, StructType) || KSType.isClassInstance(this._type, TupleType)) {
				return this._type.metaReference(references, indexDelta, mode, module, this._name);
			}
			else {
				throw new NotSupportedException();
			}
		}
		__ks_func_metaReference_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_metaReference_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_metaReference_rt) {
				return super.__ks_func_metaReference_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_minorOriginal_0() {
			return this._type.__ks_func_minorOriginal_0();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_0() {
			return this._name;
		}
		__ks_func_name_1(name) {
			this._name = name;
			return this;
		}
		__ks_func_name_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 0) {
				return proto.__ks_func_name_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_name_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_origin_0() {
			return this._type.__ks_func_origin_0();
		}
		__ks_func_origin_2(origin) {
			return this._type.origin(origin);
		}
		__ks_func_origin_1(origin) {
			return this.__ks_func_origin_2(origin);
		}
		__ks_func_origin_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 0) {
				return proto.__ks_func_origin_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_origin_2.call(that, args[0]);
				}
			}
			return super.__ks_func_origin_rt.call(null, that, Type.prototype, args);
		}
		originals() {
			return this.__ks_func_originals_rt.call(null, this, this, arguments);
		}
		__ks_func_originals_1(originals) {
			this._type.originals(...originals);
			return this;
		}
		__ks_func_originals_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return proto.__ks_func_originals_1.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			if(super.__ks_func_originals_rt) {
				return super.__ks_func_originals_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameter() {
			return this.__ks_func_parameter_rt.call(null, this, this, arguments);
		}
		__ks_func_parameter_1() {
			return this._type.parameter();
		}
		__ks_func_parameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameter_1.call(that);
			}
			if(super.__ks_func_parameter_rt) {
				return super.__ks_func_parameter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		path() {
			return this.__ks_func_path_rt.call(null, this, this, arguments);
		}
		__ks_func_path_0() {
			if(KSType.isValue(this._container)) {
				return KSHelper.concatString(this._container.__ks_func_path_0(), ".", this._name);
			}
			else {
				return this._name;
			}
		}
		__ks_func_path_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_path_0.call(that);
			}
			if(super.__ks_func_path_rt) {
				return super.__ks_func_path_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_reduce_0(type) {
			if(this._type.__ks_func_isReducible_0() === true) {
				return this._type.__ks_func_reduce_0(type);
			}
			else {
				return this;
			}
		}
		__ks_func_referenceIndex_0() {
			return this._type.__ks_func_referenceIndex_0();
		}
		__ks_func_resetReferences_0() {
			return this._type.__ks_func_resetReferences_0();
		}
		setAlterationReference() {
			return this.__ks_func_setAlterationReference_rt.call(null, this, this, arguments);
		}
		__ks_func_setAlterationReference_0(type) {
			return this._type.setAlterationReference(type);
		}
		__ks_func_setAlterationReference_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setAlterationReference_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_setAlterationReference_rt) {
				return super.__ks_func_setAlterationReference_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_split_0(types) {
			if((this._type.__ks_func_isAlias_0() === true) || (this._type.__ks_func_isUnion_0() === true)) {
				this._type.__ks_func_split_0(types);
			}
			else if(this.__ks_func_isNullable_0() === true) {
				__ks_Array.__ks_func_pushUniq_0.call(types, [this.__ks_func_setNullable_0(false), Type.Null]);
			}
			else {
				__ks_Array.__ks_func_pushUniq_0.call(types, [this]);
			}
			return types;
		}
		toAlterationReference() {
			return this.__ks_func_toAlterationReference_rt.call(null, this, this, arguments);
		}
		__ks_func_toAlterationReference_0(references, indexDelta, mode, module) {
			if(KSType.isClassInstance(this._type, ClassType)) {
				return this._type.__ks_func_toAlterationReference_1(references, indexDelta, mode, module);
			}
			else {
				throw new NotSupportedException();
			}
		}
		__ks_func_toAlterationReference_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_toAlterationReference_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_toAlterationReference_rt) {
				return super.__ks_func_toAlterationReference_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toCastFragments() {
			return this.__ks_func_toCastFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toCastFragments_0(fragments) {
			this._type.toCastFragments(fragments);
		}
		__ks_func_toCastFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toCastFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toCastFragments_rt) {
				return super.__ks_func_toCastFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toExportFragment_0(fragments, name, variable) {
			if(this._type.__ks_func_isExportingFragment_0() === true) {
				super.__ks_func_toExportFragment_0(fragments, name, variable);
			}
		}
		__ks_func_toExportOrIndex_0(references, indexDelta, mode, module) {
			return this._type.__ks_func_toExportOrIndex_0(references, indexDelta, mode, module);
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toMetadata_0(references, indexDelta, mode, module) {
			return this._type.__ks_func_toMetadata_0(references, indexDelta, mode, module);
		}
		__ks_func_toQuote_0() {
			return this._name;
		}
		__ks_func_toReference_0(references, indexDelta, mode, module) {
			if(KSType.isClassInstance(this._type, ClassType) && (this._type.__ks_func_isPredefined_0() === true)) {
				return this._name;
			}
			else {
				return this._type.__ks_func_toReference_0(references, indexDelta, mode, module);
			}
		}
		__ks_func_toNegativeTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			let tof = $runtime.typeof.__ks_0(this._name, node);
			if(KSType.isValue(tof)) {
				fragments.code(KSHelper.concatString("!", tof, "(")).compile(node).code(")");
			}
			else {
				this._type.__ks_func_toNegativeTestFragments_0(fragments, node, junction);
			}
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			let tof = $runtime.typeof.__ks_0(this._name, node);
			if(KSType.isValue(tof)) {
				fragments.code(KSHelper.concatString(tof, "(")).compile(node).code(")");
			}
			else {
				this._type.__ks_func_toPositiveTestFragments_0(fragments, node, junction);
			}
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toRequiredMetadata_0(requirements) {
			return this._type.__ks_func_toRequiredMetadata_0(requirements);
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("named", this._name);
			this._type.__ks_func_toVariations_0(variations);
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_unflagAltering_0() {
			this._type.__ks_func_unflagAltering_0();
			return this;
		}
		walk() {
			return this.__ks_func_walk_rt.call(null, this, this, arguments);
		}
		__ks_func_walk_0(fn) {
			if(KSType.isClassInstance(this._type, DictionaryType) || KSType.isClassInstance(this._type, NamespaceType)) {
				this._type.walk(fn);
			}
			else {
				throw new NotSupportedException();
			}
		}
		__ks_func_walk_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_walk_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_walk_rt) {
				return super.__ks_func_walk_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class NamedContainerType extends NamedType {
		static __ks_new_0(...args) {
			const o = Object.create(NamedContainerType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._properties = new Dictionary();
		}
		__ks_cons_0(name, type) {
			NamedType.prototype.__ks_cons_0.call(this, name, type);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return NamedContainerType.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		addProperty() {
			return this.__ks_func_addProperty_rt.call(null, this, this, arguments);
		}
		__ks_func_addProperty_0(name, property) {
			if(KSType.isClassInstance(property, NamedType)) {
				property = property.__ks_func_duplicate_0().container(this);
			}
			this._type.addProperty(name, property);
			this._properties[name] = property;
		}
		__ks_func_addProperty_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addProperty_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addProperty_rt) {
				return super.__ks_func_addProperty_rt.call(null, that, NamedType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getProperty_0(name) {
			let property, __ks_0;
			if(KSType.isClassInstance(this._properties[name], Type)) {
				return this._properties[name];
			}
			else if(KSType.isValue(__ks_0 = this._type.__ks_func_getProperty_0(name)) ? (property = __ks_0, true) : false) {
				if(KSType.isClassInstance(property, NamedType)) {
					property = property.__ks_func_duplicate_0().container(this);
				}
				this._properties[name] = property;
				return property;
			}
			else {
				return null;
			}
		}
		__ks_func_hasProperty_0(name) {
			return this._type.__ks_func_hasProperty_0(name);
		}
		__ks_func_matchContentOf_0(value) {
			if(value === void 0) {
				value = null;
			}
			if(value === null) {
				return false;
			}
			else if(value.__ks_func_isAny_0() === true) {
				return true;
			}
			else if(KSType.isClassInstance(value, NamedContainerType)) {
				return this._name === value.__ks_func_name_0();
			}
			else if(KSType.isClassInstance(value, UnionType)) {
				for(let __ks_0 = 0, __ks_1 = value.__ks_func_types_1(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
					type = __ks_1[__ks_0];
					if(this.matchContentOf(type)) {
						return true;
					}
				}
				return false;
			}
			else if(KSType.isClassInstance(value, ExclusionType)) {
				const types = value.__ks_func_types_0();
				if(!this.matchContentOf(types[0])) {
					return false;
				}
				for(let __ks_0 = 1, __ks_1 = types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = types[__ks_0];
					if(this.matchContentOf(type)) {
						return false;
					}
				}
				return true;
			}
			else if(KSType.isClassInstance(value, ReferenceType)) {
				return (this._name === value.__ks_func_name_2()) || this.__ks_func_matchContentOf_0(value.__ks_func_discardReference_0());
			}
			else {
				return this._type.__ks_func_matchContentOf_0(value);
			}
		}
	}
	const $weightTOFs = (() => {
		const d = new Dictionary();
		d.Array = 1;
		d.Boolean = 2;
		d.Class = 12;
		d.Dictionary = 10;
		d.Enum = 4;
		d.Function = 3;
		d.Namespace = 8;
		d.Number = 5;
		d.Object = 12;
		d.Primitive = 7;
		d.RegExp = 9;
		d.String = 6;
		d.Struct = 11;
		d.Tuple = 11;
		return d;
	})();
	class ReferenceType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(ReferenceType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._predefined = false;
			this._spread = false;
		}
		__ks_cons_0(scope, name, explicitlyNull, parameters) {
			if(scope === void 0) {
				scope = null;
			}
			if(explicitlyNull === void 0 || explicitlyNull === null) {
				explicitlyNull = false;
			}
			if(parameters === void 0 || parameters === null) {
				parameters = [];
			}
			Type.prototype.__ks_cons_0.call(this, scope);
			this._explicitlyNull = explicitlyNull;
			this._parameters = parameters;
			this._name = KSType.isValue($types[name]) ? $types[name] : name;
			this._nullable = this._explicitlyNull;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t1 = KSType.isString;
			const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t3 = value => KSType.isArray(value, value => KSType.isClassInstance(value, Type)) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 4) {
				if(t0(args[0]) && t1(args[1]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && KSHelper.isVarargs(args, 0, 1, t3, pts, 1) && te(pts, 2)) {
					return ReferenceType.prototype.__ks_cons_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_canBeBoolean_0() {
			return (this.__ks_func_isUnion_0() === true) ? this._type.__ks_func_canBeBoolean_0() : super.__ks_func_canBeBoolean_0();
		}
		__ks_func_canBeFunction_2(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return (this.__ks_func_isUnion_0() === true) ? this._type.canBeFunction(any) : super.__ks_func_canBeFunction_rt.call(null, this, Type.prototype, [any]);
		}
		__ks_func_canBeFunction_0(any) {
			return this.__ks_func_canBeFunction_2(any);
		}
		__ks_func_canBeFunction_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_canBeFunction_2.call(that, args[0]);
			}
			return super.__ks_func_canBeFunction_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_canBeNumber_2(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return (this.__ks_func_isUnion_0() === true) ? this._type.canBeNumber(any) : super.__ks_func_canBeNumber_rt.call(null, this, Type.prototype, [any]);
		}
		__ks_func_canBeNumber_0(any) {
			return this.__ks_func_canBeNumber_2(any);
		}
		__ks_func_canBeNumber_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_canBeNumber_2.call(that, args[0]);
			}
			return super.__ks_func_canBeNumber_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_canBeString_2(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return (this.__ks_func_isUnion_0() === true) ? this._type.canBeString(any) : super.__ks_func_canBeString_rt.call(null, this, Type.prototype, [any]);
		}
		__ks_func_canBeString_0(any) {
			return this.__ks_func_canBeString_2(any);
		}
		__ks_func_canBeString_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_canBeString_2.call(that, args[0]);
			}
			return super.__ks_func_canBeString_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_clone_1() {
			throw new NotSupportedException();
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_compareTo_0(value) {
			if(this === value) {
				return 0;
			}
			else if(this.__ks_func_matchContentOf_0(value)) {
				return -1;
			}
			else if(value.__ks_func_matchContentOf_0(this)) {
				return 1;
			}
			else if(this.__ks_func_isTypeOf_0()) {
				if(value.__ks_func_isTypeOf_0() === true) {
					return KSOperator.subtraction($weightTOFs[this._name], $weightTOFs[value.name()]);
				}
				else if(value.__ks_func_discardReference_0().__ks_func_isClass_0() === true) {
					return -1;
				}
				else {
					return 1;
				}
			}
			else if(this.__ks_func_type_0().isClass() === true) {
				if(value.__ks_func_isTypeOf_0() === true) {
					return 1;
				}
				else if(value.__ks_func_discardReference_0().__ks_func_isClass_0() === true) {
					return KSHelper.compareString(this._type.name(), value.__ks_func_discardReference_0().name());
				}
				else {
					return 1;
				}
			}
			else {
				return -1;
			}
		}
		compareToRef() {
			return this.__ks_func_compareToRef_rt.call(null, this, this, arguments);
		}
		__ks_func_compareToRef_0(value, equivalences = null) {
			if(this.__ks_func_isAny_0() === true) {
				if(this._nullable === value.__ks_func_isNullable_0()) {
					return 0;
				}
				else if(this._nullable) {
					return 1;
				}
				else {
					return -1;
				}
			}
			else {
				return -1;
			}
		}
		__ks_func_compareToRef_1(value, equivalences = null) {
			if(this.__ks_func_isNull_0() === true) {
				return 0;
			}
			else {
				return -1;
			}
		}
		__ks_func_compareToRef_2(value, equivalences = null) {
			if(this._name === value.__ks_func_name_2()) {
				if(this.__ks_func_isNullable_0() !== value.__ks_func_isNullable_0()) {
					return this._nullable ? 1 : -1;
				}
				if(this._parameters.length === 0) {
					if(value.__ks_func_hasParameters_0() === true) {
						return -1;
					}
					else {
						return 0;
					}
				}
				return this._parameters[0].compareTo(value.__ks_func_parameter_2(0));
			}
			if(this.__ks_func_isTypeOf_0()) {
				if(value.__ks_func_type_0().isEnum() === true) {
					const name = value.__ks_func_discard_0().__ks_func_type_0().name();
					return KSOperator.subtraction($weightTOFs[this._name], $weightTOFs[name]);
				}
				if(this.__ks_func_isNullable_0() !== value.__ks_func_isNullable_0()) {
					return this._nullable ? 1 : -1;
				}
				if(value.__ks_func_isTypeOf_0()) {
					if(this.__ks_func_hasParameters_0() === true) {
						if(value.__ks_func_hasParameters_0() === true) {
							return KSOperator.subtraction($weightTOFs[this._name], $weightTOFs[value.__ks_func_name_2()]);
						}
						else {
							return 1;
						}
					}
					else if(value.__ks_func_hasParameters_0() === true) {
						return -1;
					}
					else {
						return KSOperator.subtraction($weightTOFs[this._name], $weightTOFs[value.__ks_func_name_2()]);
					}
				}
				if(this.__ks_func_hasParameters_0() === true) {
					if(value.__ks_func_hasParameters_0() === true) {
						return -1;
					}
					else {
						return 1;
					}
				}
				return -1;
			}
			if(value.__ks_func_isTypeOf_0()) {
				if(this.__ks_func_type_0().isEnum() === true) {
					const name = this.__ks_func_discard_0().__ks_func_type_0().name();
					return KSOperator.subtraction($weightTOFs[this._name], $weightTOFs[name]);
				}
				if(this.__ks_func_isNullable_0() !== value.__ks_func_isNullable_0()) {
					return this._nullable ? 1 : -1;
				}
				if(value.__ks_func_hasParameters_0() === true) {
					if(this.__ks_func_hasParameters_0() === true) {
						return 1;
					}
					else {
						return -1;
					}
				}
				return 1;
			}
			const valType = value.__ks_func_type_0();
			if(((this.__ks_func_type_0().isClass() === true) && (valType.isClass() === true)) || ((this._type.__ks_func_isStruct_0() === true) && (valType.isStruct() === true)) || ((this._type.__ks_func_isTuple_0() === true) && (valType.isTuple() === true))) {
				if(this._type.isInheriting(valType) === true) {
					return -1;
				}
				else if(valType.isInheriting(this._type) === true) {
					return 1;
				}
				else if(this.__ks_func_isNullable_0() !== value.__ks_func_isNullable_0()) {
					return this._nullable ? 1 : -1;
				}
			}
			if(KSType.isValue(equivalences)) {
				if(equivalences.length === 0) {
					equivalences.push([this.__ks_func_hashCode_0(), value.__ks_func_hashCode_0()]);
				}
				else {
					const tHash = this.__ks_func_hashCode_0();
					const vHash = value.__ks_func_hashCode_0();
					let nf = true;
					for(let __ks_0 = 0, __ks_1 = equivalences.length, eq; __ks_0 < __ks_1 && nf; ++__ks_0) {
						eq = equivalences[__ks_0];
						if(__ks_Array.__ks_func_contains_0.call(eq, tHash)) {
							__ks_Array.__ks_func_pushUniq_0.call(eq, [vHash]);
							nf = false;
						}
						else if(__ks_Array.__ks_func_contains_0.call(eq, vHash)) {
							__ks_Array.__ks_func_pushUniq_0.call(eq, [tHash]);
							nf = false;
						}
					}
					if(nf) {
						equivalences.push([tHash, vHash]);
					}
				}
			}
			return KSHelper.compareString(this._type.name(), valType.name());
		}
		__ks_func_compareToRef_3(value) {
			return -1;
		}
		__ks_func_compareToRef_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, AnyType);
			const t1 = value => KSType.isClassInstance(value, NullType);
			const t2 = value => KSType.isClassInstance(value, ReferenceType);
			const t3 = value => KSType.isClassInstance(value, UnionType);
			const t4 = value => KSType.isArray(value, value => KSType.isArray(value, KSType.isString)) || KSType.isNull(value);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_compareToRef_0.call(that, args[0], void 0);
				}
				if(t1(args[0])) {
					return proto.__ks_func_compareToRef_1.call(that, args[0], void 0);
				}
				if(t2(args[0])) {
					return proto.__ks_func_compareToRef_2.call(that, args[0], void 0);
				}
				if(t3(args[0])) {
					return proto.__ks_func_compareToRef_3.call(that, args[0]);
				}
			}
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t4(args[1])) {
						return proto.__ks_func_compareToRef_0.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t1(args[0])) {
					if(t4(args[1])) {
						return proto.__ks_func_compareToRef_1.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t2(args[0]) && t4(args[1])) {
					return proto.__ks_func_compareToRef_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_compareToRef_rt) {
				return super.__ks_func_compareToRef_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_discard_0() {
			let __ks_0;
			return KSType.isValue(__ks_0 = this.__ks_func_discardReference_0()) ? __ks_0.__ks_func_discard_0() : null;
		}
		__ks_func_discardAlias_0() {
			let variable, __ks_0;
			if(this._name === "Any") {
				return Type.Any;
			}
			else if((KSType.isValue(__ks_0 = this._scope.__ks_func_getVariable_0(this._name)) ? (variable = __ks_0, true) : false) && (!KSType.isClassInstance(variable.__ks_func_getRealType_0(), ReferenceType) || (variable.__ks_func_name_0() !== this._name) || (variable.scope() !== this._scope))) {
				return variable.__ks_func_getRealType_0().discardAlias();
			}
			else {
				return this;
			}
		}
		__ks_func_discardReference_0() {
			let variable, type, __ks_0;
			if(this._name === "Any") {
				return this._nullable ? AnyType.NullableExplicit : AnyType.Explicit;
			}
			else if((KSType.isValue(__ks_0 = this._scope.__ks_func_getVariable_0(this._name, -1)) ? (variable = __ks_0, true) : false) && (KSType.isValue(__ks_0 = variable.__ks_func_getRealType_0()) ? (type = __ks_0, true) : false) && (!KSType.isClassInstance(type, ReferenceType) || (variable.__ks_func_name_0() !== this._name) || (type.__ks_func_scope_0() !== this._scope))) {
				return type.discardReference();
			}
			else {
				return null;
			}
		}
		__ks_func_discardSpread_0() {
			if(this._spread) {
				if(KSType.isValue(this._parameters) ? this._parameters.length > 0 : false) {
					return this._parameters[0];
				}
				else {
					return AnyType.NullableUnexplicit;
				}
			}
			else {
				return this;
			}
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			if(this._parameters.length === 0) {
				return this._nullable ? this._name + "?" : this._name;
			}
			else {
				const __ks_export_1 = (() => {
					const d = new Dictionary();
					d.kind = TypeKind.Reference;
					d.name = this._name;
					return d;
				})();
				if(this._explicitlyNull) {
					__ks_export_1.nullable = this._explicitlyNull;
				}
				if(this._parameters.length !== 0) {
					__ks_export_1.parameters = KSHelper.mapArray(this._parameters, function(parameter) {
						return parameter.__ks_func_toGenericParameter_0(references, indexDelta, mode, module);
					});
				}
				return __ks_export_1;
			}
		}
		__ks_func_export_1(references, indexDelta, mode, module, name) {
			if(this._nullable || (this._parameters.length !== 0)) {
				const __ks_export_1 = (() => {
					const d = new Dictionary();
					d.kind = TypeKind.Reference;
					d.name = KSType.isValue(name.reference) ? name.reference : name;
					return d;
				})();
				if(this._explicitlyNull) {
					__ks_export_1.nullable = this._explicitlyNull;
				}
				if(this._parameters.length !== 0) {
					__ks_export_1.parameters = KSHelper.mapArray(this._parameters, function(parameter) {
						return parameter.__ks_func_toReference_0(references, indexDelta, mode, module);
					});
				}
				return __ks_export_1;
			}
			else {
				return name;
			}
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			const t4 = KSType.isValue;
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
					return proto.__ks_func_export_1.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_flagExported_0(explicitly) {
			if(!(this.__ks_func_isAny_0() === true) && !(this.__ks_func_isVoid_0() === true)) {
				this.__ks_func_type_0().flagExported(explicitly).flagReferenced();
			}
			return super.__ks_func_flagExported_0(explicitly);
		}
		__ks_func_flagSealed_0() {
			const type = ReferenceType.__ks_new_0(this._scope, this._name, this._nullable, this._parameters);
			type._sealed = true;
			return type;
		}
		flagSpread() {
			return this.__ks_func_flagSpread_rt.call(null, this, this, arguments);
		}
		__ks_func_flagSpread_0() {
			const type = ReferenceType.__ks_new_0(this._scope, this._name, this._nullable, this._parameters);
			type._spread = true;
			return type;
		}
		__ks_func_flagSpread_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagSpread_0.call(that);
			}
			if(super.__ks_func_flagSpread_rt) {
				return super.__ks_func_flagSpread_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getMajorReferenceIndex_0() {
			return (this._referenceIndex === -1) ? this.__ks_func_type_0().getMajorReferenceIndex() : this._referenceIndex;
		}
		__ks_func_getProperty_0(name) {
			if(this.__ks_func_isAny_0() === true) {
				return AnyType.NullableUnexplicit;
			}
			else if(this._name === "Dictionary") {
				if(this._parameters.length > 0) {
					return this._parameters[0];
				}
				return AnyType.NullableUnexplicit;
			}
			let type = this.__ks_func_type_0();
			if(KSType.isClassInstance(type, NamedType)) {
				type = type.__ks_func_type_0();
			}
			if(type.__ks_func_isClass_0() === true) {
				return type.getInstanceProperty(name);
			}
			else {
				return type.__ks_func_getProperty_0(name);
			}
		}
		__ks_func_hashCode_0() {
			return this.__ks_func_hashCode_1(false);
		}
		__ks_func_hashCode_1(fattenNull) {
			let hash = this._name;
			if(this._parameters.length !== 0) {
				hash += "<";
				for(let i = 0, __ks_0 = this._parameters.length, parameter; i < __ks_0; ++i) {
					parameter = this._parameters[i];
					if(i !== 0) {
						hash += ",";
					}
					hash += parameter.__ks_func_hashCode_0();
				}
				hash += ">";
			}
			if(this._explicitlyNull) {
				if(fattenNull) {
					hash += "|Null";
				}
				else {
					hash += "?";
				}
			}
			return hash;
		}
		hasParameters() {
			return this.__ks_func_hasParameters_rt.call(null, this, this, arguments);
		}
		__ks_func_hasParameters_0() {
			return this._parameters.length > 0;
		}
		__ks_func_hasParameters_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasParameters_0.call(that);
			}
			if(super.__ks_func_hasParameters_rt) {
				return super.__ks_func_hasParameters_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isAlien_0() {
			return this.__ks_func_type_0().isAlien();
		}
		__ks_func_isAny_0() {
			return this._name === "Any";
		}
		__ks_func_isArray_0() {
			return (this._name === "Array") || (this.__ks_func_type_0().isArray() === true);
		}
		__ks_func_isAssignableToVariable_2(value, anycast, nullcast, downcast, limited) {
			if(limited === void 0 || limited === null) {
				limited = false;
			}
			if(this === value) {
				return true;
			}
			else if(value.__ks_func_isAny_0() === true) {
				if(this.__ks_func_isNullable_0() === true) {
					return nullcast || (value.__ks_func_isNullable_0() === true);
				}
				else {
					return true;
				}
			}
			else if(KSType.isClassInstance(value, ReferenceType)) {
				if(this._name === value.__ks_func_name_2()) {
					if(this._nullable && !nullcast && !(value.__ks_func_isNullable_0() === true)) {
						return false;
					}
					for(let index = 0, __ks_0 = Math.max(this._parameters.length, value.__ks_func_parameters_2().length); index < __ks_0; ++index) {
						if(!(this.__ks_func_parameter_2(index).isAssignableToVariable(value.__ks_func_parameter_2(index), true, nullcast, downcast) === true)) {
							return false;
						}
					}
					return true;
				}
				else if(((value.__ks_func_name_2() === "Class") && (this.__ks_func_type_0().isClass() === true)) || ((this._name === "Class") && (value.__ks_func_type_0().isClass() === true))) {
					return false;
				}
				else if(((value.__ks_func_name_2() === "Enum") && (this.__ks_func_type_0().isEnum() === true)) || ((this._name === "Enum") && (value.__ks_func_type_0().isEnum() === true))) {
					return false;
				}
				else if(((value.__ks_func_name_2() === "Namespace") && (this.__ks_func_type_0().isNamespace() === true)) || ((this._name === "Namespace") && (value.__ks_func_type_0().isNamespace() === true))) {
					return false;
				}
				else if(((value.__ks_func_name_2() === "Struct") && (this.__ks_func_type_0().isStruct() === true)) || ((this._name === "Struct") && (value.__ks_func_type_0().isStruct() === true))) {
					return false;
				}
				else if(((value.__ks_func_name_2() === "Tuple") && (this.__ks_func_type_0().isTuple() === true)) || ((this._name === "Tuple") && (value.__ks_func_type_0().isTuple() === true))) {
					return false;
				}
				else if((value.__ks_func_name_2() === "Object") && (this.__ks_func_isObject_0() === true)) {
					if(this._nullable && !nullcast && !(value.__ks_func_isNullable_0() === true)) {
						return false;
					}
					return true;
				}
				else {
					return this.__ks_func_type_0().isAssignableToVariable(value.__ks_func_type_0(), anycast, nullcast, downcast);
				}
			}
			else if(KSType.isClassInstance(value, UnionType)) {
				if(this._nullable) {
					if(!nullcast && !(value.__ks_func_isNullable_0() === true)) {
						return false;
					}
					return this.__ks_func_setNullable_0(false).__ks_func_isAssignableToVariable_2(value, anycast, nullcast, downcast, limited);
				}
				else {
					for(let __ks_0 = 0, __ks_1 = value.__ks_func_types_1(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
						type = __ks_1[__ks_0];
						if(this.isAssignableToVariable(type, anycast, nullcast, downcast, limited)) {
							return true;
						}
					}
					return false;
				}
			}
			else {
				return this.__ks_func_type_0().isAssignableToVariable(value, anycast, nullcast, downcast);
			}
		}
		isAsync() {
			return this.__ks_func_isAsync_rt.call(null, this, this, arguments);
		}
		__ks_func_isAsync_2() {
			return false;
		}
		__ks_func_isAsync_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAsync_2.call(that);
			}
			if(super.__ks_func_isAsync_rt) {
				return super.__ks_func_isAsync_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isBoolean_0() {
			return (this._name === "Boolean") || (this.__ks_func_type_0().isBoolean() === true);
		}
		__ks_func_isClass_0() {
			return this._name === "Class";
		}
		__ks_func_isClassInstance_0() {
			return this.__ks_func_type_0().isClass();
		}
		__ks_func_isComparableWith_0(type) {
			return this.__ks_func_type_0().isComparableWith(type);
		}
		__ks_func_isDictionary_0() {
			return (this._name === "Dictionary") || (this.__ks_func_type_0().isDictionary() === true);
		}
		__ks_func_isEnum_0() {
			return (this._name === "Enum") || (this.__ks_func_type_0().isEnum() === true);
		}
		__ks_func_isExhaustive_0() {
			return this.__ks_func_type_0().isExhaustive();
		}
		__ks_func_isExplicit_0() {
			return this.__ks_func_type_0().isExplicit();
		}
		__ks_func_isExplicitlyExported_0() {
			return this.__ks_func_type_0().isExplicitlyExported();
		}
		isExplicitlyNull() {
			return this.__ks_func_isExplicitlyNull_rt.call(null, this, this, arguments);
		}
		__ks_func_isExplicitlyNull_0() {
			return this._explicitlyNull;
		}
		__ks_func_isExplicitlyNull_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExplicitlyNull_0.call(that);
			}
			if(super.__ks_func_isExplicitlyNull_rt) {
				return super.__ks_func_isExplicitlyNull_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isExportable_0() {
			return this.__ks_func_type_0().isExportable();
		}
		__ks_func_isExported_0() {
			return this.__ks_func_type_0().isExported();
		}
		__ks_func_isExportingFragment_0() {
			return !(this.__ks_func_isVirtual_0() === true);
		}
		__ks_func_isExtendable_0() {
			return this._name === "Function";
		}
		__ks_func_isFunction_0() {
			return (this._name === "Function") || (this.__ks_func_type_0().isFunction() === true);
		}
		__ks_func_isHybrid_0() {
			return this.__ks_func_type_0().isHybrid();
		}
		isInheriting() {
			return this.__ks_func_isInheriting_rt.call(null, this, this, arguments);
		}
		__ks_func_isInheriting_3(superclass) {
			return this.__ks_func_type_0().isInheriting(superclass);
		}
		__ks_func_isInheriting_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInheriting_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInheriting_rt) {
				return super.__ks_func_isInheriting_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isInstance_0() {
			return (this.__ks_func_type_0().isClass() === true) || (this.__ks_func_type_0().isStruct() === true) || (this.__ks_func_type_0().isTuple() === true);
		}
		isInstanceOf() {
			return this.__ks_func_isInstanceOf_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstanceOf_2(value) {
			return false;
		}
		__ks_func_isInstanceOf_3(value) {
			this.__ks_func_resolveType_0();
			if(!(this._type.__ks_func_isClass_0() === true)) {
				return false;
			}
			if((this._name === value.__ks_func_name_2()) || (value.__ks_func_isAny_0() === true)) {
				return true;
			}
			let type = value.__ks_func_discardAlias_0();
			if(KSType.isValue(type)) {
				if(KSType.isClassInstance(type, UnionType)) {
					for(let __ks_0 = 0, __ks_1 = type.__ks_func_types_1(), __ks_2 = __ks_1.length, __ks_type_1; __ks_0 < __ks_2; ++__ks_0) {
						__ks_type_1 = __ks_1[__ks_0];
						if(this.isInstanceOf(__ks_type_1) === true) {
							return true;
						}
					}
				}
				else if(type.__ks_func_isClass_0() === true) {
					return this._type.__ks_func_type_0().isInstanceOf(type.__ks_func_discardAlias_0().__ks_func_type_0());
				}
			}
			return false;
		}
		__ks_func_isInstanceOf_4(value) {
			for(let __ks_0 = 0, __ks_1 = value.__ks_func_types_1(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
				type = __ks_1[__ks_0];
				if(this.isInstanceOf(type) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isInstanceOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, AnyType);
			const t1 = value => KSType.isClassInstance(value, ReferenceType);
			const t2 = value => KSType.isClassInstance(value, UnionType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInstanceOf_2.call(that, args[0]);
				}
				if(t1(args[0])) {
					return proto.__ks_func_isInstanceOf_3.call(that, args[0]);
				}
				if(t2(args[0])) {
					return proto.__ks_func_isInstanceOf_4.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInstanceOf_rt) {
				return super.__ks_func_isInstanceOf_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isMorePreciseThan_0(value) {
			if(value.__ks_func_isAny_0() === true) {
				return !(this.__ks_func_isAny_0() === true) || ((value.__ks_func_isNullable_0() === true) && !this._nullable);
			}
			else if(this.__ks_func_isAny_0() === true) {
				return false;
			}
			else if(KSType.isClassInstance(value, ReferenceType) && (value.__ks_func_name_2() === this._name)) {
				if((value.__ks_func_isNullable_0() === true) && !this._nullable) {
					return true;
				}
				else if((this.__ks_func_hasParameters_0() === true) && !(value.__ks_func_hasParameters_0() === true)) {
					return true;
				}
				else {
					return false;
				}
			}
			else {
				const a = this.__ks_func_discardReference_0();
				const b = value.__ks_func_discardReference_0();
				return a.__ks_func_isMorePreciseThan_0(b);
			}
		}
		__ks_func_isNamespace_0() {
			return (this._name === "Namespace") || (this.__ks_func_type_0().isNamespace() === true);
		}
		__ks_func_isNative_0() {
			return $natives[this._name] === true;
		}
		__ks_func_isNever_0() {
			return (this._name === "Never") || (this.__ks_func_type_0().isNever() === true);
		}
		__ks_func_isNull_0() {
			return this._name === "Null";
		}
		__ks_func_isNullable_0() {
			this.__ks_func_resolveType_0();
			return this._nullable;
		}
		__ks_func_isNumber_0() {
			return (this._name === "Number") || (this.__ks_func_type_0().isNumber() === true);
		}
		__ks_func_isObject_0() {
			return (this._name === "Object") || ((this.__ks_func_type_0().isClass() === true) && !((this._name === "Array") || (this._name === "Boolean") || (this._name === "Dictionary") || (this._name === "Enum") || (this._name === "Function") || (this._name === "Namespace") || (this._name === "Number") || (this._name === "String") || (this._name === "Struct") || (this._name === "Tuple")));
		}
		__ks_func_isReference_0() {
			return true;
		}
		__ks_func_isReducible_0() {
			return true;
		}
		__ks_func_isSpread_0() {
			return this._spread;
		}
		__ks_func_isString_0() {
			return (this._name === "String") || (this.__ks_func_type_0().isString() === true);
		}
		__ks_func_isStruct_0() {
			return (this._name === "Struct") || (this.__ks_func_type_0().isStruct() === true);
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(this === value) {
				return true;
			}
			else if(((mode & MatchingMode.Exact) !== 0n) && ((mode & MatchingMode.Subclass) === 0n)) {
				if(KSType.isClassInstance(value, ReferenceType)) {
					if((this._name !== value._name) || (this._parameters.length !== value._parameters.length)) {
						return false;
					}
					if((mode & MatchingMode.NonNullToNull) !== 0n) {
						if((this.__ks_func_isNullable_0() === true) && !(value.__ks_func_isNullable_0() === true)) {
							return false;
						}
					}
					else if(this.__ks_func_isNullable_0() !== value.__ks_func_isNullable_0()) {
						return false;
					}
					if(KSType.isValue(this._parameters)) {
						if(KSType.isValue(value._parameters) && (this._parameters.length === value._parameters.length)) {
							for(let i = 0, __ks_0 = this._parameters.length, parameter; i < __ks_0; ++i) {
								parameter = this._parameters[i];
								if(!(parameter.__ks_func_isSubsetOf_0(value._parameters[i], mode) === true)) {
									return false;
								}
							}
						}
						else {
							return false;
						}
					}
					else {
						if(KSType.isValue(value._parameters)) {
							return false;
						}
					}
					return true;
				}
				else if((value.__ks_func_isAny_0() === true) && !(value.__ks_func_isExplicit_0() === true) && ((mode & MatchingMode.Missing) !== 0n)) {
					return true;
				}
				else {
					return false;
				}
			}
			else {
				if(KSType.isClassInstance(value, ReferenceType)) {
					if((this.__ks_func_isNullable_0() === true) && !(value.__ks_func_isNullable_0() === true)) {
						return false;
					}
					if(value.__ks_func_scope_0().isRenamed(value.__ks_func_name_2(), this._name, this._scope, mode) === true) {
						const parameters = value.__ks_func_parameters_2();
						if(parameters.length === this._parameters.length) {
							for(let index = 0, __ks_0 = this._parameters.length, parameter; index < __ks_0; ++index) {
								parameter = this._parameters[index];
								if(!(parameter.isSubsetOf(parameters[index], mode) === true)) {
									return false;
								}
							}
							return true;
						}
					}
					if($virtuals[value.__ks_func_name_2()] === true) {
						return this.__ks_func_type_0().canBeVirtual(value.__ks_func_name_2());
					}
					if((mode & MatchingMode.AutoCast) !== 0n) {
						if(this.__ks_func_type_0().isEnum() === true) {
							return this.__ks_func_type_0().discard().type().isSubsetOf(value, mode);
						}
					}
					return this._scope.isMatchingType(this.__ks_func_discardReference_0(), value.__ks_func_discardReference_0(), mode);
				}
				else if((value.__ks_func_isDictionary_0() === true) && (this.__ks_func_type_0().isClass() === true)) {
					return this._type.__ks_func_type_0().matchInstanceWith(value, []);
				}
				else if(KSType.isClassInstance(value, UnionType)) {
					for(let __ks_0 = 0, __ks_1 = value.__ks_func_types_1(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
						type = __ks_1[__ks_0];
						if(this.isSubsetOf(type, mode) === true) {
							return true;
						}
					}
					return false;
				}
				else {
					return value.__ks_func_isAny_0();
				}
			}
		}
		__ks_func_isTuple_0() {
			return (this._name === "Tuple") || (this.__ks_func_type_0().isTuple() === true);
		}
		__ks_func_isTypeOf_0() {
			return $typeofs[this._name];
		}
		__ks_func_isUnion_0() {
			return this.__ks_func_type_0().isUnion();
		}
		__ks_func_isVoid_0() {
			return (this._name === "Void") || (this.__ks_func_type_0().isVoid() === true);
		}
		__ks_func_matchContentOf_2(value) {
			if(this === value) {
				return true;
			}
			else if(this._nullable && !(value.__ks_func_isNullable_0() === true)) {
				return false;
			}
			else if(value.__ks_func_isAny_0() === true) {
				return true;
			}
			else if(this.__ks_func_isFunction_0() === true) {
				return value.__ks_func_isFunction_0();
			}
			else {
				const a = this.__ks_func_discardReference_0();
				const b = value.__ks_func_discardReference_0();
				if(KSType.isClassInstance(a, ReferenceType) || KSType.isClassInstance(b, ReferenceType) || !a.__ks_func_matchContentOf_0(b)) {
					return false;
				}
				if(KSType.isClassInstance(value, ReferenceType) && (value.__ks_func_hasParameters_0() === true)) {
					if(this._parameters.length === 0) {
						return true;
					}
					const parameters = value.__ks_func_parameters_2();
					if(this._parameters.length !== parameters.length) {
						return false;
					}
					for(let index = 0, __ks_0 = this._parameters.length, parameter; index < __ks_0; ++index) {
						parameter = this._parameters[index];
						if(!parameter.matchContentOf(parameters[index])) {
							return false;
						}
					}
				}
				return true;
			}
		}
		__ks_func_matchContentOf_0(value) {
			if(KSType.isClassInstance(value, Type)) {
				return this.__ks_func_matchContentOf_2(value);
			}
			return super.__ks_func_matchContentOf_0(value);
		}
		__ks_func_matchContentOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_matchContentOf_2.call(that, args[0]);
				}
			}
			return super.__ks_func_matchContentOf_rt.call(null, that, Type.prototype, args);
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_2() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_2.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameter() {
			return this.__ks_func_parameter_rt.call(null, this, this, arguments);
		}
		__ks_func_parameter_2(index) {
			if(index === void 0 || index === null) {
				index = 0;
			}
			if((this._parameters.length === 0) && (this.__ks_func_isArray_0() === true)) {
				return this.__ks_func_type_0().parameter();
			}
			else if(index >= this._parameters.length) {
				return AnyType.NullableUnexplicit;
			}
			else {
				return this._parameters[index];
			}
		}
		__ks_func_parameter_rt(that, proto, args) {
			const t0 = value => KSType.isNumber(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 1) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
					return proto.__ks_func_parameter_2.call(that, KSHelper.getVararg(args, 0, pts[1]));
				}
			}
			if(super.__ks_func_parameter_rt) {
				return super.__ks_func_parameter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameters() {
			return this.__ks_func_parameters_rt.call(null, this, this, arguments);
		}
		__ks_func_parameters_2() {
			return this._parameters;
		}
		__ks_func_parameters_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameters_2.call(that);
			}
			if(super.__ks_func_parameters_rt) {
				return super.__ks_func_parameters_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		reassign() {
			return this.__ks_func_reassign_rt.call(null, this, this, arguments);
		}
		__ks_func_reassign_0(name, scope) {
			if(scope === void 0) {
				scope = null;
			}
			this._name = name;
			this._scope = scope;
			this.__ks_func_reset_0();
			return this;
		}
		__ks_func_reassign_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_reassign_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_reassign_rt) {
				return super.__ks_func_reassign_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_reduce_0(type) {
			if(this === type) {
				return this;
			}
			else {
				const reduced = this.__ks_func_type_0().reduce(type);
				if(this._nullable && !(type.__ks_func_isNullable_0() === true)) {
					return ((reduced.isUnion() === true) ? reduced : this._scope.reference(reduced)).setNullable(true);
				}
				else {
					return (reduced.isUnion() === true) ? reduced : this._scope.reference(reduced);
				}
			}
		}
		resolveType() {
			return this.__ks_func_resolveType_rt.call(null, this, this, arguments);
		}
		__ks_func_resolveType_0() {
			if(!KSType.isValue(this._type) || (this._type.__ks_func_isCloned_0() === true)) {
				if(this._name === "Any") {
					this._type = AnyType.Unexplicit;
					this._predefined = true;
				}
				else if(this._name === "Never") {
					this._type = Type.Never;
					this._predefined = true;
				}
				else if(this._name === "Null") {
					this._type = Type.Null;
					this._nullable = true;
					this._predefined = true;
				}
				else if(this._name === "Void") {
					this._type = Type.Void;
					this._predefined = true;
				}
				else {
					const names = this._name.split(".");
					if(names.length === 1) {
						let __ks_0;
						if(KSType.isValue(__ks_0 = this._scope.__ks_func_getVariable_0(this._name, -1)) ? (this._variable = __ks_0, true) : false) {
							this._type = this._variable.__ks_func_getRealType_0();
							this._nullable = this._nullable || (this._type.__ks_func_isNullable_0() === true);
							this._predefined = (this._variable.__ks_func_isPredefined_0() === true) || (this._type.__ks_func_isPredefined_0() === true);
							if(KSType.isClassInstance(this._type, AliasType)) {
								this._type = this._type.__ks_func_type_0();
							}
							if(KSType.isClassInstance(this._type, ReferenceType)) {
								this._type = this._type.__ks_func_type_0();
							}
						}
						else {
							console.info(this);
							throw new NotImplementedException();
						}
					}
					else {
						let __ks_0;
						let type = KSType.isValue(__ks_0 = this._scope.getVariable(names[0], -1)) ? __ks_0.__ks_func_getRealType_0() : null;
						if(!KSType.isValue(type)) {
							console.info(this);
							throw new NotImplementedException();
						}
						for(let __ks_0 = 1, __ks_1 = names.length, name; __ks_0 < __ks_1; ++__ks_0) {
							name = names[__ks_0];
							let __ks_2;
							if(KSType.isValue(__ks_2 = type.getProperty(name)) ? (type = __ks_2, false) : true) {
								console.info(this);
								throw new NotImplementedException();
							}
						}
						this._type = type;
						this._nullable = this._nullable || (type.isNullable() === true);
						this._predefined = type.isPredefined();
					}
					if(KSType.isClassInstance(this._type, AliasType)) {
						this._type = this._type.__ks_func_type_0();
					}
					if(KSType.isClassInstance(this._type, ReferenceType)) {
						this._type = this._type.__ks_func_type_0();
					}
				}
			}
		}
		__ks_func_resolveType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_resolveType_0.call(that);
			}
			if(super.__ks_func_resolveType_rt) {
				return super.__ks_func_resolveType_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		reset() {
			return this.__ks_func_reset_rt.call(null, this, this, arguments);
		}
		__ks_func_reset_0() {
			delete this._type;
			this._nullable = this._explicitlyNull;
			this._predefined = false;
			return this;
		}
		__ks_func_reset_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_reset_0.call(that);
			}
			if(super.__ks_func_reset_rt) {
				return super.__ks_func_reset_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_setNullable_0(nullable) {
			if(this._explicitlyNull) {
				if(nullable) {
					return this;
				}
				else {
					return this._scope.reference(this._name, false, [...this._parameters]);
				}
			}
			else {
				this.__ks_func_resolveType_0();
				if(this._nullable === nullable) {
					return this;
				}
				else if(this._type.__ks_func_isUnion_0() === true) {
					if(nullable) {
						if(this._type.__ks_func_isAlias_0() === true) {
							return this._scope.reference(this._name, true, [...this._parameters]);
						}
						const types = this._type.__ks_func_discard_0().types();
						types.push(Type.Null);
						return Type.union.apply(Type, [].concat([this._scope], types));
					}
					else {
						const types = [];
						for(let __ks_0 = 0, __ks_1 = this._type.__ks_func_discard_0().types(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
							type = __ks_1[__ks_0];
							if(type.isNull() === true) {
								continue;
							}
							if(type.isNullable() === true) {
								types.push(type.setNullable(false));
							}
							else {
								types.push(type);
							}
						}
						return Type.union(this._scope, ...types);
					}
				}
				else {
					return this._scope.reference(this._name, nullable, [...this._parameters]);
				}
			}
		}
		__ks_func_split_0(types) {
			this.__ks_func_resolveType_0();
			if((this._type.__ks_func_isAlias_0() === true) || (this._type.__ks_func_isUnion_0() === true)) {
				return this._type.__ks_func_split_0(types);
			}
			else {
				return super.__ks_func_split_0(types);
			}
		}
		toCastFragments() {
			return this.__ks_func_toCastFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toCastFragments_1(fragments) {
			if(this.__ks_func_isTypeOf_0()) {
				fragments.code($comma, "null", $comma, $quote.__ks_0(this._name));
			}
			else {
				this.__ks_func_resolveType_0();
				if(this._type.__ks_func_isClass_0() === true) {
					fragments.code($comma, this._name, $comma, "\"Class\"");
				}
				else if(this._type.__ks_func_isEnum_0() === true) {
					fragments.code($comma, this._name, $comma, "\"Enum\"");
				}
				else if(this._type.__ks_func_isStruct_0() === true) {
					fragments.code($comma, this._name, $comma, "\"Struct\"");
				}
				else if(this._type.__ks_func_isTuple_0() === true) {
					fragments.code($comma, this._name, $comma, "\"Tuple\"");
				}
				else {
					this._type.toCastFragments(fragments);
				}
			}
		}
		__ks_func_toCastFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toCastFragments_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_toCastFragments_rt) {
				return super.__ks_func_toCastFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toExportFragment_0(fragments, name, variable) {
			if(!(this.__ks_func_isVirtual_0() === true)) {
				const varname = KSType.isFunction(variable.name) ? variable.name() : null;
				if(name === varname) {
					fragments.line(name);
				}
				else {
					fragments.newLine().code(KSHelper.concatString(name, ": ")).compile(variable).done();
				}
			}
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			fragments.code(this._name);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toMetadata_0(references, indexDelta, mode, module) {
			this.__ks_func_resolveType_0();
			if(this._referenceIndex !== -1) {
				return this._referenceIndex;
			}
			else if(this._predefined) {
				return super.__ks_func_toMetadata_0(references, indexDelta, mode, module);
			}
			else if(!(this._variable.__ks_func_getRealType_0().isClass() === true)) {
				this._referenceIndex = this._variable.__ks_func_getRealType_0().toMetadata(references, indexDelta, mode, module);
			}
			else if((this._type.__ks_func_isAlien_0() === true) && (this._type.__ks_func_isPredefined_0() === true)) {
				return super.__ks_func_toMetadata_0(references, indexDelta, mode, module);
			}
			else {
				const index = references.length;
				this._referenceIndex = index + indexDelta;
				references.push(null);
				references[index] = this._variable.__ks_func_getRealType_0().toReference(references, indexDelta, mode, module);
			}
			return this._referenceIndex;
		}
		__ks_func_toQuote_0() {
			return ReferenceType.__ks_sttc_toQuote_1(this._name, this._explicitlyNull, this._parameters);
		}
		__ks_func_toReference_0(references, indexDelta, mode, module) {
			this.__ks_func_resolveType_0();
			if(this._predefined) {
				return this.__ks_func_export_0(references, indexDelta, mode, module);
			}
			else if((mode & ExportMode.Alien) !== 0n) {
				if(this._type.__ks_func_isClass_0() === true) {
					return this.export(references, indexDelta, mode, module, this._type.__ks_func_toReference_0(references, indexDelta, mode, module));
				}
				else {
					return super.__ks_func_toReference_0(references, indexDelta, mode, module);
				}
			}
			else if((mode & ExportMode.Requirement) !== 0n) {
				if((this._type.__ks_func_isRequirement_0() === true) || !(this._type.__ks_func_isNative_0() === true)) {
					if(this._type.__ks_func_isClass_0() === true) {
						return this.export(references, indexDelta, mode, module, this._type.__ks_func_toReference_0(references, indexDelta, mode, module));
					}
					else {
						return super.__ks_func_toReference_0(references, indexDelta, mode, module);
					}
				}
				else if(this._type.__ks_func_isExplicitlyExported_0() === true) {
					return this.export(references, indexDelta, mode, module, this._type.toAlterationReference(references, indexDelta, mode, module));
				}
				else {
					return this.__ks_func_export_0(references, indexDelta, mode, module);
				}
			}
			else {
				if(!(this._type.__ks_func_isClass_0() === true)) {
					return super.__ks_func_toReference_0(references, indexDelta, mode, module);
				}
				else if((this._type.__ks_func_isExplicitlyExported_0() === true) || (this._type.__ks_func_isRequirement_0() === true)) {
					return this.export(references, indexDelta, mode, module, this._type.__ks_func_toReference_0(references, indexDelta, mode, module));
				}
				else if(this.__ks_func_isNative_0() === true) {
					return this.__ks_func_export_0(references, indexDelta, mode, module);
				}
				else {
					return this.export(references, indexDelta, mode, module, this._type.__ks_func_toReference_0(references, indexDelta, mode, module));
				}
			}
		}
		__ks_func_toNegativeTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			this.__ks_func_resolveType_0();
			if((this._type.__ks_func_isAlias_0() === true) || (this._type.__ks_func_isUnion_0() === true) || (this._type.__ks_func_isExclusion_0() === true)) {
				this._type.__ks_func_toNegativeTestFragments_0(fragments, node, junction);
			}
			else {
				this.toTestFragments(fragments.code("!"), node, junction);
			}
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			this.__ks_func_resolveType_0();
			if((this._type.__ks_func_isAlias_0() === true) || (this._type.__ks_func_isUnion_0() === true) || (this._type.__ks_func_isExclusion_0() === true)) {
				this._type.__ks_func_toPositiveTestFragments_0(fragments, node, junction);
			}
			else {
				this.__ks_func_toTestFragments_0(fragments, node, junction);
			}
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toRouteTestFragments_0(fragments, node, junction) {
			if(this._nullable && (junction === Junction.AND)) {
				fragments.code("(");
			}
			this.__ks_func_toTestFragments_0(fragments, node, junction);
			if(this._nullable) {
				fragments.code(KSHelper.concatString(" || ", $runtime.type.__ks_0(node), ".isNull(")).compile(node).code(")");
			}
			if(this._nullable && (junction === Junction.AND)) {
				fragments.code(")");
			}
		}
		__ks_func_toRouteTestFragments_1(fragments, node, argName, from, to, __ks_default_1, junction) {
			this.__ks_func_resolveType_0();
			fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isVarargs(", argName, ", ", from, ", ", to, ", ", __ks_default_1, ", "));
			const literal = new Literal(false, node, node.scope(), "value");
			if(node._options.format.functions === "es5") {
				fragments.code("function(value) { return ");
				if(this._nullable) {
					this.__ks_func_toTestFragments_0(fragments, literal, Junction.OR);
					fragments.code(KSHelper.concatString(" || ", $runtime.type.__ks_0(node), ".isNull(")).compile(literal).code(")");
				}
				else {
					this.__ks_func_toTestFragments_0(fragments, literal, Junction.NONE);
				}
				fragments.code("; }");
			}
			else {
				fragments.code("value => ");
				if(this._nullable) {
					this.__ks_func_toTestFragments_0(fragments, literal, Junction.OR);
					fragments.code(KSHelper.concatString(" || ", $runtime.type.__ks_0(node), ".isNull(")).compile(literal).code(")");
				}
				else {
					this.__ks_func_toTestFragments_0(fragments, literal, Junction.NONE);
				}
			}
			fragments.code(")");
		}
		toTestFragments() {
			return this.__ks_func_toTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toTestFragments_0(fragments, node, junction) {
			if(this._nullable && (junction.valueOf() === Junction.AND.value)) {
				fragments.code("(");
			}
			let tof, __ks_0;
			if(KSType.isValue(__ks_0 = $runtime.typeof.__ks_0(this._name, node)) ? (tof = __ks_0, true) : false) {
				fragments.code(KSHelper.concatString(tof, "(")).compile(node);
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), "."));
				if(this._type.__ks_func_isClass_0() === true) {
					fragments.code("isClassInstance");
				}
				else if(this._type.__ks_func_isEnum_0() === true) {
					fragments.code("isEnumInstance");
				}
				else if(this._type.__ks_func_isStruct_0() === true) {
					fragments.code("isStructInstance");
				}
				else if(this._type.__ks_func_isTuple_0() === true) {
					fragments.code("isTupleInstance");
				}
				fragments.code("(").compile(node).code(", ");
				if(KSType.isClassInstance(this._type, NamedType)) {
					fragments.code(this._type.__ks_func_path_0());
				}
				else {
					fragments.code(this._name);
				}
			}
			if(this._parameters.length !== 0) {
				fragments.code(", ");
				const literal = new Literal(false, node, node.scope(), "value");
				if(node._options.format.functions === "es5") {
					fragments.code("function(value) { return ");
					this._parameters[0].toTestFragments(fragments, literal, Junction.NONE);
					fragments.code("; }");
				}
				else {
					fragments.code("value => ");
					this._parameters[0].toTestFragments(fragments, literal, Junction.NONE);
				}
			}
			fragments.code(")");
			if(this._nullable) {
				fragments.code(KSHelper.concatString(" || ", $runtime.type.__ks_0(node), ".isNull(")).compile(node).code(")");
				if(junction.valueOf() === Junction.AND.value) {
					fragments.code(")");
				}
			}
		}
		__ks_func_toTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toTestFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toTestFragments_rt) {
				return super.__ks_func_toTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toTestFunctionFragments_0(fragments, node) {
			const unalias = this.__ks_func_discardAlias_0();
			let __ks_0;
			const name = (KSType.isFunction(unalias.name) && KSType.isValue(__ks_0 = unalias.name())) ? __ks_0 : this._name;
			const tof = $runtime.typeof.__ks_0(name, node);
			if((this._parameters.length === 0) && KSType.isValue(tof) && !this._nullable) {
				fragments.code(KSHelper.toString(tof));
			}
			else if((unalias.__ks_func_isDictionary_0() === true) || (unalias.__ks_func_isExclusion_0() === true) || (unalias.__ks_func_isFunction_0() === true) || (unalias.__ks_func_isUnion_0() === true)) {
				unalias.__ks_func_toTestFunctionFragments_0(fragments, node);
			}
			else {
				super.__ks_func_toTestFunctionFragments_0(fragments, node);
			}
		}
		__ks_func_toTestFunctionFragments_1(fragments, node, junction) {
			this.__ks_func_resolveType_0();
			if((this._parameters.length === 0) && !this._nullable) {
				let tof = $runtime.typeof.__ks_0(this._name, node);
				if(KSType.isValue(tof)) {
					fragments.code(KSHelper.concatString(tof, "(value)"));
					return;
				}
			}
			let subjunction = null;
			if(this._nullable && (junction.valueOf() === Junction.AND.value)) {
				fragments.code("(");
				subjunction = Junction.OR;
			}
			const unalias = this.__ks_func_discardAlias_0();
			if((unalias.__ks_func_isDictionary_0() === true) || (unalias.__ks_func_isExclusion_0() === true) || (unalias.__ks_func_isFunction_0() === true) || (unalias.__ks_func_isUnion_0() === true)) {
				unalias.__ks_func_toTestFunctionFragments_1(fragments, node, KSType.isValue(subjunction) ? subjunction : junction);
			}
			else {
				let __ks_0;
				const name = (KSType.isFunction(unalias.name) && KSType.isValue(__ks_0 = unalias.name())) ? __ks_0 : this._name;
				let tof = $runtime.typeof.__ks_0(name, node);
				if(KSType.isValue(tof)) {
					fragments.code(KSHelper.concatString(tof, "(value"));
				}
				else {
					fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), "."));
					if(unalias.__ks_func_isClass_0() === true) {
						fragments.code("isClassInstance");
					}
					else if(unalias.__ks_func_isEnum_0() === true) {
						fragments.code("isEnumInstance");
					}
					else if(unalias.__ks_func_isStruct_0() === true) {
						fragments.code("isStructInstance");
					}
					else if(unalias.__ks_func_isTuple_0() === true) {
						fragments.code("isTupleInstance");
					}
					else {
						throw new NotSupportedException();
					}
					fragments.code("(value, ");
					if(KSType.isClassInstance(unalias, NamedType)) {
						fragments.code(unalias.__ks_func_path_0());
					}
					else {
						fragments.code(name);
					}
				}
			}
			if(this._parameters.length !== 0) {
				fragments.code(", ");
				const literal = new Literal(false, node, node.scope(), "value");
				this._parameters[0].__ks_func_toTestFunctionFragments_0(fragments, literal);
			}
			if(!(this._type.__ks_func_isAlias_0() === true)) {
				fragments.code(")");
			}
			if(this._nullable) {
				fragments.code(KSHelper.concatString(" || ", $runtime.type.__ks_0(node), ".isNull(value)"));
				if(KSType.isValue(subjunction)) {
					fragments.code(")");
				}
			}
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			this.__ks_func_resolveType_0();
			variations.push("ref", this._name, this._spread, this._nullable);
			if(this._type.__ks_func_isPredefined_0() === true) {
				variations.push(true);
			}
			else {
				this._type.__ks_func_toVariations_0(variations);
			}
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_0() {
			this.__ks_func_resolveType_0();
			return this._type;
		}
		static __ks_sttc_import_3(index, data, metadata, references, alterations, queue, scope, node) {
			let name = null;
			if(KSType.isNumber(data.name)) {
				const reference = Type.__ks_sttc_import_0((() => {
					const d = new Dictionary();
					d.reference = data.name;
					return d;
				})(), metadata, references, alterations, queue, scope, node);
				name = reference.name();
			}
			else {
				name = data.name;
			}
			const parameters = KSType.isValue(data.parameters) ? KSHelper.mapArray(data.parameters, function(parameter) {
				return Type.import(parameter, metadata, references, alterations, queue, scope, node);
			}) : null;
			return new ReferenceType(scope, KSHelper.cast(name, "String", false, null, "String"), data.nullable, parameters);
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 8) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2]) && t2(arguments[3]) && t2(arguments[4]) && t1(arguments[5]) && t3(arguments[6]) && t4(arguments[7])) {
					return ReferenceType.__ks_sttc_import_3(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(Type.import) {
				return Type.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toQuote_1(name, nullable, parameters) {
			const fragments = [name];
			if(parameters.length !== 0) {
				fragments.push("<");
				for(let index = 0, __ks_0 = parameters.length, parameter; index < __ks_0; ++index) {
					parameter = parameters[index];
					if(index !== 0) {
						fragments.push(", ");
					}
					fragments.push(parameter.toQuote());
				}
				fragments.push(">");
			}
			if(nullable === true) {
				fragments.push("?");
			}
			return fragments.join("");
		}
		static toQuote() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return ReferenceType.__ks_sttc_toQuote_1(arguments[0], arguments[1], arguments[2]);
				}
			}
			return Type.toQuote.apply(null, arguments);
		}
	}
	class SealableType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(SealableType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(scope, type) {
			if(scope === void 0) {
				scope = null;
			}
			Type.prototype.__ks_cons_0.call(this, scope);
			this._type = type;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return SealableType.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			throw new NotSupportedException();
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			if(this._systemic) {
				return (() => {
					const d = new Dictionary();
					d.kind = TypeKind.Sealable;
					d.systemic = true;
					d.type = this._type.__ks_func_toReference_0(references, indexDelta, mode, module);
					return d;
				})();
			}
			else {
				return (() => {
					const d = new Dictionary();
					d.kind = TypeKind.Sealable;
					d.sealed = this.__ks_func_isSealed_0();
					d.type = this._type.__ks_func_toReference_0(references, indexDelta, mode, module);
					return d;
				})();
			}
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_flagExported_0(explicitly) {
			this._type.__ks_func_flagExported_0(explicitly);
			return this;
		}
		__ks_func_flagReferenced_0() {
			this._type.__ks_func_flagReferenced_0();
			return this;
		}
		__ks_func_isSealable_0() {
			return true;
		}
		__ks_func_isSealed_0() {
			return this._sealed || (this._type.__ks_func_isSealed_0() === true);
		}
		__ks_func_isSubsetOf_7(value, mode) {
			return this._type.isSubsetOf(value.__ks_func_type_0(), mode);
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, SealableType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_7(value, mode);
			}
			return this.__ks_func_isSubsetOf_8(value, mode);
		}
		__ks_func_isSubsetOf_8(value, mode) {
			if((mode & MatchingMode.Similar) !== 0n) {
				return this._type.__ks_func_isSubsetOf_0(value, mode);
			}
			else {
				return false;
			}
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, SealableType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			const t2 = value => KSType.isClassInstance(value, Type);
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_7.call(that, args[0], args[1]);
					}
				}
				if(t2(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_8.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, Type.prototype, args);
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			return this._type.__ks_func_toFragments_0(fragments, node);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			return this._type.__ks_func_toQuote_0();
		}
		__ks_func_toQuote_2(__ks_double_1) {
			return this._type.toQuote(__ks_double_1);
		}
		__ks_func_toQuote_1(double) {
			return this.__ks_func_toQuote_2(double);
		}
		__ks_func_toQuote_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 0) {
				return proto.__ks_func_toQuote_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toQuote_2.call(that, args[0]);
				}
			}
			return super.__ks_func_toQuote_rt.call(null, that, Type.prototype, args);
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			return this._type.__ks_func_toPositiveTestFragments_0(fragments, node, junction);
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("sealable");
			this._type.__ks_func_toVariations_0(variations);
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_0() {
			return this._type;
		}
		static __ks_sttc_fromMetadata_0(data, metadata, references, alterations, queue, scope, node) {
			const type = new SealableType(scope, Type.fromMetadata(data.type, metadata, references, alterations, queue, scope, node));
			if(data.sealed === true) {
				type.__ks_func_flagSealed_0();
			}
			return type;
		}
		static fromMetadata() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = value => KSType.isClassInstance(value, Scope);
			const t3 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 7) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2]) && t0(arguments[3]) && t1(arguments[4]) && t2(arguments[5]) && t3(arguments[6])) {
					return SealableType.__ks_sttc_fromMetadata_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
				}
			}
			if(Type.fromMetadata) {
				return Type.fromMetadata.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class AliasType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(AliasType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AliasType.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_0(scope) {
			if(scope === void 0) {
				scope = null;
			}
			Type.prototype.__ks_cons_0.call(this, scope);
		}
		__ks_cons_1(scope, type) {
			if(scope === void 0) {
				scope = null;
			}
			Type.prototype.__ks_cons_0.call(this, scope);
			this._type = type;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return AliasType.prototype.__ks_cons_0.call(that, args[0]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return AliasType.prototype.__ks_cons_1.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_canBeBoolean_0() {
			return this._type.__ks_func_canBeBoolean_0();
		}
		__ks_func_canBeFunction_3(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return this._type.canBeFunction(any);
		}
		__ks_func_canBeFunction_0(any) {
			return this.__ks_func_canBeFunction_3(any);
		}
		__ks_func_canBeFunction_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_canBeFunction_3.call(that, args[0]);
			}
			return super.__ks_func_canBeFunction_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_canBeNumber_3(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return this._type.canBeNumber(any);
		}
		__ks_func_canBeNumber_0(any) {
			return this.__ks_func_canBeNumber_3(any);
		}
		__ks_func_canBeNumber_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_canBeNumber_3.call(that, args[0]);
			}
			return super.__ks_func_canBeNumber_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_canBeString_3(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return this._type.canBeString(any);
		}
		__ks_func_canBeString_0(any) {
			return this.__ks_func_canBeString_3(any);
		}
		__ks_func_canBeString_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_canBeString_3.call(that, args[0]);
			}
			return super.__ks_func_canBeString_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_clone_1() {
			throw new NotSupportedException();
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_discard_0() {
			return this._type.__ks_func_discard_0();
		}
		__ks_func_discardAlias_0() {
			return this._type.__ks_func_discardAlias_0();
		}
		__ks_func_discardReference_0() {
			return this._type.__ks_func_discardAlias_0();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			return (() => {
				const d = new Dictionary();
				d.kind = TypeKind.Alias;
				d.of = this._type.__ks_func_export_0(references, indexDelta, mode, module);
				return d;
			})();
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getProperty_0(name) {
			return this._type.__ks_func_getProperty_0(name);
		}
		__ks_func_isAlias_0() {
			return true;
		}
		__ks_func_isArray_0() {
			return this._type.__ks_func_isArray_0();
		}
		__ks_func_isBoolean_0() {
			return this._type.__ks_func_isBoolean_0();
		}
		__ks_func_isDictionary_0() {
			return this._type.__ks_func_isDictionary_0();
		}
		__ks_func_isExclusion_0() {
			return this._type.__ks_func_isExclusion_0();
		}
		__ks_func_isExportable_0() {
			return this._type.__ks_func_isExportable_0();
		}
		__ks_func_isExportingFragment_0() {
			return false;
		}
		__ks_func_isFunction_0() {
			return this._type.__ks_func_isFunction_0();
		}
		__ks_func_isNamespace_0() {
			return this._type.__ks_func_isNamespace_0();
		}
		__ks_func_isNullable_0() {
			return KSType.isValue(this._type) ? this._type.__ks_func_isNullable_0() : null;
		}
		__ks_func_isNumber_0() {
			return this._type.__ks_func_isNumber_0();
		}
		__ks_func_isObject_0() {
			return this._type.__ks_func_isObject_0();
		}
		__ks_func_isReducible_0() {
			return true;
		}
		__ks_func_isString_0() {
			return this._type.__ks_func_isString_0();
		}
		__ks_func_isStruct_0() {
			return this._type.__ks_func_isStruct_0();
		}
		__ks_func_isSubsetOf_9(value, mode) {
			return this === value;
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, AliasType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_9(value, mode);
			}
			return super.__ks_func_isSubsetOf_0(value, mode);
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, AliasType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_9.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_isTuple_0() {
			return this._type.__ks_func_isTuple_0();
		}
		__ks_func_isUnion_0() {
			return KSType.isValue(this._type) ? this._type.__ks_func_isUnion_0() : null;
		}
		__ks_func_matchContentOf_3(value) {
			return this._type.__ks_func_matchContentOf_0(value);
		}
		__ks_func_matchContentOf_0(value) {
			if(KSType.isClassInstance(value, Type)) {
				return this.__ks_func_matchContentOf_3(value);
			}
			return super.__ks_func_matchContentOf_0(value);
		}
		__ks_func_matchContentOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_matchContentOf_3.call(that, args[0]);
				}
			}
			return super.__ks_func_matchContentOf_rt.call(null, that, Type.prototype, args);
		}
		parameter() {
			return this.__ks_func_parameter_rt.call(null, this, this, arguments);
		}
		__ks_func_parameter_3() {
			return this._type.parameter();
		}
		__ks_func_parameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameter_3.call(that);
			}
			if(super.__ks_func_parameter_rt) {
				return super.__ks_func_parameter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_reduce_0(type) {
			return this._type.__ks_func_reduce_0(type);
		}
		__ks_func_setNullable_0(nullable) {
			throw new NotImplementedException();
		}
		__ks_func_shallBeNamed_0() {
			return true;
		}
		__ks_func_split_0(types) {
			return this._type.__ks_func_split_0(types);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_1(type) {
			this._type = type;
			return this;
		}
		__ks_func_type_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_type_1.call(that, args[0]);
				}
			}
			return super.__ks_func_type_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_toExportFragment_0(fragments, name, variable) {
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			throw new NotImplementedException(node);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toCastFragments() {
			return this.__ks_func_toCastFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toCastFragments_2(fragments) {
			this._type.toCastFragments(fragments);
		}
		__ks_func_toCastFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toCastFragments_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_toCastFragments_rt) {
				return super.__ks_func_toCastFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toNegativeTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			return this._type.__ks_func_toNegativeTestFragments_0(fragments, node, junction);
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			return this._type.__ks_func_toPositiveTestFragments_0(fragments, node, junction);
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("alias");
			this._type.__ks_func_toVariations_0(variations);
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_4(index, data, metadata, references, alterations, queue, scope, node) {
			const type = AliasType.__ks_new_0(scope);
			queue.push((() => {
				const __ks_rt = (...args) => {
					if(args.length === 0) {
						return __ks_rt.__ks_0.call(this);
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = () => {
					type.__ks_func_type_1(Type.import(data.of, metadata, references, alterations, queue, scope, node));
				};
				return __ks_rt;
			})());
			return type;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 8) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2]) && t2(arguments[3]) && t2(arguments[4]) && t1(arguments[5]) && t3(arguments[6]) && t4(arguments[7])) {
					return AliasType.__ks_sttc_import_4(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(Type.import) {
				return Type.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class AnyType extends Type {
		static __ks_new_0() {
			const o = Object.create(AnyType.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AnyType.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._explicit = true;
			this._nullable = false;
		}
		__ks_cons_0() {
			Type.prototype.__ks_cons_0.call(this, null);
		}
		__ks_cons_1(explicit, nullable) {
			Type.prototype.__ks_cons_0.call(this, null);
			this._explicit = explicit;
			this._nullable = nullable;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isBoolean;
			if(args.length === 0) {
				return AnyType.prototype.__ks_cons_0.call(that);
			}
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return AnyType.prototype.__ks_cons_1.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			const that = AnyType.__ks_new_1(this._explicit, this._nullable);
			return that.__ks_func_copyFrom_0(this);
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		copyFrom() {
			return this.__ks_func_copyFrom_rt.call(null, this, this, arguments);
		}
		__ks_func_copyFrom_0(src) {
			this._alien = src._alien;
			this._required = src._required;
			return this;
		}
		__ks_func_copyFrom_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, AnyType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_copyFrom_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_copyFrom_rt) {
				return super.__ks_func_copyFrom_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_compareTo_0(value) {
			if(value.__ks_func_isAny_0() === true) {
				if(this._nullable === value.__ks_func_isNullable_0()) {
					return 0;
				}
				else if(this._nullable) {
					return 1;
				}
				else {
					return -1;
				}
			}
			else {
				return 1;
			}
		}
		compareToRef() {
			return this.__ks_func_compareToRef_rt.call(null, this, this, arguments);
		}
		__ks_func_compareToRef_4(value, equivalences = null) {
			if(this._nullable === value.__ks_func_isNullable_0()) {
				return 0;
			}
			else if(this._nullable) {
				return 1;
			}
			else {
				return -1;
			}
		}
		__ks_func_compareToRef_5(value, equivalences = null) {
			return -1;
		}
		__ks_func_compareToRef_6(value, equivalences = null) {
			if(value.__ks_func_isAny_0() === true) {
				if(this._nullable === value.__ks_func_isNullable_0()) {
					return 0;
				}
				else if(this._nullable) {
					return 1;
				}
				else {
					return -1;
				}
			}
			else {
				return 1;
			}
		}
		__ks_func_compareToRef_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, AnyType);
			const t1 = value => KSType.isArray(value, value => KSType.isArray(value, KSType.isString)) || KSType.isNull(value);
			const t2 = value => KSType.isClassInstance(value, NullType);
			const t3 = value => KSType.isClassInstance(value, ReferenceType);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0])) {
					if(KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
						return proto.__ks_func_compareToRef_4.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
					}
					throw KSHelper.badArgs();
				}
				if(t2(args[0])) {
					if(KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
						return proto.__ks_func_compareToRef_5.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
					}
					throw KSHelper.badArgs();
				}
				if(t3(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_compareToRef_6.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_compareToRef_rt) {
				return super.__ks_func_compareToRef_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			return this.__ks_func_toReference_0(references, indexDelta, mode, module);
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_flagAlien_0() {
			if(this._alien) {
				return this;
			}
			const type = this.__ks_func_clone_1();
			type._alien = true;
			return type;
		}
		__ks_func_flagRequired_0() {
			if(this._required) {
				return this;
			}
			const type = this.__ks_func_clone_1();
			type._required = true;
			return type;
		}
		__ks_func_getProperty_1(name) {
			return AnyType.NullableUnexplicit;
		}
		__ks_func_getProperty_0(name) {
			return this.__ks_func_getProperty_1(name);
		}
		__ks_func_getProperty_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getProperty_1.call(that, args[0]);
				}
			}
			return super.__ks_func_getProperty_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_hashCode_0() {
			return this.__ks_func_hashCode_1(false);
		}
		__ks_func_hashCode_1(fattenNull) {
			return this._nullable ? fattenNull ? "Any|Null" : "Any?" : "Any";
		}
		__ks_func_isAny_0() {
			return true;
		}
		__ks_func_isAssignableToVariable_2(value, anycast, nullcast, downcast, limited) {
			if(limited === void 0 || limited === null) {
				limited = false;
			}
			if(anycast && !this._explicit) {
				return true;
			}
			else if(value.__ks_func_isAny_0() === true) {
				if(this._nullable) {
					return nullcast || (value.__ks_func_isNullable_0() === true);
				}
				else {
					return true;
				}
			}
			else {
				return false;
			}
		}
		__ks_func_isExplicit_0() {
			return this._explicit;
		}
		__ks_func_isExportable_0() {
			return true;
		}
		isInstanceOf() {
			return this.__ks_func_isInstanceOf_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstanceOf_5(target) {
			return false;
		}
		__ks_func_isInstanceOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInstanceOf_5.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInstanceOf_rt) {
				return super.__ks_func_isInstanceOf_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isMorePreciseThan_0(value) {
			return (value.__ks_func_isAny_0() === true) && (!this._nullable || (value.__ks_func_isNullable_0() === true));
		}
		__ks_func_isNullable_0() {
			return this._nullable;
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if((mode & MatchingMode.Exact) !== 0n) {
				if(!(value.__ks_func_isAny_0() === true)) {
					return false;
				}
				if((mode & MatchingMode.NullToNonNull) !== 0n) {
					return !this._nullable || (value.__ks_func_isNullable_0() === true);
				}
				else {
					return this._nullable === value.__ks_func_isNullable_0();
				}
			}
			else if(((mode & MatchingMode.Missing) !== 0n) && !this._explicit) {
				return !this._nullable || (value.__ks_func_isNullable_0() === true);
			}
			else {
				return (value.__ks_func_isAny_0() === true) && (!this._nullable || (value.__ks_func_isNullable_0() === true));
			}
		}
		__ks_func_matchContentOf_4(value) {
			return !this._explicit || ((value.isAny() === true) && (!this._nullable || (value.isNullable() === true)));
		}
		__ks_func_matchContentOf_0(value) {
			return this.__ks_func_matchContentOf_4(value);
		}
		__ks_func_matchContentOf_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_matchContentOf_4.call(that, args[0]);
				}
			}
			return super.__ks_func_matchContentOf_rt.call(null, that, Type.prototype, args);
		}
		parameter() {
			return this.__ks_func_parameter_rt.call(null, this, this, arguments);
		}
		__ks_func_parameter_4() {
			return AnyType.NullableUnexplicit;
		}
		__ks_func_parameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameter_4.call(that);
			}
			if(super.__ks_func_parameter_rt) {
				return super.__ks_func_parameter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_reference_1() {
			return this;
		}
		__ks_func_reference_0(scope) {
			return this.__ks_func_reference_1(scope);
		}
		__ks_func_reference_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_reference_1.call(that);
			}
			return super.__ks_func_reference_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_setNullable_0(nullable) {
			let type = null;
			if(this._nullable === nullable) {
				return this;
			}
			else if(this._explicit) {
				type = nullable ? AnyType.NullableExplicit : AnyType.Explicit;
			}
			else {
				type = nullable ? AnyType.NullableUnexplicit : AnyType.Unexplicit;
			}
			if(this._alien) {
				return type.flagAlien();
			}
			else {
				return type;
			}
		}
		__ks_func_split_0(types) {
			__ks_Array.__ks_func_pushUniq_0.call(types, [this._explicit ? AnyType.Explicit : AnyType.Unexplicit]);
			if(this._nullable) {
				__ks_Array.__ks_func_pushUniq_0.call(types, [Type.Null]);
			}
			return types;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			fragments.code(this._nullable ? "Any?" : "Any");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toMetadata_0(references, indexDelta, mode, module) {
			return this.__ks_func_toReference_0(references, indexDelta, mode, module);
		}
		__ks_func_toQuote_0() {
			return this._nullable ? "Any?" : "Any";
		}
		__ks_func_toReference_0(references, indexDelta, mode, module) {
			if(this._explicit) {
				return this._nullable ? "Any!?" : "Any!";
			}
			else {
				return this._nullable ? "Any?" : "Any";
			}
		}
		__ks_func_toNegativeTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			if(this._nullable) {
				fragments.code("false");
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isNull(")).compile(node).code(")");
			}
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			if(this._nullable) {
				fragments.code("true");
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isValue(")).compile(node).code(")");
			}
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toRouteTestFragments_0(fragments, node, junction) {
			return this.__ks_func_toPositiveTestFragments_0(fragments, node, junction);
		}
		__ks_func_toRouteTestFragments_1(fragments, node, argName, from, to, __ks_default_1, junction) {
			fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isVarargs(", argName, ", ", from, ", ", to, ", ", __ks_default_1, ", "));
			const literal = new Literal(false, node, node.scope(), "value");
			if(this._nullable) {
				if(node._options.format.functions === "es5") {
					fragments.code("function() { return true; }");
				}
				else {
					fragments.code("() => true");
				}
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isValue"));
			}
			fragments.code(")");
		}
		__ks_func_toTestFunctionFragments_0(fragments, node) {
			if(this._nullable) {
				if(node._options.format.functions === "es5") {
					fragments.code("function() { return true; }");
				}
				else {
					fragments.code("() => true");
				}
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isValue"));
			}
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("any", this._explicit, this._nullable);
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	AnyType.Explicit = AnyType.__ks_new_1(true, false);
	AnyType.NullableExplicit = AnyType.__ks_new_1(true, true);
	AnyType.Unexplicit = AnyType.__ks_new_1(false, false);
	AnyType.NullableUnexplicit = AnyType.__ks_new_1(false, true);
	class ArrayType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(ArrayType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._elements = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		addElement() {
			return this.__ks_func_addElement_rt.call(null, this, this, arguments);
		}
		__ks_func_addElement_0(type) {
			this._elements.push(type);
		}
		__ks_func_addElement_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addElement_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_addElement_rt) {
				return super.__ks_func_addElement_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			throw new NotSupportedException();
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			const __ks_export_1 = (() => {
				const d = new Dictionary();
				d.kind = TypeKind.Array;
				return d;
			})();
			if(this._sealed) {
				__ks_export_1.sealed = this._sealed;
			}
			__ks_export_1.elements = KSHelper.mapArray(this._elements, function(element) {
				return element.export(references, indexDelta, mode, module);
			});
			return __ks_export_1;
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getElement() {
			return this.__ks_func_getElement_rt.call(null, this, this, arguments);
		}
		__ks_func_getElement_0(index) {
			return (index >= this._elements.length) ? AnyType.NullableUnexplicit : this._elements[index];
		}
		__ks_func_getElement_rt(that, proto, args) {
			const t0 = KSType.isNumber;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getElement_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getElement_rt) {
				return super.__ks_func_getElement_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isArray_0() {
			return true;
		}
		__ks_func_isMorePreciseThan_3(value) {
			return true;
		}
		__ks_func_isMorePreciseThan_0(value) {
			return this.__ks_func_isMorePreciseThan_3(value);
		}
		__ks_func_isMorePreciseThan_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isMorePreciseThan_3.call(that, args[0]);
				}
			}
			return super.__ks_func_isMorePreciseThan_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_isNullable_0() {
			return false;
		}
		__ks_func_isSealable_0() {
			return true;
		}
		__ks_func_isSubsetOf_10(value, mode) {
			if(this.__ks_func_length_2() !== value.__ks_func_length_2()) {
				return false;
			}
			if(this.__ks_func_isSealed_0() !== value.__ks_func_isSealed_0()) {
				return false;
			}
			for(let index = 0, __ks_0 = value._elements.length, element; index < __ks_0; ++index) {
				element = value._elements[index];
				if(!(this._elements[index].isSubsetOf(element, mode) === true)) {
					return false;
				}
			}
			return true;
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, ArrayType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_10(value, mode);
			}
			return super.__ks_func_isSubsetOf_0(value, mode);
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ArrayType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_10.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, Type.prototype, args);
		}
		length() {
			return this.__ks_func_length_rt.call(null, this, this, arguments);
		}
		__ks_func_length_2() {
			return this._elements.length;
		}
		__ks_func_length_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_length_2.call(that);
			}
			if(super.__ks_func_length_rt) {
				return super.__ks_func_length_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			throw new NotImplementedException();
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			throw new NotImplementedException();
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toTestFunctionFragments_0(fragments, node) {
			if(this._elements.length === 0) {
				fragments.code($runtime.type.__ks_0(node), ".isArray");
			}
			else {
				fragments.code("value => ", $runtime.type.__ks_0(node), ".isArray(value)");
				for(let index = 0, __ks_0 = this._elements.length, value; index < __ks_0; ++index) {
					value = this._elements[index];
					fragments.code(" && ");
					value.toPositiveTestFragments(fragments, new Literal(false, node, node.scope(), KSHelper.concatString("value[", index, "]")));
				}
			}
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("array");
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.toVariations(variations);
			}
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		walk() {
			return this.__ks_func_walk_rt.call(null, this, this, arguments);
		}
		__ks_func_walk_1(fn) {
		}
		__ks_func_walk_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_walk_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_walk_rt) {
				return super.__ks_func_walk_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	const Accessibility = KSHelper.enum(Number, {
		Internal: 1,
		Private: 2,
		Protected: 3,
		Public: 4
	});
	class ClassType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(ClassType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._abstract = false;
			this._abstractMethods = new Dictionary();
			this._alterations = (() => {
				const d = new Dictionary();
				d.classMethods = new Dictionary();
				d.classVariables = new Dictionary();
				d.constructors = new Dictionary();
				d.instanceMethods = new Dictionary();
				d.instanceVariables = new Dictionary();
				return d;
			})();
			this._altering = false;
			this._classAssessments = new Dictionary();
			this._classMethods = new Dictionary();
			this._classVariables = new Dictionary();
			this._constructors = [];
			this._constructorAssessment = null;
			this._exhaustiveness = (() => {
				const d = new Dictionary();
				d.constructor = false;
				d.classMethods = new Dictionary();
				d.instanceMethods = new Dictionary();
				return d;
			})();
			this._explicitlyExported = false;
			this._extending = false;
			this._extends = null;
			this._hybrid = false;
			this._init = 0;
			this._instanceAssessments = new Dictionary();
			this._instanceMethods = new Dictionary();
			this._instanceVariables = new Dictionary();
			this._level = 0;
			this._overwritten = (() => {
				const d = new Dictionary();
				d.constructors = null;
				d.classMethods = new Dictionary();
				d.instanceMethods = new Dictionary();
				return d;
			})();
			this._predefined = false;
			this._sharedMethods = new Dictionary();
			this._seal = (() => {
				const d = new Dictionary();
				d.constructors = false;
				d.classMethods = new Dictionary();
				d.classVariables = new Dictionary();
				d.instanceMethods = new Dictionary();
				d.instanceVariables = new Dictionary();
				return d;
			})();
			this._sequences = (() => {
				const d = new Dictionary();
				d.constructors = -1;
				d.defaults = -1;
				d.destructors = -1;
				d.initializations = -1;
				d.classMethods = new Dictionary();
				d.instanceMethods = new Dictionary();
				return d;
			})();
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		addAbstractMethod() {
			return this.__ks_func_addAbstractMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_addAbstractMethod_0(name, type) {
			const sequences = this._sequences.instanceMethods;
			sequences[name] = KSType.isValue(sequences[name]) ? sequences[name] : -1;
			let index = type.__ks_func_index_0();
			if(index === -1) {
				index = ++sequences[name];
				type.__ks_func_index_1(index);
			}
			else {
				if(KSOperator.gt(index, sequences[name])) {
					sequences[name] = index;
				}
			}
			if(KSType.isArray(this._abstractMethods[name])) {
				this._abstractMethods[name].push(type);
			}
			else {
				this._abstractMethods[name] = [type];
			}
			type.__ks_func_flagAbstract_1();
			type.__ks_func_flagInstance_0();
			return index;
		}
		__ks_func_addAbstractMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, ClassMethodType);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addAbstractMethod_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addAbstractMethod_rt) {
				return super.__ks_func_addAbstractMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addClassMethod() {
			return this.__ks_func_addClassMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_addClassMethod_0(name, type) {
			const root = this.__ks_func_ancestor_0();
			const sequences = root._sequences.classMethods;
			this._classMethods[name] = KSType.isValue(this._classMethods[name]) ? this._classMethods[name] : [];
			sequences[name] = KSType.isValue(sequences[name]) ? sequences[name] : -1;
			let index = type.__ks_func_index_0();
			if(index === -1) {
				index = ++sequences[name];
				type.__ks_func_index_1(index);
			}
			else {
				if(KSOperator.gt(index, sequences[name])) {
					sequences[name] = index;
				}
			}
			this._classMethods[name].push(type);
			if(type.__ks_func_isSealed_0() === true) {
				this._seal.classMethods[name] = true;
			}
			else if(this._alien) {
				type.__ks_func_flagAlien_0();
			}
			if(!KSType.isValue(this._alterations.classMethods[name])) {
				this._alterations.classMethods[name] = new Dictionary();
			}
			this._alterations.classMethods[name][index] = true;
			return index;
		}
		__ks_func_addClassMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, ClassMethodType);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addClassMethod_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addClassMethod_rt) {
				return super.__ks_func_addClassMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addClassVariable() {
			return this.__ks_func_addClassVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_addClassVariable_0(name, type) {
			this._classVariables[name] = type;
			if(type.__ks_func_isSealed_0() === true) {
				this._seal.classVariables[name] = true;
			}
			this._alterations.classVariables[name] = true;
		}
		__ks_func_addClassVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, ClassVariableType);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addClassVariable_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addClassVariable_rt) {
				return super.__ks_func_addClassVariable_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addConstructor() {
			return this.__ks_func_addConstructor_rt.call(null, this, this, arguments);
		}
		__ks_func_addConstructor_0(type) {
			let index = type.__ks_func_index_0();
			if(index === -1) {
				index = ++this._sequences.constructors;
				type.__ks_func_index_1(index);
			}
			else {
				if(KSOperator.gt(index, this._sequences.constructors)) {
					this._sequences.constructors = index;
				}
			}
			type.__ks_func_setClass_0(this);
			this._constructors.push(type);
			if(type.__ks_func_isSealed_0() === true) {
				this._seal.constructors = true;
			}
			this._alterations.constructors[index] = true;
			return index;
		}
		__ks_func_addConstructor_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ClassConstructorType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addConstructor_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_addConstructor_rt) {
				return super.__ks_func_addConstructor_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addInstanceMethod() {
			return this.__ks_func_addInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_addInstanceMethod_0(name, type) {
			const root = this.__ks_func_ancestor_0();
			const sequences = root._sequences.instanceMethods;
			this._instanceMethods[name] = KSType.isValue(this._instanceMethods[name]) ? this._instanceMethods[name] : [];
			sequences[name] = KSType.isValue(sequences[name]) ? sequences[name] : -1;
			let index = type.__ks_func_index_0();
			if(index === -1) {
				index = ++sequences[name];
				type.__ks_func_index_1(index);
			}
			else {
				if(KSOperator.gt(index, sequences[name])) {
					sequences[name] = index;
				}
			}
			this._instanceMethods[name].push(type);
			type.__ks_func_flagInstance_0();
			if(type.__ks_func_isSealed_0() === true) {
				this._seal.instanceMethods[name] = true;
			}
			else if(this._alien) {
				type.__ks_func_flagAlien_0();
			}
			if(!KSType.isValue(this._alterations.instanceMethods[name])) {
				this._alterations.instanceMethods[name] = new Dictionary();
			}
			this._alterations.instanceMethods[name][index] = true;
			return index;
		}
		__ks_func_addInstanceMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, ClassMethodType);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addInstanceMethod_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addInstanceMethod_rt) {
				return super.__ks_func_addInstanceMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addInstanceVariable() {
			return this.__ks_func_addInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_addInstanceVariable_0(name, type) {
			this._instanceVariables[name] = type;
			if(this._alien) {
				type.__ks_func_flagAlien_0();
			}
			if(type.__ks_func_isSealed_0() === true) {
				this._seal.instanceVariables[name] = true;
			}
			this._alterations.instanceVariables[name] = true;
		}
		__ks_func_addInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, ClassVariableType);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addInstanceVariable_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addInstanceVariable_rt) {
				return super.__ks_func_addInstanceVariable_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addPropertyFromAST() {
			return this.__ks_func_addPropertyFromAST_rt.call(null, this, this, arguments);
		}
		__ks_func_addPropertyFromAST_0(data, node) {
			const options = Attribute.configure(data, null, AttributeTarget.Property, node.file());
			let __ks_0 = data.kind.valueOf();
			if(__ks_0 === NodeKind.FieldDeclaration.value) {
				let instance = true;
				for(let i = 0, __ks_1 = data.modifiers.length; i < __ks_1 && instance; ++i) {
					if(KSHelper.valueOf(data.modifiers[i].kind) === ModifierKind.Static.value) {
						instance = false;
					}
				}
				const type = ClassVariableType.fromAST(data, node);
				if(instance) {
					this.addInstanceVariable(data.name.name, type);
				}
				else {
					this.addClassVariable(data.name.name, type);
				}
			}
			else if(__ks_0 === NodeKind.MethodDeclaration.value) {
				if(this.isConstructor(data.name.name) === true) {
					const type = ClassConstructorType.fromAST(data, node);
					if(options.rules.nonExhaustive === true) {
						this._exhaustiveness.constructor = false;
					}
					this.__ks_func_addConstructor_0(type);
				}
				else if(this.isDestructor(data.name.name) === true) {
					throw new NotImplementedException(node);
				}
				else {
					let instance = true;
					for(let i = 0, __ks_1 = data.modifiers.length; i < __ks_1 && instance; ++i) {
						if(KSHelper.valueOf(data.modifiers[i].kind) === ModifierKind.Static.value) {
							instance = false;
						}
					}
					const type = ClassMethodType.fromAST(data, node);
					if(options.rules.nonExhaustive === true) {
						if(instance) {
							this._exhaustiveness.instanceMethods[data.name.name] = false;
						}
						else {
							this._exhaustiveness.classMethods[data.name.name] = false;
						}
					}
					if(this.__ks_func_isAlien_0() === true) {
						type.__ks_func_flagAlien_0();
					}
					if(instance) {
						this.__ks_func_dedupInstanceMethod_0(KSHelper.cast(data.name.name, "String", false, null, "String"), type);
					}
					else {
						this.__ks_func_dedupClassMethod_0(KSHelper.cast(data.name.name, "String", false, null, "String"), type);
					}
				}
			}
			else {
				throw new NotSupportedException(KSHelper.concatString("Unexpected kind ", data.kind), node);
			}
		}
		__ks_func_addPropertyFromAST_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_addPropertyFromAST_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addPropertyFromAST_rt) {
				return super.__ks_func_addPropertyFromAST_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		ancestor() {
			return this.__ks_func_ancestor_rt.call(null, this, this, arguments);
		}
		__ks_func_ancestor_0() {
			if(this._extending) {
				return this._extends.__ks_func_type_0().ancestor();
			}
			else {
				return this;
			}
		}
		__ks_func_ancestor_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_ancestor_0.call(that);
			}
			if(super.__ks_func_ancestor_rt) {
				return super.__ks_func_ancestor_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		checkVariablesInitializations() {
			return this.__ks_func_checkVariablesInitializations_rt.call(null, this, this, arguments);
		}
		__ks_func_checkVariablesInitializations_0(node) {
			if(this._alien) {
				return;
			}
			for(const name in this._instanceVariables) {
				const variable = this._instanceVariables[name];
				if(variable.isRequiringInitialization() === true) {
					SyntaxException.__ks_sttc_throwNotInitializedField_0(name, node);
				}
			}
			if(this._extending) {
				this._extends.__ks_func_type_0().checkVariablesInitializations(node);
			}
		}
		__ks_func_checkVariablesInitializations_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_checkVariablesInitializations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_checkVariablesInitializations_rt) {
				return super.__ks_func_checkVariablesInitializations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			const that = ClassType.__ks_new_0(this._scope);
			that.__ks_func_copyFrom_1(this);
			if(this._requirement || this._alien) {
				that.__ks_func_originals_2(this);
			}
			return that;
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		copyFrom() {
			return this.__ks_func_copyFrom_rt.call(null, this, this, arguments);
		}
		__ks_func_copyFrom_1(src) {
			this._abstract = src._abstract;
			this._alien = src._alien;
			this._extending = src._extending;
			this._extends = src._extends;
			this._hybrid = src._hybrid;
			this._sealed = src._sealed;
			this._systemic = src._systemic;
			for(const name in src._abstractMethods) {
				const methods = src._abstractMethods[name];
				this._abstractMethods[name] = [].concat(methods);
			}
			for(const name in src._classMethods) {
				const methods = src._classMethods[name];
				this._classMethods[name] = [].concat(methods);
			}
			for(const name in src._instanceMethods) {
				const methods = src._instanceMethods[name];
				this._instanceMethods[name] = [].concat(methods);
			}
			for(const name in src._classVariables) {
				const variable = src._classVariables[name];
				this._classVariables[name] = variable;
			}
			for(const name in src._instanceVariables) {
				const variable = src._instanceVariables[name];
				this._instanceVariables[name] = variable;
			}
			this._constructors.push(...src._constructors);
			if(src._sealed) {
				this._seal = __ks_Dictionary._sm_clone(src._seal);
			}
			this._exhaustive = src._exhaustive;
			this._exhaustiveness = __ks_Dictionary._sm_clone(src._exhaustiveness);
			this._sequences = __ks_Dictionary._sm_clone(src._sequences);
			if(src._requirement || src._alien) {
				this.__ks_func_originals_2(src);
			}
			return this;
		}
		__ks_func_copyFrom_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ClassType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_copyFrom_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_copyFrom_rt) {
				return super.__ks_func_copyFrom_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		dedupAbstractMethod() {
			return this.__ks_func_dedupAbstractMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_dedupAbstractMethod_0(name, type) {
			let id = type.__ks_func_index_0();
			if(KSType.isValue(id)) {
				if(KSType.isArray(this._abstractMethods[name])) {
					for(let __ks_0 = 0, __ks_1 = this._abstractMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = this._abstractMethods[name][__ks_0];
						if(method.index() === id) {
							return id;
						}
					}
				}
			}
			return this.__ks_func_addAbstractMethod_0(name, type);
		}
		__ks_func_dedupAbstractMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, ClassMethodType);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_dedupAbstractMethod_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_dedupAbstractMethod_rt) {
				return super.__ks_func_dedupAbstractMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		dedupClassMethod() {
			return this.__ks_func_dedupClassMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_dedupClassMethod_0(name, type) {
			let id = type.__ks_func_index_0();
			if(KSType.isValue(id)) {
				if(KSType.isArray(this._classMethods[name])) {
					for(let __ks_0 = 0, __ks_1 = this._classMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = this._classMethods[name][__ks_0];
						if(method.index() === id) {
							return id;
						}
					}
				}
			}
			let __ks_overwrite_1 = type.__ks_func_overwrite_2();
			if(KSType.isValue(__ks_overwrite_1)) {
				const methods = this._classMethods[name];
				for(let __ks_0 = 0, __ks_1 = __ks_overwrite_1.length, data; __ks_0 < __ks_1; ++__ks_0) {
					data = __ks_overwrite_1[__ks_0];
					for(let i = KSOperator.subtraction(methods.length, 1); i >= 0; --i) {
						if(methods[i].index() === data) {
							methods.splice(i, 1);
							break;
						}
					}
				}
				type.__ks_func_overwrite_3(null);
			}
			return this.__ks_func_addClassMethod_0(name, type);
		}
		__ks_func_dedupClassMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, ClassMethodType);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_dedupClassMethod_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_dedupClassMethod_rt) {
				return super.__ks_func_dedupClassMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		dedupInstanceMethod() {
			return this.__ks_func_dedupInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_dedupInstanceMethod_0(name, type) {
			let id = type.__ks_func_index_0();
			if(KSType.isValue(id)) {
				if(KSType.isArray(this._instanceMethods[name])) {
					for(let __ks_0 = 0, __ks_1 = this._instanceMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = this._instanceMethods[name][__ks_0];
						if(method.index() === id) {
							return id;
						}
					}
				}
			}
			let __ks_overwrite_1 = type.__ks_func_overwrite_2();
			if(KSType.isValue(__ks_overwrite_1)) {
				let methods = this._instanceMethods[name];
				if(KSType.isValue(methods)) {
					for(let __ks_0 = 0, __ks_1 = __ks_overwrite_1.length, data; __ks_0 < __ks_1; ++__ks_0) {
						data = __ks_overwrite_1[__ks_0];
						for(let i = KSOperator.subtraction(methods.length, 1); i >= 0; --i) {
							if(methods[i].index() === data) {
								methods.splice(i, 1);
								break;
							}
						}
					}
				}
			}
			return this.__ks_func_addInstanceMethod_0(name, type);
		}
		__ks_func_dedupInstanceMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, ClassMethodType);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_dedupInstanceMethod_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_dedupInstanceMethod_rt) {
				return super.__ks_func_dedupInstanceMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			const exhaustive = this.__ks_func_isExhaustive_0();
			let __ks_export_1 = null;
			let exportSuper = false;
			if(KSType.isValue(this._majorOriginal)) {
				if((mode & ExportMode.Export) !== 0n) {
					exportSuper = this.__ks_func_hasExportableOriginals_0();
				}
				else if((mode & ExportMode.Requirement) !== 0n) {
					let original = this._majorOriginal;
					while(KSType.isValue(original)) {
						if((original.__ks_func_isRequirement_0() === true) || (original.__ks_func_referenceIndex_0() !== -1)) {
							exportSuper = true;
							break;
						}
						else {
							original = original._majorOriginal;
						}
					}
				}
			}
			if(exportSuper) {
				__ks_export_1 = (() => {
					const d = new Dictionary();
					d.kind = TypeKind.Class;
					return d;
				})();
				if((mode & ExportMode.Export) !== 0n) {
					const origin = this.__ks_func_origin_0();
					const extern = ClassType.__ks_sttc_getExternReference_0([this._majorOriginal, this._minorOriginal]);
					const require = ClassType.getRequireReference(this._majorOriginal);
					if(KSType.isValue(extern)) {
						if(KSType.isValue(require)) {
							if(KSOperator.bitwiseAnd(origin, TypeOrigin.ExternOrRequire) !== 0n) {
								__ks_export_1.originals = [extern, require];
							}
							else if(KSOperator.bitwiseAnd(origin, TypeOrigin.RequireOrExtern) !== 0n) {
								__ks_export_1.originals = [require, extern];
							}
							else {
								__ks_export_1.original = require;
							}
						}
						else {
							__ks_export_1.original = extern;
						}
					}
					else {
						__ks_export_1.original = require;
					}
				}
				else {
					let __ks_0;
					__ks_export_1.original = KSType.isValue(__ks_0 = ClassType.getRequireReference(this._majorOriginal)) ? __ks_0 : ClassType.__ks_sttc_getExternReference_0([this._majorOriginal]);
				}
				__ks_export_1.exhaustive = exhaustive;
				__ks_export_1.constructors = [];
				__ks_export_1.instanceVariables = new Dictionary();
				__ks_export_1.classVariables = new Dictionary();
				__ks_export_1.instanceMethods = new Dictionary();
				__ks_export_1.classMethods = new Dictionary();
				this._majorOriginal.exportProperties(__ks_export_1, references, indexDelta, mode, module, this._overwritten);
				let original = this._majorOriginal;
				while(original.__ks_func_referenceIndex_0() === -1) {
					original = original.__ks_func_majorOriginal_1();
				}
				let __ks_0;
				const originalConstructors = KSType.isValue(original) && KSType.isValue(__ks_0 = original.__ks_func_listConstructors_0()) ? __ks_0.map((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (method, __ks_0, __ks_1) => {
						return method.index();
					};
					return __ks_rt;
				})()) : null;
				for(let __ks_0 = 0, __ks_1 = this._constructors.length, __ks_constructor_1; __ks_0 < __ks_1; ++__ks_0) {
					__ks_constructor_1 = this._constructors[__ks_0];
					if(__ks_constructor_1.isExportable(mode) === true) {
						if(this._alterations.constructors[__ks_constructor_1.index()] === true) {
							__ks_export_1.constructors.push(__ks_constructor_1.export(references, indexDelta, mode, module, originalConstructors));
						}
					}
				}
				for(const name in this._instanceVariables) {
					const variable = this._instanceVariables[name];
					if(this._alterations.instanceVariables[name] === true) {
						__ks_export_1.instanceVariables[name] = variable.export(references, indexDelta, mode, module);
					}
				}
				for(const name in this._classVariables) {
					const variable = this._classVariables[name];
					if(this._alterations.classVariables[name] === true) {
						__ks_export_1.classVariables[name] = variable.export(references, indexDelta, mode, module);
					}
				}
				for(const name in this._instanceMethods) {
					const methods = this._instanceMethods[name];
					const exportedMethods = KSType.isValue(__ks_export_1.instanceMethods[name]) ? __ks_export_1.instanceMethods[name] : [];
					const originalMethods = KSType.isValue(original) && KSType.isValue(__ks_0 = original.__ks_func_listInstanceMethods_0(name)) ? __ks_0.map((() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 3) {
								if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (method, __ks_0, __ks_1) => {
							return method.index();
						};
						return __ks_rt;
					})()) : null;
					for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						if(method.isExportable(mode) === true) {
							let __ks_2;
							if(KSType.isValue(this._alterations.instanceMethods[name]) ? this._alterations.instanceMethods[name][method.index()] === true : false) {
								exportedMethods.push(method.export(references, indexDelta, mode, module, originalMethods));
							}
						}
					}
					if(exportedMethods.length !== 0) {
						__ks_export_1.instanceMethods[name] = exportedMethods;
					}
				}
				for(const name in this._classMethods) {
					const methods = this._classMethods[name];
					const exportedMethods = KSType.isValue(__ks_export_1.classMethods[name]) ? __ks_export_1.classMethods[name] : [];
					const originalMethods = KSType.isValue(original) && KSType.isValue(__ks_0 = original.__ks_func_listClassMethods_0(name)) ? __ks_0.map((() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 3) {
								if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (method, __ks_0, __ks_1) => {
							return method.index();
						};
						return __ks_rt;
					})()) : null;
					for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						if(method.isExportable(mode) === true) {
							let __ks_2;
							if(KSType.isValue(this._alterations.classMethods[name]) ? this._alterations.classMethods[name][method.index()] === true : false) {
								exportedMethods.push(method.export(references, indexDelta, mode, module, originalMethods));
							}
						}
					}
					if(exportedMethods.length !== 0) {
						__ks_export_1.classMethods[name] = exportedMethods;
					}
				}
			}
			else {
				__ks_export_1 = (() => {
					const d = new Dictionary();
					d.kind = TypeKind.Class;
					d.abstract = this._abstract;
					d.alien = this._alien;
					d.hybrid = this._hybrid;
					d.sealed = this._sealed;
					d.systemic = this._systemic;
					d.exhaustive = exhaustive;
					d.constructors = KSHelper.mapArray(this._constructors, function(__ks_constructor_1) {
						return __ks_constructor_1.export(references, indexDelta, mode, module, null);
					});
					d.instanceVariables = new Dictionary();
					d.classVariables = new Dictionary();
					d.instanceMethods = new Dictionary();
					d.classMethods = new Dictionary();
					return d;
				})();
				for(const name in this._instanceVariables) {
					const variable = this._instanceVariables[name];
					__ks_export_1.instanceVariables[name] = variable.export(references, indexDelta, mode, module);
				}
				for(const name in this._classVariables) {
					const variable = this._classVariables[name];
					__ks_export_1.classVariables[name] = variable.export(references, indexDelta, mode, module);
				}
				for(const name in this._instanceMethods) {
					const methods = this._instanceMethods[name];
					const exportedMethods = KSHelper.mapArray(methods, function(method) {
						return method.export(references, indexDelta, mode, module, null);
					}, function(method) {
						return method.isExportable(mode);
					});
					if(exportedMethods.length !== 0) {
						__ks_export_1.instanceMethods[name] = exportedMethods;
					}
				}
				for(const name in this._classMethods) {
					const methods = this._classMethods[name];
					const exportedMethods = KSHelper.mapArray(methods, function(method) {
						return method.export(references, indexDelta, mode, module, null);
					}, function(method) {
						return method.isExportable(mode);
					});
					if(exportedMethods.length !== 0) {
						__ks_export_1.classMethods[name] = exportedMethods;
					}
				}
				if(this._abstract) {
					__ks_export_1.abstractMethods = new Dictionary();
					for(const name in this._abstractMethods) {
						const methods = this._abstractMethods[name];
						const exportedMethods = KSHelper.mapArray(methods, function(method) {
							return method.export(references, indexDelta, mode, module, null);
						}, function(method) {
							return method.isExportable(mode);
						});
						if(exportedMethods.length !== 0) {
							__ks_export_1.abstractMethods[name] = exportedMethods;
						}
					}
				}
				if(this._extending) {
					__ks_export_1.extends = this._extends.__ks_func_metaReference_0(references, indexDelta, mode, module);
				}
			}
			if(((mode & ExportMode.Export) === 0n) && KSType.isValue(this._origin) && ((this._origin & TypeOrigin.Extern) !== 0n) && ((this._origin & TypeOrigin.Import) === 0n)) {
				const origin = TypeOrigin(this._origin & ~TypeOrigin.Extern & ~TypeOrigin.Require);
				if(origin.value !== 0) {
					__ks_export_1.origin = origin;
				}
			}
			__ks_export_1.sequences = [this._sequences.initializations, this._sequences.defaults, this._sequences.destructors];
			const exhaustiveness = new Dictionary();
			if(this._exhaustiveness.constructor !== exhaustive) {
				exhaustiveness.constructor = this._exhaustiveness.constructor;
			}
			for(const name in this._exhaustiveness.classMethods) {
				const value = this._exhaustiveness.classMethods[name];
				if(value !== exhaustive) {
					if(!KSType.isValue(exhaustiveness.classMethods)) {
						exhaustiveness.classMethods = new Dictionary();
					}
					exhaustiveness.classMethods[name] = value;
				}
			}
			for(const name in this._exhaustiveness.instanceMethods) {
				const value = this._exhaustiveness.instanceMethods[name];
				if(value !== exhaustive) {
					if(!KSType.isValue(exhaustiveness.instanceMethods)) {
						exhaustiveness.instanceMethods = new Dictionary();
					}
					exhaustiveness.instanceMethods[name] = value;
				}
			}
			if(!__ks_Dictionary.__ks_sttc_isEmpty_0(exhaustiveness)) {
				__ks_export_1.exhaustiveness = exhaustiveness;
			}
			if(this._sealed) {
				__ks_export_1.sharedMethods = KSHelper.concatDictionary(this._sharedMethods);
			}
			return __ks_export_1;
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		exportProperties() {
			return this.__ks_func_exportProperties_rt.call(null, this, this, arguments);
		}
		__ks_func_exportProperties_0(__ks_export_1, references, indexDelta, mode, module, overwritten) {
			if(!(this._referenceIndex === -1)) {
				return;
			}
			KSType.isValue(this._majorOriginal) ? this._majorOriginal.__ks_func_exportProperties_0(__ks_export_1, references, indexDelta, mode, module, overwritten) : null;
			for(const name in this._instanceVariables) {
				const variable = this._instanceVariables[name];
				if(this._alterations.instanceVariables[name] === true) {
					__ks_export_1.instanceVariables[name] = variable.export(references, indexDelta, mode, module);
				}
			}
			for(const name in this._classVariables) {
				const variable = this._classVariables[name];
				if(this._alterations.classVariables[name] === true) {
					__ks_export_1.classVariables[name] = variable.export(references, indexDelta, mode, module);
				}
			}
			const ignoredConstructors = KSType.isValue(overwritten.constructors) ? overwritten.constructors : [];
			for(let __ks_0 = 0, __ks_1 = this._constructors.length, __ks_constructor_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_constructor_1 = this._constructors[__ks_0];
				if(__ks_constructor_1.isExportable(mode) === true) {
					if((this._alterations.constructors[__ks_constructor_1.index()] === true) && !__ks_Array.__ks_func_contains_0.call(KSHelper.cast(ignoredConstructors, "Array", false, null, "Array"), __ks_constructor_1.index())) {
						__ks_export_1.constructors.push(__ks_constructor_1.export(references, indexDelta, mode, module, true));
					}
				}
			}
			for(const name in this._instanceMethods) {
				const methods = this._instanceMethods[name];
				const exportedMethods = KSType.isValue(__ks_export_1.instanceMethods[name]) ? __ks_export_1.instanceMethods[name] : [];
				const ignoredMethods = KSType.isValue(overwritten.instanceMethods[name]) ? overwritten.instanceMethods[name] : [];
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					if(method.isExportable(mode) === true) {
						let __ks_2;
						if((KSType.isValue(this._alterations.instanceMethods[name]) ? this._alterations.instanceMethods[name][method.index()] === true : false) && !__ks_Array.__ks_func_contains_0.call(KSHelper.cast(ignoredMethods, "Array", false, null, "Array"), method.index())) {
							exportedMethods.push(method.export(references, indexDelta, mode, module, true));
						}
					}
				}
				if(exportedMethods.length !== 0) {
					__ks_export_1.instanceMethods[name] = exportedMethods;
				}
			}
			for(const name in this._classMethods) {
				const methods = this._classMethods[name];
				const exportedMethods = KSType.isValue(__ks_export_1.classMethods[name]) ? __ks_export_1.classMethods[name] : [];
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					if(method.isExportable(mode) === true) {
						let __ks_2;
						if(KSType.isValue(this._alterations.classMethods[name]) ? this._alterations.classMethods[name][method.index()] === true : false) {
							exportedMethods.push(method.export(references, indexDelta, mode, module, true));
						}
					}
				}
				if(exportedMethods.length !== 0) {
					__ks_export_1.classMethods[name] = exportedMethods;
				}
			}
		}
		__ks_func_exportProperties_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 6) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4]) && t0(args[5])) {
					return proto.__ks_func_exportProperties_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
				}
			}
			if(super.__ks_func_exportProperties_rt) {
				return super.__ks_func_exportProperties_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		extends() {
			return this.__ks_func_extends_rt.call(null, this, this, arguments);
		}
		__ks_func_extends_0() {
			return this._extends;
		}
		__ks_func_extends_1(__ks_extends_1) {
			if(__ks_extends_1 === void 0) {
				__ks_extends_1 = null;
			}
			this._extends = __ks_extends_1;
			this._extending = true;
			const type = this._extends.__ks_func_type_0();
			if((type.isAlien() === true) || (type.isHybrid() === true)) {
				this._hybrid = true;
			}
			this._sequences.classMethods = __ks_Dictionary._sm_clone(type._sequences.classMethods);
			this._sequences.instanceMethods = __ks_Dictionary._sm_clone(type._sequences.instanceMethods);
			this._level = KSHelper.cast(type.level(), "Number", false, null, "Number") + 1;
		}
		__ks_func_extends_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, ClassType)) || KSType.isNull(value);
			if(args.length === 0) {
				return proto.__ks_func_extends_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_extends_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_extends_rt) {
				return super.__ks_func_extends_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		flagAbstract() {
			return this.__ks_func_flagAbstract_rt.call(null, this, this, arguments);
		}
		__ks_func_flagAbstract_0() {
			this._abstract = true;
		}
		__ks_func_flagAbstract_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagAbstract_0.call(that);
			}
			if(super.__ks_func_flagAbstract_rt) {
				return super.__ks_func_flagAbstract_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_flagExported_0(explicitly) {
			if(this._exported && (this._explicitlyExported || !explicitly)) {
				return this;
			}
			this._exported = true;
			this._explicitlyExported = explicitly;
			for(let __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.flagExported(false);
			}
			for(let __ks_0 in this._instanceVariables) {
				const variable = this._instanceVariables[__ks_0];
				variable.type().flagExported(false);
			}
			for(let __ks_0 in this._classVariables) {
				const variable = this._classVariables[__ks_0];
				variable.type().flagExported(false);
			}
			for(let __ks_0 in this._instanceMethods) {
				const methods = this._instanceMethods[__ks_0];
				if(KSType.isArray(methods)) {
					for(let __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
						method = methods[__ks_1];
						method.flagExported(false);
					}
				}
			}
			for(let __ks_0 in this._classMethods) {
				const methods = this._classMethods[__ks_0];
				if(KSType.isArray(methods)) {
					for(let __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
						method = methods[__ks_1];
						method.flagExported(false);
					}
				}
			}
			if(this._extending) {
				this._extends.__ks_func_flagExported_0(explicitly);
			}
			return this;
		}
		filterAbstractMethods() {
			return this.__ks_func_filterAbstractMethods_rt.call(null, this, this, arguments);
		}
		__ks_func_filterAbstractMethods_0(abstractMethods) {
			if(this._extending) {
				this._extends.__ks_func_type_0().filterAbstractMethods(abstractMethods);
			}
			if(this._abstract) {
				for(const name in this._abstractMethods) {
					const methods = this._abstractMethods[name];
					if(!KSType.isArray(abstractMethods[name])) {
						abstractMethods[name] = [];
					}
					__ks_Array.__ks_func_append_0.call(KSHelper.cast(abstractMethods[name], "Array", false, null, "Array"), [methods]);
				}
			}
			const matchables = [];
			let method = null, index = null;
			for(const name in abstractMethods) {
				const methods = abstractMethods[name];
				if(KSType.isArray(this._instanceMethods[name])) {
					index = methods.length - 1;
					for(let __ks_0 = 0; index >= __ks_0; --index) {
						method = methods[index];
						if(method.isSubsetOf(this._instanceMethods[name], MatchingMode.FunctionSignature) === true) {
							methods.splice(index, 1);
						}
					}
					if(methods.length === 0) {
						delete abstractMethods[name];
					}
				}
			}
		}
		__ks_func_filterAbstractMethods_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_filterAbstractMethods_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_filterAbstractMethods_rt) {
				return super.__ks_func_filterAbstractMethods_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_flagAltering_0() {
			if(KSType.isValue(this._majorOriginal)) {
				this._altering = true;
			}
			return this;
		}
		flagPredefined() {
			return this.__ks_func_flagPredefined_rt.call(null, this, this, arguments);
		}
		__ks_func_flagPredefined_0() {
			this._predefined = true;
		}
		__ks_func_flagPredefined_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagPredefined_0.call(that);
			}
			if(super.__ks_func_flagPredefined_rt) {
				return super.__ks_func_flagPredefined_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_flagRequirement_0() {
			super.__ks_func_flagRequirement_0();
			KSType.isValue(this._majorOriginal) ? this._majorOriginal.__ks_func_unflagRequired_0() : null;
			return this;
		}
		__ks_func_flagSealed_0() {
			this._sealed = true;
			return this;
		}
		forEachInstanceVariables() {
			return this.__ks_func_forEachInstanceVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_forEachInstanceVariables_0(fn) {
			for(const name in this._instanceVariables) {
				const variable = this._instanceVariables[name];
				fn(name, variable);
			}
			if(this._extending) {
				this._extends.__ks_func_type_0().forEachInstanceVariables(fn);
			}
		}
		__ks_func_forEachInstanceVariables_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_forEachInstanceVariables_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_forEachInstanceVariables_rt) {
				return super.__ks_func_forEachInstanceVariables_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getAbstractMethod() {
			return this.__ks_func_getAbstractMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_getAbstractMethod_0(name, type) {
			if(KSType.isArray(this._abstractMethods[name])) {
				for(let __ks_0 = 0, __ks_1 = this._abstractMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._abstractMethods[name][__ks_0];
					if(type.isMatching(method, MatchingMode.FunctionSignature) === true) {
						return method;
					}
				}
			}
			if(this._extending) {
				return this._extends.__ks_func_type_0().getAbstractMethod(name, type);
			}
			else {
				return null;
			}
		}
		__ks_func_getAbstractMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_getAbstractMethod_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getAbstractMethod_rt) {
				return super.__ks_func_getAbstractMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getClassAssessment() {
			return this.__ks_func_getClassAssessment_rt.call(null, this, this, arguments);
		}
		__ks_func_getClassAssessment_0(name, node) {
			if(!KSType.isArray(this._classMethods[name])) {
				if(this._extending) {
					return this._extends.__ks_func_type_0().getClassAssessment(name, node);
				}
				else {
					return null;
				}
			}
			if(!KSType.isDictionary(this._classAssessments[name])) {
				const methods = [...this._classMethods[name]];
				let that = this;
				while((methods.length === 0) && (that.__ks_func_isExtending_0() === true)) {
					that = that.__ks_func_extends_0().type();
					let m = that.__ks_func_listClassMethods_0(name);
					if(KSType.isValue(m)) {
						for(let __ks_0 = 0, __ks_1 = m.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = m[__ks_0];
							method.pushTo(methods);
						}
					}
				}
				this._classAssessments[name] = Router.assess.__ks_1(methods, name, node);
			}
			return this._classAssessments[name];
		}
		__ks_func_getClassAssessment_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_getClassAssessment_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getClassAssessment_rt) {
				return super.__ks_func_getClassAssessment_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getClassProperty() {
			return this.__ks_func_getClassProperty_rt.call(null, this, this, arguments);
		}
		__ks_func_getClassProperty_0(name) {
			if(KSType.isArray(this._classMethods[name])) {
				return this._scope.__ks_func_reference_0("Function");
			}
			else {
				return KSType.isValue(this._classVariables[name]) ? this._classVariables[name] : Type.Any;
			}
		}
		__ks_func_getClassProperty_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getClassProperty_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getClassProperty_rt) {
				return super.__ks_func_getClassProperty_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getClassVariable() {
			return this.__ks_func_getClassVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_getClassVariable_0(name) {
			let variable = this._classVariables[name];
			if(KSType.isValue(variable)) {
				return variable;
			}
			return null;
		}
		__ks_func_getClassVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getClassVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getClassVariable_rt) {
				return super.__ks_func_getClassVariable_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getClassWithInstanceMethod() {
			return this.__ks_func_getClassWithInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_getClassWithInstanceMethod_0(name, that) {
			if(KSType.isArray(this._instanceMethods[name])) {
				return that;
			}
			return this._extends.__ks_func_type_0().getClassWithInstanceMethod(name, this._extends);
		}
		__ks_func_getClassWithInstanceMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, NamedType);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_getClassWithInstanceMethod_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getClassWithInstanceMethod_rt) {
				return super.__ks_func_getClassWithInstanceMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getConstructor() {
			return this.__ks_func_getConstructor_rt.call(null, this, this, arguments);
		}
		__ks_func_getConstructor_0(type, mode) {
			if((this._constructors.length === 0) && this._extending) {
				return this._extends.__ks_func_type_0().getConstructor(type);
			}
			const result = [];
			for(let __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				if(method.isSubsetOf(type, mode) === true) {
					return method;
				}
			}
			if(result.length === 1) {
				return result[0];
			}
			else {
				return null;
			}
		}
		__ks_func_getConstructor_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, FunctionType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_getConstructor_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getConstructor_rt) {
				return super.__ks_func_getConstructor_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getConstructorAssessment() {
			return this.__ks_func_getConstructorAssessment_rt.call(null, this, this, arguments);
		}
		__ks_func_getConstructorAssessment_0(name, node) {
			if(this._constructorAssessment === null) {
				const methods = this.__ks_func_listAccessibleConstructors_0();
				this._constructorAssessment = Router.assess(methods, name, node);
			}
			return this._constructorAssessment;
		}
		__ks_func_getConstructorAssessment_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_getConstructorAssessment_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getConstructorAssessment_rt) {
				return super.__ks_func_getConstructorAssessment_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getConstructorCount() {
			return this.__ks_func_getConstructorCount_rt.call(null, this, this, arguments);
		}
		__ks_func_getConstructorCount_0() {
			return KSOperator.addOrConcat(this._sequences.constructors, 1);
		}
		__ks_func_getConstructorCount_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getConstructorCount_0.call(that);
			}
			if(super.__ks_func_getConstructorCount_rt) {
				return super.__ks_func_getConstructorCount_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getDestructorCount() {
			return this.__ks_func_getDestructorCount_rt.call(null, this, this, arguments);
		}
		__ks_func_getDestructorCount_0() {
			return KSOperator.addOrConcat(this._sequences.destructors, 1);
		}
		__ks_func_getDestructorCount_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getDestructorCount_0.call(that);
			}
			if(super.__ks_func_getDestructorCount_rt) {
				return super.__ks_func_getDestructorCount_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getHierarchy() {
			return this.__ks_func_getHierarchy_rt.call(null, this, this, arguments);
		}
		__ks_func_getHierarchy_1(name) {
			if(this._extending) {
				let __ks_class_1 = this.__ks_func_extends_0();
				const hierarchy = [name, __ks_class_1.name()];
				while(__ks_class_1.type().isExtending() === true) {
					hierarchy.push((__ks_class_1 = __ks_class_1.type().extends()).name());
				}
				return hierarchy;
			}
			else {
				return [name];
			}
		}
		__ks_func_getHierarchy_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getHierarchy_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_getHierarchy_rt) {
				return super.__ks_func_getHierarchy_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getHybridConstructor() {
			return this.__ks_func_getHybridConstructor_rt.call(null, this, this, arguments);
		}
		__ks_func_getHybridConstructor_0(namedClass) {
			if(this._sealed) {
				if(this._seal.constructors === true) {
					return namedClass;
				}
			}
			else if(this._extending) {
				return this._extends.__ks_func_type_0().getHybridConstructor(this._extends);
			}
			return null;
		}
		__ks_func_getHybridConstructor_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, ClassType));
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getHybridConstructor_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getHybridConstructor_rt) {
				return super.__ks_func_getHybridConstructor_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getHybridMethod() {
			return this.__ks_func_getHybridMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_getHybridMethod_0(name, namedClass) {
			if(this._sealed) {
				if(this._seal.instanceMethods[name] === true) {
					return namedClass;
				}
			}
			else if(this._extending) {
				return this._extends.__ks_func_type_0().getHybridMethod(name, this._extends);
			}
			return null;
		}
		__ks_func_getHybridMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, ClassType));
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_getHybridMethod_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getHybridMethod_rt) {
				return super.__ks_func_getHybridMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getInstanceProperty() {
			return this.__ks_func_getInstanceProperty_rt.call(null, this, this, arguments);
		}
		__ks_func_getInstanceProperty_0(name) {
			if(KSType.isArray(this._instanceMethods[name])) {
				if(this._instanceMethods[name].length === 1) {
					return this._instanceMethods[name][0];
				}
				else {
					return new ClassMethodSetType(this._scope, this._instanceMethods[name]);
				}
			}
			else if(KSType.isClassInstance(this._instanceVariables[name], ClassVariableType)) {
				return this._instanceVariables[name];
			}
			else if(this._extending) {
				return this._extends.__ks_func_type_0().getInstanceProperty(name);
			}
			return null;
		}
		__ks_func_getInstanceProperty_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getInstanceProperty_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getInstanceProperty_rt) {
				return super.__ks_func_getInstanceProperty_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getInstanceVariable() {
			return this.__ks_func_getInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_getInstanceVariable_0(name) {
			if(KSType.isValue(this._instanceVariables[name])) {
				return this._instanceVariables[name];
			}
			else if(this._extending) {
				return this._extends.__ks_func_type_0().getInstanceVariable(name);
			}
			return null;
		}
		__ks_func_getInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getInstanceVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getInstanceVariable_rt) {
				return super.__ks_func_getInstanceVariable_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getInstantiableAssessment() {
			return this.__ks_func_getInstantiableAssessment_rt.call(null, this, this, arguments);
		}
		__ks_func_getInstantiableAssessment_0(name, node) {
			let assessment = this._instanceAssessments[name];
			if(KSType.isValue(assessment)) {
				return assessment;
			}
			const methods = this.__ks_func_listInstantiableMethods_0(name);
			let that = this;
			while((methods.length === 0) && (that.__ks_func_isExtending_0() === true)) {
				that = that.__ks_func_extends_0().type();
				for(let __ks_0 = 0, __ks_1 = that.__ks_func_listInstantiableMethods_0(name), __ks_2 = __ks_1.length, method; __ks_0 < __ks_2; ++__ks_0) {
					method = __ks_1[__ks_0];
					method.pushTo(methods);
				}
			}
			const __ks_assessment_1 = Router.assess(methods, name, node);
			this._instanceAssessments[name] = __ks_assessment_1;
			return __ks_assessment_1;
		}
		__ks_func_getInstantiableAssessment_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_getInstantiableAssessment_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getInstantiableAssessment_rt) {
				return super.__ks_func_getInstantiableAssessment_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getMajorReferenceIndex_0() {
			return ((this._referenceIndex === -1) && KSType.isValue(this._majorOriginal)) ? this._majorOriginal.__ks_func_getMajorReferenceIndex_0() : this._referenceIndex;
		}
		__ks_func_getProperty_0(name) {
			return this.__ks_func_getClassProperty_0(name);
		}
		getSharedMethodIndex() {
			return this.__ks_func_getSharedMethodIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_getSharedMethodIndex_0(name) {
			return this._sharedMethods[name];
		}
		__ks_func_getSharedMethodIndex_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getSharedMethodIndex_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getSharedMethodIndex_rt) {
				return super.__ks_func_getSharedMethodIndex_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasAbstractMethod() {
			return this.__ks_func_hasAbstractMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_hasAbstractMethod_0(name) {
			if(KSType.isArray(this._abstractMethods[name])) {
				return true;
			}
			if(this._extending) {
				return this._extends.__ks_func_type_0().hasAbstractMethod(name);
			}
			else {
				return false;
			}
		}
		__ks_func_hasAbstractMethod_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasAbstractMethod_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasAbstractMethod_rt) {
				return super.__ks_func_hasAbstractMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasClassMethod() {
			return this.__ks_func_hasClassMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_hasClassMethod_0(name) {
			if(KSType.isArray(this._classMethods[name])) {
				return true;
			}
			if(this._extending) {
				return this._extends.__ks_func_type_0().hasClassMethod(name);
			}
			else {
				return false;
			}
		}
		__ks_func_hasClassMethod_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasClassMethod_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasClassMethod_rt) {
				return super.__ks_func_hasClassMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasClassVariable() {
			return this.__ks_func_hasClassVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasClassVariable_0(name) {
			if(KSType.isClassInstance(this._classVariables[name], ClassVariableType)) {
				return true;
			}
			if(this._extending) {
				return this._extends.__ks_func_type_0().hasClassVariable(name);
			}
			else {
				return false;
			}
		}
		__ks_func_hasClassVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasClassVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasClassVariable_rt) {
				return super.__ks_func_hasClassVariable_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasConstructors() {
			return this.__ks_func_hasConstructors_rt.call(null, this, this, arguments);
		}
		__ks_func_hasConstructors_0() {
			return this._constructors.length !== 0;
		}
		__ks_func_hasConstructors_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasConstructors_0.call(that);
			}
			if(super.__ks_func_hasConstructors_rt) {
				return super.__ks_func_hasConstructors_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasDestructors() {
			return this.__ks_func_hasDestructors_rt.call(null, this, this, arguments);
		}
		__ks_func_hasDestructors_0() {
			return this._sequences.destructors !== -1;
		}
		__ks_func_hasDestructors_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasDestructors_0.call(that);
			}
			if(super.__ks_func_hasDestructors_rt) {
				return super.__ks_func_hasDestructors_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasExportableOriginals() {
			return this.__ks_func_hasExportableOriginals_rt.call(null, this, this, arguments);
		}
		__ks_func_hasExportableOriginals_0() {
			if(KSType.isValue(this._minorOriginal)) {
				if((this._minorOriginal._referenceIndex !== -1) || (this._minorOriginal.__ks_func_hasExportableOriginals_0() === true)) {
					return true;
				}
			}
			if(KSType.isValue(this._majorOriginal)) {
				return (this._majorOriginal._referenceIndex !== -1) || (this._majorOriginal.__ks_func_hasExportableOriginals_0() === true);
			}
			else {
				return false;
			}
		}
		__ks_func_hasExportableOriginals_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasExportableOriginals_0.call(that);
			}
			if(super.__ks_func_hasExportableOriginals_rt) {
				return super.__ks_func_hasExportableOriginals_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasInstanceMethod() {
			return this.__ks_func_hasInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_hasInstanceMethod_0(name) {
			if(KSType.isArray(this._instanceMethods[name])) {
				return true;
			}
			if(this._extending) {
				return this._extends.__ks_func_type_0().hasInstanceMethod(name);
			}
			else {
				return false;
			}
		}
		__ks_func_hasInstanceMethod_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasInstanceMethod_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasInstanceMethod_rt) {
				return super.__ks_func_hasInstanceMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasInstanceVariable() {
			return this.__ks_func_hasInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasInstanceVariable_0(name) {
			if(KSType.isClassInstance(this._instanceVariables[name], ClassVariableType)) {
				return true;
			}
			if(this._extending) {
				return this._extends.__ks_func_type_0().hasInstanceVariable(name);
			}
			else {
				return false;
			}
		}
		__ks_func_hasInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasInstanceVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasInstanceVariable_rt) {
				return super.__ks_func_hasInstanceVariable_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasInstantiableMethod() {
			return this.__ks_func_hasInstantiableMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_hasInstantiableMethod_0(name) {
			if(KSType.isArray(this._instanceMethods[name])) {
				return true;
			}
			else if(this._abstract && KSType.isArray(this._abstractMethods[name])) {
				return true;
			}
			else if(this._extending) {
				return this._extends.__ks_func_type_0().hasInstantiableMethod(name);
			}
			else {
				return false;
			}
		}
		__ks_func_hasInstantiableMethod_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasInstantiableMethod_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasInstantiableMethod_rt) {
				return super.__ks_func_hasInstantiableMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasMatchingClassMethod() {
			return this.__ks_func_hasMatchingClassMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_hasMatchingClassMethod_0(name, type, mode) {
			if(KSType.isArray(this._classMethods[name])) {
				for(let __ks_0 = 0, __ks_1 = this._classMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._classMethods[name][__ks_0];
					if(method.isSubsetOf(type, mode) === true) {
						return true;
					}
				}
			}
			if(this._extending && ((mode & MatchingMode.Superclass) !== 0n)) {
				return this._extends.__ks_func_type_0().hasMatchingClassMethod(name, type, mode);
			}
			return false;
		}
		__ks_func_hasMatchingClassMethod_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, FunctionType);
			const t2 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_hasMatchingClassMethod_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_hasMatchingClassMethod_rt) {
				return super.__ks_func_hasMatchingClassMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasMatchingConstructor() {
			return this.__ks_func_hasMatchingConstructor_rt.call(null, this, this, arguments);
		}
		__ks_func_hasMatchingConstructor_0(type, mode) {
			if(this._constructors.length !== 0) {
				for(let __ks_0 = 0, __ks_1 = this._constructors.length, __ks_constructor_1; __ks_0 < __ks_1; ++__ks_0) {
					__ks_constructor_1 = this._constructors[__ks_0];
					if(__ks_constructor_1.isSubsetOf(type, mode) === true) {
						return true;
					}
				}
			}
			return false;
		}
		__ks_func_hasMatchingConstructor_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, FunctionType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_hasMatchingConstructor_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_hasMatchingConstructor_rt) {
				return super.__ks_func_hasMatchingConstructor_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasMatchingInstanceMethod() {
			return this.__ks_func_hasMatchingInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_hasMatchingInstanceMethod_0(name, type, mode) {
			if(KSType.isArray(this._instanceMethods[name])) {
				for(let __ks_0 = 0, __ks_1 = this._instanceMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._instanceMethods[name][__ks_0];
					if(method.isSubsetOf(type, mode) === true) {
						return true;
					}
				}
			}
			if(this._abstract && KSType.isArray(this._abstractMethods[name])) {
				for(let __ks_0 = 0, __ks_1 = this._abstractMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._abstractMethods[name][__ks_0];
					if(method.isSubsetOf(type, mode) === true) {
						return true;
					}
				}
			}
			if(this._extending && ((mode & MatchingMode.Superclass) !== 0n)) {
				return this._extends.__ks_func_type_0().hasMatchingInstanceMethod(name, type, mode);
			}
			return false;
		}
		__ks_func_hasMatchingInstanceMethod_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, FunctionType);
			const t2 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_hasMatchingInstanceMethod_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_hasMatchingInstanceMethod_rt) {
				return super.__ks_func_hasMatchingInstanceMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasSealedConstructors() {
			return this.__ks_func_hasSealedConstructors_rt.call(null, this, this, arguments);
		}
		__ks_func_hasSealedConstructors_0() {
			return KSType.isValue(this._seal) ? this._seal.constructors : null;
		}
		__ks_func_hasSealedConstructors_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasSealedConstructors_0.call(that);
			}
			if(super.__ks_func_hasSealedConstructors_rt) {
				return super.__ks_func_hasSealedConstructors_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasSealedInstanceMethod() {
			return this.__ks_func_hasSealedInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_hasSealedInstanceMethod_0(name) {
			if(this._seal.instanceMethods[name] === true) {
				return true;
			}
			if(this._extending) {
				return this._extends.__ks_func_type_0().hasSealedInstanceMethod(name);
			}
			else {
				return false;
			}
		}
		__ks_func_hasSealedInstanceMethod_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasSealedInstanceMethod_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasSealedInstanceMethod_rt) {
				return super.__ks_func_hasSealedInstanceMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		incDefaultSequence() {
			return this.__ks_func_incDefaultSequence_rt.call(null, this, this, arguments);
		}
		__ks_func_incDefaultSequence_0() {
			return ++this._sequences.defaults;
		}
		__ks_func_incDefaultSequence_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_incDefaultSequence_0.call(that);
			}
			if(super.__ks_func_incDefaultSequence_rt) {
				return super.__ks_func_incDefaultSequence_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		incDestructorSequence() {
			return this.__ks_func_incDestructorSequence_rt.call(null, this, this, arguments);
		}
		__ks_func_incDestructorSequence_0() {
			return ++this._sequences.destructors;
		}
		__ks_func_incDestructorSequence_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_incDestructorSequence_0.call(that);
			}
			if(super.__ks_func_incDestructorSequence_rt) {
				return super.__ks_func_incDestructorSequence_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		incInitializationSequence() {
			return this.__ks_func_incInitializationSequence_rt.call(null, this, this, arguments);
		}
		__ks_func_incInitializationSequence_0() {
			return ++this._sequences.initializations;
		}
		__ks_func_incInitializationSequence_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_incInitializationSequence_0.call(that);
			}
			if(super.__ks_func_incInitializationSequence_rt) {
				return super.__ks_func_incInitializationSequence_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		incSharedMethod() {
			return this.__ks_func_incSharedMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_incSharedMethod_0(name) {
			let value = this._sharedMethods[name];
			if(KSType.isValue(value)) {
				this._sharedMethods[name] = ++value;
			}
			else {
				this._sharedMethods[name] = 0;
			}
			return this._sharedMethods[name];
		}
		__ks_func_incSharedMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_incSharedMethod_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_incSharedMethod_rt) {
				return super.__ks_func_incSharedMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAbstract() {
			return this.__ks_func_isAbstract_rt.call(null, this, this, arguments);
		}
		__ks_func_isAbstract_0() {
			return this._abstract;
		}
		__ks_func_isAbstract_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAbstract_0.call(that);
			}
			if(super.__ks_func_isAbstract_rt) {
				return super.__ks_func_isAbstract_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isAltering_0() {
			return this._altering;
		}
		isAsyncClassMethod() {
			return this.__ks_func_isAsyncClassMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isAsyncClassMethod_0(name) {
			if(KSType.isArray(this._classMethods[name])) {
				return this._classMethods[name][0].isAsync();
			}
			else if(this._extending) {
				return this._extends.__ks_func_type_0().isAsyncClassMethod(name);
			}
			else {
				return null;
			}
		}
		__ks_func_isAsyncClassMethod_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isAsyncClassMethod_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isAsyncClassMethod_rt) {
				return super.__ks_func_isAsyncClassMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAsyncInstanceMethod() {
			return this.__ks_func_isAsyncInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isAsyncInstanceMethod_0(name) {
			if(KSType.isArray(this._instanceMethods[name])) {
				return this._instanceMethods[name][0].isAsync();
			}
			if(this._abstract && KSType.isArray(this._abstractMethods[name])) {
				return this._abstractMethods[name][0].isAsync();
			}
			if(this._extending) {
				return this._extends.__ks_func_type_0().isAsyncInstanceMethod(name);
			}
			return null;
		}
		__ks_func_isAsyncInstanceMethod_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isAsyncInstanceMethod_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isAsyncInstanceMethod_rt) {
				return super.__ks_func_isAsyncInstanceMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isClass_0() {
			return true;
		}
		isConstructor() {
			return this.__ks_func_isConstructor_rt.call(null, this, this, arguments);
		}
		__ks_func_isConstructor_0(name) {
			return name === "constructor";
		}
		__ks_func_isConstructor_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isConstructor_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isConstructor_rt) {
				return super.__ks_func_isConstructor_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isDestructor() {
			return this.__ks_func_isDestructor_rt.call(null, this, this, arguments);
		}
		__ks_func_isDestructor_0(name) {
			return name === "destructor";
		}
		__ks_func_isDestructor_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isDestructor_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isDestructor_rt) {
				return super.__ks_func_isDestructor_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isExhaustive_0() {
			if(this._exhaustive === true) {
				return true;
			}
			if(this._altering) {
				return this._majorOriginal.__ks_func_isExhaustive_0();
			}
			if(this._extending) {
				return this._extends.__ks_func_isExhaustive_0();
			}
			else {
				return super.__ks_func_isExhaustive_0();
			}
		}
		isExhaustiveConstructor() {
			return this.__ks_func_isExhaustiveConstructor_rt.call(null, this, this, arguments);
		}
		__ks_func_isExhaustiveConstructor_0() {
			return this._exhaustiveness.constructor;
		}
		__ks_func_isExhaustiveConstructor_1(node) {
			return (this.isExhaustive(node) === true) && (this.__ks_func_isExhaustiveConstructor_0() === true);
		}
		__ks_func_isExhaustiveConstructor_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 0) {
				return proto.__ks_func_isExhaustiveConstructor_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isExhaustiveConstructor_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_isExhaustiveConstructor_rt) {
				return super.__ks_func_isExhaustiveConstructor_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isExhaustiveClassMethod() {
			return this.__ks_func_isExhaustiveClassMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isExhaustiveClassMethod_0(name) {
			if(KSType.isValue(this._exhaustiveness.classMethods[name])) {
				return this._exhaustiveness.classMethods[name];
			}
			else if(this._extending) {
				return this._extends.__ks_func_type_0().isExhaustiveClassMethod(name);
			}
			else {
				return this._exhaustive;
			}
		}
		__ks_func_isExhaustiveClassMethod_1(name, node) {
			return (this.isExhaustive(node) === true) && (this.__ks_func_isExhaustiveClassMethod_0(name) === true);
		}
		__ks_func_isExhaustiveClassMethod_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isExhaustiveClassMethod_0.call(that, args[0]);
				}
			}
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_isExhaustiveClassMethod_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_isExhaustiveClassMethod_rt) {
				return super.__ks_func_isExhaustiveClassMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isExhaustiveInstanceMethod() {
			return this.__ks_func_isExhaustiveInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isExhaustiveInstanceMethod_0(name) {
			if(KSType.isValue(this._exhaustiveness.instanceMethods[name])) {
				return this._exhaustiveness.instanceMethods[name];
			}
			else if(this._abstract && (this.__ks_func_hasAbstractMethod_0(name) === true)) {
				return true;
			}
			else if(this._extending) {
				return this._extends.__ks_func_type_0().isExhaustiveInstanceMethod(name);
			}
			else {
				return this._exhaustive;
			}
		}
		__ks_func_isExhaustiveInstanceMethod_1(name, node) {
			return (this.isExhaustive(node) === true) && (this.__ks_func_isExhaustiveInstanceMethod_0(name) === true);
		}
		__ks_func_isExhaustiveInstanceMethod_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isExhaustiveInstanceMethod_0.call(that, args[0]);
				}
			}
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_isExhaustiveInstanceMethod_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_isExhaustiveInstanceMethod_rt) {
				return super.__ks_func_isExhaustiveInstanceMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isExplicitlyExported_0() {
			return this._explicitlyExported;
		}
		__ks_func_isExtendable_0() {
			return true;
		}
		isExtending() {
			return this.__ks_func_isExtending_rt.call(null, this, this, arguments);
		}
		__ks_func_isExtending_0() {
			return this._extending;
		}
		__ks_func_isExtending_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExtending_0.call(that);
			}
			if(super.__ks_func_isExtending_rt) {
				return super.__ks_func_isExtending_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isFlexible_0() {
			return this._sealed;
		}
		__ks_func_isHybrid_0() {
			return this._hybrid;
		}
		isInitializing() {
			return this.__ks_func_isInitializing_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializing_0() {
			return this._sequences.initializations !== -1;
		}
		__ks_func_isInitializing_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInitializing_0.call(that);
			}
			if(super.__ks_func_isInitializing_rt) {
				return super.__ks_func_isInitializing_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInstanceOf() {
			return this.__ks_func_isInstanceOf_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstanceOf_6(value) {
			if(this === value) {
				return true;
			}
			if(this._extending && (this._extends.__ks_func_type_0().isInstanceOf(value) === true)) {
				return true;
			}
			return false;
		}
		__ks_func_isInstanceOf_7(value) {
			return this.isInstanceOf(value.__ks_func_type_0());
		}
		__ks_func_isInstanceOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ClassType);
			const t1 = value => KSType.isClassInstance(value, NamedType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInstanceOf_6.call(that, args[0]);
				}
				if(t1(args[0])) {
					return proto.__ks_func_isInstanceOf_7.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInstanceOf_rt) {
				return super.__ks_func_isInstanceOf_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isMergeable_0(type) {
			return type.isClass();
		}
		__ks_func_isPredefined_0() {
			return this._predefined;
		}
		__ks_func_isSealable_0() {
			return true;
		}
		isSealedInstanceMethod() {
			return this.__ks_func_isSealedInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isSealedInstanceMethod_0(name) {
			return KSType.isValue(this._seal.instanceMethods[name]) ? this._seal.instanceMethods[name] : false;
		}
		__ks_func_isSealedInstanceMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isSealedInstanceMethod_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isSealedInstanceMethod_rt) {
				return super.__ks_func_isSealedInstanceMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isSubsetOf_11(value, mode) {
			if(this === value) {
				return true;
			}
			if(((mode & MatchingMode.Subclass) !== 0n) && this._extending && (this._extends.__ks_func_type_0().isInstanceOf(value) === true)) {
				return true;
			}
			if((mode & MatchingMode.Exact) !== 0n) {
				return false;
			}
			if((mode & MatchingMode.Similar) !== 0n) {
				for(const name in value._instanceVariables) {
					const variable = value._instanceVariables[name];
					if(!(KSType.isValue(this._instanceVariables[name]) ? this._instanceVariables[name].isSubsetOf(variable, mode) === true : false)) {
						return false;
					}
				}
				for(const name in value._classVariables) {
					const variable = value._classVariables[name];
					if(!(KSType.isValue(this._classVariables[name]) ? this._classVariables[name].isSubsetOf(variable, mode) === true : false)) {
						return false;
					}
				}
				let functionMode = MatchingMode(MatchingMode.FunctionSignature | MatchingMode.Similar);
				if((mode & MatchingMode.Renamed) !== 0n) {
					functionMode = MatchingMode(functionMode | MatchingMode.Renamed);
				}
				for(const name in value._instanceMethods) {
					const methods = value._instanceMethods[name];
					if(!KSType.isArray(this._instanceMethods[name])) {
						return false;
					}
					for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						if(!(method.isSupersetOf(this._instanceMethods[name], functionMode) === true)) {
							return false;
						}
					}
				}
				for(const name in value._classMethods) {
					const methods = value._classMethods[name];
					if(!KSType.isArray(this._classMethods[name])) {
						return false;
					}
					for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						if(!(method.isSupersetOf(this._classMethods[name], functionMode) === true)) {
							return false;
						}
					}
				}
				return true;
			}
			return false;
		}
		__ks_func_isSubsetOf_12(value, mode) {
			return this.isSubsetOf(value.__ks_func_type_0(), mode);
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, ClassType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_11(value, mode);
			}
			if(KSType.isClassInstance(value, NamedType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_12(value, mode);
			}
			return super.__ks_func_isSubsetOf_0(value, mode);
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ClassType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			const t2 = value => KSType.isClassInstance(value, NamedType);
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_11.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t2(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_12.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, Type.prototype, args);
		}
		level() {
			return this.__ks_func_level_rt.call(null, this, this, arguments);
		}
		__ks_func_level_0() {
			return this._level;
		}
		__ks_func_level_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_level_0.call(that);
			}
			if(super.__ks_func_level_rt) {
				return super.__ks_func_level_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listAccessibleConstructors() {
			return this.__ks_func_listAccessibleConstructors_rt.call(null, this, this, arguments);
		}
		__ks_func_listAccessibleConstructors_0() {
			if(this._constructors.length !== 0) {
				return this._constructors;
			}
			else if(this._extending) {
				return this._extends.__ks_func_type_0().listAccessibleConstructors();
			}
			else {
				return [];
			}
		}
		__ks_func_listAccessibleConstructors_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_listAccessibleConstructors_0.call(that);
			}
			if(super.__ks_func_listAccessibleConstructors_rt) {
				return super.__ks_func_listAccessibleConstructors_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listClassMethods() {
			return this.__ks_func_listClassMethods_rt.call(null, this, this, arguments);
		}
		__ks_func_listClassMethods_0(name) {
			if(KSType.isArray(this._classMethods[name])) {
				return this._classMethods[name];
			}
			return null;
		}
		__ks_func_listClassMethods_1(name, type, mode) {
			const result = [];
			let methods = this._classMethods[name];
			if(KSType.isValue(methods)) {
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					if(method.isSubsetOf(type, mode) === true) {
						result.push(method);
					}
				}
			}
			if(result.length > 0) {
				return result;
			}
			if(this._extending) {
				return this._extends.__ks_func_type_0().listClassMethods(name, type, mode);
			}
			return result;
		}
		__ks_func_listClassMethods_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, FunctionType);
			const t2 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listClassMethods_0.call(that, args[0]);
				}
			}
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_listClassMethods_1.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_listClassMethods_rt) {
				return super.__ks_func_listClassMethods_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listConstructors() {
			return this.__ks_func_listConstructors_rt.call(null, this, this, arguments);
		}
		__ks_func_listConstructors_0() {
			return this._constructors;
		}
		__ks_func_listConstructors_1(type, mode) {
			const result = [];
			for(let __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				if(method.isSubsetOf(type, mode) === true) {
					result.push(method);
				}
			}
			if(result.length > 0) {
				return result;
			}
			if(this._extending) {
				return this._extends.__ks_func_type_0().listConstructors(type, mode);
			}
			return result;
		}
		__ks_func_listConstructors_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, FunctionType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 0) {
				return proto.__ks_func_listConstructors_0.call(that);
			}
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_listConstructors_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_listConstructors_rt) {
				return super.__ks_func_listConstructors_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listInstanceMethods() {
			return this.__ks_func_listInstanceMethods_rt.call(null, this, this, arguments);
		}
		__ks_func_listInstanceMethods_0(name) {
			if(KSType.isArray(this._instanceMethods[name])) {
				return this._instanceMethods[name];
			}
			return null;
		}
		__ks_func_listInstanceMethods_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listInstanceMethods_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_listInstanceMethods_rt) {
				return super.__ks_func_listInstanceMethods_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listInstantiableMethods() {
			return this.__ks_func_listInstantiableMethods_rt.call(null, this, this, arguments);
		}
		__ks_func_listInstantiableMethods_0(name) {
			const methods = [];
			let functions = this._instanceMethods[name];
			if(KSType.isValue(functions)) {
				methods.push.apply(methods, [].concat(functions));
			}
			if(this._abstract) {
				let functions = this._abstractMethods[name];
				if(KSType.isValue(functions)) {
					methods.push.apply(methods, [].concat(functions));
				}
			}
			return methods;
		}
		__ks_func_listInstantiableMethods_1(name, type, mode) {
			const result = [];
			let methods = this._instanceMethods[name];
			if(KSType.isValue(methods)) {
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					if(method.isSubsetOf(type, mode) === true) {
						result.push(method);
					}
				}
			}
			if(result.length > 0) {
				return result;
			}
			if(this._abstract) {
				let methods = this._abstractMethods[name];
				if(KSType.isValue(methods)) {
					for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						if(method.isSubsetOf(type, mode) === true) {
							result.push(method);
						}
					}
				}
			}
			if(result.length > 0) {
				return result;
			}
			if(this._extending) {
				return this._extends.__ks_func_type_0().listInstantiableMethods(name, type, mode);
			}
			return result;
		}
		__ks_func_listInstantiableMethods_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, FunctionType);
			const t2 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listInstantiableMethods_0.call(that, args[0]);
				}
			}
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_listInstantiableMethods_1.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_listInstantiableMethods_rt) {
				return super.__ks_func_listInstantiableMethods_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listMatchingConstructors() {
			return this.__ks_func_listMatchingConstructors_rt.call(null, this, this, arguments);
		}
		__ks_func_listMatchingConstructors_0(type, mode) {
			const results = [];
			for(let __ks_0 = 0, __ks_1 = this._constructors.length, __ks_constructor_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_constructor_1 = this._constructors[__ks_0];
				if(__ks_constructor_1.isSubsetOf(type, mode) === true) {
					results.push(__ks_constructor_1);
				}
			}
			return results;
		}
		__ks_func_listMatchingConstructors_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, FunctionType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_listMatchingConstructors_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_listMatchingConstructors_rt) {
				return super.__ks_func_listMatchingConstructors_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listMatchingInstanceMethods() {
			return this.__ks_func_listMatchingInstanceMethods_rt.call(null, this, this, arguments);
		}
		__ks_func_listMatchingInstanceMethods_0(name, type, mode) {
			const results = [];
			if(KSType.isArray(this._instanceMethods[name])) {
				for(let __ks_0 = 0, __ks_1 = this._instanceMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._instanceMethods[name][__ks_0];
					if(method.isSubsetOf(type, mode) === true) {
						results.push(method);
					}
				}
			}
			if(this._abstract && KSType.isArray(this._abstractMethods[name])) {
				for(let __ks_0 = 0, __ks_1 = this._abstractMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._abstractMethods[name][__ks_0];
					if(method.isSubsetOf(type, mode) === true) {
						results.push(method);
					}
				}
			}
			return results;
		}
		__ks_func_listMatchingInstanceMethods_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, FunctionType);
			const t2 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_listMatchingInstanceMethods_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_listMatchingInstanceMethods_rt) {
				return super.__ks_func_listMatchingInstanceMethods_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listMissingAbstractMethods() {
			return this.__ks_func_listMissingAbstractMethods_rt.call(null, this, this, arguments);
		}
		__ks_func_listMissingAbstractMethods_0() {
			if(!this._extending) {
				return [];
			}
			const abstractMethods = new Dictionary();
			this._extends.__ks_func_type_0().filterAbstractMethods(abstractMethods);
			const mode = MatchingMode(MatchingMode.Signature & ~MatchingMode.MissingParameterType);
			const matchables = [];
			let method = null, index = null;
			for(const name in abstractMethods) {
				const methods = abstractMethods[name];
				if(KSType.isArray(this._instanceMethods[name])) {
					index = methods.length - 1;
					for(let __ks_0 = 0; index >= __ks_0; --index) {
						method = methods[index];
						if(method.isSubsetOf(this._instanceMethods[name], mode) === true) {
							methods.splice(index, 1);
						}
					}
					if(methods.length === 0) {
						delete abstractMethods[name];
					}
				}
			}
			return abstractMethods;
		}
		__ks_func_listMissingAbstractMethods_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_listMissingAbstractMethods_0.call(that);
			}
			if(super.__ks_func_listMissingAbstractMethods_rt) {
				return super.__ks_func_listMissingAbstractMethods_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		majorOriginal() {
			return this.__ks_func_majorOriginal_rt.call(null, this, this, arguments);
		}
		__ks_func_majorOriginal_1() {
			return this._majorOriginal;
		}
		__ks_func_majorOriginal_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_majorOriginal_1.call(that);
			}
			if(super.__ks_func_majorOriginal_rt) {
				return super.__ks_func_majorOriginal_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		matchArguments() {
			return this.__ks_func_matchArguments_rt.call(null, this, this, arguments);
		}
		__ks_func_matchArguments_2(__ks_arguments_1, node) {
			if(this._constructors.length === 0) {
				if(this._extending) {
					return this._extends.__ks_func_type_0().matchArguments(__ks_arguments_1, node);
				}
				else {
					return this._alien || (__ks_arguments_1.length === 0);
				}
			}
			else {
				for(let __ks_0 = 0, __ks_1 = this._constructors.length, __ks_constructor_1; __ks_0 < __ks_1; ++__ks_0) {
					__ks_constructor_1 = this._constructors[__ks_0];
					if(__ks_constructor_1.matchArguments(__ks_arguments_1, node) === true) {
						return true;
					}
				}
				return false;
			}
		}
		__ks_func_matchArguments_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, value => KSType.isClassInstance(value, Type));
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_matchArguments_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_matchArguments_rt) {
				return super.__ks_func_matchArguments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		matchInstanceWith() {
			return this.__ks_func_matchInstanceWith_rt.call(null, this, this, arguments);
		}
		__ks_func_matchInstanceWith_0(object, matchables) {
			for(const name in object._properties) {
				const property = object._properties[name];
				if(KSType.isValue(this._instanceVariables[name]) ? this._instanceVariables[name].isSubsetOf(property, MatchingMode.Signature) === true : false) {
				}
				else if(KSType.isArray(this._instanceMethods[name])) {
					let nf = true;
					for(let __ks_0 = 0, __ks_1 = this._instanceMethods[name].length, method; __ks_0 < __ks_1 && nf; ++__ks_0) {
						method = this._instanceMethods[name][__ks_0];
						if(method.isSubsetOf(property, MatchingMode.FunctionSignature) === true) {
							nf = false;
						}
					}
					if(nf) {
						return false;
					}
				}
				else {
					return false;
				}
			}
			return true;
		}
		__ks_func_matchInstanceWith_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, DictionaryType);
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_matchInstanceWith_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_matchInstanceWith_rt) {
				return super.__ks_func_matchInstanceWith_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		metaReference() {
			return this.__ks_func_metaReference_rt.call(null, this, this, arguments);
		}
		__ks_func_metaReference_1(references, indexDelta, mode, module, name) {
			if(this._predefined) {
				return name;
			}
			else {
				return [this.__ks_func_toMetadata_0(references, indexDelta, mode, module), name];
			}
		}
		__ks_func_metaReference_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			const t4 = KSType.isString;
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
					return proto.__ks_func_metaReference_1.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			if(super.__ks_func_metaReference_rt) {
				return super.__ks_func_metaReference_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_minorOriginal_0() {
			return KSType.isValue(this._minorOriginal) ? this._minorOriginal : this._majorOriginal;
		}
		__ks_func_origin_0() {
			if(KSType.isValue(this._origin)) {
				return this._origin;
			}
			else if(KSType.isValue(this._majorOriginal)) {
				return this._majorOriginal.__ks_func_origin_0();
			}
			else {
				return null;
			}
		}
		originals() {
			return this.__ks_func_originals_rt.call(null, this, this, arguments);
		}
		__ks_func_originals_2(majorOriginal, minorOriginal = null) {
			if(majorOriginal === void 0) {
				majorOriginal = null;
			}
			this._majorOriginal = majorOriginal;
			this._minorOriginal = minorOriginal;
			this._altering = true;
			return this;
		}
		__ks_func_originals_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ClassType) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t0, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_originals_2.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_originals_rt) {
				return super.__ks_func_originals_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		overwriteConstructor() {
			return this.__ks_func_overwriteConstructor_rt.call(null, this, this, arguments);
		}
		__ks_func_overwriteConstructor_0(type, methods) {
			__ks_Array.__ks_func_remove_0.call(this._constructors, [].concat(methods));
			let alterMethods = KSType.isValue(this._majorOriginal) ? this._majorOriginal._constructors : null;
			if(KSType.isValue(alterMethods)) {
				const indexes = KSHelper.mapArray(alterMethods, function(method) {
					return method.index();
				});
				const __ks_overwrite_1 = KSHelper.mapArray(methods, function(method) {
					return method.index();
				}, function(method) {
					return __ks_Array.__ks_func_contains_0.call(indexes, method.index());
				});
				if(__ks_overwrite_1.length !== 0) {
					type.overwrite(__ks_overwrite_1);
					this._overwritten.constructors = __ks_overwrite_1;
				}
			}
			return this.addConstructor(type);
		}
		__ks_func_overwriteConstructor_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_overwriteConstructor_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_overwriteConstructor_rt) {
				return super.__ks_func_overwriteConstructor_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		overwriteInstanceMethod() {
			return this.__ks_func_overwriteInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_overwriteInstanceMethod_0(name, type, methods) {
			__ks_Array.__ks_func_remove_0.call(KSHelper.cast(this._instanceMethods[name], "Array", false, null, "Array"), [].concat(methods));
			let alterMethods = KSType.isValue(this._majorOriginal) ? this._majorOriginal._instanceMethods[name] : null;
			if(KSType.isValue(alterMethods)) {
				const indexes = KSHelper.mapArray(alterMethods, function(method) {
					return method.index();
				});
				const __ks_overwrite_1 = KSHelper.mapArray(methods, function(method) {
					return method.index();
				}, function(method) {
					return __ks_Array.__ks_func_contains_0.call(indexes, method.index());
				});
				if(__ks_overwrite_1.length !== 0) {
					type.overwrite(__ks_overwrite_1);
					this._overwritten.instanceMethods[name] = __ks_overwrite_1;
				}
			}
			return this.addInstanceMethod(name, type);
		}
		__ks_func_overwriteInstanceMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
					return proto.__ks_func_overwriteInstanceMethod_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_overwriteInstanceMethod_rt) {
				return super.__ks_func_overwriteInstanceMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameter() {
			return this.__ks_func_parameter_rt.call(null, this, this, arguments);
		}
		__ks_func_parameter_5() {
			return AnyType.NullableUnexplicit;
		}
		__ks_func_parameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameter_5.call(that);
			}
			if(super.__ks_func_parameter_rt) {
				return super.__ks_func_parameter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_setExhaustive_0(exhaustive) {
			if(exhaustive === void 0) {
				exhaustive = null;
			}
			this._exhaustive = exhaustive;
			if(this._exhaustive === true) {
				if(this._extending) {
					const __ks_extends_1 = this._extends.__ks_func_type_0();
					this._exhaustiveness.constructor = (this._constructors.length !== 0) || (__ks_extends_1.isExhaustiveConstructor() === true);
					for(const name in this._instanceMethods) {
						this._exhaustiveness.instanceMethods[name] = __ks_extends_1.isExhaustiveInstanceMethod(name);
					}
					for(const name in this._classMethods) {
						this._exhaustiveness.classMethods[name] = __ks_extends_1.isExhaustiveClassMethod(name);
					}
				}
				else {
					if(this._alien) {
						this._exhaustiveness.constructor = this._constructors.length !== 0;
					}
					else {
						this._exhaustiveness.constructor = true;
					}
					for(const name in this._instanceMethods) {
						if(!KSType.isValue(this._exhaustiveness.instanceMethods[name])) {
							this._exhaustiveness.instanceMethods[name] = true;
						}
					}
					for(const name in this._classMethods) {
						if(!KSType.isValue(this._exhaustiveness.classMethods[name])) {
							this._exhaustiveness.classMethods[name] = true;
						}
					}
				}
			}
			else {
				this._exhaustiveness.constructor = false;
				for(const name in this._instanceMethods) {
					if(!KSType.isValue(this._exhaustiveness.instanceMethods[name])) {
						this._exhaustiveness.instanceMethods[name] = false;
					}
				}
				for(const name in this._classMethods) {
					if(!KSType.isValue(this._exhaustiveness.classMethods[name])) {
						this._exhaustiveness.classMethods[name] = false;
					}
				}
			}
			return this;
		}
		__ks_func_shallBeNamed_0() {
			return true;
		}
		toAlterationReference() {
			return this.__ks_func_toAlterationReference_rt.call(null, this, this, arguments);
		}
		__ks_func_toAlterationReference_1(references, indexDelta, mode, module) {
			if(this._referenceIndex !== -1) {
				return (() => {
					const d = new Dictionary();
					d.reference = this._referenceIndex;
					return d;
				})();
			}
			else if(KSType.isValue(this._majorOriginal)) {
				return this._majorOriginal.__ks_func_toAlterationReference_1(references, indexDelta, mode, module);
			}
			else {
				return this.__ks_func_toReference_0(references, indexDelta, mode, module);
			}
		}
		__ks_func_toAlterationReference_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_toAlterationReference_1.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_toAlterationReference_rt) {
				return super.__ks_func_toAlterationReference_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			throw new NotImplementedException(node);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toMetadata_0(references, indexDelta, mode, module) {
			if((mode & ExportMode.Export) !== 0n) {
				if(!KSType.isValue(this._minorOriginal) && KSType.isValue(this._origin) && ((this._origin & TypeOrigin.ExternOrRequire) !== 0n || (this._origin & TypeOrigin.RequireOrExtern) !== 0n)) {
					const require = ClassType.__ks_sttc_getRequireReference_0(this);
					const extern = ClassType.__ks_sttc_getExternReference_0([this]);
					if(KSType.isValue(require) && KSType.isValue(extern)) {
						const referenceIndex = references.length + indexDelta;
						references.push((() => {
							const d = new Dictionary();
							d.originals = ((this._origin & TypeOrigin.ExternOrRequire) !== 0n) ? [extern, require] : [require, extern];
							return d;
						})());
						this._referenceIndex = referenceIndex;
						return this._referenceIndex;
					}
					else {
						return KSType.isValue(require) ? require : extern;
					}
				}
				if(KSType.isValue(this._majorOriginal) && !(this._exported || this._alien)) {
					return this._majorOriginal.__ks_func_toMetadata_0(references, indexDelta, mode, module);
				}
			}
			return super.__ks_func_toMetadata_0(references, indexDelta, mode, module);
		}
		__ks_func_toReference_0(references, indexDelta, mode, module) {
			if((mode & ExportMode.Alien) !== 0n) {
				if(KSType.isValue(this._minorOriginal)) {
					return this._minorOriginal.__ks_func_toReference_0(references, indexDelta, mode, module);
				}
				else if(KSType.isValue(this._majorOriginal) && !(this._majorOriginal.__ks_func_isPredefined_0() === true)) {
					return this._majorOriginal.__ks_func_toReference_0(references, indexDelta, mode, module);
				}
			}
			else if((mode & ExportMode.Requirement) !== 0n) {
				if(KSType.isValue(this._majorOriginal) && !(this.__ks_func_isRequirement_0() === true)) {
					return this._majorOriginal.__ks_func_toReference_0(references, indexDelta, mode, module);
				}
			}
			return super.__ks_func_toReference_0(references, indexDelta, mode, module);
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			throw new NotImplementedException(node);
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("class", this._sequences.initializations, this._sequences.defaults, this._sequences.constructors, this._sequences.destructors);
			for(const name in this._sequences.classMethods) {
				const sequence = this._sequences.classMethods[name];
				variations.push(name, sequence);
			}
			for(const name in this._sequences.instanceMethods) {
				const sequence = this._sequences.instanceMethods[name];
				variations.push(name, sequence);
			}
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_unflagAltering_0() {
			for(let __ks_0 in this._abstractMethods) {
				const methods = this._abstractMethods[__ks_0];
				for(let __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.unflagAltering();
				}
			}
			for(let __ks_0 in this._classMethods) {
				const methods = this._classMethods[__ks_0];
				for(let __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.unflagAltering();
				}
			}
			for(let __ks_0 in this._instanceMethods) {
				const methods = this._instanceMethods[__ks_0];
				for(let __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.unflagAltering();
				}
			}
			for(let __ks_0 in this._classVariables) {
				const variable = this._classVariables[__ks_0];
				variable.unflagAltering();
			}
			for(let __ks_0 in this._instanceVariables) {
				const variable = this._instanceVariables[__ks_0];
				variable.unflagAltering();
			}
			this._altering = false;
			return this;
		}
		updateInstanceMethodIndex() {
			return this.__ks_func_updateInstanceMethodIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_updateInstanceMethodIndex_0(name, type) {
			const root = this.__ks_func_ancestor_0();
			const index = ++root._sequences.instanceMethods[name];
			type.__ks_func_setForkedIndex_0(index);
			return index;
		}
		__ks_func_updateInstanceMethodIndex_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, ClassMethodType);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_updateInstanceMethodIndex_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_updateInstanceMethodIndex_rt) {
				return super.__ks_func_updateInstanceMethodIndex_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_getExternReference_0(types) {
			for(let __ks_0 = 0, __ks_1 = types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = types[__ks_0];
				if(KSType.isValue(type)) {
					if((type.isAlien() === true) && !(type.isRequirement() === true) && (type.referenceIndex() !== -1)) {
						return type.referenceIndex();
					}
					if(KSType.isValue(type._majorOriginal)) {
						let reference = ClassType.__ks_sttc_getExternReference_0([type._majorOriginal]);
						if(KSType.isValue(reference)) {
							return reference;
						}
						else if(KSType.isValue(type._minorOriginal)) {
							return ClassType.__ks_sttc_getExternReference_0([type._minorOriginal]);
						}
					}
				}
			}
			return null;
		}
		static getExternReference() {
			return ClassType.__ks_sttc_getExternReference_0(Array.from(arguments));
		}
		static __ks_sttc_getOriginReference_0(type) {
			if(KSType.isValue(type.__ks_func_origin_0())) {
				return type.__ks_func_referenceIndex_0();
			}
			if(KSType.isValue(type._majorOriginal)) {
				return ClassType.getOriginReference(type._majorOriginal);
			}
			else {
				return null;
			}
		}
		static getOriginReference() {
			const t0 = value => KSType.isClassInstance(value, ClassType);
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return ClassType.__ks_sttc_getOriginReference_0(arguments[0]);
				}
			}
			if(Type.getOriginReference) {
				return Type.getOriginReference.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_getRequireReference_0(type) {
			if((type.__ks_func_isRequirement_0() === true) && (type.__ks_func_referenceIndex_0() !== -1)) {
				return type.__ks_func_referenceIndex_0();
			}
			if(KSType.isValue(type._majorOriginal)) {
				return ClassType.getRequireReference(type._majorOriginal);
			}
			else {
				return null;
			}
		}
		static getRequireReference() {
			const t0 = value => KSType.isClassInstance(value, ClassType);
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return ClassType.__ks_sttc_getRequireReference_0(arguments[0]);
				}
			}
			if(Type.getRequireReference) {
				return Type.getRequireReference.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_5(index, data, metadata, references, alterations, queue, scope, node) {
			const type = ClassType.__ks_new_0(scope);
			type._sequences.initializations = data.sequences[0];
			type._sequences.defaults = data.sequences[1];
			type._sequences.destructors = data.sequences[2];
			type._exhaustive = data.exhaustive;
			if(KSType.isValue(data.exhaustiveness)) {
				if(KSType.isValue(data.exhaustiveness.constructor)) {
					type._exhaustiveness.constructor = data.exhaustiveness.constructor;
				}
				if(KSType.isValue(data.exhaustiveness.classMethods)) {
					type._exhaustiveness.classMethods = data.exhaustiveness.classMethods;
				}
				if(KSType.isValue(data.exhaustiveness.instanceMethods)) {
					type._exhaustiveness.instanceMethods = data.exhaustiveness.instanceMethods;
				}
			}
			if(KSType.isValue(data.sharedMethods)) {
				type._sharedMethods = data.sharedMethods;
			}
			if(KSType.isValue(data.origin)) {
				type._origin = TypeOrigin(data.origin);
			}
			if(KSType.isValue(data.original)) {
				queue.push((() => {
					const __ks_rt = (...args) => {
						if(args.length === 0) {
							return __ks_rt.__ks_0.call(this);
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = () => {
						const original = references[data.original].discardName();
						ClassType.importFromOriginal(data, type, original, alterations[data.original], metadata, references, alterations, queue, scope, node);
						references[data.original].reference().reset();
					};
					return __ks_rt;
				})());
			}
			else if(KSType.isValue(data.originals)) {
				queue.push((() => {
					const __ks_rt = (...args) => {
						if(args.length === 0) {
							return __ks_rt.__ks_0.call(this);
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = () => {
						const first = references[data.originals[0]].discardName();
						const second = references[data.originals[1]].discardName();
						const [major, minor] = (KSOperator.bitwiseAnd(first.origin(), TypeOrigin.Require) !== 0n) ? [first, second] : [second, first];
						const isArgument = alterations[(major === first) ? data.originals[0] : data.originals[1]];
						ClassType.importFromOriginal(data, type, major, isArgument, metadata, references, alterations, queue, scope, node);
						type._minorOriginal = minor;
						references[data.originals[0]].reference().reset();
						references[data.originals[1]].reference().reset();
					};
					return __ks_rt;
				})());
			}
			else {
				type._abstract = data.abstract;
				type._alien = data.alien;
				type._hybrid = data.hybrid;
				if(data.systemic === true) {
					type.__ks_func_flagSystemic_0();
				}
				else if(data.sealed === true) {
					type.__ks_func_flagSealed_0();
				}
				queue.push((() => {
					const __ks_rt = (...args) => {
						if(args.length === 0) {
							return __ks_rt.__ks_0.call(this);
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = () => {
						if(KSType.isValue(data.extends)) {
							type.extends(Type.import(data.extends, metadata, references, alterations, queue, scope, node).__ks_func_discardReference_0());
						}
						if(data.abstract === true) {
							for(const name in data.abstractMethods) {
								const methods = data.abstractMethods[name];
								for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
									method = methods[__ks_0];
									type.__ks_func_dedupAbstractMethod_0(name, ClassMethodType.import(method, metadata, references, alterations, queue, scope, node));
								}
							}
						}
						for(let __ks_0 = 0, __ks_1 = data.constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = data.constructors[__ks_0];
							type.__ks_func_addConstructor_0(ClassConstructorType.import(method, metadata, references, alterations, queue, scope, node));
						}
						for(const name in data.instanceVariables) {
							const vtype = data.instanceVariables[name];
							if(!(type.__ks_func_hasInstanceVariable_0(name) === true)) {
								type.__ks_func_addInstanceVariable_0(name, ClassVariableType.import(vtype, metadata, references, alterations, queue, scope, node));
							}
						}
						for(const name in data.classVariables) {
							const vtype = data.classVariables[name];
							if(!(type.__ks_func_hasClassVariable_0(name) === true)) {
								type.__ks_func_addClassVariable_0(name, ClassVariableType.import(vtype, metadata, references, alterations, queue, scope, node));
							}
						}
						for(const name in data.instanceMethods) {
							const methods = data.instanceMethods[name];
							for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
								method = methods[__ks_0];
								type.__ks_func_dedupInstanceMethod_0(name, ClassMethodType.import(method, metadata, references, alterations, queue, scope, node));
							}
						}
						for(const name in data.classMethods) {
							const methods = data.classMethods[name];
							for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
								method = methods[__ks_0];
								type.__ks_func_dedupClassMethod_0(name, ClassMethodType.import(method, metadata, references, alterations, queue, scope, node));
							}
						}
						type.setExhaustive(data.exhaustive);
					};
					return __ks_rt;
				})());
			}
			return type;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 8) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2]) && t2(arguments[3]) && t2(arguments[4]) && t1(arguments[5]) && t3(arguments[6]) && t4(arguments[7])) {
					return ClassType.__ks_sttc_import_5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(Type.import) {
				return Type.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_importFromOriginal_0(data, type, original, isArgument, metadata, references, alterations, queue, scope, node) {
			if(isArgument === void 0) {
				isArgument = null;
			}
			type.__ks_func_copyFrom_1(original);
			if(type.__ks_func_isAbstract_0() === true) {
				for(const name in data.abstractMethods) {
					const methods = data.abstractMethods[name];
					for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						type.__ks_func_dedupAbstractMethod_0(name, ClassMethodType.import(method, metadata, references, alterations, queue, scope, node));
					}
				}
			}
			for(let __ks_0 = 0, __ks_1 = data.constructors.length, __ks_constructor_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_constructor_1 = data.constructors[__ks_0];
				type.__ks_func_addConstructor_0(ClassConstructorType.import(__ks_constructor_1, metadata, references, alterations, queue, scope, node));
			}
			for(const name in data.instanceVariables) {
				const vtype = data.instanceVariables[name];
				if(!(type.__ks_func_hasInstanceVariable_0(name) === true)) {
					type.__ks_func_addInstanceVariable_0(name, ClassVariableType.import(vtype, metadata, references, alterations, queue, scope, node));
				}
			}
			for(const name in data.classVariables) {
				const vtype = data.classVariables[name];
				if(!(type.__ks_func_hasClassVariable_0(name) === true)) {
					type.__ks_func_addClassVariable_0(name, ClassVariableType.import(vtype, metadata, references, alterations, queue, scope, node));
				}
			}
			for(const name in data.instanceMethods) {
				const methods = data.instanceMethods[name];
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					type.__ks_func_dedupInstanceMethod_0(name, ClassMethodType.import(method, metadata, references, alterations, queue, scope, node));
				}
			}
			for(const name in data.classMethods) {
				const methods = data.classMethods[name];
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					type.__ks_func_dedupClassMethod_0(name, ClassMethodType.import(method, metadata, references, alterations, queue, scope, node));
				}
			}
			type.setExhaustive(data.exhaustive);
		}
		static importFromOriginal() {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, ClassType);
			const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t3 = KSType.isArray;
			const t4 = KSType.isDictionary;
			const t5 = value => KSType.isClassInstance(value, Scope);
			const t6 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 10) {
				if(t0(arguments[0]) && t1(arguments[1]) && t1(arguments[2]) && t2(arguments[3]) && t3(arguments[4]) && t4(arguments[5]) && t4(arguments[6]) && t3(arguments[7]) && t5(arguments[8]) && t6(arguments[9])) {
					return ClassType.__ks_sttc_importFromOriginal_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
				}
			}
			if(Type.importFromOriginal) {
				return Type.importFromOriginal.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class ClassMethodSetType extends OverloadedFunctionType {
		static __ks_new_0(...args) {
			const o = Object.create(ClassMethodSetType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(scope, functions) {
			if(scope === void 0) {
				scope = null;
			}
			OverloadedFunctionType.prototype.__ks_cons_0.call(this, scope);
			this._functions = functions;
			for(let __ks_0 = 0, __ks_1 = functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_function_1 = functions[__ks_0];
				if(__ks_function_1.__ks_func_isAsync_0()) {
					this._async = true;
					break;
				}
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t1 = value => KSType.isArray(value, value => KSType.isClassInstance(value, FunctionType));
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return ClassMethodSetType.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isMethod_0() {
			return true;
		}
	}
	class ClassConstructorType extends FunctionType {
		static __ks_new_0(...args) {
			const o = Object.create(ClassConstructorType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ClassConstructorType.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ClassConstructorType.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		static __ks_new_3(...args) {
			const o = Object.create(ClassConstructorType.prototype);
			o.__ks_init();
			o.__ks_cons_3(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._access = Accessibility.Public;
			this._dependent = false;
			this._initVariables = new Dictionary();
			this._overwrite = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		access() {
			return this.__ks_func_access_rt.call(null, this, this, arguments);
		}
		__ks_func_access_0(access) {
			this._access = access;
			return this;
		}
		__ks_func_access_rt(that, proto, args) {
			const t0 = value => KSType.isEnumInstance(value, Accessibility);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_access_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_access_rt) {
				return super.__ks_func_access_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addInitializingInstanceVariable() {
			return this.__ks_func_addInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_addInitializingInstanceVariable_0(name) {
			this._initVariables[name] = true;
		}
		__ks_func_addInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addInitializingInstanceVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_addInitializingInstanceVariable_rt) {
				return super.__ks_func_addInitializingInstanceVariable_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		checkVariablesInitializations() {
			return this.__ks_func_checkVariablesInitializations_rt.call(null, this, this, arguments);
		}
		__ks_func_checkVariablesInitializations_1(node, __ks_class_1) {
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				__ks_class_1 = this._class;
			}
			__ks_class_1.__ks_func_forEachInstanceVariables_0((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (name, variable) => {
					if((variable.isRequiringInitialization() === true) && !this._initVariables[name]) {
						SyntaxException.__ks_sttc_throwNotInitializedField_0(name, node);
					}
				};
				return __ks_rt;
			})());
		}
		__ks_func_checkVariablesInitializations_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, AbstractNode);
			const t1 = value => KSType.isClassInstance(value, ClassType) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_checkVariablesInitializations_1.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_checkVariablesInitializations_rt) {
				return super.__ks_func_checkVariablesInitializations_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			const clone = ClassConstructorType.__ks_new_0(this._scope);
			FunctionType.__ks_sttc_clone_0(this, clone);
			clone._index = -1;
			clone._access = this._access;
			clone._class = this._class;
			clone._dependent = this._dependent;
			clone._initVariables = KSHelper.concatDictionary(this._initVariables);
			if(this._overwrite !== null) {
				clone._overwrite = [...this._overwrite];
			}
			return clone;
		}
		__ks_func_export_2(references, indexDelta, mode, module, originalMethods) {
			if(originalMethods === void 0) {
				originalMethods = null;
			}
			const __ks_export_1 = (() => {
				const d = new Dictionary();
				d.index = this._index;
				d.access = this._access;
				d.sealed = this._sealed;
				d.min = this._min;
				d.max = this._max;
				d.parameters = KSHelper.mapArray(this._parameters, function(parameter) {
					return parameter.__ks_func_export_0(references, indexDelta, mode, module);
				});
				d.errors = KSHelper.mapArray(this._errors, function(error) {
					return error.__ks_func_toReference_0(references, indexDelta, mode, module);
				});
				return d;
			})();
			if(this._class.__ks_func_isAbstract_0() === true) {
				__ks_export_1.inits = Dictionary.keys(this._initVariables);
			}
			if(this._dependent) {
				__ks_export_1.dependent = true;
			}
			if(KSType.isValue(originalMethods) && KSType.isValue(this._overwrite)) {
				const __ks_overwrite_1 = this._overwrite.filter((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (index, __ks_0, __ks_1) => {
						return __ks_Array.__ks_func_contains_0.call(KSHelper.cast(originalMethods, "Array", false, null, "Array"), index);
					};
					return __ks_rt;
				})());
				if(KSOperator.gt(__ks_overwrite_1.length, 0)) {
					__ks_export_1.overwrite = __ks_overwrite_1;
				}
			}
			return __ks_export_1;
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_2.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			return super.__ks_func_export_rt.call(null, that, FunctionType.prototype, args);
		}
		flagDependent() {
			return this.__ks_func_flagDependent_rt.call(null, this, this, arguments);
		}
		__ks_func_flagDependent_0() {
			this._dependent = true;
			return this;
		}
		__ks_func_flagDependent_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagDependent_0.call(that);
			}
			if(super.__ks_func_flagDependent_rt) {
				return super.__ks_func_flagDependent_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isDependent() {
			return this.__ks_func_isDependent_rt.call(null, this, this, arguments);
		}
		__ks_func_isDependent_0() {
			return this._dependent;
		}
		__ks_func_isDependent_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isDependent_0.call(that);
			}
			if(super.__ks_func_isDependent_rt) {
				return super.__ks_func_isDependent_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_0(name) {
			return this._initVariables[name];
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isOverwritten() {
			return this.__ks_func_isOverwritten_rt.call(null, this, this, arguments);
		}
		__ks_func_isOverwritten_0() {
			return this._overwrite !== null;
		}
		__ks_func_isOverwritten_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isOverwritten_0.call(that);
			}
			if(super.__ks_func_isOverwritten_rt) {
				return super.__ks_func_isOverwritten_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		overwrite() {
			return this.__ks_func_overwrite_rt.call(null, this, this, arguments);
		}
		__ks_func_overwrite_0() {
			return this._overwrite;
		}
		__ks_func_overwrite_1(__ks_overwrite_1) {
			if(__ks_overwrite_1 === void 0) {
				__ks_overwrite_1 = null;
			}
			this._overwrite = __ks_overwrite_1;
		}
		__ks_func_overwrite_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value) || KSType.isNull(value);
			if(args.length === 0) {
				return proto.__ks_func_overwrite_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_overwrite_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_overwrite_rt) {
				return super.__ks_func_overwrite_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_processModifiers_0(modifiers) {
			for(let __ks_0 = 0, __ks_1 = modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Async.value) {
					throw new NotImplementedException();
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Private.value) {
					this._access = Accessibility.Private;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Protected.value) {
					this._access = Accessibility.Protected;
				}
			}
		}
		setClass() {
			return this.__ks_func_setClass_rt.call(null, this, this, arguments);
		}
		__ks_func_setClass_0(__ks_class_1) {
			this._class = __ks_class_1;
			return this;
		}
		__ks_func_setClass_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ClassType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setClass_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_setClass_rt) {
				return super.__ks_func_setClass_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_fromAST_2(data, node) {
			const scope = node.__ks_func_scope_0();
			return ClassConstructorType.__ks_new_2(KSHelper.mapArray(data.parameters, function(parameter) {
				return ParameterType.fromAST(parameter, true, scope, false, node);
			}), data, node);
		}
		static fromAST() {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t1(arguments[1])) {
					return ClassConstructorType.__ks_sttc_fromAST_2(arguments[0], arguments[1]);
				}
			}
			if(FunctionType.fromAST) {
				return FunctionType.fromAST.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_0(index, metadata, references, alterations, queue, scope, node) {
			const data = index;
			const type = ClassConstructorType.__ks_new_0(scope);
			type._index = data.index;
			type._access = data.access;
			type._sealed = data.sealed;
			type._min = data.min;
			type._max = data.max;
			if(data.dependent === true) {
				type._dependent = true;
			}
			type._errors = KSHelper.mapArray(data.errors, function(error) {
				return Type.import(error, metadata, references, alterations, queue, scope, node);
			});
			type._parameters = KSHelper.mapArray(data.parameters, function(parameter) {
				return ParameterType.import(parameter, metadata, references, alterations, queue, scope, node);
			});
			if(KSType.isValue(data.inits)) {
				for(let __ks_0 = 0, __ks_1 = data.inits.length, name; __ks_0 < __ks_1; ++__ks_0) {
					name = data.inits[__ks_0];
					type._initVariables[name] = true;
				}
			}
			type.__ks_func_updateParameters_0();
			return type;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 7) {
				if(t0(arguments[0]) && t1(arguments[1]) && t2(arguments[2]) && t2(arguments[3]) && t1(arguments[4]) && t3(arguments[5]) && t4(arguments[6])) {
					return ClassConstructorType.__ks_sttc_import_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
				}
			}
			if(FunctionType.import) {
				return FunctionType.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class ClassDestructorType extends FunctionType {
		static __ks_new_0(...args) {
			const o = Object.create(ClassDestructorType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._access = Accessibility.Public;
		}
		__ks_cons_0(data, node) {
			FunctionType.prototype.__ks_cons_2.call(this, [], data, node);
			this._min = 1;
			this._max = 1;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return ClassDestructorType.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		access() {
			return this.__ks_func_access_rt.call(null, this, this, arguments);
		}
		__ks_func_access_1(access) {
			this._access = access;
			return this;
		}
		__ks_func_access_rt(that, proto, args) {
			const t0 = value => KSType.isEnumInstance(value, Accessibility);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_access_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_access_rt) {
				return super.__ks_func_access_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			return (() => {
				const d = new Dictionary();
				d.access = this._access;
				d.errors = KSHelper.mapArray(this._errors, function(error) {
					return error.__ks_func_toReference_0(references, indexDelta, mode, module);
				});
				return d;
			})();
		}
		__ks_func_processModifiers_0(modifiers) {
			for(let __ks_0 = 0, __ks_1 = modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Async.value) {
					throw new NotImplementedException();
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Private.value) {
					this._access = Accessibility.Private;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Protected.value) {
					this._access = Accessibility.Protected;
				}
			}
		}
	}
	class ClassMethodType extends FunctionType {
		static __ks_new_0(...args) {
			const o = Object.create(ClassMethodType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ClassMethodType.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ClassMethodType.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		static __ks_new_3(...args) {
			const o = Object.create(ClassMethodType.prototype);
			o.__ks_init();
			o.__ks_cons_3(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._abstract = false;
			this._access = Accessibility.Public;
			this._forked = false;
			this._forkedIndex = null;
			this._initVariables = new Dictionary();
			this._instance = false;
			this._overwrite = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		access() {
			return this.__ks_func_access_rt.call(null, this, this, arguments);
		}
		__ks_func_access_2(access) {
			this._access = access;
			return this;
		}
		__ks_func_access_rt(that, proto, args) {
			const t0 = value => KSType.isEnumInstance(value, Accessibility);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_access_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_access_rt) {
				return super.__ks_func_access_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addInitializingInstanceVariable() {
			return this.__ks_func_addInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_addInitializingInstanceVariable_1(name) {
			this._initVariables[name] = true;
		}
		__ks_func_addInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addInitializingInstanceVariable_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_addInitializingInstanceVariable_rt) {
				return super.__ks_func_addInitializingInstanceVariable_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			const clone = ClassMethodType.__ks_new_0(this._scope);
			FunctionType.__ks_sttc_clone_0(this, clone);
			clone._access = this._access;
			clone._index = this._index;
			clone._initVariables = KSHelper.concatDictionary(this._initVariables);
			clone._instance = this._instance;
			if(KSType.isValue(this._overwrite)) {
				clone._overwrite = [...this._overwrite];
			}
			if(this._forked) {
				clone._forked = true;
				clone._forkedIndex = this._forkedIndex;
			}
			return clone;
		}
		__ks_func_export_3(references, indexDelta, mode, module, originalMethods) {
			if(originalMethods === void 0) {
				originalMethods = null;
			}
			const __ks_export_1 = (() => {
				const d = new Dictionary();
				d.index = this._index;
				d.access = this._access;
				d.sealed = this._sealed;
				d.async = this._async;
				d.min = this._min;
				d.max = this._max;
				d.parameters = KSHelper.mapArray(this._parameters, function(parameter) {
					return parameter.__ks_func_export_0(references, indexDelta, mode, module);
				});
				d.returns = this._returnType.__ks_func_toReference_0(references, indexDelta, mode, module);
				d.errors = KSHelper.mapArray(this._errors, function(error) {
					return error.__ks_func_toReference_0(references, indexDelta, mode, module);
				});
				d.inits = Dictionary.keys(this._initVariables);
				return d;
			})();
			if(KSType.isValue(originalMethods) && KSType.isValue(this._overwrite)) {
				const __ks_overwrite_1 = this._overwrite.filter((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (index, __ks_0, __ks_1) => {
						return __ks_Array.__ks_func_contains_0.call(KSHelper.cast(originalMethods, "Array", false, null, "Array"), index);
					};
					return __ks_rt;
				})());
				if(KSOperator.gt(__ks_overwrite_1.length, 0)) {
					__ks_export_1.overwrite = __ks_overwrite_1;
				}
			}
			if(this._forked) {
				__ks_export_1.forkedIndex = this._forkedIndex;
			}
			return __ks_export_1;
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_3.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			return super.__ks_func_export_rt.call(null, that, FunctionType.prototype, args);
		}
		flagAbstract() {
			return this.__ks_func_flagAbstract_rt.call(null, this, this, arguments);
		}
		__ks_func_flagAbstract_1() {
			this._abstract = true;
		}
		__ks_func_flagAbstract_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagAbstract_1.call(that);
			}
			if(super.__ks_func_flagAbstract_rt) {
				return super.__ks_func_flagAbstract_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		flagForked() {
			return this.__ks_func_flagForked_rt.call(null, this, this, arguments);
		}
		__ks_func_flagForked_0(hidden) {
			this._forked = true;
			this._forkedIndex = this._index;
		}
		__ks_func_flagForked_rt(that, proto, args) {
			const t0 = KSType.isBoolean;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_flagForked_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_flagForked_rt) {
				return super.__ks_func_flagForked_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		flagInstance() {
			return this.__ks_func_flagInstance_rt.call(null, this, this, arguments);
		}
		__ks_func_flagInstance_0() {
			this._instance = true;
			return this;
		}
		__ks_func_flagInstance_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagInstance_0.call(that);
			}
			if(super.__ks_func_flagInstance_rt) {
				return super.__ks_func_flagInstance_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getForkedIndex() {
			return this.__ks_func_getForkedIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_getForkedIndex_0() {
			return this._forkedIndex;
		}
		__ks_func_getForkedIndex_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getForkedIndex_0.call(that);
			}
			if(super.__ks_func_getForkedIndex_rt) {
				return super.__ks_func_getForkedIndex_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAbstract() {
			return this.__ks_func_isAbstract_rt.call(null, this, this, arguments);
		}
		__ks_func_isAbstract_1() {
			return this._abstract;
		}
		__ks_func_isAbstract_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAbstract_1.call(that);
			}
			if(super.__ks_func_isAbstract_rt) {
				return super.__ks_func_isAbstract_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isExportable_0() {
			if(!(super.__ks_func_isExportable_0() === true)) {
				return false;
			}
			return this._access !== Accessibility.Internal;
		}
		isForked() {
			return this.__ks_func_isForked_rt.call(null, this, this, arguments);
		}
		__ks_func_isForked_0() {
			return this._forked;
		}
		__ks_func_isForked_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isForked_0.call(that);
			}
			if(super.__ks_func_isForked_rt) {
				return super.__ks_func_isForked_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_1(name) {
			return this._initVariables[name];
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isInstance_0() {
			return this._instance;
		}
		__ks_func_isMethod_0() {
			return true;
		}
		isOverflowing() {
			return this.__ks_func_isOverflowing_rt.call(null, this, this, arguments);
		}
		__ks_func_isOverflowing_0(methods) {
			const mode = MatchingMode(MatchingMode.SimilarParameter | MatchingMode.MissingParameter | MatchingMode.ShiftableParameters | MatchingMode.RequireAllParameters);
			for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				if(this.isSubsetOf(method, mode) === true) {
					return false;
				}
			}
			return true;
		}
		__ks_func_isOverflowing_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, value => KSType.isClassInstance(value, ClassMethodType));
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isOverflowing_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isOverflowing_rt) {
				return super.__ks_func_isOverflowing_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isSealable_0() {
			return true;
		}
		__ks_func_isSubsetOf_13(methods, mode) {
			for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				if(this.isSubsetOf(method, mode) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, value => KSType.isClassInstance(value, ClassMethodType));
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_13.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, FunctionType.prototype, args);
		}
		isSupersetOf() {
			return this.__ks_func_isSupersetOf_rt.call(null, this, this, arguments);
		}
		__ks_func_isSupersetOf_0(methods, mode) {
			for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				if(method.isSubsetOf(this, mode) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isSupersetOf_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, value => KSType.isClassInstance(value, ClassMethodType));
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSupersetOf_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_isSupersetOf_rt) {
				return super.__ks_func_isSupersetOf_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		overwrite() {
			return this.__ks_func_overwrite_rt.call(null, this, this, arguments);
		}
		__ks_func_overwrite_2() {
			return this._overwrite;
		}
		__ks_func_overwrite_3(__ks_overwrite_1) {
			if(__ks_overwrite_1 === void 0) {
				__ks_overwrite_1 = null;
			}
			this._overwrite = __ks_overwrite_1;
		}
		__ks_func_overwrite_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value) || KSType.isNull(value);
			if(args.length === 0) {
				return proto.__ks_func_overwrite_2.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_overwrite_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_overwrite_rt) {
				return super.__ks_func_overwrite_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_processModifiers_0(modifiers) {
			for(let __ks_0 = 0, __ks_1 = modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Abstract.value) {
					this._abstract = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Async.value) {
					this.__ks_func_async_0();
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Internal.value) {
					this._access = Accessibility.Internal;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Private.value) {
					this._access = Accessibility.Private;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Protected.value) {
					this._access = Accessibility.Protected;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Sealed.value) {
					this._sealed = true;
				}
			}
		}
		setForkedIndex() {
			return this.__ks_func_setForkedIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_setForkedIndex_0(forkedIndex) {
			if(forkedIndex === void 0) {
				forkedIndex = null;
			}
			this._forkedIndex = forkedIndex;
			this._forked = true;
			return this;
		}
		__ks_func_setForkedIndex_rt(that, proto, args) {
			const t0 = value => KSType.isNumber(value) || KSType.isNull(value);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setForkedIndex_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_setForkedIndex_rt) {
				return super.__ks_func_setForkedIndex_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_setReturnType_0(returnType) {
			this._returnType = returnType;
			return this;
		}
		static __ks_sttc_fromAST_2(data, node) {
			const scope = node.__ks_func_scope_0();
			return ClassMethodType.__ks_new_2(KSHelper.mapArray(data.parameters, function(parameter) {
				return ParameterType.fromAST(parameter, true, scope, false, node);
			}), data, node);
		}
		static fromAST() {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t1(arguments[1])) {
					return ClassMethodType.__ks_sttc_fromAST_2(arguments[0], arguments[1]);
				}
			}
			if(FunctionType.fromAST) {
				return FunctionType.fromAST.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_0(index, metadata, references, alterations, queue, scope, node) {
			const data = index;
			const type = ClassMethodType.__ks_new_0(scope);
			type._index = data.index;
			type._access = data.access;
			type._sealed = data.sealed;
			type._async = data.async;
			type._min = data.min;
			type._max = data.max;
			type._errors = KSHelper.mapArray(data.errors, function(__ks_throw_1) {
				return Type.import(__ks_throw_1, metadata, references, alterations, queue, scope, node);
			});
			type._returnType = Type.import(data.returns, metadata, references, alterations, queue, scope, node);
			type._parameters = KSHelper.mapArray(data.parameters, function(parameter) {
				return ParameterType.import(parameter, metadata, references, alterations, queue, scope, node);
			});
			if(KSType.isValue(data.overwrite)) {
				type._overwrite = [...data.overwrite];
			}
			if(KSType.isValue(data.forkedIndex)) {
				type._forked = true;
				type._forkedIndex = data.forkedIndex;
			}
			if(KSType.isValue(data.inits)) {
				for(let __ks_0 = 0, __ks_1 = data.inits.length, name; __ks_0 < __ks_1; ++__ks_0) {
					name = data.inits[__ks_0];
					type._initVariables[name] = true;
				}
			}
			type.__ks_func_updateParameters_0();
			return type;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 7) {
				if(t0(arguments[0]) && t1(arguments[1]) && t2(arguments[2]) && t2(arguments[3]) && t1(arguments[4]) && t3(arguments[5]) && t4(arguments[6])) {
					return ClassMethodType.__ks_sttc_import_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
				}
			}
			if(FunctionType.import) {
				return FunctionType.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class ClassVariableType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(ClassVariableType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._access = Accessibility.Public;
			this._default = false;
			this._immutable = false;
			this._lateInit = false;
		}
		__ks_cons_0(scope, type) {
			if(scope === void 0) {
				scope = null;
			}
			Type.prototype.__ks_cons_0.call(this, scope);
			this._type = type;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return ClassVariableType.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			throw new NotSupportedException();
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_discardVariable_0() {
			return this._type;
		}
		access() {
			return this.__ks_func_access_rt.call(null, this, this, arguments);
		}
		__ks_func_access_3(access) {
			this._access = access;
			return this;
		}
		__ks_func_access_rt(that, proto, args) {
			const t0 = value => KSType.isEnumInstance(value, Accessibility);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_access_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_access_rt) {
				return super.__ks_func_access_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			const data = (() => {
				const d = new Dictionary();
				d.access = this._access;
				d.type = this._type.__ks_func_toReference_0(references, indexDelta, mode, module);
				d.default = this._default;
				d.immutable = this._immutable;
				d.lateInit = this._lateInit;
				d.sealed = this._sealed;
				return d;
			})();
			return data;
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		flagNullable() {
			return this.__ks_func_flagNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_flagNullable_0() {
			this._type = this._type.__ks_func_setNullable_0(true);
		}
		__ks_func_flagNullable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagNullable_0.call(that);
			}
			if(super.__ks_func_flagNullable_rt) {
				return super.__ks_func_flagNullable_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasDefaultValue() {
			return this.__ks_func_hasDefaultValue_rt.call(null, this, this, arguments);
		}
		__ks_func_hasDefaultValue_0() {
			return this._default;
		}
		__ks_func_hasDefaultValue_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasDefaultValue_0.call(that);
			}
			if(super.__ks_func_hasDefaultValue_rt) {
				return super.__ks_func_hasDefaultValue_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isImmutable_0() {
			return this._immutable;
		}
		isLateInit() {
			return this.__ks_func_isLateInit_rt.call(null, this, this, arguments);
		}
		__ks_func_isLateInit_0() {
			return this._lateInit;
		}
		__ks_func_isLateInit_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isLateInit_0.call(that);
			}
			if(super.__ks_func_isLateInit_rt) {
				return super.__ks_func_isLateInit_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isNullable_0() {
			return this._type.__ks_func_isNullable_0();
		}
		isRequiringInitialization() {
			return this.__ks_func_isRequiringInitialization_rt.call(null, this, this, arguments);
		}
		__ks_func_isRequiringInitialization_0() {
			return !(this._lateInit || this._default || (this._type.__ks_func_isNullable_0() === true)) || (this._lateInit && this._immutable);
		}
		__ks_func_isRequiringInitialization_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRequiringInitialization_0.call(that);
			}
			if(super.__ks_func_isRequiringInitialization_rt) {
				return super.__ks_func_isRequiringInitialization_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isSubsetOf_14(value, mode) {
			if((mode & MatchingMode.Exact) !== 0n) {
				return this._type.__ks_func_isSubsetOf_0(value.__ks_func_type_0(), MatchingMode.Exact);
			}
			else {
				return true;
			}
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, ClassVariableType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_14(value, mode);
			}
			return super.__ks_func_isSubsetOf_0(value, mode);
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ClassVariableType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_14.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, Type.prototype, args);
		}
		isUsingGetter() {
			return this.__ks_func_isUsingGetter_rt.call(null, this, this, arguments);
		}
		__ks_func_isUsingGetter_0() {
			return this._sealed && this._default;
		}
		__ks_func_isUsingGetter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isUsingGetter_0.call(that);
			}
			if(super.__ks_func_isUsingGetter_rt) {
				return super.__ks_func_isUsingGetter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isUsingSetter() {
			return this.__ks_func_isUsingSetter_rt.call(null, this, this, arguments);
		}
		__ks_func_isUsingSetter_0() {
			return this._sealed && this._default;
		}
		__ks_func_isUsingSetter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isUsingSetter_0.call(that);
			}
			if(super.__ks_func_isUsingSetter_rt) {
				return super.__ks_func_isUsingSetter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			return this._type.__ks_func_toFragments_0(fragments, node);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			return this._type.__ks_func_toQuote_0();
		}
		__ks_func_toQuote_3(__ks_double_1) {
			return this._type.toQuote(__ks_double_1);
		}
		__ks_func_toQuote_1(double) {
			return this.__ks_func_toQuote_3(double);
		}
		__ks_func_toQuote_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 0) {
				return proto.__ks_func_toQuote_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toQuote_3.call(that, args[0]);
				}
			}
			return super.__ks_func_toQuote_rt.call(null, that, Type.prototype, args);
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			return this._type.__ks_func_toPositiveTestFragments_0(fragments, node, junction);
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_2(type) {
			this._type = type;
			return this;
		}
		__ks_func_type_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_type_2.call(that, args[0]);
				}
			}
			return super.__ks_func_type_rt.call(null, that, Type.prototype, args);
		}
		static __ks_sttc_fromAST_4(data, node) {
			const scope = node.__ks_func_scope_0();
			let type = null;
			if(KSType.isValue(data.type)) {
				type = new ClassVariableType(scope, Type.__ks_sttc_fromAST_0(data.type, node));
			}
			else {
				type = new ClassVariableType(scope, AnyType.NullableUnexplicit);
			}
			if(KSType.isValue(data.modifiers)) {
				for(let __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
					modifier = data.modifiers[__ks_0];
					let __ks_2 = modifier.kind.valueOf();
					if(__ks_2 === ModifierKind.Immutable.value) {
						type._immutable = true;
					}
					else if(__ks_2 === ModifierKind.Internal.value) {
						type.__ks_func_access_3(Accessibility.Internal);
					}
					else if(__ks_2 === ModifierKind.LateInit.value) {
						type._lateInit = true;
					}
					else if(__ks_2 === ModifierKind.Private.value) {
						type.__ks_func_access_3(Accessibility.Private);
					}
					else if(__ks_2 === ModifierKind.Protected.value) {
						type.__ks_func_access_3(Accessibility.Protected);
					}
				}
			}
			if(KSType.isValue(data.value)) {
				type._default = true;
				type._lateInit = false;
			}
			return type;
		}
		static fromAST() {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t1(arguments[1])) {
					return ClassVariableType.__ks_sttc_fromAST_4(arguments[0], arguments[1]);
				}
			}
			if(Type.fromAST) {
				return Type.fromAST.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_0(index, metadata, references, alterations, queue, scope, node) {
			const data = index;
			const type = ClassVariableType.__ks_new_0(scope, Type.import(data.type, metadata, references, alterations, queue, scope, node));
			type._access = data.access;
			type._default = data.default;
			type._immutable = data.immutable;
			type._lateInit = data.lateInit;
			return type;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 7) {
				if(t0(arguments[0]) && t1(arguments[1]) && t2(arguments[2]) && t2(arguments[3]) && t1(arguments[4]) && t3(arguments[5]) && t4(arguments[6])) {
					return ClassVariableType.__ks_sttc_import_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
				}
			}
			if(Type.import) {
				return Type.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class DestructurableObjectType extends ReferenceType {
		static __ks_new_0() {
			const o = Object.create(DestructurableObjectType.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._properties = new Dictionary();
		}
		__ks_cons_0() {
			ReferenceType.prototype.__ks_cons_0.call(this, null, "__ks_DestructurableObject", void 0, void 0);
		}
		__ks_cons_rt(that, args) {
			if(args.length === 0) {
				return DestructurableObjectType.prototype.__ks_cons_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		addProperty() {
			return this.__ks_func_addProperty_rt.call(null, this, this, arguments);
		}
		__ks_func_addProperty_1(name, type) {
			this._properties[name] = type;
		}
		__ks_func_addProperty_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addProperty_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addProperty_rt) {
				return super.__ks_func_addProperty_rt.call(null, that, ReferenceType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isDictionary_0() {
			return false;
		}
		__ks_func_isExplicit_0() {
			return true;
		}
		__ks_func_isFunction_0() {
			return false;
		}
		__ks_func_isNullable_0() {
			return false;
		}
		__ks_func_isObject_0() {
			return true;
		}
		__ks_func_isUnion_0() {
			return false;
		}
		__ks_func_matchContentOf_5(value) {
			return false;
		}
		__ks_func_matchContentOf_0(value) {
			return this.__ks_func_matchContentOf_5(value);
		}
		__ks_func_matchContentOf_2(value) {
			return this.__ks_func_matchContentOf_5(value);
		}
		__ks_func_matchContentOf_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_matchContentOf_5.call(that, args[0]);
				}
			}
			return super.__ks_func_matchContentOf_rt.call(null, that, ReferenceType.prototype, args);
		}
		properties() {
			return this.__ks_func_properties_rt.call(null, this, this, arguments);
		}
		__ks_func_properties_0() {
			return this._properties;
		}
		__ks_func_properties_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_properties_0.call(that);
			}
			if(super.__ks_func_properties_rt) {
				return super.__ks_func_properties_rt.call(null, that, ReferenceType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			let str = "{";
			let first = true;
			for(const name in this._properties) {
				const property = this._properties[name];
				if(first) {
					first = false;
				}
				else {
					str += ", ";
				}
				str += KSHelper.concatString(name, ": ", property.toQuote());
			}
			return str + "}";
		}
		__ks_func_toTestFunctionFragments_0(fragments, node) {
			fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isDestructurableObject"));
		}
		__ks_func_toTestFunctionFragments_1(fragments, node, junction) {
			fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isDestructurableObject"));
		}
	}
	const EnumTypeKind = KSHelper.enum(String, {
		Flags: "flags",
		Number: "number",
		String: "string"
	});
	class EnumType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(EnumType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._alteration = false;
			this._assessment = null;
			this._exhaustiveness = (() => {
				const d = new Dictionary();
				d.instanceMethods = new Dictionary();
				d.staticMethods = new Dictionary();
				return d;
			})();
			this._function = null;
			this._index = -1;
			this._instanceAssessments = new Dictionary();
			this._instanceMethods = new Dictionary();
			this._staticAssessments = new Dictionary();
			this._staticMethods = new Dictionary();
			this._variables = new Dictionary();
			this._sequences = (() => {
				const d = new Dictionary();
				d.defaults = -1;
				d.instanceMethods = new Dictionary();
				d.staticMethods = new Dictionary();
				return d;
			})();
		}
		__ks_cons_0(scope, kind) {
			if(scope === void 0) {
				scope = null;
			}
			if(kind === void 0 || kind === null) {
				kind = EnumTypeKind.Number;
			}
			Type.prototype.__ks_cons_0.call(this, scope);
			this._kind = kind;
			if(this._kind === EnumTypeKind.String) {
				this._type = scope.__ks_func_reference_0("String");
			}
			else {
				this._type = scope.__ks_func_reference_0("Number");
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t1 = value => KSType.isEnumInstance(value, EnumTypeKind) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return EnumType.prototype.__ks_cons_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		addInstanceMethod() {
			return this.__ks_func_addInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_addInstanceMethod_1(name, type) {
			if(!KSType.isValue(this._sequences.instanceMethods[name])) {
				this._sequences.instanceMethods[name] = 0;
			}
			let index = type.__ks_func_index_0();
			if(index === -1) {
				index = this._sequences.instanceMethods[name]++;
				type.__ks_func_index_1(index);
			}
			else {
				if(KSOperator.gte(index, this._sequences.instanceMethods[name])) {
					this._sequences.instanceMethods[name] = index + 1;
				}
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				this._instanceMethods[name].push(type);
			}
			else {
				this._instanceMethods[name] = [type];
			}
			type.__ks_func_flagInstance_1();
			if(this._alteration) {
				type.__ks_func_flagAlteration_0();
			}
			return index;
		}
		__ks_func_addInstanceMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, EnumMethodType);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addInstanceMethod_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addInstanceMethod_rt) {
				return super.__ks_func_addInstanceMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addPropertyFromAST() {
			return this.__ks_func_addPropertyFromAST_rt.call(null, this, this, arguments);
		}
		__ks_func_addPropertyFromAST_1(data, node) {
			const options = Attribute.configure(data, null, AttributeTarget.Property, node.file());
			let __ks_0 = data.kind.valueOf();
			if(__ks_0 === NodeKind.FieldDeclaration.value) {
				this.addVariable(data.name.name);
			}
			else if(__ks_0 === NodeKind.MethodDeclaration.value) {
				let instance = true;
				for(let i = 0, __ks_1 = data.modifiers.length; i < __ks_1 && instance; ++i) {
					if(KSHelper.valueOf(data.modifiers[i].kind) === ModifierKind.Static.value) {
						instance = false;
					}
				}
				const type = EnumMethodType.fromAST(data, node);
				if(options.rules.nonExhaustive === true) {
					if(instance) {
						this._exhaustiveness.instanceMethods[data.name.name] = false;
					}
					else {
						this._exhaustiveness.staticMethods[data.name.name] = false;
					}
				}
				if(instance) {
					this.dedupInstanceMethod(data.name.name, type);
				}
				else {
					this.dedupStaticMethod(data.name.name, type);
				}
			}
			else {
				throw new NotSupportedException(KSHelper.concatString("Unexpected kind ", data.kind), node);
			}
		}
		__ks_func_addPropertyFromAST_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_addPropertyFromAST_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addPropertyFromAST_rt) {
				return super.__ks_func_addPropertyFromAST_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addStaticMethod() {
			return this.__ks_func_addStaticMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_addStaticMethod_0(name, type) {
			if(!KSType.isArray(this._staticMethods[name])) {
				this._staticMethods[name] = [];
				this._sequences.staticMethods[name] = 0;
			}
			let index = type.__ks_func_index_0();
			if(index === -1) {
				index = this._sequences.staticMethods[name]++;
				type.__ks_func_index_1(index);
			}
			else {
				if(KSOperator.gte(index, this._sequences.staticMethods[name])) {
					this._sequences.staticMethods[name] = index + 1;
				}
			}
			this._staticMethods[name].push(type);
			if(this._alteration) {
				type.__ks_func_flagAlteration_0();
			}
			return index;
		}
		__ks_func_addStaticMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, EnumMethodType);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addStaticMethod_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addStaticMethod_rt) {
				return super.__ks_func_addStaticMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addVariable() {
			return this.__ks_func_addVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_addVariable_0(name) {
			const variable = EnumVariableType.__ks_new_0();
			this._variables[name] = variable;
			if(this._alteration) {
				variable.__ks_func_flagAlteration_0();
			}
			return variable;
		}
		__ks_func_addVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_addVariable_rt) {
				return super.__ks_func_addVariable_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		assessment() {
			return this.__ks_func_assessment_rt.call(null, this, this, arguments);
		}
		__ks_func_assessment_2(reference, node) {
			if(this._assessment === null) {
				this._assessment = Router.assess.__ks_1([this.__ks_func_function_0(reference, node)], reference.__ks_func_name_2(), node);
			}
			return this._assessment;
		}
		__ks_func_assessment_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ReferenceType);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_assessment_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_assessment_rt) {
				return super.__ks_func_assessment_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			const that = EnumType.__ks_new_0(this._scope);
			return that.__ks_func_copyFrom_2(this);
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		copyFrom() {
			return this.__ks_func_copyFrom_rt.call(null, this, this, arguments);
		}
		__ks_func_copyFrom_2(src) {
			this._alien = src._alien;
			this._sealed = src._sealed;
			this._systemic = src._systemic;
			this._requirement = src._requirement;
			this._required = src._required;
			for(const name in src._staticMethods) {
				const methods = src._staticMethods[name];
				this._staticMethods[name] = [].concat(methods);
			}
			for(const name in src._instanceMethods) {
				const methods = src._instanceMethods[name];
				this._instanceMethods[name] = [].concat(methods);
			}
			for(const name in src._variables) {
				const variable = src._variables[name];
				this._variables[name] = variable;
			}
			this._exhaustive = src._exhaustive;
			this._exhaustiveness = __ks_Dictionary._sm_clone(src._exhaustiveness);
			this._sequences = __ks_Dictionary._sm_clone(src._sequences);
			if(this._requirement || this._alien) {
				this.setAlterationReference(src);
			}
			return this;
		}
		__ks_func_copyFrom_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, EnumType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_copyFrom_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_copyFrom_rt) {
				return super.__ks_func_copyFrom_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		dedupInstanceMethod() {
			return this.__ks_func_dedupInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_dedupInstanceMethod_1(name, type) {
			let index = type.__ks_func_index_0();
			if(KSType.isValue(index)) {
				if(KSType.isArray(this._instanceMethods[name])) {
					for(let __ks_0 = 0, __ks_1 = this._instanceMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = this._instanceMethods[name][__ks_0];
						if(method.index() === index) {
							return index;
						}
					}
				}
			}
			return this.__ks_func_addInstanceMethod_1(name, type);
		}
		__ks_func_dedupInstanceMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, EnumMethodType);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_dedupInstanceMethod_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_dedupInstanceMethod_rt) {
				return super.__ks_func_dedupInstanceMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		dedupStaticMethod() {
			return this.__ks_func_dedupStaticMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_dedupStaticMethod_0(name, type) {
			let index = type.__ks_func_index_0();
			if(KSType.isValue(index)) {
				if(KSType.isArray(this._staticMethods[name])) {
					for(let __ks_0 = 0, __ks_1 = this._staticMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = this._staticMethods[name][__ks_0];
						if(method.index() === index) {
							return index;
						}
					}
				}
			}
			return this.__ks_func_addStaticMethod_0(name, type);
		}
		__ks_func_dedupStaticMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, EnumMethodType);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_dedupStaticMethod_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_dedupStaticMethod_rt) {
				return super.__ks_func_dedupStaticMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			const exhaustive = this.__ks_func_isExhaustive_0();
			const __ks_export_1 = (() => {
				const d = new Dictionary();
				d.kind = TypeKind.Enum;
				d.type = this._kind;
				d.sequenceIndex = this._index;
				d.exhaustive = exhaustive;
				d.variables = KSHelper.mapDictionary(this._variables, function(name) {
					return name;
				});
				d.instanceMethods = new Dictionary();
				d.staticMethods = new Dictionary();
				return d;
			})();
			for(const name in this._instanceMethods) {
				const methods = this._instanceMethods[name];
				__ks_export_1.instanceMethods[name] = KSHelper.mapArray(methods, function(method) {
					return method.export(references, indexDelta, mode, module);
				}, function(method) {
					return method.isExportable(mode);
				});
			}
			for(const name in this._staticMethods) {
				const methods = this._staticMethods[name];
				__ks_export_1.staticMethods[name] = KSHelper.mapArray(methods, function(method) {
					return method.export(references, indexDelta, mode, module);
				}, function(method) {
					return method.isExportable(mode);
				});
			}
			__ks_export_1.sequences = [this._sequences.defaults];
			if(exhaustive === true) {
				const exhaustiveness = new Dictionary();
				let notEmpty = false;
				if(!__ks_Dictionary._sm_isEmpty(this._exhaustiveness.staticMethods)) {
					exhaustiveness.staticMethods = this._exhaustiveness.staticMethods;
					notEmpty = true;
				}
				if(!__ks_Dictionary._sm_isEmpty(this._exhaustiveness.instanceMethods)) {
					exhaustiveness.instanceMethods = this._exhaustiveness.instanceMethods;
					notEmpty = true;
				}
				if(notEmpty) {
					__ks_export_1.exhaustiveness = exhaustiveness;
				}
			}
			return __ks_export_1;
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		function() {
			return this.__ks_func_function_rt.call(null, this, this, arguments);
		}
		__ks_func_function_0(reference, node) {
			if(this._function === null) {
				const scope = node.scope();
				this._function = new FunctionType(scope);
				this._function.__ks_func_addParameter_0(this._type, "value", 1, 1);
				this._function.setReturnType(reference.setNullable(true));
			}
			return this._function;
		}
		__ks_func_function_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_function_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_function_rt) {
				return super.__ks_func_function_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasVariable() {
			return this.__ks_func_hasVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasVariable_0(name) {
			return KSType.isValue(this._variables[name]);
		}
		__ks_func_hasVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasVariable_rt) {
				return super.__ks_func_hasVariable_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getInstanceAssessment() {
			return this.__ks_func_getInstanceAssessment_rt.call(null, this, this, arguments);
		}
		__ks_func_getInstanceAssessment_0(name, node) {
			let methods;
			let assessment = this._instanceAssessments[name];
			if(KSType.isValue(assessment)) {
				return assessment;
			}
			else if(KSType.isValue((methods = this._instanceMethods[name]))) {
				const assessment = Router.assess.__ks_1([...methods], name, node);
				this._instanceAssessments[name] = assessment;
				return assessment;
			}
			else {
				return null;
			}
		}
		__ks_func_getInstanceAssessment_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_getInstanceAssessment_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getInstanceAssessment_rt) {
				return super.__ks_func_getInstanceAssessment_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getInstantiableMethod() {
			return this.__ks_func_getInstantiableMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_getInstantiableMethod_0(name, type, mode) {
			const result = [];
			let methods = this._instanceMethods[name];
			if(KSType.isValue(methods)) {
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					if(method.isSubsetOf(type, mode) === true) {
						result.push(method);
					}
				}
			}
			if(result.length === 1) {
				return result[0];
			}
			else {
				return null;
			}
		}
		__ks_func_getInstantiableMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, FunctionType);
			const t2 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_getInstantiableMethod_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_getInstantiableMethod_rt) {
				return super.__ks_func_getInstantiableMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getStaticAssessment() {
			return this.__ks_func_getStaticAssessment_rt.call(null, this, this, arguments);
		}
		__ks_func_getStaticAssessment_0(name, node) {
			let methods;
			let assessment = this._staticAssessments[name];
			if(KSType.isValue(assessment)) {
				return assessment;
			}
			else if(KSType.isValue((methods = this._staticMethods[name]))) {
				const assessment = Router.assess.__ks_1([...methods], name, node);
				this._staticAssessments[name] = assessment;
				return assessment;
			}
			else {
				return null;
			}
		}
		__ks_func_getStaticAssessment_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_getStaticAssessment_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getStaticAssessment_rt) {
				return super.__ks_func_getStaticAssessment_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getProperty_0(name) {
			if(name === "value") {
				return this._type;
			}
			else {
				return null;
			}
		}
		hasInstanceMethod() {
			return this.__ks_func_hasInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_hasInstanceMethod_1(name) {
			if(KSType.isArray(this._instanceMethods[name])) {
				return true;
			}
			else {
				return false;
			}
		}
		__ks_func_hasInstanceMethod_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasInstanceMethod_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasInstanceMethod_rt) {
				return super.__ks_func_hasInstanceMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasStaticMethod() {
			return this.__ks_func_hasStaticMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_hasStaticMethod_0(name) {
			if(KSType.isArray(this._staticMethods[name])) {
				return true;
			}
			else {
				return false;
			}
		}
		__ks_func_hasStaticMethod_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasStaticMethod_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasStaticMethod_rt) {
				return super.__ks_func_hasStaticMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasMatchingInstanceMethod() {
			return this.__ks_func_hasMatchingInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_hasMatchingInstanceMethod_1(name, type, mode) {
			if(KSType.isArray(this._instanceMethods[name])) {
				for(let __ks_0 = 0, __ks_1 = this._instanceMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._instanceMethods[name][__ks_0];
					if(method.isMatching(type, mode) === true) {
						return true;
					}
				}
			}
			return false;
		}
		__ks_func_hasMatchingInstanceMethod_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, FunctionType);
			const t2 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_hasMatchingInstanceMethod_1.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_hasMatchingInstanceMethod_rt) {
				return super.__ks_func_hasMatchingInstanceMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasMatchingStaticMethod() {
			return this.__ks_func_hasMatchingStaticMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_hasMatchingStaticMethod_0(name, type, mode) {
			if(KSType.isArray(this._staticMethods[name])) {
				for(let __ks_0 = 0, __ks_1 = this._staticMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._staticMethods[name][__ks_0];
					if(method.isMatching(type, mode) === true) {
						return true;
					}
				}
			}
			return false;
		}
		__ks_func_hasMatchingStaticMethod_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, FunctionType);
			const t2 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_hasMatchingStaticMethod_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_hasMatchingStaticMethod_rt) {
				return super.__ks_func_hasMatchingStaticMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_hasProperty_0(name) {
			return name === "value";
		}
		incDefaultSequence() {
			return this.__ks_func_incDefaultSequence_rt.call(null, this, this, arguments);
		}
		__ks_func_incDefaultSequence_1() {
			return ++this._sequences.defaults;
		}
		__ks_func_incDefaultSequence_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_incDefaultSequence_1.call(that);
			}
			if(super.__ks_func_incDefaultSequence_rt) {
				return super.__ks_func_incDefaultSequence_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		index() {
			return this.__ks_func_index_rt.call(null, this, this, arguments);
		}
		__ks_func_index_2() {
			return this._index;
		}
		__ks_func_index_3(index) {
			this._index = index;
			return this._index;
		}
		__ks_func_index_rt(that, proto, args) {
			const t0 = KSType.isNumber;
			if(args.length === 0) {
				return proto.__ks_func_index_2.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_index_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_index_rt) {
				return super.__ks_func_index_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isComparableWith_0(type) {
			if(this.__ks_func_isNumber_0() === true) {
				return type.__ks_func_canBeNumber_0();
			}
			else if(this.__ks_func_isString_0() === true) {
				return type.__ks_func_canBeString_0();
			}
			else {
				return false;
			}
		}
		__ks_func_isEnum_0() {
			return true;
		}
		isExhaustiveInstanceMethod() {
			return this.__ks_func_isExhaustiveInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isExhaustiveInstanceMethod_2(name) {
			if(this._exhaustiveness.instanceMethods[name] === false) {
				return false;
			}
			else {
				return true;
			}
		}
		__ks_func_isExhaustiveInstanceMethod_3(name, node) {
			return (this.__ks_func_isExhaustive_1(node) === true) && (this.__ks_func_isExhaustiveInstanceMethod_2(name) === true);
		}
		__ks_func_isExhaustiveInstanceMethod_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isExhaustiveInstanceMethod_2.call(that, args[0]);
				}
			}
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_isExhaustiveInstanceMethod_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_isExhaustiveInstanceMethod_rt) {
				return super.__ks_func_isExhaustiveInstanceMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isExhaustiveStaticMethod() {
			return this.__ks_func_isExhaustiveStaticMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isExhaustiveStaticMethod_0(name) {
			if(this._exhaustiveness.staticMethods[name] === false) {
				return false;
			}
			else {
				return true;
			}
		}
		__ks_func_isExhaustiveStaticMethod_1(name, node) {
			return (this.__ks_func_isExhaustive_1(node) === true) && (this.__ks_func_isExhaustiveStaticMethod_0(name) === true);
		}
		__ks_func_isExhaustiveStaticMethod_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isExhaustiveStaticMethod_0.call(that, args[0]);
				}
			}
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_isExhaustiveStaticMethod_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_isExhaustiveStaticMethod_rt) {
				return super.__ks_func_isExhaustiveStaticMethod_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isFlags() {
			return this.__ks_func_isFlags_rt.call(null, this, this, arguments);
		}
		__ks_func_isFlags_0() {
			return this._kind === EnumTypeKind.Flags;
		}
		__ks_func_isFlags_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isFlags_0.call(that);
			}
			if(super.__ks_func_isFlags_rt) {
				return super.__ks_func_isFlags_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isMergeable_0(type) {
			return type.isEnum();
		}
		__ks_func_isNumber_0() {
			return this._type.__ks_func_isNumber_0();
		}
		__ks_func_isString_0() {
			return this._type.__ks_func_isString_0();
		}
		__ks_func_isSubsetOf_15(value, mode) {
			return (mode & MatchingMode.Similar) !== 0n;
		}
		__ks_func_isSubsetOf_16(value, mode) {
			if((mode & MatchingMode.Similar) !== 0n) {
				return value.__ks_func_name_2() === "Enum";
			}
			return false;
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, EnumType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_15(value, mode);
			}
			if(KSType.isClassInstance(value, ReferenceType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_16(value, mode);
			}
			return super.__ks_func_isSubsetOf_0(value, mode);
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, EnumType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			const t2 = value => KSType.isClassInstance(value, ReferenceType);
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_15.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t2(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_16.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, Type.prototype, args);
		}
		kind() {
			return this.__ks_func_kind_rt.call(null, this, this, arguments);
		}
		__ks_func_kind_0() {
			return this._kind;
		}
		__ks_func_kind_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_kind_0.call(that);
			}
			if(super.__ks_func_kind_rt) {
				return super.__ks_func_kind_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listMatchingInstanceMethods() {
			return this.__ks_func_listMatchingInstanceMethods_rt.call(null, this, this, arguments);
		}
		__ks_func_listMatchingInstanceMethods_1(name, type, mode) {
			const results = [];
			if(KSType.isArray(this._instanceMethods[name])) {
				for(let __ks_0 = 0, __ks_1 = this._instanceMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._instanceMethods[name][__ks_0];
					if(method.isMatching(type, mode) === true) {
						results.push(method);
					}
				}
			}
			return results;
		}
		__ks_func_listMatchingInstanceMethods_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, FunctionType);
			const t2 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_listMatchingInstanceMethods_1.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_listMatchingInstanceMethods_rt) {
				return super.__ks_func_listMatchingInstanceMethods_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listVariables() {
			return this.__ks_func_listVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_listVariables_0() {
			return KSHelper.mapDictionary(this._variables, function(name) {
				return name;
			});
		}
		__ks_func_listVariables_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_listVariables_0.call(that);
			}
			if(super.__ks_func_listVariables_rt) {
				return super.__ks_func_listVariables_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setAlterationReference() {
			return this.__ks_func_setAlterationReference_rt.call(null, this, this, arguments);
		}
		__ks_func_setAlterationReference_1(alterationReference) {
			if(alterationReference === void 0) {
				alterationReference = null;
			}
			this._alterationReference = alterationReference;
			this._alteration = true;
		}
		__ks_func_setAlterationReference_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ClassType) || KSType.isNull(value);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setAlterationReference_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_setAlterationReference_rt) {
				return super.__ks_func_setAlterationReference_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_shallBeNamed_0() {
			return true;
		}
		step() {
			return this.__ks_func_step_rt.call(null, this, this, arguments);
		}
		__ks_func_step_0() {
			return ++this._index;
		}
		__ks_func_step_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_step_0.call(that);
			}
			if(super.__ks_func_step_rt) {
				return super.__ks_func_step_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			throw new NotImplementedException();
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			throw new NotImplementedException();
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("enum", this._sequences.defaults);
			for(const name in this._sequences.staticMethods) {
				const sequence = this._sequences.staticMethods[name];
				variations.push(name, sequence);
			}
			for(const name in this._sequences.instanceMethods) {
				const sequence = this._sequences.instanceMethods[name];
				variations.push(name, sequence);
			}
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_0() {
			return this._type;
		}
		static __ks_sttc_import_6(index, data, metadata, references, alterations, queue, scope, node) {
			const type = new EnumType(scope, EnumTypeKind(data.type));
			type._exhaustive = data.exhaustive;
			type._index = data.sequenceIndex;
			if(KSType.isValue(data.sequences)) {
				type._sequences.defaults = data.sequences[0];
			}
			for(let __ks_0 = 0, __ks_1 = data.variables.length, name; __ks_0 < __ks_1; ++__ks_0) {
				name = data.variables[__ks_0];
				type.addVariable(name);
			}
			if((data.exhaustive === true) && KSType.isValue(data.exhaustiveness)) {
				if(KSType.isValue(data.exhaustiveness.instanceMethods)) {
					type._exhaustiveness.instanceMethods = data.exhaustiveness.instanceMethods;
				}
				if(KSType.isValue(data.exhaustiveness.staticMethods)) {
					type._exhaustiveness.staticMethods = data.exhaustiveness.staticMethods;
				}
			}
			queue.push((() => {
				const __ks_rt = (...args) => {
					if(args.length === 0) {
						return __ks_rt.__ks_0.call(this);
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = () => {
					for(const name in data.instanceMethods) {
						const methods = data.instanceMethods[name];
						for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = methods[__ks_0];
							type.__ks_func_dedupInstanceMethod_1(name, EnumMethodType.import(method, metadata, references, alterations, queue, scope, node));
						}
					}
					for(const name in data.staticMethods) {
						const methods = data.staticMethods[name];
						for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = methods[__ks_0];
							type.__ks_func_dedupStaticMethod_0(name, EnumMethodType.import(method, metadata, references, alterations, queue, scope, node));
						}
					}
				};
				return __ks_rt;
			})());
			return type;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 8) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2]) && t2(arguments[3]) && t2(arguments[4]) && t1(arguments[5]) && t3(arguments[6]) && t4(arguments[7])) {
					return EnumType.__ks_sttc_import_6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(Type.import) {
				return Type.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class EnumVariableType {
		static __ks_new_0() {
			const o = Object.create(EnumVariableType.prototype);
			o.__ks_init();
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
			this._alteration = false;
		}
		__ks_cons_rt(that, args) {
			if(args.length !== 0) {
				throw KSHelper.badArgs();
			}
		}
		flagAlteration() {
			return this.__ks_func_flagAlteration_rt.call(null, this, this, arguments);
		}
		__ks_func_flagAlteration_0() {
			this._alteration = true;
			return this;
		}
		__ks_func_flagAlteration_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagAlteration_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isAlteration() {
			return this.__ks_func_isAlteration_rt.call(null, this, this, arguments);
		}
		__ks_func_isAlteration_0() {
			return this._alteration;
		}
		__ks_func_isAlteration_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAlteration_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		unflagAlteration() {
			return this.__ks_func_unflagAlteration_rt.call(null, this, this, arguments);
		}
		__ks_func_unflagAlteration_0() {
			this._alteration = false;
			return this;
		}
		__ks_func_unflagAlteration_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_unflagAlteration_0.call(that);
			}
			throw KSHelper.badArgs();
		}
	}
	class EnumMethodType extends FunctionType {
		static __ks_new_0(...args) {
			const o = Object.create(EnumMethodType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(EnumMethodType.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(EnumMethodType.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		static __ks_new_3(...args) {
			const o = Object.create(EnumMethodType.prototype);
			o.__ks_init();
			o.__ks_cons_3(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._access = Accessibility.Public;
			this._alteration = false;
			this._instance = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_clone_1() {
			const clone = EnumMethodType.__ks_new_0(this._scope);
			FunctionType.__ks_sttc_clone_0(this, clone);
			clone._access = this._access;
			clone._alteration = this._alteration;
			clone._index = this._index;
			return clone;
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			const __ks_export_1 = (() => {
				const d = new Dictionary();
				d.index = this._index;
				d.access = this._access;
				d.async = this._async;
				d.min = this._min;
				d.max = this._max;
				d.parameters = KSHelper.mapArray(this._parameters, function(parameter) {
					return parameter.__ks_func_export_0(references, indexDelta, mode, module);
				});
				d.returns = this._returnType.__ks_func_toReference_0(references, indexDelta, mode, module);
				d.errors = KSHelper.mapArray(this._errors, function(error) {
					return error.__ks_func_toReference_0(references, indexDelta, mode, module);
				});
				return d;
			})();
			return __ks_export_1;
		}
		flagAlteration() {
			return this.__ks_func_flagAlteration_rt.call(null, this, this, arguments);
		}
		__ks_func_flagAlteration_0() {
			this._alteration = true;
			return this;
		}
		__ks_func_flagAlteration_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagAlteration_0.call(that);
			}
			if(super.__ks_func_flagAlteration_rt) {
				return super.__ks_func_flagAlteration_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		flagInstance() {
			return this.__ks_func_flagInstance_rt.call(null, this, this, arguments);
		}
		__ks_func_flagInstance_1() {
			this._instance = true;
			return this;
		}
		__ks_func_flagInstance_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagInstance_1.call(that);
			}
			if(super.__ks_func_flagInstance_rt) {
				return super.__ks_func_flagInstance_rt.call(null, that, FunctionType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isInstance_0() {
			return this._instance;
		}
		__ks_func_isMethod_0() {
			return true;
		}
		static __ks_sttc_fromAST_2(data, node) {
			const scope = node.__ks_func_scope_0();
			return EnumMethodType.__ks_new_2(KSHelper.mapArray(data.parameters, function(parameter) {
				return ParameterType.fromAST(parameter, true, scope, false, node);
			}), data, node);
		}
		static fromAST() {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t1(arguments[1])) {
					return EnumMethodType.__ks_sttc_fromAST_2(arguments[0], arguments[1]);
				}
			}
			if(FunctionType.fromAST) {
				return FunctionType.fromAST.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_0(index, metadata, references, alterations, queue, scope, node) {
			const data = index;
			const type = EnumMethodType.__ks_new_0(scope);
			type._identifier = data.id;
			type._access = data.access;
			type._async = data.async;
			type._min = data.min;
			type._max = data.max;
			queue.push((() => {
				const __ks_rt = (...args) => {
					if(args.length === 0) {
						return __ks_rt.__ks_0.call(this);
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = () => {
					type._errors = KSHelper.mapArray(data.errors, function(error) {
						return Type.import(error, metadata, references, alterations, queue, scope, node);
					});
					type._returnType = Type.import(data.returns, metadata, references, alterations, queue, scope, node);
					type._parameters = KSHelper.mapArray(data.parameters, function(parameter) {
						return ParameterType.import(parameter, metadata, references, alterations, queue, scope, node);
					});
					type.__ks_func_updateParameters_0();
				};
				return __ks_rt;
			})());
			return type;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 7) {
				if(t0(arguments[0]) && t1(arguments[1]) && t2(arguments[2]) && t2(arguments[3]) && t1(arguments[4]) && t3(arguments[5]) && t4(arguments[6])) {
					return EnumMethodType.__ks_sttc_import_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
				}
			}
			if(FunctionType.import) {
				return FunctionType.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class NamespaceType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(NamespaceType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._altering = false;
			this._alterations = new Dictionary();
			this._properties = new Dictionary();
			this._sealProperties = new Dictionary();
		}
		__ks_cons_0(scope) {
			Type.prototype.__ks_cons_0.call(this, NamespaceTypeScope.__ks_new_0(scope));
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope);
			if(args.length === 1) {
				if(t0(args[0])) {
					return NamespaceType.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		addFunction() {
			return this.__ks_func_addFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_addFunction_3(name, type) {
			let property = this._properties[name];
			if(KSType.isValue(property)) {
				const propertyType = property.type();
				if(KSType.isClassInstance(propertyType, OverloadedFunctionType)) {
					propertyType.__ks_func_addFunction_0(type);
				}
				else if(KSType.isClassInstance(propertyType, FunctionType)) {
					throw new NotImplementedException();
				}
				else {
					throw new NotSupportedException();
				}
				if(type.__ks_func_isSealed_0() === true) {
					this._sealProperties[name] = true;
				}
				this._alterations[name] = true;
			}
			else {
				type.__ks_func_index_1(0);
				this.__ks_func_addProperty_2(name, type);
			}
			return type.__ks_func_index_0();
		}
		__ks_func_addFunction_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, FunctionType);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addFunction_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addFunction_rt) {
				return super.__ks_func_addFunction_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addProperty() {
			return this.__ks_func_addProperty_rt.call(null, this, this, arguments);
		}
		__ks_func_addProperty_2(name, property) {
			if(!KSType.isClassInstance(property, NamespacePropertyType)) {
				property = new NamespacePropertyType(property.__ks_func_scope_0(), property);
			}
			const variable = new Variable(name, false, false, property.__ks_func_type_0());
			this._scope.addVariable(name, variable);
			this._properties[name] = property;
			if(property.__ks_func_type_0().isSealed() === true) {
				this._sealProperties[name] = true;
			}
			this._alterations[name] = true;
			return variable.__ks_func_getDeclaredType_0();
		}
		__ks_func_addProperty_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addProperty_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addProperty_rt) {
				return super.__ks_func_addProperty_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addPropertyFromAST() {
			return this.__ks_func_addPropertyFromAST_rt.call(null, this, this, arguments);
		}
		__ks_func_addPropertyFromAST_2(data, node) {
			let type = Type.fromAST(data, node);
			const options = Attribute.configure(data, null, AttributeTarget.Property, node.file());
			if(options.rules.nonExhaustive === true) {
				type.__ks_func_setExhaustive_0(false);
			}
			else if(this._exhaustive === true) {
				type.__ks_func_setExhaustive_0(true);
			}
			if(this._alien) {
				type = type.__ks_func_flagAlien_0();
			}
			if(KSType.isClassInstance(type, FunctionType) && (type.__ks_func_index_0() === -1)) {
				type.__ks_func_index_1(0);
			}
			return this.addProperty(data.name.name, type);
		}
		__ks_func_addPropertyFromAST_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_addPropertyFromAST_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addPropertyFromAST_rt) {
				return super.__ks_func_addPropertyFromAST_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addPropertyFromMetadata() {
			return this.__ks_func_addPropertyFromMetadata_rt.call(null, this, this, arguments);
		}
		__ks_func_addPropertyFromMetadata_0(name, data, metadata, references, alterations, queue, node) {
			const type = Type.import(data, metadata, references, alterations, queue, this._scope, node);
			if(type._scope !== this._scope) {
				type._scope = this._scope;
			}
			const variable = new Variable(name, false, false, type);
			this._scope.addVariable(name, variable);
			const property = new NamespacePropertyType(this._scope, variable.__ks_func_getDeclaredType_0());
			this._properties[name] = property;
			if(data.sealed === true) {
				property.__ks_func_flagSealed_0();
			}
			if(property.__ks_func_type_0().isSealed() === true) {
				this._sealProperties[name] = true;
			}
			return variable.__ks_func_getDeclaredType_0();
		}
		__ks_func_addPropertyFromMetadata_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 7) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4]) && t0(args[5]) && t0(args[6])) {
					return proto.__ks_func_addPropertyFromMetadata_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
				}
			}
			if(super.__ks_func_addPropertyFromMetadata_rt) {
				return super.__ks_func_addPropertyFromMetadata_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			const that = NamespaceType.__ks_new_0(KSHelper.notNull(this._scope));
			that.__ks_func_copyFrom_3(this);
			if(this._requirement || this._alien) {
				that.__ks_func_originals_3(this);
			}
			return that;
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		copyFrom() {
			return this.__ks_func_copyFrom_rt.call(null, this, this, arguments);
		}
		__ks_func_copyFrom_3(src) {
			this._alien = src._alien;
			this._sealed = src._sealed;
			this._systemic = src._systemic;
			this._requirement = src._requirement;
			this._required = src._required;
			for(const name in src._properties) {
				const property = src._properties[name];
				this._properties[name] = property;
			}
			for(const name in src._sealProperties) {
				const property = src._sealProperties[name];
				this._sealProperties[name] = property;
			}
			return this;
		}
		__ks_func_copyFrom_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, NamespaceType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_copyFrom_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_copyFrom_rt) {
				return super.__ks_func_copyFrom_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			if(KSType.isValue(this._majorOriginal)) {
				const __ks_export_1 = (() => {
					const d = new Dictionary();
					d.kind = TypeKind.Namespace;
					d.original = this._majorOriginal.__ks_func_referenceIndex_0();
					d.exhaustive = this.__ks_func_isExhaustive_0();
					d.properties = new Dictionary();
					return d;
				})();
				for(const name in this._properties) {
					const property = this._properties[name];
					if(this._alterations[name] === true) {
						__ks_export_1.properties[name] = property.toExportOrIndex(references, indexDelta, mode, module);
					}
				}
				return __ks_export_1;
			}
			else {
				const __ks_export_1 = (() => {
					const d = new Dictionary();
					d.kind = TypeKind.Namespace;
					d.sealed = this._sealed;
					d.systemic = this._systemic;
					d.exhaustive = this.__ks_func_isExhaustive_0();
					d.properties = new Dictionary();
					return d;
				})();
				for(const name in this._properties) {
					const property = this._properties[name];
					__ks_export_1.properties[name] = property.toExportOrIndex(references, indexDelta, mode, module);
				}
				return __ks_export_1;
			}
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_flagExported_0(explicitly) {
			if(this._exported) {
				return this;
			}
			else {
				this._exported = true;
			}
			for(let __ks_0 in this._properties) {
				const value = this._properties[__ks_0];
				value.flagExported(explicitly);
			}
			return this;
		}
		__ks_func_getProperty_0(name) {
			if(KSType.isClassInstance(this._properties[name], Type)) {
				return this._properties[name].type();
			}
			else {
				return null;
			}
		}
		hasMatchingFunction() {
			return this.__ks_func_hasMatchingFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_hasMatchingFunction_0(name, type, mode) {
			if(KSType.isClassInstance(this._properties[name], FunctionType) || KSType.isClassInstance(this._properties[name], OverloadedFunctionType)) {
				if(this._properties[name].isMatching(type, mode) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_hasMatchingFunction_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, FunctionType);
			const t2 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_hasMatchingFunction_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_hasMatchingFunction_rt) {
				return super.__ks_func_hasMatchingFunction_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_hasProperty_0(name) {
			return KSType.isClassInstance(this._properties[name], Type);
		}
		__ks_func_isContainer_0() {
			return true;
		}
		__ks_func_isExhaustive_0() {
			if(this._exhaustive === true) {
				return true;
			}
			if(this._altering) {
				return this._majorOriginal.__ks_func_isExhaustive_0();
			}
			return super.__ks_func_isExhaustive_0();
		}
		__ks_func_isExtendable_0() {
			return true;
		}
		__ks_func_isFlexible_0() {
			return this._sealed;
		}
		__ks_func_isNamespace_0() {
			return true;
		}
		__ks_func_isSealable_0() {
			return true;
		}
		isSealedProperty() {
			return this.__ks_func_isSealedProperty_rt.call(null, this, this, arguments);
		}
		__ks_func_isSealedProperty_0(name) {
			return this._sealed && (this._sealProperties[name] === true);
		}
		__ks_func_isSealedProperty_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isSealedProperty_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isSealedProperty_rt) {
				return super.__ks_func_isSealedProperty_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isSubsetOf_17(value, mode) {
			for(const name in value._properties) {
				const property = value._properties[name];
				if(!(KSType.isValue(this._properties[name]) ? this._properties[name].isSubsetOf(property, mode) === true : false)) {
					return false;
				}
			}
			return true;
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, NamespaceType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_17(value, mode);
			}
			return super.__ks_func_isSubsetOf_0(value, mode);
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, NamespaceType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_17.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_matchContentOf_6(value) {
			return KSType.isClassInstance(value, ReferenceType) && (value.__ks_func_isNamespace_0() === true);
		}
		__ks_func_matchContentOf_0(value) {
			if(KSType.isClassInstance(value, Type)) {
				return this.__ks_func_matchContentOf_6(value);
			}
			return super.__ks_func_matchContentOf_0(value);
		}
		__ks_func_matchContentOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_matchContentOf_6.call(that, args[0]);
				}
			}
			return super.__ks_func_matchContentOf_rt.call(null, that, Type.prototype, args);
		}
		originals() {
			return this.__ks_func_originals_rt.call(null, this, this, arguments);
		}
		__ks_func_originals_3(majorOriginal) {
			if(majorOriginal === void 0) {
				majorOriginal = null;
			}
			this._majorOriginal = majorOriginal;
			this._altering = true;
			return this;
		}
		__ks_func_originals_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, NamespaceType) || KSType.isNull(value);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_originals_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_originals_rt) {
				return super.__ks_func_originals_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_setExhaustive_0(exhaustive) {
			if(exhaustive === void 0) {
				exhaustive = null;
			}
			this._exhaustive = exhaustive;
			for(let __ks_0 in this._properties) {
				const property = this._properties[__ks_0];
				property.setExhaustive(this._exhaustive);
			}
			return this;
		}
		__ks_func_shallBeNamed_0() {
			return true;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			throw new NotImplementedException();
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			throw new NotImplementedException();
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("namespace");
			for(const name in this._properties) {
				const property = this._properties[name];
				variations.push(name);
				property.toVariations(variations);
			}
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		walk() {
			return this.__ks_func_walk_rt.call(null, this, this, arguments);
		}
		__ks_func_walk_2(fn) {
			for(const name in this._properties) {
				const type = this._properties[name];
				fn(name, type);
			}
		}
		__ks_func_walk_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_walk_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_walk_rt) {
				return super.__ks_func_walk_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_7(index, data, metadata, references, alterations, queue, scope, node) {
			const type = NamespaceType.__ks_new_0(scope);
			if(KSType.isValue(data.exhaustive)) {
				type._exhaustive = data.exhaustive;
			}
			if(KSType.isValue(data.original)) {
				queue.push((() => {
					const __ks_rt = (...args) => {
						if(args.length === 0) {
							return __ks_rt.__ks_0.call(this);
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = () => {
						const original = references[data.original];
						type.copyFrom(original.discardName());
						for(const name in data.properties) {
							const property = data.properties[name];
							type.addPropertyFromMetadata(name, property, metadata, references, alterations, queue, node);
						}
					};
					return __ks_rt;
				})());
			}
			else {
				if(data.systemic === true) {
					type.__ks_func_flagSystemic_0();
				}
				else if(data.sealed === true) {
					type.__ks_func_flagSealed_0();
				}
				queue.push((() => {
					const __ks_rt = (...args) => {
						if(args.length === 0) {
							return __ks_rt.__ks_0.call(this);
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = () => {
						for(const name in data.properties) {
							const property = data.properties[name];
							type.addPropertyFromMetadata(name, property, metadata, references, alterations, queue, node);
						}
					};
					return __ks_rt;
				})());
			}
			return type;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 8) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2]) && t2(arguments[3]) && t2(arguments[4]) && t1(arguments[5]) && t3(arguments[6]) && t4(arguments[7])) {
					return NamespaceType.__ks_sttc_import_7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(Type.import) {
				return Type.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class NamespacePropertyType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(NamespacePropertyType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(scope, type) {
			if(scope === void 0) {
				scope = null;
			}
			Type.prototype.__ks_cons_0.call(this, scope);
			this._type = type;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return NamespacePropertyType.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			throw new NotSupportedException();
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			let __ks_export_1 = null;
			if(KSType.isClassInstance(this._type, ReferenceType)) {
				__ks_export_1 = this._type.__ks_func_toReference_0(references, indexDelta, mode, module);
			}
			else {
				__ks_export_1 = this._type.__ks_func_export_0(references, indexDelta, mode, module);
			}
			if(KSType.isString(__ks_export_1)) {
				__ks_export_1 = (() => {
					const d = new Dictionary();
					d.type = __ks_export_1;
					return d;
				})();
			}
			__ks_export_1.sealed = this.__ks_func_isSealed_0();
			return __ks_export_1;
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_flagExported_0(explicitly) {
			this._type.__ks_func_flagExported_0(explicitly);
			return this;
		}
		__ks_func_flagReferenced_0() {
			this._type.__ks_func_flagReferenced_0();
			return this;
		}
		__ks_func_flagSealed_0() {
			this._type = this._type.__ks_func_flagSealed_0();
			return this;
		}
		__ks_func_isSealed_0() {
			return this._type.__ks_func_isSealed_0();
		}
		__ks_func_isSubsetOf_18(value, mode) {
			if((mode & MatchingMode.Exact) !== 0n) {
				return this._type.isSubsetOf(value.__ks_func_type_0(), MatchingMode.Exact);
			}
			else {
				return true;
			}
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, NamespacePropertyType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_18(value, mode);
			}
			return super.__ks_func_isSubsetOf_0(value, mode);
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, NamespacePropertyType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_18.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_setExhaustive_1(exhaustive) {
			if(!KSType.isValue(this._type.__ks_func_getExhaustive_0())) {
				this._type.setExhaustive(exhaustive);
			}
			return this;
		}
		__ks_func_setExhaustive_0(exhaustive) {
			return this.__ks_func_setExhaustive_1(exhaustive);
		}
		__ks_func_setExhaustive_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setExhaustive_1.call(that, args[0]);
				}
			}
			return super.__ks_func_setExhaustive_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_toExportOrIndex_0(references, indexDelta, mode, module) {
			if(this._type.__ks_func_isSealable_0() === true) {
				return this._type.__ks_func_toExportOrIndex_0(references, indexDelta, mode, module);
			}
			else if(this._type.__ks_func_referenceIndex_0() !== -1) {
				return (() => {
					const d = new Dictionary();
					d.sealed = this._type.__ks_func_isSealed_0();
					d.type = this._type.__ks_func_referenceIndex_0();
					return d;
				})();
			}
			else if(this._type.__ks_func_isReferenced_0() === true) {
				return (() => {
					const d = new Dictionary();
					d.sealed = this.__ks_func_isSealed_0();
					d.type = this._type.__ks_func_toMetadata_0(references, indexDelta, mode, module);
					return d;
				})();
			}
			else {
				return this.__ks_func_export_0(references, indexDelta, mode, module);
			}
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			return this._type.__ks_func_toFragments_0(fragments, node);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			return this._type.__ks_func_toQuote_0();
		}
		__ks_func_toQuote_4(__ks_double_1) {
			return this._type.toQuote(__ks_double_1);
		}
		__ks_func_toQuote_1(double) {
			return this.__ks_func_toQuote_4(double);
		}
		__ks_func_toQuote_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 0) {
				return proto.__ks_func_toQuote_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toQuote_4.call(that, args[0]);
				}
			}
			return super.__ks_func_toQuote_rt.call(null, that, Type.prototype, args);
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			return this._type.__ks_func_toPositiveTestFragments_0(fragments, node, junction);
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			this._type.__ks_func_toVariations_0(variations);
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_0() {
			return this._type;
		}
		static __ks_sttc_fromAST_5(data, node) {
			return new NamespacePropertyType(node.scope(), Type.fromAST(data, node));
		}
		static fromAST() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return NamespacePropertyType.__ks_sttc_fromAST_5(arguments[0], arguments[1]);
				}
			}
			if(Type.fromAST) {
				return Type.fromAST.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class NeverType extends Type {
		static __ks_new_0() {
			const o = Object.create(NeverType.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		__ks_cons_0() {
			Type.prototype.__ks_cons_0.call(this, null);
		}
		__ks_cons_rt(that, args) {
			if(args.length === 0) {
				return NeverType.prototype.__ks_cons_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			throw new NotSupportedException();
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			return "Never";
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isNever_0() {
			return true;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			fragments.code("Never");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			return "Never";
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			throw new NotSupportedException(node);
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("never");
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class NullType extends Type {
		static __ks_new_0() {
			const o = Object.create(NullType.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(NullType.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._explicit = false;
		}
		__ks_cons_0() {
			Type.prototype.__ks_cons_0.call(this, null);
		}
		__ks_cons_1(explicit) {
			Type.prototype.__ks_cons_0.call(this, null);
			this._explicit = explicit;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isBoolean;
			if(args.length === 0) {
				return NullType.prototype.__ks_cons_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return NullType.prototype.__ks_cons_1.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			throw new NotSupportedException();
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		compareToRef() {
			return this.__ks_func_compareToRef_rt.call(null, this, this, arguments);
		}
		__ks_func_compareToRef_7(value, equivalences = null) {
			return KSOperator.negative(value.__ks_func_compareToRef_5(this, equivalences));
		}
		__ks_func_compareToRef_8(value, equivalences = null) {
			return 1;
		}
		__ks_func_compareToRef_9(value, equivalences = null) {
			return 0;
		}
		__ks_func_compareToRef_10(value, equivalences = null) {
			return KSOperator.negative(value.__ks_func_compareToRef_1(this, equivalences));
		}
		__ks_func_compareToRef_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, AnyType);
			const t1 = value => KSType.isArray(value, value => KSType.isArray(value, KSType.isString)) || KSType.isNull(value);
			const t2 = value => KSType.isClassInstance(value, DictionaryType);
			const t3 = value => KSType.isClassInstance(value, NullType);
			const t4 = value => KSType.isClassInstance(value, ReferenceType);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0])) {
					if(KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
						return proto.__ks_func_compareToRef_7.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
					}
					throw KSHelper.badArgs();
				}
				if(t2(args[0])) {
					if(KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
						return proto.__ks_func_compareToRef_8.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
					}
					throw KSHelper.badArgs();
				}
				if(t3(args[0])) {
					if(KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
						return proto.__ks_func_compareToRef_9.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
					}
					throw KSHelper.badArgs();
				}
				if(t4(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_compareToRef_10.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_compareToRef_rt) {
				return super.__ks_func_compareToRef_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getProperty_2(name) {
			return AnyType.NullableUnexplicit;
		}
		__ks_func_getProperty_0(name) {
			return this.__ks_func_getProperty_2(name);
		}
		__ks_func_getProperty_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getProperty_2.call(that, args[0]);
				}
			}
			return super.__ks_func_getProperty_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_hashCode_0() {
			return "Null";
		}
		__ks_func_isAssignableToVariable_2(value, anycast, nullcast, downcast, limited) {
			if(limited === void 0 || limited === null) {
				limited = false;
			}
			return nullcast || (value.__ks_func_isNullable_0() === true);
		}
		__ks_func_isExplicit_0() {
			return this._explicit;
		}
		__ks_func_isExportable_0() {
			return true;
		}
		isInstanceOf() {
			return this.__ks_func_isInstanceOf_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstanceOf_8(target) {
			return true;
		}
		__ks_func_isInstanceOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInstanceOf_8.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInstanceOf_rt) {
				return super.__ks_func_isInstanceOf_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isMorePreciseThan_0(value) {
			return (value.__ks_func_isAny_0() === true) || (value.__ks_func_isNullable_0() === true);
		}
		__ks_func_isNull_0() {
			return true;
		}
		__ks_func_isNullable_0() {
			return true;
		}
		__ks_func_isSplittable_0() {
			return false;
		}
		__ks_func_isSubsetOf_19(value, mode) {
			return true;
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, NullType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_19(value, mode);
			}
			return this.__ks_func_isSubsetOf_20(value, mode);
		}
		__ks_func_isSubsetOf_20(value, mode) {
			return value.__ks_func_isNullable_0();
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, NullType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			const t2 = value => KSType.isClassInstance(value, Type);
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_19.call(that, args[0], args[1]);
					}
				}
				if(t2(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_20.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_matchContentOf_7(value) {
			return value.__ks_func_isNullable_0();
		}
		__ks_func_matchContentOf_0(value) {
			if(KSType.isClassInstance(value, Type)) {
				return this.__ks_func_matchContentOf_7(value);
			}
			return super.__ks_func_matchContentOf_0(value);
		}
		__ks_func_matchContentOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_matchContentOf_7.call(that, args[0]);
				}
			}
			return super.__ks_func_matchContentOf_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_setNullable_0(nullable) {
			if(nullable) {
				return this;
			}
			else {
				return AnyType.Unexplicit;
			}
		}
		__ks_func_split_0(types) {
			__ks_Array.__ks_func_pushUniq_0.call(types, [this]);
			return types;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			return "Null";
		}
		__ks_func_toReference_0(references, indexDelta, mode, module) {
			return "Null";
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toTestFunctionFragments_0(fragments, node) {
			fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isNull"));
		}
		__ks_func_toTestFunctionFragments_1(fragments, node, junction) {
			fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isNull(value)"));
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("null");
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	NullType.Explicit = NullType.__ks_new_1(true);
	NullType.Unexplicit = NullType.__ks_new_1(false);
	class DictionaryType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(DictionaryType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._properties = new Dictionary();
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		addProperty() {
			return this.__ks_func_addProperty_rt.call(null, this, this, arguments);
		}
		__ks_func_addProperty_3(name, type) {
			this._properties[name] = type;
		}
		__ks_func_addProperty_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addProperty_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addProperty_rt) {
				return super.__ks_func_addProperty_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			throw new NotSupportedException();
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		compareToRef() {
			return this.__ks_func_compareToRef_rt.call(null, this, this, arguments);
		}
		__ks_func_compareToRef_11(value, equivalences = null) {
			return -1;
		}
		__ks_func_compareToRef_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, NullType);
			const t1 = value => KSType.isArray(value, value => KSType.isArray(value, KSType.isString)) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_compareToRef_11.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_compareToRef_rt) {
				return super.__ks_func_compareToRef_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			const __ks_export_1 = (() => {
				const d = new Dictionary();
				d.kind = TypeKind.Dictionary;
				return d;
			})();
			if(this._systemic) {
				__ks_export_1.systemic = true;
			}
			else if(this._sealed) {
				__ks_export_1.sealed = true;
			}
			__ks_export_1.properties = new Dictionary();
			for(const name in this._properties) {
				const value = this._properties[name];
				__ks_export_1.properties[name] = value.export(references, indexDelta, mode, module);
			}
			return __ks_export_1;
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_flagAlien_0() {
			this._alien = true;
			for(let __ks_0 in this._properties) {
				const property = this._properties[__ks_0];
				property.flagAlien();
			}
			return this;
		}
		__ks_func_getProperty_0(name) {
			return this._properties[name];
		}
		__ks_func_hashCode_0() {
			return this.__ks_func_toQuote_0();
		}
		__ks_func_isAssignableToVariable_2(value, anycast, nullcast, downcast, limited) {
			if(limited === void 0 || limited === null) {
				limited = false;
			}
			if(value.__ks_func_isAny_0() === true) {
				if(this.__ks_func_isNullable_0() === true) {
					return nullcast || (value.__ks_func_isNullable_0() === true);
				}
				else {
					return true;
				}
			}
			else if(value.__ks_func_isDictionary_0() === true) {
				if((this.__ks_func_isNullable_0() === true) && !nullcast && !(value.__ks_func_isNullable_0() === true)) {
					return false;
				}
				return this.isSubsetOf(value, MatchingMode(MatchingMode.Exact | MatchingMode.NonNullToNull | MatchingMode.Subclass | MatchingMode.AutoCast));
			}
			else if(value.__ks_func_isObject_0() === true) {
				if((this.__ks_func_isNullable_0() === true) && !nullcast && !(value.__ks_func_isNullable_0() === true)) {
					return false;
				}
				return this.isSubsetOf(value, MatchingMode(MatchingMode.Exact | MatchingMode.NonNullToNull | MatchingMode.Subclass | MatchingMode.AutoCast));
			}
			else if(KSType.isClassInstance(value, UnionType)) {
				for(let __ks_0 = 0, __ks_1 = value.__ks_func_types_1(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
					type = __ks_1[__ks_0];
					if(this.isAssignableToVariable(type, anycast, nullcast, downcast)) {
						return true;
					}
				}
			}
			return false;
		}
		__ks_func_isMorePreciseThan_0(value) {
			if(value.__ks_func_isAny_0() === true) {
				return true;
			}
			return false;
		}
		__ks_func_isNullable_0() {
			return false;
		}
		__ks_func_isDictionary_0() {
			return true;
		}
		__ks_func_isExhaustive_0() {
			return false;
		}
		__ks_func_isExportable_0() {
			return true;
		}
		__ks_func_isSealable_0() {
			return true;
		}
		__ks_func_isSubsetOf_21(value, mode) {
			{
				let __ks_0 = value.__ks_func_properties_0();
				for(const name in __ks_0) {
					const type = __ks_0[name];
					let prop = this._properties[name];
					if(KSType.isValue(prop)) {
						if(!(prop.isSubsetOf(type, mode) === true)) {
							return false;
						}
					}
					else if(!(type.isNullable() === true)) {
						return false;
					}
				}
			}
			return true;
		}
		__ks_func_isSubsetOf_22(value, mode) {
			if(this === value) {
				return true;
			}
			if(this.__ks_func_isSealed_0() !== value.__ks_func_isSealed_0()) {
				return false;
			}
			{
				let __ks_0 = value.__ks_func_properties_1();
				for(const name in __ks_0) {
					const type = __ks_0[name];
					let prop = this._properties[name];
					if(KSType.isValue(prop)) {
						if(!(prop.isSubsetOf(type, mode) === true)) {
							return false;
						}
					}
					else if(!(type.isNullable() === true)) {
						return false;
					}
				}
			}
			return true;
		}
		__ks_func_isSubsetOf_23(value, mode) {
			if(!(value.__ks_func_isDictionary_0() === true)) {
				return false;
			}
			if(value.__ks_func_hasParameters_0() === true) {
				const parameter = value.__ks_func_parameter_2(0);
				for(const name in this._properties) {
					const type = this._properties[name];
					if(!(type.isSubsetOf(parameter, mode) === true)) {
						return false;
					}
				}
			}
			return true;
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, DestructurableObjectType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_21(value, mode);
			}
			if(KSType.isClassInstance(value, DictionaryType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_22(value, mode);
			}
			if(KSType.isClassInstance(value, ReferenceType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_23(value, mode);
			}
			return super.__ks_func_isSubsetOf_0(value, mode);
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, DestructurableObjectType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			const t2 = value => KSType.isClassInstance(value, DictionaryType);
			const t3 = value => KSType.isClassInstance(value, ReferenceType);
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_21.call(that, args[0], args[1]);
					}
				}
				if(t2(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_22.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t3(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_23.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, Type.prototype, args);
		}
		isMatching() {
			return this.__ks_func_isMatching_rt.call(null, this, this, arguments);
		}
		__ks_func_isMatching_0(value, mode) {
			return false;
		}
		__ks_func_isMatching_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_isMatching_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_isMatching_rt) {
				return super.__ks_func_isMatching_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_matchContentOf_8(value) {
			if((value.__ks_func_isAny_0() === true) || (value.__ks_func_isDictionary_0() === true)) {
				return true;
			}
			if(KSType.isClassInstance(value, UnionType)) {
				for(let __ks_0 = 0, __ks_1 = value.__ks_func_types_1(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
					type = __ks_1[__ks_0];
					if(this.matchContentOf(type)) {
						return true;
					}
				}
			}
			return false;
		}
		__ks_func_matchContentOf_0(value) {
			if(KSType.isClassInstance(value, Type)) {
				return this.__ks_func_matchContentOf_8(value);
			}
			return super.__ks_func_matchContentOf_0(value);
		}
		__ks_func_matchContentOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_matchContentOf_8.call(that, args[0]);
				}
			}
			return super.__ks_func_matchContentOf_rt.call(null, that, Type.prototype, args);
		}
		parameter() {
			return this.__ks_func_parameter_rt.call(null, this, this, arguments);
		}
		__ks_func_parameter_6() {
			return AnyType.NullableUnexplicit;
		}
		__ks_func_parameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameter_6.call(that);
			}
			if(super.__ks_func_parameter_rt) {
				return super.__ks_func_parameter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		properties() {
			return this.__ks_func_properties_rt.call(null, this, this, arguments);
		}
		__ks_func_properties_1() {
			return this._properties;
		}
		__ks_func_properties_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_properties_1.call(that);
			}
			if(super.__ks_func_properties_rt) {
				return super.__ks_func_properties_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_setExhaustive_0(exhaustive) {
			if(exhaustive === void 0) {
				exhaustive = null;
			}
			this._exhaustive = exhaustive;
			for(let __ks_0 in this._properties) {
				const property = this._properties[__ks_0];
				property.setExhaustive(exhaustive);
			}
			return this;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			throw new NotImplementedException();
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			let str = "{";
			let first = true;
			for(const name in this._properties) {
				const property = this._properties[name];
				if(first) {
					first = false;
				}
				else {
					str += ", ";
				}
				str += KSHelper.concatString(name, ": ", property.toQuote());
			}
			if(first) {
				return "Dictionary";
			}
			else {
				return str + "}";
			}
		}
		__ks_func_toNegativeTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			if(junction === Junction.AND) {
				fragments.code("(");
			}
			fragments.code("!", $runtime.type.__ks_0(node), ".isDictionary(").compile(node).code(")");
			for(const name in this._properties) {
				const value = this._properties[name];
				fragments.code(" || ");
				value.toNegativeTestFragments(fragments, new Literal(false, node, node.scope(), KSHelper.concatString(node.path(), ".", name)));
			}
			if(junction === Junction.AND) {
				fragments.code(")");
			}
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			if(junction === Junction.OR) {
				fragments.code("(");
			}
			fragments.code($runtime.type.__ks_0(node), ".isDictionary(").compile(node).code(")");
			for(const name in this._properties) {
				const value = this._properties[name];
				fragments.code(" && ");
				value.toPositiveTestFragments(fragments, new Literal(false, node, node.scope(), KSHelper.concatString(node.path(), ".", name)));
			}
			if(junction === Junction.OR) {
				fragments.code(")");
			}
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toTestFunctionFragments_0(fragments, node) {
			if(__ks_Dictionary.__ks_sttc_isEmpty_0(this._properties)) {
				fragments.code($runtime.type.__ks_0(node), ".isDictionary");
			}
			else {
				fragments.code("value => ", $runtime.type.__ks_0(node), ".isDictionary(value)");
				for(const name in this._properties) {
					const value = this._properties[name];
					fragments.code(" && ");
					value.toPositiveTestFragments(fragments, new Literal(false, node, node.scope(), "value." + name), Junction.AND);
				}
			}
		}
		__ks_func_toTestFunctionFragments_1(fragments, node, junction) {
			if(__ks_Dictionary.__ks_sttc_isEmpty_0(this._properties)) {
				fragments.code($runtime.type.__ks_0(node), ".isDictionary(value)");
			}
			else {
				if(junction.valueOf() === Junction.OR.value) {
					fragments.code("(");
				}
				fragments.code($runtime.type.__ks_0(node), ".isDictionary(value)");
				for(const name in this._properties) {
					const value = this._properties[name];
					fragments.code(" && ");
					value.toPositiveTestFragments(fragments, new Literal(false, node, node.scope(), "value." + name), Junction.AND);
				}
				if(junction.valueOf() === Junction.OR.value) {
					fragments.code(")");
				}
			}
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("dict");
			for(const name in this._properties) {
				const type = this._properties[name];
				variations.push(name);
				type.toVariations(variations);
			}
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		walk() {
			return this.__ks_func_walk_rt.call(null, this, this, arguments);
		}
		__ks_func_walk_3(fn) {
			for(const name in this._properties) {
				const type = this._properties[name];
				fn(name, type);
			}
		}
		__ks_func_walk_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_walk_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_walk_rt) {
				return super.__ks_func_walk_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_8(index, data, metadata, references, alterations, queue, scope, node) {
			const type = DictionaryType.__ks_new_0(scope);
			if(data.systemic === true) {
				type.__ks_func_flagSystemic_0();
			}
			else if(data.sealed === true) {
				type.__ks_func_flagSealed_0();
			}
			queue.push((() => {
				const __ks_rt = (...args) => {
					if(args.length === 0) {
						return __ks_rt.__ks_0.call(this);
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = () => {
					for(const name in data.properties) {
						const property = data.properties[name];
						type.__ks_func_addProperty_3(name, Type.import(property, metadata, references, alterations, queue, scope, node));
					}
				};
				return __ks_rt;
			})());
			return type;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 8) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2]) && t2(arguments[3]) && t2(arguments[4]) && t1(arguments[5]) && t3(arguments[6]) && t4(arguments[7])) {
					return DictionaryType.__ks_sttc_import_8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(Type.import) {
				return Type.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class ParameterType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(ParameterType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ParameterType.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._comprehensive = true;
			this._name = null;
		}
		__ks_cons_0(scope, type, min, max, __ks_default_1) {
			if(scope === void 0) {
				scope = null;
			}
			if(min === void 0 || min === null) {
				min = 1;
			}
			if(max === void 0 || max === null) {
				max = 1;
			}
			if(__ks_default_1 === void 0 || __ks_default_1 === null) {
				__ks_default_1 = false;
			}
			Type.prototype.__ks_cons_0.call(this, scope);
			this._type = type;
			this._min = min;
			this._max = max;
			this._default = __ks_default_1;
			this._variableType = this._type;
			this._nullableByDefault = (this._min === 0) && (this._max === 1) && this._default && !(this._type.__ks_func_isNullable_0() === true);
			if(this._nullableByDefault) {
				this._type = this._type.__ks_func_setNullable_0(true);
			}
		}
		__ks_cons_1(scope, name, type, min, max, __ks_default_1) {
			if(scope === void 0) {
				scope = null;
			}
			if(name === void 0) {
				name = null;
			}
			if(min === void 0 || min === null) {
				min = 1;
			}
			if(max === void 0 || max === null) {
				max = 1;
			}
			if(__ks_default_1 === void 0 || __ks_default_1 === null) {
				__ks_default_1 = false;
			}
			Type.prototype.__ks_cons_0.call(this, scope);
			this._name = name;
			this._type = type;
			this._min = min;
			this._max = max;
			this._default = __ks_default_1;
			this._variableType = this._type;
			this._nullableByDefault = (this._min === 0) && (this._max === 1) && this._default && !(this._type.__ks_func_isNullable_0() === true);
			if(this._nullableByDefault) {
				this._type = this._type.__ks_func_setNullable_0(true);
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Type);
			const t2 = value => KSType.isNumber(value) || KSType.isNull(value);
			const t3 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t4 = value => KSType.isString(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return ParameterType.prototype.__ks_cons_0.call(that, args[0], args[1], void 0, void 0, void 0);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 3) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						if(KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && KSHelper.isVarargs(args, 0, 1, t3, pts, 1) && te(pts, 2)) {
							return ParameterType.prototype.__ks_cons_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]), void 0, KSHelper.getVararg(args, pts[1], pts[2]));
						}
						throw KSHelper.badArgs();
					}
					if(t4(args[1]) && t1(args[2])) {
						return ParameterType.prototype.__ks_cons_1.call(that, args[0], args[1], args[2], void 0, void 0, void 0);
					}
					throw KSHelper.badArgs();
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 4) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						if(t2(args[2])) {
							if(t3(args[3])) {
								return ParameterType.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], void 0, args[3]);
							}
							if(t2(args[3])) {
								return ParameterType.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3], void 0);
							}
							throw KSHelper.badArgs();
						}
						throw KSHelper.badArgs();
					}
					if(t4(args[1]) && t1(args[2]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [3], 0) && KSHelper.isVarargs(args, 0, 1, t3, pts, 1) && te(pts, 2)) {
						return ParameterType.prototype.__ks_cons_1.call(that, args[0], args[1], args[2], KSHelper.getVararg(args, 3, pts[1]), void 0, KSHelper.getVararg(args, pts[1], pts[2]));
					}
					throw KSHelper.badArgs();
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 5) {
				if(t0(args[0])) {
					if(t4(args[1])) {
						if(t1(args[2]) && t2(args[3])) {
							if(t3(args[4])) {
								return ParameterType.prototype.__ks_cons_1.call(that, args[0], args[1], args[2], args[3], void 0, args[4]);
							}
							if(t2(args[4])) {
								return ParameterType.prototype.__ks_cons_1.call(that, args[0], args[1], args[2], args[3], args[4], void 0);
							}
							throw KSHelper.badArgs();
						}
						throw KSHelper.badArgs();
					}
					if(t1(args[1]) && t2(args[2]) && t2(args[3]) && t3(args[4])) {
						return ParameterType.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
					throw KSHelper.badArgs();
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 6) {
				if(t0(args[0]) && t4(args[1]) && t1(args[2]) && t2(args[3]) && t2(args[4]) && t3(args[5])) {
					return ParameterType.prototype.__ks_cons_1.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			return ParameterType.__ks_new_1(this._scope, this._name, this._type, this._min, this._max, this._default);
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			const __ks_export_1 = new Dictionary();
			if(this._name !== null) {
				__ks_export_1.name = this._name;
			}
			__ks_export_1.type = this._variableType.__ks_func_toReference_0(references, indexDelta, mode, module);
			__ks_export_1.min = this._min;
			__ks_export_1.max = this._max;
			__ks_export_1.default = this._default;
			if(this._default && KSType.isValue(this._defaultValue)) {
				__ks_export_1.comprehensive = this._comprehensive;
				if(this._comprehensive) {
					__ks_export_1.defaultValue = Buffer.from(JSON.stringify(this._defaultValue)).toString("base64");
				}
				else {
					__ks_export_1.defaultValue = this._defaultValue;
				}
			}
			return __ks_export_1;
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getArgumentType() {
			return this.__ks_func_getArgumentType_rt.call(null, this, this, arguments);
		}
		__ks_func_getArgumentType_0() {
			if(this._type.__ks_func_isNullable_0() === true) {
				return this._type;
			}
			else if((this._min === this._max && this._max === 1) && this._default) {
				return this._type.__ks_func_setNullable_0(true);
			}
			else {
				return this._type;
			}
		}
		__ks_func_getArgumentType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getArgumentType_0.call(that);
			}
			if(super.__ks_func_getArgumentType_rt) {
				return super.__ks_func_getArgumentType_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getDefaultValue() {
			return this.__ks_func_getDefaultValue_rt.call(null, this, this, arguments);
		}
		__ks_func_getDefaultValue_0() {
			return this._defaultValue;
		}
		__ks_func_getDefaultValue_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getDefaultValue_0.call(that);
			}
			if(super.__ks_func_getDefaultValue_rt) {
				return super.__ks_func_getDefaultValue_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getVariableType() {
			return this.__ks_func_getVariableType_rt.call(null, this, this, arguments);
		}
		__ks_func_getVariableType_0() {
			return this._variableType;
		}
		__ks_func_getVariableType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getVariableType_0.call(that);
			}
			if(super.__ks_func_getVariableType_rt) {
				return super.__ks_func_getVariableType_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasDefaultValue() {
			return this.__ks_func_hasDefaultValue_rt.call(null, this, this, arguments);
		}
		__ks_func_hasDefaultValue_1() {
			return this._default;
		}
		__ks_func_hasDefaultValue_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasDefaultValue_1.call(that);
			}
			if(super.__ks_func_hasDefaultValue_rt) {
				return super.__ks_func_hasDefaultValue_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isAny_0() {
			return this._type.__ks_func_isAny_0();
		}
		isComprehensive() {
			return this.__ks_func_isComprehensive_rt.call(null, this, this, arguments);
		}
		__ks_func_isComprehensive_0() {
			return this._comprehensive;
		}
		__ks_func_isComprehensive_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isComprehensive_0.call(that);
			}
			if(super.__ks_func_isComprehensive_rt) {
				return super.__ks_func_isComprehensive_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isExportable_0() {
			return this._type.__ks_func_isExportable_0();
		}
		__ks_func_isMorePreciseThan_4(value) {
			return this._type.isMorePreciseThan(value.__ks_func_type_0());
		}
		__ks_func_isMorePreciseThan_0(value) {
			if(KSType.isClassInstance(value, ParameterType)) {
				return this.__ks_func_isMorePreciseThan_4(value);
			}
			return this.__ks_func_isMorePreciseThan_5(value);
		}
		__ks_func_isMorePreciseThan_5(value) {
			return this._type.__ks_func_isMorePreciseThan_0(value);
		}
		__ks_func_isMorePreciseThan_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ParameterType);
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isMorePreciseThan_4.call(that, args[0]);
				}
				if(t1(args[0])) {
					return proto.__ks_func_isMorePreciseThan_5.call(that, args[0]);
				}
			}
			return super.__ks_func_isMorePreciseThan_rt.call(null, that, Type.prototype, args);
		}
		isMissingType() {
			return this.__ks_func_isMissingType_rt.call(null, this, this, arguments);
		}
		__ks_func_isMissingType_0() {
			return !(this._type.__ks_func_isExplicit_0() === true);
		}
		__ks_func_isMissingType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isMissingType_0.call(that);
			}
			if(super.__ks_func_isMissingType_rt) {
				return super.__ks_func_isMissingType_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isNullable_0() {
			return this._type.__ks_func_isNullable_0();
		}
		__ks_func_isSubsetOf_24(value, mode) {
			let __ks_0;
			if(((mode & MatchingMode.IgnoreName) === 0n) && (this._name !== (__ks_0 = value.__ks_func_name_3()) && __ks_0 !== null)) {
				return false;
			}
			if(((mode & MatchingMode.MissingDefault) !== 0n) && this._default && !(value.__ks_func_hasDefaultValue_1() === true)) {
				if(!(this._type.__ks_func_setNullable_0(false).isSubsetOf(value.__ks_func_type_0(), mode) === true)) {
					return false;
				}
			}
			else if(((mode & MatchingMode.NonNullToNull) !== 0n) && !(this._type.__ks_func_isNullable_0() === true) && (value.__ks_func_type_0().isNullable() === true)) {
				if(!(this._type.__ks_func_setNullable_0(true).isSubsetOf(value.__ks_func_type_0(), mode) === true)) {
					return false;
				}
			}
			else if((mode & MatchingMode.Subset) !== 0n) {
				const oldType = this.__ks_func_getArgumentType_0();
				const newType = value.__ks_func_getArgumentType_0();
				if(!((newType.__ks_func_isSubsetOf_0(oldType, mode) === true) || (oldType.__ks_func_isSubsetOf_0(newType, mode) === true))) {
					return false;
				}
			}
			else {
				if(!(this.__ks_func_getArgumentType_0().__ks_func_isSubsetOf_0(value.__ks_func_getArgumentType_0(), mode) === true)) {
					return false;
				}
			}
			if(this._max > 1) {
				if(((mode & MatchingMode.MissingArity) === 0n) || (value.__ks_func_max_2() > 1)) {
					if(!((this._min >= value.__ks_func_min_2()) && (this._max <= value.__ks_func_max_2()))) {
						return false;
					}
				}
			}
			return true;
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, ParameterType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_24(value, mode);
			}
			return super.__ks_func_isSubsetOf_0(value, mode);
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ParameterType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_24.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, Type.prototype, args);
		}
		isVarargs() {
			return this.__ks_func_isVarargs_rt.call(null, this, this, arguments);
		}
		__ks_func_isVarargs_0() {
			return this._max > 1;
		}
		__ks_func_isVarargs_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isVarargs_0.call(that);
			}
			if(super.__ks_func_isVarargs_rt) {
				return super.__ks_func_isVarargs_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_matchContentOf_9(value) {
			return this._type.__ks_func_matchContentOf_0(value);
		}
		__ks_func_matchContentOf_10(value) {
			return this._type.matchContentOf(value.__ks_func_type_0());
		}
		__ks_func_matchContentOf_0(value) {
			if(KSType.isClassInstance(value, Type)) {
				return this.__ks_func_matchContentOf_9(value);
			}
			if(KSType.isClassInstance(value, ParameterType)) {
				return this.__ks_func_matchContentOf_10(value);
			}
			return super.__ks_func_matchContentOf_0(value);
		}
		__ks_func_matchContentOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ParameterType);
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_matchContentOf_10.call(that, args[0]);
				}
				if(t1(args[0])) {
					return proto.__ks_func_matchContentOf_9.call(that, args[0]);
				}
			}
			return super.__ks_func_matchContentOf_rt.call(null, that, Type.prototype, args);
		}
		matchArgument() {
			return this.__ks_func_matchArgument_rt.call(null, this, this, arguments);
		}
		__ks_func_matchArgument_0(value) {
			value.setCastingEnum(false);
			const type = value.__ks_func_type_22();
			if(type.matchContentOf(this._type) === true) {
				if((type.isReference() === true) && (type.isEnum() === true) && !(this._type.__ks_func_isEnum_0() === true) && !(this._type.__ks_func_isAny_0() === true)) {
					value.setCastingEnum(true);
				}
				return true;
			}
			else {
				return false;
			}
		}
		__ks_func_matchArgument_1(value) {
			return this.__ks_func_matchArgument_2(value.__ks_func_type_30());
		}
		__ks_func_matchArgument_2(value) {
			return value.__ks_func_matchContentOf_0(this._type);
		}
		__ks_func_matchArgument_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Expression);
			const t1 = value => KSType.isClassInstance(value, Parameter);
			const t2 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_matchArgument_0.call(that, args[0]);
				}
				if(t1(args[0])) {
					return proto.__ks_func_matchArgument_1.call(that, args[0]);
				}
				if(t2(args[0])) {
					return proto.__ks_func_matchArgument_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_matchArgument_rt) {
				return super.__ks_func_matchArgument_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		max() {
			return this.__ks_func_max_rt.call(null, this, this, arguments);
		}
		__ks_func_max_2() {
			return this._max;
		}
		__ks_func_max_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_max_2.call(that);
			}
			if(super.__ks_func_max_rt) {
				return super.__ks_func_max_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		min() {
			return this.__ks_func_min_rt.call(null, this, this, arguments);
		}
		__ks_func_min_2() {
			return this._min;
		}
		__ks_func_min_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_min_2.call(that);
			}
			if(super.__ks_func_min_rt) {
				return super.__ks_func_min_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_3() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_3.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setDefaultValue() {
			return this.__ks_func_setDefaultValue_rt.call(null, this, this, arguments);
		}
		__ks_func_setDefaultValue_0(defaultValue, comprehensive) {
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			if(comprehensive === void 0 || comprehensive === null) {
				comprehensive = true;
			}
			this._defaultValue = defaultValue;
			this._comprehensive = comprehensive;
			this._default = true;
		}
		__ks_func_setDefaultValue_rt(that, proto, args) {
			const t0 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_setDefaultValue_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_setDefaultValue_rt) {
				return super.__ks_func_setDefaultValue_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			throw new NotImplementedException(node);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			let fragments = "";
			if(this._max > 1) {
				if(KSOperator.eq(this._max, Infinity)) {
					if(this._min === 0) {
						fragments += "...";
					}
					else {
						fragments += KSHelper.concatString("...{", this._min, ",}");
					}
				}
				else if(this._min === this._max) {
					fragments += KSHelper.concatString("...{", this._min, "}");
				}
				else {
					if(this._min === 0) {
						fragments += KSHelper.concatString("...{,", this._max, "}");
					}
					else {
						fragments += KSHelper.concatString("...{", this._min, ",", this._max, "}");
					}
				}
			}
			if(this._name !== null) {
				fragments += this._name;
			}
			else {
				fragments += "_";
			}
			fragments += ": ";
			fragments += this._type.__ks_func_toQuote_0();
			if((this._min === 0) && (KSOperator.neq(this._max, Infinity)) && !(this._type.__ks_func_isNullable_0() === true)) {
				fragments += "?";
			}
			return fragments;
		}
		__ks_func_toNegativeTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			this._type.__ks_func_toNegativeTestFragments_0(fragments, node, junction);
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			this._type.__ks_func_toPositiveTestFragments_0(fragments, node, junction);
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("param", this._name, this._min, this._max, this._default);
			this._type.__ks_func_toVariations_0(variations);
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_0() {
			return this._type;
		}
		static __ks_sttc_fromAST_6(data, node) {
			return ParameterType.fromAST(data, false, node.__ks_func_scope_0(), true, node);
		}
		static __ks_sttc_fromAST_7(data, overridable, scope, defined, node) {
			let type = KSType.isValue(data.type) ? Type.__ks_sttc_fromAST_1(data.type, scope, defined, node) : AnyType.Unexplicit;
			let __ks_default_1 = false;
			let min = 1;
			let max = 1;
			if(KSType.isValue(data.defaultValue)) {
				__ks_default_1 = true;
				min = 0;
			}
			let nf = true;
			for(let __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1 && nf; ++__ks_0) {
				modifier = data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Rest.value) {
					if(modifier.arity === true) {
						min = modifier.arity.min;
						max = modifier.arity.max;
					}
					else {
						min = 0;
						max = Infinity;
					}
					nf = true;
				}
			}
			let name = null;
			if(KSType.isValue(data.name)) {
				if(KSHelper.valueOf(data.name.kind) === NodeKind.Identifier.value) {
					name = data.name.name;
				}
			}
			else {
				type = type.setNullable(true);
			}
			const parameter = new ParameterType(scope, name, type, min, max, __ks_default_1);
			if(__ks_default_1 && overridable) {
				parameter.__ks_func_setDefaultValue_0(data.defaultValue, true);
			}
			return parameter;
		}
		static fromAST() {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			const t2 = KSType.isBoolean;
			const t3 = value => KSType.isClassInstance(value, Scope);
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t1(arguments[1])) {
					return ParameterType.__ks_sttc_fromAST_6(arguments[0], arguments[1]);
				}
			}
			if(arguments.length === 5) {
				if(t0(arguments[0]) && t2(arguments[1]) && t3(arguments[2]) && t2(arguments[3]) && t1(arguments[4])) {
					return ParameterType.__ks_sttc_fromAST_7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
				}
			}
			if(Type.fromAST) {
				return Type.fromAST.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_0(index, metadata, references, alterations, queue, scope, node) {
			const data = index;
			const subtype = Type.import(data.type, metadata, references, alterations, queue, scope, node);
			const type = new ParameterType(scope, data.name, subtype, data.min, data.max, data.default);
			if(data.default === true) {
				if(data.comprehensive === true) {
					type.__ks_func_setDefaultValue_0(JSON.parse(Buffer.from(data.defaultValue, "base64").toString("utf8")), true);
				}
				else {
					type.__ks_func_setDefaultValue_0(data.defaultValue, false);
				}
			}
			return type;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 7) {
				if(t0(arguments[0]) && t1(arguments[1]) && t2(arguments[2]) && t2(arguments[3]) && t1(arguments[4]) && t3(arguments[5]) && t4(arguments[6])) {
					return ParameterType.__ks_sttc_import_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
				}
			}
			if(Type.import) {
				return Type.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class StructType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(StructType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._assessment = null;
			this._count = 0;
			this._extending = false;
			this._extends = null;
			this._fields = new Dictionary();
			this._function = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		addField() {
			return this.__ks_func_addField_rt.call(null, this, this, arguments);
		}
		__ks_func_addField_0(field) {
			this._fields[field.__ks_func_name_4()] = field;
			++this._count;
		}
		__ks_func_addField_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, StructFieldType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addField_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_addField_rt) {
				return super.__ks_func_addField_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		assessment() {
			return this.__ks_func_assessment_rt.call(null, this, this, arguments);
		}
		__ks_func_assessment_3(reference, node) {
			if(this._assessment === null) {
				this._assessment = Router.assess.__ks_1([this.__ks_func_function_1(reference, node)], reference.__ks_func_name_2(), node);
			}
			return this._assessment;
		}
		__ks_func_assessment_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ReferenceType);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_assessment_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_assessment_rt) {
				return super.__ks_func_assessment_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			NotImplementedException.__ks_sttc_throw_0([]);
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		count() {
			return this.__ks_func_count_rt.call(null, this, this, arguments);
		}
		__ks_func_count_0() {
			if(this._extending) {
				return this._count + KSHelper.cast(this._extends.__ks_func_type_0().count(), "Number", false, null, "Number");
			}
			else {
				return this._count;
			}
		}
		__ks_func_count_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_count_0.call(that);
			}
			if(super.__ks_func_count_rt) {
				return super.__ks_func_count_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			const __ks_export_1 = (() => {
				const d = new Dictionary();
				d.kind = TypeKind.Struct;
				d.fields = new Dictionary();
				return d;
			})();
			for(let __ks_0 in this._fields) {
				const field = this._fields[__ks_0];
				__ks_export_1.fields[field.__ks_func_name_4()] = field.__ks_func_export_0(references, indexDelta, mode, module);
			}
			if(this._extending) {
				__ks_export_1.extends = this._extends.__ks_func_metaReference_0(references, indexDelta, mode, module);
			}
			return __ks_export_1;
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		extends() {
			return this.__ks_func_extends_rt.call(null, this, this, arguments);
		}
		__ks_func_extends_2() {
			return this._extends;
		}
		__ks_func_extends_3(__ks_extends_1) {
			if(__ks_extends_1 === void 0) {
				__ks_extends_1 = null;
			}
			this._extends = __ks_extends_1;
			this._extending = true;
		}
		__ks_func_extends_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, StructType)) || KSType.isNull(value);
			if(args.length === 0) {
				return proto.__ks_func_extends_2.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_extends_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_extends_rt) {
				return super.__ks_func_extends_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		function() {
			return this.__ks_func_function_rt.call(null, this, this, arguments);
		}
		__ks_func_function_1(reference, node) {
			if(this._function === null) {
				const scope = node.scope();
				this._function = new FunctionType(scope);
				for(let index = 0, __ks_0 = this.__ks_func_listAllFields_0([]), __ks_1 = __ks_0.length, field; index < __ks_1; ++index) {
					field = __ks_0[index];
					if(field.isRequired() === true) {
						this._function.addParameter(field.type(), field.name(), 1, 1);
					}
					else {
						this._function.addParameter(field.type().setNullable(true), field.name(), 0, 1);
					}
				}
				this._function.setReturnType(reference);
			}
			return this._function;
		}
		__ks_func_function_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_function_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_function_rt) {
				return super.__ks_func_function_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getAllFieldsMap() {
			return this.__ks_func_getAllFieldsMap_rt.call(null, this, this, arguments);
		}
		__ks_func_getAllFieldsMap_0(list) {
			if(list === void 0 || list === null) {
				list = new Dictionary();
			}
			if(this._extending) {
				this._extends.__ks_func_type_0().getAllFieldsMap(list);
			}
			for(const name in this._fields) {
				const field = this._fields[name];
				list[name] = field;
			}
			return list;
		}
		__ks_func_getAllFieldsMap_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_getAllFieldsMap_0.call(that, args[0]);
			}
			if(super.__ks_func_getAllFieldsMap_rt) {
				return super.__ks_func_getAllFieldsMap_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getProperty_0(name) {
			let field = this._fields[name];
			if(KSType.isValue(field)) {
				return field;
			}
			if(this._extending) {
				return this._extends.__ks_func_type_0().getProperty(name);
			}
			else {
				return null;
			}
		}
		isExtending() {
			return this.__ks_func_isExtending_rt.call(null, this, this, arguments);
		}
		__ks_func_isExtending_1() {
			return this._extending;
		}
		__ks_func_isExtending_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExtending_1.call(that);
			}
			if(super.__ks_func_isExtending_rt) {
				return super.__ks_func_isExtending_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isStruct_0() {
			return true;
		}
		__ks_func_isSubsetOf_25(value, mode) {
			return (mode & MatchingMode.Similar) !== 0n;
		}
		__ks_func_isSubsetOf_26(value, mode) {
			return false;
		}
		__ks_func_isSubsetOf_27(value, mode) {
			for(let __ks_0 = 0, __ks_1 = value.__ks_func_types_1(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
				type = __ks_1[__ks_0];
				if(this.isSubsetOf(type) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, StructType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_25(value, mode);
			}
			if(KSType.isClassInstance(value, NullType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_26(value, mode);
			}
			if(KSType.isClassInstance(value, UnionType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_27(value, mode);
			}
			return this.__ks_func_isSubsetOf_28(value, mode);
		}
		__ks_func_isSubsetOf_28(value, mode) {
			if(KSType.isClassInstance(value, NamedType) || KSType.isClassInstance(value, ReferenceType)) {
				if(value.name() === "Struct") {
					return true;
				}
			}
			return false;
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, NullType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			const t2 = value => KSType.isClassInstance(value, StructType);
			const t3 = value => KSType.isClassInstance(value, UnionType);
			const t4 = value => KSType.isClassInstance(value, Type);
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_26.call(that, args[0], args[1]);
					}
				}
				if(t2(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_25.call(that, args[0], args[1]);
					}
				}
				if(t3(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_27.call(that, args[0], args[1]);
					}
				}
				if(t4(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_28.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, Type.prototype, args);
		}
		listAllFields() {
			return this.__ks_func_listAllFields_rt.call(null, this, this, arguments);
		}
		__ks_func_listAllFields_0(list) {
			if(list === void 0 || list === null) {
				list = [];
			}
			if(this._extending) {
				this._extends.__ks_func_type_0().listAllFields(list);
			}
			for(let __ks_0 in this._fields) {
				const field = this._fields[__ks_0];
				list.push(field);
			}
			return list;
		}
		__ks_func_listAllFields_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_listAllFields_0.call(that, args[0]);
			}
			if(super.__ks_func_listAllFields_rt) {
				return super.__ks_func_listAllFields_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listAllFieldNames() {
			return this.__ks_func_listAllFieldNames_rt.call(null, this, this, arguments);
		}
		__ks_func_listAllFieldNames_0(list) {
			if(list === void 0 || list === null) {
				list = [];
			}
			if(this._extending) {
				this._extends.__ks_func_type_0().listAllFieldNames(list);
			}
			for(const name in this._fields) {
				list.push(name);
			}
			return list;
		}
		__ks_func_listAllFieldNames_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_listAllFieldNames_0.call(that, args[0]);
			}
			if(super.__ks_func_listAllFieldNames_rt) {
				return super.__ks_func_listAllFieldNames_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		matchArguments() {
			return this.__ks_func_matchArguments_rt.call(null, this, this, arguments);
		}
		__ks_func_matchArguments_3(structName, __ks_arguments_1, node) {
			const fields = this.__ks_func_getAllFieldsMap_0();
			const count = this.__ks_func_count_0();
			const nameds = new Dictionary();
			let namedCount = 0;
			const shorthands = new Dictionary();
			const leftovers = [];
			for(let __ks_0 = 0, __ks_1 = __ks_arguments_1.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = __ks_arguments_1[__ks_0];
				if(KSType.isClassInstance(argument, NamedArgument)) {
					const name = argument.__ks_func_name_17();
					if(!KSType.isValue(fields[name])) {
						SyntaxException.throwUnrecognizedStructField(name, node);
					}
					nameds[name] = true;
					++namedCount;
				}
				else if(KSType.isClassInstance(argument, IdentifierLiteral)) {
					const name = argument.__ks_func_name_13();
					if(KSType.isValue(fields[name])) {
						shorthands[name] = true;
					}
				}
				else {
					leftovers.push(argument);
				}
			}
			if(namedCount === __ks_arguments_1.length) {
				if(namedCount !== count) {
					if(__ks_arguments_1.length === 0) {
						for(const name in fields) {
							const field = fields[name];
							if(field.isRequired() === true) {
								ReferenceException.__ks_sttc_throwNoMatchingStruct_0(structName, __ks_arguments_1, node);
							}
						}
					}
					else {
						for(const name in fields) {
							const field = fields[name];
							if(!(nameds[name] === true) && (field.isRequired() === true)) {
								SyntaxException.__ks_sttc_throwMissingStructField_0(name, node);
							}
						}
					}
				}
			}
			else {
				const groups = [];
				let index = 0;
				let required = 0;
				let optional = 0;
				for(const name in fields) {
					const field = fields[name];
					if((nameds[name] === true) || (shorthands[name] === true)) {
						++index;
					}
					else {
						groups.push([++index, field]);
						if(field.isRequired() === true) {
							++required;
						}
						else {
							++optional;
						}
					}
				}
				if(leftovers.length < required) {
					ReferenceException.__ks_sttc_throwNoMatchingStruct_0(structName, __ks_arguments_1, node);
				}
				else if(leftovers.length > (required + optional)) {
					SyntaxException.__ks_sttc_throwTooMuchStructFields_0(node);
				}
				let countdown = leftovers.length - required;
				let leftover = 0;
				for(let __ks_0 = 0, __ks_1 = groups.length, index, field; __ks_0 < __ks_1; ++__ks_0) {
					[index, field] = groups[__ks_0];
					if(field.isRequired() === true) {
						if(!(leftovers[leftover].type().matchContentOf(field.type()) === true)) {
							ReferenceException.__ks_sttc_throwNoMatchingStruct_0(structName, __ks_arguments_1, node);
						}
						++leftover;
					}
					else if(countdown > 0) {
						++leftover;
						--countdown;
					}
				}
			}
			return true;
		}
		__ks_func_matchArguments_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isArray;
			const t2 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_matchArguments_3.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_matchArguments_rt) {
				return super.__ks_func_matchArguments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		metaReference() {
			return this.__ks_func_metaReference_rt.call(null, this, this, arguments);
		}
		__ks_func_metaReference_2(references, indexDelta, mode, module, name) {
			return [this.__ks_func_toMetadata_0(references, indexDelta, mode, module), name];
		}
		__ks_func_metaReference_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			const t4 = KSType.isString;
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
					return proto.__ks_func_metaReference_2.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			if(super.__ks_func_metaReference_rt) {
				return super.__ks_func_metaReference_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_shallBeNamed_0() {
			return true;
		}
		sortArguments() {
			return this.__ks_func_sortArguments_rt.call(null, this, this, arguments);
		}
		__ks_func_sortArguments_0(__ks_arguments_1, node) {
			const order = [];
			const fields = this.__ks_func_getAllFieldsMap_0();
			const count = this.__ks_func_count_0();
			const nameds = new Dictionary();
			let namedCount = 0;
			const shorthands = new Dictionary();
			const leftovers = [];
			for(let __ks_0 = 0, __ks_1 = __ks_arguments_1.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = __ks_arguments_1[__ks_0];
				if(KSType.isClassInstance(argument, NamedArgument)) {
					const name = argument.__ks_func_name_17();
					if(!KSType.isValue(fields[name])) {
						SyntaxException.throwUnrecognizedStructField(name, node);
					}
					nameds[name] = argument;
					++namedCount;
				}
				else if(KSType.isClassInstance(argument, IdentifierLiteral)) {
					const name = argument.__ks_func_name_13();
					if(KSType.isValue(fields[name])) {
						shorthands[name] = argument;
					}
					else {
						leftovers.push(argument);
					}
				}
				else {
					leftovers.push(argument);
				}
			}
			if(namedCount === __ks_arguments_1.length) {
				if(namedCount === count) {
					for(const name in fields) {
						const field = fields[name];
						order.push(nameds[name]);
					}
				}
				else {
					for(const name in fields) {
						const field = fields[name];
						if(KSType.isValue(nameds[name])) {
							order.push(nameds[name]);
						}
						else if(field.isRequired() === true) {
							SyntaxException.__ks_sttc_throwMissingStructField_0(name, node);
						}
						else {
							order.push(new Literal("null", node));
						}
					}
				}
			}
			else {
				const groups = [];
				let required = 0;
				let optional = 0;
				for(const name in fields) {
					const field = fields[name];
					if(KSType.isValue(nameds[name])) {
						order.push(nameds[name]);
					}
					else if(KSType.isValue(shorthands[name])) {
						order.push(shorthands[name]);
					}
					else {
						const index = order.length;
						order.push(null);
						groups.push([index, field]);
						if(field.isRequired() === true) {
							++required;
						}
						else {
							++optional;
						}
					}
				}
				if(leftovers.length < required) {
					SyntaxException.__ks_sttc_throwNotEnoughStructFields_0(node);
				}
				else if(leftovers.length > (required + optional)) {
					SyntaxException.__ks_sttc_throwTooMuchStructFields_0(node);
				}
				let countdown = leftovers.length - required;
				let leftover = 0;
				for(let __ks_0 = 0, __ks_1 = groups.length, index, field; __ks_0 < __ks_1; ++__ks_0) {
					[index, field] = groups[__ks_0];
					if(field.isRequired() === true) {
						order[index] = leftovers[leftover];
						++leftover;
					}
					else if(countdown > 0) {
						order[index] = leftovers[leftover];
						++leftover;
						--countdown;
					}
					else {
						order[index] = new Literal("null", node);
					}
				}
			}
			return order;
		}
		__ks_func_sortArguments_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_sortArguments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_sortArguments_rt) {
				return super.__ks_func_sortArguments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			NotImplementedException.__ks_sttc_throw_0([]);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			NotImplementedException.__ks_sttc_throw_0([node]);
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("struct", this._count);
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_9(index, data, metadata, references, alterations, queue, scope, node) {
			const value = StructType.__ks_new_0(scope);
			queue.push((() => {
				const __ks_rt = (...args) => {
					if(args.length === 0) {
						return __ks_rt.__ks_0.call(this);
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = () => {
					let index = 0;
					for(const name in data.fields) {
						const type = data.fields[name];
						value.__ks_func_addField_0(StructFieldType.import(index, name, type, metadata, references, alterations, queue, scope, node));
						++index;
					}
					if(KSType.isValue(data.extends)) {
						value.extends(Type.import(data.extends, metadata, references, alterations, queue, scope, node).__ks_func_discardReference_0());
					}
				};
				return __ks_rt;
			})());
			return value;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 8) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2]) && t2(arguments[3]) && t2(arguments[4]) && t1(arguments[5]) && t3(arguments[6]) && t4(arguments[7])) {
					return StructType.__ks_sttc_import_9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(Type.import) {
				return Type.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class StructFieldType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(StructFieldType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(scope, name, index, type, required) {
			if(scope === void 0) {
				scope = null;
			}
			if(name === void 0) {
				name = null;
			}
			Type.prototype.__ks_cons_0.call(this, scope);
			this._name = name;
			this._index = index;
			this._type = type;
			this._required = required;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t1 = value => KSType.isString(value) || KSType.isNull(value);
			const t2 = KSType.isNumber;
			const t3 = value => KSType.isClassInstance(value, Type);
			const t4 = KSType.isBoolean;
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
					return StructFieldType.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			NotImplementedException.__ks_sttc_throw_0([]);
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_discardVariable_0() {
			return this._type;
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			return (() => {
				const d = new Dictionary();
				d.required = this._required;
				d.type = this._type.__ks_func_export_0(references, indexDelta, mode, module);
				return d;
			})();
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		flagNullable() {
			return this.__ks_func_flagNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_flagNullable_1() {
			this._type = this._type.__ks_func_setNullable_0(true);
		}
		__ks_func_flagNullable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagNullable_1.call(that);
			}
			if(super.__ks_func_flagNullable_rt) {
				return super.__ks_func_flagNullable_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		index() {
			return this.__ks_func_index_rt.call(null, this, this, arguments);
		}
		__ks_func_index_4() {
			return this._index;
		}
		__ks_func_index_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_index_4.call(that);
			}
			if(super.__ks_func_index_rt) {
				return super.__ks_func_index_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_4() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_4.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			NotImplementedException.__ks_sttc_throw_0([]);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			return this._type.__ks_func_toQuote_0();
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			NotImplementedException.__ks_sttc_throw_0([node]);
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_0() {
			return this._type;
		}
		static __ks_sttc_import_10(index, name, data, metadata, references, alterations, queue, scope, node) {
			if(name === void 0) {
				name = null;
			}
			const fieldType = Type.import(data.type, metadata, references, alterations, queue, scope, node);
			return new StructFieldType(scope, name, index, fieldType, data.required);
		}
		static import() {
			const t0 = KSType.isNumber;
			const t1 = value => KSType.isString(value) || KSType.isNull(value);
			const t2 = KSType.isValue;
			const t3 = KSType.isArray;
			const t4 = KSType.isDictionary;
			const t5 = value => KSType.isClassInstance(value, Scope);
			const t6 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 9) {
				if(t0(arguments[0]) && t1(arguments[1]) && t2(arguments[2]) && t3(arguments[3]) && t4(arguments[4]) && t4(arguments[5]) && t3(arguments[6]) && t5(arguments[7]) && t6(arguments[8])) {
					return StructFieldType.__ks_sttc_import_10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
				}
			}
			if(Type.import) {
				return Type.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class TupleType extends Type {
		__ks_init() {
			super.__ks_init();
			this._assessment = null;
			this._length = 0;
			this._extending = false;
			this._extends = null;
			this._extendedLength = 0;
			this._fieldsByIndex = new Dictionary();
			this._function = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		assessment() {
			return this.__ks_func_assessment_rt.call(null, this, this, arguments);
		}
		__ks_func_assessment_4(reference, node) {
			if(this._assessment === null) {
				this._assessment = Router.assess.__ks_1([this.__ks_func_function_2(reference, node)], reference.__ks_func_name_2(), node);
			}
			return this._assessment;
		}
		__ks_func_assessment_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ReferenceType);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_assessment_4.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_assessment_rt) {
				return super.__ks_func_assessment_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			NotImplementedException.__ks_sttc_throw_0([]);
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		extends() {
			return this.__ks_func_extends_rt.call(null, this, this, arguments);
		}
		__ks_func_extends_4() {
			return this._extends;
		}
		__ks_func_extends_5(__ks_extends_1) {
			if(__ks_extends_1 === void 0) {
				__ks_extends_1 = null;
			}
			this._extends = __ks_extends_1;
			this._extending = true;
			this._extendedLength = this._extends.__ks_func_type_0().length();
		}
		__ks_func_extends_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, TupleType)) || KSType.isNull(value);
			if(args.length === 0) {
				return proto.__ks_func_extends_4.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_extends_5.call(that, args[0]);
				}
			}
			if(super.__ks_func_extends_rt) {
				return super.__ks_func_extends_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		function() {
			return this.__ks_func_function_rt.call(null, this, this, arguments);
		}
		__ks_func_function_2(reference, node) {
			if(this._function === null) {
				const scope = node.scope();
				this._function = new FunctionType(scope);
				for(let __ks_0 = 0, __ks_1 = this.__ks_func_listAllFields_1([]), __ks_2 = __ks_1.length, field; __ks_0 < __ks_2; ++__ks_0) {
					field = __ks_1[__ks_0];
					if(field.isRequired() === true) {
						this._function.addParameter(field.type(), field.name(), 1, 1);
					}
					else {
						this._function.addParameter(field.type().setNullable(true), field.name(), 0, 1);
					}
				}
				this._function.setReturnType(reference);
			}
			return this._function;
		}
		__ks_func_function_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_function_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_function_rt) {
				return super.__ks_func_function_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getProperty_3(index) {
			let field = this._fieldsByIndex[index];
			if(KSType.isValue(field)) {
				return field;
			}
			if(this._extending) {
				return this._extends.getProperty(index);
			}
			else {
				return null;
			}
		}
		__ks_func_getProperty_0(name) {
			let field = this._fieldsByIndex[name];
			if(KSType.isValue(field)) {
				return field;
			}
			if(this._extending) {
				return this._extends.__ks_func_getProperty_0(name);
			}
			else {
				return null;
			}
		}
		__ks_func_getProperty_rt(that, proto, args) {
			const t0 = KSType.isNumber;
			const t1 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getProperty_3.call(that, args[0]);
				}
				if(t1(args[0])) {
					return proto.__ks_func_getProperty_0.call(that, args[0]);
				}
			}
			return super.__ks_func_getProperty_rt.call(null, that, Type.prototype, args);
		}
		isExtending() {
			return this.__ks_func_isExtending_rt.call(null, this, this, arguments);
		}
		__ks_func_isExtending_2() {
			return this._extending;
		}
		__ks_func_isExtending_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExtending_2.call(that);
			}
			if(super.__ks_func_isExtending_rt) {
				return super.__ks_func_isExtending_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isTuple_0() {
			return true;
		}
		length() {
			return this.__ks_func_length_rt.call(null, this, this, arguments);
		}
		__ks_func_length_3() {
			return this._extendedLength + this._length;
		}
		__ks_func_length_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_length_3.call(that);
			}
			if(super.__ks_func_length_rt) {
				return super.__ks_func_length_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listAllFields() {
			return this.__ks_func_listAllFields_rt.call(null, this, this, arguments);
		}
		__ks_func_listAllFields_1(list) {
			if(list === void 0 || list === null) {
				list = [];
			}
			if(this._extending) {
				this._extends.__ks_func_type_0().listAllFields(list);
			}
			for(let index = this._extendedLength, __ks_0 = this._extendedLength + this._length; index < __ks_0; ++index) {
				list.push(this._fieldsByIndex[index]);
			}
			return list;
		}
		__ks_func_listAllFields_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_listAllFields_1.call(that, args[0]);
			}
			if(super.__ks_func_listAllFields_rt) {
				return super.__ks_func_listAllFields_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		metaReference() {
			return this.__ks_func_metaReference_rt.call(null, this, this, arguments);
		}
		__ks_func_metaReference_3(references, indexDelta, mode, module, name) {
			return [this.__ks_func_toMetadata_0(references, indexDelta, mode, module), name];
		}
		__ks_func_metaReference_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			const t4 = KSType.isString;
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
					return proto.__ks_func_metaReference_3.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			if(super.__ks_func_metaReference_rt) {
				return super.__ks_func_metaReference_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_shallBeNamed_0() {
			return true;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			NotImplementedException.__ks_sttc_throw_0([]);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			NotImplementedException.__ks_sttc_throw_0([node]);
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("tuple", this._length);
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_11(index, data, metadata, references, alterations, queue, scope, node) {
			if(data.named === true) {
				return NamedTupleType.__ks_sttc_import_0(data, metadata, references, alterations, queue, scope, node);
			}
			else {
				return UnnamedTupleType.__ks_sttc_import_0(data, metadata, references, alterations, queue, scope, node);
			}
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 8) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2]) && t2(arguments[3]) && t2(arguments[4]) && t1(arguments[5]) && t3(arguments[6]) && t4(arguments[7])) {
					return TupleType.__ks_sttc_import_11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(Type.import) {
				return Type.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class NamedTupleType extends TupleType {
		static __ks_new_0(...args) {
			const o = Object.create(NamedTupleType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._fieldsByName = new Dictionary();
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		addField() {
			return this.__ks_func_addField_rt.call(null, this, this, arguments);
		}
		__ks_func_addField_1(field) {
			this._fieldsByName[field.__ks_func_name_5()] = field;
			this._fieldsByIndex[field.__ks_func_index_5()] = field;
			++this._length;
		}
		__ks_func_addField_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, TupleFieldType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addField_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_addField_rt) {
				return super.__ks_func_addField_rt.call(null, that, TupleType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			const __ks_export_1 = (() => {
				const d = new Dictionary();
				d.kind = TypeKind.Tuple;
				d.named = true;
				d.fields = new Dictionary();
				return d;
			})();
			for(const name in this._fieldsByName) {
				const field = this._fieldsByName[name];
				__ks_export_1.fields[name] = field.__ks_func_export_0(references, indexDelta, mode, module);
			}
			if(this._extending) {
				__ks_export_1.extends = this._extends.__ks_func_metaReference_0(references, indexDelta, mode, module);
			}
			return __ks_export_1;
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, TupleType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getAllFieldsMap() {
			return this.__ks_func_getAllFieldsMap_rt.call(null, this, this, arguments);
		}
		__ks_func_getAllFieldsMap_1(list) {
			if(list === void 0 || list === null) {
				list = new Dictionary();
			}
			if(this._extending) {
				this._extends.__ks_func_type_0().getAllFieldsMap(list);
			}
			for(const name in this._fieldsByName) {
				const field = this._fieldsByName[name];
				list[name] = field;
			}
			return list;
		}
		__ks_func_getAllFieldsMap_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_getAllFieldsMap_1.call(that, args[0]);
			}
			if(super.__ks_func_getAllFieldsMap_rt) {
				return super.__ks_func_getAllFieldsMap_rt.call(null, that, TupleType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getProperty_0(name) {
			let field = this._fieldsByName[name];
			if(KSType.isValue(field)) {
				return field;
			}
			else if(KSType.isValue((field = this._fieldsByIndex[name]))) {
				return field;
			}
			if(this._extending) {
				return this._extends.__ks_func_getProperty_0(name);
			}
			else {
				return null;
			}
		}
		__ks_func_isSubsetOf_29(value, mode) {
			return (mode & MatchingMode.Similar) !== 0n;
		}
		__ks_func_isSubsetOf_30(value, mode) {
			if((KSType.isClassInstance(value, NamedType) ? value.__ks_func_name_0() : value.__ks_func_name_2()) === "Tuple") {
				return true;
			}
			return false;
		}
		__ks_func_isSubsetOf_31(value, mode) {
			return false;
		}
		__ks_func_isSubsetOf_32(value, mode) {
			for(let __ks_0 = 0, __ks_1 = value.__ks_func_types_1(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
				type = __ks_1[__ks_0];
				if(this.isSubsetOf(type) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, TupleType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_29(value, mode);
			}
			if((KSType.isClassInstance(value, NamedType) || KSType.isClassInstance(value, ReferenceType)) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_30(value, mode);
			}
			if(KSType.isClassInstance(value, NullType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_31(value, mode);
			}
			if(KSType.isClassInstance(value, UnionType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_32(value, mode);
			}
			return super.__ks_func_isSubsetOf_0(value, mode);
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, NamedType) || KSType.isClassInstance(value, ReferenceType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			const t2 = value => KSType.isClassInstance(value, NullType);
			const t3 = value => KSType.isClassInstance(value, TupleType);
			const t4 = value => KSType.isClassInstance(value, UnionType);
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_30.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t2(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_31.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t3(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_29.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t4(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_32.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, TupleType.prototype, args);
		}
		matchArguments() {
			return this.__ks_func_matchArguments_rt.call(null, this, this, arguments);
		}
		__ks_func_matchArguments_4(tupleName, __ks_arguments_1, node) {
			const fields = this.__ks_func_getAllFieldsMap_1();
			const count = this.__ks_func_length_3();
			const nameds = new Dictionary();
			let namedCount = 0;
			const shorthands = new Dictionary();
			const leftovers = [];
			for(let __ks_0 = 0, __ks_1 = __ks_arguments_1.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = __ks_arguments_1[__ks_0];
				if(KSType.isClassInstance(argument, NamedArgument)) {
					const name = argument.__ks_func_name_17();
					if(!KSType.isValue(fields[name])) {
						SyntaxException.throwUnrecognizedTupleField(name, node);
					}
					nameds[name] = true;
					++namedCount;
				}
				else if(KSType.isClassInstance(argument, IdentifierLiteral)) {
					const name = argument.__ks_func_name_13();
					if(KSType.isValue(fields[name])) {
						shorthands[name] = true;
					}
					else {
						leftovers.push(argument);
					}
				}
				else {
					leftovers.push(argument);
				}
			}
			if(namedCount === __ks_arguments_1.length) {
				if(namedCount !== count) {
					if(__ks_arguments_1.length === 0) {
						for(const name in fields) {
							const field = fields[name];
							if(field.isRequired() === true) {
								ReferenceException.__ks_sttc_throwNoMatchingTuple_0(tupleName, __ks_arguments_1, node);
							}
						}
					}
					else {
						for(const name in fields) {
							const field = fields[name];
							if(!(nameds[name] === true) && (field.isRequired() === true)) {
								SyntaxException.__ks_sttc_throwMissingTupleField_0(name, node);
							}
						}
					}
				}
			}
			else {
				const groups = [];
				let index = 0;
				let required = 0;
				let optional = 0;
				for(const name in fields) {
					const field = fields[name];
					if((nameds[name] === true) || (shorthands[name] === true)) {
						++index;
					}
					else {
						groups.push([++index, field]);
						if(field.isRequired() === true) {
							++required;
						}
						else {
							++optional;
						}
					}
				}
				if(leftovers.length < required) {
					ReferenceException.__ks_sttc_throwNoMatchingTuple_0(tupleName, __ks_arguments_1, node);
				}
				else if(leftovers.length > (required + optional)) {
					SyntaxException.__ks_sttc_throwTooMuchTupleFields_0(node);
				}
				let countdown = leftovers.length - required;
				let leftover = 0;
				for(let __ks_0 = 0, __ks_1 = groups.length, index, field; __ks_0 < __ks_1; ++__ks_0) {
					[index, field] = groups[__ks_0];
					if(field.isRequired() === true) {
						if(!(leftovers[leftover].type().matchContentOf(field.type()) === true)) {
							ReferenceException.__ks_sttc_throwNoMatchingTuple_0(tupleName, __ks_arguments_1, node);
						}
						++leftover;
					}
					else if(countdown > 0) {
						++leftover;
						--countdown;
					}
				}
			}
			return true;
		}
		__ks_func_matchArguments_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isArray;
			const t2 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_matchArguments_4.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_matchArguments_rt) {
				return super.__ks_func_matchArguments_rt.call(null, that, TupleType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		sortArguments() {
			return this.__ks_func_sortArguments_rt.call(null, this, this, arguments);
		}
		__ks_func_sortArguments_1(__ks_arguments_1, node) {
			const order = [];
			const fields = this.__ks_func_getAllFieldsMap_1();
			const count = this.__ks_func_length_3();
			const nameds = new Dictionary();
			let namedCount = 0;
			const shorthands = new Dictionary();
			const leftovers = [];
			for(let __ks_0 = 0, __ks_1 = __ks_arguments_1.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = __ks_arguments_1[__ks_0];
				if(KSType.isClassInstance(argument, NamedArgument)) {
					const name = argument.__ks_func_name_17();
					if(!KSType.isValue(fields[name])) {
						SyntaxException.throwUnrecognizedTupleField(name, node);
					}
					nameds[name] = argument;
					++namedCount;
				}
				else if(KSType.isClassInstance(argument, IdentifierLiteral)) {
					const name = argument.__ks_func_name_13();
					if(KSType.isValue(fields[name])) {
						shorthands[name] = argument;
					}
				}
				else {
					leftovers.push(argument);
				}
			}
			if(namedCount === __ks_arguments_1.length) {
				if(namedCount === count) {
					for(const name in fields) {
						const field = fields[name];
						order.push(nameds[name]);
					}
				}
				else {
					for(const name in fields) {
						const field = fields[name];
						if(KSType.isValue(nameds[name])) {
							order.push(nameds[name]);
						}
						else if(field.isRequired() === true) {
							SyntaxException.__ks_sttc_throwMissingTupleField_0(name, node);
						}
						else {
							order.push(new Literal("null", node));
						}
					}
				}
			}
			else {
				const groups = [];
				let required = 0;
				let optional = 0;
				for(const name in fields) {
					const field = fields[name];
					if(KSType.isValue(nameds[name])) {
						order.push(nameds[name]);
					}
					else if(KSType.isValue(shorthands[name])) {
						order.push(shorthands[name]);
					}
					else {
						const index = order.length;
						order.push(null);
						groups.push([index, field]);
						if(field.isRequired() === true) {
							++required;
						}
						else {
							++optional;
						}
					}
				}
				if(leftovers.length < required) {
					SyntaxException.__ks_sttc_throwNotEnoughTupleFields_0(node);
				}
				else if(leftovers.length > (required + optional)) {
					SyntaxException.__ks_sttc_throwTooMuchTupleFields_0(node);
				}
				let countdown = leftovers.length - required;
				let leftover = 0;
				for(let __ks_0 = 0, __ks_1 = groups.length, index, field; __ks_0 < __ks_1; ++__ks_0) {
					[index, field] = groups[__ks_0];
					if(field.isRequired() === true) {
						order[index] = leftovers[leftover];
						++leftover;
					}
					else if(countdown > 0) {
						order[index] = leftovers[leftover];
						++leftover;
						--countdown;
					}
					else {
						order[index] = new Literal("null", node);
					}
				}
			}
			return order;
		}
		__ks_func_sortArguments_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_sortArguments_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_sortArguments_rt) {
				return super.__ks_func_sortArguments_rt.call(null, that, TupleType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_0(index, metadata, references, alterations, queue, scope, node) {
			const data = index;
			const value = NamedTupleType.__ks_new_0(scope);
			queue.push((() => {
				const __ks_rt = (...args) => {
					if(args.length === 0) {
						return __ks_rt.__ks_0.call(this);
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = () => {
					if(KSType.isValue(data.extends)) {
						value.extends(Type.import(data.extends, metadata, references, alterations, queue, scope, node).__ks_func_discardReference_0());
					}
					for(const name in data.fields) {
						const type = data.fields[name];
						value.__ks_func_addField_1(TupleFieldType.import(name, type, metadata, references, alterations, queue, scope, node));
					}
				};
				return __ks_rt;
			})());
			return value;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 7) {
				if(t0(arguments[0]) && t1(arguments[1]) && t2(arguments[2]) && t2(arguments[3]) && t1(arguments[4]) && t3(arguments[5]) && t4(arguments[6])) {
					return NamedTupleType.__ks_sttc_import_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
				}
			}
			if(TupleType.import) {
				return TupleType.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class UnnamedTupleType extends TupleType {
		static __ks_new_0(...args) {
			const o = Object.create(UnnamedTupleType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._fields = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		addField() {
			return this.__ks_func_addField_rt.call(null, this, this, arguments);
		}
		__ks_func_addField_2(field) {
			this._fieldsByIndex[field.index()] = field;
			this._fields.push(field);
			++this._length;
		}
		__ks_func_addField_1(field) {
			return this.__ks_func_addField_2(field);
		}
		__ks_func_addField_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addField_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_addField_rt) {
				return super.__ks_func_addField_rt.call(null, that, TupleType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			const __ks_export_1 = (() => {
				const d = new Dictionary();
				d.kind = TypeKind.Tuple;
				d.named = false;
				d.fields = [];
				return d;
			})();
			for(let __ks_0 = 0, __ks_1 = this._fields.length, field; __ks_0 < __ks_1; ++__ks_0) {
				field = this._fields[__ks_0];
				__ks_export_1.fields.push(field.__ks_func_export_0(references, indexDelta, mode, module));
			}
			if(this._extending) {
				__ks_export_1.extends = this._extends.__ks_func_metaReference_0(references, indexDelta, mode, module);
			}
			return __ks_export_1;
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, TupleType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isArray_0() {
			return true;
		}
		__ks_func_isSubsetOf_33(value, mode) {
			return (mode & MatchingMode.Similar) !== 0n;
		}
		__ks_func_isSubsetOf_34(value, mode) {
			if((KSType.isClassInstance(value, NamedType) ? value.__ks_func_name_0() : value.__ks_func_name_2()) === "Tuple") {
				return true;
			}
			return false;
		}
		__ks_func_isSubsetOf_35(value, mode) {
			return false;
		}
		__ks_func_isSubsetOf_36(value, mode) {
			for(let __ks_0 = 0, __ks_1 = value.__ks_func_types_1(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
				type = __ks_1[__ks_0];
				if(this.isSubsetOf(type) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, TupleType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_33(value, mode);
			}
			if((KSType.isClassInstance(value, NamedType) || KSType.isClassInstance(value, ReferenceType)) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_34(value, mode);
			}
			if(KSType.isClassInstance(value, NullType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_35(value, mode);
			}
			if(KSType.isClassInstance(value, UnionType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_36(value, mode);
			}
			return super.__ks_func_isSubsetOf_0(value, mode);
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, NamedType) || KSType.isClassInstance(value, ReferenceType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			const t2 = value => KSType.isClassInstance(value, NullType);
			const t3 = value => KSType.isClassInstance(value, TupleType);
			const t4 = value => KSType.isClassInstance(value, UnionType);
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_34.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t2(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_35.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t3(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_isSubsetOf_33.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t4(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_36.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, TupleType.prototype, args);
		}
		matchArguments() {
			return this.__ks_func_matchArguments_rt.call(null, this, this, arguments);
		}
		__ks_func_matchArguments_5(tupleName, __ks_arguments_1, node) {
			const fields = this.__ks_func_listAllFields_1();
			let required = 0;
			let optional = 0;
			for(let __ks_0 in fields) {
				const field = fields[__ks_0];
				if(field.isRequired() === true) {
					++required;
				}
				else {
					++optional;
				}
			}
			if(__ks_arguments_1.length < required) {
				ReferenceException.__ks_sttc_throwNoMatchingTuple_0(tupleName, __ks_arguments_1, node);
			}
			else if(__ks_arguments_1.length > (required + optional)) {
				SyntaxException.__ks_sttc_throwTooMuchTupleFields_0(node);
			}
			let countdown = __ks_arguments_1.length - required;
			let leftover = 0;
			for(let __ks_0 in fields) {
				const field = fields[__ks_0];
				if(field.isRequired() === true) {
					if(!(__ks_arguments_1[leftover].type().matchContentOf(field.type()) === true)) {
						ReferenceException.__ks_sttc_throwNoMatchingTuple_0(tupleName, __ks_arguments_1, node);
					}
					++leftover;
				}
				else if(countdown > 0) {
					++leftover;
					--countdown;
				}
			}
			return true;
		}
		__ks_func_matchArguments_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isArray;
			const t2 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_matchArguments_5.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_matchArguments_rt) {
				return super.__ks_func_matchArguments_rt.call(null, that, TupleType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		sortArguments() {
			return this.__ks_func_sortArguments_rt.call(null, this, this, arguments);
		}
		__ks_func_sortArguments_2(__ks_arguments_1) {
			return __ks_arguments_1;
		}
		__ks_func_sortArguments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_sortArguments_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_sortArguments_rt) {
				return super.__ks_func_sortArguments_rt.call(null, that, TupleType.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_0(index, metadata, references, alterations, queue, scope, node) {
			const data = index;
			const value = UnnamedTupleType.__ks_new_0(scope);
			queue.push((() => {
				const __ks_rt = (...args) => {
					if(args.length === 0) {
						return __ks_rt.__ks_0.call(this);
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = () => {
					if(KSType.isValue(data.extends)) {
						value.extends(Type.import(data.extends, metadata, references, alterations, queue, scope, node).__ks_func_discardReference_0());
					}
					for(let __ks_0 = 0, __ks_1 = data.fields.length, type; __ks_0 < __ks_1; ++__ks_0) {
						type = data.fields[__ks_0];
						value.__ks_func_addField_2(TupleFieldType.import(null, type, metadata, references, alterations, queue, scope, node));
					}
				};
				return __ks_rt;
			})());
			return value;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 7) {
				if(t0(arguments[0]) && t1(arguments[1]) && t2(arguments[2]) && t2(arguments[3]) && t1(arguments[4]) && t3(arguments[5]) && t4(arguments[6])) {
					return UnnamedTupleType.__ks_sttc_import_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
				}
			}
			if(TupleType.import) {
				return TupleType.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class TupleFieldType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(TupleFieldType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(scope, name, index, type, required) {
			if(scope === void 0) {
				scope = null;
			}
			if(name === void 0) {
				name = null;
			}
			Type.prototype.__ks_cons_0.call(this, scope);
			this._name = name;
			this._index = index;
			this._type = type;
			this._required = required;
			if(!KSType.isValue(name)) {
				this._name = KSHelper.concatString("__ks_", this._index);
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t1 = value => KSType.isString(value) || KSType.isNull(value);
			const t2 = KSType.isNumber;
			const t3 = value => KSType.isClassInstance(value, Type);
			const t4 = KSType.isBoolean;
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
					return TupleFieldType.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			NotImplementedException.__ks_sttc_throw_0([]);
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_discardVariable_0() {
			return this._type;
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			return (() => {
				const d = new Dictionary();
				d.index = this._index;
				d.required = this._required;
				d.type = this._type.__ks_func_export_0(references, indexDelta, mode, module);
				return d;
			})();
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		flagNullable() {
			return this.__ks_func_flagNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_flagNullable_2() {
			this._type = this._type.__ks_func_setNullable_0(true);
		}
		__ks_func_flagNullable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagNullable_2.call(that);
			}
			if(super.__ks_func_flagNullable_rt) {
				return super.__ks_func_flagNullable_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		index() {
			return this.__ks_func_index_rt.call(null, this, this, arguments);
		}
		__ks_func_index_5() {
			return this._index;
		}
		__ks_func_index_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_index_5.call(that);
			}
			if(super.__ks_func_index_rt) {
				return super.__ks_func_index_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_5() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_5.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			NotImplementedException.__ks_sttc_throw_0([]);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			return this._type.__ks_func_toQuote_0();
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			NotImplementedException.__ks_sttc_throw_0([node]);
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_0() {
			return this._type;
		}
		static __ks_sttc_import_12(_name, data, metadata, references, alterations, queue, scope, node) {
			if(_name === void 0) {
				_name = null;
			}
			const fieldType = Type.import(data.type, metadata, references, alterations, queue, scope, node);
			const name = _name;
			return new TupleFieldType(scope, name, KSHelper.cast(data.index, "Number", false, null, "Number"), fieldType, data.required);
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 8) {
				if(t0(arguments[1]) && t1(arguments[2]) && t2(arguments[3]) && t2(arguments[4]) && t1(arguments[5]) && t3(arguments[6]) && t4(arguments[7])) {
					return TupleFieldType.__ks_sttc_import_12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(Type.import) {
				return Type.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class ExclusionType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(ExclusionType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(scope, types) {
			if(scope === void 0) {
				scope = null;
			}
			if(types === void 0 || types === null) {
				types = [];
			}
			Type.prototype.__ks_cons_0.call(this, scope);
			this._types = types;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t1 = value => KSType.isArray(value, value => KSType.isClassInstance(value, Type)) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return ExclusionType.prototype.__ks_cons_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			const that = ExclusionType.__ks_new_0(this._scope);
			that._types = [...this._types];
			return that;
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			return (() => {
				const d = new Dictionary();
				d.kind = TypeKind.Exclusion;
				d.types = KSHelper.mapArray(this._types, function(type) {
					return type.__ks_func_toReference_0(references, indexDelta, mode, module);
				});
				return d;
			})();
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_flagExported_0(explicitly) {
			if(this._exported) {
				return this;
			}
			else {
				this._exported = true;
			}
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				type.__ks_func_flagExported_0(explicitly);
			}
			return this;
		}
		getMainType() {
			return this.__ks_func_getMainType_rt.call(null, this, this, arguments);
		}
		__ks_func_getMainType_0() {
			return this._types[0];
		}
		__ks_func_getMainType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getMainType_0.call(that);
			}
			if(super.__ks_func_getMainType_rt) {
				return super.__ks_func_getMainType_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isExclusion_0() {
			return true;
		}
		__ks_func_isExportable_0() {
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(!(type.__ks_func_isExportable_0() === true)) {
					return false;
				}
			}
			return true;
		}
		__ks_func_isSubsetOf_0(value, mode) {
			console.error(value);
			NotImplementedException.__ks_sttc_throw_0([]);
		}
		length() {
			return this.__ks_func_length_rt.call(null, this, this, arguments);
		}
		__ks_func_length_4() {
			return this._types.length;
		}
		__ks_func_length_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_length_4.call(that);
			}
			if(super.__ks_func_length_rt) {
				return super.__ks_func_length_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_matchContentOf_0(value) {
			if(value === void 0) {
				value = null;
			}
			if(!this._types[0].__ks_func_matchContentOf_0(value)) {
				return false;
			}
			for(let __ks_0 = 1, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.__ks_func_matchContentOf_0(value)) {
					return false;
				}
			}
			return true;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			throw new NotImplementedException(node);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			return KSHelper.mapArray(this._types, function(type) {
				return type.__ks_func_toQuote_0();
			}).join("^");
		}
		__ks_func_toReference_0(references, indexDelta, mode, module) {
			return this.__ks_func_export_0(references, indexDelta, mode, module);
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			if(junction === Junction.OR) {
				fragments.code("(");
			}
			if(this._types[0].__ks_func_isAny_0() === true) {
				this._types[1].__ks_func_toNegativeTestFragments_0(fragments, node, Junction.AND);
				for(let __ks_0 = 2, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = this._types[__ks_0];
					fragments.code(" && ");
					type.__ks_func_toNegativeTestFragments_0(fragments, node, Junction.AND);
				}
			}
			else {
				this._types[0].__ks_func_toPositiveTestFragments_0(fragments, node, Junction.AND);
				for(let __ks_0 = 1, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = this._types[__ks_0];
					fragments.code(" && ");
					type.__ks_func_toNegativeTestFragments_0(fragments, node, Junction.AND);
				}
			}
			if(junction === Junction.OR) {
				fragments.code(")");
			}
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toTestFunctionFragments_1(fragments, node, junction) {
			if(junction.valueOf() === Junction.OR.value) {
				fragments.code("(");
			}
			if(this._types[0].__ks_func_isAny_0() === true) {
				this._types[1].toTestFunctionFragments(fragments.code("!"), node, Junction.AND);
				for(let __ks_0 = 2, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = this._types[__ks_0];
					fragments.code(" && ");
					type.toTestFunctionFragments(fragments.code("!"), node, Junction.AND);
				}
			}
			else {
				this._types[0].__ks_func_toTestFunctionFragments_1(fragments, node, Junction.AND);
				for(let __ks_0 = 1, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = this._types[__ks_0];
					fragments.code(" && ");
					type.toTestFunctionFragments(fragments.code("!"), node, Junction.AND);
				}
			}
			if(junction.valueOf() === Junction.OR.value) {
				fragments.code(")");
			}
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("exclusion");
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		types() {
			return this.__ks_func_types_rt.call(null, this, this, arguments);
		}
		__ks_func_types_0() {
			return this._types;
		}
		__ks_func_types_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_types_0.call(that);
			}
			if(super.__ks_func_types_rt) {
				return super.__ks_func_types_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_fromMetadata_1(data, metadata, references, alterations, queue, scope, node) {
			const type = ExclusionType.__ks_new_0(scope, KSHelper.mapArray(data.types, function(item) {
				return Type.fromMetadata(item, metadata, references, alterations, queue, scope, node);
			}));
			return type;
		}
		static fromMetadata() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = value => KSType.isClassInstance(value, Scope);
			const t3 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 7) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2]) && t0(arguments[3]) && t1(arguments[4]) && t2(arguments[5]) && t3(arguments[6])) {
					return ExclusionType.__ks_sttc_fromMetadata_1(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
				}
			}
			if(Type.fromMetadata) {
				return Type.fromMetadata.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_13(index, data, metadata, references, alterations, queue, scope, node) {
			const type = ExclusionType.__ks_new_0(scope);
			queue.push((() => {
				const __ks_rt = (...args) => {
					if(args.length === 0) {
						return __ks_rt.__ks_0.call(this);
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = () => {
					for(let __ks_0 = 0, __ks_1 = data.types.length, item; __ks_0 < __ks_1; ++__ks_0) {
						item = data.types[__ks_0];
						type.addType(Type.fromMetadata(item, metadata, references, alterations, queue, scope, node));
					}
				};
				return __ks_rt;
			})());
			return type;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = value => KSType.isClassInstance(value, Scope);
			const t3 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 8) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t1(arguments[3]) && t0(arguments[4]) && t1(arguments[5]) && t2(arguments[6]) && t3(arguments[7])) {
					return ExclusionType.__ks_sttc_import_13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(Type.import) {
				return Type.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class FusionType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(FusionType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._nullable = false;
		}
		__ks_cons_0(scope, types) {
			if(scope === void 0) {
				scope = null;
			}
			if(types === void 0 || types === null) {
				types = [];
			}
			Type.prototype.__ks_cons_0.call(this, scope);
			this._types = types;
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.__ks_func_isNullable_0() === true) {
					this._nullable = true;
				}
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t1 = value => KSType.isArray(value, value => KSType.isClassInstance(value, Type)) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return FusionType.prototype.__ks_cons_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		addType() {
			return this.__ks_func_addType_rt.call(null, this, this, arguments);
		}
		__ks_func_addType_0(type) {
			this._types.push(type);
			if(type.__ks_func_isNullable_0() === true) {
				this._nullable = true;
			}
		}
		__ks_func_addType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addType_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_addType_rt) {
				return super.__ks_func_addType_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			throw new NotSupportedException();
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			return (() => {
				const d = new Dictionary();
				d.kind = TypeKind.Fusion;
				d.types = KSHelper.mapArray(this._types, function(type) {
					return type.__ks_func_toExportOrReference_0(references, indexDelta, mode, module);
				});
				return d;
			})();
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getProperty_0(name) {
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				let property = type.__ks_func_getProperty_0(name);
				if(KSType.isValue(property)) {
					return property;
				}
			}
			return null;
		}
		__ks_func_isArray_0() {
			if(this._types.length !== 0) {
				return this._types[0].__ks_func_isArray_0();
			}
			else {
				return false;
			}
		}
		__ks_func_isDictionary_0() {
			if(this._types.length !== 0) {
				return this._types[0].__ks_func_isDictionary_0();
			}
			else {
				return false;
			}
		}
		__ks_func_isExportable_0() {
			return true;
		}
		__ks_func_isFusion_0() {
			return true;
		}
		__ks_func_isNullable_0() {
			return this._nullable;
		}
		__ks_func_isSubsetOf_37(value, mode) {
			if(this._types.length !== value._types.length) {
				return false;
			}
			let match = 0;
			for(let __ks_0 = 0, __ks_1 = this._types.length, aType; __ks_0 < __ks_1; ++__ks_0) {
				aType = this._types[__ks_0];
				for(let __ks_2 = 0, __ks_3 = value._types.length, bType; __ks_2 < __ks_3; ++__ks_2) {
					bType = value._types[__ks_2];
					if(aType.__ks_func_isSubsetOf_0(bType, mode) === true) {
						match++;
						break;
					}
				}
			}
			return match === this._types.length;
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, FusionType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_37(value, mode);
			}
			return super.__ks_func_isSubsetOf_0(value, mode);
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, FusionType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_37.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, Type.prototype, args);
		}
		parameter() {
			return this.__ks_func_parameter_rt.call(null, this, this, arguments);
		}
		__ks_func_parameter_7() {
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.__ks_func_isArray_0() === true) {
					return type.parameter();
				}
			}
			return AnyType.NullableUnexplicit;
		}
		__ks_func_parameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameter_7.call(that);
			}
			if(super.__ks_func_parameter_rt) {
				return super.__ks_func_parameter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			throw new NotImplementedException(node);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toNegativeTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			if(junction === Junction.OR) {
				fragments.code("(");
			}
			for(let i = 0, __ks_0 = this._types.length, type; i < __ks_0; ++i) {
				type = this._types[i];
				if(i !== 0) {
					fragments.code(" && ");
				}
				type.__ks_func_toNegativeTestFragments_0(fragments, node, Junction.AND);
			}
			if(junction === Junction.OR) {
				fragments.code(")");
			}
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			if(junction === Junction.OR) {
				fragments.code("(");
			}
			for(let i = 0, __ks_0 = this._types.length, type; i < __ks_0; ++i) {
				type = this._types[i];
				if(i !== 0) {
					fragments.code(" && ");
				}
				type.__ks_func_toPositiveTestFragments_0(fragments, node, Junction.AND);
			}
			if(junction === Junction.OR) {
				fragments.code(")");
			}
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toTestFunctionFragments_1(fragments, node, junction) {
			if(junction.valueOf() === Junction.OR.value) {
				fragments.code("(");
			}
			for(let index = 0, __ks_0 = this._types.length, type; index < __ks_0; ++index) {
				type = this._types[index];
				if(index !== 0) {
					fragments.code(" && ");
				}
				type.__ks_func_toTestFunctionFragments_1(fragments, node, Junction.AND);
			}
			if(junction.valueOf() === Junction.OR.value) {
				fragments.code(")");
			}
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("fusion", this._nullable);
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				type.__ks_func_toVariations_0(variations);
			}
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_0() {
			if(this._types.length === 1) {
				const type = this._types[0];
				if(this._nullable === type.__ks_func_isNullable_0()) {
					return type;
				}
				else {
					return type.__ks_func_setNullable_0(this._nullable);
				}
			}
			else {
				return this;
			}
		}
		static __ks_sttc_import_14(index, data, metadata, references, alterations, queue, scope, node) {
			const fusion = FusionType.__ks_new_0(scope);
			queue.push((() => {
				const __ks_rt = (...args) => {
					if(args.length === 0) {
						return __ks_rt.__ks_0.call(this);
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = () => {
					for(let __ks_0 = 0, __ks_1 = data.types.length, type; __ks_0 < __ks_1; ++__ks_0) {
						type = data.types[__ks_0];
						fusion.__ks_func_addType_0(Type.import(type, metadata, references, alterations, queue, scope, node));
					}
				};
				return __ks_rt;
			})());
			return fusion;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 8) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2]) && t2(arguments[3]) && t2(arguments[4]) && t1(arguments[5]) && t3(arguments[6]) && t4(arguments[7])) {
					return FusionType.__ks_sttc_import_14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(Type.import) {
				return Type.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class UnionType extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(UnionType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._any = false;
			this._explicitNullity = false;
			this._nullable = false;
			this._types = [];
		}
		__ks_cons_0(scope, types, explicit) {
			if(scope === void 0) {
				scope = null;
			}
			if(types === void 0 || types === null) {
				types = [];
			}
			if(explicit === void 0 || explicit === null) {
				explicit = true;
			}
			Type.prototype.__ks_cons_0.call(this, scope);
			this._explicit = explicit;
			for(let __ks_0 = 0, __ks_1 = types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = types[__ks_0];
				if(type.isNull() === true) {
					if(!this._nullable) {
						this._types.push(Type.Null);
						this._nullable = true;
					}
					this._explicitNullity = true;
				}
				else if(this._any) {
					if(type.isNullable() === true) {
						this._nullable = true;
					}
				}
				else if(type.isAny() === true) {
					this._types = [type];
					this._any = true;
					if(type.isNullable() === true) {
						this._nullable = true;
					}
				}
				else {
					this._types.push(type);
					if(type.isNullable() === true) {
						this._nullable = true;
					}
				}
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t1 = value => KSType.isArray(value) || KSType.isNull(value);
			const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 3) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t2, pts, 1) && te(pts, 2)) {
					return UnionType.prototype.__ks_cons_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			throw KSHelper.badArgs();
		}
		addType() {
			return this.__ks_func_addType_rt.call(null, this, this, arguments);
		}
		__ks_func_addType_1(type) {
			if(this._any) {
				if(!this._nullable && (type.__ks_func_isNullable_0() === true)) {
					this._types[0] = AnyType.NullableUnexplicit;
					this._nullable = true;
				}
			}
			else if(type.__ks_func_isNull_0() === true) {
				if(!this._nullable) {
					this._types.push(Type.Null);
					this._nullable = true;
				}
				this._explicitNullity = true;
			}
			else if(type.__ks_func_isAny_0() === true) {
				this._types = [type];
				this._any = true;
				if(type.__ks_func_isNullable_0() === true) {
					this._nullable = true;
				}
			}
			else if(type.__ks_func_isUnion_0() === true) {
				for(let __ks_0 = 0, __ks_1 = type.__ks_func_discard_0().types(), __ks_2 = __ks_1.length, __ks_type_1; __ks_0 < __ks_2; ++__ks_0) {
					__ks_type_1 = __ks_1[__ks_0];
					this.addType(__ks_type_1);
				}
			}
			else {
				let notMatched = true;
				if(type.__ks_func_isNullable_0() === true) {
					for(let i = 0, __ks_0 = this._types.length, t; i < __ks_0 && notMatched; ++i) {
						t = this._types[i];
						if(t.__ks_func_matchContentOf_0(type)) {
							notMatched = false;
							if(!t.__ks_func_equals_0(type)) {
								this._types[i] = type;
								this._nullable = true;
							}
						}
					}
					if(notMatched) {
						this._types.push(type);
						this._nullable = true;
					}
				}
				else {
					for(let i = 0, __ks_0 = this._types.length, t; i < __ks_0 && notMatched; ++i) {
						t = this._types[i];
						if(type.__ks_func_matchContentOf_0(t)) {
							notMatched = false;
							if(!t.__ks_func_equals_0(type)) {
								this._types[i] = type;
							}
						}
					}
					if(notMatched) {
						this._types.push(type);
					}
				}
			}
			return this;
		}
		__ks_func_addType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addType_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_addType_rt) {
				return super.__ks_func_addType_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_canBeBoolean_0() {
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.__ks_func_canBeBoolean_0()) {
					return true;
				}
			}
			return false;
		}
		__ks_func_canBeFunction_4(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.canBeFunction(any)) {
					return true;
				}
			}
			return false;
		}
		__ks_func_canBeFunction_0(any) {
			return this.__ks_func_canBeFunction_4(any);
		}
		__ks_func_canBeFunction_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_canBeFunction_4.call(that, args[0]);
			}
			return super.__ks_func_canBeFunction_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_canBeNumber_4(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.canBeNumber(any)) {
					return true;
				}
			}
			return false;
		}
		__ks_func_canBeNumber_0(any) {
			return this.__ks_func_canBeNumber_4(any);
		}
		__ks_func_canBeNumber_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_canBeNumber_4.call(that, args[0]);
			}
			return super.__ks_func_canBeNumber_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_canBeString_4(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.canBeString(any)) {
					return true;
				}
			}
			return false;
		}
		__ks_func_canBeString_0(any) {
			return this.__ks_func_canBeString_4(any);
		}
		__ks_func_canBeString_rt(that, proto, args) {
			if(args.length <= 1) {
				return proto.__ks_func_canBeString_4.call(that, args[0]);
			}
			return super.__ks_func_canBeString_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_canBeVirtual_0(name) {
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.__ks_func_canBeVirtual_0(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_clone_1() {
			const that = UnionType.__ks_new_0(this._scope);
			that._any = this._any;
			that._explicit = this._explicit;
			that._explicitNullity = this._explicitNullity;
			that._nullable = this._nullable;
			that._types = [...this._types];
			return that;
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		compareToRef() {
			return this.__ks_func_compareToRef_rt.call(null, this, this, arguments);
		}
		__ks_func_compareToRef_12(value, equivalences = null) {
			return -1;
		}
		__ks_func_compareToRef_13(value, equivalences = null) {
			return -1;
		}
		__ks_func_compareToRef_14(value, equivalences = null) {
			return 1;
		}
		__ks_func_compareToRef_15(value, equivalences = null) {
			return 1;
		}
		__ks_func_compareToRef_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, AnyType);
			const t1 = value => KSType.isArray(value, value => KSType.isArray(value, KSType.isString)) || KSType.isNull(value);
			const t2 = value => KSType.isClassInstance(value, NullType);
			const t3 = value => KSType.isClassInstance(value, ReferenceType);
			const t4 = value => KSType.isClassInstance(value, UnionType);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0])) {
					if(KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
						return proto.__ks_func_compareToRef_12.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
					}
					throw KSHelper.badArgs();
				}
				if(t2(args[0])) {
					if(KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
						return proto.__ks_func_compareToRef_13.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
					}
					throw KSHelper.badArgs();
				}
				if(t3(args[0])) {
					if(KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
						return proto.__ks_func_compareToRef_14.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
					}
					throw KSHelper.badArgs();
				}
				if(t4(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_compareToRef_15.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_compareToRef_rt) {
				return super.__ks_func_compareToRef_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			if(this._explicitNullity) {
				return (() => {
					const d = new Dictionary();
					d.kind = TypeKind.Union;
					d.nullable = this._nullable;
					d.types = KSHelper.mapArray(this._types, function(type) {
						return type.__ks_func_toReference_0(references, indexDelta, mode, module);
					});
					return d;
				})();
			}
			else {
				return (() => {
					const d = new Dictionary();
					d.kind = TypeKind.Union;
					d.types = KSHelper.mapArray(this._types, function(type) {
						return type.__ks_func_toReference_0(references, indexDelta, mode, module);
					});
					return d;
				})();
			}
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_flagExported_0(explicitly) {
			if(this._exported) {
				return this;
			}
			else {
				this._exported = true;
			}
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				type.__ks_func_flagExported_0(explicitly);
			}
			return this;
		}
		__ks_func_getProperty_0(name) {
			const types = [];
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				let __ks_2;
				let property = KSType.isValue(__ks_2 = type.__ks_func_getProperty_0(name)) ? __ks_2 : Type.Any;
				if(KSType.isClassInstance(property, StructFieldType)) {
					property = property.__ks_func_discardVariable_0();
				}
				if(!(types.some((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (t, __ks_0, __ks_1) => {
						return property.matchContentOf(t);
					};
					return __ks_rt;
				})()) === true)) {
					types.push(property);
				}
			}
			if(types.length === 1) {
				return types[0];
			}
			else {
				return Type.union(this._scope, ...types);
			}
		}
		__ks_func_hashCode_0() {
			const elements = KSHelper.mapArray(this._types, function(type) {
				return type.__ks_func_hashCode_0();
			});
			return elements.join("|");
		}
		__ks_func_isArray_0() {
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(!(type.__ks_func_isArray_0() === true)) {
					return false;
				}
			}
			return true;
		}
		__ks_func_isAssignableToVariable_2(value, anycast, nullcast, downcast, limited) {
			if(limited === void 0 || limited === null) {
				limited = false;
			}
			if(value.__ks_func_isAny_0() === true) {
				if(this.__ks_func_isNullable_0() === true) {
					return nullcast || limited || (value.__ks_func_isNullable_0() === true);
				}
				else {
					return true;
				}
			}
			else if(limited) {
				for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = this._types[__ks_0];
					if(type.__ks_func_isAssignableToVariable_2(value, anycast, nullcast, downcast)) {
						return true;
					}
				}
				return false;
			}
			else {
				for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = this._types[__ks_0];
					if(!type.__ks_func_isAssignableToVariable_2(value, anycast, nullcast, downcast)) {
						return false;
					}
				}
				return true;
			}
		}
		__ks_func_isDictionary_0() {
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(!(type.__ks_func_isDictionary_0() === true)) {
					return false;
				}
			}
			return true;
		}
		__ks_func_isExplicit_0() {
			return this._explicit;
		}
		__ks_func_isExportable_0() {
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(!(type.__ks_func_isExportable_0() === true)) {
					return false;
				}
			}
			return true;
		}
		isInstanceOf() {
			return this.__ks_func_isInstanceOf_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstanceOf_9(target) {
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.isInstanceOf(target) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isInstanceOf_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInstanceOf_9.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInstanceOf_rt) {
				return super.__ks_func_isInstanceOf_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isMatchingParameter() {
			return this.__ks_func_isMatchingParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_isMatchingParameter_0(value) {
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.isMatchingParameter(value) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isMatchingParameter_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isMatchingParameter_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isMatchingParameter_rt) {
				return super.__ks_func_isMatchingParameter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isMorePreciseThan_0(value) {
			if(value.__ks_func_isAny_0() === true) {
				return true;
			}
			if(KSType.isClassInstance(value, ReferenceType)) {
				if(!this._nullable && (value.__ks_func_isNullable_0() === true)) {
					return true;
				}
				value = value.__ks_func_discardAlias_0();
			}
			if(KSType.isClassInstance(value, UnionType)) {
				if(!this._nullable && (value.__ks_func_isNullable_0() === true)) {
					return true;
				}
				return KSOperator.lt(this._types.length, value.__ks_func_types_1().length);
			}
			return false;
		}
		__ks_func_isNullable_0() {
			return this._nullable;
		}
		__ks_func_isReducible_0() {
			return true;
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(((mode & MatchingMode.Exact) !== 0n) && ((mode & MatchingMode.Subclass) === 0n)) {
				if(!KSType.isClassInstance(value, UnionType) || (this._types.length !== value.__ks_func_length_5())) {
					return false;
				}
				let match = 0;
				for(let __ks_0 = 0, __ks_1 = this._types.length, aType; __ks_0 < __ks_1; ++__ks_0) {
					aType = this._types[__ks_0];
					for(let __ks_2 = 0, __ks_3 = value.__ks_func_types_1(), __ks_4 = __ks_3.length, bType; __ks_2 < __ks_4; ++__ks_2) {
						bType = __ks_3[__ks_2];
						if(aType.isSubsetOf(bType, mode) === true) {
							match++;
							break;
						}
					}
				}
				return match === this._types.length;
			}
			else {
				for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = this._types[__ks_0];
					if(!(type.__ks_func_isSubsetOf_0(value, mode) === true)) {
						return false;
					}
				}
				return true;
			}
		}
		__ks_func_isUnion_0() {
			return true;
		}
		length() {
			return this.__ks_func_length_rt.call(null, this, this, arguments);
		}
		__ks_func_length_5() {
			return this._types.length;
		}
		__ks_func_length_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_length_5.call(that);
			}
			if(super.__ks_func_length_rt) {
				return super.__ks_func_length_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_matchContentOf_11(value) {
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(!type.__ks_func_matchContentOf_0(value)) {
					return false;
				}
			}
			return true;
		}
		__ks_func_matchContentOf_0(value) {
			if(KSType.isClassInstance(value, Type)) {
				return this.__ks_func_matchContentOf_11(value);
			}
			return super.__ks_func_matchContentOf_0(value);
		}
		__ks_func_matchContentOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_matchContentOf_11.call(that, args[0]);
				}
			}
			return super.__ks_func_matchContentOf_rt.call(null, that, Type.prototype, args);
		}
		parameter() {
			return this.__ks_func_parameter_rt.call(null, this, this, arguments);
		}
		__ks_func_parameter_8() {
			const types = KSHelper.mapArray(this._types, function(type) {
				return type.parameter();
			});
			return Type.union(this._scope, ...types);
		}
		__ks_func_parameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameter_8.call(that);
			}
			if(super.__ks_func_parameter_rt) {
				return super.__ks_func_parameter_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_reduce_0(type) {
			const types = KSHelper.mapArray(this._types, function(t) {
				return t;
			}, function(t) {
				return !t.__ks_func_matchContentOf_0(type);
			});
			if(types.length === 1) {
				return types[0];
			}
			else {
				return Type.union(this._scope, ...types);
			}
		}
		__ks_func_setNullable_0(nullable) {
			if(this._nullable === nullable) {
				return this;
			}
			else if(nullable) {
				return this.__ks_func_clone_1().addType(Type.Null);
			}
			else if(this._explicitNullity) {
				const that = this.__ks_func_clone_1();
				__ks_Array.__ks_func_remove_0.call(KSHelper.cast(that._types, "Array", false, null, "Array"), [Type.Null]);
				that._nullable = false;
				that._explicitNullity = false;
				return that;
			}
			else {
				NotImplementedException.__ks_sttc_throw_0([]);
			}
		}
		__ks_func_sort_0() {
			__ks_Array.__ks_func_sort_0.call(this._types, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (a, b) => {
					const index = a.compareToRef(b);
					if(index === 0) {
						return a.hashCode().localeCompare(b.hashCode());
					}
					else {
						return index;
					}
				};
				return __ks_rt;
			})());
			return this;
		}
		__ks_func_split_0(types) {
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				type.__ks_func_split_0(types);
			}
			return types;
		}
		toCastFragments() {
			return this.__ks_func_toCastFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toCastFragments_3(fragments) {
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				type.toCastFragments(fragments);
			}
		}
		__ks_func_toCastFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toCastFragments_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_toCastFragments_rt) {
				return super.__ks_func_toCastFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			throw new NotImplementedException(node);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			return KSHelper.mapArray(this._types, function(type) {
				return type.__ks_func_toQuote_0();
			}).join("|");
		}
		__ks_func_toQuote_1(__ks_double_1) {
			const elements = KSHelper.mapArray(this._types, function(type) {
				return type.__ks_func_toQuote_0();
			});
			let last = null;
			if(this._explicitNullity) {
				last = "Null";
			}
			else {
				last = elements.pop();
			}
			if(__ks_double_1) {
				return KSHelper.concatString("\"", elements.join("\", \""), "\" or \"", last, "\"");
			}
			else {
				return KSHelper.concatString("'", elements.join("', '"), "' or '", last, "'");
			}
		}
		__ks_func_toReference_0(references, indexDelta, mode, module) {
			return this.__ks_func_export_0(references, indexDelta, mode, module);
		}
		__ks_func_toNegativeTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			if(junction === Junction.OR) {
				fragments.code("(");
			}
			for(let i = 0, __ks_0 = this._types.length, type; i < __ks_0; ++i) {
				type = this._types[i];
				if(i !== 0) {
					fragments.code(" && ");
				}
				type.__ks_func_toNegativeTestFragments_0(fragments, node, Junction.AND);
			}
			if(junction === Junction.OR) {
				fragments.code(")");
			}
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			if(junction === Junction.AND) {
				fragments.code("(");
			}
			for(let i = 0, __ks_0 = this._types.length, type; i < __ks_0; ++i) {
				type = this._types[i];
				if(i !== 0) {
					fragments.code(" || ");
				}
				type.__ks_func_toPositiveTestFragments_0(fragments, node, Junction.OR);
			}
			if(junction === Junction.AND) {
				fragments.code(")");
			}
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toRouteTestFragments_0(fragments, node, junction) {
			if(junction === Junction.AND) {
				fragments.code("(");
			}
			for(let i = 0, __ks_0 = this._types.length, type; i < __ks_0; ++i) {
				type = this._types[i];
				if(i !== 0) {
					fragments.code(" || ");
				}
				type.__ks_func_toRouteTestFragments_0(fragments, node, Junction.OR);
			}
			if(junction === Junction.AND) {
				fragments.code(")");
			}
		}
		__ks_func_toTestFunctionFragments_1(fragments, node, junction) {
			if(junction.valueOf() === Junction.AND.value) {
				fragments.code("(");
			}
			for(let index = 0, __ks_0 = this._types.length, type; index < __ks_0; ++index) {
				type = this._types[index];
				if(index !== 0) {
					fragments.code(" || ");
				}
				type.__ks_func_toTestFunctionFragments_1(fragments, node, Junction.OR);
			}
			if(junction.valueOf() === Junction.AND.value) {
				fragments.code(")");
			}
		}
		__ks_func_toTestType_0() {
			const types = [];
			for(let __ks_0 = 0, __ks_1 = this._types.length, t1; __ks_0 < __ks_1; ++__ks_0) {
				t1 = this._types[__ks_0];
				if(t1.__ks_func_isInstance_0() === true) {
					let add = true;
					for(let __ks_2 = 0, __ks_3 = this._types.length, t2; __ks_2 < __ks_3 && add; ++__ks_2) {
						t2 = this._types[__ks_2];
						if(t2 !== t1) {
							if(t1.isInheriting(t2) === true) {
								add = false;
							}
						}
					}
					if(add) {
						types.push(t1);
					}
				}
				else {
					types.push(t1);
				}
			}
			if(types.length === 1) {
				const type = this._types[0];
				if(this._nullable === type.__ks_func_isNullable_0()) {
					return type;
				}
				else {
					return type.__ks_func_setNullable_0(this._nullable);
				}
			}
			else if(types.length !== this._types.length) {
				const clone = this.__ks_func_clone_1();
				clone._types = types;
				return clone;
			}
			return this;
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("union");
			for(let __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				type.__ks_func_toVariations_0(variations);
			}
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_0() {
			if(this._types.length === 1) {
				const type = this._types[0];
				if(this._nullable === type.__ks_func_isNullable_0()) {
					return type;
				}
				else {
					return type.__ks_func_setNullable_0(this._nullable);
				}
			}
			return this;
		}
		types() {
			return this.__ks_func_types_rt.call(null, this, this, arguments);
		}
		__ks_func_types_1() {
			return this._types;
		}
		__ks_func_types_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_types_1.call(that);
			}
			if(super.__ks_func_types_rt) {
				return super.__ks_func_types_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_15(index, data, metadata, references, alterations, queue, scope, node) {
			const type = UnionType.__ks_new_0(scope);
			if(KSType.isValue(data.nullable)) {
				type._nullable = data.nullable;
				type._explicitNullity = true;
			}
			queue.push((() => {
				const __ks_rt = (...args) => {
					if(args.length === 0) {
						return __ks_rt.__ks_0.call(this);
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = () => {
					for(let __ks_0 = 0, __ks_1 = data.types.length, item; __ks_0 < __ks_1; ++__ks_0) {
						item = data.types[__ks_0];
						type.__ks_func_addType_1(Type.import(item, metadata, references, alterations, queue, scope, node));
					}
				};
				return __ks_rt;
			})());
			return type;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			const t2 = KSType.isDictionary;
			const t3 = value => KSType.isClassInstance(value, Scope);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 8) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2]) && t2(arguments[3]) && t2(arguments[4]) && t1(arguments[5]) && t3(arguments[6]) && t4(arguments[7])) {
					return UnionType.__ks_sttc_import_15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(Type.import) {
				return Type.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class VoidType extends Type {
		static __ks_new_0() {
			const o = Object.create(VoidType.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		__ks_cons_0() {
			Type.prototype.__ks_cons_0.call(this, null);
		}
		__ks_cons_rt(that, args) {
			if(args.length === 0) {
				return VoidType.prototype.__ks_cons_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			throw new NotSupportedException();
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			return "Void";
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_hashCode_0() {
			return "Void";
		}
		__ks_func_isExportable_0() {
			return true;
		}
		__ks_func_isSubsetOf_38(value, mode) {
			return true;
		}
		__ks_func_isSubsetOf_0(value, mode) {
			if(KSType.isClassInstance(value, VoidType) && KSType.isEnumInstance(mode, MatchingMode)) {
				return this.__ks_func_isSubsetOf_38(value, mode);
			}
			return super.__ks_func_isSubsetOf_0(value, mode);
		}
		__ks_func_isSubsetOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, VoidType);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_isSubsetOf_38.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_isSubsetOf_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_isVoid_0() {
			return true;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			fragments.code("Void");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			return "Void";
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			throw new NotSupportedException(node);
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			variations.push("void");
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	Type.Any = AnyType.Unexplicit;
	Type.Never = NeverType.__ks_new_0();
	Type.Null = NullType.Unexplicit;
	Type.Void = VoidType.__ks_new_0();
	class Variable {
		static __ks_new_0() {
			const o = Object.create(Variable.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(Variable.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
			this._altereable = false;
			this._class = false;
			this._complete = false;
			this._declaration = null;
			this._declaredType = AnyType.NullableUnexplicit;
			this._definitive = false;
			this._immutable = true;
			this._initialized = false;
			this._module = false;
			this._new = true;
			this._lateInit = false;
			this._predefined = false;
			this._realType = Type.Null;
		}
		__ks_cons_0() {
		}
		__ks_cons_1(name, immutable, predefined, declaredType = null, initialized) {
			if(initialized === void 0 || initialized === null) {
				initialized = false;
			}
			this._name = name;
			this._immutable = immutable;
			this._predefined = predefined;
			if(declaredType === null) {
				if(initialized) {
					this._realType = this._declaredType;
				}
			}
			else {
				this._declaredType = Type.__ks_sttc_toNamedType_0(this._name, declaredType);
				if(this._predefined || initialized || !(declaredType.__ks_func_isReference_0() === true)) {
					this._realType = this._declaredType;
				}
			}
			this._definitive = this._immutable;
			this._secureName = this._name;
			this._module = this._predefined;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isBoolean;
			const t2 = value => KSType.isClassInstance(value, Type) || KSType.isNull(value);
			const t3 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 0) {
				return Variable.prototype.__ks_cons_0.call(that);
			}
			if(args.length >= 3 && args.length <= 5) {
				if(t0(args[0]) && t1(args[1]) && t1(args[2]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [3], 0) && KSHelper.isVarargs(args, 0, 1, t3, pts, 1) && te(pts, 2)) {
					return Variable.prototype.__ks_cons_1.call(that, args[0], args[1], args[2], KSHelper.getVararg(args, 3, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			throw KSHelper.badArgs();
		}
		clone() {
			return this.__ks_func_clone_rt.call(null, this, this, arguments);
		}
		__ks_func_clone_0() {
			const clone = Variable.__ks_new_0();
			clone._name = this._name;
			clone._secureName = this._secureName;
			clone._immutable = this._immutable;
			clone._predefined = this._predefined;
			clone._declaredType = this._declaredType;
			clone._realType = this._realType;
			clone._definitive = this._definitive;
			clone._initialized = this._initialized;
			clone._lateInit = this._lateInit;
			return clone;
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		declaration() {
			return this.__ks_func_declaration_rt.call(null, this, this, arguments);
		}
		__ks_func_declaration_0() {
			return this._declaration;
		}
		__ks_func_declaration_1(declaration) {
			if(declaration === void 0) {
				declaration = null;
			}
			this._declaration = declaration;
			return this;
		}
		__ks_func_declaration_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Statement) || KSType.isNull(value);
			if(args.length === 0) {
				return proto.__ks_func_declaration_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_declaration_1.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		flagClassStatement() {
			return this.__ks_func_flagClassStatement_rt.call(null, this, this, arguments);
		}
		__ks_func_flagClassStatement_0() {
			this._class = true;
			return this;
		}
		__ks_func_flagClassStatement_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagClassStatement_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		flagDefinitive() {
			return this.__ks_func_flagDefinitive_rt.call(null, this, this, arguments);
		}
		__ks_func_flagDefinitive_0() {
			this._definitive = true;
			return this;
		}
		__ks_func_flagDefinitive_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagDefinitive_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		flagLateInit() {
			return this.__ks_func_flagLateInit_rt.call(null, this, this, arguments);
		}
		__ks_func_flagLateInit_0() {
			this._lateInit = true;
			this._initialized = false;
			this._definitive = false;
			return this;
		}
		__ks_func_flagLateInit_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagLateInit_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		flagModule() {
			return this.__ks_func_flagModule_rt.call(null, this, this, arguments);
		}
		__ks_func_flagModule_0() {
			this._module = true;
			return this;
		}
		__ks_func_flagModule_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagModule_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		getDeclaredType() {
			return this.__ks_func_getDeclaredType_rt.call(null, this, this, arguments);
		}
		__ks_func_getDeclaredType_0() {
			return this._declaredType;
		}
		__ks_func_getDeclaredType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getDeclaredType_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		getRealType() {
			return this.__ks_func_getRealType_rt.call(null, this, this, arguments);
		}
		__ks_func_getRealType_0() {
			return this._realType;
		}
		__ks_func_getRealType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getRealType_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		getSecureName() {
			return this.__ks_func_getSecureName_rt.call(null, this, this, arguments);
		}
		__ks_func_getSecureName_0() {
			return this._secureName;
		}
		__ks_func_getSecureName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getSecureName_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isAltereable() {
			return this.__ks_func_isAltereable_rt.call(null, this, this, arguments);
		}
		__ks_func_isAltereable_0() {
			return this._altereable;
		}
		__ks_func_isAltereable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAltereable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isClassStatement() {
			return this.__ks_func_isClassStatement_rt.call(null, this, this, arguments);
		}
		__ks_func_isClassStatement_0() {
			return this._class;
		}
		__ks_func_isClassStatement_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isClassStatement_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isComplete() {
			return this.__ks_func_isComplete_rt.call(null, this, this, arguments);
		}
		__ks_func_isComplete_0() {
			return this._complete;
		}
		__ks_func_isComplete_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isComplete_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isDefinitive() {
			return this.__ks_func_isDefinitive_rt.call(null, this, this, arguments);
		}
		__ks_func_isDefinitive_0() {
			return this._definitive;
		}
		__ks_func_isDefinitive_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isDefinitive_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isImmutable() {
			return this.__ks_func_isImmutable_rt.call(null, this, this, arguments);
		}
		__ks_func_isImmutable_0() {
			return this._immutable;
		}
		__ks_func_isImmutable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isImmutable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isInitialized() {
			return this.__ks_func_isInitialized_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitialized_0() {
			return this._initialized;
		}
		__ks_func_isInitialized_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInitialized_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isLateInit() {
			return this.__ks_func_isLateInit_rt.call(null, this, this, arguments);
		}
		__ks_func_isLateInit_0() {
			return this._lateInit;
		}
		__ks_func_isLateInit_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isLateInit_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isModule() {
			return this.__ks_func_isModule_rt.call(null, this, this, arguments);
		}
		__ks_func_isModule_0() {
			return this._module;
		}
		__ks_func_isModule_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isModule_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isPredefined() {
			return this.__ks_func_isPredefined_rt.call(null, this, this, arguments);
		}
		__ks_func_isPredefined_0() {
			return this._predefined;
		}
		__ks_func_isPredefined_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isPredefined_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isRenamed() {
			return this.__ks_func_isRenamed_rt.call(null, this, this, arguments);
		}
		__ks_func_isRenamed_0() {
			return this._name !== this._secureName;
		}
		__ks_func_isRenamed_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRenamed_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_0() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		prepareAlteration() {
			return this.__ks_func_prepareAlteration_rt.call(null, this, this, arguments);
		}
		__ks_func_prepareAlteration_0() {
			if(((this._declaredType.__ks_func_isRequired_0() === true) || (this._declaredType.__ks_func_isAlien_0() === true)) && !this._altereable) {
				this._declaredType = this._declaredType.__ks_func_clone_1();
				this._realType = this._declaredType;
				this._altereable = true;
			}
		}
		__ks_func_prepareAlteration_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepareAlteration_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		renameAs() {
			return this.__ks_func_renameAs_rt.call(null, this, this, arguments);
		}
		__ks_func_renameAs_0(secureName) {
			this._secureName = secureName;
		}
		__ks_func_renameAs_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_renameAs_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		setComplete() {
			return this.__ks_func_setComplete_rt.call(null, this, this, arguments);
		}
		__ks_func_setComplete_0(complete) {
			this._complete = complete;
			return this;
		}
		__ks_func_setComplete_rt(that, proto, args) {
			const t0 = KSType.isBoolean;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setComplete_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		setDeclaredType() {
			return this.__ks_func_setDeclaredType_rt.call(null, this, this, arguments);
		}
		__ks_func_setDeclaredType_0(declaredType, initialize) {
			if(initialize === void 0 || initialize === null) {
				initialize = true;
			}
			this._declaredType = Type.__ks_sttc_toNamedType_0(this._name, declaredType);
			if(initialize) {
				this._initialized = true;
				this._realType = this._declaredType;
			}
			return this;
		}
		__ks_func_setDeclaredType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_setDeclaredType_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		setDefinitive() {
			return this.__ks_func_setDefinitive_rt.call(null, this, this, arguments);
		}
		__ks_func_setDefinitive_0(definitive) {
			this._definitive = definitive;
			return this;
		}
		__ks_func_setDefinitive_rt(that, proto, args) {
			const t0 = KSType.isBoolean;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setDefinitive_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		setRealType() {
			return this.__ks_func_setRealType_rt.call(null, this, this, arguments);
		}
		__ks_func_setRealType_0(type) {
			this._initialized = true;
			if(type.__ks_func_isMorePreciseThan_0(this._declaredType)) {
				this._realType = type;
			}
			else {
				this._realType = this._declaredType;
			}
			return this;
		}
		__ks_func_setRealType_1(type, absolute, scope) {
			if(absolute) {
				this._initialized = true;
				if(type.__ks_func_isMorePreciseThan_0(this._declaredType)) {
					this._realType = type;
				}
				else {
					this._realType = this._declaredType;
				}
			}
			else {
				if(this._realType.__ks_func_isNull_0() === true) {
					this._realType = type.__ks_func_setNullable_0(true);
				}
				else if(this._realType.__ks_func_isMorePreciseThan_0(type)) {
					this._realType = Type.__ks_sttc_union_0(scope, [type, this._realType]);
				}
				else {
					this._realType = this._declaredType;
				}
			}
			return this;
		}
		__ks_func_setRealType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = KSType.isBoolean;
			const t2 = value => KSType.isClassInstance(value, Scope);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setRealType_0.call(that, args[0]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_setRealType_1.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode) {
			fragments.code(this._secureName);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_createPredefinedClass_0(name, scope) {
			let type = new ClassType(scope);
			type.__ks_func_flagAlien_0();
			type.__ks_func_flagPredefined_0();
			type.__ks_func_flagSystemic_0();
			return new Variable(name, true, true, type);
		}
		static createPredefinedClass() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return Variable.__ks_sttc_createPredefinedClass_0(arguments[0], arguments[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_fromAST_0(data, scope) {
			let __ks_0 = data.kind.valueOf();
			if(__ks_0 === NodeKind.Identifier.value) {
				return scope.getVariable(data.name);
			}
			else {
				console.error(data);
				throw new NotImplementedException();
			}
		}
		static fromAST() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return Variable.__ks_sttc_fromAST_0(arguments[0], arguments[1]);
				}
			}
			throw KSHelper.badArgs();
		}
	}
	const $keywords = (() => {
		const d = new Dictionary();
		d.abstract = true;
		d.arguments = true;
		d.boolean = true;
		d.break = true;
		d.byte = true;
		d.case = true;
		d.catch = true;
		d.char = true;
		d.class = true;
		d.const = true;
		d.constructor = true;
		d.continue = true;
		d.debugger = true;
		d.default = true;
		d.delete = true;
		d.destructor = true;
		d.do = true;
		d.double = true;
		d.else = true;
		d.enum = true;
		d.export = true;
		d.extends = true;
		d.false = true;
		d.finally = true;
		d.float = true;
		d.for = true;
		d.function = true;
		d.goto = true;
		d.if = true;
		d.implements = true;
		d.import = true;
		d.in = true;
		d.instanceof = true;
		d.int = true;
		d.interface = true;
		d.long = true;
		d.namespace = true;
		d.native = true;
		d.never = true;
		d.new = true;
		d.null = true;
		d.override = true;
		d.overwrite = true;
		d.package = true;
		d.private = true;
		d.protected = true;
		d.public = true;
		d.return = true;
		d.sealed = true;
		d.short = true;
		d.static = true;
		d.struct = true;
		d.super = true;
		d.switch = true;
		d.synchronized = true;
		d.this = true;
		d.throw = true;
		d.throws = true;
		d.transient = true;
		d.true = true;
		d.try = true;
		d.tuple = true;
		d.typeof = true;
		d.var = true;
		d.void = true;
		d.volatile = true;
		d.while = true;
		d.with = true;
		return d;
	})();
	const ScopeType = KSHelper.enum(Number, {
		Bleeding: 0,
		Block: 1,
		Function: 2,
		Hollow: 3,
		InlineBlock: 4,
		Macro: 5,
		Operation: 6
	});
	class Scope {
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
		}
		__ks_cons_rt(that, args) {
			if(args.length !== 0) {
				throw KSHelper.badArgs();
			}
		}
		getLineOffset() {
			return this.__ks_func_getLineOffset_rt.call(null, this, this, arguments);
		}
		__ks_func_getLineOffset_0() {
			return 0;
		}
		__ks_func_getLineOffset_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getLineOffset_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		hasBleedingVariable() {
			return this.__ks_func_hasBleedingVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasBleedingVariable_0(name) {
			return this.__ks_func_hasDefinedVariable_0(name);
		}
		__ks_func_hasBleedingVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasBleedingVariable_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		hasMacro() {
			return this.__ks_func_hasMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_hasMacro_0(name) {
			return false;
		}
		__ks_func_hasMacro_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasMacro_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		isBleeding() {
			return this.__ks_func_isBleeding_rt.call(null, this, this, arguments);
		}
		__ks_func_isBleeding_0() {
			return false;
		}
		__ks_func_isBleeding_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isBleeding_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isInline() {
			return this.__ks_func_isInline_rt.call(null, this, this, arguments);
		}
		__ks_func_isInline_0() {
			return false;
		}
		__ks_func_isInline_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInline_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isPredefinedVariable() {
			return this.__ks_func_isPredefinedVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isPredefinedVariable_0(name) {
			let variable, __ks_0;
			return (KSType.isValue(__ks_0 = this.__ks_func_getVariable_0(name)) ? (variable = __ks_0, true) : false) && (variable.__ks_func_isPredefined_0() === true);
		}
		__ks_func_isPredefinedVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isPredefinedVariable_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		isRenamed() {
			return this.__ks_func_isRenamed_rt.call(null, this, this, arguments);
		}
		__ks_func_isRenamed_0(name, newName, scope, mode) {
			return name === newName;
		}
		__ks_func_isRenamed_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Scope);
			const t2 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3])) {
					return proto.__ks_func_isRenamed_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		line() {
			return this.__ks_func_line_rt.call(null, this, this, arguments);
		}
		__ks_func_line_0() {
			return 0;
		}
		__ks_func_line_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_line_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		parent() {
			return this.__ks_func_parent_rt.call(null, this, this, arguments);
		}
		__ks_func_parent_0() {
			return null;
		}
		__ks_func_parent_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parent_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_isTempName_0(name) {
			return KSOperator.gt(name.length, 5) && (name.substr(0, 5) === "__ks_");
		}
		static isTempName() {
			const t0 = KSType.isString;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return Scope.__ks_sttc_isTempName_0(arguments[0]);
				}
			}
			throw KSHelper.badArgs();
		}
	}
	const VariableBrief = KSHelper.struct(function(name, type, variable, immutable, lateInit, instance, __ks_static_1, __ks_class_1 = null) {
		if(variable === void 0 || variable === null) {
			variable = false;
		}
		if(immutable === void 0 || immutable === null) {
			immutable = false;
		}
		if(lateInit === void 0 || lateInit === null) {
			lateInit = false;
		}
		if(instance === void 0 || instance === null) {
			instance = false;
		}
		if(__ks_static_1 === void 0 || __ks_static_1 === null) {
			__ks_static_1 = false;
		}
		const _ = new Dictionary();
		_.name = name;
		_.type = type;
		_.variable = variable;
		_.immutable = immutable;
		_.lateInit = lateInit;
		_.instance = instance;
		_.static = __ks_static_1;
		_.class = __ks_class_1;
		return _;
	}, function(__ks_new, args) {
		const t0 = KSType.isString;
		const t1 = value => KSType.isClassInstance(value, Type);
		const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
		const t3 = value => KSType.isString(value) || KSType.isNull(value);
		const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
		let pts;
		if(args.length >= 2 && args.length <= 8) {
			if(t0(args[0]) && t1(args[1]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && KSHelper.isVarargs(args, 0, 1, t2, pts, 1) && KSHelper.isVarargs(args, 0, 1, t2, pts, 2) && KSHelper.isVarargs(args, 0, 1, t2, pts, 3) && KSHelper.isVarargs(args, 0, 1, t2, pts, 4) && KSHelper.isVarargs(args, 0, 1, t3, pts, 5) && te(pts, 6)) {
				return __ks_new(args[0], args[1], KSHelper.getVararg(args, 2, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]), KSHelper.getVararg(args, pts[5], pts[6]));
			}
		}
		throw KSHelper.badArgs();
	});
	class BleedingScope extends Scope {
		static __ks_new_0(...args) {
			const o = Object.create(BleedingScope.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._renamedIndexes = new Dictionary();
			this._renamedVariables = new Dictionary();
			this._variables = new Dictionary();
		}
		__ks_cons_0(parent) {
			this._parent = parent;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope);
			if(args.length === 1) {
				if(t0(args[0])) {
					return BleedingScope.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		acquireTempName() {
			return this.__ks_func_acquireTempName_rt.call(null, this, this, arguments);
		}
		__ks_func_acquireTempName_0(declare) {
			if(declare === void 0 || declare === null) {
				declare = true;
			}
			return this._parent.__ks_func_acquireTempName_0(declare);
		}
		__ks_func_acquireTempName_rt(that, proto, args) {
			const t0 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 1) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
					return proto.__ks_func_acquireTempName_0.call(that, KSHelper.getVararg(args, 0, pts[1]));
				}
			}
			if(super.__ks_func_acquireTempName_rt) {
				return super.__ks_func_acquireTempName_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		acquireUnusedTempName() {
			return this.__ks_func_acquireUnusedTempName_rt.call(null, this, this, arguments);
		}
		__ks_func_acquireUnusedTempName_0() {
			return this._parent.acquireUnusedTempName();
		}
		__ks_func_acquireUnusedTempName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_acquireUnusedTempName_0.call(that);
			}
			if(super.__ks_func_acquireUnusedTempName_rt) {
				return super.__ks_func_acquireUnusedTempName_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		authority() {
			return this.__ks_func_authority_rt.call(null, this, this, arguments);
		}
		__ks_func_authority_0() {
			return this._parent.__ks_func_authority_0();
		}
		__ks_func_authority_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_authority_0.call(that);
			}
			if(super.__ks_func_authority_rt) {
				return super.__ks_func_authority_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		block() {
			return this.__ks_func_block_rt.call(null, this, this, arguments);
		}
		__ks_func_block_0() {
			return this._parent.__ks_func_block_0();
		}
		__ks_func_block_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_block_0.call(that);
			}
			if(super.__ks_func_block_rt) {
				return super.__ks_func_block_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		commitTempVariables() {
			return this.__ks_func_commitTempVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_commitTempVariables_0(variables) {
			return this._parent.commitTempVariables(variables);
		}
		__ks_func_commitTempVariables_rt(that, proto, args) {
			const t0 = KSType.isArray;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_commitTempVariables_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_commitTempVariables_rt) {
				return super.__ks_func_commitTempVariables_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		declareVariable() {
			return this.__ks_func_declareVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_declareVariable_0(name, scope) {
			return this._parent.__ks_func_declareVariable_0(name, scope);
		}
		__ks_func_declareVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Scope);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_declareVariable_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_declareVariable_rt) {
				return super.__ks_func_declareVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		define() {
			return this.__ks_func_define_rt.call(null, this, this, arguments);
		}
		__ks_func_define_0(name, immutable, type = null, initialized, node) {
			if(initialized === void 0 || initialized === null) {
				initialized = false;
			}
			if(this.__ks_func_hasDefinedVariable_0(name)) {
				SyntaxException.__ks_sttc_throwAlreadyDeclared_0(name, node);
			}
			const variable = Variable.__ks_new_1(name, immutable, false, type, initialized);
			this.__ks_func_defineVariable_0(variable, node);
			return variable;
		}
		__ks_func_define_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isBoolean;
			const t2 = value => KSType.isClassInstance(value, Type) || KSType.isNull(value);
			const t3 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 3 && args.length <= 5) {
				if(t0(args[0]) && t1(args[1]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && KSHelper.isVarargs(args, 0, 1, t3, pts, 1) && KSHelper.isVarargs(args, 1, 1, t4, pts, 2) && te(pts, 3)) {
					return proto.__ks_func_define_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
				}
			}
			if(super.__ks_func_define_rt) {
				return super.__ks_func_define_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		defineVariable() {
			return this.__ks_func_defineVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_defineVariable_0(variable, node) {
			const name = variable.__ks_func_name_0();
			if(KSType.isArray(this._variables[name])) {
				SyntaxException.throwAlreadyDeclared(name, node);
			}
			this._variables[name] = [this._parent.__ks_func_line_0(), variable];
			let newName = this._parent.declareVariable(name, this);
			if(KSType.isValue(newName)) {
				this._renamedVariables[name] = newName;
				variable.__ks_func_renameAs_0(newName);
			}
		}
		__ks_func_defineVariable_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Variable);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_defineVariable_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_defineVariable_rt) {
				return super.__ks_func_defineVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getChunkType() {
			return this.__ks_func_getChunkType_rt.call(null, this, this, arguments);
		}
		__ks_func_getChunkType_0(name, line) {
			return this._parent.getChunkType(name, line);
		}
		__ks_func_getChunkType_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_getChunkType_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getChunkType_rt) {
				return super.__ks_func_getChunkType_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getDefinedVariable() {
			return this.__ks_func_getDefinedVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_getDefinedVariable_0(name) {
			if(KSType.isArray(this._variables[name])) {
				const variables = this._variables[name];
				let variable = null;
				if(this._parent.isAtLastLine() === true) {
					variable = __ks_Array.__ks_func_last_0.call(variables);
				}
				else {
					const line = this._parent.__ks_func_line_0();
					for(let i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable === false) {
					return null;
				}
				else if(variable !== null) {
					return variable;
				}
			}
			return null;
		}
		__ks_func_getDefinedVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getDefinedVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getDefinedVariable_rt) {
				return super.__ks_func_getDefinedVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getRawLine() {
			return this.__ks_func_getRawLine_rt.call(null, this, this, arguments);
		}
		__ks_func_getRawLine_0() {
			return this._parent.getRawLine();
		}
		__ks_func_getRawLine_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getRawLine_0.call(that);
			}
			if(super.__ks_func_getRawLine_rt) {
				return super.__ks_func_getRawLine_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getRenamedIndex() {
			return this.__ks_func_getRenamedIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_getRenamedIndex_0(name) {
			return KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : this._parent.__ks_func_getRenamedIndex_0(name);
		}
		__ks_func_getRenamedIndex_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getRenamedIndex_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getRenamedIndex_rt) {
				return super.__ks_func_getRenamedIndex_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getTempIndex() {
			return this.__ks_func_getTempIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_getTempIndex_0() {
			return this._parent.getTempIndex();
		}
		__ks_func_getTempIndex_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getTempIndex_0.call(that);
			}
			if(super.__ks_func_getTempIndex_rt) {
				return super.__ks_func_getTempIndex_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getVariable() {
			return this.__ks_func_getVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_getVariable_1(name, line) {
			if(line === void 0 || line === null) {
				line = this._parent.__ks_func_line_0();
			}
			if(KSType.isArray(this._variables[name])) {
				const variables = this._variables[name];
				const currentLine = this._parent.__ks_func_line_0();
				let variable = null;
				if((line === -1) || (line > currentLine)) {
					variable = __ks_Array.__ks_func_last_0.call(variables);
				}
				else {
					for(let i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable === false) {
					return this._parent.getVariable(name, -1);
				}
				else if(variable !== null) {
					return variable;
				}
			}
			return this._parent.getVariable(name, line);
		}
		__ks_func_getVariable_0(name, line) {
			return this.__ks_func_getVariable_1(name, line);
		}
		__ks_func_getVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isNumber(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_getVariable_1.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_getVariable_rt) {
				return super.__ks_func_getVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasDeclaredVariable() {
			return this.__ks_func_hasDeclaredVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasDeclaredVariable_0(name) {
			return KSType.isArray(this._variables[name]) || this._parent.__ks_func_hasDeclaredVariable_0(name);
		}
		__ks_func_hasDeclaredVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasDeclaredVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasDeclaredVariable_rt) {
				return super.__ks_func_hasDeclaredVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasDefinedVariable() {
			return this.__ks_func_hasDefinedVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasDefinedVariable_0(name) {
			return this.__ks_func_hasDefinedVariable_1(name, this._parent.__ks_func_line_0());
		}
		__ks_func_hasDefinedVariable_1(name, line) {
			if(KSType.isArray(this._variables[name])) {
				const variables = this._variables[name];
				const currentLine = this._parent.__ks_func_line_0();
				let variable = null;
				if((line === -1) || (line > currentLine)) {
					variable = __ks_Array.__ks_func_last_0.call(variables);
				}
				else {
					for(let i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable !== null) {
					return variable !== false;
				}
			}
			return false;
		}
		__ks_func_hasDefinedVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isNumber;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasDefinedVariable_0.call(that, args[0]);
				}
			}
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_hasDefinedVariable_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_hasDefinedVariable_rt) {
				return super.__ks_func_hasDefinedVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasVariable() {
			return this.__ks_func_hasVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasVariable_0(name, line = null) {
			return KSType.isArray(this._variables[name]) || this._parent.__ks_func_hasVariable_0(name, line);
		}
		__ks_func_hasVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isNumber(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_hasVariable_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_hasVariable_rt) {
				return super.__ks_func_hasVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isBleeding_0() {
			return true;
		}
		__ks_func_isInline_0() {
			return true;
		}
		isRedeclaredVariable() {
			return this.__ks_func_isRedeclaredVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isRedeclaredVariable_0(name) {
			if(KSType.isArray(this._variables[name])) {
				return this._variables[name].length !== 2;
			}
			else {
				return false;
			}
		}
		__ks_func_isRedeclaredVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isRedeclaredVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isRedeclaredVariable_rt) {
				return super.__ks_func_isRedeclaredVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRenamedVariable() {
			return this.__ks_func_isRenamedVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isRenamedVariable_0(name) {
			if(KSType.isArray(this._variables[name])) {
				return KSType.isString(this._renamedVariables[name]);
			}
			else {
				return this._parent.isRenamedVariable(name);
			}
		}
		__ks_func_isRenamedVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isRenamedVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isRenamedVariable_rt) {
				return super.__ks_func_isRenamedVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_line_0() {
			return this._parent.__ks_func_line_0();
		}
		__ks_func_line_1(line) {
			return this._parent.line(line);
		}
		__ks_func_line_rt(that, proto, args) {
			const t0 = KSType.isNumber;
			if(args.length === 0) {
				return proto.__ks_func_line_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_line_1.call(that, args[0]);
				}
			}
			return super.__ks_func_line_rt.call(null, that, Scope.prototype, args);
		}
		module() {
			return this.__ks_func_module_rt.call(null, this, this, arguments);
		}
		__ks_func_module_0() {
			return this._parent.module();
		}
		__ks_func_module_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_module_0.call(that);
			}
			if(super.__ks_func_module_rt) {
				return super.__ks_func_module_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_parent_0() {
			return this._parent;
		}
		reference() {
			return this.__ks_func_reference_rt.call(null, this, this, arguments);
		}
		__ks_func_reference_0(value) {
			if(KSType.isString(value)) {
				return this.__ks_func_reference_1(value);
			}
			return this.__ks_func_reference_2(value);
		}
		__ks_func_reference_2(value) {
			return this._parent.__ks_func_reference_0(value);
		}
		__ks_func_reference_1(value, nullable, parameters) {
			if(nullable === void 0 || nullable === null) {
				nullable = false;
			}
			if(parameters === void 0 || parameters === null) {
				parameters = [];
			}
			return this._parent.resolveReference(value, nullable, parameters);
		}
		__ks_func_reference_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isValue;
			const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t3 = value => KSType.isArray(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_reference_1.call(that, args[0], void 0, void 0);
				}
				if(t1(args[0])) {
					return proto.__ks_func_reference_2.call(that, args[0]);
				}
			}
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t3, pts, 1) && te(pts, 2)) {
					return proto.__ks_func_reference_1.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			if(super.__ks_func_reference_rt) {
				return super.__ks_func_reference_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		releaseTempName() {
			return this.__ks_func_releaseTempName_rt.call(null, this, this, arguments);
		}
		__ks_func_releaseTempName_0(name) {
			return this._parent.releaseTempName(name);
		}
		__ks_func_releaseTempName_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_releaseTempName_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_releaseTempName_rt) {
				return super.__ks_func_releaseTempName_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		rename() {
			return this.__ks_func_rename_rt.call(null, this, this, arguments);
		}
		__ks_func_rename_0(name) {
			if(KSType.isString(this._renamedVariables[name])) {
				return;
			}
			let index = this._parent.getRenamedIndex(name);
			let newName = "__ks_" + name + "_" + ++index;
			this._renamedIndexes[name] = index;
			this._renamedVariables[name] = newName;
			const variable = this.__ks_func_getVariable_1(name);
			variable.__ks_func_renameAs_0(newName);
		}
		__ks_func_rename_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_rename_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_rename_rt) {
				return super.__ks_func_rename_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		resolveReference() {
			return this.__ks_func_resolveReference_rt.call(null, this, this, arguments);
		}
		__ks_func_resolveReference_1(name, nullable, parameters) {
			if(nullable === void 0 || nullable === null) {
				nullable = false;
			}
			if(parameters === void 0 || parameters === null) {
				parameters = [];
			}
			return this._parent.resolveReference(name, nullable, parameters);
		}
		__ks_func_resolveReference_0(name) {
			return this.__ks_func_resolveReference_1(name);
		}
		__ks_func_resolveReference_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t2 = value => KSType.isArray(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 3) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t2, pts, 1) && te(pts, 2)) {
					return proto.__ks_func_resolveReference_1.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			if(super.__ks_func_resolveReference_rt) {
				return super.__ks_func_resolveReference_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class BlockScope extends Scope {
		static __ks_new_0(...args) {
			const o = Object.create(BlockScope.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._chunkTypes = new Dictionary();
			this._declarations = new Dictionary();
			this._macros = new Dictionary();
			this._matchingTypes = new Dictionary();
			this._references = new Dictionary();
			this._renamedIndexes = new Dictionary();
			this._renamedVariables = new Dictionary();
			this._reservedIndex = -1;
			this._stashes = new Dictionary();
			this._tempDeclarations = [];
			this._tempIndex = -1;
			this._tempNames = new Dictionary();
			this._variables = new Dictionary();
		}
		__ks_cons_0(parent) {
			this._parent = parent;
			this._authority = this._parent.__ks_func_authority_0();
			this._module = this._parent.module();
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope);
			if(args.length === 1) {
				if(t0(args[0])) {
					return BlockScope.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		acquireTempName() {
			return this.__ks_func_acquireTempName_rt.call(null, this, this, arguments);
		}
		__ks_func_acquireTempName_0(declare) {
			if(declare === void 0 || declare === null) {
				declare = true;
			}
			for(const name in this._tempNames) {
				if(this._tempNames[name] === true) {
					this._tempNames[name] = false;
					return name;
				}
			}
			const name = KSHelper.concatString("__ks_", ++this._tempIndex);
			this._tempNames[name] = false;
			this._tempNames[name] = false;
			if(declare) {
				this._tempDeclarations.push(name);
			}
			return name;
		}
		__ks_func_acquireTempName_rt(that, proto, args) {
			const t0 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 1) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
					return proto.__ks_func_acquireTempName_0.call(that, KSHelper.getVararg(args, 0, pts[1]));
				}
			}
			if(super.__ks_func_acquireTempName_rt) {
				return super.__ks_func_acquireTempName_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		acquireUnusedTempName() {
			return this.__ks_func_acquireUnusedTempName_rt.call(null, this, this, arguments);
		}
		__ks_func_acquireUnusedTempName_1() {
			for(const name in this._tempNames) {
				if(this._tempNames[name] === true) {
					this._tempNames[name] = false;
					return name;
				}
			}
			return null;
		}
		__ks_func_acquireUnusedTempName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_acquireUnusedTempName_1.call(that);
			}
			if(super.__ks_func_acquireUnusedTempName_rt) {
				return super.__ks_func_acquireUnusedTempName_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addMacro() {
			return this.__ks_func_addMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_addMacro_0(name, macro) {
			if(KSType.isArray(this._macros[name])) {
				const type = macro.__ks_func_type_41();
				let notAdded = true;
				for(let index = 0, __ks_0 = this._macros[name].length, m; index < __ks_0 && notAdded; ++index) {
					m = this._macros[name][index];
					if(m.type().isSubsetOf(type, MatchingMode.Signature) === true) {
						this._macros[name].splice(index, 0, macro);
						notAdded = false;
					}
				}
				if(notAdded) {
					this._macros[name].push(macro);
				}
			}
			else {
				this._macros[name] = [macro];
			}
		}
		__ks_func_addMacro_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, MacroDeclaration);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addMacro_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addMacro_rt) {
				return super.__ks_func_addMacro_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addStash() {
			return this.__ks_func_addStash_rt.call(null, this, this, arguments);
		}
		__ks_func_addStash_0(name, fn) {
			if(KSType.isValue(this._stashes[name])) {
				this._stashes[name].push(fn);
			}
			else {
				this._stashes[name] = [fn];
			}
		}
		__ks_func_addStash_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, args.length - 1, t0, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_addStash_0.call(that, args[0], KSHelper.getVarargs(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_addStash_rt) {
				return super.__ks_func_addStash_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		authority() {
			return this.__ks_func_authority_rt.call(null, this, this, arguments);
		}
		__ks_func_authority_0() {
			return this._authority;
		}
		__ks_func_authority_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_authority_0.call(that);
			}
			if(super.__ks_func_authority_rt) {
				return super.__ks_func_authority_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		block() {
			return this.__ks_func_block_rt.call(null, this, this, arguments);
		}
		__ks_func_block_0() {
			return this;
		}
		__ks_func_block_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_block_0.call(that);
			}
			if(super.__ks_func_block_rt) {
				return super.__ks_func_block_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		commitTempVariables() {
			return this.__ks_func_commitTempVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_commitTempVariables_1(variables) {
			__ks_Array.__ks_func_pushUniq_0.call(variables, this._tempDeclarations);
			__ks_Array.__ks_func_clear_0.call(this._tempDeclarations);
		}
		__ks_func_commitTempVariables_rt(that, proto, args) {
			const t0 = KSType.isArray;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_commitTempVariables_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_commitTempVariables_rt) {
				return super.__ks_func_commitTempVariables_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		declareVariable() {
			return this.__ks_func_declareVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_declareVariable_0(name, scope) {
			if(($keywords[name] === true) || (this._declarations[name] === true)) {
				const newName = this.__ks_func_getNewName_0(name);
				if(!KSType.isArray(this._variables[name])) {
					this._declarations[newName] = true;
				}
				return newName;
			}
			else {
				this._declarations[name] = true;
				return null;
			}
		}
		__ks_func_declareVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Scope);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_declareVariable_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_declareVariable_rt) {
				return super.__ks_func_declareVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		define() {
			return this.__ks_func_define_rt.call(null, this, this, arguments);
		}
		__ks_func_define_0(name, immutable, type = null, initialized, node) {
			if(initialized === void 0 || initialized === null) {
				initialized = false;
			}
			if(this.__ks_func_hasDefinedVariable_0(name)) {
				SyntaxException.__ks_sttc_throwAlreadyDeclared_0(name, node);
			}
			const variable = Variable.__ks_new_1(name, immutable, false, type, initialized);
			this.__ks_func_defineVariable_0(variable, node);
			return variable;
		}
		__ks_func_define_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isBoolean;
			const t2 = value => KSType.isClassInstance(value, Type) || KSType.isNull(value);
			const t3 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 3 && args.length <= 5) {
				if(t0(args[0]) && t1(args[1]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && KSHelper.isVarargs(args, 0, 1, t3, pts, 1) && KSHelper.isVarargs(args, 1, 1, t4, pts, 2) && te(pts, 3)) {
					return proto.__ks_func_define_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
				}
			}
			if(super.__ks_func_define_rt) {
				return super.__ks_func_define_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		defineVariable() {
			return this.__ks_func_defineVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_defineVariable_0(variable, node) {
			const name = variable.__ks_func_name_0();
			if(KSType.isArray(this._variables[name])) {
				const variables = this._variables[name];
				if(KSType.isClassInstance(__ks_Array.__ks_func_last_0.call(variables), Variable)) {
					SyntaxException.throwAlreadyDeclared(name, node);
				}
				variables.push(this.__ks_func_line_0(), variable);
			}
			else {
				let newName = this.declareVariable(name, this);
				if(KSType.isValue(newName)) {
					this._renamedVariables[name] = newName;
					variable.__ks_func_renameAs_0(newName);
				}
				this._variables[name] = [this.__ks_func_line_0(), variable];
			}
			let reference = this._references[name];
			if(KSType.isValue(reference)) {
				reference.reset();
			}
		}
		__ks_func_defineVariable_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Variable);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_defineVariable_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_defineVariable_rt) {
				return super.__ks_func_defineVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getChunkType() {
			return this.__ks_func_getChunkType_rt.call(null, this, this, arguments);
		}
		__ks_func_getChunkType_1(name, line) {
			if(line === void 0 || line === null) {
				line = this.__ks_func_line_0();
			}
			if(KSType.isArray(this._chunkTypes[name])) {
				const types = this._chunkTypes[name];
				let type = null;
				if((line === -1) || (line > this.__ks_func_line_0())) {
					type = __ks_Array.__ks_func_last_0.call(types);
				}
				else {
					for(let i = 0, __ks_0 = types.length; i < __ks_0 && KSOperator.lte(types[i], line); i += 2) {
						type = types[i + 1];
					}
				}
				if(type !== null) {
					return type;
				}
			}
			return this._parent.getChunkType(name, -1);
		}
		__ks_func_getChunkType_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isNumber(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_getChunkType_1.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_getChunkType_rt) {
				return super.__ks_func_getChunkType_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getDefinedVariable() {
			return this.__ks_func_getDefinedVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_getDefinedVariable_0(name) {
			if(KSType.isArray(this._variables[name])) {
				const variables = this._variables[name];
				let variable = null;
				if(this.__ks_func_isAtLastLine_0() === true) {
					variable = __ks_Array.__ks_func_last_0.call(variables);
				}
				else {
					const line = this.__ks_func_line_0();
					for(let i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable === false) {
					return null;
				}
				else if(variable !== null) {
					return variable;
				}
			}
			return null;
		}
		__ks_func_getDefinedVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getDefinedVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getDefinedVariable_rt) {
				return super.__ks_func_getDefinedVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getLineOffset_0() {
			return this._module.__ks_func_getLineOffset_0();
		}
		getMacro() {
			return this.__ks_func_getMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_getMacro_0(data, parent) {
			if(KSHelper.valueOf(data.callee.kind) === NodeKind.Identifier.value) {
				if(KSType.isValue(this._macros[data.callee.name])) {
					const __ks_arguments_1 = MacroArgument.build(data.arguments);
					for(let __ks_0 = 0, __ks_1 = this._macros[data.callee.name].length, macro; __ks_0 < __ks_1; ++__ks_0) {
						macro = this._macros[data.callee.name][__ks_0];
						if(macro.matchArguments(__ks_arguments_1) === true) {
							return macro;
						}
					}
				}
				else {
					return this._parent.getMacro(data, parent);
				}
				SyntaxException.throwUnmatchedMacro(data.callee.name, parent, data);
			}
			else {
				const path = Generator.generate(data.callee);
				if(KSType.isValue(this._macros[path])) {
					const __ks_arguments_1 = MacroArgument.build(data.arguments);
					for(let __ks_0 = 0, __ks_1 = this._macros[path].length, macro; __ks_0 < __ks_1; ++__ks_0) {
						macro = this._macros[path][__ks_0];
						if(macro.matchArguments(__ks_arguments_1) === true) {
							return macro;
						}
					}
				}
				else {
					return this._parent.getMacro(data, parent);
				}
				SyntaxException.throwUnmatchedMacro(path, parent, data);
			}
		}
		__ks_func_getMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_getMacro_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getMacro_rt) {
				return super.__ks_func_getMacro_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getNewName() {
			return this.__ks_func_getNewName_rt.call(null, this, this, arguments);
		}
		__ks_func_getNewName_0(name) {
			let index = KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : 0;
			let newName = "__ks_" + name + "_" + ++index;
			while(this._declarations[newName] === true) {
				newName = "__ks_" + name + "_" + ++index;
			}
			this._renamedIndexes[name] = index;
			return newName;
		}
		__ks_func_getNewName_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getNewName_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getNewName_rt) {
				return super.__ks_func_getNewName_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getRawLine() {
			return this.__ks_func_getRawLine_rt.call(null, this, this, arguments);
		}
		__ks_func_getRawLine_1() {
			return this._module.__ks_func_getRawLine_3();
		}
		__ks_func_getRawLine_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getRawLine_1.call(that);
			}
			if(super.__ks_func_getRawLine_rt) {
				return super.__ks_func_getRawLine_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getRenamedIndex() {
			return this.__ks_func_getRenamedIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_getRenamedIndex_0(name) {
			return KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : 0;
		}
		__ks_func_getRenamedIndex_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getRenamedIndex_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getRenamedIndex_rt) {
				return super.__ks_func_getRenamedIndex_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getReservedName() {
			return this.__ks_func_getReservedName_rt.call(null, this, this, arguments);
		}
		__ks_func_getReservedName_0() {
			return KSHelper.concatString("__ks_00", ++this._reservedIndex);
		}
		__ks_func_getReservedName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getReservedName_0.call(that);
			}
			if(super.__ks_func_getReservedName_rt) {
				return super.__ks_func_getReservedName_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getTempIndex() {
			return this.__ks_func_getTempIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_getTempIndex_1() {
			return this._tempIndex;
		}
		__ks_func_getTempIndex_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getTempIndex_1.call(that);
			}
			if(super.__ks_func_getTempIndex_rt) {
				return super.__ks_func_getTempIndex_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getVariable() {
			return this.__ks_func_getVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_getVariable_2(name, line) {
			if(line === void 0 || line === null) {
				line = this.__ks_func_line_0();
			}
			if(KSType.isArray(this._variables[name])) {
				const variables = this._variables[name];
				let variable = null;
				if((line === -1) || (line > this.__ks_func_line_0())) {
					variable = __ks_Array.__ks_func_last_0.call(variables);
				}
				else {
					for(let i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable === false) {
					return this._parent.getVariable(name, -1);
				}
				else if(variable !== null) {
					return variable;
				}
			}
			return this._parent.getVariable(name, -1);
		}
		__ks_func_getVariable_0(name, line) {
			return this.__ks_func_getVariable_2(name, line);
		}
		__ks_func_getVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isNumber(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_getVariable_2.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_getVariable_rt) {
				return super.__ks_func_getVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasDeclaredVariable() {
			return this.__ks_func_hasDeclaredVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasDeclaredVariable_0(name) {
			return (this._declarations[name] === true) || KSType.isValue(this._renamedVariables[name]);
		}
		__ks_func_hasDeclaredVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasDeclaredVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasDeclaredVariable_rt) {
				return super.__ks_func_hasDeclaredVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasDefinedVariable() {
			return this.__ks_func_hasDefinedVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasDefinedVariable_0(name) {
			return this.__ks_func_hasDefinedVariable_2(name, this.__ks_func_line_0());
		}
		__ks_func_hasDefinedVariable_2(name, line) {
			if(KSType.isArray(this._variables[name])) {
				const variables = this._variables[name];
				let variable = null;
				if((line === -1) || (line > this.__ks_func_line_0())) {
					variable = __ks_Array.__ks_func_last_0.call(variables);
				}
				else {
					for(let i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable !== null) {
					return variable !== false;
				}
			}
			return false;
		}
		__ks_func_hasDefinedVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isNumber;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasDefinedVariable_0.call(that, args[0]);
				}
			}
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_hasDefinedVariable_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_hasDefinedVariable_rt) {
				return super.__ks_func_hasDefinedVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_hasMacro_1(name) {
			return KSType.isArray(this._macros[name]) || this._parent.hasMacro(name);
		}
		__ks_func_hasMacro_0(name) {
			return this.__ks_func_hasMacro_1(name);
		}
		__ks_func_hasMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasMacro_1.call(that, args[0]);
				}
			}
			return super.__ks_func_hasMacro_rt.call(null, that, Scope.prototype, args);
		}
		hasVariable() {
			return this.__ks_func_hasVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasVariable_0(name, line) {
			if(line === void 0 || line === null) {
				line = this.__ks_func_line_0();
			}
			if(KSType.isArray(this._variables[name])) {
				const variables = this._variables[name];
				let variable = null;
				if((line === -1) || (line > this.__ks_func_line_0())) {
					variable = __ks_Array.__ks_func_last_0.call(variables);
				}
				else {
					for(let i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable !== null) {
					return variable !== false;
				}
			}
			return this._parent.__ks_func_hasVariable_0(name, -1);
		}
		__ks_func_hasVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isNumber(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_hasVariable_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_hasVariable_rt) {
				return super.__ks_func_hasVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAtLastLine() {
			return this.__ks_func_isAtLastLine_rt.call(null, this, this, arguments);
		}
		__ks_func_isAtLastLine_0() {
			return this._module.__ks_func_isAtLastLine_1();
		}
		__ks_func_isAtLastLine_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAtLastLine_0.call(that);
			}
			if(super.__ks_func_isAtLastLine_rt) {
				return super.__ks_func_isAtLastLine_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isMatchingType() {
			return this.__ks_func_isMatchingType_rt.call(null, this, this, arguments);
		}
		__ks_func_isMatchingType_0(a, b, mode) {
			const hash = a.__ks_func_toQuote_0();
			let matches = this._matchingTypes[hash];
			if(KSType.isValue(matches)) {
				for(let i = 0, __ks_0 = matches.length, type; i < __ks_0; i += 2) {
					type = matches[i];
					if(type === b) {
						return matches[i + 1];
					}
				}
			}
			else {
				this._matchingTypes[hash] = [];
			}
			this._matchingTypes[hash].push(b, false);
			const index = this._matchingTypes[hash].length;
			const match = a.__ks_func_isSubsetOf_0(b, mode);
			this._matchingTypes[hash][index - 1] = match;
			return match;
		}
		__ks_func_isMatchingType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
					return proto.__ks_func_isMatchingType_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_isMatchingType_rt) {
				return super.__ks_func_isMatchingType_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRedeclaredVariable() {
			return this.__ks_func_isRedeclaredVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isRedeclaredVariable_1(name) {
			if(KSType.isArray(this._variables[name])) {
				return this._variables[name].length !== 2;
			}
			else {
				return false;
			}
		}
		__ks_func_isRedeclaredVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isRedeclaredVariable_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_isRedeclaredVariable_rt) {
				return super.__ks_func_isRedeclaredVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRenamedVariable() {
			return this.__ks_func_isRenamedVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isRenamedVariable_1(name) {
			if(KSType.isArray(this._variables[name])) {
				return KSType.isString(this._renamedVariables[name]);
			}
			else {
				return this._parent.isRenamedVariable(name);
			}
		}
		__ks_func_isRenamedVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isRenamedVariable_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_isRenamedVariable_rt) {
				return super.__ks_func_isRenamedVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_line_0() {
			return this._module.__ks_func_line_0();
		}
		__ks_func_line_2(line) {
			return this._module.__ks_func_line_4(line);
		}
		__ks_func_line_rt(that, proto, args) {
			const t0 = KSType.isNumber;
			if(args.length === 0) {
				return proto.__ks_func_line_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_line_2.call(that, args[0]);
				}
			}
			return super.__ks_func_line_rt.call(null, that, Scope.prototype, args);
		}
		listCompositeMacros() {
			return this.__ks_func_listCompositeMacros_rt.call(null, this, this, arguments);
		}
		__ks_func_listCompositeMacros_0(name) {
			const regex = new RegExp(KSHelper.concatString("^", name, "\."));
			const list = [];
			for(let n in this._macros) {
				let m = this._macros[n];
				if(regex.test(n) === true) {
					list.push.apply(list, [].concat(m));
				}
			}
			return list;
		}
		__ks_func_listCompositeMacros_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listCompositeMacros_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_listCompositeMacros_rt) {
				return super.__ks_func_listCompositeMacros_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listDefinedVariables() {
			return this.__ks_func_listDefinedVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_listDefinedVariables_0() {
			const variables = [];
			for(let __ks_0 in this._variables) {
				const array = this._variables[__ks_0];
				variables.push(array[KSOperator.subtraction(array.length, 1)]);
			}
			return variables;
		}
		__ks_func_listDefinedVariables_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_listDefinedVariables_0.call(that);
			}
			if(super.__ks_func_listDefinedVariables_rt) {
				return super.__ks_func_listDefinedVariables_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listMacros() {
			return this.__ks_func_listMacros_rt.call(null, this, this, arguments);
		}
		__ks_func_listMacros_0(name) {
			if(KSType.isArray(this._macros[name])) {
				return this._macros[name];
			}
			else {
				return this._parent.listMacros(name);
			}
		}
		__ks_func_listMacros_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listMacros_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_listMacros_rt) {
				return super.__ks_func_listMacros_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		module() {
			return this.__ks_func_module_rt.call(null, this, this, arguments);
		}
		__ks_func_module_1() {
			return this._module;
		}
		__ks_func_module_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_module_1.call(that);
			}
			if(super.__ks_func_module_rt) {
				return super.__ks_func_module_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_parent_0() {
			return this._parent;
		}
		processStash() {
			return this.__ks_func_processStash_rt.call(null, this, this, arguments);
		}
		__ks_func_processStash_0(name) {
			const stash = this._stashes[name];
			if(KSType.isValue(stash)) {
				delete this._stashes[name];
				let variable = this.__ks_func_getVariable_2(name);
				for(let __ks_0 = 0, __ks_1 = stash.length, fn; __ks_0 < __ks_1; ++__ks_0) {
					fn = stash[__ks_0];
					if(fn[0](variable) === true) {
						break;
					}
				}
				variable = this.__ks_func_getVariable_2(name);
				for(let __ks_0 = 0, __ks_1 = stash.length, fn; __ks_0 < __ks_1; ++__ks_0) {
					fn = stash[__ks_0];
					fn[1](variable);
				}
				return true;
			}
			else {
				return false;
			}
		}
		__ks_func_processStash_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_processStash_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_processStash_rt) {
				return super.__ks_func_processStash_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		reassignReference() {
			return this.__ks_func_reassignReference_rt.call(null, this, this, arguments);
		}
		__ks_func_reassignReference_0(oldName, newName, newScope) {
			let reference = this._references[oldName];
			if(KSType.isValue(reference)) {
				reference.reassign(newName, newScope);
			}
			let __ks_reference_1 = newScope._references[newName];
			if(KSType.isValue(__ks_reference_1)) {
				__ks_reference_1.reset();
			}
		}
		__ks_func_reassignReference_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_reassignReference_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_reassignReference_rt) {
				return super.__ks_func_reassignReference_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		reference() {
			return this.__ks_func_reference_rt.call(null, this, this, arguments);
		}
		__ks_func_reference_0(value) {
			if(KSType.isString(value)) {
				return this.__ks_func_reference_3(value);
			}
			return this.__ks_func_reference_4(value);
		}
		__ks_func_reference_4(value) {
			if(KSType.isClassInstance(value, AnyType)) {
				return this.__ks_func_resolveReference_2("Any");
			}
			else if(KSType.isClassInstance(value, ClassVariableType)) {
				return this.reference(value.type());
			}
			else if(KSType.isClassInstance(value, NamedType)) {
				if(value.hasContainer() === true) {
					return value.container().scope().reference(value.name());
				}
				else {
					return this.resolveReference(value.name());
				}
			}
			else if(KSType.isClassInstance(value, ReferenceType)) {
				return this.resolveReference(value.name(), value.isExplicitlyNull(), [...value.parameters()]);
			}
			else if(KSType.isClassInstance(value, Variable)) {
				return this.resolveReference(value.name());
			}
			else {
				console.info(value);
				throw new NotImplementedException();
			}
		}
		__ks_func_reference_3(value, nullable, parameters) {
			if(nullable === void 0 || nullable === null) {
				nullable = false;
			}
			if(parameters === void 0 || parameters === null) {
				parameters = [];
			}
			return this.__ks_func_resolveReference_2(value, nullable, parameters);
		}
		__ks_func_reference_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isValue;
			const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t3 = value => KSType.isArray(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_reference_3.call(that, args[0], void 0, void 0);
				}
				if(t1(args[0])) {
					return proto.__ks_func_reference_4.call(that, args[0]);
				}
			}
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t3, pts, 1) && te(pts, 2)) {
					return proto.__ks_func_reference_3.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			if(super.__ks_func_reference_rt) {
				return super.__ks_func_reference_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		releaseTempName() {
			return this.__ks_func_releaseTempName_rt.call(null, this, this, arguments);
		}
		__ks_func_releaseTempName_1(name) {
			this._tempNames[name] = true;
		}
		__ks_func_releaseTempName_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_releaseTempName_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_releaseTempName_rt) {
				return super.__ks_func_releaseTempName_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		removeVariable() {
			return this.__ks_func_removeVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_removeVariable_0(name) {
			if(KSType.isArray(this._variables[name])) {
				this._variables[name].push(this.__ks_func_line_0(), false);
			}
			else {
				this._parent.removeVariable(name);
			}
		}
		__ks_func_removeVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_removeVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_removeVariable_rt) {
				return super.__ks_func_removeVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		rename() {
			return this.__ks_func_rename_rt.call(null, this, this, arguments);
		}
		__ks_func_rename_1(name) {
			if(KSType.isString(this._renamedVariables[name])) {
				return;
			}
			let index = this.getRenamedIndex(name);
			let newName = "__ks_" + name + "_" + ++index;
			this._renamedIndexes[name] = index;
			this._renamedVariables[name] = newName;
			const variable = this.__ks_func_getVariable_2(name);
			variable.__ks_func_renameAs_0(newName);
		}
		__ks_func_rename_2(name, newName) {
			if(newName !== name) {
				this._renamedVariables[name] = newName;
				const variable = this.__ks_func_getVariable_2(name);
				variable.renameAs(newName);
			}
		}
		__ks_func_rename_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_rename_1.call(that, args[0]);
				}
			}
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_rename_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_rename_rt) {
				return super.__ks_func_rename_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		replaceVariable() {
			return this.__ks_func_replaceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_replaceVariable_0(name, variable) {
			if(KSType.isArray(this._variables[name])) {
				const variables = this._variables[name];
				const line = this.__ks_func_line_0();
				let i = 0;
				while(((i + 2) < variables.length) && KSOperator.lte(variables[i + 2], line)) {
					i += 2;
				}
				if(KSOperator.lte(variables[i], line)) {
					variables[i + 1] = variable;
				}
			}
			else {
				this._variables[name] = [this.__ks_func_line_0(), variable];
			}
			let reference = this._references[name];
			if(KSType.isValue(reference)) {
				reference.reset();
			}
			return variable;
		}
		__ks_func_replaceVariable_1(name, type, downcast, absolute, node) {
			if(downcast === void 0 || downcast === null) {
				downcast = false;
			}
			if(absolute === void 0 || absolute === null) {
				absolute = true;
			}
			let variable = this.__ks_func_getVariable_2(name);
			if(variable.__ks_func_isDefinitive_0() === true) {
				if(type.isAssignableToVariable(variable.__ks_func_getDeclaredType_0(), downcast)) {
				}
				else if(variable.__ks_func_isInitialized_0() === true) {
					TypeException.throwInvalidAssignement(name, variable.__ks_func_getDeclaredType_0(), type, node);
				}
				else if(type.__ks_func_isNullable_0() === true) {
					if(!(type.__ks_func_setNullable_0(false).isAssignableToVariable(variable.__ks_func_getDeclaredType_0(), downcast) === true)) {
						TypeException.throwInvalidAssignement(name, variable.__ks_func_getDeclaredType_0(), type, node);
					}
				}
			}
			if(!type.__ks_func_equals_0(variable.__ks_func_getRealType_0())) {
				if(KSType.isArray(this._variables[name])) {
					variable = variable.__ks_func_setRealType_1(type, absolute, this);
					this._variables[name].push(this.__ks_func_line_0(), variable);
				}
				else {
					variable = variable.__ks_func_clone_0().setRealType(type, absolute, this);
					this._variables[name] = [this.__ks_func_line_0(), variable];
				}
			}
			let reference = this._references[name];
			if(KSType.isValue(reference)) {
				reference.reset();
			}
			return variable;
		}
		__ks_func_replaceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Variable);
			const t2 = value => KSType.isClassInstance(value, Type);
			const t3 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_replaceVariable_0.call(that, args[0], args[1]);
				}
			}
			if(args.length >= 3 && args.length <= 5) {
				if(t0(args[0]) && t2(args[1]) && KSHelper.isVarargs(args, 0, 1, t3, pts = [2], 0) && KSHelper.isVarargs(args, 0, 1, t3, pts, 1) && KSHelper.isVarargs(args, 1, 1, t4, pts, 2) && te(pts, 3)) {
					return proto.__ks_func_replaceVariable_1.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
				}
			}
			if(super.__ks_func_replaceVariable_rt) {
				return super.__ks_func_replaceVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		resetReferences() {
			return this.__ks_func_resetReferences_rt.call(null, this, this, arguments);
		}
		__ks_func_resetReferences_0() {
			for(let __ks_0 in this._references) {
				const reference = this._references[__ks_0];
				reference.reset();
			}
		}
		__ks_func_resetReferences_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_resetReferences_0.call(that);
			}
			if(super.__ks_func_resetReferences_rt) {
				return super.__ks_func_resetReferences_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		resolveReference() {
			return this.__ks_func_resolveReference_rt.call(null, this, this, arguments);
		}
		__ks_func_resolveReference_2(name, explicitlyNull, parameters) {
			if(explicitlyNull === void 0 || explicitlyNull === null) {
				explicitlyNull = false;
			}
			if(parameters === void 0 || parameters === null) {
				parameters = [];
			}
			if(KSType.isArray(this._variables[name])) {
				const hash = ReferenceType.__ks_sttc_toQuote_1(name, explicitlyNull, parameters);
				if(!KSType.isClassInstance(this._references[hash], ReferenceType)) {
					this._references[hash] = ReferenceType.__ks_new_0(this, name, explicitlyNull, parameters);
				}
				return this._references[hash];
			}
			else {
				return this._parent.resolveReference(name, explicitlyNull, parameters);
			}
		}
		__ks_func_resolveReference_0(name) {
			return this.__ks_func_resolveReference_2(name);
		}
		__ks_func_resolveReference_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t2 = value => KSType.isArray(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 3) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t2, pts, 1) && te(pts, 2)) {
					return proto.__ks_func_resolveReference_2.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			if(super.__ks_func_resolveReference_rt) {
				return super.__ks_func_resolveReference_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setLineOffset() {
			return this.__ks_func_setLineOffset_rt.call(null, this, this, arguments);
		}
		__ks_func_setLineOffset_0(offset) {
			return this._module.__ks_func_setLineOffset_1(offset);
		}
		__ks_func_setLineOffset_rt(that, proto, args) {
			const t0 = KSType.isNumber;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setLineOffset_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_setLineOffset_rt) {
				return super.__ks_func_setLineOffset_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		updateInferable() {
			return this.__ks_func_updateInferable_rt.call(null, this, this, arguments);
		}
		__ks_func_updateInferable_0(name, data, node) {
			if(data.isVariable === true) {
				if(this.hasVariable(name)) {
					this.replaceVariable(name, data.type, true, true, node);
				}
			}
			else {
				if(KSType.isArray(this._chunkTypes[name])) {
					this._chunkTypes[name].push(this.__ks_func_line_0(), data.type);
				}
				else {
					this._chunkTypes[name] = [this.__ks_func_line_0(), data.type];
				}
			}
		}
		__ks_func_updateInferable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_updateInferable_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_updateInferable_rt) {
				return super.__ks_func_updateInferable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class FunctionScope extends BlockScope {
		static __ks_new_0(...args) {
			const o = Object.create(FunctionScope.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._extending = false;
		}
		__ks_cons_0(parent) {
			BlockScope.prototype.__ks_cons_0.call(this, parent);
			this._parent = this._authority;
			this._authority = this;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope);
			if(args.length === 1) {
				if(t0(args[0])) {
					return FunctionScope.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_declareVariable_0(name, scope) {
			if((name === "this") || (this._extending && (name === "super"))) {
				this._declarations[name] = true;
				return null;
			}
			else if(($keywords[name] === true) || (this._declarations[name] === true)) {
				const newName = this.__ks_func_getNewName_0(name);
				if(!KSType.isArray(this._variables[name])) {
					this._declarations[newName] = true;
				}
				return newName;
			}
			else {
				this._declarations[name] = true;
				return null;
			}
		}
		flagExtending() {
			return this.__ks_func_flagExtending_rt.call(null, this, this, arguments);
		}
		__ks_func_flagExtending_0() {
			this._extending = true;
		}
		__ks_func_flagExtending_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagExtending_0.call(that);
			}
			if(super.__ks_func_flagExtending_rt) {
				return super.__ks_func_flagExtending_rt.call(null, that, BlockScope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class HollowScope extends Scope {
		static __ks_new_0(...args) {
			const o = Object.create(HollowScope.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._chunkTypes = new Dictionary();
			this._variables = new Dictionary();
		}
		__ks_cons_0(parent) {
			this._parent = parent;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope);
			if(args.length === 1) {
				if(t0(args[0])) {
					return HollowScope.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		acquireTempName() {
			return this.__ks_func_acquireTempName_rt.call(null, this, this, arguments);
		}
		__ks_func_acquireTempName_0(declare) {
			if(declare === void 0 || declare === null) {
				declare = true;
			}
			return this._parent.__ks_func_acquireTempName_0(declare);
		}
		__ks_func_acquireTempName_rt(that, proto, args) {
			const t0 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 1) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
					return proto.__ks_func_acquireTempName_0.call(that, KSHelper.getVararg(args, 0, pts[1]));
				}
			}
			if(super.__ks_func_acquireTempName_rt) {
				return super.__ks_func_acquireTempName_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		acquireUnusedTempName() {
			return this.__ks_func_acquireUnusedTempName_rt.call(null, this, this, arguments);
		}
		__ks_func_acquireUnusedTempName_2() {
			return this._parent.acquireUnusedTempName();
		}
		__ks_func_acquireUnusedTempName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_acquireUnusedTempName_2.call(that);
			}
			if(super.__ks_func_acquireUnusedTempName_rt) {
				return super.__ks_func_acquireUnusedTempName_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		commitTempVariables() {
			return this.__ks_func_commitTempVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_commitTempVariables_2(variables) {
			return this._parent.commitTempVariables(variables);
		}
		__ks_func_commitTempVariables_rt(that, proto, args) {
			const t0 = KSType.isArray;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_commitTempVariables_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_commitTempVariables_rt) {
				return super.__ks_func_commitTempVariables_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		authority() {
			return this.__ks_func_authority_rt.call(null, this, this, arguments);
		}
		__ks_func_authority_0() {
			return this._parent.__ks_func_authority_0();
		}
		__ks_func_authority_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_authority_0.call(that);
			}
			if(super.__ks_func_authority_rt) {
				return super.__ks_func_authority_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		block() {
			return this.__ks_func_block_rt.call(null, this, this, arguments);
		}
		__ks_func_block_0() {
			return this._parent.__ks_func_block_0();
		}
		__ks_func_block_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_block_0.call(that);
			}
			if(super.__ks_func_block_rt) {
				return super.__ks_func_block_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		declareVariable() {
			return this.__ks_func_declareVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_declareVariable_0(name, scope) {
			return this._parent.__ks_func_declareVariable_0(name, scope);
		}
		__ks_func_declareVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Scope);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_declareVariable_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_declareVariable_rt) {
				return super.__ks_func_declareVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		define() {
			return this.__ks_func_define_rt.call(null, this, this, arguments);
		}
		__ks_func_define_0(name, immutable, type = null, initialized, node) {
			if(initialized === void 0 || initialized === null) {
				initialized = false;
			}
			if(this.__ks_func_hasDefinedVariable_0(name)) {
				SyntaxException.__ks_sttc_throwAlreadyDeclared_0(name, node);
			}
			const variable = Variable.__ks_new_1(name, immutable, false, type, initialized);
			this.__ks_func_defineVariable_0(variable, node);
			return variable;
		}
		__ks_func_define_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isBoolean;
			const t2 = value => KSType.isClassInstance(value, Type) || KSType.isNull(value);
			const t3 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 3 && args.length <= 5) {
				if(t0(args[0]) && t1(args[1]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && KSHelper.isVarargs(args, 0, 1, t3, pts, 1) && KSHelper.isVarargs(args, 1, 1, t4, pts, 2) && te(pts, 3)) {
					return proto.__ks_func_define_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
				}
			}
			if(super.__ks_func_define_rt) {
				return super.__ks_func_define_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		defineVariable() {
			return this.__ks_func_defineVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_defineVariable_0(variable, node) {
			const name = variable.__ks_func_name_0();
			this._parent.__ks_func_defineVariable_0(variable, node);
			this._variables[name] = [this._parent.__ks_func_line_0(), variable];
		}
		__ks_func_defineVariable_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Variable);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_defineVariable_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_defineVariable_rt) {
				return super.__ks_func_defineVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getChunkType() {
			return this.__ks_func_getChunkType_rt.call(null, this, this, arguments);
		}
		__ks_func_getChunkType_2(name) {
			return this.__ks_func_getChunkType_3(name, this.__ks_func_line_0());
		}
		__ks_func_getChunkType_3(name, line) {
			if(KSType.isArray(this._chunkTypes[name])) {
				const types = this._chunkTypes[name];
				let type = null;
				if((line === -1) || (line > this.__ks_func_line_0())) {
					type = __ks_Array.__ks_func_last_0.call(types);
				}
				else {
					for(let i = 0, __ks_0 = types.length; i < __ks_0 && KSOperator.lte(types[i], line); i += 2) {
						type = types[i + 1];
					}
				}
				if(type !== null) {
					return type;
				}
			}
			return this._parent.getChunkType(name, -1);
		}
		__ks_func_getChunkType_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isNumber;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getChunkType_2.call(that, args[0]);
				}
			}
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_getChunkType_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getChunkType_rt) {
				return super.__ks_func_getChunkType_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getDefinedVariable() {
			return this.__ks_func_getDefinedVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_getDefinedVariable_0(name) {
			if(KSType.isArray(this._variables[name])) {
				const variables = this._variables[name];
				let variable = null;
				if(this._parent.isAtLastLine() === true) {
					variable = __ks_Array.__ks_func_last_0.call(variables);
				}
				else {
					const line = this._parent.__ks_func_line_0();
					for(let i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable === false) {
					return null;
				}
				else if(variable !== null) {
					return variable;
				}
			}
			return null;
		}
		__ks_func_getDefinedVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getDefinedVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getDefinedVariable_rt) {
				return super.__ks_func_getDefinedVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getMacro() {
			return this.__ks_func_getMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_getMacro_1(data, parent) {
			return this._parent.getMacro(data, parent);
		}
		__ks_func_getMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_getMacro_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getMacro_rt) {
				return super.__ks_func_getMacro_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getRawLine() {
			return this.__ks_func_getRawLine_rt.call(null, this, this, arguments);
		}
		__ks_func_getRawLine_2() {
			return this._parent.getRawLine();
		}
		__ks_func_getRawLine_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getRawLine_2.call(that);
			}
			if(super.__ks_func_getRawLine_rt) {
				return super.__ks_func_getRawLine_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getRenamedIndex() {
			return this.__ks_func_getRenamedIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_getRenamedIndex_0(name) {
			return this._parent.__ks_func_getRenamedIndex_0(name);
		}
		__ks_func_getRenamedIndex_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getRenamedIndex_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getRenamedIndex_rt) {
				return super.__ks_func_getRenamedIndex_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getTempIndex() {
			return this.__ks_func_getTempIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_getTempIndex_2() {
			return this._parent.getTempIndex();
		}
		__ks_func_getTempIndex_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getTempIndex_2.call(that);
			}
			if(super.__ks_func_getTempIndex_rt) {
				return super.__ks_func_getTempIndex_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getVariable() {
			return this.__ks_func_getVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_getVariable_3(name, line) {
			if(line === void 0 || line === null) {
				line = this._parent.__ks_func_line_0();
			}
			if(KSType.isArray(this._variables[name])) {
				const variables = this._variables[name];
				const currentLine = this._parent.__ks_func_line_0();
				let variable = null;
				if((line === -1) || (line > currentLine)) {
					variable = __ks_Array.__ks_func_last_0.call(variables);
				}
				else {
					for(let i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable === false) {
					return this._parent.getVariable(name, -1);
				}
				else if(variable !== null) {
					return variable;
				}
			}
			return this._parent.getVariable(name, line);
		}
		__ks_func_getVariable_0(name, line) {
			return this.__ks_func_getVariable_3(name, line);
		}
		__ks_func_getVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isNumber(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_getVariable_3.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_getVariable_rt) {
				return super.__ks_func_getVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_hasBleedingVariable_0(name) {
			return this._parent.__ks_func_hasBleedingVariable_0(name);
		}
		hasDefinedVariable() {
			return this.__ks_func_hasDefinedVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasDefinedVariable_0(name) {
			return this._parent.hasDefinedVariable(name, this.__ks_func_line_0());
		}
		__ks_func_hasDefinedVariable_3(name, line) {
			return this._parent.hasDefinedVariable(name, line);
		}
		__ks_func_hasDefinedVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isNumber;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasDefinedVariable_0.call(that, args[0]);
				}
			}
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_hasDefinedVariable_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_hasDefinedVariable_rt) {
				return super.__ks_func_hasDefinedVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasDeclaredVariable() {
			return this.__ks_func_hasDeclaredVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasDeclaredVariable_0(name) {
			return this._parent.__ks_func_hasDeclaredVariable_0(name);
		}
		__ks_func_hasDeclaredVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasDeclaredVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasDeclaredVariable_rt) {
				return super.__ks_func_hasDeclaredVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_hasMacro_2(name) {
			return this._parent.hasMacro(name);
		}
		__ks_func_hasMacro_0(name) {
			return this.__ks_func_hasMacro_2(name);
		}
		__ks_func_hasMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasMacro_2.call(that, args[0]);
				}
			}
			return super.__ks_func_hasMacro_rt.call(null, that, Scope.prototype, args);
		}
		hasVariable() {
			return this.__ks_func_hasVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasVariable_0(name, line = null) {
			return this._parent.__ks_func_hasVariable_0(name, line);
		}
		__ks_func_hasVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isNumber(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_hasVariable_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_hasVariable_rt) {
				return super.__ks_func_hasVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isBleeding_0() {
			return true;
		}
		__ks_func_isInline_0() {
			return true;
		}
		isRedeclaredVariable() {
			return this.__ks_func_isRedeclaredVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isRedeclaredVariable_2(name) {
			if(KSType.isArray(this._variables[name])) {
				return this._variables[name].length !== 2;
			}
			else {
				return false;
			}
		}
		__ks_func_isRedeclaredVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isRedeclaredVariable_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_isRedeclaredVariable_rt) {
				return super.__ks_func_isRedeclaredVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRenamedVariable() {
			return this.__ks_func_isRenamedVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isRenamedVariable_2(name) {
			return this._parent.isRenamedVariable(name);
		}
		__ks_func_isRenamedVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isRenamedVariable_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_isRenamedVariable_rt) {
				return super.__ks_func_isRenamedVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_line_0() {
			return this._parent.__ks_func_line_0();
		}
		__ks_func_line_3(line) {
			return this._parent.line(line);
		}
		__ks_func_line_rt(that, proto, args) {
			const t0 = KSType.isNumber;
			if(args.length === 0) {
				return proto.__ks_func_line_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_line_3.call(that, args[0]);
				}
			}
			return super.__ks_func_line_rt.call(null, that, Scope.prototype, args);
		}
		module() {
			return this.__ks_func_module_rt.call(null, this, this, arguments);
		}
		__ks_func_module_2() {
			return this._parent.module();
		}
		__ks_func_module_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_module_2.call(that);
			}
			if(super.__ks_func_module_rt) {
				return super.__ks_func_module_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_parent_0() {
			return this._parent;
		}
		reference() {
			return this.__ks_func_reference_rt.call(null, this, this, arguments);
		}
		__ks_func_reference_0(value) {
			if(KSType.isString(value)) {
				return this.__ks_func_reference_5(value);
			}
			return this.__ks_func_reference_6(value);
		}
		__ks_func_reference_6(value) {
			return this._parent.__ks_func_reference_0(value);
		}
		__ks_func_reference_5(value, nullable, parameters) {
			if(nullable === void 0 || nullable === null) {
				nullable = false;
			}
			if(parameters === void 0 || parameters === null) {
				parameters = [];
			}
			return this._parent.resolveReference(value, nullable, parameters);
		}
		__ks_func_reference_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isValue;
			const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t3 = value => KSType.isArray(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_reference_5.call(that, args[0], void 0, void 0);
				}
				if(t1(args[0])) {
					return proto.__ks_func_reference_6.call(that, args[0]);
				}
			}
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t3, pts, 1) && te(pts, 2)) {
					return proto.__ks_func_reference_5.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			if(super.__ks_func_reference_rt) {
				return super.__ks_func_reference_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		releaseTempName() {
			return this.__ks_func_releaseTempName_rt.call(null, this, this, arguments);
		}
		__ks_func_releaseTempName_2(name) {
			return this._parent.releaseTempName(name);
		}
		__ks_func_releaseTempName_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_releaseTempName_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_releaseTempName_rt) {
				return super.__ks_func_releaseTempName_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		rename() {
			return this.__ks_func_rename_rt.call(null, this, this, arguments);
		}
		__ks_func_rename_3(name, newName) {
			if(newName !== name) {
				const variable = this.__ks_func_getVariable_3(name).__ks_func_clone_0();
				variable.renameAs(newName);
				this._variables[name] = [this._parent.__ks_func_line_0(), variable];
			}
		}
		__ks_func_rename_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_rename_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_rename_rt) {
				return super.__ks_func_rename_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		renameNext() {
			return this.__ks_func_renameNext_rt.call(null, this, this, arguments);
		}
		__ks_func_renameNext_0(name, line) {
			return this._parent.renameNext(name, line);
		}
		__ks_func_renameNext_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_renameNext_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_renameNext_rt) {
				return super.__ks_func_renameNext_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		replaceVariable() {
			return this.__ks_func_replaceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_replaceVariable_2(name, type, downcast, absolute, node) {
			if(downcast === void 0 || downcast === null) {
				downcast = false;
			}
			if(absolute === void 0 || absolute === null) {
				absolute = true;
			}
			let variable = this.__ks_func_getVariable_3(name);
			if(variable.__ks_func_isDefinitive_0() === true) {
				if(type.isAssignableToVariable(variable.__ks_func_getDeclaredType_0(), downcast)) {
				}
				else if(variable.__ks_func_isInitialized_0() === true) {
					TypeException.throwInvalidAssignement(name, variable.__ks_func_getDeclaredType_0(), type, node);
				}
				else if(type.__ks_func_isNullable_0() === true) {
					if(!(type.__ks_func_setNullable_0(false).isAssignableToVariable(variable.__ks_func_getDeclaredType_0(), downcast) === true)) {
						TypeException.throwInvalidAssignement(name, variable.__ks_func_getDeclaredType_0(), type, node);
					}
				}
			}
			if(!type.__ks_func_equals_0(variable.__ks_func_getRealType_0())) {
				if(KSType.isArray(this._variables[name])) {
					variable.__ks_func_setRealType_1(type, absolute, this);
				}
				else {
					variable = variable.__ks_func_clone_0().setRealType(type, absolute, this);
					this._variables[name] = [this._parent.__ks_func_line_0(), variable];
				}
			}
			return variable;
		}
		__ks_func_replaceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Type);
			const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t3 = value => KSType.isClassInstance(value, AbstractNode);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 3 && args.length <= 5) {
				if(t0(args[0]) && t1(args[1]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && KSHelper.isVarargs(args, 0, 1, t2, pts, 1) && KSHelper.isVarargs(args, 1, 1, t3, pts, 2) && te(pts, 3)) {
					return proto.__ks_func_replaceVariable_2.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
				}
			}
			if(super.__ks_func_replaceVariable_rt) {
				return super.__ks_func_replaceVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		resolveReference() {
			return this.__ks_func_resolveReference_rt.call(null, this, this, arguments);
		}
		__ks_func_resolveReference_3(name, nullable, parameters) {
			if(nullable === void 0 || nullable === null) {
				nullable = false;
			}
			if(parameters === void 0 || parameters === null) {
				parameters = [];
			}
			return this._parent.resolveReference(name, nullable, parameters);
		}
		__ks_func_resolveReference_0(name) {
			return this.__ks_func_resolveReference_3(name);
		}
		__ks_func_resolveReference_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t2 = value => KSType.isArray(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 3) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t2, pts, 1) && te(pts, 2)) {
					return proto.__ks_func_resolveReference_3.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			if(super.__ks_func_resolveReference_rt) {
				return super.__ks_func_resolveReference_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		updateInferable() {
			return this.__ks_func_updateInferable_rt.call(null, this, this, arguments);
		}
		__ks_func_updateInferable_1(name, data, node) {
			if(data.isVariable === true) {
				this.replaceVariable(name, data.type, true, true, node);
			}
			else {
				if(KSType.isArray(this._chunkTypes[name])) {
					this._chunkTypes[name].push(this.__ks_func_line_0(), data.type);
				}
				else {
					this._chunkTypes[name] = [this.__ks_func_line_0(), data.type];
				}
			}
		}
		__ks_func_updateInferable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_updateInferable_1.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_updateInferable_rt) {
				return super.__ks_func_updateInferable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class InlineBlockScope extends BlockScope {
		static __ks_new_0(...args) {
			const o = Object.create(InlineBlockScope.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._tempParentNames = new Dictionary();
			this._upatedInferables = new Dictionary();
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_acquireTempName_0(declare) {
			if(declare === void 0 || declare === null) {
				declare = true;
			}
			let name = this.__ks_func_acquireUnusedTempName_1();
			if(KSType.isValue(name)) {
				return name;
			}
			if(this._tempIndex === -1) {
				this._tempIndex = this._parent.getTempIndex();
			}
			const __ks_name_1 = KSHelper.concatString("__ks_", ++this._tempIndex);
			this._tempNames[__ks_name_1] = false;
			if(declare) {
				this._tempDeclarations.push(__ks_name_1);
			}
			return __ks_name_1;
		}
		__ks_func_acquireUnusedTempName_1() {
			for(const name in this._tempNames) {
				if(this._tempNames[name] === true) {
					this._tempNames[name] = false;
					return name;
				}
			}
			let name = this.__ks_func_parent_0().acquireUnusedTempName();
			if(KSType.isValue(name)) {
				this._tempParentNames[name] = true;
				return name;
			}
			return null;
		}
		__ks_func_declareVariable_0(name, scope) {
			if(($keywords[name] === true) || ((this._declarations[name] === true) && KSType.isArray(this._variables[name])) || (scope.__ks_func_isBleeding_0() && this.__ks_func_hasBleedingVariable_0(name))) {
				const newName = this.__ks_func_getNewName_0(name);
				if(!KSType.isArray(this._variables[name])) {
					this._declarations[newName] = true;
				}
				return newName;
			}
			else {
				this._declarations[name] = true;
				return null;
			}
		}
		__ks_func_getNewName_0(name) {
			let index = this.__ks_func_getRenamedIndex_0(name);
			let newName = "__ks_" + name + "_" + ++index;
			while(this.__ks_func_hasRenamedVariable_0(newName)) {
				newName = "__ks_" + name + "_" + ++index;
			}
			this._renamedIndexes[name] = index;
			return newName;
		}
		__ks_func_getRenamedIndex_0(name) {
			return KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : this._parent.__ks_func_getRenamedIndex_0(name);
		}
		__ks_func_getTempIndex_1() {
			if(this._tempIndex === -1) {
				this._tempIndex = this._parent.getTempIndex();
			}
			return this._tempIndex;
		}
		__ks_func_hasBleedingVariable_0(name) {
			return super.__ks_func_hasBleedingVariable_0(name) || this._parent.__ks_func_hasBleedingVariable_0(name);
		}
		hasRenamedVariable() {
			return this.__ks_func_hasRenamedVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasRenamedVariable_0(name) {
			let parent = this;
			do {
				if(parent.__ks_func_hasDeclaredVariable_0(name)) {
					return true;
				}
				parent = parent.__ks_func_parent_0();
			}
			while(parent.__ks_func_isInline_0())
			return parent.__ks_func_hasDeclaredVariable_0(name);
		}
		__ks_func_hasRenamedVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasRenamedVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasRenamedVariable_rt) {
				return super.__ks_func_hasRenamedVariable_rt.call(null, that, BlockScope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isInline_0() {
			return true;
		}
		listUpdatedInferables() {
			return this.__ks_func_listUpdatedInferables_rt.call(null, this, this, arguments);
		}
		__ks_func_listUpdatedInferables_0() {
			return this._upatedInferables;
		}
		__ks_func_listUpdatedInferables_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_listUpdatedInferables_0.call(that);
			}
			if(super.__ks_func_listUpdatedInferables_rt) {
				return super.__ks_func_listUpdatedInferables_rt.call(null, that, BlockScope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_releaseTempName_1(name) {
			if(this._tempParentNames[name] === true) {
				this.__ks_func_parent_0().releaseTempName(name);
				this._tempParentNames[name] = false;
			}
			else {
				this._tempNames[name] = true;
			}
		}
		__ks_func_rename_1(name) {
			if(KSType.isString(this._renamedVariables[name])) {
				return;
			}
			let parent = this._parent;
			let nf = !parent.hasDeclaredVariable(name);
			while(nf && parent.__ks_func_isInline_0()) {
				parent = parent.__ks_func_parent_0();
				nf = !parent.hasDeclaredVariable(name);
			}
			if(!nf) {
				this._renamedIndexes[name] = parent.getRenamedIndex(name);
			}
			const newName = this.declareVariable(name, this);
			this._renamedVariables[name] = newName;
			this._declarations[newName] = true;
			const variable = this.__ks_func_getVariable_2(name);
			variable.renameAs(newName);
			return newName;
		}
		renameNext() {
			return this.__ks_func_renameNext_rt.call(null, this, this, arguments);
		}
		__ks_func_renameNext_1(name, line) {
			if(KSType.isString(this._renamedVariables[name])) {
				return;
			}
			const newName = this.declareVariable(name, this);
			this._renamedVariables[name] = newName;
			this._declarations[newName] = true;
			const variables = this._variables[name];
			let i = 0;
			while((i < variables.length) && KSOperator.lt(variables[i], line)) {
				i += 2;
			}
			const variable = variables[i + 1];
			variable.renameAs(newName);
		}
		__ks_func_renameNext_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_renameNext_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_renameNext_rt) {
				return super.__ks_func_renameNext_rt.call(null, that, BlockScope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_replaceVariable_0(name, variable) {
			variable = super.__ks_func_replaceVariable_0(name, variable);
			if(!(this._declarations[name] === true)) {
				this._upatedInferables[name] = (() => {
					const d = new Dictionary();
					d.isVariable = true;
					d.type = variable.__ks_func_getRealType_0();
					return d;
				})();
			}
			return variable;
		}
		__ks_func_replaceVariable_1(name, type, downcast, absolute, node) {
			if(downcast === void 0 || downcast === null) {
				downcast = false;
			}
			if(absolute === void 0 || absolute === null) {
				absolute = true;
			}
			const variable = super.__ks_func_replaceVariable_1(name, type, downcast, absolute, node);
			if(!(this._declarations[name] === true)) {
				this._upatedInferables[name] = (() => {
					const d = new Dictionary();
					d.isVariable = true;
					d.type = variable.__ks_func_getRealType_0();
					return d;
				})();
			}
			return variable;
		}
	}
	class LaxInlineBlockScope extends InlineBlockScope {
		static __ks_new_0(...args) {
			const o = Object.create(LaxInlineBlockScope.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_declareVariable_0(name, scope) {
			if(($keywords[name] === true) || this.__ks_func_hasRenamedVariable_0(name)) {
				const newName = this.__ks_func_getNewName_0(name);
				if(!KSType.isClassInstance(this._variables[name], Variable)) {
					this._declarations[newName] = true;
				}
				return newName;
			}
			else {
				this._declarations[name] = true;
				return null;
			}
		}
		__ks_func_isBleeding_0() {
			return true;
		}
	}
	class ImportScope extends BlockScope {
		static __ks_new_0(...args) {
			const o = Object.create(ImportScope.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._scopeRenames = new Dictionary();
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		addVariable() {
			return this.__ks_func_addVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_addVariable_0(name, variable, node) {
			if(node === void 0) {
				node = null;
			}
			if(this.__ks_func_hasDefinedVariable_0(name)) {
				SyntaxException.throwAlreadyDeclared(name, node);
			}
			if(($keywords[name] === true) || KSType.isNumber(this._renamedIndexes[name])) {
				const newName = this.__ks_func_getNewName_0(name);
				if(!KSType.isArray(this._variables[name])) {
					this._declarations[newName] = true;
				}
				this._renamedVariables[name] = newName;
				variable.__ks_func_renameAs_0(newName);
			}
			else {
				this._declarations[name] = true;
			}
			this._variables[name] = [this.__ks_func_line_0(), variable];
		}
		__ks_func_addVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Variable);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addVariable_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_addVariable_rt) {
				return super.__ks_func_addVariable_rt.call(null, that, BlockScope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isRenamed_0(name, newName, scope, mode) {
			if((mode & MatchingMode.Renamed) !== 0n) {
				let renames = this._scopeRenames[name];
				if(KSType.isValue(renames)) {
					for(let __ks_0 = 0, __ks_1 = renames.length, rename; __ks_0 < __ks_1; ++__ks_0) {
						rename = renames[__ks_0];
						if(rename.name === newName) {
							return true;
						}
					}
				}
			}
			return name === newName;
		}
		__ks_func_rename_4(name, newName, scope) {
			if(newName !== name) {
				let renames = this._scopeRenames[name];
				if(KSType.isValue(renames)) {
					renames.push((() => {
						const d = new Dictionary();
						d.name = newName;
						d.scope = scope;
						return d;
					})());
				}
				else {
					this._scopeRenames[name] = [(() => {
						const d = new Dictionary();
						d.name = newName;
						d.scope = scope;
						return d;
					})()];
				}
			}
		}
		__ks_func_rename_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Scope);
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
					return proto.__ks_func_rename_4.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_rename_rt.call(null, that, BlockScope.prototype, args);
		}
		resetReference() {
			return this.__ks_func_resetReference_rt.call(null, this, this, arguments);
		}
		__ks_func_resetReference_0(name) {
		}
		__ks_func_resetReference_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_resetReference_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_resetReference_rt) {
				return super.__ks_func_resetReference_rt.call(null, that, BlockScope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_resolveReference_2(name, explicitlyNull, parameters) {
			if(explicitlyNull === void 0 || explicitlyNull === null) {
				explicitlyNull = false;
			}
			if(parameters === void 0 || parameters === null) {
				parameters = [];
			}
			const hash = ReferenceType.__ks_sttc_toQuote_1(name, explicitlyNull, parameters);
			if(!KSType.isClassInstance(this._references[hash], ReferenceType)) {
				this._references[hash] = ReferenceType.__ks_new_0(this, name, explicitlyNull, parameters);
			}
			return this._references[hash];
		}
	}
	class MacroScope extends Scope {
		static __ks_new_0() {
			const o = Object.create(MacroScope.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._matchingTypes = new Dictionary();
			this._predefined = new Dictionary();
			this._references = new Dictionary();
			this._renamedIndexes = new Dictionary();
			this._renamedVariables = new Dictionary();
			this._variables = new Dictionary();
		}
		__ks_cons_0() {
			this._predefined.__Array = Variable.__ks_sttc_createPredefinedClass_0("Array", this);
			this._predefined.__Boolean = Variable.__ks_sttc_createPredefinedClass_0("Boolean", this);
			this._predefined.__Class = Variable.__ks_sttc_createPredefinedClass_0("Class", this);
			this._predefined.__Date = Variable.__ks_sttc_createPredefinedClass_0("Date", this);
			this._predefined.__Dictionary = Variable.__ks_sttc_createPredefinedClass_0("Dictionary", this);
			this._predefined.__Enum = Variable.__ks_sttc_createPredefinedClass_0("Enum", this);
			this._predefined.__Error = Variable.__ks_sttc_createPredefinedClass_0("Error", this);
			this._predefined.__Function = Variable.__ks_sttc_createPredefinedClass_0("Function", this);
			this._predefined.__Namespace = Variable.__ks_sttc_createPredefinedClass_0("Namespace", this);
			this._predefined.__Number = Variable.__ks_sttc_createPredefinedClass_0("Number", this);
			this._predefined.__String = Variable.__ks_sttc_createPredefinedClass_0("String", this);
			this._predefined.__Struct = Variable.__ks_sttc_createPredefinedClass_0("Struct", this);
			this._predefined.__RegExp = Variable.__ks_sttc_createPredefinedClass_0("RegExp", this);
			this._predefined.__Tuple = Variable.__ks_sttc_createPredefinedClass_0("Tuple", this);
			this._predefined.__false = Variable.__ks_new_1("false", true, true, this.__ks_func_reference_7("Boolean"));
			this._predefined.__null = new Variable("null", true, true, Type.Null);
			this._predefined.__true = Variable.__ks_new_1("true", true, true, this.__ks_func_reference_7("Boolean"));
			this._predefined.__Infinity = Variable.__ks_new_1("Infinity", true, true, this.__ks_func_reference_7("Number"));
			this._predefined.__Math = Variable.__ks_new_1("Math", true, true, this.__ks_func_reference_7("Dictionary"));
			this._predefined.__NaN = Variable.__ks_new_1("NaN", true, true, this.__ks_func_reference_7("Number"));
			this._predefined.__Object = Variable.__ks_new_1("Object", true, true, AliasType.__ks_new_1(this, ExclusionType.__ks_new_0(this, [AnyType.Explicit, this.__ks_func_reference_7("Array"), this.__ks_func_reference_7("Boolean"), this.__ks_func_reference_7("Dictionary"), this.__ks_func_reference_7("Enum"), this.__ks_func_reference_7("Function"), this.__ks_func_reference_7("Namespace"), this.__ks_func_reference_7("Number"), this.__ks_func_reference_7("String"), this.__ks_func_reference_7("Struct"), this.__ks_func_reference_7("Tuple")])));
			this._predefined.__Primitive = Variable.__ks_new_1("Primitive", true, true, AliasType.__ks_new_1(this, UnionType.__ks_new_0(this, [this.__ks_func_reference_7("Boolean"), this.__ks_func_reference_7("Number"), this.__ks_func_reference_7("String")])));
			this._predefined.__Expression = Variable.__ks_sttc_createPredefinedClass_0("Expression", this);
			this._predefined.__Identifier = Variable.__ks_sttc_createPredefinedClass_0("Identifier", this);
		}
		__ks_cons_rt(that, args) {
			if(args.length === 0) {
				return MacroScope.prototype.__ks_cons_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		acquireTempName() {
			return this.__ks_func_acquireTempName_rt.call(null, this, this, arguments);
		}
		__ks_func_acquireTempName_0(declare) {
			if(declare === void 0 || declare === null) {
				declare = true;
			}
			throw new NotSupportedException();
		}
		__ks_func_acquireTempName_rt(that, proto, args) {
			const t0 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 1) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
					return proto.__ks_func_acquireTempName_0.call(that, KSHelper.getVararg(args, 0, pts[1]));
				}
			}
			if(super.__ks_func_acquireTempName_rt) {
				return super.__ks_func_acquireTempName_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		authority() {
			return this.__ks_func_authority_rt.call(null, this, this, arguments);
		}
		__ks_func_authority_0() {
			return this;
		}
		__ks_func_authority_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_authority_0.call(that);
			}
			if(super.__ks_func_authority_rt) {
				return super.__ks_func_authority_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		block() {
			return this.__ks_func_block_rt.call(null, this, this, arguments);
		}
		__ks_func_block_0() {
			return this;
		}
		__ks_func_block_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_block_0.call(that);
			}
			if(super.__ks_func_block_rt) {
				return super.__ks_func_block_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		declareVariable() {
			return this.__ks_func_declareVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_declareVariable_0(name, scope) {
			if(($keywords[name] === true) || KSType.isNumber(this._renamedIndexes[name])) {
				let index = KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : 0;
				let newName = "__ks_" + name + "_" + ++index;
				while(KSType.isClassInstance(this._variables[newName], Variable)) {
					newName = "__ks_" + name + "_" + ++index;
				}
				this._renamedIndexes[name] = index;
				return newName;
			}
			else {
				return null;
			}
		}
		__ks_func_declareVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Scope);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_declareVariable_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_declareVariable_rt) {
				return super.__ks_func_declareVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		define() {
			return this.__ks_func_define_rt.call(null, this, this, arguments);
		}
		__ks_func_define_0(name, immutable, type = null, initialized, node) {
			if(initialized === void 0 || initialized === null) {
				initialized = false;
			}
			if(KSType.isClassInstance(this._variables[name], Variable)) {
				SyntaxException.__ks_sttc_throwAlreadyDeclared_0(name, node);
			}
			const variable = Variable.__ks_new_1(name, immutable, false, type, initialized);
			this.__ks_func_defineVariable_0(variable, node);
			return variable;
		}
		__ks_func_define_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isBoolean;
			const t2 = value => KSType.isClassInstance(value, Type) || KSType.isNull(value);
			const t3 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 3 && args.length <= 5) {
				if(t0(args[0]) && t1(args[1]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && KSHelper.isVarargs(args, 0, 1, t3, pts, 1) && KSHelper.isVarargs(args, 1, 1, t4, pts, 2) && te(pts, 3)) {
					return proto.__ks_func_define_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
				}
			}
			if(super.__ks_func_define_rt) {
				return super.__ks_func_define_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		defineVariable() {
			return this.__ks_func_defineVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_defineVariable_0(variable, node) {
			const name = variable.__ks_func_name_0();
			if(KSType.isClassInstance(this._variables[name], Variable)) {
				SyntaxException.throwAlreadyDeclared(name, node);
			}
			this._variables[name] = variable;
			let newName = this.declareVariable(name, this);
			if(KSType.isValue(newName)) {
				this._renamedVariables[name] = newName;
				variable.__ks_func_renameAs_0(newName);
			}
			let reference = this._references[name];
			if(KSType.isValue(reference)) {
				reference.reset();
			}
		}
		__ks_func_defineVariable_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Variable);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_defineVariable_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_defineVariable_rt) {
				return super.__ks_func_defineVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getDefinedVariable() {
			return this.__ks_func_getDefinedVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_getDefinedVariable_0(name) {
			if(KSType.isClassInstance(this._variables[name], Variable)) {
				return this._variables[name];
			}
			else {
				return null;
			}
		}
		__ks_func_getDefinedVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getDefinedVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getDefinedVariable_rt) {
				return super.__ks_func_getDefinedVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getRenamedIndex() {
			return this.__ks_func_getRenamedIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_getRenamedIndex_0(name) {
			return KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : 0;
		}
		__ks_func_getRenamedIndex_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getRenamedIndex_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getRenamedIndex_rt) {
				return super.__ks_func_getRenamedIndex_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getVariable() {
			return this.__ks_func_getVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_getVariable_4(name, line) {
			if(line === void 0 || line === null) {
				line = -1;
			}
			if(KSType.isClassInstance(this._variables[name], Variable)) {
				return this._variables[name];
			}
			else if(KSType.isClassInstance(this._predefined[KSHelper.concatString("__", name)], Variable)) {
				return this._predefined[KSHelper.concatString("__", name)];
			}
			else {
				return null;
			}
		}
		__ks_func_getVariable_0(name, line) {
			return this.__ks_func_getVariable_4(name, line);
		}
		__ks_func_getVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0])) {
					return proto.__ks_func_getVariable_4.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getVariable_rt) {
				return super.__ks_func_getVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasDeclaredVariable() {
			return this.__ks_func_hasDeclaredVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasDeclaredVariable_0(name) {
			return KSType.isClassInstance(this._variables[name], Variable);
		}
		__ks_func_hasDeclaredVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasDeclaredVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasDeclaredVariable_rt) {
				return super.__ks_func_hasDeclaredVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasDefinedVariable() {
			return this.__ks_func_hasDefinedVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasDefinedVariable_0(name) {
			return KSType.isClassInstance(this._variables[name], Variable);
		}
		__ks_func_hasDefinedVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasDefinedVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasDefinedVariable_rt) {
				return super.__ks_func_hasDefinedVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasVariable() {
			return this.__ks_func_hasVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasVariable_1(name, line) {
			if(line === void 0 || line === null) {
				line = -1;
			}
			return KSType.isClassInstance(this._variables[name], Variable);
		}
		__ks_func_hasVariable_0(name, line) {
			return this.__ks_func_hasVariable_1(name, line);
		}
		__ks_func_hasVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0])) {
					return proto.__ks_func_hasVariable_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_hasVariable_rt) {
				return super.__ks_func_hasVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isMatchingType() {
			return this.__ks_func_isMatchingType_rt.call(null, this, this, arguments);
		}
		__ks_func_isMatchingType_1(a, b, mode) {
			const hash = a.__ks_func_toQuote_0();
			let matches = this._matchingTypes[hash];
			if(KSType.isValue(matches)) {
				for(let i = 0, __ks_0 = matches.length, type; i < __ks_0; i += 2) {
					type = matches[i];
					if(type === b) {
						return matches[i + 1];
					}
				}
			}
			else {
				this._matchingTypes[hash] = [];
			}
			this._matchingTypes[hash].push(b, false);
			const index = this._matchingTypes[hash].length;
			const match = a.__ks_func_isSubsetOf_0(b, mode);
			this._matchingTypes[hash][index - 1] = match;
			return match;
		}
		__ks_func_isMatchingType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
					return proto.__ks_func_isMatchingType_1.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_isMatchingType_rt) {
				return super.__ks_func_isMatchingType_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		reference() {
			return this.__ks_func_reference_rt.call(null, this, this, arguments);
		}
		__ks_func_reference_0(value) {
			if(KSType.isString(value)) {
				return this.__ks_func_reference_7(value);
			}
			return this.__ks_func_reference_8(value);
		}
		__ks_func_reference_8(value) {
			if(KSType.isClassInstance(value, AnyType)) {
				return this.__ks_func_resolveReference_4("Any");
			}
			else if(KSType.isClassInstance(value, ClassVariableType)) {
				return this.reference(value.type());
			}
			else if(KSType.isClassInstance(value, NamedType)) {
				if(value.hasContainer() === true) {
					return value.container().scope().reference(value.name());
				}
				else {
					return this.resolveReference(value.name());
				}
			}
			else if(KSType.isClassInstance(value, ReferenceType)) {
				return this.resolveReference(value.name(), value.isExplicitlyNull(), [...value.parameters()]);
			}
			else if(KSType.isClassInstance(value, Variable)) {
				return this.resolveReference(value.name());
			}
			else {
				console.info(value);
				throw new NotImplementedException();
			}
		}
		__ks_func_reference_7(value, nullable, parameters) {
			if(nullable === void 0 || nullable === null) {
				nullable = false;
			}
			if(parameters === void 0 || parameters === null) {
				parameters = [];
			}
			return this.__ks_func_resolveReference_4(value, nullable, parameters);
		}
		__ks_func_reference_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isValue;
			const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t3 = value => KSType.isArray(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_reference_7.call(that, args[0], void 0, void 0);
				}
				if(t1(args[0])) {
					return proto.__ks_func_reference_8.call(that, args[0]);
				}
			}
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t3, pts, 1) && te(pts, 2)) {
					return proto.__ks_func_reference_7.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			if(super.__ks_func_reference_rt) {
				return super.__ks_func_reference_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		resolveReference() {
			return this.__ks_func_resolveReference_rt.call(null, this, this, arguments);
		}
		__ks_func_resolveReference_4(name, explicitlyNull, parameters) {
			if(explicitlyNull === void 0 || explicitlyNull === null) {
				explicitlyNull = false;
			}
			if(parameters === void 0 || parameters === null) {
				parameters = [];
			}
			const hash = ReferenceType.__ks_sttc_toQuote_1(name, explicitlyNull, parameters);
			if(!KSType.isClassInstance(this._references[hash], ReferenceType)) {
				this._references[hash] = ReferenceType.__ks_new_0(this, name, explicitlyNull, parameters);
			}
			return this._references[hash];
		}
		__ks_func_resolveReference_0(name) {
			return this.__ks_func_resolveReference_4(name);
		}
		__ks_func_resolveReference_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t2 = value => KSType.isArray(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 3) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t2, pts, 1) && te(pts, 2)) {
					return proto.__ks_func_resolveReference_4.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			if(super.__ks_func_resolveReference_rt) {
				return super.__ks_func_resolveReference_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class NamespaceScope extends BlockScope {
		static __ks_new_0(...args) {
			const o = Object.create(NamespaceScope.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(parent) {
			BlockScope.prototype.__ks_cons_0.call(this, parent);
			this._parent = parent.__ks_func_authority_0();
			this._authority = this;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope);
			if(args.length === 1) {
				if(t0(args[0])) {
					return NamespaceScope.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
	}
	class NamespaceTypeScope extends BlockScope {
		static __ks_new_0(...args) {
			const o = Object.create(NamespaceTypeScope.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		addVariable() {
			return this.__ks_func_addVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_addVariable_1(name, variable) {
			if($keywords[name] === true) {
				const newName = this.__ks_func_getNewName_0(name);
				if(!KSType.isArray(this._variables[name])) {
					this._declarations[newName] = true;
				}
				this._renamedVariables[name] = newName;
				variable.__ks_func_renameAs_0(newName);
			}
			else {
				this._declarations[name] = true;
			}
			this._variables[name] = [this.__ks_func_line_0(), variable];
		}
		__ks_func_addVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Variable);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addVariable_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addVariable_rt) {
				return super.__ks_func_addVariable_rt.call(null, that, BlockScope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ModuleScope extends Scope {
		static __ks_new_0() {
			const o = Object.create(ModuleScope.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._chunkTypes = new Dictionary();
			this._declarations = new Dictionary();
			this._lastLine = false;
			this._line = 0;
			this._lineOffset = 0;
			this._macros = new Dictionary();
			this._matchingTypes = new Dictionary();
			this._predefined = new Dictionary();
			this._references = new Dictionary();
			this._renamedIndexes = new Dictionary();
			this._renamedVariables = new Dictionary();
			this._reservedIndex = -1;
			this._stashes = new Dictionary();
			this._tempDeclarations = [];
			this._tempIndex = -1;
			this._tempNames = new Dictionary();
			this._variables = new Dictionary();
		}
		__ks_cons_0() {
			this._predefined.__Array = Variable.__ks_sttc_createPredefinedClass_0("Array", this);
			this._predefined.__Boolean = Variable.__ks_sttc_createPredefinedClass_0("Boolean", this);
			this._predefined.__Class = Variable.__ks_sttc_createPredefinedClass_0("Class", this);
			this._predefined.__Date = Variable.__ks_sttc_createPredefinedClass_0("Date", this);
			this._predefined.__Dictionary = Variable.__ks_sttc_createPredefinedClass_0("Dictionary", this);
			this._predefined.__Enum = Variable.__ks_sttc_createPredefinedClass_0("Enum", this);
			this._predefined.__Error = Variable.__ks_sttc_createPredefinedClass_0("Error", this);
			this._predefined.__Function = Variable.__ks_sttc_createPredefinedClass_0("Function", this);
			this._predefined.__Namespace = Variable.__ks_sttc_createPredefinedClass_0("Namespace", this);
			this._predefined.__Number = Variable.__ks_sttc_createPredefinedClass_0("Number", this);
			this._predefined.__String = Variable.__ks_sttc_createPredefinedClass_0("String", this);
			this._predefined.__Struct = Variable.__ks_sttc_createPredefinedClass_0("Struct", this);
			this._predefined.__RegExp = Variable.__ks_sttc_createPredefinedClass_0("RegExp", this);
			this._predefined.__Tuple = Variable.__ks_sttc_createPredefinedClass_0("Tuple", this);
			this._predefined.__false = Variable.__ks_new_1("false", true, true, this.__ks_func_reference_9("Boolean"));
			this._predefined.__null = new Variable("null", true, true, NullType.Explicit);
			this._predefined.__true = Variable.__ks_new_1("true", true, true, this.__ks_func_reference_9("Boolean"));
			this._predefined.__Infinity = Variable.__ks_new_1("Infinity", true, true, this.__ks_func_reference_9("Number"));
			this._predefined.__Math = Variable.__ks_new_1("Math", true, true, this.__ks_func_reference_9("Dictionary"));
			this._predefined.__NaN = Variable.__ks_new_1("NaN", true, true, this.__ks_func_reference_9("Number"));
			this._predefined.__Object = Variable.__ks_new_1("Object", true, true, AliasType.__ks_new_1(this, ExclusionType.__ks_new_0(this, [AnyType.Explicit, this.__ks_func_reference_9("Array"), this.__ks_func_reference_9("Boolean"), this.__ks_func_reference_9("Dictionary"), this.__ks_func_reference_9("Enum"), this.__ks_func_reference_9("Function"), this.__ks_func_reference_9("Namespace"), this.__ks_func_reference_9("Number"), this.__ks_func_reference_9("String"), this.__ks_func_reference_9("Struct"), this.__ks_func_reference_9("Tuple")])));
			this._predefined.__Primitive = Variable.__ks_new_1("Primitive", true, true, AliasType.__ks_new_1(this, UnionType.__ks_new_0(this, [this.__ks_func_reference_9("Boolean"), this.__ks_func_reference_9("Number"), this.__ks_func_reference_9("String")])));
		}
		__ks_cons_rt(that, args) {
			if(args.length === 0) {
				return ModuleScope.prototype.__ks_cons_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		acquireTempName() {
			return this.__ks_func_acquireTempName_rt.call(null, this, this, arguments);
		}
		__ks_func_acquireTempName_0(declare) {
			if(declare === void 0 || declare === null) {
				declare = true;
			}
			for(const name in this._tempNames) {
				if(this._tempNames[name] === true) {
					this._tempNames[name] = false;
					return name;
				}
			}
			const name = KSHelper.concatString("__ks_", ++this._tempIndex);
			this._tempNames[name] = false;
			if(declare) {
				this._tempDeclarations.push(name);
			}
			return name;
		}
		__ks_func_acquireTempName_rt(that, proto, args) {
			const t0 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 1) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
					return proto.__ks_func_acquireTempName_0.call(that, KSHelper.getVararg(args, 0, pts[1]));
				}
			}
			if(super.__ks_func_acquireTempName_rt) {
				return super.__ks_func_acquireTempName_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		acquireUnusedTempName() {
			return this.__ks_func_acquireUnusedTempName_rt.call(null, this, this, arguments);
		}
		__ks_func_acquireUnusedTempName_3() {
			for(const name in this._tempNames) {
				if(this._tempNames[name] === true) {
					this._tempNames[name] = false;
					return name;
				}
			}
			return null;
		}
		__ks_func_acquireUnusedTempName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_acquireUnusedTempName_3.call(that);
			}
			if(super.__ks_func_acquireUnusedTempName_rt) {
				return super.__ks_func_acquireUnusedTempName_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addMacro() {
			return this.__ks_func_addMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_addMacro_1(name, macro) {
			if(KSType.isArray(this._macros[name])) {
				const type = macro.__ks_func_type_41();
				let notAdded = true;
				for(let index = 0, __ks_0 = this._macros[name].length, m; index < __ks_0 && notAdded; ++index) {
					m = this._macros[name][index];
					if(type.isSubsetOf(m.type(), MatchingMode.Signature) === true) {
						this._macros[name].splice(index, 0, macro);
						notAdded = false;
					}
				}
				if(notAdded) {
					this._macros[name].push(macro);
				}
			}
			else {
				this._macros[name] = [macro];
			}
		}
		__ks_func_addMacro_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, MacroDeclaration);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addMacro_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addMacro_rt) {
				return super.__ks_func_addMacro_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addStash() {
			return this.__ks_func_addStash_rt.call(null, this, this, arguments);
		}
		__ks_func_addStash_1(name, fn) {
			if(KSType.isValue(this._stashes[name])) {
				this._stashes[name].push(fn);
			}
			else {
				this._stashes[name] = [fn];
			}
		}
		__ks_func_addStash_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, args.length - 1, t0, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_addStash_1.call(that, args[0], KSHelper.getVarargs(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_addStash_rt) {
				return super.__ks_func_addStash_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		authority() {
			return this.__ks_func_authority_rt.call(null, this, this, arguments);
		}
		__ks_func_authority_0() {
			return this;
		}
		__ks_func_authority_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_authority_0.call(that);
			}
			if(super.__ks_func_authority_rt) {
				return super.__ks_func_authority_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		block() {
			return this.__ks_func_block_rt.call(null, this, this, arguments);
		}
		__ks_func_block_0() {
			return this;
		}
		__ks_func_block_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_block_0.call(that);
			}
			if(super.__ks_func_block_rt) {
				return super.__ks_func_block_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		commitTempVariables() {
			return this.__ks_func_commitTempVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_commitTempVariables_3(variables) {
			__ks_Array.__ks_func_pushUniq_0.call(variables, this._tempDeclarations);
			__ks_Array.__ks_func_clear_0.call(this._tempDeclarations);
		}
		__ks_func_commitTempVariables_rt(that, proto, args) {
			const t0 = KSType.isArray;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_commitTempVariables_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_commitTempVariables_rt) {
				return super.__ks_func_commitTempVariables_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		declareVariable() {
			return this.__ks_func_declareVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_declareVariable_0(name, scope) {
			if(($keywords[name] === true) || ((this._declarations[name] === true) && KSType.isArray(this._variables[name]))) {
				const newName = this.__ks_func_getNewName_1(name);
				if(!KSType.isArray(this._variables[name])) {
					this._declarations[newName] = true;
				}
				return newName;
			}
			else {
				this._declarations[name] = true;
				return null;
			}
		}
		__ks_func_declareVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Scope);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_declareVariable_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_declareVariable_rt) {
				return super.__ks_func_declareVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		define() {
			return this.__ks_func_define_rt.call(null, this, this, arguments);
		}
		__ks_func_define_0(name, immutable, type = null, initialized, node) {
			if(initialized === void 0 || initialized === null) {
				initialized = false;
			}
			if(this.__ks_func_hasDefinedVariable_0(name)) {
				SyntaxException.__ks_sttc_throwAlreadyDeclared_0(name, node);
			}
			const variable = Variable.__ks_new_1(name, immutable, false, type, initialized);
			variable.__ks_func_flagModule_0();
			if(KSType.isClassInstance(node, Statement)) {
				variable.__ks_func_declaration_1(node);
			}
			this.__ks_func_defineVariable_0(variable, node);
			return variable;
		}
		__ks_func_define_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isBoolean;
			const t2 = value => KSType.isClassInstance(value, Type) || KSType.isNull(value);
			const t3 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 3 && args.length <= 5) {
				if(t0(args[0]) && t1(args[1]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && KSHelper.isVarargs(args, 0, 1, t3, pts, 1) && KSHelper.isVarargs(args, 1, 1, t4, pts, 2) && te(pts, 3)) {
					return proto.__ks_func_define_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
				}
			}
			if(super.__ks_func_define_rt) {
				return super.__ks_func_define_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		defineVariable() {
			return this.__ks_func_defineVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_defineVariable_0(variable, node) {
			const name = variable.__ks_func_name_0();
			if(KSType.isArray(this._variables[name])) {
				const variables = this._variables[name];
				const last = __ks_Array.__ks_func_last_0.call(variables);
				if(KSType.isClassInstance(last, Variable)) {
					const declaration = last.__ks_func_declaration_0();
					if(KSType.isClassInstance(declaration, ImportDeclarator)) {
						SyntaxException.throwAlreadyImported(name, declaration.__ks_func_getModuleName_0(), declaration.__ks_func_line_0(), node);
					}
					else {
						SyntaxException.throwAlreadyDeclared(name, node);
					}
				}
				variables.push(this._line, variable);
			}
			else {
				let newName = this.declareVariable(name, this);
				if(KSType.isValue(newName)) {
					this._renamedVariables[name] = newName;
					variable.__ks_func_renameAs_0(newName);
				}
				this._variables[name] = [this._line, variable];
			}
			let reference = this._references[name];
			if(KSType.isValue(reference)) {
				reference.reset();
			}
		}
		__ks_func_defineVariable_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Variable);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_defineVariable_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_defineVariable_rt) {
				return super.__ks_func_defineVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getChunkType() {
			return this.__ks_func_getChunkType_rt.call(null, this, this, arguments);
		}
		__ks_func_getChunkType_4(name) {
			return this.__ks_func_getChunkType_5(name, this._line);
		}
		__ks_func_getChunkType_5(name, line) {
			if(KSType.isArray(this._chunkTypes[name])) {
				const types = this._chunkTypes[name];
				let type = null;
				if((line === -1) || (line > this._line)) {
					type = __ks_Array.__ks_func_last_0.call(types);
				}
				else {
					for(let i = 0, __ks_0 = types.length; i < __ks_0 && KSOperator.lte(types[i], line); i += 2) {
						type = types[i + 1];
					}
				}
				if(type !== null) {
					return type;
				}
			}
			return null;
		}
		__ks_func_getChunkType_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isNumber;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getChunkType_4.call(that, args[0]);
				}
			}
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_getChunkType_5.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getChunkType_rt) {
				return super.__ks_func_getChunkType_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getDefinedVariable() {
			return this.__ks_func_getDefinedVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_getDefinedVariable_0(name) {
			if(KSType.isArray(this._variables[name])) {
				const variables = this._variables[name];
				let variable = null;
				if(this._lastLine) {
					variable = __ks_Array.__ks_func_last_0.call(variables);
				}
				else {
					const line = this._line;
					for(let i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable === false) {
					return null;
				}
				else if(variable !== null) {
					return variable;
				}
			}
			return null;
		}
		__ks_func_getDefinedVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getDefinedVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getDefinedVariable_rt) {
				return super.__ks_func_getDefinedVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getLineOffset_0() {
			return this._lineOffset;
		}
		getMacro() {
			return this.__ks_func_getMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_getMacro_2(data, parent) {
			if(KSHelper.valueOf(data.callee.kind) === NodeKind.Identifier.value) {
				if(KSType.isValue(this._macros[data.callee.name])) {
					const __ks_arguments_1 = MacroArgument.build(data.arguments);
					for(let __ks_0 = 0, __ks_1 = this._macros[data.callee.name].length, macro; __ks_0 < __ks_1; ++__ks_0) {
						macro = this._macros[data.callee.name][__ks_0];
						if(macro.matchArguments(__ks_arguments_1) === true) {
							return macro;
						}
					}
				}
				SyntaxException.throwUnmatchedMacro(data.callee.name, parent, data);
			}
			else {
				const path = Generator.generate(data.callee);
				if(KSType.isValue(this._macros[path])) {
					const __ks_arguments_1 = MacroArgument.build(data.arguments);
					for(let __ks_0 = 0, __ks_1 = this._macros[path].length, macro; __ks_0 < __ks_1; ++__ks_0) {
						macro = this._macros[path][__ks_0];
						if(macro.matchArguments(__ks_arguments_1) === true) {
							return macro;
						}
					}
				}
				SyntaxException.throwUnmatchedMacro(path, parent, data);
			}
		}
		__ks_func_getMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_getMacro_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getMacro_rt) {
				return super.__ks_func_getMacro_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getNewName() {
			return this.__ks_func_getNewName_rt.call(null, this, this, arguments);
		}
		__ks_func_getNewName_1(name) {
			let index = KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : 0;
			let newName = "__ks_" + name + "_" + ++index;
			while(this._declarations[newName] === true) {
				newName = "__ks_" + name + "_" + ++index;
			}
			this._renamedIndexes[name] = index;
			return newName;
		}
		__ks_func_getNewName_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getNewName_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_getNewName_rt) {
				return super.__ks_func_getNewName_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getPredefined() {
			return this.__ks_func_getPredefined_rt.call(null, this, this, arguments);
		}
		__ks_func_getPredefined_0(name) {
			if(KSType.isValue(this._predefined["__" + name])) {
				return this._predefined["__" + name].getDeclaredType();
			}
			else {
				return null;
			}
		}
		__ks_func_getPredefined_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getPredefined_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getPredefined_rt) {
				return super.__ks_func_getPredefined_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getRawLine() {
			return this.__ks_func_getRawLine_rt.call(null, this, this, arguments);
		}
		__ks_func_getRawLine_3() {
			return this._line - this._lineOffset;
		}
		__ks_func_getRawLine_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getRawLine_3.call(that);
			}
			if(super.__ks_func_getRawLine_rt) {
				return super.__ks_func_getRawLine_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getRenamedIndex() {
			return this.__ks_func_getRenamedIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_getRenamedIndex_0(name) {
			return KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : 0;
		}
		__ks_func_getRenamedIndex_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getRenamedIndex_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getRenamedIndex_rt) {
				return super.__ks_func_getRenamedIndex_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getReservedName() {
			return this.__ks_func_getReservedName_rt.call(null, this, this, arguments);
		}
		__ks_func_getReservedName_1() {
			return KSHelper.concatString("__ks_00", ++this._reservedIndex);
		}
		__ks_func_getReservedName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getReservedName_1.call(that);
			}
			if(super.__ks_func_getReservedName_rt) {
				return super.__ks_func_getReservedName_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getTempIndex() {
			return this.__ks_func_getTempIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_getTempIndex_3() {
			return this._tempIndex;
		}
		__ks_func_getTempIndex_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getTempIndex_3.call(that);
			}
			if(super.__ks_func_getTempIndex_rt) {
				return super.__ks_func_getTempIndex_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getVariable() {
			return this.__ks_func_getVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_getVariable_5(name, line) {
			if(line === void 0 || line === null) {
				line = this._line;
			}
			if(!KSType.isArray(this._variables[name]) && KSType.isString($types[name])) {
				name = $types[name];
			}
			if(KSType.isArray(this._variables[name])) {
				const variables = this._variables[name];
				let variable = null;
				if((line === -1) || (line > this._line)) {
					variable = __ks_Array.__ks_func_last_0.call(variables);
				}
				else {
					for(let i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable === false) {
					return null;
				}
				else if(variable !== null) {
					return variable;
				}
			}
			if(KSType.isClassInstance(this._predefined[KSHelper.concatString("__", name)], Variable)) {
				return this._predefined[KSHelper.concatString("__", name)];
			}
			else {
				return null;
			}
		}
		__ks_func_getVariable_0(name, line) {
			return this.__ks_func_getVariable_5(name, line);
		}
		__ks_func_getVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isNumber(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_getVariable_5.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_getVariable_rt) {
				return super.__ks_func_getVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasDeclaredVariable() {
			return this.__ks_func_hasDeclaredVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasDeclaredVariable_0(name) {
			return this._declarations[name] === true;
		}
		__ks_func_hasDeclaredVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasDeclaredVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_hasDeclaredVariable_rt) {
				return super.__ks_func_hasDeclaredVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasDefinedVariable() {
			return this.__ks_func_hasDefinedVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasDefinedVariable_0(name) {
			return this.__ks_func_hasDefinedVariable_4(name, this._line);
		}
		__ks_func_hasDefinedVariable_4(name, line) {
			if(KSType.isArray(this._variables[name])) {
				const variables = this._variables[name];
				let variable = null;
				if((line === -1) || (line > this._line)) {
					variable = __ks_Array.__ks_func_last_0.call(variables);
				}
				else {
					for(let i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable !== null) {
					return variable !== false;
				}
			}
			return false;
		}
		__ks_func_hasDefinedVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isNumber;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasDefinedVariable_0.call(that, args[0]);
				}
			}
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_hasDefinedVariable_4.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_hasDefinedVariable_rt) {
				return super.__ks_func_hasDefinedVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasDefinedVariableBefore() {
			return this.__ks_func_hasDefinedVariableBefore_rt.call(null, this, this, arguments);
		}
		__ks_func_hasDefinedVariableBefore_0(name, line) {
			if(KSType.isArray(this._variables[name])) {
				return KSOperator.lt(this._variables[name][0], line);
			}
			return false;
		}
		__ks_func_hasDefinedVariableBefore_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isNumber;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_hasDefinedVariableBefore_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_hasDefinedVariableBefore_rt) {
				return super.__ks_func_hasDefinedVariableBefore_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_hasMacro_3(name) {
			return KSType.isArray(this._macros[name]);
		}
		__ks_func_hasMacro_0(name) {
			return this.__ks_func_hasMacro_3(name);
		}
		__ks_func_hasMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasMacro_3.call(that, args[0]);
				}
			}
			return super.__ks_func_hasMacro_rt.call(null, that, Scope.prototype, args);
		}
		hasVariable() {
			return this.__ks_func_hasVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_hasVariable_0(name, line) {
			if(line === void 0 || line === null) {
				line = this._line;
			}
			if(KSType.isArray(this._variables[name])) {
				const variables = this._variables[name];
				let variable = null;
				if((line === -1) || (line > this._line)) {
					variable = __ks_Array.__ks_func_last_0.call(variables);
				}
				else {
					for(let i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable !== null) {
					return variable !== false;
				}
			}
			return KSType.isClassInstance(this._predefined["__" + name], Variable);
		}
		__ks_func_hasVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isNumber(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_hasVariable_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_hasVariable_rt) {
				return super.__ks_func_hasVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAtLastLine() {
			return this.__ks_func_isAtLastLine_rt.call(null, this, this, arguments);
		}
		__ks_func_isAtLastLine_1() {
			return this._lastLine;
		}
		__ks_func_isAtLastLine_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAtLastLine_1.call(that);
			}
			if(super.__ks_func_isAtLastLine_rt) {
				return super.__ks_func_isAtLastLine_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isMatchingType() {
			return this.__ks_func_isMatchingType_rt.call(null, this, this, arguments);
		}
		__ks_func_isMatchingType_2(a, b, mode) {
			const hash = a.__ks_func_toQuote_0();
			let matches = this._matchingTypes[hash];
			if(KSType.isValue(matches)) {
				for(let i = 0, __ks_0 = matches.length, type; i < __ks_0; i += 2) {
					type = matches[i];
					if(type === b) {
						return matches[i + 1];
					}
				}
			}
			else {
				this._matchingTypes[hash] = [];
			}
			this._matchingTypes[hash].push(b, false);
			const index = this._matchingTypes[hash].length;
			const match = a.__ks_func_isSubsetOf_0(b, mode);
			this._matchingTypes[hash][index - 1] = match;
			return match;
		}
		__ks_func_isMatchingType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isEnumInstance(value, MatchingMode);
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
					return proto.__ks_func_isMatchingType_2.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_isMatchingType_rt) {
				return super.__ks_func_isMatchingType_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRedeclaredVariable() {
			return this.__ks_func_isRedeclaredVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isRedeclaredVariable_3(name) {
			if(KSType.isArray(this._variables[name])) {
				return this._variables[name].length !== 2;
			}
			else {
				return false;
			}
		}
		__ks_func_isRedeclaredVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isRedeclaredVariable_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_isRedeclaredVariable_rt) {
				return super.__ks_func_isRedeclaredVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRenamedVariable() {
			return this.__ks_func_isRenamedVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isRenamedVariable_3(name) {
			return KSType.isString(this._renamedVariables[name]);
		}
		__ks_func_isRenamedVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isRenamedVariable_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_isRenamedVariable_rt) {
				return super.__ks_func_isRenamedVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_line_0() {
			return this._line;
		}
		__ks_func_line_4(line) {
			this._line = line + this._lineOffset;
		}
		__ks_func_line_rt(that, proto, args) {
			const t0 = KSType.isNumber;
			if(args.length === 0) {
				return proto.__ks_func_line_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_line_4.call(that, args[0]);
				}
			}
			return super.__ks_func_line_rt.call(null, that, Scope.prototype, args);
		}
		listCompositeMacros() {
			return this.__ks_func_listCompositeMacros_rt.call(null, this, this, arguments);
		}
		__ks_func_listCompositeMacros_1(name) {
			const regex = new RegExp(KSHelper.concatString("^", name, "\."));
			const list = [];
			for(let n in this._macros) {
				let m = this._macros[n];
				if(regex.test(n) === true) {
					list.push.apply(list, [].concat(m));
				}
			}
			return list;
		}
		__ks_func_listCompositeMacros_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listCompositeMacros_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_listCompositeMacros_rt) {
				return super.__ks_func_listCompositeMacros_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listDefinedVariables() {
			return this.__ks_func_listDefinedVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_listDefinedVariables_1() {
			const variables = [];
			for(let __ks_0 in this._variables) {
				const array = this._variables[__ks_0];
				variables.push(array[KSOperator.subtraction(array.length, 1)]);
			}
			return variables;
		}
		__ks_func_listDefinedVariables_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_listDefinedVariables_1.call(that);
			}
			if(super.__ks_func_listDefinedVariables_rt) {
				return super.__ks_func_listDefinedVariables_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listMacros() {
			return this.__ks_func_listMacros_rt.call(null, this, this, arguments);
		}
		__ks_func_listMacros_1(name) {
			if(KSType.isArray(this._macros[name])) {
				return this._macros[name];
			}
			else {
				return [];
			}
		}
		__ks_func_listMacros_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listMacros_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_listMacros_rt) {
				return super.__ks_func_listMacros_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		module() {
			return this.__ks_func_module_rt.call(null, this, this, arguments);
		}
		__ks_func_module_3() {
			return this;
		}
		__ks_func_module_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_module_3.call(that);
			}
			if(super.__ks_func_module_rt) {
				return super.__ks_func_module_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		processStash() {
			return this.__ks_func_processStash_rt.call(null, this, this, arguments);
		}
		__ks_func_processStash_1(name) {
			const stash = this._stashes[name];
			if(KSType.isValue(stash)) {
				delete this._stashes[name];
				let variable = this.__ks_func_getVariable_5(name);
				for(let __ks_0 = 0, __ks_1 = stash.length, fn; __ks_0 < __ks_1; ++__ks_0) {
					fn = stash[__ks_0];
					if(fn[0](variable) === true) {
						break;
					}
				}
				variable = this.__ks_func_getVariable_5(name);
				for(let __ks_0 = 0, __ks_1 = stash.length, fn; __ks_0 < __ks_1; ++__ks_0) {
					fn = stash[__ks_0];
					fn[1](variable);
				}
				return true;
			}
			else {
				return false;
			}
		}
		__ks_func_processStash_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_processStash_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_processStash_rt) {
				return super.__ks_func_processStash_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		reference() {
			return this.__ks_func_reference_rt.call(null, this, this, arguments);
		}
		__ks_func_reference_0(value) {
			if(KSType.isString(value)) {
				return this.__ks_func_reference_9(value);
			}
			return this.__ks_func_reference_10(value);
		}
		__ks_func_reference_10(value) {
			if(KSType.isClassInstance(value, AnyType)) {
				return this.__ks_func_resolveReference_5("Any");
			}
			else if(KSType.isClassInstance(value, ClassVariableType)) {
				return this.reference(value.type());
			}
			else if(KSType.isClassInstance(value, NamedType)) {
				if(value.hasContainer() === true) {
					return value.container().scope().reference(value.name());
				}
				else {
					return this.resolveReference(value.name());
				}
			}
			else if(KSType.isClassInstance(value, ReferenceType)) {
				return this.resolveReference(value.name(), value.isExplicitlyNull());
			}
			else if(KSType.isClassInstance(value, Variable)) {
				return this.resolveReference(value.name());
			}
			else {
				console.info(value);
				throw new NotImplementedException();
			}
		}
		__ks_func_reference_9(value, nullable, parameters) {
			if(nullable === void 0 || nullable === null) {
				nullable = false;
			}
			if(parameters === void 0 || parameters === null) {
				parameters = [];
			}
			return this.__ks_func_resolveReference_5(value, nullable, parameters);
		}
		__ks_func_reference_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isValue;
			const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t3 = value => KSType.isArray(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_reference_9.call(that, args[0], void 0, void 0);
				}
				if(t1(args[0])) {
					return proto.__ks_func_reference_10.call(that, args[0]);
				}
			}
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t3, pts, 1) && te(pts, 2)) {
					return proto.__ks_func_reference_9.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			if(super.__ks_func_reference_rt) {
				return super.__ks_func_reference_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		releaseTempName() {
			return this.__ks_func_releaseTempName_rt.call(null, this, this, arguments);
		}
		__ks_func_releaseTempName_3(name) {
			this._tempNames[name] = true;
		}
		__ks_func_releaseTempName_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_releaseTempName_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_releaseTempName_rt) {
				return super.__ks_func_releaseTempName_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		removeVariable() {
			return this.__ks_func_removeVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_removeVariable_1(name) {
			if(KSType.isArray(this._variables[name])) {
				this._variables[name].push(this._line, false);
			}
		}
		__ks_func_removeVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_removeVariable_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_removeVariable_rt) {
				return super.__ks_func_removeVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		replaceVariable() {
			return this.__ks_func_replaceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_replaceVariable_3(name, variable) {
			if(KSType.isArray(this._variables[name])) {
				const variables = this._variables[name];
				const l = variables.length;
				const line = this._line;
				let i = 0;
				while(((i + 2) < l) && KSOperator.lte(variables[i + 2], line)) {
					i += 2;
				}
				if(KSOperator.lte(variables[i], line)) {
					variables[i + 1] = variable;
				}
			}
			else {
				this._variables[name] = [this._line, variable];
			}
			let reference = this._references[name];
			if(KSType.isValue(reference)) {
				reference.reset();
			}
			return variable;
		}
		__ks_func_replaceVariable_4(name, type, downcast, absolute, node) {
			if(downcast === void 0 || downcast === null) {
				downcast = false;
			}
			if(absolute === void 0 || absolute === null) {
				absolute = true;
			}
			let variable = this.__ks_func_getVariable_5(name);
			if(variable.__ks_func_isDefinitive_0() === true) {
				if(type.isAssignableToVariable(variable.__ks_func_getDeclaredType_0(), downcast)) {
				}
				else if(variable.__ks_func_isInitialized_0() === true) {
					TypeException.throwInvalidAssignement(name, variable.__ks_func_getDeclaredType_0(), type, node);
				}
				else if(type.__ks_func_isNullable_0() === true) {
					if(!(type.__ks_func_setNullable_0(false).isAssignableToVariable(variable.__ks_func_getDeclaredType_0(), downcast) === true)) {
						TypeException.throwInvalidAssignement(name, variable.__ks_func_getDeclaredType_0(), type, node);
					}
				}
			}
			if(!type.__ks_func_equals_0(variable.__ks_func_getRealType_0())) {
				if(KSType.isArray(this._variables[name])) {
					variable.__ks_func_setRealType_1(type, absolute, this);
				}
				else {
					variable = variable.__ks_func_clone_0().setRealType(type, absolute, this);
					this._variables[name] = [this._line, variable];
				}
			}
			let reference = this._references[name];
			if(KSType.isValue(reference)) {
				reference.reset();
			}
			return variable;
		}
		__ks_func_replaceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Variable);
			const t2 = value => KSType.isClassInstance(value, Type);
			const t3 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_replaceVariable_3.call(that, args[0], args[1]);
				}
			}
			if(args.length >= 3 && args.length <= 5) {
				if(t0(args[0]) && t2(args[1]) && KSHelper.isVarargs(args, 0, 1, t3, pts = [2], 0) && KSHelper.isVarargs(args, 0, 1, t3, pts, 1) && KSHelper.isVarargs(args, 1, 1, t4, pts, 2) && te(pts, 3)) {
					return proto.__ks_func_replaceVariable_4.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
				}
			}
			if(super.__ks_func_replaceVariable_rt) {
				return super.__ks_func_replaceVariable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		resolveReference() {
			return this.__ks_func_resolveReference_rt.call(null, this, this, arguments);
		}
		__ks_func_resolveReference_5(name, explicitlyNull, parameters) {
			if(explicitlyNull === void 0 || explicitlyNull === null) {
				explicitlyNull = false;
			}
			if(parameters === void 0 || parameters === null) {
				parameters = [];
			}
			const hash = ReferenceType.__ks_sttc_toQuote_1(name, explicitlyNull, parameters);
			if(!KSType.isClassInstance(this._references[hash], ReferenceType)) {
				this._references[hash] = ReferenceType.__ks_new_0(this, name, explicitlyNull, parameters);
			}
			return this._references[hash];
		}
		__ks_func_resolveReference_0(name) {
			return this.__ks_func_resolveReference_5(name);
		}
		__ks_func_resolveReference_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t2 = value => KSType.isArray(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 3) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t2, pts, 1) && te(pts, 2)) {
					return proto.__ks_func_resolveReference_5.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			if(super.__ks_func_resolveReference_rt) {
				return super.__ks_func_resolveReference_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setLineOffset() {
			return this.__ks_func_setLineOffset_rt.call(null, this, this, arguments);
		}
		__ks_func_setLineOffset_1(lineOffset) {
			this._lineOffset = lineOffset;
		}
		__ks_func_setLineOffset_rt(that, proto, args) {
			const t0 = KSType.isNumber;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setLineOffset_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_setLineOffset_rt) {
				return super.__ks_func_setLineOffset_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		updateInferable() {
			return this.__ks_func_updateInferable_rt.call(null, this, this, arguments);
		}
		__ks_func_updateInferable_2(name, data, node) {
			if(data.isVariable === true) {
				this.replaceVariable(name, data.type, true, true, node);
			}
			else {
				if(KSType.isArray(this._chunkTypes[name])) {
					this._chunkTypes[name].push(this._line, data.type);
				}
				else {
					this._chunkTypes[name] = [this._line, data.type];
				}
			}
		}
		__ks_func_updateInferable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_updateInferable_2.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_updateInferable_rt) {
				return super.__ks_func_updateInferable_rt.call(null, that, Scope.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class OperationScope extends InlineBlockScope {
		static __ks_new_0(...args) {
			const o = Object.create(OperationScope.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_block_0() {
			return this._parent.__ks_func_block_0();
		}
		__ks_func_define_0(name, immutable, type = null, initialized, node) {
			if(initialized === void 0 || initialized === null) {
				initialized = false;
			}
			return this._parent.__ks_func_define_0(name, immutable, type, initialized, node);
		}
		__ks_func_replaceVariable_1(name, type, downcast, absolute, node) {
			if(downcast === void 0 || downcast === null) {
				downcast = false;
			}
			if(absolute === void 0 || absolute === null) {
				absolute = true;
			}
			let variable = this.__ks_func_getVariable_2(name);
			if(variable.__ks_func_isDefinitive_0() === true) {
				if(type.isAssignableToVariable(variable.__ks_func_getDeclaredType_0(), downcast)) {
				}
				else if(variable.__ks_func_isInitialized_0() === true) {
					TypeException.throwInvalidAssignement(name, variable.__ks_func_getDeclaredType_0(), type, node);
				}
				else if(type.__ks_func_isNullable_0() === true) {
					if(!(type.__ks_func_setNullable_0(false).isAssignableToVariable(variable.__ks_func_getDeclaredType_0(), downcast) === true)) {
						TypeException.throwInvalidAssignement(name, variable.__ks_func_getDeclaredType_0(), type, node);
					}
				}
			}
			if(!type.__ks_func_equals_0(variable.__ks_func_getRealType_0())) {
				if(KSType.isArray(this._variables[name])) {
					variable.__ks_func_setRealType_1(type, absolute, this);
				}
				else {
					variable = variable.__ks_func_clone_0().setRealType(type, absolute, this);
					this._variables[name] = [this.__ks_func_line_0(), variable];
				}
			}
			return variable;
		}
	}
	class Module {
		static __ks_new_0(...args) {
			const o = Object.create(Module.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
			this._aliens = new Dictionary();
			this._arguments = [];
			this._binary = false;
			this._exports = new Dictionary();
			this._exportedMacros = new Dictionary();
			this._flags = new Dictionary();
			this._hashes = new Dictionary();
			this._imports = new Dictionary();
			this._includeModules = new Dictionary();
			this._includePaths = new Dictionary();
			this._metaExports = null;
			this._metaRequirements = null;
			this._register = false;
			this._requirements = [];
			this._requirementByNames = new Dictionary();
		}
		__ks_cons_0(data, compiler, file) {
			if(file === void 0) {
				file = null;
			}
			this._compiler = compiler;
			this._file = file;
			this._data = this.__ks_func_parse_0(data, file);
			this._directory = path.dirname(file);
			this._options = Attribute.configure(this._data, this._compiler._options, AttributeTarget.Global, file, true);
			for(let __ks_0 = 0, __ks_1 = this._data.attributes.length, attr; __ks_0 < __ks_1; ++__ks_0) {
				attr = this._data.attributes[__ks_0];
				if((KSHelper.valueOf(attr.declaration.kind) === NodeKind.Identifier.value) && (attr.declaration.name === "bin")) {
					this._binary = true;
				}
			}
			if(KSType.isString(this._compiler._options.output)) {
				this._output = this._compiler._options.output;
				if(KSType.isArray(this._compiler._options.rewire)) {
					this._rewire = this._compiler._options.rewire;
				}
				else {
					this._rewire = [];
				}
			}
			else {
				this._output = null;
			}
			this._hashes["."] = this._compiler.__ks_func_sha256_0(file, data);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, Compiler);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t0(args[2])) {
					return Module.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		addAlien() {
			return this.__ks_func_addAlien_rt.call(null, this, this, arguments);
		}
		__ks_func_addAlien_0(name, type) {
			this._aliens[name] = type;
			return this;
		}
		__ks_func_addAlien_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addAlien_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		addHash() {
			return this.__ks_func_addHash_rt.call(null, this, this, arguments);
		}
		__ks_func_addHash_0(file, hash) {
			this._hashes[path.relative(this._directory, file)] = hash;
		}
		__ks_func_addHash_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_addHash_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		addHashes() {
			return this.__ks_func_addHashes_rt.call(null, this, this, arguments);
		}
		__ks_func_addHashes_0(file, hashes) {
			let root = path.dirname(file);
			for(const name in hashes) {
				const hash = hashes[name];
				if(name === ".") {
					this._hashes[path.relative(this._directory, file)] = hash;
				}
				else {
					this._hashes[path.relative(this._directory, path.join(root, name))] = hash;
				}
			}
		}
		__ks_func_addHashes_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_addHashes_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		addInclude() {
			return this.__ks_func_addInclude_rt.call(null, this, this, arguments);
		}
		__ks_func_addInclude_0(path) {
			if(!KSType.isString(this._includePaths[path])) {
				this._includePaths[path] = true;
			}
		}
		__ks_func_addInclude_1(path, modulePath, moduleVersion) {
			if((this._includePaths[path] === true) || !KSType.isString(this._includePaths[path])) {
				this._includePaths[path] = modulePath;
			}
			if(KSType.isDictionary(this._includeModules[modulePath])) {
				__ks_Array.__ks_func_pushUniq_0.call(KSHelper.cast(this._includeModules[modulePath].paths, "Array", false, null, "Array"), [path]);
				__ks_Array.__ks_func_pushUniq_0.call(KSHelper.cast(this._includeModules[modulePath].versions, "Array", false, null, "Array"), [moduleVersion]);
			}
			else {
				this._includeModules[modulePath] = (() => {
					const d = new Dictionary();
					d.paths = [path];
					d.versions = [moduleVersion];
					return d;
				})();
			}
		}
		__ks_func_addInclude_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addInclude_0.call(that, args[0]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_addInclude_1.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		addRequirement() {
			return this.__ks_func_addRequirement_rt.call(null, this, this, arguments);
		}
		__ks_func_addRequirement_0(requirement) {
			if(KSType.isValue(this._requirementByNames[requirement.__ks_func_name_0()])) {
				return this;
			}
			requirement.index(this._requirements.length);
			this._requirements.push(requirement);
			this._requirementByNames[requirement.__ks_func_name_0()] = requirement;
			requirement.__ks_func_type_0().flagRequirement();
			return this;
		}
		__ks_func_addRequirement_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Requirement);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addRequirement_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		compile() {
			return this.__ks_func_compile_rt.call(null, this, this, arguments);
		}
		__ks_func_compile_0() {
			this.__ks_func_initiate_0();
			this.__ks_func_finish_0();
		}
		__ks_func_compile_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_compile_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		compiler() {
			return this.__ks_func_compiler_rt.call(null, this, this, arguments);
		}
		__ks_func_compiler_0() {
			return this._compiler;
		}
		__ks_func_compiler_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_compiler_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		directory() {
			return this.__ks_func_directory_rt.call(null, this, this, arguments);
		}
		__ks_func_directory_0() {
			return this._directory;
		}
		__ks_func_directory_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_directory_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(name, identifier) {
			if(this._binary) {
				SyntaxException.__ks_sttc_throwNotBinary_0("export", this);
			}
			const type = identifier.__ks_func_getDeclaredType_0();
			this._exports[name] = (() => {
				const d = new Dictionary();
				d.type = type;
				d.variable = identifier;
				return d;
			})();
			type.flagExported(true).flagReferenced();
		}
		__ks_func_export_1(name, expression) {
			if(this._binary) {
				SyntaxException.__ks_sttc_throwNotBinary_0("export", this);
			}
			const type = KSType.isClassInstance(expression, Expression) ? expression.__ks_func_type_22() : expression.__ks_func_type_0();
			this._exports[name] = (() => {
				const d = new Dictionary();
				d.type = type;
				d.variable = expression;
				return d;
			})();
			type.flagExported(true).flagReferenced();
		}
		__ks_func_export_2(name, variable) {
			if(this._binary) {
				SyntaxException.__ks_sttc_throwNotBinary_0("export", this);
			}
			const type = variable.__ks_func_getDeclaredType_0();
			this._exports[name] = (() => {
				const d = new Dictionary();
				d.type = type;
				d.variable = variable;
				return d;
			})();
			type.flagExported(false).flagReferenced();
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, IdentifierLiteral);
			const t2 = value => KSType.isClassInstance(value, Variable);
			const t3 = value => KSType.isClassInstance(value, ExportProperty) || KSType.isClassInstance(value, Expression);
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_export_0.call(that, args[0], args[1]);
					}
					if(t2(args[1])) {
						return proto.__ks_func_export_2.call(that, args[0], args[1]);
					}
					if(t3(args[1])) {
						return proto.__ks_func_export_1.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
			}
			throw KSHelper.badArgs();
		}
		exportMacro() {
			return this.__ks_func_exportMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_exportMacro_0(name, data) {
			if(this._binary) {
				SyntaxException.__ks_sttc_throwNotBinary_0("export", this);
			}
			if(KSType.isArray(this._exportedMacros[name])) {
				this._exportedMacros[name].push(data);
			}
			else {
				this._exportedMacros[name] = [data];
			}
		}
		__ks_func_exportMacro_1(name, macro) {
			this._body.exportMacro(name, macro);
		}
		__ks_func_exportMacro_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, MacroDeclaration);
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t0(args[1])) {
						return proto.__ks_func_exportMacro_0.call(that, args[0], args[1]);
					}
					if(t1(args[1])) {
						return proto.__ks_func_exportMacro_1.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
			}
			throw KSHelper.badArgs();
		}
		file() {
			return this.__ks_func_file_rt.call(null, this, this, arguments);
		}
		__ks_func_file_0() {
			return this._file;
		}
		__ks_func_file_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_file_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		finish() {
			return this.__ks_func_finish_rt.call(null, this, this, arguments);
		}
		__ks_func_finish_0() {
			this._body.analyse();
			this._body.enhance();
			this._body.prepare();
			this._body.translate();
			for(const name in this._exports) {
				const __ks_export_1 = this._exports[name];
				if(!(__ks_export_1.type.isExportable() === true)) {
					ReferenceException.throwNotExportable(name, this._body);
				}
			}
		}
		__ks_func_finish_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_finish_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		flag() {
			return this.__ks_func_flag_rt.call(null, this, this, arguments);
		}
		__ks_func_flag_0(name) {
			this._flags[name] = true;
		}
		__ks_func_flag_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_flag_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		flagRegister() {
			return this.__ks_func_flagRegister_rt.call(null, this, this, arguments);
		}
		__ks_func_flagRegister_0() {
			this._register = true;
		}
		__ks_func_flagRegister_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagRegister_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		getAlien() {
			return this.__ks_func_getAlien_rt.call(null, this, this, arguments);
		}
		__ks_func_getAlien_0(name) {
			return this._aliens[name];
		}
		__ks_func_getAlien_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getAlien_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		getArgument() {
			return this.__ks_func_getArgument_rt.call(null, this, this, arguments);
		}
		__ks_func_getArgument_0(index) {
			return this._arguments[index];
		}
		__ks_func_getArgument_rt(that, proto, args) {
			const t0 = KSType.isNumber;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getArgument_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		getRequirement() {
			return this.__ks_func_getRequirement_rt.call(null, this, this, arguments);
		}
		__ks_func_getRequirement_0(name) {
			return this._requirementByNames[name];
		}
		__ks_func_getRequirement_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getRequirement_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		hasInclude() {
			return this.__ks_func_hasInclude_rt.call(null, this, this, arguments);
		}
		__ks_func_hasInclude_0(path) {
			return (this._includePaths[path] === true) || KSType.isString(this._includePaths[path]);
		}
		__ks_func_hasInclude_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasInclude_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		import() {
			return this.__ks_func_import_rt.call(null, this, this, arguments);
		}
		__ks_func_import_0(name) {
			this._imports[name] = true;
		}
		__ks_func_import_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_import_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		initiate() {
			return this.__ks_func_initiate_rt.call(null, this, this, arguments);
		}
		__ks_func_initiate_0() {
			this._body = ModuleBlock.__ks_new_0(this._data, this);
			this._body.__ks_func_initiate_0();
		}
		__ks_func_initiate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_initiate_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isBinary() {
			return this.__ks_func_isBinary_rt.call(null, this, this, arguments);
		}
		__ks_func_isBinary_0() {
			return this._binary;
		}
		__ks_func_isBinary_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isBinary_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isUpToDate() {
			return this.__ks_func_isUpToDate_rt.call(null, this, this, arguments);
		}
		__ks_func_isUpToDate_0(file, source) {
			let data = null;
			try {
				data = JSON.parse(fs.readFile(getHashPath.__ks_0(file)));
			}
			catch(__ks_0) {
				return null;
			}
			let root = path.dirname(file);
			for(const name in data.hashes) {
				const hash = data.hashes[name];
				if(name === ".") {
					if(this._compiler.__ks_func_sha256_0(file, source) !== hash) {
						return null;
					}
				}
				else {
					if(this._compiler.sha256(path.join(root, name)) !== hash) {
						return null;
					}
				}
			}
			return data;
		}
		__ks_func_isUpToDate_1(hashes) {
			for(const name in this._hashes) {
				const hash = this._hashes[name];
				const h = hashes[name];
				if(KSType.isValue(h)) {
					if(h !== hash) {
						return false;
					}
				}
				else {
					return false;
				}
			}
			return true;
		}
		__ks_func_isUpToDate_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isUpToDate_1.call(that, args[0]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 2) {
				if(t1(args[0]) && t1(args[1])) {
					return proto.__ks_func_isUpToDate_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		listIncludeVersions() {
			return this.__ks_func_listIncludeVersions_rt.call(null, this, this, arguments);
		}
		__ks_func_listIncludeVersions_0(path, modulePath) {
			if(KSType.isDictionary(this._includeModules[modulePath])) {
				return this._includeModules[modulePath].versions;
			}
			else if(this._includePaths[path] === true) {
				return [""];
			}
			else {
				return null;
			}
		}
		__ks_func_listIncludeVersions_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_listIncludeVersions_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		parse() {
			return this.__ks_func_parse_rt.call(null, this, this, arguments);
		}
		__ks_func_parse_0(data, file) {
			try {
				return Parser.parse(data);
			}
			catch(error) {
				error.fileName = file;
				error.message = KSHelper.concatString(error.message, KSHelper.concatString(" (", error.fileName, ":", error.lineNumber, ":", error.columnNumber, ")"));
				throw error;
			}
		}
		__ks_func_parse_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_parse_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		path() {
			return this.__ks_func_path_rt.call(null, this, this, arguments);
		}
		__ks_func_path_0(x = null, name) {
			if(!KSType.isValue(x) || !KSType.isValue(this._output)) {
				return name;
			}
			let output = null;
			for(let __ks_0 = 0, __ks_1 = this._rewire.length, rewire; __ks_0 < __ks_1; ++__ks_0) {
				rewire = this._rewire[__ks_0];
				if(rewire.input === x) {
					output = path.relative(this._output, rewire.output);
					break;
				}
			}
			if(!KSType.isValue(output)) {
				output = path.relative(this._output, x);
			}
			if(output[0] !== ".") {
				output = KSHelper.concatString("./", output);
			}
			return output;
		}
		__ks_func_path_rt(that, proto, args) {
			const t0 = () => true;
			const t1 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(KSHelper.isVarargs(args, 0, args.length - 1, t0, pts = [0], 0) && KSHelper.isVarargs(args, 1, 1, t1, pts, 1) && te(pts, 2)) {
					return proto.__ks_func_path_0.call(that, KSHelper.getVararg(args, 0, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			throw KSHelper.badArgs();
		}
		scope() {
			return this.__ks_func_scope_rt.call(null, this, this, arguments);
		}
		__ks_func_scope_0() {
			return this._body.scope();
		}
		__ks_func_scope_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_scope_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		setArguments() {
			return this.__ks_func_setArguments_rt.call(null, this, this, arguments);
		}
		__ks_func_setArguments_0(__ks_arguments_1, module, node) {
			if(module === void 0 || module === null) {
				module = this.__ks_default_0_0();
			}
			if(node === void 0 || node === null) {
				node = this._body;
			}
			const scope = this._body.scope();
			if(__ks_arguments_1.length !== 0) {
				const references = new Dictionary();
				const queue = [];
				const alterations = new Dictionary();
				const resets = [];
				const metadata = [];
				for(let index = 0, __ks_0 = this._requirements.length, requirement; index < __ks_0; ++index) {
					requirement = this._requirements[index];
					let name, type;
					if(KSType.isBoolean(__ks_arguments_1[index])) {
						if(requirement.isRequired() === true) {
							SyntaxException.throwMissingRequirement(requirement.name(), module, node);
						}
						else {
							this._arguments.push(false);
						}
					}
					else if(KSType.isValue(__ks_arguments_1[index]) ? ({name, type} = __ks_arguments_1[index], true) : false) {
						if(type.isSubsetOf(requirement.type(), MatchingMode.Signature) === true) {
							if(!(requirement.type().isSubsetOf(type, MatchingMode.Signature) === true)) {
								const index = type.toMetadata(metadata, 0, ExportMode.Requirement, this);
								const newType = Type.toNamedType(requirement.name(), KSType.isValue(references[index]) ? references[index] : Type.import(index, metadata, references, alterations, queue, scope, this._body));
								references[index] = newType;
								if(requirement.type().isExtendable() === true) {
									newType.originals(requirement.type().type());
								}
								newType.__ks_func_flagRequirement_0();
								const variable = scope.getVariable(requirement.name());
								variable.setDeclaredType(newType);
								__ks_Array.__ks_func_pushUniq_0.call(resets, [type, type.scope()]);
							}
						}
						else {
							TypeException.throwNotCompatibleArgument(name, requirement.name(), module, node);
						}
						this._arguments.push(type);
					}
					else {
						if(requirement.isRequired() === true) {
							SyntaxException.throwMissingRequirement(requirement.name(), module, node);
						}
						else {
							this._arguments.push(null);
						}
					}
				}
				while(queue.length > 0) {
					queue.shift()();
				}
				for(let __ks_0 = 0, __ks_1 = resets.length, reset; __ks_0 < __ks_1; ++__ks_0) {
					reset = resets[__ks_0];
					reset.resetReferences();
				}
			}
		}
		__ks_default_0_0() {
			return path.basename(this._file);
		}
		__ks_func_setArguments_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = value => KSType.isString(value) || KSType.isNull(value);
			const t2 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 3) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t2, pts, 1) && te(pts, 2)) {
					return proto.__ks_func_setArguments_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			throw KSHelper.badArgs();
		}
		toHashes() {
			return this.__ks_func_toHashes_rt.call(null, this, this, arguments);
		}
		__ks_func_toHashes_0() {
			return this._hashes;
		}
		__ks_func_toHashes_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toHashes_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0() {
			const fragments = FragmentBuilder.__ks_new_0(0);
			if(this._options.header === true) {
				fragments.__ks_func_comment_0([KSHelper.concatString("// Generated by kaoscript ", metadata.version)]);
			}
			if((this._register === true) && (this._compiler._options.register === true)) {
				fragments.__ks_func_line_0(["require(\"kaoscript/register\")"]);
			}
			const mark = fragments.__ks_func_mark_0();
			if(this._binary) {
				this._body.toFragments(fragments);
			}
			else {
				const line = fragments.__ks_func_newLine_0().code("module.exports = function(");
				let comma = false;
				for(let __ks_0 = 0, __ks_1 = this._requirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
					requirement = this._requirements[__ks_0];
					comma = requirement.toParameterFragments(line, comma);
				}
				line.code(")");
				const block = line.newBlock();
				for(let __ks_0 = 0, __ks_1 = this._requirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
					requirement = this._requirements[__ks_0];
					requirement.toFragments(block);
				}
				this._body.toFragments(block);
				let exportable = false;
				for(let __ks_0 in this._exports) {
					const __ks_export_1 = this._exports[__ks_0];
					if(__ks_export_1.type.isExportingFragment() === true) {
						exportable = true;
						break;
					}
				}
				if(exportable) {
					const line = block.newLine().code("return ");
					const object = line.newObject();
					for(const name in this._exports) {
						const __ks_export_1 = this._exports[name];
						__ks_export_1.type.toExportFragment(object, name, __ks_export_1.variable);
					}
					object.done();
					line.done();
				}
				block.done();
				line.done();
			}
			const dictionary = $runtime.dictionary.__ks_0(this);
			const helper = $runtime.helper.__ks_0(this);
			const initFlag = $runtime.initFlag.__ks_0(this);
			const operator = $runtime.operator.__ks_0(this);
			const type = $runtime.type.__ks_0(this);
			let hasDictionary = (this._flags.Dictionary === true) && !(this._imports[dictionary] === true);
			let hasHelper = (this._flags.Helper === true) && !(this._imports[helper] === true);
			let hasInitFlag = this._flags.initFlag === true;
			let hasOperator = (this._flags.Operator === true) && !(this._imports[operator] === true);
			let hasType = (this._flags.Type === true) && !(this._imports[type] === true);
			if(hasHelper || hasType) {
				for(let __ks_0 = 0, __ks_1 = this._requirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
					requirement = this._requirements[__ks_0];
					if(requirement.name() === helper) {
						hasHelper = false;
					}
					else if(requirement.name() === type) {
						hasType = false;
					}
				}
			}
			const packages = new Dictionary();
			if(hasDictionary) {
				if(!KSType.isValue(packages[this._options.runtime.dictionary.package])) {
					packages[this._options.runtime.dictionary.package] = [];
				}
				packages[this._options.runtime.dictionary.package].push((() => {
					const d = new Dictionary();
					d.name = dictionary;
					d.options = this._options.runtime.dictionary;
					return d;
				})());
			}
			if(hasHelper) {
				if(!KSType.isValue(packages[this._options.runtime.helper.package])) {
					packages[this._options.runtime.helper.package] = [];
				}
				packages[this._options.runtime.helper.package].push((() => {
					const d = new Dictionary();
					d.name = helper;
					d.options = this._options.runtime.helper;
					return d;
				})());
			}
			if(hasInitFlag) {
				if(!KSType.isValue(packages[this._options.runtime.initFlag.package])) {
					packages[this._options.runtime.initFlag.package] = [];
				}
				packages[this._options.runtime.initFlag.package].push((() => {
					const d = new Dictionary();
					d.name = initFlag;
					d.options = this._options.runtime.initFlag;
					return d;
				})());
			}
			if(hasOperator) {
				if(!KSType.isValue(packages[this._options.runtime.operator.package])) {
					packages[this._options.runtime.operator.package] = [];
				}
				packages[this._options.runtime.operator.package].push((() => {
					const d = new Dictionary();
					d.name = operator;
					d.options = this._options.runtime.operator;
					return d;
				})());
			}
			if(hasType) {
				if(!KSType.isValue(packages[this._options.runtime.type.package])) {
					packages[this._options.runtime.type.package] = [];
				}
				packages[this._options.runtime.type.package].push((() => {
					const d = new Dictionary();
					d.name = type;
					d.options = this._options.runtime.type;
					return d;
				})());
			}
			for(const name in packages) {
				const __ks_package_1 = packages[name];
				const line = mark.newLine().code("const {");
				for(let index = 0, __ks_0 = __ks_package_1.length, item; index < __ks_0; ++index) {
					item = __ks_package_1[index];
					if(index !== 0) {
						line.code(", ");
					}
					if(item.name === item.options.member) {
						line.code(item.name);
					}
					else {
						line.code(KSHelper.concatString(item.options.member, ": ", item.name));
					}
				}
				line.code("} = require(\"" + name + "\")");
				line.done();
			}
			return fragments.__ks_func_toArray_0();
		}
		__ks_func_toFragments_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toFragments_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		toExports() {
			return this.__ks_func_toExports_rt.call(null, this, this, arguments);
		}
		__ks_func_toExports_0() {
			if(this._metaRequirements === null) {
				this.__ks_func_toRequirements_0();
			}
			if(this._metaExports === null) {
				this._metaExports = (() => {
					const d = new Dictionary();
					d.exports = [];
					d.references = [];
					d.macros = [];
					return d;
				})();
				const delta = this._metaRequirements.references.length;
				for(const name in this._exports) {
					const {variable} = this._exports[name];
					let type = null;
					if(KSType.isClassInstance(variable, IdentifierLiteral) || KSType.isClassInstance(variable, Variable)) {
						type = variable.__ks_func_getDeclaredType_0();
					}
					else {
						type = variable.type();
					}
					this._metaExports.exports.push(type.toMetadata(this._metaExports.references, delta, ExportMode.Export, this), name);
				}
				for(const name in this._exportedMacros) {
					const datas = this._exportedMacros[name];
					this._metaExports.macros.push(name, datas);
				}
			}
			return this._metaExports;
		}
		__ks_func_toExports_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toExports_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		toRequirements() {
			return this.__ks_func_toRequirements_rt.call(null, this, this, arguments);
		}
		__ks_func_toRequirements_0() {
			if(this._metaRequirements === null) {
				this._metaRequirements = (() => {
					const d = new Dictionary();
					d.aliens = [];
					d.requirements = [];
					d.references = [];
					return d;
				})();
				for(const name in this._aliens) {
					const type = this._aliens[name];
					this._metaRequirements.aliens.push(type.toMetadata(this._metaRequirements.references, 0, ExportMode.Alien, this), name, null);
				}
				for(let __ks_0 = 0, __ks_1 = this._requirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
					requirement = this._requirements[__ks_0];
					this._metaRequirements.requirements.push(requirement.type().toMetadata(this._metaRequirements.references, 0, ExportMode.Requirement, this), requirement.name(), requirement.toRequiredMetadata());
				}
				let index = 2;
				for(const name in this._aliens) {
					const type = this._aliens[name];
					this._metaRequirements.aliens[index] = type.toRequiredMetadata(this._requirements);
					index += 3;
				}
			}
			return this._metaRequirements;
		}
		__ks_func_toRequirements_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toRequirements_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		toVariationId() {
			return this.__ks_func_toVariationId_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariationId_0() {
			if(!KSType.isValue(this._variationId)) {
				const variations = [this._options.target.name, this._options.target.version];
				if(KSType.isValue(this._arguments)) {
					for(let __ks_0 = 0, __ks_1 = this._arguments.length, type; __ks_0 < __ks_1; ++__ks_0) {
						type = this._arguments[__ks_0];
						if(KSType.isBoolean(type)) {
							variations.push(false);
						}
						else if(KSType.isValue(type)) {
							type.toVariations(variations);
						}
						else {
							variations.push(null);
						}
					}
				}
				this._variationId = fs.djb2a(variations.join());
			}
			return this._variationId;
		}
		__ks_func_toVariationId_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toVariationId_0.call(that);
			}
			throw KSHelper.badArgs();
		}
	}
	class ModuleBlock extends AbstractNode {
		static __ks_new_0(...args) {
			const o = Object.create(ModuleBlock.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._attributeDatas = new Dictionary();
			this._statements = [];
			this._topNodes = [];
		}
		__ks_cons_0(data, module) {
			if(data === void 0) {
				data = null;
			}
			if(module === void 0) {
				module = null;
			}
			AbstractNode.prototype.__ks_cons_0.call(this);
			this._data = data;
			this._module = module;
			this._options = module._options;
			this._scope = ModuleScope.__ks_new_0();
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[1])) {
					return ModuleBlock.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_initiate_0() {
			for(let __ks_0 = 0, __ks_1 = this._data.body.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._data.body[__ks_0];
				this._scope.line(statement.start.line);
				let __ks_statement_1 = $compile.statement(statement, this);
				if(KSType.isValue(__ks_statement_1)) {
					this._statements.push(__ks_statement_1);
					__ks_statement_1.initiate();
				}
			}
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.analyse();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_enhance_0() {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.enhance();
			}
			const recipient = this.__ks_func_recipient_0();
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(statement.isExportable() === true) {
					this._scope.line(statement.line());
					statement.export(recipient, true);
				}
			}
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.prepare();
			}
			const recipient = this.__ks_func_recipient_0();
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(statement.isExportable() === true) {
					this._scope.line(statement.line());
					statement.export(recipient, false);
				}
			}
			let type = null;
			for(const name in this._module._exports) {
				const data = this._module._exports[name];
				if(KSType.isClassInstance(data.variable, Variable)) {
					type = data.variable.getRealType();
				}
				else {
					type = data.variable.type();
				}
				if((type.__ks_func_isNull_0() === true) && !(data.type.isNullable() === true)) {
					TypeException.throwUnexpectedExportType(name, data.type, type, this);
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addInitializableVariable() {
			return this.__ks_func_addInitializableVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_addInitializableVariable_0(variable, node) {
		}
		__ks_func_addInitializableVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_addInitializableVariable_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addInitializableVariable_rt) {
				return super.__ks_func_addInitializableVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addTopNode() {
			return this.__ks_func_addTopNode_rt.call(null, this, this, arguments);
		}
		__ks_func_addTopNode_0(node) {
			this._topNodes.push(node);
		}
		__ks_func_addTopNode_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addTopNode_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_addTopNode_rt) {
				return super.__ks_func_addTopNode_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_authority_0() {
			return this;
		}
		__ks_func_directory_0() {
			return this._module.directory();
		}
		exportMacro() {
			return this.__ks_func_exportMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_exportMacro_0(name, macro) {
			this._module.exportMacro(name, macro.toMetadata());
		}
		__ks_func_exportMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_exportMacro_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_exportMacro_rt) {
				return super.__ks_func_exportMacro_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_file_0() {
			return this._module.file();
		}
		getAttributeData() {
			return this.__ks_func_getAttributeData_rt.call(null, this, this, arguments);
		}
		__ks_func_getAttributeData_0(key) {
			return this._attributeDatas[key];
		}
		__ks_func_getAttributeData_rt(that, proto, args) {
			const t0 = value => KSType.isEnumInstance(value, AttributeData);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getAttributeData_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getAttributeData_rt) {
				return super.__ks_func_getAttributeData_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		initializeVariable() {
			return this.__ks_func_initializeVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_initializeVariable_0(variable, expression, node) {
			let __ks_var_1;
			if(variable.static) {
				const __ks_class_1 = this._scope.getVariable(variable.class).declaration();
				let __ks_var_1 = __ks_class_1.getClassVariable(variable.name);
				if(KSType.isValue(__ks_var_1)) {
					__ks_var_1.initialize(variable.type, expression);
				}
			}
			else if(KSType.isValue((__ks_var_1 = this._scope.__ks_func_getDefinedVariable_0(variable.name)))) {
				__ks_var_1.__ks_func_setDeclaredType_0(variable.type);
			}
		}
		__ks_func_initializeVariable_rt(that, proto, args) {
			const t0 = value => KSType.isStructInstance(value, VariableBrief);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
					return proto.__ks_func_initializeVariable_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_initializeVariable_rt) {
				return super.__ks_func_initializeVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isConsumedError_0(error) {
			return this._module.isBinary();
		}
		isUsingStaticVariableBefore() {
			return this.__ks_func_isUsingStaticVariableBefore_rt.call(null, this, this, arguments);
		}
		__ks_func_isUsingStaticVariableBefore_0(__ks_class_1, varname, stmt) {
			const line = stmt.__ks_func_line_0();
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(!(KSOperator.lt(statement.line(), line) && (statement !== stmt))) {
					break;
				}
				if(statement.isUsingStaticVariable(__ks_class_1, varname) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isUsingStaticVariableBefore_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Statement);
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
					return proto.__ks_func_isUsingStaticVariableBefore_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_isUsingStaticVariableBefore_rt) {
				return super.__ks_func_isUsingStaticVariableBefore_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		includePath() {
			return this.__ks_func_includePath_rt.call(null, this, this, arguments);
		}
		__ks_func_includePath_0() {
			return null;
		}
		__ks_func_includePath_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_includePath_0.call(that);
			}
			if(super.__ks_func_includePath_rt) {
				return super.__ks_func_includePath_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_module_0() {
			return this._module;
		}
		publishMacro() {
			return this.__ks_func_publishMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_publishMacro_0(name, macro) {
			this._scope.addMacro(name, macro);
		}
		__ks_func_publishMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_publishMacro_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_publishMacro_rt) {
				return super.__ks_func_publishMacro_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		registerMacro() {
			return this.__ks_func_registerMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_registerMacro_0(name, macro) {
			this._scope.addMacro(name, macro);
		}
		__ks_func_registerMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_registerMacro_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_registerMacro_rt) {
				return super.__ks_func_registerMacro_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		recipient() {
			return this.__ks_func_recipient_rt.call(null, this, this, arguments);
		}
		__ks_func_recipient_0() {
			return this._module;
		}
		__ks_func_recipient_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_recipient_0.call(that);
			}
			if(super.__ks_func_recipient_rt) {
				return super.__ks_func_recipient_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setAttributeData() {
			return this.__ks_func_setAttributeData_rt.call(null, this, this, arguments);
		}
		__ks_func_setAttributeData_0(key, data) {
			this._attributeDatas[key] = data;
		}
		__ks_func_setAttributeData_rt(that, proto, args) {
			const t0 = value => KSType.isEnumInstance(value, AttributeData);
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_setAttributeData_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_setAttributeData_rt) {
				return super.__ks_func_setAttributeData_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		target() {
			return this.__ks_func_target_rt.call(null, this, this, arguments);
		}
		__ks_func_target_0() {
			return this._options.target;
		}
		__ks_func_target_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_target_0.call(that);
			}
			if(super.__ks_func_target_rt) {
				return super.__ks_func_target_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments) {
			for(let __ks_0 = 0, __ks_1 = this._topNodes.length, node; __ks_0 < __ks_1; ++__ks_0) {
				node = this._topNodes[__ks_0];
				node.toAuthorityFragments(fragments);
			}
			let index = -1;
			let item = null;
			for(let i = 0, __ks_0 = this._statements.length, statement; i < __ks_0 && (index === -1); ++i) {
				statement = this._statements[i];
				let __ks_1;
				if(KSType.isValue(__ks_1 = statement.toFragments(fragments, Mode.None)) ? (item = __ks_1, true) : false) {
					index = i;
				}
			}
			if(index !== -1) {
				item(this._statements.slice(index + 1));
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class Statement extends AbstractNode {
		__ks_init() {
			super.__ks_init();
			this._afterwards = [];
			this._assignments = [];
			this._attributeDatas = new Dictionary();
		}
		__ks_cons_0(data, parent, scope = parent.__ks_func_scope_0()) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			AbstractNode.prototype.__ks_cons_1.call(this, data, parent, scope);
			this._options = Attribute.configure(data, parent._options, AttributeTarget.Statement, super.__ks_func_file_0());
			this._line = data.start.line;
		}
		__ks_cons_1(data, parent, scope, kind) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			AbstractNode.prototype.__ks_cons_2.call(this, data, parent, scope, kind);
			this._options = Attribute.configure(data, parent._options, AttributeTarget.Statement, super.__ks_func_file_0());
			this._line = data.start.line;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t2 = value => KSType.isClassInstance(value, Scope);
			const t3 = value => KSType.isEnumInstance(value, ScopeType);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return Statement.prototype.__ks_cons_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 4) {
				if(t0(args[1]) && t2(args[2]) && t3(args[3])) {
					return Statement.prototype.__ks_cons_1.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		addAssignments() {
			return this.__ks_func_addAssignments_rt.call(null, this, this, arguments);
		}
		__ks_func_addAssignments_0(variables) {
			__ks_Array.__ks_func_pushUniq_0.call(this._assignments, [].concat(variables));
		}
		__ks_func_addAssignments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addAssignments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_addAssignments_rt) {
				return super.__ks_func_addAssignments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addInitializableVariable() {
			return this.__ks_func_addInitializableVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_addInitializableVariable_1(variable, node) {
			return this._parent.addInitializableVariable(variable, this);
		}
		__ks_func_addInitializableVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_addInitializableVariable_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addInitializableVariable_rt) {
				return super.__ks_func_addInitializableVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		afterward() {
			return this.__ks_func_afterward_rt.call(null, this, this, arguments);
		}
		__ks_func_afterward_0(node) {
			this._afterwards.push(node);
		}
		__ks_func_afterward_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_afterward_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_afterward_rt) {
				return super.__ks_func_afterward_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		assignTempVariables() {
			return this.__ks_func_assignTempVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_assignTempVariables_0(scope) {
			scope.commitTempVariables(this._assignments);
		}
		__ks_func_assignTempVariables_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Scope);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_assignTempVariables_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_assignTempVariables_rt) {
				return super.__ks_func_assignTempVariables_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		assignments() {
			return this.__ks_func_assignments_rt.call(null, this, this, arguments);
		}
		__ks_func_assignments_0() {
			return this._assignments;
		}
		__ks_func_assignments_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_assignments_0.call(that);
			}
			if(super.__ks_func_assignments_rt) {
				return super.__ks_func_assignments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		checkReturnType() {
			return this.__ks_func_checkReturnType_rt.call(null, this, this, arguments);
		}
		__ks_func_checkReturnType_0(type) {
		}
		__ks_func_checkReturnType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_checkReturnType_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_checkReturnType_rt) {
				return super.__ks_func_checkReturnType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		defineVariables() {
			return this.__ks_func_defineVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_defineVariables_0(left, names, scope, expression = null, leftMost) {
			if(leftMost === void 0 || leftMost === null) {
				leftMost = false;
			}
			for(let __ks_0 = 0, __ks_1 = names.length, name; __ks_0 < __ks_1; ++__ks_0) {
				name = names[__ks_0];
				let variable = scope.__ks_func_getVariable_0(name);
				if(KSType.isValue(variable)) {
					if(variable.__ks_func_isImmutable_0() === true) {
						ReferenceException.__ks_sttc_throwImmutable_0(name, this);
					}
				}
				else if(this._options.rules.noUndefined === true) {
					ReferenceException.__ks_sttc_throwNotDefined_0(name, this);
				}
				else {
					if(!scope.__ks_func_hasDeclaredVariable_0(name)) {
						this._assignments.push(name);
					}
					this._scope.__ks_func_define_0(name, false, void 0, void 0, this);
				}
			}
		}
		__ks_func_defineVariables_1(left, scope, expression = null, leftMost) {
			if(leftMost === void 0 || leftMost === null) {
				leftMost = false;
			}
			this.defineVariables(left, left.listAssignments([]), scope, expression, leftMost);
		}
		__ks_func_defineVariables_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, AbstractNode);
			const t1 = value => KSType.isClassInstance(value, Scope);
			const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t3 = value => KSType.isArray(value, KSType.isString);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_defineVariables_1.call(that, args[0], args[1], void 0, void 0);
				}
			}
			if(args.length >= 3 && args.length <= 4) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						if(KSHelper.isVarargs(args, 0, 1, t2, pts = [3], 0) && te(pts, 1)) {
							return proto.__ks_func_defineVariables_1.call(that, args[0], args[1], args[2], KSHelper.getVararg(args, 3, pts[1]));
						}
						throw KSHelper.badArgs();
					}
					if(t3(args[1]) && t1(args[2])) {
						return proto.__ks_func_defineVariables_0.call(that, args[0], args[1], args[2], args[3], void 0);
					}
					throw KSHelper.badArgs();
				}
			}
			if(args.length === 5) {
				if(t0(args[0]) && t3(args[1]) && t1(args[2]) && t2(args[4])) {
					return proto.__ks_func_defineVariables_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			if(super.__ks_func_defineVariables_rt) {
				return super.__ks_func_defineVariables_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(recipient) {
		}
		__ks_func_export_1(recipient, enhancement) {
			if(!enhancement) {
				this.__ks_func_export_0(recipient);
			}
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isBoolean;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_export_0.call(that, args[0]);
				}
			}
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_export_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getAttributeData() {
			return this.__ks_func_getAttributeData_rt.call(null, this, this, arguments);
		}
		__ks_func_getAttributeData_1(key) {
			return this._attributeDatas[key];
		}
		__ks_func_getAttributeData_rt(that, proto, args) {
			const t0 = value => KSType.isEnumInstance(value, AttributeData);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getAttributeData_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_getAttributeData_rt) {
				return super.__ks_func_getAttributeData_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		includePath() {
			return this.__ks_func_includePath_rt.call(null, this, this, arguments);
		}
		__ks_func_includePath_1() {
			return this._parent.includePath();
		}
		__ks_func_includePath_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_includePath_1.call(that);
			}
			if(super.__ks_func_includePath_rt) {
				return super.__ks_func_includePath_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		initializeVariable() {
			return this.__ks_func_initializeVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_initializeVariable_1(variable, expression, node) {
		}
		__ks_func_initializeVariable_rt(that, proto, args) {
			const t0 = value => KSType.isStructInstance(value, VariableBrief);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
					return proto.__ks_func_initializeVariable_1.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_initializeVariable_rt) {
				return super.__ks_func_initializeVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAwait() {
			return this.__ks_func_isAwait_rt.call(null, this, this, arguments);
		}
		__ks_func_isAwait_0() {
			return false;
		}
		__ks_func_isAwait_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAwait_0.call(that);
			}
			if(super.__ks_func_isAwait_rt) {
				return super.__ks_func_isAwait_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isCascade() {
			return this.__ks_func_isCascade_rt.call(null, this, this, arguments);
		}
		__ks_func_isCascade_0() {
			return false;
		}
		__ks_func_isCascade_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isCascade_0.call(that);
			}
			if(super.__ks_func_isCascade_rt) {
				return super.__ks_func_isCascade_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isEnhancementExport() {
			return this.__ks_func_isEnhancementExport_rt.call(null, this, this, arguments);
		}
		__ks_func_isEnhancementExport_0() {
			return false;
		}
		__ks_func_isEnhancementExport_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isEnhancementExport_0.call(that);
			}
			if(super.__ks_func_isEnhancementExport_rt) {
				return super.__ks_func_isEnhancementExport_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isExit() {
			return this.__ks_func_isExit_rt.call(null, this, this, arguments);
		}
		__ks_func_isExit_0() {
			return false;
		}
		__ks_func_isExit_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExit_0.call(that);
			}
			if(super.__ks_func_isExit_rt) {
				return super.__ks_func_isExit_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isExportable() {
			return this.__ks_func_isExportable_rt.call(null, this, this, arguments);
		}
		__ks_func_isExportable_0() {
			return false;
		}
		__ks_func_isExportable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExportable_0.call(that);
			}
			if(super.__ks_func_isExportable_rt) {
				return super.__ks_func_isExportable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_0(name) {
			return false;
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isJumpable() {
			return this.__ks_func_isJumpable_rt.call(null, this, this, arguments);
		}
		__ks_func_isJumpable_0() {
			return false;
		}
		__ks_func_isJumpable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isJumpable_0.call(that);
			}
			if(super.__ks_func_isJumpable_rt) {
				return super.__ks_func_isJumpable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isLateInitializable() {
			return this.__ks_func_isLateInitializable_rt.call(null, this, this, arguments);
		}
		__ks_func_isLateInitializable_0() {
			return false;
		}
		__ks_func_isLateInitializable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isLateInitializable_0.call(that);
			}
			if(super.__ks_func_isLateInitializable_rt) {
				return super.__ks_func_isLateInitializable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isLoop() {
			return this.__ks_func_isLoop_rt.call(null, this, this, arguments);
		}
		__ks_func_isLoop_0() {
			return false;
		}
		__ks_func_isLoop_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isLoop_0.call(that);
			}
			if(super.__ks_func_isLoop_rt) {
				return super.__ks_func_isLoop_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isUsingVariable() {
			return this.__ks_func_isUsingVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isUsingVariable_0(name) {
			return false;
		}
		__ks_func_isUsingVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isUsingVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isUsingVariable_rt) {
				return super.__ks_func_isUsingVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isUsingInstanceVariable() {
			return this.__ks_func_isUsingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isUsingInstanceVariable_0(name) {
			return false;
		}
		__ks_func_isUsingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isUsingInstanceVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isUsingInstanceVariable_rt) {
				return super.__ks_func_isUsingInstanceVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isUsingStaticVariable() {
			return this.__ks_func_isUsingStaticVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isUsingStaticVariable_0(__ks_class_1, varname) {
			return false;
		}
		__ks_func_isUsingStaticVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_isUsingStaticVariable_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_isUsingStaticVariable_rt) {
				return super.__ks_func_isUsingStaticVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		line() {
			return this.__ks_func_line_rt.call(null, this, this, arguments);
		}
		__ks_func_line_0() {
			return this._line;
		}
		__ks_func_line_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_line_0.call(that);
			}
			if(super.__ks_func_line_rt) {
				return super.__ks_func_line_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listNonLocalVariables() {
			return this.__ks_func_listNonLocalVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_listNonLocalVariables_0(scope, variables) {
			return variables;
		}
		__ks_func_listNonLocalVariables_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Scope);
			const t1 = KSType.isArray;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_listNonLocalVariables_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_listNonLocalVariables_rt) {
				return super.__ks_func_listNonLocalVariables_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setAttributeData() {
			return this.__ks_func_setAttributeData_rt.call(null, this, this, arguments);
		}
		__ks_func_setAttributeData_1(key, data) {
			this._attributeDatas[key] = data;
		}
		__ks_func_setAttributeData_rt(that, proto, args) {
			const t0 = value => KSType.isEnumInstance(value, AttributeData);
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_setAttributeData_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_setAttributeData_rt) {
				return super.__ks_func_setAttributeData_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setExpectedType() {
			return this.__ks_func_setExpectedType_rt.call(null, this, this, arguments);
		}
		__ks_func_setExpectedType_0(type) {
		}
		__ks_func_setExpectedType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setExpectedType_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_setExpectedType_rt) {
				return super.__ks_func_setExpectedType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_statement_0() {
			return this;
		}
		target() {
			return this.__ks_func_target_rt.call(null, this, this, arguments);
		}
		__ks_func_target_1() {
			return this._options.target;
		}
		__ks_func_target_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_target_1.call(that);
			}
			if(super.__ks_func_target_rt) {
				return super.__ks_func_target_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toDeclarationFragments() {
			return this.__ks_func_toDeclarationFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toDeclarationFragments_0(variables, fragments) {
			if(variables.length !== 0) {
				fragments.newLine().code(KSOperator.addOrConcat($runtime.scope.__ks_0(this), variables.join(", "))).done();
			}
		}
		__ks_func_toDeclarationFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toDeclarationFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toDeclarationFragments_rt) {
				return super.__ks_func_toDeclarationFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_1(fragments, mode) {
			const variables = this.__ks_func_assignments_0();
			if(variables.length !== 0) {
				fragments.newLine().code(KSOperator.addOrConcat($runtime.scope.__ks_0(this), variables.join(", "))).done();
			}
			let r, __ks_0;
			if(KSType.isValue(__ks_0 = this.toStatementFragments(fragments, mode)) ? (r = __ks_0, true) : false) {
				r.afterwards = this._afterwards;
				return r;
			}
			else {
				for(let __ks_0 = 0, __ks_1 = this._afterwards.length, afterward; __ks_0 < __ks_1; ++__ks_0) {
					afterward = this._afterwards[__ks_0];
					afterward.toAfterwardFragments(fragments);
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class BreakStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(BreakStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BreakStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			let parent = this._parent;
			if(!(parent.isJumpable() === true)) {
				SyntaxException.__ks_sttc_throwIllegalStatement_0("break", this);
			}
			while(!(parent.isLoop() === true)) {
				parent = parent.__ks_func_parent_0();
				if(!(KSType.isValue(parent) ? parent.isJumpable() === true : false)) {
					SyntaxException.__ks_sttc_throwIllegalStatement_0("break", this);
				}
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_0(fragments, mode) {
			fragments.line("break", this._data);
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	const HelperTypeKind = KSHelper.enum(Number, {
		Native: 0,
		Referenced: 1,
		Unreferenced: 2
	});
	const TypeStatus = KSHelper.enum(Number, {
		Native: 0,
		Referenced: 1,
		Unreferenced: 2
	});
	class ClassDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ClassDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._abstract = false;
			this._abstractMethods = new Dictionary();
			this._classMethods = new Dictionary();
			this._classVariables = new Dictionary();
			this._constructors = [];
			this._destructor = null;
			this._es5 = false;
			this._extending = false;
			this._forcefullyRebinded = false;
			this._forkedMethods = new Dictionary();
			this._hybrid = false;
			this._inits = false;
			this._instanceMethods = new Dictionary();
			this._instanceVariables = new Dictionary();
			this._macros = new Dictionary();
			this._references = new Dictionary();
			this._sealed = false;
			this._sharedMethods = new Dictionary();
		}
		__ks_cons_0(data, parent, scope) {
			Statement.prototype.__ks_cons_rt.call(null, this, [data, parent, scope]);
			this._constructorScope = this.newScope(this._scope, ScopeType.Function);
			this._destructorScope = this.newScope(this._scope, ScopeType.Function);
			this._instanceVariableScope = this.newScope(this._scope, ScopeType.Function);
			this._es5 = this._options.format.classes === "es5";
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return ClassDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_initiate_0() {
			this._name = this._data.name.name;
			this._class = ClassType.__ks_new_0(this._scope);
			this._type = NamedType.__ks_new_0(this._name, this._class);
			this._variable = this._scope.__ks_func_define_0(this._name, true, this._type, void 0, this);
			for(let __ks_0 = 0, __ks_1 = this._data.members.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.members[__ks_0];
				if(KSHelper.valueOf(data.kind) === NodeKind.MacroDeclaration.value) {
					const name = data.name.name;
					const declaration = MacroDeclaration.__ks_new_0(data, this, null);
					if(KSType.isArray(this._macros[name])) {
						this._macros[name].push(declaration);
					}
					else {
						this._macros[name] = [declaration];
					}
				}
			}
			this._variable.__ks_func_flagClassStatement_0();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			let thisVariable = this._constructorScope.define("this", true, this._scope.__ks_func_reference_0(this._name), true, this);
			thisVariable.replaceCall = (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 3) {
						if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (data, __ks_arguments_1, node) => {
					return CallThisConstructorSubstitude.__ks_new_0(data, __ks_arguments_1, this._type, this);
				};
				return __ks_rt;
			})();
			this._destructorScope.define("this", true, this._scope.__ks_func_reference_0(this._name), true, this);
			this._destructorScope.rename("this", "that");
			this._instanceVariableScope.define("this", true, this._scope.__ks_func_reference_0(this._name), true, this);
			if(KSType.isValue(this._data.extends)) {
				this._extending = true;
				let name = "";
				let member = this._data.extends;
				while(KSHelper.valueOf(member.kind) === NodeKind.MemberExpression.value) {
					name = KSHelper.concatString(".", member.property.name, name);
					member = member.object;
				}
				this._extendsName = KSHelper.concatString(member.name, name);
				if(this._extendsName === this._name) {
					SyntaxException.__ks_sttc_throwInheritanceLoop_0(this._name, this);
				}
			}
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Abstract.value) {
					this._abstract = true;
					this._class.__ks_func_flagAbstract_0();
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Sealed.value) {
					this._sealed = true;
					this._class.__ks_func_flagSealed_0();
				}
			}
			let declaration = null;
			for(let __ks_0 = 0, __ks_1 = this._data.members.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.members[__ks_0];
				let __ks_2 = data.kind.valueOf();
				if(__ks_2 === NodeKind.CommentBlock.value) {
				}
				else if(__ks_2 === NodeKind.CommentLine.value) {
				}
				else if(__ks_2 === NodeKind.FieldDeclaration.value) {
					declaration = new ClassVariableDeclaration(data, this);
					declaration.__ks_func_analyse_0();
					if((declaration.__ks_func_isInstance_0() === true) && (declaration.__ks_func_hasDefaultValue_0() === true)) {
						this._inits = true;
					}
				}
				else if(__ks_2 === NodeKind.MacroDeclaration.value) {
				}
				else if(__ks_2 === NodeKind.MethodDeclaration.value) {
					if(this._class.isConstructor(data.name.name) === true) {
						declaration = new ClassConstructorDeclaration(data, this);
					}
					else if(this._class.isDestructor(data.name.name) === true) {
						declaration = new ClassDestructorDeclaration(data, this);
					}
					else {
						declaration = new ClassMethodDeclaration(data, this);
					}
					declaration.__ks_func_analyse_0();
				}
				else {
					throw new NotSupportedException(KSHelper.concatString("Unknow kind ", data.kind), this);
				}
			}
			if(this._inits) {
				this._initsId = this._class.__ks_func_incInitializationSequence_0();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_enhance_0() {
			if(this._extending) {
				let __ks_0;
				if(KSType.isValue(__ks_0 = Type.__ks_sttc_fromAST_0(this._data.extends, this)) ? (this._extendsType = __ks_0, false) : true) {
					ReferenceException.__ks_sttc_throwNotDefined_0(this._extendsName, this);
				}
				else if(!KSType.isClassInstance(this._extendsType.__ks_func_discardName_0(), ClassType)) {
					TypeException.__ks_sttc_throwNotClass_0(this._extendsName, this);
				}
				this._class.__ks_func_extends_1(this._extendsType);
			}
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(this._extending) {
				this._constructorScope.flagExtending();
				this._instanceVariableScope.flagExtending();
				this._class.__ks_func_extends_1(this._extendsType);
				this._hybrid = this._class.__ks_func_isHybrid_0();
				const superType = this._scope.__ks_func_reference_0(this._extendsName);
				this._constructorScope.define("super", true, superType, true, this);
				this._instanceVariableScope.define("super", true, superType, true, this);
				this.__ks_func_updateConstructorScope_0();
			}
			for(const name in this._classVariables) {
				const variable = this._classVariables[name];
				variable.prepare();
				this._class.addClassVariable(name, variable.type());
			}
			for(const name in this._classMethods) {
				const methods = this._classMethods[name];
				let __ks_0;
				const async = (KSType.isValue(this._extendsType) && KSType.isValue(__ks_0 = this._extendsType.__ks_func_type_0().isAsyncClassMethod(name))) ? __ks_0 : methods[0].type().isAsync();
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.prepare();
					if(async !== method.type().isAsync()) {
						SyntaxException.__ks_sttc_throwInvalidSyncMethods_0(this._name, name, this);
					}
					if(this._class.hasMatchingClassMethod(name, method.type(), MatchingMode.ExactParameter) === true) {
						SyntaxException.throwIdenticalMethod(name, method);
					}
					this._class.addClassMethod(name, method.type());
				}
			}
			for(const name in this._instanceVariables) {
				const variable = this._instanceVariables[name];
				variable.prepare();
				this._class.addInstanceVariable(name, variable.type());
			}
			for(const name in this._instanceMethods) {
				const methods = this._instanceMethods[name];
				let __ks_0;
				const async = (KSType.isValue(this._extendsType) && KSType.isValue(__ks_0 = this._extendsType.__ks_func_type_0().isAsyncInstanceMethod(name))) ? __ks_0 : methods[0].type().isAsync();
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.prepare();
					if(async !== method.type().isAsync()) {
						SyntaxException.__ks_sttc_throwInvalidSyncMethods_0(this._name, name, this);
					}
					if(this._class.hasMatchingInstanceMethod(name, method.type(), MatchingMode.ExactParameter) === true) {
						SyntaxException.throwIdenticalMethod(name, method);
					}
					this._class.addInstanceMethod(name, method.type());
				}
			}
			for(const name in this._abstractMethods) {
				const methods = this._abstractMethods[name];
				let __ks_0;
				const async = (KSType.isValue(this._extendsType) && KSType.isValue(__ks_0 = this._extendsType.__ks_func_type_0().isAsyncInstanceMethod(name))) ? __ks_0 : methods[0].type().isAsync();
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.prepare();
					if(async !== method.type().isAsync()) {
						SyntaxException.__ks_sttc_throwInvalidSyncMethods_0(this._name, name, this);
					}
					if(this._class.hasMatchingInstanceMethod(name, method.type(), MatchingMode.ExactParameter) === true) {
						SyntaxException.throwIdenticalMethod(name, method);
					}
					this._class.addAbstractMethod(name, method.type());
				}
			}
			if(this._abstract) {
				for(let __ks_0 = 0, __ks_1 = this._constructors.length, __ks_constructor_1; __ks_0 < __ks_1; ++__ks_0) {
					__ks_constructor_1 = this._constructors[__ks_0];
					__ks_constructor_1.prepare();
					this._class.addConstructor(__ks_constructor_1.type());
				}
			}
			else {
				for(let __ks_0 = 0, __ks_1 = this._constructors.length, __ks_constructor_1; __ks_0 < __ks_1; ++__ks_0) {
					__ks_constructor_1 = this._constructors[__ks_0];
					__ks_constructor_1.prepare();
					if(this._class.hasMatchingConstructor(__ks_constructor_1.type(), MatchingMode.ExactParameter) === true) {
						SyntaxException.throwIdenticalConstructor(__ks_constructor_1);
					}
					this._class.addConstructor(__ks_constructor_1.type());
				}
			}
			if(this._destructor !== null) {
				this._destructor.prepare();
				this._class.__ks_func_incDestructorSequence_0();
			}
			let notImplemented;
			if(this._extending && !this._abstract && !__ks_Dictionary._sm_isEmpty(notImplemented = this._class.__ks_func_listMissingAbstractMethods_0())) {
				SyntaxException.throwMissingAbstractMethods(this._name, notImplemented, this);
			}
			for(const name in this._forkedMethods) {
				const methods = this._forkedMethods[name];
				for(let __ks_0 in methods) {
					let {original, forks, hidden} = methods[__ks_0];
					const index = original.index();
					const instance = original.isInstance();
					let found = false;
					if(instance === true) {
						for(let __ks_1 = 0, __ks_2 = this._instanceMethods[name].length, method; __ks_1 < __ks_2 && !(found); ++__ks_1) {
							method = this._instanceMethods[name][__ks_1];
							if(index === method.type().index()) {
								if(hidden === false) {
									method.flagForked(this._class, forks);
								}
								found = true;
							}
						}
					}
					else {
						for(let __ks_1 = 0, __ks_2 = this._classMethods[name].length, method; __ks_1 < __ks_2 && !(found); ++__ks_1) {
							method = this._classMethods[name][__ks_1];
							if(index === method.type().index()) {
								if(hidden === false) {
									method.flagForked(this._class, forks);
								}
								found = true;
							}
						}
					}
					if(!found) {
						const method = original.clone();
						if(!KSType.isValue(hidden)) {
							hidden = false;
							if(method.isAbstract() === true) {
								hidden = true;
							}
							else {
								for(let __ks_1 = 0, __ks_2 = forks.length, fork; __ks_1 < __ks_2; ++__ks_1) {
									fork = forks[__ks_1];
									if(method.isSubsetOf(fork, MatchingMode(MatchingMode.FunctionSignature | MatchingMode.MissingParameter)) === true) {
										hidden = true;
										break;
									}
								}
							}
						}
						method.flagForked(hidden);
						if(!(hidden === true)) {
							if(instance === true) {
								this._class.addInstanceMethod(name, method);
							}
							else {
								this._class.addClassMethod(name, method);
							}
						}
						new ClassForkedMethodDeclaration(name, method, forks, hidden, this);
					}
				}
			}
			if(this._extending) {
				const __ks_extends_1 = this._extendsType.__ks_func_type_0();
				for(const name in this._instanceMethods) {
					const methods = this._instanceMethods[name];
					const all = __ks_extends_1.listInstantiableMethods(name);
					for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						for(let __ks_2 = 0, __ks_3 = all.length, m; __ks_2 < __ks_3; ++__ks_2) {
							m = all[__ks_2];
							if((m.index() !== method.type().index()) && (m.index() !== method.type().getForkedIndex())) {
								if((method.type().isSubsetOf(m.type(), MatchingMode(MatchingMode.FunctionSignature | MatchingMode.IgnoreName | MatchingMode.IgnoreReturn | MatchingMode.IgnoreError)) === true) && !(method.type().isSubsetOf(m.type(), MatchingMode(MatchingMode.FunctionSignature | MatchingMode.IgnoreReturn | MatchingMode.IgnoreError)) === true)) {
									SyntaxException.throwHiddenMethod(name, this._type, m.type(), this._type, method.type(), method);
								}
								else if((m.type().isSubsetOf(method.type(), MatchingMode(MatchingMode.FunctionSignature | MatchingMode.IgnoreName | MatchingMode.IgnoreReturn | MatchingMode.IgnoreError)) === true) && !(m.type().isSubsetOf(method.type(), MatchingMode(MatchingMode.FunctionSignature | MatchingMode.IgnoreReturn | MatchingMode.IgnoreError)) === true)) {
									SyntaxException.throwHiddenMethod(name, this._type, method.type(), this._type, m.type(), method);
								}
							}
						}
					}
				}
			}
			for(let __ks_0 in this._macros) {
				const macros = this._macros[__ks_0];
				for(let __ks_1 = 0, __ks_2 = macros.length, macro; __ks_1 < __ks_2; ++__ks_1) {
					macro = macros[__ks_1];
					macro.export(this);
				}
			}
			if(!(this._class.__ks_func_isHybrid_0() === true)) {
				this._class.__ks_func_setExhaustive_0(true);
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 in this._classVariables) {
				const variable = this._classVariables[__ks_0];
				variable.translate();
				if((variable.isRequiringInitialization() === true) && !(variable.isInitialized() === true)) {
					SyntaxException.throwNotInitializedField(variable.name(), variable);
				}
			}
			for(let __ks_0 in this._instanceVariables) {
				const variable = this._instanceVariables[__ks_0];
				variable.translate();
			}
			for(let __ks_0 in this._instanceMethods) {
				const methods = this._instanceMethods[__ks_0];
				for(let __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.translate();
				}
			}
			if(this._constructors.length === 0) {
				if(this._extending) {
					let __ks_extends_1 = this._class.__ks_func_extends_0();
					while(KSType.isValue(__ks_extends_1) && !(__ks_extends_1.type().hasConstructors() === true)) {
						__ks_extends_1 = __ks_extends_1.type().extends();
					}
					if(KSType.isValue(__ks_extends_1)) {
						for(let __ks_0 = 0, __ks_1 = __ks_extends_1.type().listConstructors(), __ks_2 = __ks_1.length, __ks_constructor_1; __ks_0 < __ks_2; ++__ks_0) {
							__ks_constructor_1 = __ks_1[__ks_0];
							__ks_constructor_1.checkVariablesInitializations(this, this._class);
						}
					}
					else {
						this._class.__ks_func_checkVariablesInitializations_0(this);
					}
				}
				else if(!this._abstract) {
					this._class.__ks_func_forEachInstanceVariables_0((() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 2) {
								if(t0(args[0]) && t0(args[1])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (name, variable) => {
							if(variable.isRequiringInitialization() === true) {
								SyntaxException.__ks_sttc_throwNotInitializedField_0(name, this);
							}
						};
						return __ks_rt;
					})());
				}
			}
			else {
				for(let __ks_0 = 0, __ks_1 = this._constructors.length, __ks_constructor_1; __ks_0 < __ks_1; ++__ks_0) {
					__ks_constructor_1 = this._constructors[__ks_0];
					__ks_constructor_1.translate();
					this._class.__ks_func_forEachInstanceVariables_0((() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 2) {
								if(t0(args[0]) && t0(args[1])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (name, variable) => {
							if((variable.isRequiringInitialization() === true) && !(variable.isAlien() === true) && !(variable.isAltering() === true)) {
								__ks_constructor_1.checkVariableInitialization(name);
							}
						};
						return __ks_rt;
					})());
				}
			}
			if(KSType.isValue(this._destructor)) {
				this._destructor.translate();
			}
			for(let __ks_0 in this._abstractMethods) {
				const methods = this._abstractMethods[__ks_0];
				for(let __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.translate();
				}
			}
			for(let __ks_0 in this._classMethods) {
				const methods = this._classMethods[__ks_0];
				for(let __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.translate();
				}
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addForkedMethod() {
			return this.__ks_func_addForkedMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_addForkedMethod_0(name, oldMethod, newMethod, hidden) {
			if(hidden === void 0) {
				hidden = null;
			}
			const index = oldMethod.__ks_func_index_0();
			if(!KSType.isValue(this._forkedMethods[name])) {
				this._forkedMethods[name] = new Dictionary();
			}
			let fork = this._forkedMethods[name][index];
			if(KSType.isValue(fork)) {
				fork.forks.push(newMethod);
				fork.hidden = false;
			}
			else {
				this._forkedMethods[name][index] = (() => {
					const d = new Dictionary();
					d.original = oldMethod;
					d.forks = [newMethod];
					d.hidden = hidden;
					return d;
				})();
			}
		}
		__ks_func_addForkedMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, ClassMethodType);
			const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t1(args[2]) && t2(args[3])) {
					return proto.__ks_func_addForkedMethod_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_addForkedMethod_rt) {
				return super.__ks_func_addForkedMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addSharedMethod() {
			return this.__ks_func_addSharedMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_addSharedMethod_0(name, sealedclass) {
			if(!KSType.isValue(this._sharedMethods[name])) {
				this._sharedMethods[name] = (() => {
					const d = new Dictionary();
					d.class = sealedclass;
					d.index = sealedclass.__ks_func_type_0().incSharedMethod(name);
					return d;
				})();
			}
		}
		__ks_func_addSharedMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, NamedType);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addSharedMethod_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addSharedMethod_rt) {
				return super.__ks_func_addSharedMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		class() {
			return this.__ks_func_class_rt.call(null, this, this, arguments);
		}
		__ks_func_class_0() {
			return this._class;
		}
		__ks_func_class_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_class_0.call(that);
			}
			if(super.__ks_func_class_rt) {
				return super.__ks_func_class_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_export_0(recipient) {
			recipient.export(this._name, this._variable);
		}
		exportMacro() {
			return this.__ks_func_exportMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_exportMacro_1(name, macro) {
			this._parent.exportMacro(KSHelper.concatString(this._name, ".", name), macro);
		}
		__ks_func_exportMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_exportMacro_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_exportMacro_rt) {
				return super.__ks_func_exportMacro_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		extends() {
			return this.__ks_func_extends_rt.call(null, this, this, arguments);
		}
		__ks_func_extends_0() {
			return this._extendsType;
		}
		__ks_func_extends_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_extends_0.call(that);
			}
			if(super.__ks_func_extends_rt) {
				return super.__ks_func_extends_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		flagForcefullyRebinded() {
			return this.__ks_func_flagForcefullyRebinded_rt.call(null, this, this, arguments);
		}
		__ks_func_flagForcefullyRebinded_0() {
			this._forcefullyRebinded = true;
		}
		__ks_func_flagForcefullyRebinded_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagForcefullyRebinded_0.call(that);
			}
			if(super.__ks_func_flagForcefullyRebinded_rt) {
				return super.__ks_func_flagForcefullyRebinded_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getClassVariable() {
			return this.__ks_func_getClassVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_getClassVariable_0(name) {
			return this._classVariables[name];
		}
		__ks_func_getClassVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getClassVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getClassVariable_rt) {
				return super.__ks_func_getClassVariable_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getInstanceVariable() {
			return this.__ks_func_getInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_getInstanceVariable_0(name) {
			return this._instanceVariables[name];
		}
		__ks_func_getInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getInstanceVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getInstanceVariable_rt) {
				return super.__ks_func_getInstanceVariable_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasConstructors() {
			return this.__ks_func_hasConstructors_rt.call(null, this, this, arguments);
		}
		__ks_func_hasConstructors_0() {
			return this._constructors.length !== 0;
		}
		__ks_func_hasConstructors_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasConstructors_0.call(that);
			}
			if(super.__ks_func_hasConstructors_rt) {
				return super.__ks_func_hasConstructors_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAbstract() {
			return this.__ks_func_isAbstract_rt.call(null, this, this, arguments);
		}
		__ks_func_isAbstract_0() {
			return this._abstract;
		}
		__ks_func_isAbstract_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAbstract_0.call(that);
			}
			if(super.__ks_func_isAbstract_rt) {
				return super.__ks_func_isAbstract_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isEnhancementExport_0() {
			return true;
		}
		isExtending() {
			return this.__ks_func_isExtending_rt.call(null, this, this, arguments);
		}
		__ks_func_isExtending_0() {
			return this._extending;
		}
		__ks_func_isExtending_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExtending_0.call(that);
			}
			if(super.__ks_func_isExtending_rt) {
				return super.__ks_func_isExtending_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isHybrid() {
			return this.__ks_func_isHybrid_rt.call(null, this, this, arguments);
		}
		__ks_func_isHybrid_0() {
			return this._hybrid;
		}
		__ks_func_isHybrid_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isHybrid_0.call(that);
			}
			if(super.__ks_func_isHybrid_rt) {
				return super.__ks_func_isHybrid_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		level() {
			return this.__ks_func_level_rt.call(null, this, this, arguments);
		}
		__ks_func_level_0() {
			return this._class.__ks_func_level_0();
		}
		__ks_func_level_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_level_0.call(that);
			}
			if(super.__ks_func_level_rt) {
				return super.__ks_func_level_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_0() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_0.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		newInstanceMethodScope() {
			return this.__ks_func_newInstanceMethodScope_rt.call(null, this, this, arguments);
		}
		__ks_func_newInstanceMethodScope_0(method) {
			const scope = this.newScope(this._scope, ScopeType.Function);
			scope.define("this", true, this._scope.__ks_func_reference_0(this._name), true, this);
			if(this._extending) {
				scope.flagExtending();
				scope.define("super", true, this._scope.__ks_func_reference_0(this._extendsName), true, this);
			}
			return scope;
		}
		__ks_func_newInstanceMethodScope_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ClassMethodDeclaration);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_newInstanceMethodScope_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_newInstanceMethodScope_rt) {
				return super.__ks_func_newInstanceMethodScope_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		registerMacro() {
			return this.__ks_func_registerMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_registerMacro_1(name, macro) {
			this._scope.addMacro(name, macro);
			this._parent.registerMacro(KSHelper.concatString(this._name, ".", name), macro);
		}
		__ks_func_registerMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_registerMacro_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_registerMacro_rt) {
				return super.__ks_func_registerMacro_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toContinousES6Fragments() {
			return this.__ks_func_toContinousES6Fragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toContinousES6Fragments_0(fragments) {
			let root = fragments;
			let breakable = true;
			if(this._forcefullyRebinded) {
				root = fragments.newLine().code("var " + this._name + " = ");
				breakable = false;
			}
			const clazz = root.newControl(null, breakable, breakable).code("class ", this._name);
			if(this._extending) {
				clazz.code(" extends ", this._extendsName);
			}
			clazz.step();
			if(!this._abstract) {
				const constructors = this._class.__ks_func_listAccessibleConstructors_0();
				if(constructors.length === 0) {
					clazz.newControl().code("static __ks_new_0()").step().line("const o = Object.create(" + this._name + ".prototype)").line("o.__ks_init()").line("return o").done();
				}
				else {
					for(let __ks_0 = 0, __ks_1 = constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = constructors[__ks_0];
						ClassConstructorDeclaration.toCreatorFragments(this._type, method.type(), clazz);
					}
				}
			}
			let ctrl = null;
			if(!this._extending) {
				clazz.newControl().code("constructor()").step().line("this.__ks_init()").line("this.__ks_cons_rt.call(null, this, arguments)").done();
			}
			if(this._inits) {
				ctrl = clazz.newControl().code("__ks_init()").step();
				if(this._extending && !(this._extendsType.__ks_func_isSealedAlien_0() === true)) {
					ctrl.line("super.__ks_init()");
				}
				for(let __ks_0 in this._instanceVariables) {
					const field = this._instanceVariables[__ks_0];
					field.toFragments(ctrl);
				}
				ctrl.done();
			}
			else {
				if(!this._extending) {
					clazz.newControl().code("__ks_init()").step().done();
				}
			}
			const m = [];
			for(let __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.toFragments(clazz, Mode.None);
				m.push(method.type());
			}
			ClassConstructorDeclaration.toRouterFragments(this, clazz.newControl(), this._type, m, null, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (node, fragments) => {
					return fragments.code("__ks_cons_rt(that, args)").step();
				};
				return __ks_rt;
			})(), (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(this, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (fragments) => {
					return fragments.done();
				};
				return __ks_rt;
			})());
			if(KSType.isValue(this._destructor)) {
				this._destructor.toFragments(clazz, Mode.None);
				ClassDestructorDeclaration.toRouterFragments(this, clazz, this._type);
			}
			for(let __ks_0 in this._abstractMethods) {
				const methods = this._abstractMethods[__ks_0];
				for(let __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.toIndigentFragments(clazz);
				}
			}
			for(const name in this._instanceMethods) {
				const methods = this._instanceMethods[name];
				const m = [];
				if(!this._extending || !(this._extendsType.__ks_func_type_0().hasInstanceMethod(name) === true)) {
					ClassMethodDeclaration.toInstanceHeadFragments(name, clazz);
				}
				const overrides = [];
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					if(method.isForked() === true) {
						method.toForkFragments(clazz);
					}
					method.toFragments(clazz, Mode.None);
					if(method.isRoutable() === true) {
						if(method.isHiddenOverride() === true) {
							overrides.push(method.type());
						}
						else {
							m.push(method.type());
						}
					}
				}
				if(m.length > 0) {
					m.push(...overrides);
					ClassMethodDeclaration.toInstanceRouterFragments(this, clazz.newControl(), this._type, m, false, name, (() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 2) {
								if(t0(args[0]) && t0(args[1])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (node, fragments) => {
							return fragments.code("__ks_func_" + name + "_rt(that, proto, args)").step();
						};
						return __ks_rt;
					})(), (() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 1) {
								if(t0(args[0])) {
									return __ks_rt.__ks_0.call(this, args[0]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (fragments) => {
							return fragments.done();
						};
						return __ks_rt;
					})());
				}
			}
			for(const name in this._classMethods) {
				const methods = this._classMethods[name];
				const m = [];
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				ClassMethodDeclaration.toClassRouterFragments(this, clazz.newControl(), this._type, m, false, name, (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (node, fragments) => {
						return fragments.code("static " + name + "()").step();
					};
					return __ks_rt;
				})(), (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 1) {
							if(t0(args[0])) {
								return __ks_rt.__ks_0.call(this, args[0]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (fragments) => {
						return fragments.done();
					};
					return __ks_rt;
				})());
			}
			clazz.done();
			if(this._forcefullyRebinded) {
				root.done();
			}
		}
		__ks_func_toContinousES6Fragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toContinousES6Fragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toContinousES6Fragments_rt) {
				return super.__ks_func_toContinousES6Fragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toHybridES6Fragments() {
			return this.__ks_func_toHybridES6Fragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toHybridES6Fragments_0(fragments) {
			const clazz = fragments.newControl().code("class ", this._name, " extends ", this._extendsName).step();
			const m = [];
			let ctrl = null;
			if(this._constructors.length === 0) {
				ctrl = clazz.newControl().code("constructor()").step().line("super(...arguments)");
				if(this._extendsType.__ks_func_isSealedAlien_0() === true) {
					ctrl.line("this.constructor.prototype.__ks_init()");
				}
				ctrl.done();
			}
			else if(this._constructors.length === 1) {
				this._constructors[0].toHybridConstructorFragments(clazz);
			}
			else {
				ctrl = clazz.newControl().code("constructor()").step();
				for(let __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._constructors[__ks_0];
					method.toFragments(ctrl, Mode.None);
					m.push(method.type());
				}
				const assessment = Router.assess.__ks_1(m, "constructor", this);
				const line = ctrl.newLine();
				const block = line.code("const __ks_cons_rt = (args) =>").newBlock();
				Router.toFragments((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (__ks_function_1, line) => {
						line.code(KSHelper.concatString("__ks_cons_", __ks_function_1.index(), "("));
						return false;
					};
					return __ks_rt;
				})(), null, assessment, block, Router.FooterType.MUST_THROW, this);
				block.done();
				line.done();
				ctrl.line("__ks_cons_rt(arguments)").done();
			}
			if(this._inits) {
				ctrl = clazz.newControl().code("__ks_init_" + this._initsId + "()").step();
				for(let __ks_0 in this._instanceVariables) {
					const field = this._instanceVariables[__ks_0];
					field.toFragments(ctrl);
				}
				ctrl.done();
				if(this._extendsType.__ks_func_isSealedAlien_0() === true) {
					clazz.newControl().code("__ks_init()").step().line(this._name + ".prototype.__ks_init_" + this._initsId + ".call(this)").done();
				}
				else {
					clazz.newControl().code("__ks_init()").step().line(this._extendsName + ".prototype.__ks_init.call(this)").line(this._name + ".prototype.__ks_init_" + this._initsId + ".call(this)").done();
				}
			}
			else if(this._extendsType.__ks_func_isSealedAlien_0() === true) {
				clazz.newControl().code("__ks_init()").step().done();
			}
			else {
				clazz.newControl().code("__ks_init()").step().line(this._extendsName + ".prototype.__ks_init.call(this)").done();
			}
			if(KSType.isValue(this._destructor)) {
				this._destructor.toFragments(clazz, Mode.None);
				ClassDestructorDeclaration.toRouterFragments(this, clazz, this._type);
			}
			for(let __ks_0 in this._abstractMethods) {
				const methods = this._abstractMethods[__ks_0];
				for(let __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.toIndigentFragments(clazz);
				}
			}
			for(const name in this._instanceMethods) {
				const methods = this._instanceMethods[name];
				__ks_Array.__ks_func_clear_0.call(m);
				let overflow = false;
				if(this._extending) {
					let __ks_methods_1 = this._extendsType.__ks_func_type_0().listInstanceMethods(name);
					if(KSType.isValue(__ks_methods_1)) {
						for(let __ks_0 = 0, __ks_1 = __ks_methods_1.length, method; __ks_0 < __ks_1 && !(overflow); ++__ks_0) {
							method = __ks_methods_1[__ks_0];
							if(method.isOverflowing(m) === true) {
								overflow = true;
							}
						}
					}
				}
				ClassMethodDeclaration.toInstanceHeadFragments(name, clazz);
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				ClassMethodDeclaration.toInstanceRouterFragments(this, clazz.newControl(), this._type, m, overflow, name, (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (node, fragments) => {
						return fragments.code("__ks_func_" + name + "_rt(that, proto, args)").step();
					};
					return __ks_rt;
				})(), (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 1) {
							if(t0(args[0])) {
								return __ks_rt.__ks_0.call(this, args[0]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (fragments) => {
						return fragments.done();
					};
					return __ks_rt;
				})());
			}
			for(const name in this._classMethods) {
				const methods = this._classMethods[name];
				__ks_Array.__ks_func_clear_0.call(m);
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				let overflow = false;
				if(this._extending) {
					let __ks_methods_1 = this._extendsType.__ks_func_type_0().listClassMethods(name);
					if(KSType.isValue(__ks_methods_1)) {
						for(let __ks_0 = 0, __ks_1 = __ks_methods_1.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = __ks_methods_1[__ks_0];
							if(method.isOverflowing(m) === true) {
								overflow = true;
								break;
							}
						}
					}
				}
				ClassMethodDeclaration.toClassRouterFragments(this, clazz.newControl(), this._type, m, overflow, name, (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (node, fragments) => {
						return fragments.code("static " + name + "()").step();
					};
					return __ks_rt;
				})(), (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 1) {
							if(t0(args[0])) {
								return __ks_rt.__ks_0.call(null, args[0]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = function(fragments) {
						fragments.done();
					};
					return __ks_rt;
				})());
			}
			clazz.done();
		}
		__ks_func_toHybridES6Fragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toHybridES6Fragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toHybridES6Fragments_rt) {
				return super.__ks_func_toHybridES6Fragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toSealedES6Fragments() {
			return this.__ks_func_toSealedES6Fragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toSealedES6Fragments_0(fragments) {
			const clazz = fragments.newControl().code("class ", this._name);
			if(this._extending) {
				clazz.code(" extends ", this._extendsName);
			}
			clazz.step();
			if(!this._abstract) {
				const constructors = this._class.__ks_func_listAccessibleConstructors_0();
				if(constructors.length === 0) {
					clazz.newControl().code("static __ks_new_0()").step().line("const o = Object.create(" + this._name + ".prototype)").line("o.__ks_init()").line("return o").done();
				}
				else {
					for(let __ks_0 = 0, __ks_1 = constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = constructors[__ks_0];
						ClassConstructorDeclaration.toCreatorFragments(this._type, method.type(), clazz);
					}
				}
			}
			let ctrl = null;
			if(this._extending && !(this._extendsType.__ks_func_isSealedAlien_0() === true)) {
				ctrl = clazz.newControl().code("__ks_init()").step();
				ctrl.line(this._extendsName, ".prototype.__ks_init.call(this)");
				if(this._inits) {
					for(let __ks_0 in this._instanceVariables) {
						const field = this._instanceVariables[__ks_0];
						field.toFragments(ctrl);
					}
				}
				ctrl.done();
			}
			else {
				ctrl = clazz.newControl().code("constructor()").step();
				ctrl.line("this.__ks_init()");
				ctrl.line("this.__ks_cons_rt(arguments)");
				ctrl.done();
				ctrl = clazz.newControl().code("__ks_init()").step();
				for(let __ks_0 in this._instanceVariables) {
					const field = this._instanceVariables[__ks_0];
					field.toFragments(ctrl);
				}
				ctrl.done();
			}
			const m = [];
			for(let __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.toFragments(clazz, Mode.None);
				m.push(method.type());
			}
			ClassConstructorDeclaration.toRouterFragments(this, clazz.newControl(), this._type, m, "this", (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (node, fragments) => {
					return fragments.code("__ks_cons_rt(args)").step();
				};
				return __ks_rt;
			})(), (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(this, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (fragments) => {
					return fragments.done();
				};
				return __ks_rt;
			})());
			if(KSType.isValue(this._destructor)) {
				this._destructor.toFragments(clazz, Mode.None);
				ClassDestructorDeclaration.toRouterFragments(this, clazz, this._type);
			}
			for(let __ks_0 in this._abstractMethods) {
				const methods = this._abstractMethods[__ks_0];
				for(let __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.toIndigentFragments(clazz);
				}
			}
			for(const name in this._instanceMethods) {
				const methods = this._instanceMethods[name];
				__ks_Array.__ks_func_clear_0.call(m);
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				let overflow = false;
				if(this._extending) {
					let __ks_methods_1 = this._extendsType.__ks_func_type_0().listInstanceMethods(name);
					if(KSType.isValue(__ks_methods_1)) {
						for(let __ks_0 = 0, __ks_1 = __ks_methods_1.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = __ks_methods_1[__ks_0];
							if(method.isOverflowing(m) === true) {
								overflow = true;
								break;
							}
						}
					}
				}
				ClassMethodDeclaration.toInstanceRouterFragments(this, clazz.newControl(), this._type, m, overflow, name, (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (node, fragments) => {
						return fragments.code(name + "()").step();
					};
					return __ks_rt;
				})(), (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 1) {
							if(t0(args[0])) {
								return __ks_rt.__ks_0.call(this, args[0]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (fragments) => {
						return fragments.done();
					};
					return __ks_rt;
				})());
			}
			for(const name in this._classMethods) {
				const methods = this._classMethods[name];
				__ks_Array.__ks_func_clear_0.call(m);
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				let overflow = false;
				if(this._extending) {
					let __ks_methods_1 = this._extendsType.__ks_func_type_0().listClassMethods(name);
					if(KSType.isValue(__ks_methods_1)) {
						for(let __ks_0 = 0, __ks_1 = __ks_methods_1.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = __ks_methods_1[__ks_0];
							if(method.isOverflowing(m) === true) {
								overflow = true;
								break;
							}
						}
					}
				}
				ClassMethodDeclaration.toClassRouterFragments(this, clazz.newControl(), this._type, m, overflow, name, (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (node, fragments) => {
						return fragments.code("static " + name + "()").step();
					};
					return __ks_rt;
				})(), (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 1) {
							if(t0(args[0])) {
								return __ks_rt.__ks_0.call(null, args[0]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = function(fragments) {
						fragments.done();
					};
					return __ks_rt;
				})());
			}
			clazz.done();
		}
		__ks_func_toSealedES6Fragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toSealedES6Fragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toSealedES6Fragments_rt) {
				return super.__ks_func_toSealedES6Fragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_1(fragments, mode) {
			if(this._sealed) {
				if(this._es5) {
					TargetException.throwNotSupported(this._options.target, this);
				}
				else {
					this.__ks_func_toSealedES6Fragments_0(fragments);
				}
			}
			else {
				if(this._es5) {
					TargetException.throwNotSupported(this._options.target, this);
				}
				else if(this._hybrid) {
					this.__ks_func_toHybridES6Fragments_0(fragments);
				}
				else {
					this.__ks_func_toContinousES6Fragments_0(fragments);
				}
			}
			for(let __ks_0 in this._classVariables) {
				const variable = this._classVariables[__ks_0];
				variable.toFragments(fragments);
			}
			if(!this._es5 && KSType.isValue(this._data.version)) {
				let line = fragments.newLine();
				line.code("Object.defineProperty(" + this._name + ", 'version', ").newObject().line(KSHelper.concatString("value: [", this._data.version.major, ", ", this._data.version.minor, ", ", this._data.version.patch, "]")).done();
				line.code(")").done();
			}
			if(this._sealed) {
				fragments.line(KSHelper.concatString($runtime.immutableScope.__ks_0(this), this._type.__ks_func_getSealedName_0(), " = {}"));
			}
			else {
				for(const name in this._sharedMethods) {
					const {class: __ks_class_1, index} = this._sharedMethods[name];
					const line = fragments.newLine();
					const block = line.code(KSHelper.concatString(__ks_class_1.getSealedName(), "._im_", name, " = function(that, ...args)")).newBlock();
					block.newControl().code("if(that.__ks_func_" + name + "_rt)").step().line("return that.__ks_func_" + name + "_rt.call(null, that, args)").done();
					block.line(KSHelper.concatString("return ", __ks_class_1.getSealedName(), ".__ks_func_", name, "_rt(that, args)"));
					block.done();
					line.done();
				}
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		updateConstructorScope() {
			return this.__ks_func_updateConstructorScope_rt.call(null, this, this, arguments);
		}
		__ks_func_updateConstructorScope_0() {
			const superVariable = this._constructorScope.getVariable("super");
			if(this._hybrid && !this._es5) {
				const thisVariable = this._constructorScope.getVariable("this");
				thisVariable.replaceCall = (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (data, __ks_arguments_1, node) => {
						return CallHybridThisConstructorES6Substitude.__ks_new_0(data, __ks_arguments_1, this._type, node);
					};
					return __ks_rt;
				})();
				superVariable.replaceCall = (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (data, __ks_arguments_1, node) => {
						return CallHybridSuperConstructorES6Substitude.__ks_new_0(data, __ks_arguments_1, this._type, node);
					};
					return __ks_rt;
				})();
			}
			else {
				if(this._es5) {
					throw new NotSupportedException();
				}
				else {
					superVariable.replaceCall = (() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 3) {
								if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (data, __ks_arguments_1, node) => {
							return CallSuperConstructorSubstitude.__ks_new_0(data, __ks_arguments_1, this._type, node);
						};
						return __ks_rt;
					})();
				}
			}
			if(this._extendsType.__ks_func_isSealed_0() === true) {
				superVariable.replaceMemberCall = (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (property, __ks_arguments_1, node) => {
						return new MemberSealedSuperMethodSubstitude(property, __ks_arguments_1, this._type, node);
					};
					return __ks_rt;
				})();
			}
		}
		__ks_func_updateConstructorScope_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_updateConstructorScope_0.call(that);
			}
			if(super.__ks_func_updateConstructorScope_rt) {
				return super.__ks_func_updateConstructorScope_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		updateMethodScope() {
			return this.__ks_func_updateMethodScope_rt.call(null, this, this, arguments);
		}
		__ks_func_updateMethodScope_0(method) {
			if(this._extending) {
				const variable = method.scope().getVariable("super").setDeclaredType(this._scope.__ks_func_reference_0(this._extendsName));
				if(this._extendsType.__ks_func_isSealed_0() === true) {
					variable.replaceCall = (() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 3) {
								if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (data, __ks_arguments_1, node) => {
							return new CallSealedSuperMethodSubstitude(data, __ks_arguments_1, method, this._type);
						};
						return __ks_rt;
					})();
					variable.replaceMemberCall = (() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 3) {
								if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (property, __ks_arguments_1, node) => {
							return new MemberSealedSuperMethodSubstitude(property, __ks_arguments_1, this._type, node);
						};
						return __ks_rt;
					})();
					variable.replaceContext = (() => {
						const __ks_rt = (...args) => {
							if(args.length === 0) {
								return __ks_rt.__ks_0.call(this);
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = () => {
							return (() => {
								const __ks_rt = (...args) => {
									const t0 = KSType.isValue;
									if(args.length === 1) {
										if(t0(args[0])) {
											return __ks_rt.__ks_0.call(this, args[0]);
										}
									}
									throw KSHelper.badArgs();
								};
								__ks_rt.__ks_0 = (fragments) => {
									return fragments.code("this");
								};
								return __ks_rt;
							})();
						};
						return __ks_rt;
					})();
				}
				else if(this._es5) {
					throw new NotSupportedException();
				}
				else {
					variable.replaceCall = (() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 3) {
								if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (data, __ks_arguments_1, node) => {
							return new CallSuperMethodES6Substitude(data, __ks_arguments_1, method, this._type);
						};
						return __ks_rt;
					})();
				}
			}
		}
		__ks_func_updateMethodScope_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_updateMethodScope_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_updateMethodScope_rt) {
				return super.__ks_func_updateMethodScope_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		walk() {
			return this.__ks_func_walk_rt.call(null, this, this, arguments);
		}
		__ks_func_walk_0(fn) {
			fn(this._name, this._type);
		}
		__ks_func_walk_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_walk_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_walk_rt) {
				return super.__ks_func_walk_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_callMethod_0(node, variable, fnName, argName, retCode, fragments, method, index) {
			if((method.max() === 0) && !(method.isAsync() === true)) {
				fragments.line(retCode, variable.name(), ".", fnName, index, ".apply(this)");
			}
			else {
				fragments.line(retCode, variable.name(), ".", fnName, index, ".apply(this, ", argName, ")");
			}
		}
		static callMethod() {
			const t0 = KSType.isValue;
			if(arguments.length === 8) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3]) && t0(arguments[4]) && t0(arguments[5]) && t0(arguments[6]) && t0(arguments[7])) {
					return ClassDeclaration.__ks_sttc_callMethod_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(Statement.callMethod) {
				return Statement.callMethod.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_isAssigningAlias_0(data, name, __ks_constructor_1, extending) {
			if(KSType.isArray(data)) {
				for(let __ks_0 = 0, __ks_1 = data.length, d; __ks_0 < __ks_1; ++__ks_0) {
					d = data[__ks_0];
					if(ClassDeclaration.isAssigningAlias(d, name, __ks_constructor_1, extending) === true) {
						return true;
					}
				}
			}
			else {
				let __ks_0 = data.kind.valueOf();
				if(__ks_0 === NodeKind.BinaryExpression.value) {
					if(KSHelper.valueOf(data.operator.kind) === BinaryOperatorKind.Assignment.value) {
						if((KSHelper.valueOf(data.left.kind) === NodeKind.ThisExpression.value) && (data.left.name.name === name)) {
							return true;
						}
						else if((KSHelper.valueOf(data.left.kind) === NodeKind.MemberExpression.value) && (KSHelper.valueOf(data.left.object.kind) === NodeKind.Identifier.value) && (data.left.object.name === "this") && (KSHelper.valueOf(data.left.property.kind) === NodeKind.Identifier.value) && ((data.left.property.name === name) || (data.left.property.name === (KSHelper.concatString("_", name))))) {
							return true;
						}
					}
				}
				else if(__ks_0 === NodeKind.CallExpression.value) {
					if((__ks_constructor_1 === true) && (KSHelper.valueOf(data.callee.kind) === NodeKind.Identifier.value)) {
						if((data.callee.name === "this") || ((extending === true) && (data.callee.name === "super"))) {
							for(let __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
								arg = data.arguments[__ks_1];
								if((KSHelper.valueOf(arg.kind) === NodeKind.Identifier.value) && (arg.name === name)) {
									return true;
								}
							}
						}
					}
				}
				else if(__ks_0 === NodeKind.ReturnStatement.value) {
					return ClassDeclaration.isAssigningAlias(data.value, name, __ks_constructor_1, extending);
				}
			}
			return false;
		}
		static isAssigningAlias() {
			const t0 = KSType.isValue;
			if(arguments.length === 4) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3])) {
					return ClassDeclaration.__ks_sttc_isAssigningAlias_0(arguments[0], arguments[1], arguments[2], arguments[3]);
				}
			}
			if(Statement.isAssigningAlias) {
				return Statement.isAssigningAlias.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toWrongDoingFragments_0(block, ctrl, argName, async, returns) {
			if(ctrl === void 0) {
				ctrl = null;
			}
			if(ctrl === null) {
				if(async === true) {
					throw new NotImplementedException();
				}
				else {
					block.newControl().code(KSHelper.concatString("if(", argName, ".length !== 0)")).step().line("throw new SyntaxError(\"Wrong number of arguments\")").done();
				}
			}
			else {
				if(async === true) {
					ctrl.step().code("else").step();
					ctrl.line("let __ks_cb, __ks_error = new SyntaxError(\"Wrong number of arguments\")");
					ctrl.newControl().code(KSHelper.concatString("if(", argName, ".length > 0 && Type.isFunction((__ks_cb = ", argName, "[", argName, ".length - 1])))")).step().line("return __ks_cb(__ks_error)").step().code("else").step().line("throw __ks_error").done();
					ctrl.done();
				}
				else if(returns === true) {
					ctrl.done();
					block.line("throw new SyntaxError(\"Wrong number of arguments\")");
				}
				else {
					ctrl.step().code("else").step().line("throw new SyntaxError(\"Wrong number of arguments\")").done();
				}
			}
		}
		static toWrongDoingFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 5) {
				if(t0(arguments[0]) && t0(arguments[2]) && t0(arguments[3]) && t0(arguments[4])) {
					return ClassDeclaration.__ks_sttc_toWrongDoingFragments_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
				}
			}
			if(Statement.toWrongDoingFragments) {
				return Statement.toWrongDoingFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class Substitude {
		static __ks_new_0() {
			const o = Object.create(Substitude.prototype);
			o.__ks_init();
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
		}
		__ks_cons_rt(that, args) {
			if(args.length !== 0) {
				throw KSHelper.badArgs();
			}
		}
		isSkippable() {
			return this.__ks_func_isSkippable_rt.call(null, this, this, arguments);
		}
		__ks_func_isSkippable_0() {
			return false;
		}
		__ks_func_isSkippable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSkippable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
	}
	class CallThisConstructorSubstitude extends Substitude {
		static __ks_new_0(...args) {
			const o = Object.create(CallThisConstructorSubstitude.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, __ks_arguments_1, __ks_class_1, node) {
			if(data === void 0) {
				data = null;
			}
			if(__ks_arguments_1 === void 0) {
				__ks_arguments_1 = null;
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._class = __ks_class_1;
			const assessement = __ks_class_1.__ks_func_type_0().getConstructorAssessment(__ks_class_1.__ks_func_name_0(), node);
			let result = Router.matchArguments(assessement, this._arguments, node);
			if(KSType.isValue(result)) {
				this._result = result;
			}
			else {
				ReferenceException.throwNoMatchingConstructor(__ks_class_1.__ks_func_name_0(), this._arguments, node);
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, ClassType));
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t0(args[3])) {
					return CallThisConstructorSubstitude.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_0(name) {
			if(!KSType.isStructInstance(this._result, LenientCallMatchResult)) {
				for(let __ks_0 = 0, __ks_1 = this._result.matches.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
					({function: __ks_function_1} = this._result.matches[__ks_0]);
					if(!(__ks_function_1.isInitializingInstanceVariable(name) === true)) {
						return false;
					}
				}
			}
			return true;
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isNullable() {
			return this.__ks_func_isNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_isNullable_0() {
			return false;
		}
		__ks_func_isNullable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNullable_0.call(that);
			}
			if(super.__ks_func_isNullable_rt) {
				return super.__ks_func_isNullable_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode) {
			if(KSType.isStructInstance(this._result, LenientCallMatchResult)) {
				fragments.code(KSHelper.concatString(this._class.__ks_func_path_0(), ".prototype.__ks_cons_rt.call(null, this, ["));
				for(let index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
					argument = this._arguments[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(argument);
				}
				fragments.code("]");
			}
			else {
				if(this._result.matches.length === 1) {
					const {function: __ks_function_1, arguments: __ks_arguments_1} = this._result.matches[0];
					fragments.code(KSHelper.concatString(this._class.__ks_func_path_0(), ".prototype.__ks_cons_", __ks_function_1.index())).code(".call(this");
					Router.toArgumentsFragments(__ks_arguments_1, this._arguments, __ks_function_1, true, fragments, mode);
				}
				else {
					throw new NotImplementedException();
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return Type.Void;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class CallHybridThisConstructorES6Substitude extends CallThisConstructorSubstitude {
		static __ks_new_0(...args) {
			const o = Object.create(CallHybridThisConstructorES6Substitude.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_toFragments_0(fragments, mode) {
			if(KSType.isStructInstance(this._result, LenientCallMatchResult)) {
				fragments.code("__ks_cons_rt([");
				for(let index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
					argument = this._arguments[index];
					if(index > 0) {
						fragments.code($comma);
					}
					fragments.compile(argument);
				}
				fragments.code("]");
			}
			else {
				if(this._result.matches.length === 1) {
					const {function: __ks_function_1, arguments: __ks_arguments_1} = this._result.matches[0];
					fragments.code(KSHelper.concatString("__ks_cons_", __ks_function_1.index())).code("(");
					Router.toArgumentsFragments(__ks_arguments_1, this._arguments, __ks_function_1, false, fragments, mode);
				}
				else {
					throw new NotImplementedException();
				}
			}
		}
	}
	class CallSuperConstructorSubstitude extends Substitude {
		static __ks_new_0(...args) {
			const o = Object.create(CallSuperConstructorSubstitude.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._skippable = false;
		}
		__ks_cons_0(data, __ks_arguments_1, __ks_class_1, node) {
			if(data === void 0) {
				data = null;
			}
			if(__ks_arguments_1 === void 0) {
				__ks_arguments_1 = null;
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._class = __ks_class_1;
			const __ks_extends_1 = this._class.__ks_func_type_0().extends();
			const assessment = __ks_extends_1.type().getConstructorAssessment(__ks_extends_1.name(), node);
			let result = Router.matchArguments(assessment, this._arguments, node);
			if(KSType.isValue(result)) {
				this._result = result;
				this._skippable = !((__ks_extends_1.isAlien() === true) || (__ks_extends_1.isHybrid() === true)) && (KSType.isValue(this._result.matches) ? this._result.matches.length === 0 : false);
			}
			else if(__ks_extends_1.type().isExhaustiveConstructor(node) === true) {
				ReferenceException.throwNoMatchingConstructor(__ks_extends_1.name(), this._arguments, node);
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, ClassType));
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t0(args[3])) {
					return CallSuperConstructorSubstitude.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_1(name) {
			if(!KSType.isValue(this._result)) {
				return false;
			}
			else if(KSType.isStructInstance(this._result, LenientCallMatchResult)) {
				for(let __ks_0 = 0, __ks_1 = this._class.__ks_func_type_0().extends().type().listAccessibleConstructors(), __ks_2 = __ks_1.length, __ks_constructor_1; __ks_0 < __ks_2; ++__ks_0) {
					__ks_constructor_1 = __ks_1[__ks_0];
					if(!(__ks_constructor_1.isInitializingInstanceVariable(name) === true)) {
						return false;
					}
				}
			}
			else if(this._result.matches.length === 0) {
				return false;
			}
			else {
				for(let __ks_0 = 0, __ks_1 = this._result.matches.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
					({function: __ks_function_1} = this._result.matches[__ks_0]);
					if(!(__ks_function_1.isInitializingInstanceVariable(name) === true)) {
						return false;
					}
				}
			}
			return true;
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isNullable() {
			return this.__ks_func_isNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_isNullable_1() {
			return false;
		}
		__ks_func_isNullable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNullable_1.call(that);
			}
			if(super.__ks_func_isNullable_rt) {
				return super.__ks_func_isNullable_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isSkippable_0() {
			return this._skippable;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_1(fragments, mode) {
			if(!KSType.isValue(this._result) || KSType.isStructInstance(this._result, LenientCallMatchResult)) {
				fragments.code(KSHelper.concatString(this._class.__ks_func_type_0().extends().path(), ".prototype.__ks_cons_rt.call(null, this, ["));
				for(let index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
					argument = this._arguments[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(argument);
				}
				fragments.code("]");
			}
			else {
				if(this._result.matches.length === 1) {
					const {function: __ks_function_1, arguments: __ks_arguments_1} = this._result.matches[0];
					fragments.code(KSHelper.concatString(this._class.__ks_func_type_0().extends().path(), ".prototype.__ks_cons_", __ks_function_1.index())).code(".call(this");
					for(let index = 0, __ks_0 = __ks_arguments_1.length, argument; index < __ks_0; ++index) {
						argument = __ks_arguments_1[index];
						fragments.code($comma);
						if(!KSType.isValue(argument)) {
							fragments.code("void 0");
						}
						else if(KSType.isNumber(argument)) {
							this._arguments[argument].toArgumentFragments(fragments, mode);
						}
						else {
							for(let i = 0, __ks_1 = argument.length, arg; i < __ks_1; ++i) {
								arg = argument[i];
								fragments.code($comma);
								this._arguments[arg].toArgumentFragments(fragments, mode);
							}
						}
					}
				}
				else {
					throw new NotImplementedException();
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_1() {
			return Type.Void;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_1.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class CallHybridSuperConstructorES6Substitude extends CallSuperConstructorSubstitude {
		static __ks_new_0(...args) {
			const o = Object.create(CallHybridSuperConstructorES6Substitude.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_toFragments_1(fragments, mode) {
			fragments.code("super(");
			for(let index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
		}
	}
	class CallSuperMethodES6Substitude extends Substitude {
		static __ks_new_0(...args) {
			const o = Object.create(CallSuperMethodES6Substitude.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, __ks_arguments_1, method, __ks_class_1) {
			if(data === void 0) {
				data = null;
			}
			if(__ks_arguments_1 === void 0) {
				__ks_arguments_1 = null;
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._method = method;
			this._class = __ks_class_1;
			const assessment = this._class.__ks_func_type_0().extends().type().getInstantiableAssessment(this._method.__ks_func_name_2(), this._method);
			const result = Router.matchArguments(assessment, this._arguments, this._method);
			if(KSType.isValue(result)) {
				this._result = result;
				if(KSType.isStructInstance(result, PreciseCallMatchResult) && (result.matches.length === 1)) {
					this._name = KSHelper.concatString("__ks_func_", this._method.__ks_func_name_2(), "_", result.matches[0].function.__ks_func_index_0());
					this._precise = true;
				}
				else {
					this._name = KSHelper.concatString("__ks_func_", this._method.__ks_func_name_2(), "_rt");
				}
			}
			else {
				ReferenceException.throwNoMatchingClassMethod(this._method.__ks_func_name_2(), this._class.__ks_func_name_0(), KSHelper.mapArray(this._arguments, function(argument) {
					return argument.type();
				}), this._method);
			}
			this._extendsName = this._class.__ks_func_type_0().extends().name();
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, ClassMethodDeclaration);
			const t2 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, ClassType));
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3])) {
					return CallSuperMethodES6Substitude.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		isNullable() {
			return this.__ks_func_isNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_isNullable_2() {
			return false;
		}
		__ks_func_isNullable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNullable_2.call(that);
			}
			if(super.__ks_func_isNullable_rt) {
				return super.__ks_func_isNullable_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_2(fragments, mode) {
			if(this._precise) {
				fragments.code("super." + this._name + "(");
				for(let index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
					argument = this._arguments[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(argument);
				}
			}
			else {
				fragments.code("super." + this._name + ".call(null, this, " + this._extendsName + ".prototype, [");
				for(let index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
					argument = this._arguments[index];
					if(index > 0) {
						fragments.code($comma);
					}
					fragments.compile(argument);
				}
				fragments.code("]");
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_2() {
			if(KSType.isStructInstance(this._result, PreciseCallMatchResult)) {
				if(this._result.matches.length === 1) {
					return this._result.matches[0].function.__ks_func_getReturnType_0();
				}
				else {
					return Type.union(this._method.__ks_func_scope_0(), ...KSHelper.mapArray(this._result.matches, function(match) {
						return match.function.__ks_func_getReturnType_0();
					}));
				}
			}
			else {
				return Type.union(this._method.__ks_func_scope_0(), ...KSHelper.mapArray(this._result.possibilities, function(fn) {
					return fn.__ks_func_getReturnType_0();
				}));
			}
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_2.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class CallSealedSuperMethodSubstitude extends Substitude {
		static __ks_new_0(...args) {
			const o = Object.create(CallSealedSuperMethodSubstitude.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._sealed = false;
		}
		__ks_cons_0(data, __ks_arguments_1, method, __ks_class_1) {
			if(data === void 0) {
				data = null;
			}
			if(__ks_arguments_1 === void 0) {
				__ks_arguments_1 = null;
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._method = method;
			this._class = __ks_class_1;
			const assessment = this._class.__ks_func_type_0().extends().type().getInstantiableAssessment(this._method.__ks_func_name_2(), this._method);
			const result = Router.matchArguments(assessment, this._arguments, this._method);
			if(KSType.isValue(result)) {
				this._result = result;
				if(KSType.isStructInstance(result, PreciseCallMatchResult) && (result.matches.length === 1)) {
					this._name = KSHelper.concatString("__ks_func_", this._method.__ks_func_name_2(), "_", result.matches[0].function.__ks_func_index_0());
					this._sealed = result.matches[0].function.__ks_func_isSealed_0();
				}
				else {
					this._name = KSHelper.concatString("_im_", this._method.__ks_func_name_2());
					this._sealed = true;
				}
			}
			else {
				throw new NotImplementedException(this._method);
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, ClassMethodDeclaration);
			const t2 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, ClassType));
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3])) {
					return CallSealedSuperMethodSubstitude.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		isNullable() {
			return this.__ks_func_isNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_isNullable_3() {
			return false;
		}
		__ks_func_isNullable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNullable_3.call(that);
			}
			if(super.__ks_func_isNullable_rt) {
				return super.__ks_func_isNullable_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_3(fragments, mode) {
			if(this._sealed) {
				fragments.code(KSHelper.concatString(this._class.__ks_func_type_0().extends().getSealedPath(), ".", this._name, ".call(this"));
				for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = this._arguments[__ks_0];
					fragments.code($comma).compile(argument);
				}
			}
			else {
				fragments.code("super." + this._name + "(");
				for(let index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
					argument = this._arguments[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(argument);
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_3() {
			if(KSType.isStructInstance(this._result, PreciseCallMatchResult)) {
				if(this._result.matches.length === 1) {
					return this._result.matches[0].function.__ks_func_getReturnType_0();
				}
				else {
					return Type.union(this._method.__ks_func_scope_0(), ...KSHelper.mapArray(this._result.matches, function(match) {
						return match.function.__ks_func_getReturnType_0();
					}));
				}
			}
			else {
				return Type.union(this._method.__ks_func_scope_0(), ...KSHelper.mapArray(this._result.possibilities, function(fn) {
					return fn.__ks_func_getReturnType_0();
				}));
			}
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_3.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class MemberSealedSuperMethodSubstitude extends Substitude {
		static __ks_new_0(...args) {
			const o = Object.create(MemberSealedSuperMethodSubstitude.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._sealed = false;
		}
		__ks_cons_0(property, __ks_arguments_1, __ks_class_1, node) {
			if(__ks_arguments_1 === void 0) {
				__ks_arguments_1 = null;
			}
			this._property = property;
			this._arguments = __ks_arguments_1;
			this._class = __ks_class_1;
			this._extendsType = this._class.__ks_func_type_0().extends();
			let __ks_property_1 = this._extendsType.__ks_func_type_0().getInstanceProperty(this._property);
			if(KSType.isValue(__ks_property_1)) {
				this._sealed = __ks_property_1.isSealed();
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isValue;
			const t2 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, ClassType));
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t1(args[3])) {
					return MemberSealedSuperMethodSubstitude.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		isNullable() {
			return this.__ks_func_isNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_isNullable_4() {
			return false;
		}
		__ks_func_isNullable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNullable_4.call(that);
			}
			if(super.__ks_func_isNullable_rt) {
				return super.__ks_func_isNullable_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setCallMatchResult() {
			return this.__ks_func_setCallMatchResult_rt.call(null, this, this, arguments);
		}
		__ks_func_setCallMatchResult_0(result) {
			this._result = result;
		}
		__ks_func_setCallMatchResult_rt(that, proto, args) {
			const t0 = value => KSType.isStructInstance(value, PreciseCallMatchResult) || KSType.isStructInstance(value, LenientCallMatchResult);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setCallMatchResult_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_setCallMatchResult_rt) {
				return super.__ks_func_setCallMatchResult_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_4(fragments, mode) {
			if(this._sealed) {
				let index = this._extendsType.__ks_func_type_0().getSharedMethodIndex(this._property);
				if(KSType.isValue(index)) {
					fragments.code(KSHelper.concatString(this._extendsType.__ks_func_getSealedPath_0(), "._im_", index, "_", this._property, "(this"));
				}
				else {
					fragments.code(KSHelper.concatString(this._extendsType.__ks_func_getSealedPath_0(), "._im_", this._property, "(this"));
				}
				for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = this._arguments[__ks_0];
					fragments.code($comma).compile(argument);
				}
			}
			else {
				fragments.code("super." + this._property + "(");
				for(let index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
					argument = this._arguments[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(argument);
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_4.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_4() {
			if(KSType.isStructInstance(this._result, LenientCallMatchResult)) {
				throw new NotImplementedException();
			}
			else if(this._result.matches.length === 1) {
				return this._result.matches[0].function.__ks_func_getReturnType_0();
			}
			else {
				throw new NotImplementedException();
			}
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_4.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Substitude.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ClassVariableDeclaration extends AbstractNode {
		static __ks_new_0(...args) {
			const o = Object.create(ClassVariableDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._defaultValue = false;
			this._immutable = false;
			this._instance = true;
			this._initialized = true;
			this._lateInit = false;
			this._value = null;
		}
		__ks_cons_0(data, parent) {
			AbstractNode.prototype.__ks_cons_rt.call(null, this, [data, parent]);
			this._name = data.name.name;
			let __ks_public_1 = false;
			let alias = false;
			for(let __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = data.modifiers[__ks_0];
				let __ks_2 = modifier.kind.valueOf();
				if(__ks_2 === ModifierKind.Immutable.value) {
					this._immutable = true;
				}
				else if(__ks_2 === ModifierKind.LateInit.value) {
					this._lateInit = true;
				}
				else if(__ks_2 === ModifierKind.Public.value) {
					__ks_public_1 = true;
				}
				else if(__ks_2 === ModifierKind.Static.value) {
					this._instance = false;
				}
				else if(__ks_2 === ModifierKind.ThisAlias.value) {
					alias = true;
				}
			}
			if(alias && !__ks_public_1) {
				this._name = "_" + this._name;
			}
			if(this._instance) {
				parent._instanceVariables[this._name] = this;
			}
			else if((this._name === "name") || (this._name === "version")) {
				SyntaxException.__ks_sttc_throwReservedClassVariable_0(this._name, parent);
			}
			else {
				parent._classVariables[this._name] = this;
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return ClassVariableDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			if(KSType.isValue(this._data.value)) {
				this._defaultValue = true;
				this._lateInit = false;
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(this._parent.isExtending() === true) {
				const type = this._parent._extendsType.type();
				if(this._instance) {
					if(type.hasInstanceVariable(this._name) === true) {
						ReferenceException.__ks_sttc_throwAlreadyDefinedField_0(this._name, this);
					}
				}
				else {
					if(type.hasClassVariable(this._name) === true) {
						ReferenceException.__ks_sttc_throwAlreadyDefinedField_0(this._name, this);
					}
				}
			}
			this._type = ClassVariableType.__ks_sttc_fromAST_4(this._data, this);
			if(!this._defaultValue && (this._type.__ks_func_isRequiringInitialization_0() === true)) {
				this._initialized = false;
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			if(this._defaultValue) {
				this._value = $compile.expression(this._data.value, this, this._instance ? this._parent._instanceVariableScope : null);
				this._value.analyse();
				this._value.prepare();
				if(KSType.isValue(this._data.type)) {
					if(!(this._value.type().isAssignableToVariable(this._type.__ks_func_type_0(), true, true, false) === true)) {
						TypeException.throwInvalidAssignement(this._name, this._type, this._value.type(), this);
					}
				}
				else if(this._immutable && !this._lateInit) {
					this._type.type(this._value.type());
				}
				this._value.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasDefaultValue() {
			return this.__ks_func_hasDefaultValue_rt.call(null, this, this, arguments);
		}
		__ks_func_hasDefaultValue_0() {
			return this._defaultValue;
		}
		__ks_func_hasDefaultValue_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasDefaultValue_0.call(that);
			}
			if(super.__ks_func_hasDefaultValue_rt) {
				return super.__ks_func_hasDefaultValue_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		initialize() {
			return this.__ks_func_initialize_rt.call(null, this, this, arguments);
		}
		__ks_func_initialize_0(type, node) {
			if(!this._initialized) {
				this._initialized = true;
			}
		}
		__ks_func_initialize_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_initialize_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_initialize_rt) {
				return super.__ks_func_initialize_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isImmutable() {
			return this.__ks_func_isImmutable_rt.call(null, this, this, arguments);
		}
		__ks_func_isImmutable_0() {
			return this._immutable;
		}
		__ks_func_isImmutable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isImmutable_0.call(that);
			}
			if(super.__ks_func_isImmutable_rt) {
				return super.__ks_func_isImmutable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitialized() {
			return this.__ks_func_isInitialized_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitialized_0() {
			return this._initialized;
		}
		__ks_func_isInitialized_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInitialized_0.call(that);
			}
			if(super.__ks_func_isInitialized_rt) {
				return super.__ks_func_isInitialized_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInstance() {
			return this.__ks_func_isInstance_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstance_0() {
			return this._instance;
		}
		__ks_func_isInstance_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstance_0.call(that);
			}
			if(super.__ks_func_isInstance_rt) {
				return super.__ks_func_isInstance_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isLateInit() {
			return this.__ks_func_isLateInit_rt.call(null, this, this, arguments);
		}
		__ks_func_isLateInit_0() {
			return this._lateInit;
		}
		__ks_func_isLateInit_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isLateInit_0.call(that);
			}
			if(super.__ks_func_isLateInit_rt) {
				return super.__ks_func_isLateInit_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRequiringInitialization() {
			return this.__ks_func_isRequiringInitialization_rt.call(null, this, this, arguments);
		}
		__ks_func_isRequiringInitialization_0() {
			return this._type.__ks_func_isRequiringInitialization_0();
		}
		__ks_func_isRequiringInitialization_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRequiringInitialization_0.call(that);
			}
			if(super.__ks_func_isRequiringInitialization_rt) {
				return super.__ks_func_isRequiringInitialization_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_1() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_1.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_2(fragments) {
			if(this._defaultValue) {
				if(this._instance) {
					fragments.newLine().code("this." + this._name + " = ").compile(this._value).done();
				}
				else {
					fragments.newLine().code(KSHelper.concatString(this._parent.name(), ".", this._name, " = ")).compile(this._value).done();
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toFragments_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_1() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_1.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ClassConstructorDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ClassConstructorDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._aliases = [];
			this._forked = false;
			this._forks = null;
			this._hiddenOverride = false;
			this._indigentValues = [];
			this._override = false;
			this._overriding = false;
			this._topNodes = [];
		}
		__ks_cons_0(data, parent) {
			Statement.prototype.__ks_cons_rt.call(null, this, [data, parent, parent.newScope(parent._constructorScope, ScopeType.Block)]);
			this._abstract = parent.isAbstract();
			for(let __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Override.value) {
					this._override = true;
				}
			}
			parent._constructors.push(this);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return ClassConstructorDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._parameters = [];
			for(let __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = Parameter.__ks_new_0(parameter, this));
				parameter.__ks_func_analyse_0();
			}
			this._block = ConstructorBlock.__ks_new_0($ast.block($ast.body.__ks_0(this._data)), this, this._scope);
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_prepare_0();
			}
			this._type = new ClassConstructorType(KSHelper.mapArray(this._parameters, function(parameter) {
				return parameter.__ks_func_type_30();
			}), this._data, this);
			let overridden = null;
			if(this._parent.isExtending() === true) {
				const superclass = this._parent.extends().type();
				let data = this.getOveriddenConstructor(superclass);
				if(KSType.isValue(data)) {
					overridden = data.method, this._type = data.type;
					this._overriding = true;
					if(!(superclass.isAbstract() === true)) {
						this._hiddenOverride = true;
					}
				}
			}
			else if(this._override) {
				SyntaxException.throwNoOverridableConstructor(this._parent.type(), this._parameters, this);
			}
			let index = 1;
			if(this._block.__ks_func_isEmpty_0() === true) {
				if(this._parent._extending === true) {
					this.__ks_func_addCallToParentConstructor_0();
					index = 0;
				}
			}
			else if(((index = this.getConstructorIndex(this._block.__ks_func_statements_0())) === -1) && (this._parent._extending === true)) {
				SyntaxException.__ks_sttc_throwNoSuperCall_0(this);
			}
			if(this._aliases.length === 0) {
				this._block.__ks_func_analyse_0();
			}
			else {
				this._block.__ks_func_analyse_1(0, index);
				this._block.__ks_func_analyse_2(this._aliases);
				this._block.__ks_func_analyse_1(index + 1);
			}
			const __ks_class_1 = this._parent.type().type();
			for(let __ks_0 = 0, __ks_1 = this._aliases.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._aliases[__ks_0];
				const name = statement.getVariableName();
				let variable = __ks_class_1.getInstanceVariable(name);
				if(KSType.isValue(variable)) {
					if(variable.isRequiringInitialization() === true) {
						this._block.initializeVariable(VariableBrief(name, statement.type(), void 0, void 0, void 0, true), statement, this);
					}
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_translate_0();
			}
			for(let __ks_0 = 0, __ks_1 = this._indigentValues.length, value; __ks_0 < __ks_1; ++__ks_0) {
				({value} = this._indigentValues[__ks_0]);
				value.prepare();
				value.translate();
			}
			this._block.__ks_func_prepare_0();
			this._block.__ks_func_translate_0();
			this._internalName = KSHelper.concatString("__ks_cons_", this._type.__ks_func_index_0());
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addAtThisParameter() {
			return this.__ks_func_addAtThisParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_addAtThisParameter_0(statement) {
			if(!(ClassDeclaration.isAssigningAlias(this._block.__ks_func_statements_0(), statement.__ks_func_name_20(), true, this._parent._extending) === true)) {
				this._aliases.push(statement);
			}
		}
		__ks_func_addAtThisParameter_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, AliasStatement);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addAtThisParameter_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_addAtThisParameter_rt) {
				return super.__ks_func_addAtThisParameter_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addCallToParentConstructor() {
			return this.__ks_func_addCallToParentConstructor_rt.call(null, this, this, arguments);
		}
		__ks_func_addCallToParentConstructor_0() {
			const extendsType = this._parent.extends().type();
			if(extendsType.matchArguments([], this) === true) {
				if((extendsType.hasConstructors() === true) || (extendsType.isSealed() === true)) {
					this._block.__ks_func_addStatement_0((() => {
						const d = new Dictionary();
						d.kind = NodeKind.CallExpression;
						d.attributes = [];
						d.modifiers = [];
						d.scope = (() => {
							const d = new Dictionary();
							d.kind = ScopeKind.This;
							return d;
						})();
						d.callee = (() => {
							const d = new Dictionary();
							d.kind = NodeKind.Identifier;
							d.name = "super";
							d.start = this._data.start;
							d.end = this._data.start;
							return d;
						})();
						d.arguments = [];
						d.start = this._data.start;
						d.end = this._data.start;
						return d;
					})());
				}
			}
			else {
				SyntaxException.__ks_sttc_throwNoSuperCall_0(this);
			}
		}
		__ks_func_addCallToParentConstructor_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_addCallToParentConstructor_0.call(that);
			}
			if(super.__ks_func_addCallToParentConstructor_rt) {
				return super.__ks_func_addCallToParentConstructor_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addIndigentValue() {
			return this.__ks_func_addIndigentValue_rt.call(null, this, this, arguments);
		}
		__ks_func_addIndigentValue_0(value, parameters) {
			const __ks_class_1 = this._parent.type().type();
			const name = KSHelper.concatString("__ks_default_", __ks_class_1.level(), "_", __ks_class_1.incDefaultSequence());
			this._indigentValues.push((() => {
				const d = new Dictionary();
				d.name = name;
				d.value = value;
				d.parameters = parameters;
				return d;
			})());
			return name;
		}
		__ks_func_addIndigentValue_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Expression);
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addIndigentValue_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addIndigentValue_rt) {
				return super.__ks_func_addIndigentValue_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addTopNode() {
			return this.__ks_func_addTopNode_rt.call(null, this, this, arguments);
		}
		__ks_func_addTopNode_1(node) {
			this._topNodes.push(node);
		}
		__ks_func_addTopNode_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addTopNode_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_addTopNode_rt) {
				return super.__ks_func_addTopNode_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_authority_0() {
			return this;
		}
		checkVariableInitialization() {
			return this.__ks_func_checkVariableInitialization_rt.call(null, this, this, arguments);
		}
		__ks_func_checkVariableInitialization_0(name) {
			if(this._block.__ks_func_isInitializingInstanceVariable_3(name) === true) {
				this._type.addInitializingInstanceVariable(name);
			}
			else if(!this._abstract) {
				SyntaxException.__ks_sttc_throwNotInitializedField_0(name, this);
			}
		}
		__ks_func_checkVariableInitialization_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_checkVariableInitialization_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_checkVariableInitialization_rt) {
				return super.__ks_func_checkVariableInitialization_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getConstructorIndex() {
			return this.__ks_func_getConstructorIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_getConstructorIndex_0(body) {
			for(let index = 0, __ks_0 = body.length, statement; index < __ks_0; ++index) {
				statement = body[index];
				if(KSHelper.valueOf(statement.kind) === NodeKind.CallExpression.value) {
					if((KSHelper.valueOf(statement.callee.kind) === NodeKind.Identifier.value) && ((statement.callee.name === "this") || (statement.callee.name === "super"))) {
						return index;
					}
				}
				else if(KSHelper.valueOf(statement.kind) === NodeKind.IfStatement.value) {
					if(KSType.isValue(statement.whenFalse) && (this.getConstructorIndex(statement.whenTrue.statements) !== -1) && (this.getConstructorIndex(statement.whenFalse.statements) !== -1)) {
						return index;
					}
				}
			}
			return -1;
		}
		__ks_func_getConstructorIndex_rt(that, proto, args) {
			const t0 = KSType.isArray;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getConstructorIndex_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getConstructorIndex_rt) {
				return super.__ks_func_getConstructorIndex_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getFunctionNode_0() {
			return this;
		}
		getOverridableVarname() {
			return this.__ks_func_getOverridableVarname_rt.call(null, this, this, arguments);
		}
		__ks_func_getOverridableVarname_0() {
			return "this";
		}
		__ks_func_getOverridableVarname_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getOverridableVarname_0.call(that);
			}
			if(super.__ks_func_getOverridableVarname_rt) {
				return super.__ks_func_getOverridableVarname_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getParameterOffset() {
			return this.__ks_func_getParameterOffset_rt.call(null, this, this, arguments);
		}
		__ks_func_getParameterOffset_0() {
			return 0;
		}
		__ks_func_getParameterOffset_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getParameterOffset_0.call(that);
			}
			if(super.__ks_func_getParameterOffset_rt) {
				return super.__ks_func_getParameterOffset_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getSuperIndex() {
			return this.__ks_func_getSuperIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_getSuperIndex_0(body) {
			for(let index = 0, __ks_0 = body.length, statement; index < __ks_0; ++index) {
				statement = body[index];
				if(KSHelper.valueOf(statement.kind) === NodeKind.CallExpression.value) {
					if((KSHelper.valueOf(statement.callee.kind) === NodeKind.Identifier.value) && (statement.callee.name === "super")) {
						return index;
					}
				}
				else if(KSHelper.valueOf(statement.kind) === NodeKind.IfStatement.value) {
					if(KSType.isValue(statement.whenFalse) && (this.getSuperIndex(statement.whenTrue.statements) !== -1) && (this.getSuperIndex(statement.whenFalse.statements) !== -1)) {
						return index;
					}
				}
			}
			return -1;
		}
		__ks_func_getSuperIndex_rt(that, proto, args) {
			const t0 = KSType.isArray;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getSuperIndex_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getSuperIndex_rt) {
				return super.__ks_func_getSuperIndex_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAbstract() {
			return this.__ks_func_isAbstract_rt.call(null, this, this, arguments);
		}
		__ks_func_isAbstract_1() {
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Abstract.value) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isAbstract_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAbstract_1.call(that);
			}
			if(super.__ks_func_isAbstract_rt) {
				return super.__ks_func_isAbstract_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameter() {
			return this.__ks_func_isAssertingParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameter_0() {
			return this._options.rules.assertParameter;
		}
		__ks_func_isAssertingParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameter_0.call(that);
			}
			if(super.__ks_func_isAssertingParameter_rt) {
				return super.__ks_func_isAssertingParameter_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameterType() {
			return this.__ks_func_isAssertingParameterType_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameterType_0() {
			return (this._options.rules.assertParameter === true) && (this._options.rules.assertParameterType === true);
		}
		__ks_func_isAssertingParameterType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameterType_0.call(that);
			}
			if(super.__ks_func_isAssertingParameterType_rt) {
				return super.__ks_func_isAssertingParameterType_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isConsumedError_0(error) {
			return this._type.__ks_func_isCatchingError_0(error);
		}
		isForked() {
			return this.__ks_func_isForked_rt.call(null, this, this, arguments);
		}
		__ks_func_isForked_0() {
			return this._forked;
		}
		__ks_func_isForked_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isForked_0.call(that);
			}
			if(super.__ks_func_isForked_rt) {
				return super.__ks_func_isForked_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isHiddenOverride() {
			return this.__ks_func_isHiddenOverride_rt.call(null, this, this, arguments);
		}
		__ks_func_isHiddenOverride_0() {
			return this._hiddenOverride;
		}
		__ks_func_isHiddenOverride_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isHiddenOverride_0.call(that);
			}
			if(super.__ks_func_isHiddenOverride_rt) {
				return super.__ks_func_isHiddenOverride_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInstanceMethod() {
			return this.__ks_func_isInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstanceMethod_0() {
			return true;
		}
		__ks_func_isInstanceMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstanceMethod_0.call(that);
			}
			if(super.__ks_func_isInstanceMethod_rt) {
				return super.__ks_func_isInstanceMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isOverridableFunction() {
			return this.__ks_func_isOverridableFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_isOverridableFunction_0() {
			return true;
		}
		__ks_func_isOverridableFunction_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isOverridableFunction_0.call(that);
			}
			if(super.__ks_func_isOverridableFunction_rt) {
				return super.__ks_func_isOverridableFunction_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRoutable() {
			return this.__ks_func_isRoutable_rt.call(null, this, this, arguments);
		}
		__ks_func_isRoutable_0() {
			return true;
		}
		__ks_func_isRoutable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRoutable_0.call(that);
			}
			if(super.__ks_func_isRoutable_rt) {
				return super.__ks_func_isRoutable_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameters() {
			return this.__ks_func_parameters_rt.call(null, this, this, arguments);
		}
		__ks_func_parameters_0() {
			return this._parameters;
		}
		__ks_func_parameters_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameters_0.call(that);
			}
			if(super.__ks_func_parameters_rt) {
				return super.__ks_func_parameters_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toHybridConstructorFragments() {
			return this.__ks_func_toHybridConstructorFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toHybridConstructorFragments_0(fragments) {
			let ctrl = fragments.newControl().code("constructor(");
			Parameter.toFragments(this, ctrl, ParameterMode.Default, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(null, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(node) {
					return node.code(")").step();
				};
				return __ks_rt;
			})());
			if(this._parent._extendsType.isSealedAlien() === true) {
				const index = this.getSuperIndex(this._block.__ks_func_statements_0());
				if(index === -1) {
					ctrl.line("super()");
					ctrl.line("this.constructor.prototype.__ks_init()");
					ctrl.compile(this._block);
				}
				else {
					this._block.toRangeFragments(ctrl, 0, index);
					ctrl.line("this.constructor.prototype.__ks_init()");
					this._block.toRangeFragments(ctrl, KSOperator.addOrConcat(index, 1));
				}
			}
			else {
				ctrl.compile(this._block);
			}
			ctrl.done();
		}
		__ks_func_toHybridConstructorFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toHybridConstructorFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toHybridConstructorFragments_rt) {
				return super.__ks_func_toHybridConstructorFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toIndigentFragments() {
			return this.__ks_func_toIndigentFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toIndigentFragments_0(fragments) {
			for(let __ks_0 = 0, __ks_1 = this._indigentValues.length, name, value, parameters; __ks_0 < __ks_1; ++__ks_0) {
				({name, value, parameters} = this._indigentValues[__ks_0]);
				const ctrl = fragments.newControl();
				if(this._parent._es5 === true) {
					ctrl.code(KSHelper.concatString(name, ": function(", parameters.join(", "), ")")).step();
				}
				else {
					ctrl.code(KSHelper.concatString(name, "(", parameters.join(", "), ")")).step();
				}
				ctrl.newLine().code("return ").compile(value).done();
				if(!(this._parent._es5 === true)) {
					ctrl.done();
				}
			}
		}
		__ks_func_toIndigentFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toIndigentFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toIndigentFragments_rt) {
				return super.__ks_func_toIndigentFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_2(fragments, mode) {
			if(!(this._parent._es5 === true) && (this._parent.isHybrid() === true)) {
				const ctrl = fragments.newLine().code("const " + this._internalName + " = (");
				const block = Parameter.toFragments(this, ctrl, ParameterMode.Default, (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 1) {
							if(t0(args[0])) {
								return __ks_rt.__ks_0.call(null, args[0]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = function(node) {
						return node.code(") =>").newBlock();
					};
					return __ks_rt;
				})());
				const index = this.getSuperIndex(this._block.__ks_func_statements_0());
				if(index === -1) {
					block.compile(this._block);
				}
				else {
					this._block.toRangeFragments(block, 0, index);
					if(this._parent.extends().isSealed() === true) {
						block.line("this.__ks_init()");
					}
					this._block.toRangeFragments(block, KSOperator.addOrConcat(index, 1));
				}
				block.done();
				ctrl.done();
			}
			else {
				let ctrl = fragments.newControl();
				if(this._parent._es5 === true) {
					ctrl.code(this._internalName + ": function(");
				}
				else {
					ctrl.code(this._internalName + "(");
				}
				Parameter.toFragments(this, ctrl, ParameterMode.Default, (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 1) {
							if(t0(args[0])) {
								return __ks_rt.__ks_0.call(null, args[0]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = function(node) {
						return node.code(")").step();
					};
					return __ks_rt;
				})());
				for(let __ks_0 = 0, __ks_1 = this._topNodes.length, node; __ks_0 < __ks_1; ++__ks_0) {
					node = this._topNodes[__ks_0];
					node.toAuthorityFragments(ctrl);
				}
				ctrl.compile(this._block);
				if(!(this._parent._es5 === true)) {
					ctrl.done();
				}
			}
			this.__ks_func_toIndigentFragments_0(fragments);
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_2() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_2.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getOveriddenConstructor() {
			return this.__ks_func_getOveriddenConstructor_rt.call(null, this, this, arguments);
		}
		__ks_func_getOveriddenConstructor_0(superclass) {
			let mode = MatchingMode.FunctionSignature;
			if(!this._override) {
				mode = MatchingMode(mode & ~MatchingMode.MissingParameterType & ~MatchingMode.MissingParameterArity);
			}
			const methods = superclass.__ks_func_listConstructors_1(this._type, mode);
			let method = null;
			let exact = false;
			if(methods.length === 1) {
				method = methods[0];
			}
			else if(methods.length > 0) {
				for(let __ks_0 = 0, __ks_1 = methods.length, m; __ks_0 < __ks_1; ++__ks_0) {
					m = methods[__ks_0];
					if(m.isSubsetOf(this._type, MatchingMode.ExactParameter) === true) {
						method = m;
						exact = true;
						break;
					}
				}
				if(!KSType.isValue(method)) {
					return null;
				}
			}
			if(KSType.isValue(method)) {
				const type = this._override ? method.clone() : this._type;
				if(this._override) {
					const parameters = type.parameters();
					for(let index = 0, __ks_0 = this._parameters.length, parameter; index < __ks_0; ++index) {
						parameter = this._parameters[index];
						const currentType = parameter.__ks_func_type_30();
						const masterType = parameters[index];
						if(currentType.__ks_func_isMissingType_0() === true) {
							parameter.type(masterType);
						}
						else {
							if((masterType.hasDefaultValue() === true) && !(currentType.__ks_func_hasDefaultValue_1() === true)) {
								parameter.setDefaultValue(masterType.getDefaultValue());
							}
							parameters[index] = currentType;
						}
					}
				}
				if(!(this._type.__ks_func_isMissingError_0() === true)) {
					const newTypes = this._type.__ks_func_listErrors_0();
					for(let __ks_0 = 0, __ks_1 = method.listErrors(), __ks_2 = __ks_1.length, oldType; __ks_0 < __ks_2; ++__ks_0) {
						oldType = __ks_1[__ks_0];
						let matched = false;
						for(let __ks_3 = 0, __ks_4 = newTypes.length, newType; __ks_3 < __ks_4 && !(matched); ++__ks_3) {
							newType = newTypes[__ks_3];
							if((newType.isSubsetOf(oldType, MatchingMode.Default) === true) || (newType.isInstanceOf(oldType) === true)) {
								matched = true;
							}
						}
						if(!matched) {
							if(this._override) {
								SyntaxException.throwNoOverridableConstructor(this._parent.extends(), this._parameters, this);
							}
							return null;
						}
					}
				}
				return (() => {
					const d = new Dictionary();
					d.method = method;
					d.type = type;
					return d;
				})();
			}
			else if(this._override) {
				SyntaxException.throwNoOverridableConstructor(this._parent.extends(), this._parameters, this);
			}
			return null;
		}
		__ks_func_getOveriddenConstructor_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ClassType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getOveriddenConstructor_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getOveriddenConstructor_rt) {
				return super.__ks_func_getOveriddenConstructor_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listOverloadedConstructors() {
			return this.__ks_func_listOverloadedConstructors_rt.call(null, this, this, arguments);
		}
		__ks_func_listOverloadedConstructors_0(superclass) {
			let methods = superclass.__ks_func_listConstructors_0();
			if(KSType.isValue(methods)) {
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					if(method.isSubsetOf(this._type, MatchingMode.ExactParameter) === true) {
						return [];
					}
				}
			}
			return superclass.__ks_func_listConstructors_1(this._type, MatchingMode(MatchingMode.FunctionSignature | MatchingMode.SubsetParameter));
		}
		__ks_func_listOverloadedConstructors_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ClassType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listOverloadedConstructors_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_listOverloadedConstructors_rt) {
				return super.__ks_func_listOverloadedConstructors_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toCreatorFragments_0(__ks_class_1, __ks_constructor_1, fragments) {
			const ctrl = fragments.newControl();
			const args = (__ks_constructor_1.max() === 0) ? "" : "...args";
			const block = ctrl.code(KSHelper.concatString("static __ks_new_", __ks_constructor_1.index(), "(", args, ")")).step();
			block.line(KSHelper.concatString("const o = Object.create(", __ks_class_1.name(), ".prototype)")).line("o.__ks_init()").line(KSHelper.concatString("o.__ks_cons_", __ks_constructor_1.index(), "(", args, ")")).line("return o");
			ctrl.done();
		}
		static toCreatorFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return ClassConstructorDeclaration.__ks_sttc_toCreatorFragments_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Statement.toCreatorFragments) {
				return Statement.toCreatorFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toRouterFragments_0(node, fragments, variable, methods, scope, header, footer) {
			if(scope === void 0) {
				scope = null;
			}
			const name = variable.name();
			const assessment = Router.assess(methods, "constructor", node);
			header(node, fragments);
			if(node.isExtending() === true) {
				Router.toFragments((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (__ks_function_1, line) => {
						line.code(KSHelper.concatString(name, ".prototype.__ks_cons_", __ks_function_1.index(), ".call(", (KSType.isValue(scope) ? scope : "that")));
						return true;
					};
					return __ks_rt;
				})(), null, assessment, fragments.block(), (variable.type().hasConstructors() === true) ? Router.FooterType.MUST_THROW : Router.FooterType.NO_THROW, (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (fragments, __ks_0) => {
						const constructorName = (variable.type().extends().isSealedAlien() === true) ? "constructor" : "__ks_cons_rt";
						fragments.line("super." + constructorName + ".call(null, that, args)");
					};
					return __ks_rt;
				})(), node);
			}
			else {
				Router.toFragments((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (__ks_function_1, line) => {
						line.code(KSHelper.concatString(name, ".prototype.__ks_cons_", __ks_function_1.index(), ".call(", (KSType.isValue(scope) ? scope : "that")));
						return true;
					};
					return __ks_rt;
				})(), null, assessment, fragments.block(), node);
			}
			footer(fragments);
		}
		static toRouterFragments() {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isString(value) || KSType.isNull(value);
			if(arguments.length === 7) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3]) && t1(arguments[4]) && t0(arguments[5]) && t0(arguments[6])) {
					return ClassConstructorDeclaration.__ks_sttc_toRouterFragments_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
				}
			}
			if(Statement.toRouterFragments) {
				return Statement.toRouterFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class ClassDestructorDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ClassDestructorDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, parent) {
			Statement.prototype.__ks_cons_rt.call(null, this, [data, parent, parent.newScope(parent._destructorScope, ScopeType.Block)]);
			this._internalName = "__ks_destroy_0";
			parent._destructor = this;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return ClassDestructorDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			const parameter = Parameter.__ks_new_0((() => {
				const d = new Dictionary();
				d.kind = NodeKind.Parameter;
				d.modifiers = [];
				d.name = $ast.identifier.__ks_0("that");
				return d;
			})(), this);
			parameter.__ks_func_analyse_0();
			this._parameters = [parameter];
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._parameters[0].prepare();
			this._type = new ClassDestructorType(this._data, this);
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._block = $compile.function($ast.body.__ks_0(this._data), this);
			this._block.__ks_func_analyse_0();
			this._block.__ks_func_prepare_0();
			this._block.__ks_func_translate_0();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getFunctionNode_0() {
			return this;
		}
		getParameterOffset() {
			return this.__ks_func_getParameterOffset_rt.call(null, this, this, arguments);
		}
		__ks_func_getParameterOffset_1() {
			return 0;
		}
		__ks_func_getParameterOffset_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getParameterOffset_1.call(that);
			}
			if(super.__ks_func_getParameterOffset_rt) {
				return super.__ks_func_getParameterOffset_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAbstract() {
			return this.__ks_func_isAbstract_rt.call(null, this, this, arguments);
		}
		__ks_func_isAbstract_2() {
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Abstract.value) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isAbstract_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAbstract_2.call(that);
			}
			if(super.__ks_func_isAbstract_rt) {
				return super.__ks_func_isAbstract_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameter() {
			return this.__ks_func_isAssertingParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameter_1() {
			return this._options.rules.assertParameter;
		}
		__ks_func_isAssertingParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameter_1.call(that);
			}
			if(super.__ks_func_isAssertingParameter_rt) {
				return super.__ks_func_isAssertingParameter_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameterType() {
			return this.__ks_func_isAssertingParameterType_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameterType_1() {
			return (this._options.rules.assertParameter === true) && (this._options.rules.assertParameterType === true);
		}
		__ks_func_isAssertingParameterType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameterType_1.call(that);
			}
			if(super.__ks_func_isAssertingParameterType_rt) {
				return super.__ks_func_isAssertingParameterType_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInstance() {
			return this.__ks_func_isInstance_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstance_1() {
			return false;
		}
		__ks_func_isInstance_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstance_1.call(that);
			}
			if(super.__ks_func_isInstance_rt) {
				return super.__ks_func_isInstance_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInstanceMethod() {
			return this.__ks_func_isInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstanceMethod_1() {
			return true;
		}
		__ks_func_isInstanceMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstanceMethod_1.call(that);
			}
			if(super.__ks_func_isInstanceMethod_rt) {
				return super.__ks_func_isInstanceMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isOverridableFunction() {
			return this.__ks_func_isOverridableFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_isOverridableFunction_1() {
			return false;
		}
		__ks_func_isOverridableFunction_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isOverridableFunction_1.call(that);
			}
			if(super.__ks_func_isOverridableFunction_rt) {
				return super.__ks_func_isOverridableFunction_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameters() {
			return this.__ks_func_parameters_rt.call(null, this, this, arguments);
		}
		__ks_func_parameters_1() {
			return this._parameters;
		}
		__ks_func_parameters_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameters_1.call(that);
			}
			if(super.__ks_func_parameters_rt) {
				return super.__ks_func_parameters_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_3(fragments, mode) {
			let ctrl = fragments.newControl();
			if(this._parent._es5 === true) {
				ctrl.code(this._internalName + ": function(");
			}
			else {
				ctrl.code("static " + this._internalName + "(");
			}
			Parameter.toFragments(this, ctrl, ParameterMode.Default, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(null, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(node) {
					return node.code(")").step();
				};
				return __ks_rt;
			})());
			ctrl.compile(this._block);
			if(!(this._parent._es5 === true)) {
				ctrl.done();
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_3() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_3.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toRouterFragments_1(node, fragments, variable) {
			let ctrl = fragments.newControl();
			if(node._es5 === true) {
				ctrl.code("__ks_destroy: function(that)");
			}
			else {
				ctrl.code("static __ks_destroy(that)");
			}
			ctrl.step();
			if(node._extending === true) {
				ctrl.line(KSHelper.concatString(node._extendsName, ".__ks_destroy(that)"));
			}
			for(let i = 0, __ks_0 = variable.type().getDestructorCount(); i < __ks_0; ++i) {
				ctrl.line(KSHelper.concatString(node._name, ".__ks_destroy_", i, "(that)"));
			}
			if(!(node._es5 === true)) {
				ctrl.done();
			}
		}
		static toRouterFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return ClassDestructorDeclaration.__ks_sttc_toRouterFragments_1(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Statement.toRouterFragments) {
				return Statement.toRouterFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class ClassMethodDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ClassMethodDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._abstract = false;
			this._aliases = [];
			this._analysed = false;
			this._autoTyping = false;
			this._awaiting = false;
			this._exact = false;
			this._exit = false;
			this._forked = false;
			this._forks = null;
			this._hiddenOverride = false;
			this._indigentValues = [];
			this._instance = true;
			this._override = false;
			this._overriding = false;
			this._parameters = [];
			this._returnNull = false;
			this._topNodes = [];
		}
		__ks_cons_0(data, parent) {
			Statement.prototype.__ks_cons_rt.call(null, this, [data, parent, parent.newInstanceMethodScope(this)]);
			this._name = data.name.name;
			for(let __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Abstract.value) {
					this._abstract = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Override.value) {
					this._override = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Static.value) {
					this._instance = false;
				}
			}
			if(this._instance) {
				if(this._abstract) {
					if(parent._abstract === true) {
						if(KSType.isArray(parent._abstractMethods[this._name])) {
							parent._abstractMethods[this._name].push(this);
						}
						else {
							parent._abstractMethods[this._name] = [this];
						}
					}
					else {
						SyntaxException.throwNotAbstractClass(parent._name, this._name, parent);
					}
				}
				else {
					if(KSType.isArray(parent._instanceMethods[this._name])) {
						parent._instanceMethods[this._name].push(this);
					}
					else {
						parent._instanceMethods[this._name] = [this];
					}
				}
			}
			else if((this._name === "name") || (this._name === "version")) {
				SyntaxException.__ks_sttc_throwReservedClassMethod_0(this._name, parent);
			}
			else {
				if(KSType.isArray(parent._classMethods[this._name])) {
					parent._classMethods[this._name].push(this);
				}
				else {
					parent._classMethods[this._name] = [this];
				}
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return ClassMethodDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = Parameter.__ks_new_0(parameter, this));
				parameter.__ks_func_analyse_0();
			}
			if(KSType.isValue(this._data.body)) {
				this._returnNull = (KSHelper.valueOf(this._data.body.kind) === NodeKind.IfStatement.value) || (KSHelper.valueOf(this._data.body.kind) === NodeKind.UnlessStatement.value);
			}
			this._block = MethodBlock.__ks_new_0($ast.block($ast.body.__ks_0(this._data)), this, this._scope);
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(this._analysed) {
				return;
			}
			this._parent.updateMethodScope(this);
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_prepare_0();
			}
			this._type = new ClassMethodType(KSHelper.mapArray(this._parameters, function(parameter) {
				return parameter.__ks_func_type_30();
			}), this._data, this);
			const returnReference = KSType.isValue(this._data.type) ? KSHelper.valueOf(this._data.type.kind) === NodeKind.ReturnTypeReference.value : false;
			let overridden = null;
			let overloaded = [];
			if(this._parent.isExtending() === true) {
				const superclass = this._parent.extends().type();
				let data = this.getOveriddenMethod(superclass, returnReference);
				if(KSType.isValue(data)) {
					this._overriding = true;
					overridden = data.method, this._type = data.type, this._exact = data.exact;
				}
				overloaded = this.listOverloadedMethods(superclass);
				if(this._overriding) {
					if(this._exact) {
						__ks_Array.__ks_func_remove_0.call(overloaded, [overridden]);
					}
					else if(__ks_Array.__ks_func_contains_0.call(overloaded, overridden)) {
						this._parent.addForkedMethod(this._name, overridden, this._type, true);
						__ks_Array.__ks_func_remove_0.call(overloaded, [overridden]);
					}
					else {
						this._parent.addForkedMethod(this._name, overridden, this._type, true);
					}
				}
				for(let __ks_0 = 0, __ks_1 = overloaded.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = overloaded[__ks_0];
					let hidden = null;
					if(this._type.isSubsetOf(method, MatchingMode(MatchingMode.ExactParameter | MatchingMode.AdditionalParameter | MatchingMode.IgnoreReturn | MatchingMode.IgnoreError))) {
						hidden = true;
					}
					else if(this._type.isSubsetOf(method, MatchingMode(MatchingMode.AdditionalParameter | MatchingMode.MissingParameterArity | MatchingMode.IgnoreReturn | MatchingMode.IgnoreError))) {
						hidden = false;
					}
					this._parent.addForkedMethod(this._name, method, this._type, hidden);
				}
				let sealedclass = superclass.getHybridMethod(this._name, this._parent.extends());
				if(KSType.isValue(sealedclass)) {
					this._parent.addSharedMethod(this._name, sealedclass);
				}
			}
			else if(this._override) {
				SyntaxException.throwNoOverridableMethod(this._parent.type(), this._name, this._parameters, this);
			}
			if(this._exact) {
				this._hiddenOverride = !(overridden.isAbstract() === true);
			}
			else {
				const mode = MatchingMode(MatchingMode.ExactParameter | MatchingMode.IgnoreName | MatchingMode.Superclass);
				if(this._instance) {
					if(this._parent.class().hasMatchingInstanceMethod(this._name, this._type, mode) === true) {
						SyntaxException.__ks_sttc_throwIdenticalMethod_0(this._name, this);
					}
				}
				else {
					if(this._parent.class().hasMatchingClassMethod(this._name, this._type, mode) === true) {
						SyntaxException.__ks_sttc_throwIdenticalMethod_0(this._name, this);
					}
				}
			}
			for(let __ks_0 = 0, __ks_1 = this._aliases.length, alias; __ks_0 < __ks_1; ++__ks_0) {
				alias = this._aliases[__ks_0];
				this._type.addInitializingInstanceVariable(alias.getVariableName());
			}
			this._block.__ks_func_analyse_2(this._aliases);
			this._block.__ks_func_analyse_0();
			if(returnReference) {
				let __ks_0 = this._data.type.value.kind.valueOf();
				if(__ks_0 === NodeKind.Identifier.value) {
					if(this._data.type.value.name === "auto") {
						this._type.setReturnType(this._block.__ks_func_getUnpreparedType_2());
						this._autoTyping = true;
					}
					else if(this._data.type.value.name === "this") {
						this._type.setReturnType(this._parent.type().reference(this._scope));
						if(this._instance) {
							const __ks_return_1 = $compile.expression(this._data.type.value, this);
							__ks_return_1.analyse();
							this._block.addReturn(__ks_return_1);
						}
					}
					else {
						throw new NotSupportedException();
					}
				}
				else if(__ks_0 === NodeKind.ThisExpression.value) {
					const __ks_return_1 = $compile.expression(this._data.type.value, this);
					__ks_return_1.analyse();
					this._type.setReturnType(__ks_return_1.getUnpreparedType());
					this._block.addReturn(__ks_return_1);
				}
			}
			if(this._overriding) {
				const oldType = overridden.getReturnType();
				const newType = this._type.__ks_func_getReturnType_0();
				if(!((newType.isSubsetOf(oldType, MatchingMode(MatchingMode.Exact | MatchingMode.Missing)) === true) || (newType.isInstanceOf(oldType) === true))) {
					if(this._override) {
						if(this.__ks_func_isAssertingOverride_0() === true) {
							SyntaxException.throwNoOverridableMethod(this._parent.extends(), this._name, this._parameters, this);
						}
						else {
							this._override = false;
						}
					}
					else {
						SyntaxException.throwInvalidMethodReturn(this._parent.name(), this._name, this);
					}
				}
			}
			if(overloaded.length === 1) {
				const overload = overloaded[0];
				if((this._type.__ks_func_isMissingReturn_0() === true) && !(overload.isMissingReturn() === true)) {
					this._type.setReturnType(overload.getReturnType());
				}
				if((this._type.__ks_func_isMissingError_0() === true) && !(overload.isMissingError() === true)) {
					this._type.__ks_func_addError_0.call(this._type, overload.listErrors());
				}
			}
			else if(overloaded.length > 1) {
				if(this._type.__ks_func_isMissingReturn_0() === true) {
					let type = null;
					for(let __ks_0 = 0, __ks_1 = overloaded.length, overload; __ks_0 < __ks_1; ++__ks_0) {
						overload = overloaded[__ks_0];
						if(!(overload.isMissingReturn() === true)) {
							if(KSType.isValue(type)) {
								if(type.isSubsetOf(overload.getReturnType()) === true) {
									type = overload.getReturnType();
								}
								else if(!(overload.getReturnType().isSubsetOf(type) === true)) {
									throw new NotImplementedException();
								}
							}
							else {
								type = overload.getReturnType();
							}
						}
					}
					if(KSType.isValue(type)) {
						this._type.setReturnType(type);
					}
				}
			}
			this._analysed = true;
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			const index = (this._forked || (this._overriding && (this._type.isForked() === true))) ? this._type.getForkedIndex() : this._type.index();
			if(this._instance) {
				this._internalName = KSHelper.concatString("__ks_func_", this._name, "_", index);
			}
			else {
				this._internalName = KSHelper.concatString("__ks_sttc_", this._name, "_", index);
			}
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_translate_0();
			}
			for(let __ks_0 = 0, __ks_1 = this._indigentValues.length, value; __ks_0 < __ks_1; ++__ks_0) {
				({value} = this._indigentValues[__ks_0]);
				value.prepare();
				value.translate();
			}
			if(this._autoTyping) {
				this._block.__ks_func_prepare_0();
				this._type.setReturnType(this._block.__ks_func_type_39());
			}
			else {
				if(!this._abstract) {
					this._block.type(this._type.getReturnType());
				}
				this._block.__ks_func_prepare_0();
			}
			this._block.__ks_func_translate_0();
			this._awaiting = this._block.__ks_func_isAwait_3();
			this._exit = this._block.__ks_func_isExit_3();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addAtThisParameter() {
			return this.__ks_func_addAtThisParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_addAtThisParameter_1(statement) {
			if(!(ClassDeclaration.isAssigningAlias(this._block.__ks_func_statements_0(), statement.__ks_func_name_20(), false, false) === true)) {
				this._aliases.push(statement);
			}
		}
		__ks_func_addAtThisParameter_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, AliasStatement);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addAtThisParameter_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_addAtThisParameter_rt) {
				return super.__ks_func_addAtThisParameter_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addIndigentValue() {
			return this.__ks_func_addIndigentValue_rt.call(null, this, this, arguments);
		}
		__ks_func_addIndigentValue_1(value, parameters) {
			const __ks_class_1 = this._parent.type().type();
			const name = KSHelper.concatString("__ks_default_", __ks_class_1.level(), "_", __ks_class_1.incDefaultSequence());
			this._indigentValues.push((() => {
				const d = new Dictionary();
				d.name = name;
				d.value = value;
				d.parameters = parameters;
				return d;
			})());
			return name;
		}
		__ks_func_addIndigentValue_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Expression);
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addIndigentValue_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addIndigentValue_rt) {
				return super.__ks_func_addIndigentValue_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addTopNode() {
			return this.__ks_func_addTopNode_rt.call(null, this, this, arguments);
		}
		__ks_func_addTopNode_2(node) {
			this._topNodes.push(node);
		}
		__ks_func_addTopNode_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addTopNode_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_addTopNode_rt) {
				return super.__ks_func_addTopNode_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_authority_0() {
			return this;
		}
		flagForked() {
			return this.__ks_func_flagForked_rt.call(null, this, this, arguments);
		}
		__ks_func_flagForked_0(__ks_class_1, forks) {
			if(forks === void 0) {
				forks = null;
			}
			this._forks = forks;
			this._type.flagForked(false);
			__ks_class_1.updateInstanceMethodIndex(this._name, this._type);
			this._forked = true;
		}
		__ks_func_flagForked_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ClassType);
			const t1 = value => KSType.isArray(value, value => KSType.isClassInstance(value, ClassMethodType)) || KSType.isNull(value);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_flagForked_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_flagForked_rt) {
				return super.__ks_func_flagForked_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getFunctionNode_0() {
			return this;
		}
		getOverridableVarname() {
			return this.__ks_func_getOverridableVarname_rt.call(null, this, this, arguments);
		}
		__ks_func_getOverridableVarname_1() {
			return "this";
		}
		__ks_func_getOverridableVarname_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getOverridableVarname_1.call(that);
			}
			if(super.__ks_func_getOverridableVarname_rt) {
				return super.__ks_func_getOverridableVarname_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getParameterOffset() {
			return this.__ks_func_getParameterOffset_rt.call(null, this, this, arguments);
		}
		__ks_func_getParameterOffset_2() {
			return 0;
		}
		__ks_func_getParameterOffset_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getParameterOffset_2.call(that);
			}
			if(super.__ks_func_getParameterOffset_rt) {
				return super.__ks_func_getParameterOffset_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAbstract() {
			return this.__ks_func_isAbstract_rt.call(null, this, this, arguments);
		}
		__ks_func_isAbstract_3() {
			return this._abstract;
		}
		__ks_func_isAbstract_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAbstract_3.call(that);
			}
			if(super.__ks_func_isAbstract_rt) {
				return super.__ks_func_isAbstract_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingOverride() {
			return this.__ks_func_isAssertingOverride_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingOverride_0() {
			return this._options.rules.assertOverride;
		}
		__ks_func_isAssertingOverride_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingOverride_0.call(that);
			}
			if(super.__ks_func_isAssertingOverride_rt) {
				return super.__ks_func_isAssertingOverride_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameter() {
			return this.__ks_func_isAssertingParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameter_2() {
			return this._options.rules.assertParameter;
		}
		__ks_func_isAssertingParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameter_2.call(that);
			}
			if(super.__ks_func_isAssertingParameter_rt) {
				return super.__ks_func_isAssertingParameter_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameterType() {
			return this.__ks_func_isAssertingParameterType_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameterType_2() {
			return (this._options.rules.assertParameter === true) && (this._options.rules.assertParameterType === true);
		}
		__ks_func_isAssertingParameterType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameterType_2.call(that);
			}
			if(super.__ks_func_isAssertingParameterType_rt) {
				return super.__ks_func_isAssertingParameterType_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isConsumedError_0(error) {
			return this._type.isCatchingError(error);
		}
		isForked() {
			return this.__ks_func_isForked_rt.call(null, this, this, arguments);
		}
		__ks_func_isForked_1() {
			return this._forked;
		}
		__ks_func_isForked_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isForked_1.call(that);
			}
			if(super.__ks_func_isForked_rt) {
				return super.__ks_func_isForked_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isHiddenOverride() {
			return this.__ks_func_isHiddenOverride_rt.call(null, this, this, arguments);
		}
		__ks_func_isHiddenOverride_1() {
			return this._hiddenOverride;
		}
		__ks_func_isHiddenOverride_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isHiddenOverride_1.call(that);
			}
			if(super.__ks_func_isHiddenOverride_rt) {
				return super.__ks_func_isHiddenOverride_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInstance() {
			return this.__ks_func_isInstance_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstance_2() {
			return this._instance;
		}
		__ks_func_isInstance_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstance_2.call(that);
			}
			if(super.__ks_func_isInstance_rt) {
				return super.__ks_func_isInstance_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInstanceMethod() {
			return this.__ks_func_isInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstanceMethod_2() {
			return this._instance;
		}
		__ks_func_isInstanceMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstanceMethod_2.call(that);
			}
			if(super.__ks_func_isInstanceMethod_rt) {
				return super.__ks_func_isInstanceMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isOverridableFunction() {
			return this.__ks_func_isOverridableFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_isOverridableFunction_2() {
			return true;
		}
		__ks_func_isOverridableFunction_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isOverridableFunction_2.call(that);
			}
			if(super.__ks_func_isOverridableFunction_rt) {
				return super.__ks_func_isOverridableFunction_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRoutable() {
			return this.__ks_func_isRoutable_rt.call(null, this, this, arguments);
		}
		__ks_func_isRoutable_1() {
			return true;
		}
		__ks_func_isRoutable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRoutable_1.call(that);
			}
			if(super.__ks_func_isRoutable_rt) {
				return super.__ks_func_isRoutable_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		length() {
			return this.__ks_func_length_rt.call(null, this, this, arguments);
		}
		__ks_func_length_0() {
			return this._parameters.length;
		}
		__ks_func_length_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_length_0.call(that);
			}
			if(super.__ks_func_length_rt) {
				return super.__ks_func_length_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_2() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_2.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameters() {
			return this.__ks_func_parameters_rt.call(null, this, this, arguments);
		}
		__ks_func_parameters_2() {
			return this._parameters;
		}
		__ks_func_parameters_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameters_2.call(that);
			}
			if(super.__ks_func_parameters_rt) {
				return super.__ks_func_parameters_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toForkFragments() {
			return this.__ks_func_toForkFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toForkFragments_0(fragments) {
			const ctrl = fragments.newControl();
			ctrl.code(KSHelper.concatString("__ks_func_", this._name, "_", this._type.index(), "("));
			let parameters = "";
			const names = new Dictionary();
			for(let index = 0, __ks_0 = this._type.parameters(), __ks_1 = __ks_0.length, parameter; index < __ks_1; ++index) {
				parameter = __ks_0[index];
				if(index > 0) {
					ctrl.code($comma);
					parameters += ", ";
				}
				ctrl.code(parameter.name());
				parameters = KSHelper.concatString(parameters, parameter.name());
				names[parameter.name()] = true;
			}
			ctrl.code(")").step();
			for(let __ks_0 = 0, __ks_1 = this._forks.length, fork; __ks_0 < __ks_1; ++__ks_0) {
				fork = this._forks[__ks_0];
				const ctrl2 = ctrl.newControl();
				ctrl2.code("if(");
				let index = 0;
				for(let __ks_2 = 0, __ks_3 = fork.__ks_func_parameters_0(), __ks_4 = __ks_3.length, parameter; __ks_2 < __ks_4; ++__ks_2) {
					parameter = __ks_3[__ks_2];
					if((parameter.__ks_func_min_2() > 0) || (names[parameter.__ks_func_name_3()] === true)) {
						if(!(index === 0)) {
							ctrl2.code(" && ");
						}
						const literal = new Literal(false, this, this.__ks_func_scope_0(), parameter.__ks_func_name_3());
						parameter.__ks_func_type_0().toPositiveTestFragments(ctrl2, literal, Junction.AND);
						++index;
					}
				}
				ctrl2.code(")").step();
				ctrl2.line(KSHelper.concatString("return this.__ks_func_", this._name, "_", fork.__ks_func_index_0(), "(", parameters, ")"));
				ctrl2.done();
			}
			ctrl.line(KSHelper.concatString("return this.__ks_func_", this._name, "_", this._type.getForkedIndex(), "(", parameters, ")"));
			ctrl.done();
		}
		__ks_func_toForkFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toForkFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toForkFragments_rt) {
				return super.__ks_func_toForkFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toIndigentFragments() {
			return this.__ks_func_toIndigentFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toIndigentFragments_1(fragments) {
			for(let __ks_0 = 0, __ks_1 = this._indigentValues.length, name, value, parameters; __ks_0 < __ks_1; ++__ks_0) {
				({name, value, parameters} = this._indigentValues[__ks_0]);
				const ctrl = fragments.newControl();
				if(this._parent._es5 === true) {
					ctrl.code(KSHelper.concatString(name, ": function(", parameters.join(", "), ")")).step();
				}
				else {
					ctrl.code(KSHelper.concatString(name, "(", parameters.join(", "), ")")).step();
				}
				ctrl.newLine().code("return ").compile(value).done();
				if(!(this._parent._es5 === true)) {
					ctrl.done();
				}
			}
		}
		__ks_func_toIndigentFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toIndigentFragments_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_toIndigentFragments_rt) {
				return super.__ks_func_toIndigentFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_4(fragments, mode) {
			const ctrl = fragments.newControl();
			if(this._parent._es5 === true) {
				ctrl.code(this._internalName + ": function(");
			}
			else {
				if(!this._instance) {
					ctrl.code("static ");
				}
				ctrl.code(this._internalName + "(");
			}
			Parameter.toFragments(this, ctrl, ParameterMode.Default, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(null, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(node) {
					return node.code(")").step();
				};
				return __ks_rt;
			})());
			for(let __ks_0 = 0, __ks_1 = this._topNodes.length, node; __ks_0 < __ks_1; ++__ks_0) {
				node = this._topNodes[__ks_0];
				node.toAuthorityFragments(ctrl);
			}
			if(this._awaiting) {
				throw new NotImplementedException(this);
			}
			else {
				ctrl.compile(this._block);
				if(!this._exit) {
					if(this._type.isAsync() === true) {
						ctrl.line("__ks_cb()");
					}
					else if(this._returnNull) {
						ctrl.line("return null");
					}
				}
			}
			if(!(this._parent._es5 === true)) {
				ctrl.done();
			}
			this.__ks_func_toIndigentFragments_1(fragments);
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_4.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_4() {
			if(this._analysed) {
				return this._type;
			}
			else {
				this.__ks_func_prepare_0();
				return this._type;
			}
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_4.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getOveriddenMethod() {
			return this.__ks_func_getOveriddenMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_getOveriddenMethod_0(superclass, returnReference) {
			let mode = MatchingMode(MatchingMode.FunctionSignature | MatchingMode.IgnoreReturn | MatchingMode.MissingError);
			if(!this._override) {
				mode = MatchingMode(mode & ~MatchingMode.MissingParameterType & ~MatchingMode.MissingParameterArity);
			}
			const methods = this._instance ? superclass.listInstantiableMethods(this._name, this._type, mode) : superclass.listClassMethods(this._name, this._type, mode);
			let method = null;
			let exact = false;
			if(methods.length === 1) {
				method = methods[0];
			}
			else if(KSOperator.gt(methods.length, 0)) {
				for(let __ks_0 = 0, __ks_1 = methods.length, m; __ks_0 < __ks_1; ++__ks_0) {
					m = methods[__ks_0];
					if(m.isSubsetOf(this._type, MatchingMode.ExactParameter) === true) {
						method = m;
						exact = true;
						break;
					}
				}
				if(!KSType.isValue(method)) {
					return null;
				}
			}
			if(KSType.isValue(method)) {
				const type = this._override ? method.clone() : this._type;
				if(this._override) {
					const parameters = type.parameters();
					for(let index = 0, __ks_0 = this._parameters.length, parameter; index < __ks_0; ++index) {
						parameter = this._parameters[index];
						const currentType = parameter.__ks_func_type_30();
						const masterType = parameters[index];
						if(currentType.__ks_func_isMissingType_0() === true) {
							parameter.type(masterType);
						}
						else {
							if((masterType.hasDefaultValue() === true) && !(currentType.__ks_func_hasDefaultValue_1() === true)) {
								parameter.setDefaultValue(masterType.getDefaultValue());
							}
							parameters[index] = currentType;
						}
					}
				}
				if(returnReference) {
				}
				else if(this._override) {
					if(!(this._type.isMissingReturn() === true)) {
						const oldType = method.getReturnType();
						const newType = this._type.getReturnType();
						if(!((newType.isSubsetOf(oldType, MatchingMode(MatchingMode.Default | MatchingMode.Missing)) === true) || (newType.isInstanceOf(oldType) === true))) {
							if(this.__ks_func_isAssertingOverride_0() === true) {
								SyntaxException.throwNoOverridableMethod(this._parent.type(), this._name, this._parameters, this);
							}
							else {
								this._override = false;
							}
							return null;
						}
						else {
							type.setReturnType(method.getReturnType());
						}
					}
				}
				else {
					if(this._type.isMissingReturn() === true) {
						type.setReturnType(method.getReturnType());
					}
				}
				if(this._type.isMissingError() === true) {
					type.addError.apply(type, [].concat(method.listErrors()));
				}
				else {
					const newTypes = this._type.listErrors();
					for(let __ks_0 = 0, __ks_1 = method.listErrors(), __ks_2 = __ks_1.length, oldType; __ks_0 < __ks_2; ++__ks_0) {
						oldType = __ks_1[__ks_0];
						let matched = false;
						for(let __ks_3 = 0, __ks_4 = newTypes.length, newType; __ks_3 < __ks_4 && !(matched); ++__ks_3) {
							newType = newTypes[__ks_3];
							if((newType.isSubsetOf(oldType, MatchingMode.Default) === true) || (newType.isInstanceOf(oldType) === true)) {
								matched = true;
							}
						}
						if(!matched) {
							if(this._override) {
								if(this.__ks_func_isAssertingOverride_0() === true) {
									SyntaxException.throwNoOverridableMethod(this._parent.type(), this._name, this._parameters, this);
								}
								else {
									this._override = false;
								}
							}
							return null;
						}
					}
				}
				if(exact && (method.isForked() === true)) {
					type.setForkedIndex(method.getForkedIndex());
				}
				if(!this._override) {
					if(exact || (type.isSubsetOf(method, MatchingMode(MatchingMode.ExactParameter | MatchingMode.IgnoreName | MatchingMode.IgnoreReturn)) === true)) {
						type.index(method.index());
						return (() => {
							const d = new Dictionary();
							d.method = method;
							d.type = type;
							d.exact = true;
							return d;
						})();
					}
					else {
						return (() => {
							const d = new Dictionary();
							d.method = method;
							d.type = type;
							d.exact = false;
							return d;
						})();
					}
				}
				else {
					return (() => {
						const d = new Dictionary();
						d.method = method;
						d.type = type;
						d.exact = true;
						return d;
					})();
				}
			}
			else if(this._override) {
				if(this.__ks_func_isAssertingOverride_0() === true) {
					SyntaxException.throwNoOverridableMethod(this._parent.type(), this._name, this._parameters, this);
				}
				else {
					this._override = false;
				}
			}
			return null;
		}
		__ks_func_getOveriddenMethod_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ClassType);
			const t1 = KSType.isBoolean;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_getOveriddenMethod_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getOveriddenMethod_rt) {
				return super.__ks_func_getOveriddenMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listOverloadedMethods() {
			return this.__ks_func_listOverloadedMethods_rt.call(null, this, this, arguments);
		}
		__ks_func_listOverloadedMethods_0(superclass) {
			if(this._instance) {
				let methods = superclass.__ks_func_listInstanceMethods_0(this._name);
				if(KSType.isValue(methods)) {
					for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						if(method.isSubsetOf(this._type, MatchingMode.ExactParameter) === true) {
							return [];
						}
					}
				}
				return superclass.listInstantiableMethods(this._name, this._type, MatchingMode((MatchingMode(MatchingMode.FunctionSignature | MatchingMode.SubsetParameter | MatchingMode.MissingParameter) - MatchingMode.AdditionalParameter) | MatchingMode.MissingReturn | MatchingMode.MissingError));
			}
			else {
				let methods = superclass.__ks_func_listClassMethods_0(this._name);
				if(KSType.isValue(methods)) {
					for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						if(method.isSubsetOf(this._type, MatchingMode.ExactParameter) === true) {
							return [];
						}
					}
				}
				return superclass.listClassMethods(this._name, this._type, MatchingMode((MatchingMode(MatchingMode.FunctionSignature | MatchingMode.SubsetParameter | MatchingMode.MissingParameter) - MatchingMode.AdditionalParameter) | MatchingMode.MissingReturn | MatchingMode.MissingError));
			}
		}
		__ks_func_listOverloadedMethods_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ClassType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listOverloadedMethods_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_listOverloadedMethods_rt) {
				return super.__ks_func_listOverloadedMethods_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toClassRouterFragments_0(node, fragments, variable, methods, overflow, name, header, footer) {
			const classname = variable.name();
			const assessment = Router.assess(methods, name, node);
			header(node, fragments);
			if(variable.type().isExtending() === true) {
				const __ks_extends_1 = variable.type().extends();
				const parent = __ks_extends_1.name();
				Router.toFragments((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (__ks_function_1, line) => {
						line.code(KSHelper.concatString(classname, ".__ks_sttc_", name, "_", __ks_function_1.index(), "("));
						return false;
					};
					return __ks_rt;
				})(), "arguments", assessment, fragments.block(), (__ks_extends_1.type().hasInstanceMethod(name) === true) ? Router.FooterType.NO_THROW : Router.FooterType.MIGHT_THROW, (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (fragments, __ks_0) => {
						if(__ks_extends_1.type().hasInstanceMethod(name) === true) {
							fragments.line(KSHelper.concatString("return ", parent, ".", name, ".apply(null, arguments)"));
						}
						else {
							fragments.newControl().code(KSHelper.concatString("if(", parent, ".", name, ")")).step().line(KSHelper.concatString("return ", parent, ".", name, ".apply(null, arguments)")).done();
							fragments.line(KSHelper.concatString("throw ", $runtime.helper.__ks_0(node), ".badArgs()"));
						}
					};
					return __ks_rt;
				})(), node);
			}
			else {
				Router.toFragments((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (__ks_function_1, line) => {
						line.code(KSHelper.concatString(classname, ".__ks_sttc_", name, "_", __ks_function_1.index(), "("));
						return false;
					};
					return __ks_rt;
				})(), "arguments", assessment, fragments.block(), node);
			}
			footer(fragments);
		}
		static toClassRouterFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 8) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3]) && t0(arguments[4]) && t0(arguments[5]) && t0(arguments[6]) && t0(arguments[7])) {
					return ClassMethodDeclaration.__ks_sttc_toClassRouterFragments_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(Statement.toClassRouterFragments) {
				return Statement.toClassRouterFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toInstanceHeadFragments_0(name, fragments) {
			const ctrl = fragments.newControl();
			ctrl.code(KSHelper.concatString(name, "()")).step();
			ctrl.line(KSHelper.concatString("return this.__ks_func_", name, "_rt.call(null, this, this, arguments)"));
			ctrl.done();
		}
		static toInstanceHeadFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return ClassMethodDeclaration.__ks_sttc_toInstanceHeadFragments_0(arguments[0], arguments[1]);
				}
			}
			if(Statement.toInstanceHeadFragments) {
				return Statement.toInstanceHeadFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toInstanceRouterFragments_0(node, fragments, variable, methods, overflow, name, header, footer) {
			const classname = variable.name();
			const assessment = Router.assess(methods, name, node);
			header(node, fragments);
			if(variable.type().isExtending() === true) {
				const __ks_extends_1 = variable.type().extends();
				const parent = __ks_extends_1.name();
				Router.toFragments((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (__ks_function_1, line) => {
						const index = (__ks_function_1.isForked() === true) ? __ks_function_1.getForkedIndex() : __ks_function_1.index();
						line.code(KSHelper.concatString("proto.__ks_func_", name, "_", index, ".call(that"));
						return true;
					};
					return __ks_rt;
				})(), null, assessment, fragments.block(), (__ks_extends_1.type().hasInstanceMethod(name) === true) ? Router.FooterType.NO_THROW : Router.FooterType.MIGHT_THROW, (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (fragments, __ks_0) => {
						if(__ks_extends_1.type().hasInstanceMethod(name) === true) {
							if(__ks_extends_1.type().isSealedInstanceMethod(name) === true) {
								fragments.line(KSHelper.concatString("return ", __ks_extends_1.getSealedName(), ".__ks_func_", name, "_rt(that, args)"));
							}
							else if(__ks_extends_1.type().isAlien() === true) {
								fragments.line(KSHelper.concatString("return super.", name, ".apply(that, args)"));
							}
							else {
								fragments.line(KSHelper.concatString("return super.__ks_func_", name, "_rt.call(null, that, ", parent, ".prototype, args)"));
							}
						}
						else {
							fragments.newControl().code(KSHelper.concatString("if(super.__ks_func_", name, "_rt)")).step().line(KSHelper.concatString("return super.__ks_func_", name, "_rt.call(null, that, ", parent, ".prototype, args)")).done();
							fragments.line(KSHelper.concatString("throw ", $runtime.helper.__ks_0(node), ".badArgs()"));
						}
					};
					return __ks_rt;
				})(), node);
			}
			else {
				Router.toFragments((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (__ks_function_1, line) => {
						if(variable.isSealed() === true) {
							line.code(KSHelper.concatString("this.__ks_func_", name, "_", __ks_function_1.index(), "("));
							return false;
						}
						else {
							line.code(KSHelper.concatString("proto.__ks_func_", name, "_", __ks_function_1.index(), ".call(that"));
							return true;
						}
					};
					return __ks_rt;
				})(), null, assessment, fragments.block(), node);
			}
			footer(fragments);
		}
		static toInstanceRouterFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 8) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3]) && t0(arguments[4]) && t0(arguments[5]) && t0(arguments[6]) && t0(arguments[7])) {
					return ClassMethodDeclaration.__ks_sttc_toInstanceRouterFragments_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(Statement.toInstanceRouterFragments) {
				return Statement.toInstanceRouterFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class ClassForkedMethodDeclaration extends AbstractNode {
		static __ks_new_0(...args) {
			const o = Object.create(ClassForkedMethodDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(name, type, forks, hidden, parent) {
			AbstractNode.prototype.__ks_cons_rt.call(null, this, [null, parent]);
			this._name = name;
			this._type = type;
			this._forks = forks;
			this._hidden = hidden;
			this._instance = this._type.__ks_func_isInstance_0();
			if(this._instance) {
				parent._instanceMethods[this._name].push(this);
			}
			else {
				parent._classMethods[this._name].push(this);
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, ClassMethodType);
			const t2 = value => KSType.isArray(value, value => KSType.isClassInstance(value, ClassMethodType));
			const t3 = KSType.isBoolean;
			const t4 = KSType.isValue;
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
					return ClassForkedMethodDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isForked() {
			return this.__ks_func_isForked_rt.call(null, this, this, arguments);
		}
		__ks_func_isForked_2() {
			return true;
		}
		__ks_func_isForked_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isForked_2.call(that);
			}
			if(super.__ks_func_isForked_rt) {
				return super.__ks_func_isForked_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRoutable() {
			return this.__ks_func_isRoutable_rt.call(null, this, this, arguments);
		}
		__ks_func_isRoutable_2() {
			return false;
		}
		__ks_func_isRoutable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRoutable_2.call(that);
			}
			if(super.__ks_func_isRoutable_rt) {
				return super.__ks_func_isRoutable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_3(fragments, mode) {
			if(!this._hidden && !this._instance) {
				const ctrl = fragments.newControl();
				ctrl.code(KSHelper.concatString("static __ks_sttc_", this._name, "_", this._type.__ks_func_index_0(), "()")).step();
				ctrl.line(KSHelper.concatString("return ", this._parent.extends().name(), ".__ks_sttc_", this._name, "_", this._type.__ks_func_getForkedIndex_0(), "(...arguments)"));
				ctrl.done();
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toForkFragments() {
			return this.__ks_func_toForkFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toForkFragments_1(fragments) {
			const ctrl = fragments.newControl();
			ctrl.code(KSHelper.concatString("__ks_func_", this._name, "_", this._type.__ks_func_index_0(), "("));
			let parameters = "";
			const names = new Dictionary();
			for(let index = 0, __ks_0 = this._type.__ks_func_parameters_0(), __ks_1 = __ks_0.length, parameter; index < __ks_1; ++index) {
				parameter = __ks_0[index];
				if(index > 0) {
					ctrl.code($comma);
					parameters += ", ";
				}
				ctrl.code(parameter.__ks_func_name_3());
				parameters = KSHelper.concatString(parameters, parameter.__ks_func_name_3());
				names[parameter.__ks_func_name_3()] = true;
			}
			ctrl.code(")").step();
			if(this._hidden) {
				const fork = this._forks[0];
				if(fork.__ks_func_hasVarargsParameter_0() === true) {
					const line = ctrl.newLine().code(KSHelper.concatString("return this.__ks_func_", this._name, "_", this._forks[0].__ks_func_index_0(), "("));
					let comma = false;
					for(let __ks_0 = 0, __ks_1 = fork.__ks_func_parameters_0(), __ks_2 = __ks_1.length, parameter; __ks_0 < __ks_2; ++__ks_0) {
						parameter = __ks_1[__ks_0];
						if(comma) {
							line.code($comma);
						}
						else {
							comma = true;
						}
						const name = parameter.__ks_func_name_3();
						if(parameter.__ks_func_isVarargs_0() === true) {
							if(names[name] === true) {
								line.code(KSHelper.concatString("[", name, "]"));
							}
							else {
								line.code("[]");
							}
							break;
						}
						else {
							if(names[name] === true) {
								line.code(name);
							}
							else {
								line.code("void 0");
							}
						}
					}
					line.code(")").done();
				}
				else {
					ctrl.line(KSHelper.concatString("return this.__ks_func_", this._name, "_", this._forks[0].__ks_func_index_0(), "(", parameters, ")"));
				}
			}
			else if(this._type.__ks_func_hasVarargsParameter_0() === true) {
				if(this._type.__ks_func_parameters_0().length === 1) {
					const parameter = this._type.__ks_func_parameter_0(0);
					const ctrl3 = ctrl.newControl();
					ctrl3.code(KSHelper.concatString("if(", parameter.name(), ".length === 1)")).step();
					for(let __ks_0 = 0, __ks_1 = this._forks.length, fork; __ks_0 < __ks_1; ++__ks_0) {
						fork = this._forks[__ks_0];
						const ctrl2 = ctrl3.newControl();
						ctrl2.code("if(");
						let index = 0;
						for(let __ks_2 = 0, __ks_3 = fork.__ks_func_parameters_0(), __ks_4 = __ks_3.length, parameter; __ks_2 < __ks_4; ++__ks_2) {
							parameter = __ks_3[__ks_2];
							if((parameter.__ks_func_min_2() > 0) || (names[parameter.__ks_func_name_3()] === true)) {
								if(!(index === 0)) {
									ctrl2.code(" && ");
								}
								const literal = new Literal(false, this, this.__ks_func_scope_0(), KSHelper.concatString(parameter.__ks_func_name_3(), "[0]"));
								parameter.__ks_func_type_0().toPositiveTestFragments(ctrl2, literal, Junction.AND);
								++index;
							}
						}
						ctrl2.code(")").step();
						ctrl2.line(KSHelper.concatString("return this.__ks_func_", this._name, "_", fork.__ks_func_index_0(), "(", parameter.name(), "[0])"));
						ctrl2.done();
					}
					ctrl3.done();
					ctrl.line(KSHelper.concatString("return super.__ks_func_", this._name, "_", this._type.__ks_func_index_0(), "(", parameters, ")"));
				}
				else {
					throw new NotSupportedException();
				}
			}
			else {
				for(let __ks_0 = 0, __ks_1 = this._forks.length, fork; __ks_0 < __ks_1; ++__ks_0) {
					fork = this._forks[__ks_0];
					const ctrl2 = ctrl.newControl();
					ctrl2.code("if(");
					let index = 0;
					for(let __ks_2 = 0, __ks_3 = fork.__ks_func_parameters_0(), __ks_4 = __ks_3.length, parameter; __ks_2 < __ks_4; ++__ks_2) {
						parameter = __ks_3[__ks_2];
						if((parameter.__ks_func_min_2() > 0) || (names[parameter.__ks_func_name_3()] === true)) {
							if(!(index === 0)) {
								ctrl2.code(" && ");
							}
							const literal = new Literal(false, this, this.__ks_func_scope_0(), parameter.__ks_func_name_3());
							parameter.__ks_func_type_0().toPositiveTestFragments(ctrl2, literal, Junction.AND);
							++index;
						}
					}
					ctrl2.code(")").step();
					ctrl2.line(KSHelper.concatString("return this.__ks_func_", this._name, "_", fork.__ks_func_index_0(), "(", parameters, ")"));
					ctrl2.done();
				}
				ctrl.line(KSHelper.concatString("return super.__ks_func_", this._name, "_", this._type.__ks_func_index_0(), "(", parameters, ")"));
			}
			ctrl.done();
		}
		__ks_func_toForkFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toForkFragments_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_toForkFragments_rt) {
				return super.__ks_func_toForkFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_5() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_5.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ContinueStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ContinueStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ContinueStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			let parent = this._parent;
			if(!(parent.isJumpable() === true)) {
				SyntaxException.__ks_sttc_throwIllegalStatement_0("continue", this);
			}
			while(!(parent.isLoop() === true)) {
				parent = parent.__ks_func_parent_0();
				if(!(KSType.isValue(parent) ? parent.isJumpable() === true : false)) {
					SyntaxException.__ks_sttc_throwIllegalStatement_0("continue", this);
				}
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_5(fragments, mode) {
			fragments.line("continue", this._data);
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_5.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class DestroyStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(DestroyStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(DestroyStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._identifier = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			if(KSHelper.valueOf(this._data.variable.kind) === NodeKind.Identifier.value) {
				if(!this._scope.hasVariable(this._data.variable.name)) {
					ReferenceException.throwNotDefined(this._data.variable.name, this);
				}
				this._identifier = true;
				this._scope.removeVariable(this._data.variable.name);
			}
			else {
				this._expression = $compile.expression(this._data.variable, this);
			}
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			if(!this._identifier) {
				this._expression.analyse();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(this._identifier) {
				this._type = this._scope.getVariable(this._data.variable.name, this._scope.__ks_func_line_0() - 1).__ks_func_getRealType_0();
			}
			else {
				this._expression.prepare();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			if(!this._identifier) {
				this._expression.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_6(fragments, mode) {
			if(this._identifier) {
				const variable = this._scope.getVariable(this._data.variable.name, this._scope.__ks_func_line_0() - 1);
				const type = this._type.__ks_func_discardReference_0();
				if((type.__ks_func_isClass_0() === true) && (type.__ks_func_type_0().hasDestructors() === true)) {
					fragments.newLine().code(type.path(), ".__ks_destroy(").compile(variable).code(")").done();
				}
				fragments.newLine().compile(variable).code(" = void 0").done();
			}
			else {
				fragments.newLine().code("delete ").compile(this._expression).done();
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_6.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class DiscloseDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(DiscloseDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(DiscloseDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_enhance_0() {
			const variable = this._scope.getVariable(this._data.name.name);
			if(!KSType.isValue(variable)) {
				ReferenceException.throwNotDefined(this._data.name.name, this);
			}
			if(!KSType.isClassInstance(variable.__ks_func_getDeclaredType_0(), NamedType)) {
				TypeException.throwNotClass(this._data.name.name, this);
			}
			if(!(variable.__ks_func_getDeclaredType_0().isAlien() === true)) {
				TypeException.throwNotAlien(this._data.name.name, this);
			}
			variable.__ks_func_prepareAlteration_0();
			this._type = variable.__ks_func_getDeclaredType_0().type();
			for(let __ks_0 = 0, __ks_1 = this._data.members.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.members[__ks_0];
				this._type.addPropertyFromAST(data, this);
			}
			if(this._options.rules.nonExhaustive === true) {
				this._type.__ks_func_setExhaustive_0(false);
			}
			else {
				this._type.__ks_func_setExhaustive_0(true);
			}
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_7(fragments, mode) {
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_7.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class DoUntilStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(DoUntilStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(DoUntilStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._bodyScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._body = $compile.block(this._data.body, this, this._bodyScope);
			this._body.analyse();
			this._condition = $compile.expression(this._data.condition, this, this._scope);
			this._condition.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._body.prepare();
			{
				let __ks_0 = this._bodyScope.listUpdatedInferables();
				for(const name in __ks_0) {
					const inferable = __ks_0[name];
					if((inferable.isVariable === true) && this._scope.__ks_func_hasVariable_0(name)) {
						this._scope.replaceVariable(name, inferable.type, true, true, this);
					}
				}
			}
			this._condition.prepare();
			if(!(this._condition.type().canBeBoolean() === true)) {
				TypeException.throwInvalidCondition(this._condition, this);
			}
			this.assignTempVariables(this._scope);
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._condition.translate();
			this._body.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_checkReturnType_0(type) {
			this._body.checkReturnType(type);
		}
		__ks_func_isExit_0() {
			return this._body.isExit();
		}
		__ks_func_isJumpable_0() {
			return true;
		}
		__ks_func_isLoop_0() {
			return true;
		}
		__ks_func_isUsingVariable_0(name) {
			return (this._condition.isUsingVariable(name) === true) || (this._body.isUsingVariable() === true);
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_8(fragments, mode) {
			fragments.newControl().code("do").step().compile(this._body).step().code("while(!(").compileBoolean(this._condition).code("))").done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_8.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class DoWhileStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(DoWhileStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(DoWhileStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._bodyScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._body = $compile.block(this._data.body, this, this._bodyScope);
			this._body.analyse();
			this._condition = $compile.expression(this._data.condition, this, this._scope);
			this._condition.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._body.prepare();
			{
				let __ks_0 = this._bodyScope.listUpdatedInferables();
				for(const name in __ks_0) {
					const inferable = __ks_0[name];
					if((inferable.isVariable === true) && this._scope.__ks_func_hasVariable_0(name)) {
						this._scope.replaceVariable(name, inferable.type, true, true, this);
					}
				}
			}
			this._condition.prepare();
			if(!(this._condition.type().canBeBoolean() === true)) {
				TypeException.throwInvalidCondition(this._condition, this);
			}
			this.assignTempVariables(this._scope);
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._body.translate();
			this._condition.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_checkReturnType_0(type) {
			this._body.checkReturnType(type);
		}
		__ks_func_isExit_0() {
			return this._body.isExit();
		}
		__ks_func_isJumpable_0() {
			return true;
		}
		__ks_func_isLoop_0() {
			return true;
		}
		__ks_func_isUsingVariable_0(name) {
			return (this._condition.isUsingVariable(name) === true) || (this._body.isUsingVariable() === true);
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_9(fragments, mode) {
			fragments.newControl().code("do").step().compile(this._body).step().code("while(").compileBoolean(this._condition).code(")").done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_9.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class EnumDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(EnumDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(EnumDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._instanceMethods = new Dictionary();
			this._staticMethods = new Dictionary();
			this._variables = new Dictionary();
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			this._name = this._data.name.name;
			const type = Type.__ks_sttc_fromAST_0(this._data.type, this);
			if(type.__ks_func_isString_0() === true) {
				this._enum = EnumType.__ks_new_0(this._scope, EnumTypeKind.String);
			}
			else if(this._data.modifiers.length !== 0) {
				let nf = true;
				for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1 && nf; ++__ks_0) {
					modifier = this._data.modifiers[__ks_0];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Flagged.value) {
						this._enum = EnumType.__ks_new_0(this._scope, EnumTypeKind.Flags);
						nf = false;
					}
				}
				if(nf) {
					this._enum = EnumType.__ks_new_0(this._scope);
				}
			}
			else {
				this._enum = EnumType.__ks_new_0(this._scope);
			}
			this._type = NamedType.__ks_new_0(this._name, this._enum);
			this._variable = this._scope.__ks_func_define_0(this._name, true, this._type, void 0, this);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			let declaration = null;
			for(let __ks_0 = 0, __ks_1 = this._data.members.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.members[__ks_0];
				let __ks_2 = data.kind.valueOf();
				if(__ks_2 === NodeKind.CommentBlock.value) {
				}
				else if(__ks_2 === NodeKind.CommentLine.value) {
				}
				else if(__ks_2 === NodeKind.FieldDeclaration.value) {
					declaration = new EnumVariableDeclaration(data, this);
					declaration.__ks_func_analyse_0();
				}
				else if(__ks_2 === NodeKind.MethodDeclaration.value) {
					declaration = new EnumMethodDeclaration(data, this);
					declaration.__ks_func_analyse_0();
				}
				else {
					throw new NotSupportedException(KSHelper.concatString("Unknow kind ", data.kind), this);
				}
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._type = this._variable.__ks_func_getRealType_0();
			this._enum = this._type.__ks_func_type_0();
			for(const name in this._variables) {
				const variable = this._variables[name];
				variable.prepare();
				this._enum.__ks_func_addVariable_0(name);
			}
			for(const name in this._instanceMethods) {
				const methods = this._instanceMethods[name];
				let async = null;
				for(let index = 0, __ks_0 = methods.length, method; index < __ks_0; ++index) {
					method = methods[index];
					method.prepare();
					if(index === 0) {
						async = method.type().isAsync();
					}
					else if(async !== method.type().isAsync()) {
						SyntaxException.__ks_sttc_throwInvalidSyncMethods_0(this._name, name, this);
					}
					if(this._enum.hasMatchingInstanceMethod(name, method.type(), MatchingMode.ExactParameter) === true) {
						SyntaxException.throwIdenticalMethod(name, method);
					}
					this._enum.addInstanceMethod(name, method.type());
				}
			}
			for(const name in this._staticMethods) {
				const methods = this._staticMethods[name];
				let async = null;
				for(let index = 0, __ks_0 = methods.length, method; index < __ks_0; ++index) {
					method = methods[index];
					method.prepare();
					if(index === 0) {
						async = method.type().isAsync();
					}
					else if(async !== method.type().isAsync()) {
						SyntaxException.__ks_sttc_throwInvalidSyncMethods_0(this._name, name, this);
					}
					if(this._enum.hasMatchingStaticMethod(name, method.type(), MatchingMode.ExactParameter) === true) {
						SyntaxException.throwIdenticalMethod(name, method);
					}
					this._enum.addStaticMethod(name, method.type());
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 in this._variables) {
				const variable = this._variables[__ks_0];
				variable.translate();
			}
			for(let __ks_0 in this._instanceMethods) {
				const methods = this._instanceMethods[__ks_0];
				for(let __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.translate();
				}
			}
			for(let __ks_0 in this._staticMethods) {
				const methods = this._staticMethods[__ks_0];
				for(let __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.translate();
				}
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_export_0(recipient) {
			recipient.export(this._name, this._variable);
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_3() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_3.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_10(fragments, mode) {
			const line = fragments.newLine().code($runtime.immutableScope.__ks_0(this), this._name, $equals, $runtime.helper.__ks_0(this), ".enum(");
			if(this._enum.__ks_func_isString_0() === true) {
				line.code("String, ");
			}
			else if(this._enum.__ks_func_isFlags_0() === true) {
				line.code("Object, ");
			}
			else {
				line.code("Number, ");
			}
			const object = line.newObject();
			for(let __ks_0 in this._variables) {
				const variable = this._variables[__ks_0];
				if(!(variable.isComposite() === true)) {
					variable.toFragments(object);
				}
			}
			object.done();
			line.code(")").done();
			for(let __ks_0 in this._variables) {
				const variable = this._variables[__ks_0];
				if(variable.isComposite() === true) {
					variable.toFragments(fragments);
				}
			}
			for(const name in this._staticMethods) {
				const methods = this._staticMethods[name];
				const types = [];
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(fragments, Mode.None);
					types.push(method.type());
				}
				const assessment = Router.assess.__ks_1(types, name, this);
				const line = fragments.newLine();
				const ctrl = line.newControl(null, false, false);
				ctrl.code(this._name + "." + name + " = function()").step();
				Router.toFragments((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (__ks_function_1, line) => {
						line.code(KSHelper.concatString(this._name, ".__ks_sttc_", name, "_", __ks_function_1.index(), "("));
						return false;
					};
					return __ks_rt;
				})(), "arguments", assessment, ctrl.block(), this);
				ctrl.done();
				line.done();
			}
			for(const name in this._instanceMethods) {
				const methods = this._instanceMethods[name];
				const types = [];
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(fragments, Mode.None);
					types.push(method.type());
				}
				const assessment = Router.assess.__ks_1(types, name, this);
				const line = fragments.newLine();
				const ctrl = line.newControl(null, false, false);
				ctrl.code(this._name + ".__ks_func_" + name + " = function(that, ...args)").step();
				Router.toFragments((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (__ks_function_1, line) => {
						line.code(KSHelper.concatString(this._name, ".__ks_func_", name, "_", __ks_function_1.index(), "(that"));
						return true;
					};
					return __ks_rt;
				})(), "args", assessment, ctrl.block(), this);
				ctrl.done();
				line.done();
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_10.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_6() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_6.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class EnumVariableDeclaration extends AbstractNode {
		static __ks_new_0(...args) {
			const o = Object.create(EnumVariableDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._composite = false;
		}
		__ks_cons_0(data, parent) {
			AbstractNode.prototype.__ks_cons_rt.call(null, this, [data, parent]);
			this._name = data.name.name;
			parent._variables[this._name] = this;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return EnumVariableDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			const __ks_enum_1 = this._parent.type().type();
			const value = this._data.value;
			let __ks_0 = __ks_enum_1.kind().valueOf();
			if(__ks_0 === EnumTypeKind.Flags.value) {
				if(KSType.isValue(value)) {
					if((KSHelper.valueOf(value.kind) === NodeKind.BinaryExpression.value) && ((KSHelper.valueOf(value.operator.kind) === BinaryOperatorKind.BitwiseOr.value) || (KSHelper.valueOf(value.operator.kind) === BinaryOperatorKind.Addition.value))) {
						this._composite = true;
						this._operands = [value.left, value.right];
					}
					else if((KSHelper.valueOf(value.kind) === NodeKind.PolyadicExpression.value) && ((KSHelper.valueOf(value.operator.kind) === BinaryOperatorKind.BitwiseOr.value) || (KSHelper.valueOf(value.operator.kind) === BinaryOperatorKind.Addition.value))) {
						this._composite = true;
						this._operands = value.operands;
					}
					else {
						if(KSHelper.valueOf(value.kind) === NodeKind.NumericExpression.value) {
							if(KSOperator.gt(value.value, 53)) {
								SyntaxException.throwEnumOverflow(this._parent.name(), this);
							}
							__ks_enum_1.index(value.value);
						}
						else {
							SyntaxException.__ks_sttc_throwInvalidEnumValue_0(value, this);
						}
						this._value = KSHelper.concatString((KSOperator.lte(__ks_enum_1.index(), 0) ? 0 : Math.pow(2, KSOperator.subtraction(__ks_enum_1.index(), 1))), "n");
					}
				}
				else {
					if(KSOperator.gt(__ks_enum_1.step(), 53)) {
						SyntaxException.throwEnumOverflow(this._parent.name(), this);
					}
					this._value = KSHelper.concatString((KSOperator.lte(__ks_enum_1.index(), 0) ? 0 : Math.pow(2, KSOperator.subtraction(__ks_enum_1.index(), 1))), "n");
				}
				this._type = this._scope.__ks_func_reference_0("Number");
			}
			else if(__ks_0 === EnumTypeKind.String.value) {
				if(KSType.isValue(value)) {
					if(KSHelper.valueOf(value.kind) === NodeKind.Literal.value) {
						this._value = $quote(value.value);
					}
					else {
						throw new NotSupportedException(this);
					}
				}
				else {
					this._value = $quote(this._name.toLowerCase());
				}
				this._type = this._scope.__ks_func_reference_0("String");
			}
			else if(__ks_0 === EnumTypeKind.Number.value) {
				if(KSType.isValue(value)) {
					if(KSHelper.valueOf(value.kind) === NodeKind.NumericExpression.value) {
						this._value = KSHelper.toString(__ks_enum_1.index(value.value));
					}
					else {
						throw new NotSupportedException(this);
					}
				}
				else {
					this._value = KSHelper.toString(__ks_enum_1.step());
				}
				this._type = this._scope.__ks_func_reference_0("Number");
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isComposite() {
			return this.__ks_func_isComposite_rt.call(null, this, this, arguments);
		}
		__ks_func_isComposite_0() {
			return this._composite;
		}
		__ks_func_isComposite_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isComposite_0.call(that);
			}
			if(super.__ks_func_isComposite_rt) {
				return super.__ks_func_isComposite_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_4() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_4.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_4(fragments) {
			if(this._composite) {
				const name = this._parent.name();
				const line = fragments.newLine().code(name, ".", this._name, " = ", name, "(");
				for(let i = 0, __ks_0 = this._operands.length, operand; i < __ks_0; ++i) {
					operand = this._operands[i];
					if(i > 0) {
						line.code(" | ");
					}
					line.code(name, ".", operand.name);
				}
				line.code(")").done();
			}
			else {
				fragments.line(this._name, ": ", this._value);
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toFragments_4.call(that, args[0]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_7() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_7.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class EnumMethodDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(EnumMethodDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._autoTyping = false;
			this._awaiting = false;
			this._exit = false;
			this._indigentValues = [];
			this._instance = true;
			this._parameters = [];
			this._topNodes = [];
		}
		__ks_cons_0(data, parent) {
			Statement.prototype.__ks_cons_rt.call(null, this, [data, parent, this.newScope(parent.scope(), ScopeType.Function)]);
			this._name = data.name.name;
			for(let __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Static.value) {
					this._instance = false;
				}
			}
			if(this._instance) {
				if(KSType.isArray(parent._instanceMethods[this._name])) {
					parent._instanceMethods[this._name].push(this);
				}
				else {
					parent._instanceMethods[this._name] = [this];
				}
			}
			else {
				if(KSType.isArray(parent._staticMethods[this._name])) {
					parent._staticMethods[this._name].push(this);
				}
				else {
					parent._staticMethods[this._name] = [this];
				}
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return EnumMethodDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._data.parameters.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.parameters[__ks_0];
				const parameter = Parameter.__ks_new_0(data, this);
				parameter.__ks_func_analyse_0();
				this._parameters.push(parameter);
			}
			this._block = MethodBlock.__ks_new_0($ast.block($ast.body.__ks_0(this._data)), this, this._scope);
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			const enumName = this._parent.name();
			const enumRef = this._scope.reference(enumName);
			for(const name in this._parent._variables) {
				const variable = this._scope.define(name, true, enumRef, true, this._parent);
				variable.renameAs(KSHelper.concatString(enumName, ".", name));
			}
			if(this._instance) {
				this._scope.__ks_func_define_0("this", true, enumRef, true, this);
				this._scope.rename("this", "that");
			}
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_prepare_0();
			}
			const __ks_arguments_1 = KSHelper.mapArray(this._parameters, function(parameter) {
				return parameter.__ks_func_type_30();
			});
			this._type = new EnumMethodType(__ks_arguments_1, this._data, this);
			this._block.__ks_func_analyse_0();
			this._autoTyping = KSType.isValue(this._data.type) ? KSHelper.valueOf(this._data.type.kind) === NodeKind.ReturnTypeReference.value : false;
			if(this._autoTyping) {
				this._type.setReturnType(this._block.__ks_func_getUnpreparedType_2());
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			if(this._instance) {
				this._internalName = KSHelper.concatString("__ks_func_", this._name, "_", this._type.index());
			}
			else {
				this._internalName = KSHelper.concatString("__ks_sttc_", this._name, "_", this._type.index());
			}
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_translate_0();
			}
			for(let __ks_0 = 0, __ks_1 = this._indigentValues.length, indigent; __ks_0 < __ks_1; ++__ks_0) {
				indigent = this._indigentValues[__ks_0];
				indigent.value.prepare();
				indigent.value.translate();
			}
			if(this._autoTyping) {
				this._block.__ks_func_prepare_0();
				this._type.setReturnType(this._block.__ks_func_type_39());
			}
			else {
				this._block.type(this._type.getReturnType()).prepare();
			}
			this._block.__ks_func_translate_0();
			this._awaiting = this._block.__ks_func_isAwait_3();
			this._exit = this._block.__ks_func_isExit_3();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addIndigentValue() {
			return this.__ks_func_addIndigentValue_rt.call(null, this, this, arguments);
		}
		__ks_func_addIndigentValue_2(value, parameters) {
			const name = KSHelper.concatString("__ks_default_", this._parent.type().type().incDefaultSequence());
			this._indigentValues.push((() => {
				const d = new Dictionary();
				d.name = name;
				d.value = value;
				d.parameters = parameters;
				return d;
			})());
			return name;
		}
		__ks_func_addIndigentValue_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Expression);
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addIndigentValue_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addIndigentValue_rt) {
				return super.__ks_func_addIndigentValue_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addTopNode() {
			return this.__ks_func_addTopNode_rt.call(null, this, this, arguments);
		}
		__ks_func_addTopNode_3(node) {
			this._topNodes.push(node);
		}
		__ks_func_addTopNode_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addTopNode_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_addTopNode_rt) {
				return super.__ks_func_addTopNode_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_authority_0() {
			return this;
		}
		getOverridableVarname() {
			return this.__ks_func_getOverridableVarname_rt.call(null, this, this, arguments);
		}
		__ks_func_getOverridableVarname_2() {
			return this._parent.name();
		}
		__ks_func_getOverridableVarname_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getOverridableVarname_2.call(that);
			}
			if(super.__ks_func_getOverridableVarname_rt) {
				return super.__ks_func_getOverridableVarname_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getParameterOffset() {
			return this.__ks_func_getParameterOffset_rt.call(null, this, this, arguments);
		}
		__ks_func_getParameterOffset_3() {
			return this._instance ? 1 : 0;
		}
		__ks_func_getParameterOffset_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getParameterOffset_3.call(that);
			}
			if(super.__ks_func_getParameterOffset_rt) {
				return super.__ks_func_getParameterOffset_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameter() {
			return this.__ks_func_isAssertingParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameter_3() {
			return this._options.rules.assertParameter;
		}
		__ks_func_isAssertingParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameter_3.call(that);
			}
			if(super.__ks_func_isAssertingParameter_rt) {
				return super.__ks_func_isAssertingParameter_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameterType() {
			return this.__ks_func_isAssertingParameterType_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameterType_3() {
			return (this._options.rules.assertParameter === true) && (this._options.rules.assertParameterType === true);
		}
		__ks_func_isAssertingParameterType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameterType_3.call(that);
			}
			if(super.__ks_func_isAssertingParameterType_rt) {
				return super.__ks_func_isAssertingParameterType_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isConsumedError_0(error) {
			return this._type.isCatchingError(error);
		}
		isOverridableFunction() {
			return this.__ks_func_isOverridableFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_isOverridableFunction_3() {
			return true;
		}
		__ks_func_isOverridableFunction_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isOverridableFunction_3.call(that);
			}
			if(super.__ks_func_isOverridableFunction_rt) {
				return super.__ks_func_isOverridableFunction_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameters() {
			return this.__ks_func_parameters_rt.call(null, this, this, arguments);
		}
		__ks_func_parameters_3() {
			return this._parameters;
		}
		__ks_func_parameters_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameters_3.call(that);
			}
			if(super.__ks_func_parameters_rt) {
				return super.__ks_func_parameters_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toIndigentFragments() {
			return this.__ks_func_toIndigentFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toIndigentFragments_2(fragments) {
			for(let __ks_0 = 0, __ks_1 = this._indigentValues.length, name, value, parameters; __ks_0 < __ks_1; ++__ks_0) {
				({name, value, parameters} = this._indigentValues[__ks_0]);
				const line = fragments.newLine();
				const ctrl = line.newControl(null, false, false);
				ctrl.code(KSHelper.concatString(this._parent.name(), ".", name, " = function(", parameters.join(", "), ")")).step();
				ctrl.newLine().code("return ").compile(value).done();
				ctrl.done();
				line.done();
			}
		}
		__ks_func_toIndigentFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toIndigentFragments_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_toIndigentFragments_rt) {
				return super.__ks_func_toIndigentFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_11(fragments, mode) {
			const line = fragments.newLine();
			const ctrl = line.newControl(null, false, false);
			ctrl.code(KSHelper.concatString(this._parent.name(), ".", this._internalName, " = function("));
			if(this._instance) {
				ctrl.code("that");
			}
			Parameter.toFragments(this, ctrl, ParameterMode.Default, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(this, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (node) => {
					return node.code(")").step();
				};
				return __ks_rt;
			})());
			for(let __ks_0 = 0, __ks_1 = this._topNodes.length, node; __ks_0 < __ks_1; ++__ks_0) {
				node = this._topNodes[__ks_0];
				node.toAuthorityFragments(ctrl);
			}
			if(this._awaiting) {
				throw new NotImplementedException(this);
			}
			else {
				ctrl.compile(this._block);
			}
			ctrl.done();
			line.done();
			this.__ks_func_toIndigentFragments_2(fragments);
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_11.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_8() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_8.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ExportDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ExportDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ExportDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._declarations = [];
			this._statements = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			let statement = null;
			if(this._parent.includePath() === null) {
				for(let __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
					declaration = this._data.declarations[__ks_0];
					let __ks_2 = declaration.kind.valueOf();
					if(__ks_2 === NodeKind.ExportDeclarationSpecifier.value) {
						statement = $compile.statement(declaration.declaration, this);
					}
					else if(__ks_2 === NodeKind.ExportExclusionSpecifier.value) {
						statement = ExportExclusionSpecifier.__ks_new_1(declaration, this);
					}
					else if(__ks_2 === NodeKind.ExportNamedSpecifier.value) {
						statement = ExportNamedSpecifier.__ks_new_1(declaration, this);
					}
					else if(__ks_2 === NodeKind.ExportPropertiesSpecifier.value) {
						statement = ExportPropertiesSpecifier.__ks_new_1(declaration, this);
					}
					else if(__ks_2 === NodeKind.ExportWildcardSpecifier.value) {
						statement = ExportWildcardSpecifier.__ks_new_1(declaration, this);
					}
					else {
						console.info(declaration);
						throw new NotImplementedException(this);
					}
					statement.initiate();
					this._statements.push(statement);
					this._declarations.push(statement);
				}
			}
			else {
				for(let __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
					declaration = this._data.declarations[__ks_0];
					if(KSHelper.valueOf(declaration.kind) === NodeKind.ExportDeclarationSpecifier.value) {
						this._statements.push(statement = $compile.statement(declaration.declaration, this));
						statement.initiate();
					}
				}
			}
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.analyse();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_enhance_0() {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.enhance();
			}
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.prepare();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_export_2(recipient, enhancement) {
			if(enhancement === void 0 || enhancement === null) {
				enhancement = false;
			}
			if(enhancement) {
				for(let __ks_0 = 0, __ks_1 = this._declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
					declaration = this._declarations[__ks_0];
					if(declaration.isEnhancementExport() === true) {
						declaration.export(recipient);
					}
				}
			}
			else {
				for(let __ks_0 = 0, __ks_1 = this._declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
					declaration = this._declarations[__ks_0];
					if(!(declaration.isEnhancementExport() === true)) {
						declaration.export(recipient);
					}
				}
			}
		}
		__ks_func_export_0(recipient) {
			return this.__ks_func_export_2(recipient);
		}
		__ks_func_export_1(recipient, enhancement) {
			return this.__ks_func_export_2(recipient, enhancement);
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_export_2.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			return super.__ks_func_export_rt.call(null, that, Statement.prototype, args);
		}
		__ks_func_isExportable_0() {
			return true;
		}
		exportMacro() {
			return this.__ks_func_exportMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_exportMacro_2(name, macro) {
			this._parent.exportMacro(name, macro);
		}
		__ks_func_exportMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_exportMacro_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_exportMacro_rt) {
				return super.__ks_func_exportMacro_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		registerMacro() {
			return this.__ks_func_registerMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_registerMacro_2(name, macro) {
			this._parent.publishMacro(name, macro);
		}
		__ks_func_registerMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_registerMacro_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_registerMacro_rt) {
				return super.__ks_func_registerMacro_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_12(fragments, mode) {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.toFragments(fragments, Mode.None);
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_12.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		walk() {
			return this.__ks_func_walk_rt.call(null, this, this, arguments);
		}
		__ks_func_walk_1(fn) {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.walk(fn);
			}
		}
		__ks_func_walk_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_walk_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_walk_rt) {
				return super.__ks_func_walk_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ExportExclusionSpecifier extends AbstractNode {
		static __ks_new_0() {
			const o = Object.create(ExportExclusionSpecifier.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ExportExclusionSpecifier.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ExportExclusionSpecifier.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_3(recipient) {
			const exclusions = KSHelper.mapArray(this._data.exclusions, function(exclusion) {
				return exclusion.name;
			});
			for(let __ks_0 = 0, __ks_1 = this._parent.__ks_func_parent_0().scope().listDefinedVariables(), __ks_2 = __ks_1.length, variable; __ks_0 < __ks_2; ++__ks_0) {
				variable = __ks_1[__ks_0];
				if(exclusions.indexOf(variable.name()) === -1) {
					recipient.export(variable.name(), variable);
				}
			}
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_export_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isEnhancementExport() {
			return this.__ks_func_isEnhancementExport_rt.call(null, this, this, arguments);
		}
		__ks_func_isEnhancementExport_1() {
			return false;
		}
		__ks_func_isEnhancementExport_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isEnhancementExport_1.call(that);
			}
			if(super.__ks_func_isEnhancementExport_rt) {
				return super.__ks_func_isEnhancementExport_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_5(fragments, mode) {
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_5.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ExportNamedSpecifier extends AbstractNode {
		static __ks_new_0() {
			const o = Object.create(ExportNamedSpecifier.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ExportNamedSpecifier.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ExportNamedSpecifier.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._expression = $compile.expression(this._data.local, this._parent);
			this._expression.analyse();
			if(this._expression.isMacro() === true) {
				for(let __ks_0 = 0, __ks_1 = this._scope.listMacros(this._expression.name()), __ks_2 = __ks_1.length, macro; __ks_0 < __ks_2; ++__ks_0) {
					macro = __ks_1[__ks_0];
					this._parent.registerMacro(this._data.exported.name, macro);
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_4(recipient) {
			this._expression.prepare();
			if(this._expression.isMacro() === true) {
				for(let __ks_0 = 0, __ks_1 = this._scope.listMacros(this._expression.name()), __ks_2 = __ks_1.length, macro; __ks_0 < __ks_2; ++__ks_0) {
					macro = __ks_1[__ks_0];
					macro.export(recipient, this._data.exported.name);
				}
			}
			else {
				recipient.export(this._data.exported.name, this._expression);
				const type = this._expression.type();
				if((type.isClass() === true) || (type.isNamespace() === true)) {
					const regex = new RegExp(KSHelper.concatString("^", this._expression.name()));
					for(let __ks_0 = 0, __ks_1 = this._scope.listCompositeMacros(this._expression.name()), __ks_2 = __ks_1.length, macro; __ks_0 < __ks_2; ++__ks_0) {
						macro = __ks_1[__ks_0];
						macro.export(recipient, macro.name().replace(regex, this._data.exported.name));
					}
				}
			}
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_export_4.call(that, args[0]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isEnhancementExport() {
			return this.__ks_func_isEnhancementExport_rt.call(null, this, this, arguments);
		}
		__ks_func_isEnhancementExport_2() {
			return false;
		}
		__ks_func_isEnhancementExport_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isEnhancementExport_2.call(that);
			}
			if(super.__ks_func_isEnhancementExport_rt) {
				return super.__ks_func_isEnhancementExport_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_6(fragments, mode) {
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_6.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		walk() {
			return this.__ks_func_walk_rt.call(null, this, this, arguments);
		}
		__ks_func_walk_2(fn) {
			if(!(this._expression.isMacro() === true)) {
				fn(this._data.exported.name, this._expression.type());
			}
		}
		__ks_func_walk_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_walk_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_walk_rt) {
				return super.__ks_func_walk_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ExportPropertiesSpecifier extends AbstractNode {
		static __ks_new_0() {
			const o = Object.create(ExportPropertiesSpecifier.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ExportPropertiesSpecifier.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ExportPropertiesSpecifier.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._object = $compile.expression(this._data.object, this._parent);
			this._object.analyse();
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_5(recipient) {
			this._object.prepare();
			for(let __ks_0 = 0, __ks_1 = this._data.properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._data.properties[__ks_0];
				recipient.export(property.exported.name, new ExportProperty(this._object, property.local.name));
			}
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_export_5.call(that, args[0]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isEnhancementExport() {
			return this.__ks_func_isEnhancementExport_rt.call(null, this, this, arguments);
		}
		__ks_func_isEnhancementExport_3() {
			return false;
		}
		__ks_func_isEnhancementExport_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isEnhancementExport_3.call(that);
			}
			if(super.__ks_func_isEnhancementExport_rt) {
				return super.__ks_func_isEnhancementExport_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_7(fragments, mode) {
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_7.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ExportWildcardSpecifier extends AbstractNode {
		static __ks_new_0() {
			const o = Object.create(ExportWildcardSpecifier.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ExportWildcardSpecifier.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ExportWildcardSpecifier.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._expression = $compile.expression(this._data.local, this._parent);
			this._expression.analyse();
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_6(recipient) {
			this._expression.prepare();
			this._expression.type().walk((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (name, __ks_0) => {
					recipient.export(name, new ExportProperty(this._expression, name));
				};
				return __ks_rt;
			})());
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_export_6.call(that, args[0]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isEnhancementExport() {
			return this.__ks_func_isEnhancementExport_rt.call(null, this, this, arguments);
		}
		__ks_func_isEnhancementExport_4() {
			return false;
		}
		__ks_func_isEnhancementExport_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isEnhancementExport_4.call(that);
			}
			if(super.__ks_func_isEnhancementExport_rt) {
				return super.__ks_func_isEnhancementExport_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_8(fragments, mode) {
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_8.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ExportProperty {
		static __ks_new_0(...args) {
			const o = Object.create(ExportProperty.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
		}
		__ks_cons_0(object, property) {
			if(object === void 0) {
				object = null;
			}
			this._object = object;
			this._property = property;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isString;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return ExportProperty.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode) {
			fragments.compile(this._object).code("." + this._property);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._object.type().getProperty(this._property);
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			throw KSHelper.badArgs();
		}
	}
	class ExpressionStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ExpressionStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ExpressionStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._declaration = false;
			this._ignorable = false;
			this._variable = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._expression = $compile.expression(this._data, this);
			this._expression.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._expression.prepare();
			{
				let __ks_0 = this._expression.inferTypes(new Dictionary());
				for(const name in __ks_0) {
					const data = __ks_0[name];
					this._scope.updateInferable(name, data, this);
				}
			}
			this._ignorable = this._expression.isIgnorable();
			if(!this._ignorable) {
				this._expression.acquireReusable(false);
				this._expression.releaseReusable();
			}
			this.assignTempVariables(this._scope);
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._expression.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_defineVariables_0(left, names, scope, expression = null, leftMost) {
			if(leftMost === void 0 || leftMost === null) {
				leftMost = false;
			}
			const assignments = [];
			let variable = null;
			let declaration = names.length !== 0;
			for(let __ks_0 = 0, __ks_1 = names.length, name; __ks_0 < __ks_1; ++__ks_0) {
				name = names[__ks_0];
				let __ks_variable_1 = scope.__ks_func_getVariable_0(name);
				if(KSType.isValue(__ks_variable_1)) {
					if(__ks_variable_1.__ks_func_isLateInit_0() === true) {
						this._parent.addInitializableVariable(__ks_variable_1, this);
					}
					else if(__ks_variable_1.__ks_func_isImmutable_0() === true) {
						ReferenceException.__ks_sttc_throwImmutable_0(name, this);
					}
					declaration = false;
				}
				else if(this._options.rules.noUndefined === true) {
					ReferenceException.__ks_sttc_throwNotDefined_0(name, this);
				}
				else {
					assignments.push(name);
					this._scope.define(name, false, AnyType.NullableUnexplicit, this);
				}
			}
			if(declaration && (this._expression.isDeclarable() === true)) {
				this._declaration = true;
				if(leftMost) {
					left.setAssignment(AssignmentType.Declaration);
				}
				else {
					this._assignments.push(...assignments);
				}
			}
			else {
				this._assignments.push(...assignments);
			}
		}
		hasExceptions() {
			return this.__ks_func_hasExceptions_rt.call(null, this, this, arguments);
		}
		__ks_func_hasExceptions_0() {
			return this._expression.hasExceptions();
		}
		__ks_func_hasExceptions_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasExceptions_0.call(that);
			}
			if(super.__ks_func_hasExceptions_rt) {
				return super.__ks_func_hasExceptions_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_initializeVariable_2(variable, expression) {
			if(variable.instance) {
				if(variable.immutable && (this._parent.isInitializedVariable("this." + variable.name) === true)) {
					ReferenceException.__ks_sttc_throwImmutableField_0(variable.name, this);
				}
				if(!(this._parent.isUsingInstanceVariableBefore(variable.name, this) === true)) {
					this._parent.initializeVariable(variable, expression, this);
				}
			}
			else if(variable.static) {
				if(!(this._parent.isUsingStaticVariableBefore(variable.class, variable.name, this) === true)) {
					this._parent.initializeVariable(variable, expression, this);
				}
			}
			else {
				this._parent.initializeVariable(variable, expression, this);
			}
		}
		__ks_func_initializeVariable_rt(that, proto, args) {
			const t0 = value => KSType.isStructInstance(value, VariableBrief);
			const t1 = value => KSType.isClassInstance(value, Expression);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_initializeVariable_2.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_initializeVariable_rt.call(null, that, Statement.prototype, args);
		}
		__ks_func_isAwait_0() {
			return this._expression.isAwait();
		}
		__ks_func_isExit_0() {
			return this._expression.isExit();
		}
		__ks_func_isInitializingInstanceVariable_1(name) {
			return this._expression.isInitializingInstanceVariable(name);
		}
		__ks_func_isInitializingInstanceVariable_0(name) {
			if(KSType.isString(name)) {
				return this.__ks_func_isInitializingInstanceVariable_1(name);
			}
			return super.__ks_func_isInitializingInstanceVariable_0(name);
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_1.call(that, args[0]);
				}
			}
			return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, Statement.prototype, args);
		}
		__ks_func_isJumpable_0() {
			return true;
		}
		__ks_func_isLateInitializable_0() {
			return true;
		}
		__ks_func_isUsingVariable_0(name) {
			return this._expression.isUsingVariable(name);
		}
		__ks_func_isUsingInstanceVariable_0(name) {
			return this._expression.isUsingInstanceVariable(name);
		}
		__ks_func_isUsingStaticVariable_0(__ks_class_1, varname) {
			return this._expression.isUsingStaticVariable(__ks_class_1, varname);
		}
		__ks_func_listNonLocalVariables_0(scope, variables) {
			this._expression.listNonLocalVariables(scope, variables);
			return variables;
		}
		toAwaitStatementFragments() {
			return this.__ks_func_toAwaitStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toAwaitStatementFragments_0(fragments, statements) {
			const line = fragments.newLine();
			const item = this._expression.toFragments(line, Mode.None);
			statements.unshift(this);
			item(statements);
			line.done();
		}
		__ks_func_toAwaitStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toAwaitStatementFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toAwaitStatementFragments_rt) {
				return super.__ks_func_toAwaitStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toFragments_1(fragments, mode) {
			if(this._ignorable) {
				return;
			}
			if(this._expression.isSkippable() === true) {
			}
			else if(this._expression.isAwaiting() === true) {
				return KSHelper.vcurry(this.toAwaitStatementFragments, this, fragments);
			}
			else if(this._expression.isDeclarable() === true) {
				if(this._assignments.length !== 0) {
					fragments.newLine().code(KSOperator.addOrConcat($runtime.scope.__ks_0(this), this._assignments.join(", "))).done();
				}
				let line = fragments.newLine();
				if(this._declaration) {
					line.code($runtime.scope.__ks_0(this));
				}
				if(KSType.isValue(this._expression.toAssignmentFragments)) {
					this._expression.toAssignmentFragments(line);
				}
				else {
					this._expression.toFragments(line, Mode.None);
				}
				line.done();
			}
			else {
				if(this._assignments.length !== 0) {
					fragments.newLine().code(KSOperator.addOrConcat($runtime.scope.__ks_0(this), this._assignments.join(", "))).done();
				}
				if(KSType.isValue(this._expression.toStatementFragments)) {
					this._expression.toStatementFragments(fragments, Mode.None);
				}
				else {
					fragments.newLine().compile(this._expression, Mode.None).done();
				}
			}
			for(let __ks_0 = 0, __ks_1 = this._afterwards.length, afterward; __ks_0 < __ks_1; ++__ks_0) {
				afterward = this._afterwards[__ks_0];
				afterward.toAfterwardFragments(fragments);
			}
		}
	}
	class FallthroughStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(FallthroughStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(FallthroughStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			let parent = this._parent;
			if(!(parent.isJumpable() === true)) {
				SyntaxException.__ks_sttc_throwIllegalStatement_0("fallthrough", this);
			}
			while(!KSType.isClassInstance(parent, SwitchStatement)) {
				parent = parent.__ks_func_parent_0();
				if(!(KSType.isValue(parent) ? parent.isJumpable() === true : false)) {
					SyntaxException.__ks_sttc_throwIllegalStatement_0("fallthrough", this);
				}
			}
			this._switch = parent;
			this._switch.__ks_func_flagUsingFallthrough_0();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_13(fragments, mode) {
			this._switch.__ks_func_toFallthroughFragments_0(fragments);
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_13.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ForFromStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ForFromStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ForFromStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._conditionalTempVariables = [];
			this._declaration = false;
			this._declared = false;
			this._immutable = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			let rename = false;
			const variable = this._scope.getVariable(this._data.variable.name);
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
					this._declaration = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
					this._immutable = true;
				}
			}
			this._declared = this._declaration || (variable === null);
			if(this._declared) {
				this._bindingScope = this.newScope(this._scope, ScopeType.InlineBlock);
			}
			else {
				this._bindingScope = this._scope;
			}
			this._bodyScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
			this._from = $compile.expression(this._data.from, this, this._scope);
			this._from.analyse();
			if(this._from.isUsingVariable(this._data.variable.name) === true) {
				if(this._declared) {
					rename = true;
				}
				else {
					SyntaxException.throwAlreadyDeclared(this._data.variable.name, this);
				}
			}
			if(KSType.isValue(this._data.til)) {
				this._til = $compile.expression(this._data.til, this, this._scope);
				this._til.analyse();
				if(this._til.isUsingVariable(this._data.variable.name) === true) {
					if(this._declared) {
						rename = true;
					}
					else {
						SyntaxException.throwAlreadyDeclared(this._data.variable.name, this);
					}
				}
			}
			else {
				this._to = $compile.expression(this._data.to, this, this._scope);
				this._to.analyse();
				if(this._to.isUsingVariable(this._data.variable.name) === true) {
					if(this._declared) {
						rename = true;
					}
					else {
						SyntaxException.throwAlreadyDeclared(this._data.variable.name, this);
					}
				}
			}
			if(KSType.isValue(this._data.by)) {
				this._by = $compile.expression(this._data.by, this, this._scope);
				this._by.analyse();
				if(this._by.isUsingVariable(this._data.variable.name) === true) {
					if(this._declared) {
						rename = true;
					}
					else {
						SyntaxException.throwAlreadyDeclared(this._data.variable.name, this);
					}
				}
			}
			if(this._declared) {
				this._bindingScope.define(this._data.variable.name, this._immutable, this._bindingScope.reference("Number"), true, this);
				if(rename) {
					this._bindingScope.rename(this._data.variable.name);
				}
			}
			else if(variable.__ks_func_isImmutable_0() === true) {
				ReferenceException.throwImmutable(this._data.variable.name, this);
			}
			this._variable = $compile.expression(this._data.variable, this, this._bindingScope);
			this._variable.analyse();
			if(KSType.isValue(this._data.until)) {
				this._until = $compile.expression(this._data.until, this, this._bodyScope);
				this._until.analyse();
			}
			else if(KSType.isValue(this._data.while)) {
				this._while = $compile.expression(this._data.while, this, this._bodyScope);
				this._while.analyse();
			}
			if(KSType.isValue(this._data.when)) {
				this._when = $compile.expression(this._data.when, this, this._bodyScope);
				this._when.analyse();
			}
			this._body = $compile.block(this._data.body, this, this._bodyScope);
			this._body.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(!this._declared) {
				this._bindingScope.replaceVariable(this._data.variable.name, this._bindingScope.reference("Number"), this);
			}
			this._variable.prepare();
			this._from.prepare();
			if(KSType.isValue(this._til)) {
				this._til.prepare();
				if(this._til.isComposite() === true) {
					this._boundName = this._bindingScope.acquireTempName(!this._declared);
				}
			}
			else {
				this._to.prepare();
				if(this._to.isComposite() === true) {
					this._boundName = this._bindingScope.acquireTempName(!this._declared);
				}
			}
			if(KSType.isValue(this._by)) {
				this._by.prepare();
				if(this._by.isComposite() === true) {
					this._byName = this._bindingScope.acquireTempName(!this._declared);
				}
			}
			this.assignTempVariables(this._bindingScope);
			if(KSType.isValue(this._until)) {
				this._until.prepare();
				if(!(this._until.type().canBeBoolean() === true)) {
					TypeException.__ks_sttc_throwInvalidCondition_0(this._until, this);
				}
				this.assignTempVariables(this._bodyScope);
			}
			else if(KSType.isValue(this._while)) {
				this._while.prepare();
				if(!(this._while.type().canBeBoolean() === true)) {
					TypeException.__ks_sttc_throwInvalidCondition_0(this._while, this);
				}
				this.assignTempVariables(this._bodyScope);
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
				if(!(this._when.type().canBeBoolean() === true)) {
					TypeException.__ks_sttc_throwInvalidCondition_0(this._when, this);
				}
				this._bodyScope.commitTempVariables(this._conditionalTempVariables);
			}
			this._body.prepare();
			if(KSType.isValue(this._boundName)) {
				this._bindingScope.releaseTempName(this._boundName);
			}
			if(KSType.isValue(this._byName)) {
				this._bindingScope.releaseTempName(this._byName);
			}
			{
				let __ks_0 = this._bodyScope.listUpdatedInferables();
				for(const name in __ks_0) {
					const inferable = __ks_0[name];
					if((inferable.isVariable === true) && this._scope.__ks_func_hasVariable_0(name)) {
						this._scope.replaceVariable(name, inferable.type, true, false, this);
					}
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._variable.translate();
			this._from.translate();
			if(KSType.isValue(this._til)) {
				this._til.translate();
			}
			else {
				this._to.translate();
			}
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			if(KSType.isValue(this._until)) {
				this._until.translate();
			}
			else if(KSType.isValue(this._while)) {
				this._while.translate();
			}
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
			this._body.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_checkReturnType_0(type) {
			this._body.checkReturnType(type);
		}
		__ks_func_isJumpable_0() {
			return true;
		}
		__ks_func_isLoop_0() {
			return true;
		}
		__ks_func_isUsingVariable_0(name) {
			return (this._from.isUsingVariable(name) === true) || (KSType.isValue(this._til) ? this._til.isUsingVariable(name) === true : false) || (KSType.isValue(this._to) ? this._to.isUsingVariable(name) === true : false) || (KSType.isValue(this._by) ? this._by.isUsingVariable(name) === true : false) || (KSType.isValue(this._until) ? this._until.isUsingVariable(name) === true : false) || (KSType.isValue(this._while) ? this._while.isUsingVariable(name) === true : false) || (KSType.isValue(this._when) ? this._when.isUsingVariable(name) === true : false) || (this._body.isUsingVariable(name) === true);
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_14(fragments, mode) {
			let ctrl = fragments.newControl().code("for(");
			if(this._declared) {
				ctrl.code($runtime.scope.__ks_0(this));
			}
			ctrl.compile(this._variable).code($equals).compile(this._from);
			if(KSType.isValue(this._boundName)) {
				ctrl.code($comma, this._boundName, $equals).compile(KSType.isValue(this._til) ? this._til : this._to);
			}
			if(KSType.isValue(this._byName)) {
				ctrl.code($comma, this._byName, $equals).compile(this._by);
			}
			ctrl.code("; ");
			ctrl.compile(this._variable);
			let desc = ((KSType.isValue(this._data.by) ? KSHelper.valueOf(this._data.by.kind) === NodeKind.NumericExpression.value : false) && KSOperator.lt(this._data.by.value, 0)) || ((KSHelper.valueOf(this._data.from.kind) === NodeKind.NumericExpression.value) && (((KSType.isValue(this._data.to) ? KSHelper.valueOf(this._data.to.kind) === NodeKind.NumericExpression.value : false) && KSOperator.gt(this._data.from.value, this._data.to.value)) || ((KSType.isValue(this._data.til) ? KSHelper.valueOf(this._data.til.kind) === NodeKind.NumericExpression.value : false) && KSOperator.gt(this._data.from.value, this._data.til.value))));
			if(KSType.isValue(this._data.til)) {
				if(desc) {
					ctrl.code(" > ");
				}
				else {
					ctrl.code(" < ");
				}
				ctrl.compile(KSType.isValue(this._boundName) ? this._boundName : this._til);
			}
			else {
				if(desc) {
					ctrl.code(" >= ");
				}
				else {
					ctrl.code(" <= ");
				}
				ctrl.compile(KSType.isValue(this._boundName) ? this._boundName : this._to);
			}
			if(KSType.isValue(this._until)) {
				ctrl.code(" && !(").compileBoolean(this._until).code(")");
			}
			else if(KSType.isValue(this._while)) {
				ctrl.code(" && ").wrapBoolean(this._while, Mode.None, Junction.AND);
			}
			ctrl.code("; ");
			if(KSType.isValue(this._data.by)) {
				if(KSHelper.valueOf(this._data.by.kind) === NodeKind.NumericExpression.value) {
					if(this._data.by.value === 1) {
						ctrl.code("++").compile(this._variable);
					}
					else if(this._data.by.value === -1) {
						ctrl.code("--").compile(this._variable);
					}
					else if(KSOperator.gte(this._data.by.value, 0)) {
						ctrl.compile(this._variable).code(" += ").compile(this._by);
					}
					else {
						ctrl.compile(this._variable).code(" -= ", KSOperator.negative(this._data.by.value));
					}
				}
				else {
					ctrl.compile(this._variable).code(" += ").compile(KSType.isValue(this._byName) ? this._byName : this._by);
				}
			}
			else if(desc) {
				ctrl.code("--").compile(this._variable);
			}
			else {
				ctrl.code("++").compile(this._variable);
			}
			ctrl.code(")").step();
			if(KSType.isValue(this._data.when)) {
				this.toDeclarationFragments(this._conditionalTempVariables, ctrl);
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_14.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ForInStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ForInStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ForInStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._bindingValue = null;
			this._conditionalTempVariables = [];
			this._declaration = false;
			this._declared = false;
			this._declaredVariables = [];
			this._declareIndex = false;
			this._declareValue = false;
			this._descending = false;
			this._fromDesc = false;
			this._immutable = false;
			this._index = null;
			this._loopTempVariables = [];
			this._useBreak = false;
			this._value = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._bindingScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._bodyScope = this.__ks_func_newScope_0(this._bindingScope, ScopeType.InlineBlock);
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
					this._declaration = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
					this._immutable = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Descending.value) {
					this._descending = true;
				}
			}
			if(KSType.isValue(this._data.index)) {
				const variable = this._bindingScope.getVariable(this._data.index.name);
				if(this._declaration || (variable === null)) {
					this._bindingScope.define(this._data.index.name, this._immutable, this._bindingScope.__ks_func_reference_0("Number"), true, this);
					this._declareIndex = true;
				}
				else if(variable.__ks_func_isImmutable_0() === true) {
					ReferenceException.throwImmutable(this._data.index.name, this);
				}
				this._index = $compile.expression(this._data.index, this, this._bindingScope);
				this._index.analyse();
			}
			if(KSType.isValue(this._data.value)) {
				this._value = $compile.expression(this._data.value, this, this._bindingScope);
				this._value.setAssignment(AssignmentType.Expression);
				this._value.analyse();
				for(let __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
					name = __ks_1[__ks_0];
					const variable = this._scope.getVariable(name);
					if(this._declaration || (variable === null)) {
						this._declareValue = true;
						this._declaredVariables.push(this._bindingScope.define(name, this._immutable, AnyType.NullableUnexplicit, true, this));
					}
					else if(variable.__ks_func_isImmutable_0() === true) {
						ReferenceException.throwImmutable(name, this);
					}
				}
			}
			const variables = [];
			this._expression = $compile.expression(this._data.expression, this, this._scope);
			this._expression.analyse();
			this.checkForRenamedVariables(this._expression, variables);
			if(KSType.isValue(this._data.from)) {
				this._from = $compile.expression(this._data.from, this, this._scope);
				this._from.analyse();
				this.checkForRenamedVariables(this._from, variables);
			}
			if(KSType.isValue(this._data.til)) {
				this._til = $compile.expression(this._data.til, this, this._scope);
				this._til.analyse();
				this.checkForRenamedVariables(this._til, variables);
			}
			else if(KSType.isValue(this._data.to)) {
				this._to = $compile.expression(this._data.to, this, this._scope);
				this._to.analyse();
				this.checkForRenamedVariables(this._to, variables);
			}
			if(KSType.isValue(this._data.by)) {
				this._by = $compile.expression(this._data.by, this, this._scope);
				this._by.analyse();
				this.checkForRenamedVariables(this._by, variables);
			}
			for(let __ks_0 = 0, __ks_1 = variables.length, variable; __ks_0 < __ks_1; ++__ks_0) {
				variable = variables[__ks_0];
				this._bindingScope.rename(variable);
			}
			if(KSType.isValue(this._data.until)) {
				this._until = $compile.expression(this._data.until, this, this._bodyScope);
				this._until.analyse();
				this.checkForBreak(this._until);
			}
			else if(KSType.isValue(this._data.while)) {
				this._while = $compile.expression(this._data.while, this, this._bodyScope);
				this._while.analyse();
				this.checkForBreak(this._while);
			}
			if(KSType.isValue(this._data.when)) {
				this._when = $compile.expression(this._data.when, this, this._bodyScope);
				this._when.analyse();
			}
			this._body = $compile.block(this._data.body, this, this._bodyScope);
			this._body.analyse();
			this._fromDesc = (KSType.isValue(this._data.by) ? KSHelper.valueOf(this._data.by.kind) === NodeKind.NumericExpression.value : false) && KSOperator.lt(this._data.by.value, 0);
			if(this._descending && this._fromDesc) {
				this._descending = this._fromDesc = false;
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._expression.prepare();
			const type = this._expression.type();
			if(!((type.isAny() === true) || (type.isArray() === true))) {
				TypeException.__ks_sttc_throwInvalidForInExpression_0(this);
			}
			if(this._value !== null) {
				const parameterType = type.parameter();
				const valueType = Type.__ks_sttc_fromAST_0(this._data.type, this);
				if(!(parameterType.matchContentOf(valueType) === true)) {
					TypeException.throwInvalidAssignement(this._value, valueType, parameterType, this);
				}
				const realType = (parameterType.isMorePreciseThan(valueType) === true) ? parameterType : valueType;
				if(KSType.isClassInstance(this._value, IdentifierLiteral)) {
					if(this._declareValue) {
						this._value.type(realType, this._bindingScope, this);
					}
					else {
						this._bindingScope.replaceVariable(this._value.__ks_func_name_13(), realType, this);
					}
				}
				else {
					for(let __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
						name = __ks_1[__ks_0];
						this._bindingScope.replaceVariable(name, realType.getProperty(name), this);
					}
				}
			}
			if(this._index !== null) {
				if(!this._declareIndex) {
					this._bindingScope.replaceVariable(this._data.index.name, this._bindingScope.__ks_func_reference_0("Number"), this);
				}
				this._index.prepare();
			}
			else {
				this._indexName = this._bindingScope.__ks_func_acquireTempName_0(false);
			}
			if(this._expression.isLooseComposite() === true) {
				this._expressionName = this._bindingScope.__ks_func_acquireTempName_0(false);
			}
			this._boundName = this._bindingScope.__ks_func_acquireTempName_0(false);
			this._bindingValue = new TempMemberExpression(KSType.isValue(this._expressionName) ? this._expressionName : this._expression, KSType.isValue(this._indexName) ? this._indexName : this._index, true, this, this._bindingScope);
			if((this._options.format.destructuring === "es5") && !KSType.isClassInstance(this._value, IdentifierLiteral)) {
				this._bindingValue.__ks_func_acquireReusable_1(true);
			}
			if(KSType.isValue(this._from)) {
				this._from.prepare();
			}
			if(KSType.isValue(this._til)) {
				this._til.prepare();
			}
			else if(KSType.isValue(this._to)) {
				this._to.prepare();
			}
			if(KSType.isValue(this._by)) {
				this._by.prepare();
				if(this._by.isComposite() === true) {
					this._byName = this._bindingScope.__ks_func_acquireTempName_0(false);
				}
			}
			this.__ks_func_assignTempVariables_0(this._bindingScope);
			if(KSType.isValue(this._until)) {
				this._until.prepare();
				if(!(this._until.type().canBeBoolean() === true)) {
					TypeException.__ks_sttc_throwInvalidCondition_0(this._until, this);
				}
				if(this._useBreak) {
					this._bodyScope.commitTempVariables(this._loopTempVariables);
				}
				else {
					this.__ks_func_assignTempVariables_0(this._bodyScope);
				}
			}
			else if(KSType.isValue(this._while)) {
				this._while.prepare();
				if(!(this._while.type().canBeBoolean() === true)) {
					TypeException.__ks_sttc_throwInvalidCondition_0(this._while, this);
				}
				if(this._useBreak) {
					this._bodyScope.commitTempVariables(this._loopTempVariables);
				}
				else {
					this.__ks_func_assignTempVariables_0(this._bodyScope);
				}
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
				if(!(this._when.type().canBeBoolean() === true)) {
					TypeException.__ks_sttc_throwInvalidCondition_0(this._when, this);
				}
				{
					let __ks_0 = this._when.inferWhenTrueTypes(new Dictionary());
					for(const name in __ks_0) {
						const data = __ks_0[name];
						this._bodyScope.updateInferable(name, data, this);
					}
				}
				this._when.acquireReusable(false);
				this._when.releaseReusable();
				this._bodyScope.commitTempVariables(this._conditionalTempVariables);
			}
			this._body.prepare();
			if(KSType.isValue(this._expressionName)) {
				this._bindingScope.releaseTempName(this._expressionName);
			}
			if(KSType.isValue(this._indexName)) {
				this._bindingScope.releaseTempName(this._indexName);
			}
			this._bindingScope.releaseTempName(this._boundName);
			{
				let __ks_0 = this._bodyScope.listUpdatedInferables();
				for(const name in __ks_0) {
					const inferable = __ks_0[name];
					if((inferable.isVariable === true) && this._scope.__ks_func_hasVariable_0(name)) {
						this._scope.replaceVariable(name, inferable.type, true, false, this);
					}
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._expression.translate();
			if(KSType.isValue(this._value)) {
				this._value.translate();
			}
			if(KSType.isValue(this._from)) {
				this._from.translate();
			}
			if(KSType.isValue(this._til)) {
				this._til.translate();
			}
			else if(KSType.isValue(this._to)) {
				this._to.translate();
			}
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			if(KSType.isValue(this._until)) {
				this._until.translate();
			}
			else if(KSType.isValue(this._while)) {
				this._while.translate();
			}
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
			this._body.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		checkForBreak() {
			return this.__ks_func_checkForBreak_rt.call(null, this, this, arguments);
		}
		__ks_func_checkForBreak_0(expression) {
			if(!this._useBreak && (this._value !== null)) {
				for(let __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, variable; __ks_0 < __ks_2 && !(this._useBreak); ++__ks_0) {
					variable = __ks_1[__ks_0];
					if(expression.isUsingVariable(variable) === true) {
						this._useBreak = true;
					}
				}
			}
		}
		__ks_func_checkForBreak_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_checkForBreak_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_checkForBreak_rt) {
				return super.__ks_func_checkForBreak_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		checkForRenamedVariables() {
			return this.__ks_func_checkForRenamedVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_checkForRenamedVariables_0(expression, variables) {
			if((this._index !== null) && (expression.isUsingVariable(this._data.index.name) === true)) {
				if(this._declareIndex) {
					__ks_Array.__ks_func_pushUniq_0.call(variables, [this._data.index.name]);
				}
				else {
					SyntaxException.throwAlreadyDeclared(this._data.index.name, this);
				}
			}
			if(this._value !== null) {
				for(let __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, variable; __ks_0 < __ks_2; ++__ks_0) {
					variable = __ks_1[__ks_0];
					if(expression.isUsingVariable(variable) === true) {
						if(this._declareValue) {
							__ks_Array.__ks_func_pushUniq_0.call(variables, [variable]);
						}
						else {
							SyntaxException.throwAlreadyDeclared(variable, this);
						}
					}
				}
			}
		}
		__ks_func_checkForRenamedVariables_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_checkForRenamedVariables_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_checkForRenamedVariables_rt) {
				return super.__ks_func_checkForRenamedVariables_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_checkReturnType_0(type) {
			this._body.checkReturnType(type);
		}
		__ks_func_isJumpable_0() {
			return true;
		}
		__ks_func_isLoop_0() {
			return true;
		}
		__ks_func_isUsingVariable_0(name) {
			return (this._expression.isUsingVariable(name) === true) || (KSType.isValue(this._from) ? this._from.isUsingVariable(name) === true : false) || (KSType.isValue(this._til) ? this._til.isUsingVariable(name) === true : false) || (KSType.isValue(this._to) ? this._to.isUsingVariable(name) === true : false) || (KSType.isValue(this._by) ? this._by.isUsingVariable(name) === true : false) || (KSType.isValue(this._until) ? this._until.isUsingVariable(name) === true : false) || (KSType.isValue(this._while) ? this._while.isUsingVariable(name) === true : false) || (KSType.isValue(this._when) ? this._when.isUsingVariable(name) === true : false) || (this._body.isUsingVariable(name) === true);
		}
		toBoundFragments() {
			return this.__ks_func_toBoundFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toBoundFragments_0(fragments) {
			if(this._descending) {
				if(KSType.isValue(this._from)) {
					if(KSType.isClassInstance(this._from, NumberLiteral) && KSOperator.lt(this._from.__ks_func_value_0(), 0)) {
						fragments.code("Math.max(0, ").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(KSHelper.concatString(".length - ", KSOperator.negative(this._from.__ks_func_value_0()), ")"));
					}
					else {
						fragments.compile(this._from);
					}
				}
				else {
					fragments.code("0");
				}
			}
			else {
				if(KSType.isValue(this._til)) {
					if(this._fromDesc) {
						fragments.compile(this._til);
					}
					else {
						if(KSType.isClassInstance(this._til, NumberLiteral) && KSOperator.lt(this._til.__ks_func_value_0(), 0)) {
							fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(KSHelper.concatString(".length - ", KSOperator.negative(this._til.__ks_func_value_0())));
						}
						else {
							fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length, ").compile(this._til).code(")");
						}
					}
				}
				else if(KSType.isValue(this._to)) {
					if(this._fromDesc) {
						fragments.compile(this._to);
					}
					else {
						if(KSType.isClassInstance(this._to, NumberLiteral)) {
							if(KSOperator.lt(this._to.__ks_func_value_0(), 0)) {
								fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(KSHelper.concatString(".length - ", (KSOperator.negative(this._to.__ks_func_value_0()) - 1)));
							}
							else {
								fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(KSHelper.concatString(".length, ", KSOperator.addOrConcat(this._to.__ks_func_value_0(), 1), ")"));
							}
						}
						else {
							fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length, ").compile(this._to).code(" + 1)");
						}
					}
				}
				else {
					if(this._fromDesc) {
						fragments.code("0");
					}
					else {
						fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length");
					}
				}
			}
		}
		__ks_func_toBoundFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toBoundFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toBoundFragments_rt) {
				return super.__ks_func_toBoundFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFromFragments() {
			return this.__ks_func_toFromFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFromFragments_0(fragments) {
			if(this._descending) {
				if(KSType.isValue(this._til)) {
					if(KSType.isClassInstance(this._til, NumberLiteral) && KSOperator.lt(this._til.__ks_func_value_0(), 0)) {
						fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(KSHelper.concatString(".length - ", (KSOperator.negative(this._til.__ks_func_value_0()) + 1)));
					}
					else {
						fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length, ").compile(this._til).code(") - 1");
					}
				}
				else if(KSType.isValue(this._to)) {
					if(KSType.isClassInstance(this._to, NumberLiteral)) {
						if(KSOperator.lt(this._to.__ks_func_value_0(), 0)) {
							fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(KSHelper.concatString(".length - ", KSOperator.negative(this._to.__ks_func_value_0())));
						}
						else {
							fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(KSHelper.concatString(".length - 1, ", this._to.__ks_func_value_0(), ")"));
						}
					}
					else {
						fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - 1, ").compile(this._to).code(")");
					}
				}
				else {
					fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - 1");
				}
			}
			else {
				if(this._fromDesc) {
					if(KSType.isValue(this._from)) {
						fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - 1, ").compile(this._from).code(")");
					}
					else {
						fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - 1");
					}
				}
				else {
					if(KSType.isValue(this._from)) {
						if(KSType.isClassInstance(this._from, NumberLiteral) && KSOperator.lt(this._from.__ks_func_value_0(), 0)) {
							fragments.code("Math.max(0, ").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(KSHelper.concatString(".length - ", KSOperator.negative(this._from.__ks_func_value_0()), ")"));
						}
						else {
							fragments.compile(this._from);
						}
					}
					else {
						fragments.code("0");
					}
				}
			}
		}
		__ks_func_toFromFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toFromFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toFromFragments_rt) {
				return super.__ks_func_toFromFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_15(fragments, mode) {
			let ctrl = null;
			if((this._index !== null) && !this._declaration && !this._declareIndex) {
				const line = fragments.newLine().compile(this._index).code($equals);
				this.toFromFragments(line);
				line.done();
				ctrl = fragments.newControl().code("for(", $runtime.scope.__ks_0(this));
			}
			else {
				ctrl = fragments.newControl().code("for(", $runtime.scope.__ks_0(this)).compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code($equals);
				this.toFromFragments(ctrl);
				ctrl.code($comma);
			}
			if(KSType.isValue(this._expressionName)) {
				ctrl.code(this._expressionName, $equals).compile(this._expression).code($comma);
			}
			ctrl.code(this._boundName, $equals);
			this.toBoundFragments(ctrl);
			if(this._declareValue) {
				for(let __ks_0 = 0, __ks_1 = this._declaredVariables.length, variable; __ks_0 < __ks_1; ++__ks_0) {
					variable = this._declaredVariables[__ks_0];
					ctrl.code($comma).compile(variable);
				}
			}
			ctrl.code("; ");
			if(this._descending || this._fromDesc) {
				ctrl.compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code(" >= " + this._boundName);
			}
			else {
				ctrl.compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code(" < " + this._boundName);
			}
			if(!this._useBreak) {
				if(KSType.isValue(this._until)) {
					ctrl.code(" && !(").compileBoolean(this._until).code(")");
				}
				else if(KSType.isValue(this._while)) {
					ctrl.code(" && ").wrapBoolean(this._while, Mode.None, Junction.AND);
				}
			}
			ctrl.code("; ");
			if(this._descending || this._fromDesc) {
				if(KSType.isValue(this._data.by)) {
					if(KSHelper.valueOf(this._data.by.kind) === NodeKind.NumericExpression.value) {
						if(Math.abs(this._data.by.value) === 1) {
							ctrl.code("--").compile(KSType.isValue(this._indexName) ? this._indexName : this._index);
						}
						else {
							ctrl.compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code(" -= ", Math.abs(this._data.by.value));
						}
					}
					else {
						ctrl.compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code(" -= ").compile(KSType.isValue(this._byName) ? this._byName : this._by);
					}
				}
				else {
					ctrl.code("--").compile(KSType.isValue(this._indexName) ? this._indexName : this._index);
				}
			}
			else {
				if(KSType.isValue(this._data.by)) {
					if(KSHelper.valueOf(this._data.by.kind) === NodeKind.NumericExpression.value) {
						if(Math.abs(this._data.by.value) === 1) {
							ctrl.code("++").compile(KSType.isValue(this._indexName) ? this._indexName : this._index);
						}
						else {
							ctrl.compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code(" += ", Math.abs(this._data.by.value));
						}
					}
					else {
						ctrl.compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code(" += ").compile(KSType.isValue(this._byName) ? this._byName : this._by);
					}
				}
				else {
					ctrl.code("++").compile(KSType.isValue(this._indexName) ? this._indexName : this._index);
				}
			}
			ctrl.code(")").step();
			if(KSType.isValue(this._value)) {
				const line = ctrl.newLine();
				this._value.toAssignmentFragments(line, this._bindingValue);
				line.done();
				if(this._useBreak) {
					if(KSType.isValue(this._until)) {
						this.toDeclarationFragments(this._loopTempVariables, ctrl);
						ctrl.newControl().code("if(").compileBoolean(this._until).code(")").step().line("break").done();
					}
					else if(KSType.isValue(this._while)) {
						this.toDeclarationFragments(this._loopTempVariables, ctrl);
						ctrl.newControl().code("if(!(").compileBoolean(this._while).code("))").step().line("break").done();
					}
				}
			}
			if(KSType.isValue(this._when)) {
				this.toDeclarationFragments(this._conditionalTempVariables, ctrl);
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_15.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ForOfStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ForOfStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ForOfStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._bindingValue = null;
			this._bleeding = false;
			this._conditionalTempVariables = [];
			this._declaration = false;
			this._defineKey = false;
			this._defineValue = false;
			this._key = null;
			this._immutable = false;
			this._loopTempVariables = [];
			this._value = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._bindingScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._bodyScope = this.__ks_func_newScope_0(this._bindingScope, ScopeType.InlineBlock);
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
					this._declaration = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
					this._immutable = true;
				}
			}
			if(KSType.isValue(this._data.key)) {
				const keyVariable = this._scope.getVariable(this._data.key.name);
				if(this._declaration || (keyVariable === null)) {
					this._bindingScope.define(this._data.key.name, this._immutable, this._bindingScope.__ks_func_reference_0("String"), true, this);
					this._defineKey = true;
				}
				else if(keyVariable.__ks_func_isImmutable_0() === true) {
					ReferenceException.throwImmutable(this._data.key.name, this);
				}
				this._key = $compile.expression(this._data.key, this, this._bindingScope);
				this._key.analyse();
			}
			if(KSType.isValue(this._data.value)) {
				this._value = $compile.expression(this._data.value, this, this._bindingScope);
				this._value.setAssignment(AssignmentType.Expression);
				this._value.analyse();
				for(let __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
					name = __ks_1[__ks_0];
					const variable = this._bindingScope.getVariable(name);
					if(this._declaration || (variable === null)) {
						this._defineValue = true;
						this._bindingScope.define(name, this._immutable, AnyType.NullableUnexplicit, true, this);
					}
					else if(variable.__ks_func_isImmutable_0() === true) {
						ReferenceException.throwImmutable(name, this);
					}
				}
			}
			const variables = [];
			this._expression = $compile.expression(this._data.expression, this, this._scope);
			this._expression.analyse();
			this.checkForRenamedVariables(this._expression, variables);
			for(let __ks_0 = 0, __ks_1 = variables.length, variable; __ks_0 < __ks_1; ++__ks_0) {
				variable = variables[__ks_0];
				this._bindingScope.rename(variable);
			}
			if(KSType.isValue(this._data.until)) {
				this._until = $compile.expression(this._data.until, this, this._bodyScope);
				this._until.analyse();
			}
			else if(KSType.isValue(this._data.while)) {
				this._while = $compile.expression(this._data.while, this, this._bodyScope);
				this._while.analyse();
			}
			if(KSType.isValue(this._data.when)) {
				this._when = $compile.expression(this._data.when, this, this._bodyScope);
				this._when.analyse();
			}
			this._body = $compile.block(this._data.body, this, this._bodyScope);
			this._body.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._expression.prepare();
			const type = this._expression.type();
			if(!((type.isAny() === true) || (type.isDictionary() === true) || (type.isObject() === true))) {
				TypeException.__ks_sttc_throwInvalidForOfExpression_0(this);
			}
			if(this._expression.isLooseComposite() === true) {
				this._expressionName = this._bindingScope.__ks_func_acquireTempName_0(false);
				this._bleeding = this._bindingScope.__ks_func_isBleeding_0();
			}
			if(this._value !== null) {
				const parameterType = type.parameter();
				const valueType = Type.__ks_sttc_fromAST_0(this._data.type, this);
				if(!(parameterType.matchContentOf(valueType) === true)) {
					TypeException.throwInvalidAssignement(this._value, valueType, parameterType, this);
				}
				const realType = (parameterType.isMorePreciseThan(valueType) === true) ? parameterType : valueType;
				if(KSType.isClassInstance(this._value, IdentifierLiteral)) {
					if(this._defineValue) {
						this._value.type(realType, this._bindingScope, this);
					}
					else {
						this._bindingScope.replaceVariable(this._value.__ks_func_name_13(), realType, this);
					}
				}
				else {
					for(let __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
						name = __ks_1[__ks_0];
						this._bindingScope.replaceVariable(name, realType.getProperty(name), this);
					}
				}
			}
			if(this._key !== null) {
				if(!this._defineKey) {
					this._bindingScope.replaceVariable(this._data.key.name, this._bindingScope.__ks_func_reference_0("String"), this);
				}
				this._key.prepare();
			}
			else {
				this._keyName = this._bindingScope.__ks_func_acquireTempName_0(false);
			}
			if((this._options.format.destructuring === "es5") && !KSType.isClassInstance(this._value, IdentifierLiteral)) {
				this._bindingValue = new TempMemberExpression(KSType.isValue(this._expressionName) ? this._expressionName : this._expression, KSType.isValue(this._key) ? this._key : this._keyName, true, this, this._bindingScope);
				this._bindingValue.__ks_func_acquireReusable_1(true);
			}
			this.__ks_func_assignTempVariables_0(this._bindingScope);
			if(KSType.isValue(this._until)) {
				this._until.prepare();
				if(!(this._until.type().canBeBoolean() === true)) {
					TypeException.__ks_sttc_throwInvalidCondition_0(this._until, this);
				}
				this._bodyScope.commitTempVariables(this._loopTempVariables);
			}
			else if(KSType.isValue(this._while)) {
				this._while.prepare();
				if(!(this._while.type().canBeBoolean() === true)) {
					TypeException.__ks_sttc_throwInvalidCondition_0(this._while, this);
				}
				this._bodyScope.commitTempVariables(this._loopTempVariables);
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
				if(!(this._when.type().canBeBoolean() === true)) {
					TypeException.__ks_sttc_throwInvalidCondition_0(this._when, this);
				}
				{
					let __ks_0 = this._when.inferWhenTrueTypes(new Dictionary());
					for(const name in __ks_0) {
						const data = __ks_0[name];
						this._bodyScope.updateInferable(name, data, this);
					}
				}
				this._bodyScope.commitTempVariables(this._conditionalTempVariables);
			}
			this._body.prepare();
			if(KSType.isValue(this._expressionName)) {
				this._bindingScope.releaseTempName(this._expressionName);
			}
			if(KSType.isValue(this._keyName)) {
				this._bindingScope.releaseTempName(this._keyName);
			}
			{
				let __ks_0 = this._bodyScope.listUpdatedInferables();
				for(const name in __ks_0) {
					const inferable = __ks_0[name];
					if((inferable.isVariable === true) && this._scope.__ks_func_hasVariable_0(name)) {
						this._scope.replaceVariable(name, inferable.type, true, false, this);
					}
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._expression.translate();
			if(KSType.isValue(this._key)) {
				this._key.translate();
			}
			if(KSType.isValue(this._until)) {
				this._until.translate();
			}
			else if(KSType.isValue(this._while)) {
				this._while.translate();
			}
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
			this._body.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		checkForRenamedVariables() {
			return this.__ks_func_checkForRenamedVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_checkForRenamedVariables_1(expression, variables) {
			if((this._key !== null) && (expression.isUsingVariable(this._data.key.name) === true)) {
				if(this._defineKey) {
					__ks_Array.__ks_func_pushUniq_0.call(variables, [this._data.key.name]);
				}
				else {
					SyntaxException.throwAlreadyDeclared(this._data.key.name, this);
				}
			}
			if(this._value !== null) {
				for(let __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, variable; __ks_0 < __ks_2; ++__ks_0) {
					variable = __ks_1[__ks_0];
					if(expression.isUsingVariable(variable) === true) {
						if(this._defineValue) {
							__ks_Array.__ks_func_pushUniq_0.call(variables, [variable]);
						}
						else {
							SyntaxException.throwAlreadyDeclared(variable, this);
						}
					}
				}
			}
		}
		__ks_func_checkForRenamedVariables_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isArray;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_checkForRenamedVariables_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_checkForRenamedVariables_rt) {
				return super.__ks_func_checkForRenamedVariables_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_checkReturnType_0(type) {
			this._body.checkReturnType(type);
		}
		__ks_func_isJumpable_0() {
			return true;
		}
		__ks_func_isLoop_0() {
			return true;
		}
		__ks_func_isUsingVariable_0(name) {
			return (this._expression.isUsingVariable(name) === true) || (KSType.isValue(this._until) ? this._until.isUsingVariable(name) === true : false) || (KSType.isValue(this._while) ? this._while.isUsingVariable(name) === true : false) || (KSType.isValue(this._when) ? this._when.isUsingVariable(name) === true : false) || (this._body.isUsingVariable(name) === true);
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_16(fragments, mode) {
			if(KSType.isValue(this._expressionName)) {
				if(this._bleeding) {
					fragments.newLine().code($runtime.scope.__ks_0(this), this._expressionName, $equals).compile(this._expression).done();
					this.__ks_func_toLoopFragments_0(fragments, mode);
				}
				else {
					const block = fragments.newBlock();
					block.newLine().code($runtime.scope.__ks_0(this), this._expressionName, $equals).compile(this._expression).done();
					this.toLoopFragments(block, mode);
					block.done();
				}
			}
			else {
				this.__ks_func_toLoopFragments_0(fragments, mode);
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_16.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toLoopFragments() {
			return this.__ks_func_toLoopFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toLoopFragments_0(fragments, mode) {
			let ctrl = fragments.newControl().code("for(");
			if(this._key !== null) {
				if(this._declaration || this._defineKey) {
					if(this._options.format.variables === "es5") {
						ctrl.code("var ");
					}
					else if(this._immutable) {
						ctrl.code("const ");
					}
					else {
						ctrl.code("let ");
					}
				}
				ctrl.compile(this._key);
			}
			else {
				ctrl.code($runtime.scope.__ks_0(this), this._keyName);
			}
			ctrl.code(" in ").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(")").step();
			if(this._value !== null) {
				let line = ctrl.newLine();
				if(this._declaration || this._defineValue) {
					if(this._options.format.variables === "es5") {
						line.code("var ");
					}
					else if(this._immutable) {
						line.code("const ");
					}
					else {
						line.code("let ");
					}
				}
				if(this._bindingValue === null) {
					line.compile(this._value).code($equals).compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code("[").compile(KSType.isValue(this._key) ? this._key : this._keyName).code("]");
				}
				else {
					this._value.toAssignmentFragments(line, this._bindingValue);
				}
				line.done();
			}
			if(KSType.isValue(this._until)) {
				this.toDeclarationFragments(this._loopTempVariables, ctrl);
				ctrl.newControl().code("if(").compileBoolean(this._until).code(")").step().line("break").done();
			}
			else if(KSType.isValue(this._while)) {
				this.toDeclarationFragments(this._loopTempVariables, ctrl);
				ctrl.newControl().code("if(!(").compileBoolean(this._while).code("))").step().line("break").done();
			}
			if(KSType.isValue(this._when)) {
				this.toDeclarationFragments(this._conditionalTempVariables, ctrl);
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		}
		__ks_func_toLoopFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toLoopFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toLoopFragments_rt) {
				return super.__ks_func_toLoopFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ForRangeStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ForRangeStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ForRangeStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._declaration = false;
			this._defineVariable = false;
			this._immutable = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._bindingScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._bodyScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
					this._declaration = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
					this._immutable = true;
				}
			}
			const variable = this._scope.getVariable(this._data.value.name);
			if(this._declaration || (variable === null)) {
				this._bindingScope.define(this._data.value.name, this._immutable, this._bindingScope.reference("Number"), true, this);
				this._defineVariable = true;
			}
			else if(variable.__ks_func_isImmutable_0() === true) {
				ReferenceException.throwImmutable(this._data.value.name, this);
			}
			this._value = $compile.expression(this._data.value, this, this._bindingScope);
			this._value.analyse();
			this._from = $compile.expression(this._data.from, this, this._scope);
			this._from.analyse();
			this._to = $compile.expression(this._data.to, this, this._scope);
			this._to.analyse();
			if(KSType.isValue(this._data.by)) {
				this._by = $compile.expression(this._data.by, this, this._scope);
				this._by.analyse();
			}
			if(KSType.isValue(this._data.until)) {
				this._until = $compile.expression(this._data.until, this, this._bodyScope);
				this._until.analyse();
			}
			else if(KSType.isValue(this._data.while)) {
				this._while = $compile.expression(this._data.while, this, this._bodyScope);
				this._while.analyse();
			}
			if(KSType.isValue(this._data.when)) {
				this._when = $compile.expression(this._data.when, this, this._bodyScope);
				this._when.analyse();
			}
			this._body = $compile.block(this._data.body, this, this._bodyScope);
			this._body.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(!this._defineVariable) {
				this._bindingScope.replaceVariable(this._data.value.name, this._bindingScope.reference("Number"), this);
			}
			this._value.prepare();
			this._from.prepare();
			this._to.prepare();
			if(this._to.isComposite() === true) {
				this._boundName = this._bindingScope.acquireTempName();
			}
			if(KSType.isValue(this._by)) {
				this._by.prepare();
				if(this._by.isComposite() === true) {
					this._byName = this._bindingScope.acquireTempName();
				}
			}
			if(KSType.isValue(this._until)) {
				this._until.prepare();
				if(!(this._until.type().canBeBoolean() === true)) {
					TypeException.__ks_sttc_throwInvalidCondition_0(this._until, this);
				}
			}
			else if(KSType.isValue(this._while)) {
				this._while.prepare();
				if(!(this._while.type().canBeBoolean() === true)) {
					TypeException.__ks_sttc_throwInvalidCondition_0(this._while, this);
				}
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
				if(!(this._when.type().canBeBoolean() === true)) {
					TypeException.__ks_sttc_throwInvalidCondition_0(this._when, this);
				}
			}
			this._body.prepare();
			if(KSType.isValue(this._boundName)) {
				this._bindingScope.releaseTempName(this._boundName);
			}
			if(KSType.isValue(this._byName)) {
				this._bindingScope.releaseTempName(this._byName);
			}
			{
				let __ks_0 = this._bodyScope.listUpdatedInferables();
				for(const name in __ks_0) {
					const inferable = __ks_0[name];
					if((inferable.isVariable === true) && this._scope.__ks_func_hasVariable_0(name)) {
						this._scope.replaceVariable(name, inferable.type, true, false, this);
					}
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._value.translate();
			this._from.translate();
			this._to.translate();
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			if(KSType.isValue(this._until)) {
				this._until.translate();
			}
			else if(KSType.isValue(this._while)) {
				this._while.translate();
			}
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
			this._body.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_checkReturnType_0(type) {
			this._body.checkReturnType(type);
		}
		__ks_func_isJumpable_0() {
			return true;
		}
		__ks_func_isLoop_0() {
			return true;
		}
		__ks_func_isUsingVariable_0(name) {
			return (this._from.isUsingVariable(name) === true) || (this._to.isUsingVariable(name) === true) || (KSType.isValue(this._by) ? this._by.isUsingVariable(name) === true : false) || (KSType.isValue(this._until) ? this._until.isUsingVariable(name) === true : false) || (KSType.isValue(this._while) ? this._while.isUsingVariable(name) === true : false) || (KSType.isValue(this._when) ? this._when.isUsingVariable(name) === true : false) || (this._body.isUsingVariable(name) === true);
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_17(fragments, mode) {
			let ctrl = fragments.newControl().code("for(");
			if(this._defineVariable) {
				ctrl.code($runtime.scope.__ks_0(this));
			}
			ctrl.compile(this._value).code($equals).compile(this._from);
			if(KSType.isValue(this._boundName)) {
				ctrl.code(this._boundName, $equals).compile(this._to);
			}
			if(KSType.isValue(this._byName)) {
				ctrl.code($comma, this._byName, $equals).compile(this._by);
			}
			ctrl.code("; ").compile(this._value).code(" <= ").compile(KSType.isValue(this._boundName) ? this._boundName : this._to);
			if(KSType.isValue(this._until)) {
				ctrl.code(" && !(").compileBoolean(this._until).code(")");
			}
			else if(KSType.isValue(this._while)) {
				ctrl.code(" && ").wrapBoolean(this._while, Mode.None, Junction.AND);
			}
			ctrl.code("; ");
			if(KSType.isValue(this._data.by)) {
				if(KSHelper.valueOf(this._data.by.kind) === NodeKind.NumericExpression.value) {
					if(this._data.by.value === 1) {
						ctrl.code("++").compile(this._value);
					}
					else {
						ctrl.compile(this._value).code(" += ").compile(this._by);
					}
				}
				else {
					ctrl.compile(this._value).code(" += ").compile(KSType.isValue(this._byName) ? this._byName : this._by);
				}
			}
			else {
				ctrl.code("++").compile(this._value);
			}
			ctrl.code(")").step();
			if(KSType.isValue(this._when)) {
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_17.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	const $function = (() => {
		const d = new Dictionary();
		d.surround = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return __ks_rt.__ks_0.call(null, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(node) {
				let parent = node._parent;
				while(KSType.isValue(parent) && !(KSType.isClassInstance(parent, ClassMethodDeclaration) || KSType.isClassInstance(parent, ImplementClassMethodDeclaration))) {
					parent = parent.parent();
				}
				if(KSType.isValue(parent) ? parent._instance === true : false) {
					if($function.useThisVariable(node._data.body, node) === true) {
						if(node._options.format.functions === "es5") {
							return (() => {
								const d = new Dictionary();
								d.arrow = false;
								d.beforeParameters = KSHelper.concatString($runtime.helper.__ks_0(node), ".vcurry(function(");
								d.afterParameters = ")";
								d.footer = ", this)";
								return d;
							})();
						}
						else {
							return (() => {
								const d = new Dictionary();
								d.arrow = true;
								d.beforeParameters = "(";
								d.afterParameters = ") =>";
								d.footer = "";
								return d;
							})();
						}
					}
					else {
						return (() => {
							const d = new Dictionary();
							d.arrow = false;
							d.beforeParameters = "function(";
							d.afterParameters = ")";
							d.footer = "";
							return d;
						})();
					}
				}
				else {
					return (() => {
						const d = new Dictionary();
						d.arrow = false;
						d.beforeParameters = "function(";
						d.afterParameters = ")";
						d.footer = "";
						return d;
					})();
				}
			};
			return __ks_rt;
		})();
		d.useThisVariable = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return __ks_rt.__ks_0.call(null, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(data, node) {
				let __ks_0 = data.kind.valueOf();
				if(__ks_0 === NodeKind.ArrayExpression.value) {
					for(let __ks_1 = 0, __ks_2 = data.values.length, value; __ks_1 < __ks_2; ++__ks_1) {
						value = data.values[__ks_1];
						if($function.useThisVariable(value, node) === true) {
							return true;
						}
					}
				}
				else if(__ks_0 === NodeKind.BinaryExpression.value) {
					if(($function.useThisVariable(data.left, node) === true) || ($function.useThisVariable(data.right, node) === true)) {
						return true;
					}
				}
				else if(__ks_0 === NodeKind.Block.value) {
					for(let __ks_1 = 0, __ks_2 = data.statements.length, statement; __ks_1 < __ks_2; ++__ks_1) {
						statement = data.statements[__ks_1];
						if($function.useThisVariable(statement, node) === true) {
							return true;
						}
					}
				}
				else if(__ks_0 === NodeKind.CallExpression.value) {
					if($function.useThisVariable(data.callee, node) === true) {
						return true;
					}
					for(let __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
						arg = data.arguments[__ks_1];
						if($function.useThisVariable(arg, node) === true) {
							return true;
						}
					}
				}
				else if(__ks_0 === NodeKind.ComparisonExpression.value) {
					for(let __ks_1 = 0, __ks_2 = data.values.length, operand; __ks_1 < __ks_2; __ks_1 += 2) {
						operand = data.values[__ks_1];
						if($function.useThisVariable(operand, node) === true) {
							return true;
						}
					}
				}
				else if(__ks_0 === NodeKind.CreateExpression.value) {
					if($function.useThisVariable(data.class, node) === true) {
						return true;
					}
					for(let __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
						arg = data.arguments[__ks_1];
						if($function.useThisVariable(arg, node) === true) {
							return true;
						}
					}
				}
				else if(__ks_0 === NodeKind.EnumExpression.value) {
					return false;
				}
				else if(__ks_0 === NodeKind.Identifier.value) {
					return data.name === "this";
				}
				else if(__ks_0 === NodeKind.IfStatement.value) {
					if(($function.useThisVariable(data.condition, node) === true) || ($function.useThisVariable(data.whenTrue, node) === true)) {
						return true;
					}
					if(KSType.isValue(data.whenFalse) && ($function.useThisVariable(data.whenFalse, node) === true)) {
						return true;
					}
				}
				else if(__ks_0 === NodeKind.Literal.value) {
					return false;
				}
				else if(__ks_0 === NodeKind.MemberExpression.value) {
					return $function.useThisVariable(data.object, node);
				}
				else if(__ks_0 === NodeKind.NumericExpression.value) {
					return false;
				}
				else if(__ks_0 === NodeKind.ObjectExpression.value) {
					for(let __ks_1 = 0, __ks_2 = data.properties.length, property; __ks_1 < __ks_2; ++__ks_1) {
						property = data.properties[__ks_1];
						if($function.useThisVariable(property.value, node) === true) {
							return true;
						}
					}
				}
				else if(__ks_0 === NodeKind.PolyadicExpression.value) {
					for(let __ks_1 = 0, __ks_2 = data.operands.length, operand; __ks_1 < __ks_2; ++__ks_1) {
						operand = data.operands[__ks_1];
						if($function.useThisVariable(operand, node) === true) {
							return true;
						}
					}
				}
				else if(__ks_0 === NodeKind.ReturnStatement.value) {
					return $function.useThisVariable(data.value, node);
				}
				else if(__ks_0 === NodeKind.TemplateExpression.value) {
					for(let __ks_1 = 0, __ks_2 = data.elements.length, element; __ks_1 < __ks_2; ++__ks_1) {
						element = data.elements[__ks_1];
						if($function.useThisVariable(element, node) === true) {
							return true;
						}
					}
				}
				else if(__ks_0 === NodeKind.ThisExpression.value) {
					return true;
				}
				else if(__ks_0 === NodeKind.ThrowStatement.value) {
					return $function.useThisVariable(data.value, node);
				}
				else if(__ks_0 === NodeKind.UnaryExpression.value) {
					return $function.useThisVariable(data.argument, node);
				}
				else if(__ks_0 === NodeKind.VariableDeclaration.value) {
					return KSType.isValue(data.init) && ($function.useThisVariable(data.init, node) === true);
				}
				else {
					throw new NotImplementedException(KSHelper.concatString("Unknow kind ", data.kind), node);
				}
				return false;
			};
			return __ks_rt;
		})();
		return d;
	})();
	class FunctionDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(FunctionDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(FunctionDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._continued = false;
			this._extended = false;
			this._main = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			this._name = this._data.name.name;
			let __ks_0;
			if(KSType.isValue(__ks_0 = this._scope.__ks_func_getDefinedVariable_0(this._name)) ? (this._variable = __ks_0, true) : false) {
				if(KSType.isClassInstance(this._variable, FunctionVariable)) {
					this._continued = true;
				}
				else if(this._variable.__ks_func_getDeclaredType_0().isFunction() === true) {
					this._main = true;
					this._continued = true;
				}
				else {
					this._scope.addStash(this._name, (() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 1) {
								if(t0(args[0])) {
									return __ks_rt.__ks_0.call(this, args[0]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (variable) => {
							const type = variable.getRealType();
							if(type.isFunction() === true) {
								this._main = true;
								this._extended = true;
								let __ks_0;
								this._variable = new FunctionVariable(this._scope, this._name, true, (KSType.isFunction(type.length) && KSType.isValue(__ks_0 = type.length())) ? __ks_0 : 1);
								this._variable.__ks_func_getRealType_0().addFunction(type);
								this._scope.replaceVariable(this._name, this._variable);
								this._oldVariableName = this._scope.getNewName(this._name);
							}
							else {
								SyntaxException.__ks_sttc_throwNotOverloadableFunction_0(this._name, this);
							}
							return true;
						};
						return __ks_rt;
					})(), (() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 1) {
								if(t0(args[0])) {
									return __ks_rt.__ks_0.call(this, args[0]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (variable) => {
							this._variable = variable;
							const declarator = FunctionDeclarator.__ks_new_0(this._variable, this._data, this);
							declarator.__ks_func_analyse_0();
						};
						return __ks_rt;
					})());
				}
			}
			else {
				this._main = true;
				this._variable = FunctionVariable.__ks_new_0(this._scope, this._name, false);
				this._scope.__ks_func_defineVariable_0(this._variable, this);
			}
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			if(this._main) {
				if(this._continued) {
					const variable = this._scope.__ks_func_getDefinedVariable_0(this._name);
					if(KSType.isClassInstance(variable, FunctionVariable)) {
						this._main = false;
						this._variable = variable;
					}
					else {
						const type = this._variable.__ks_func_getDeclaredType_0();
						let __ks_0;
						this._variable = new FunctionVariable(this._scope, this._name, true, (KSType.isFunction(type.length) && KSType.isValue(__ks_0 = type.length())) ? __ks_0 : 1);
						this._variable.__ks_func_getRealType_0().addFunction(type);
						this._scope.replaceVariable(this._name, this._variable);
					}
				}
				const declarator = FunctionDeclarator.__ks_new_0(this._variable, this._data, this);
				declarator.__ks_func_analyse_0();
			}
			else if(this._continued) {
				const declarator = FunctionDeclarator.__ks_new_0(this._variable, this._data, this);
				declarator.__ks_func_analyse_0();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(this._main || (this._scope.processStash(this._name) === true)) {
				this._variable.__ks_func_prepare_0();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			if(this._main) {
				this._variable.__ks_func_translate_0();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_addInitializableVariable_1(variable, node) {
		}
		__ks_func_export_0(recipient) {
			recipient.export(this._name, this._variable);
		}
		__ks_func_initializeVariable_3(variable, expression, node) {
		}
		__ks_func_initializeVariable_1(variable, expression, node) {
			return this.__ks_func_initializeVariable_3(variable, expression, node);
		}
		__ks_func_initializeVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_initializeVariable_3.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_initializeVariable_rt.call(null, that, Statement.prototype, args);
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_5() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_5.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toMainFragments() {
			return this.__ks_func_toMainFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toMainFragments_0(fragments) {
			const declarators = this._variable.__ks_func_declarators_0();
			const name = this._variable.__ks_func_getSecureName_0();
			const line = fragments.newLine().code(KSHelper.concatString("function ", name, "("));
			if((declarators.length === 1) && (declarators[0].hasPreservedParameter() === true)) {
				for(let index = 0, __ks_0 = declarators[0].parameters(), __ks_1 = __ks_0.length, parameter; index < __ks_1; ++index) {
					parameter = __ks_0[index];
					if(!(index === 0)) {
						line.code($comma);
					}
					line.compile(parameter);
				}
			}
			const block = line.code(")").newBlock();
			block.line(KSHelper.concatString("return ", name, ".__ks_rt(this, arguments)"));
			block.done();
			line.done();
		}
		__ks_func_toMainFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toMainFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toMainFragments_rt) {
				return super.__ks_func_toMainFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_18(fragments, mode) {
			if(!this._main) {
				return;
			}
			if(this._continued) {
				for(let __ks_0 = 0, __ks_1 = this._variable.__ks_func_declarators_0(), __ks_2 = __ks_1.length, declarator; __ks_0 < __ks_2; ++__ks_0) {
					declarator = __ks_1[__ks_0];
					declarator.toStatementFragments(fragments);
				}
				this.__ks_func_toRouterFragments_0(fragments);
			}
			else if(this._extended) {
				const name = this._variable.__ks_func_getSecureName_0();
				fragments.line($const.__ks_0(this), this._oldVariableName, $equals, name);
				this.__ks_func_toMainFragments_0(fragments);
				fragments.line(KSHelper.concatString(name, ".__ks_0 = ", this._oldVariableName));
				for(let __ks_0 = 0, __ks_1 = this._variable.__ks_func_declarators_0(), __ks_2 = __ks_1.length, declarator; __ks_0 < __ks_2; ++__ks_0) {
					declarator = __ks_1[__ks_0];
					declarator.toStatementFragments(fragments);
				}
				this.__ks_func_toRouterFragments_0(fragments);
			}
			else {
				this.__ks_func_toMainFragments_0(fragments);
				for(let __ks_0 = 0, __ks_1 = this._variable.__ks_func_declarators_0(), __ks_2 = __ks_1.length, declarator; __ks_0 < __ks_2; ++__ks_0) {
					declarator = __ks_1[__ks_0];
					declarator.toStatementFragments(fragments);
				}
				this.__ks_func_toRouterFragments_0(fragments);
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_18.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toRouterFragments() {
			return this.__ks_func_toRouterFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toRouterFragments_0(fragments) {
			const name = this._variable.__ks_func_getSecureName_0();
			const assessment = this.__ks_func_type_9().assessment(this._variable.__ks_func_name_0(), this);
			const line = fragments.newLine();
			const block = line.code(KSHelper.concatString(name, ".__ks_rt = function(that, args)")).newBlock();
			Router.toFragments((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (__ks_function_1, line) => {
					line.code(KSHelper.concatString(name, ".__ks_", __ks_function_1.getCallIndex(), ".call(that"));
					return true;
				};
				return __ks_rt;
			})(), null, assessment, block, this);
			block.done();
			line.done();
		}
		__ks_func_toRouterFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toRouterFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toRouterFragments_rt) {
				return super.__ks_func_toRouterFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_9() {
			return this._variable.__ks_func_getDeclaredType_0();
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_9.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		walk() {
			return this.__ks_func_walk_rt.call(null, this, this, arguments);
		}
		__ks_func_walk_3(fn) {
			if(this._main) {
				fn(this._name, this._variable.__ks_func_getDeclaredType_0());
			}
		}
		__ks_func_walk_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_walk_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_walk_rt) {
				return super.__ks_func_walk_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toFlatWrongDoingFragments_0(block, ctrl, argName, async, returns) {
			if(ctrl === void 0) {
				ctrl = null;
			}
			if(ctrl === null) {
				if(async === true) {
					throw new NotImplementedException();
				}
				else {
					block.newControl().code(KSHelper.concatString("if(", argName, ".length !== 0)")).step().line("throw new SyntaxError(\"Wrong number of arguments\")").done();
				}
			}
			else {
				if(async === true) {
					ctrl.step().code("else").step().line("return __ks_cb(new SyntaxError(\"Wrong number of arguments\"))").done();
				}
				else if(returns === true) {
					ctrl.done();
					block.line("throw new SyntaxError(\"Wrong number of arguments\")");
				}
				else {
					ctrl.step().code("else").step().line("throw new SyntaxError(\"Wrong number of arguments\")").done();
				}
			}
		}
		static toFlatWrongDoingFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 5) {
				if(t0(arguments[0]) && t0(arguments[2]) && t0(arguments[3]) && t0(arguments[4])) {
					return FunctionDeclaration.__ks_sttc_toFlatWrongDoingFragments_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
				}
			}
			if(Statement.toFlatWrongDoingFragments) {
				return Statement.toFlatWrongDoingFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class FunctionDeclarator extends AbstractNode {
		static __ks_new_0(...args) {
			const o = Object.create(FunctionDeclarator.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._autoTyping = false;
			this._awaiting = false;
			this._exit = false;
			this._index = 0;
			this._parameters = [];
			this._returnNull = false;
			this._topNodes = [];
		}
		__ks_cons_0(variable, data, parent) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			AbstractNode.prototype.__ks_cons_rt.call(null, this, [data, parent, parent.__ks_func_scope_0(), ScopeType.Function]);
			this._variable = variable;
			variable.__ks_func_addDeclarator_0(this);
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, FunctionVariable);
			const t1 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[2])) {
					return FunctionDeclarator.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._offset = this._scope.module().getLineOffset();
			this._scope.define("this", true, Type.Any, this);
			for(let __ks_0 = 0, __ks_1 = this._data.parameters.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.parameters[__ks_0];
				const parameter = Parameter.__ks_new_0(data, this);
				parameter.__ks_func_analyse_0();
				this._parameters.push(parameter);
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._scope.module().setLineOffset(this._offset);
			this._scope.line(this._data.start.line);
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_prepare_0();
			}
			this._type = new FunctionType(KSHelper.mapArray(this._parameters, function(parameter) {
				return parameter.__ks_func_type_30();
			}), this._data, this._index, this);
			this._returnNull = (KSHelper.valueOf(this._data.body.kind) === NodeKind.IfStatement.value) || (KSHelper.valueOf(this._data.body.kind) === NodeKind.UnlessStatement.value);
			this._block = $compile.function($ast.body.__ks_0(this._data), this);
			this._block.__ks_func_analyse_0();
			this._autoTyping = KSType.isValue(this._data.type) ? KSHelper.valueOf(this._data.type.kind) === NodeKind.ReturnTypeReference.value : false;
			if(this._autoTyping) {
				this._type.setReturnType(this._block.__ks_func_getUnpreparedType_2());
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._scope.module().setLineOffset(this._offset);
			this._scope.line(this._data.start.line);
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_translate_0();
			}
			if(this._autoTyping) {
				this._block.__ks_func_prepare_0();
				this._type.setReturnType(this._block.__ks_func_type_39());
			}
			else {
				this._block.__ks_func_type_40(this._type.__ks_func_getReturnType_0()).prepare();
			}
			this._block.__ks_func_translate_0();
			this._awaiting = this._block.__ks_func_isAwait_3();
			this._exit = this._block.__ks_func_isExit_3();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addInitializableVariable() {
			return this.__ks_func_addInitializableVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_addInitializableVariable_2(variable, node) {
		}
		__ks_func_addInitializableVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_addInitializableVariable_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addInitializableVariable_rt) {
				return super.__ks_func_addInitializableVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addTopNode() {
			return this.__ks_func_addTopNode_rt.call(null, this, this, arguments);
		}
		__ks_func_addTopNode_4(node) {
			this._topNodes.push(node);
		}
		__ks_func_addTopNode_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addTopNode_4.call(that, args[0]);
				}
			}
			if(super.__ks_func_addTopNode_rt) {
				return super.__ks_func_addTopNode_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_authority_0() {
			return this;
		}
		__ks_func_getFunctionNode_0() {
			return this;
		}
		getParameterOffset() {
			return this.__ks_func_getParameterOffset_rt.call(null, this, this, arguments);
		}
		__ks_func_getParameterOffset_4() {
			return 0;
		}
		__ks_func_getParameterOffset_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getParameterOffset_4.call(that);
			}
			if(super.__ks_func_getParameterOffset_rt) {
				return super.__ks_func_getParameterOffset_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasPreservedParameter() {
			return this.__ks_func_hasPreservedParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_hasPreservedParameter_0() {
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				if(parameter.__ks_func_isPreserved_0() === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_hasPreservedParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasPreservedParameter_0.call(that);
			}
			if(super.__ks_func_hasPreservedParameter_rt) {
				return super.__ks_func_hasPreservedParameter_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		index() {
			return this.__ks_func_index_rt.call(null, this, this, arguments);
		}
		__ks_func_index_0(index) {
			this._index = index;
			return this;
		}
		__ks_func_index_rt(that, proto, args) {
			const t0 = KSType.isNumber;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_index_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_index_rt) {
				return super.__ks_func_index_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		initializeVariable() {
			return this.__ks_func_initializeVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_initializeVariable_4(variable, expression, node) {
		}
		__ks_func_initializeVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_initializeVariable_4.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_initializeVariable_rt) {
				return super.__ks_func_initializeVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameter() {
			return this.__ks_func_isAssertingParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameter_4() {
			return this._options.rules.assertParameter;
		}
		__ks_func_isAssertingParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameter_4.call(that);
			}
			if(super.__ks_func_isAssertingParameter_rt) {
				return super.__ks_func_isAssertingParameter_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameterType() {
			return this.__ks_func_isAssertingParameterType_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameterType_4() {
			return (this._options.rules.assertParameter === true) && (this._options.rules.assertParameterType === true);
		}
		__ks_func_isAssertingParameterType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameterType_4.call(that);
			}
			if(super.__ks_func_isAssertingParameterType_rt) {
				return super.__ks_func_isAssertingParameterType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAwait() {
			return this.__ks_func_isAwait_rt.call(null, this, this, arguments);
		}
		__ks_func_isAwait_1() {
			return this._awaiting;
		}
		__ks_func_isAwait_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAwait_1.call(that);
			}
			if(super.__ks_func_isAwait_rt) {
				return super.__ks_func_isAwait_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isExit() {
			return this.__ks_func_isExit_rt.call(null, this, this, arguments);
		}
		__ks_func_isExit_1() {
			return this._exit;
		}
		__ks_func_isExit_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExit_1.call(that);
			}
			if(super.__ks_func_isExit_rt) {
				return super.__ks_func_isExit_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isConsumedError_0(error) {
			return this._type.__ks_func_isCatchingError_0(error);
		}
		isInstanceMethod() {
			return this.__ks_func_isInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstanceMethod_3() {
			return false;
		}
		__ks_func_isInstanceMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstanceMethod_3.call(that);
			}
			if(super.__ks_func_isInstanceMethod_rt) {
				return super.__ks_func_isInstanceMethod_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isJumpable() {
			return this.__ks_func_isJumpable_rt.call(null, this, this, arguments);
		}
		__ks_func_isJumpable_1() {
			return false;
		}
		__ks_func_isJumpable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isJumpable_1.call(that);
			}
			if(super.__ks_func_isJumpable_rt) {
				return super.__ks_func_isJumpable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isOverridableFunction() {
			return this.__ks_func_isOverridableFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_isOverridableFunction_4() {
			return false;
		}
		__ks_func_isOverridableFunction_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isOverridableFunction_4.call(that);
			}
			if(super.__ks_func_isOverridableFunction_rt) {
				return super.__ks_func_isOverridableFunction_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameters() {
			return this.__ks_func_parameters_rt.call(null, this, this, arguments);
		}
		__ks_func_parameters_4() {
			return this._parameters;
		}
		__ks_func_parameters_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameters_4.call(that);
			}
			if(super.__ks_func_parameters_rt) {
				return super.__ks_func_parameters_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toAwaitExpressionFragments() {
			return this.__ks_func_toAwaitExpressionFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toAwaitExpressionFragments_0(fragments, parameters, statements) {
			fragments.code("(__ks_e");
			for(let __ks_0 = 0, __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = parameters[__ks_0];
				fragments.code($comma).compile(parameter);
			}
			fragments.code(") =>");
			const block = fragments.newBlock();
			const ctrl = block.newControl().code("if(__ks_e)").step().line("__ks_cb(__ks_e)").step().code("else").step();
			let index = -1;
			let item = null;
			for(let i = 0, __ks_0 = statements.length, statement; i < __ks_0 && (index === -1); ++i) {
				statement = statements[i];
				let __ks_1;
				if(KSType.isValue(__ks_1 = statement.toFragments(ctrl, Mode.None)) ? (item = __ks_1, true) : false) {
					index = i;
				}
			}
			if(index !== -1) {
				item(statements.slice(index + 1));
			}
			ctrl.done();
			block.done();
			fragments.code(")").done();
		}
		__ks_func_toAwaitExpressionFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toAwaitExpressionFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toAwaitExpressionFragments_rt) {
				return super.__ks_func_toAwaitExpressionFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_19(fragments) {
			const line = fragments.newLine().code(KSHelper.concatString(this._variable.__ks_func_getSecureName_0(), ".__ks_", this._type.__ks_func_index_0(), " = function("));
			const block = Parameter.toFragments(this, line, ParameterMode.Default, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(null, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(fragments) {
					return fragments.code(")").newBlock();
				};
				return __ks_rt;
			})());
			block.compile(this._block, Mode.None);
			if(!this._exit) {
				if(!this._awaiting && this._type.__ks_func_isAsync_0()) {
					block.line("__ks_cb()");
				}
				else if(this._returnNull) {
					block.line("return null");
				}
			}
			block.done();
			line.done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toStatementFragments_19.call(that, args[0]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_10() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_10.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class FunctionVariable extends Variable {
		static __ks_new_0(...args) {
			const o = Object.create(FunctionVariable.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._async = false;
			this._extended = false;
			this._declarators = [];
			this._indexDelta = 0;
		}
		__ks_cons_0(scope, name, extended, indexDelta) {
			if(indexDelta === void 0 || indexDelta === null) {
				indexDelta = 0;
			}
			Variable.prototype.__ks_cons_1.call(this, name, true, false, OverloadedFunctionType.__ks_new_0(scope), void 0);
			this._extended = extended;
			this._indexDelta = indexDelta;
			this._initialized = true;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Scope);
			const t1 = KSType.isString;
			const t2 = KSType.isBoolean;
			const t3 = value => KSType.isNumber(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 3 && args.length <= 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && KSHelper.isVarargs(args, 0, 1, t3, pts = [3], 0) && te(pts, 1)) {
					return FunctionVariable.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], KSHelper.getVararg(args, 3, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.__ks_func_analyse_0();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Variable.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(this._extended) {
				let type = null;
				for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
					declarator = this._declarators[__ks_0];
					declarator.__ks_func_prepare_0();
					type = declarator.__ks_func_type_10();
					if(type.isAsync() !== this._async) {
						SyntaxException.__ks_sttc_throwMixedOverloadedFunction_0(declarator);
					}
					else if(this._declaredType.hasFunction(type) === true) {
						SyntaxException.throwIdenticalFunction(this._name, type, declarator);
					}
					this._declaredType.addFunction(type);
				}
			}
			else if(this._declarators.length === 1) {
				this._declarators[0].__ks_func_prepare_0();
				const type = this._declarators[0].__ks_func_type_10();
				this._declaredType = Type.toNamedType(this._name, type);
				this._realType = this._declaredType;
			}
			else {
				let declarator = this._declarators[0];
				declarator.__ks_func_prepare_0();
				let type = declarator.__ks_func_type_10();
				this._declaredType.addFunction(type);
				const async = type.isAsync();
				for(let __ks_0 = 1, __ks_1 = this._declarators.length; __ks_0 < __ks_1; ++__ks_0) {
					declarator = this._declarators[__ks_0];
					declarator.__ks_func_prepare_0();
					type = declarator.__ks_func_type_10();
					if(type.isAsync() !== async) {
						SyntaxException.__ks_sttc_throwMixedOverloadedFunction_0(declarator);
					}
					else if(this._declaredType.hasFunction(type) === true) {
						SyntaxException.throwIdenticalFunction(this._name, type, declarator);
					}
					this._declaredType.addFunction(type);
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Variable.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.__ks_func_translate_0();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Variable.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addDeclarator() {
			return this.__ks_func_addDeclarator_rt.call(null, this, this, arguments);
		}
		__ks_func_addDeclarator_0(declarator) {
			declarator.__ks_func_index_0(this._indexDelta + this._declarators.length);
			this._declarators.push(declarator);
		}
		__ks_func_addDeclarator_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, FunctionDeclarator);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addDeclarator_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_addDeclarator_rt) {
				return super.__ks_func_addDeclarator_rt.call(null, that, Variable.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		declarators() {
			return this.__ks_func_declarators_rt.call(null, this, this, arguments);
		}
		__ks_func_declarators_0() {
			return this._declarators;
		}
		__ks_func_declarators_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_declarators_0.call(that);
			}
			if(super.__ks_func_declarators_rt) {
				return super.__ks_func_declarators_rt.call(null, that, Variable.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAsync() {
			return this.__ks_func_isAsync_rt.call(null, this, this, arguments);
		}
		__ks_func_isAsync_0() {
			return this._declaredType.isAsync();
		}
		__ks_func_isAsync_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAsync_0.call(that);
			}
			if(super.__ks_func_isAsync_rt) {
				return super.__ks_func_isAsync_rt.call(null, that, Variable.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		length() {
			return this.__ks_func_length_rt.call(null, this, this, arguments);
		}
		__ks_func_length_0() {
			return this._declarators.length;
		}
		__ks_func_length_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_length_0.call(that);
			}
			if(super.__ks_func_length_rt) {
				return super.__ks_func_length_rt.call(null, that, Variable.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_0(fragments, mode) {
			for(let index = 0, __ks_0 = this._declarators.length, declarator; index < __ks_0; ++index) {
				declarator = this._declarators[index];
				declarator.toStatementFragments(fragments, KSHelper.concatString("__ks_", this._name, "_", index), mode);
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Variable.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class IfStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(IfStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(IfStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._analyzeStep = true;
			this._assignedInstanceVariables = new Dictionary();
			this._bindingDeclaration = false;
			this._cascade = false;
			this._declared = false;
			this._initializedVariables = new Dictionary();
			this._lateInitVariables = new Dictionary();
			this._hasWhenFalse = false;
			this._whenFalseExpression = null;
			this._whenFalseScope = null;
			this._whenTrueExpression = null;
			this._whenTrueScope = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			if(KSHelper.valueOf(this._data.condition.kind) === NodeKind.VariableDeclaration.value) {
				this._declared = true;
				this._bindingScope = this.newScope(this._scope, ScopeType.Bleeding);
				this._bindingDeclaration = KSHelper.valueOf(this._data.condition.variables[0].name.kind) !== NodeKind.Identifier.value;
				this._declaration = VariableDeclaration.__ks_new_1(this._data.condition, this, this._bindingScope, KSHelper.notNull(this._scope), this._cascade || this._bindingDeclaration);
				this._declaration.__ks_func_initiate_0();
			}
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._hasWhenFalse = KSType.isValue(this._data.whenFalse);
			if(this._declared) {
				this._declaration.__ks_func_analyse_0();
				if(this._bindingDeclaration) {
					this._condition = this._declaration.__ks_func_init_0();
				}
				this._whenTrueScope = this.__ks_func_newScope_0(this._bindingScope, ScopeType.InlineBlock);
			}
			else {
				this._bindingScope = this.newScope(this._scope, ScopeType.Hollow);
				this._whenTrueScope = this.__ks_func_newScope_0(this._bindingScope, ScopeType.InlineBlock);
				this._condition = $compile.expression(this._data.condition, this, this._bindingScope);
				this._condition.__ks_func_analyse_0();
			}
			this._scope.line(this._data.whenTrue.start.line);
			this._whenTrueExpression = $compile.block(this._data.whenTrue, this, this._whenTrueScope);
			this._whenTrueExpression.analyse();
			if(this._hasWhenFalse) {
				this._whenFalseScope = this.newScope(this._scope, ScopeType.InlineBlock);
				this._scope.line(this._data.whenFalse.start.line);
				if(KSHelper.valueOf(this._data.whenFalse.kind) === NodeKind.IfStatement.value) {
					this._whenFalseExpression = $compile.statement(this._data.whenFalse, this, this._whenFalseScope);
					this._whenFalseExpression.setCascade(true);
					this._whenFalseExpression.initiate();
					this._whenFalseExpression.analyse();
				}
				else {
					this._whenFalseExpression = $compile.block(this._data.whenFalse, this, this._whenFalseScope);
					this._whenFalseExpression.analyse();
				}
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(this._declared) {
				this._declaration.__ks_func_prepare_0();
				if(this._bindingDeclaration) {
					this._condition.__ks_func_acquireReusable_1(true);
					this._condition.__ks_func_releaseReusable_1();
				}
				let variable = this._declaration.__ks_func_getIdentifierVariable_0();
				if(KSType.isValue(variable)) {
					variable.setRealType(variable.getRealType().setNullable(false));
				}
			}
			else {
				this._condition.__ks_func_prepare_0();
				if(!(this._condition.__ks_func_type_22().canBeBoolean() === true)) {
					TypeException.__ks_sttc_throwInvalidCondition_0(this._condition, this);
				}
				{
					let __ks_0 = this._condition.__ks_func_inferWhenTrueTypes_0(new Dictionary());
					for(const name in __ks_0) {
						const data = __ks_0[name];
						this._whenTrueScope.updateInferable(name, data, this);
					}
				}
				if(this._whenFalseExpression !== null) {
					{
						let __ks_0 = this._condition.__ks_func_inferWhenFalseTypes_0(new Dictionary());
						for(const name in __ks_0) {
							const data = __ks_0[name];
							this._whenFalseScope.updateInferable(name, data, this);
						}
					}
				}
				this._condition.__ks_func_acquireReusable_1(false);
				this._condition.__ks_func_releaseReusable_1();
			}
			this.__ks_func_assignTempVariables_0(this._bindingScope);
			this._scope.line(this._data.whenTrue.start.line);
			this._whenTrueExpression.prepare();
			if(this._whenFalseExpression === null) {
				this._scope.line(this._data.end.line);
				if(!this._declared) {
					if(this._whenTrueExpression.isExit() === true) {
						for(const name in this._lateInitVariables) {
							const map = this._lateInitVariables[name];
							if(map.false.initializable === true) {
								this._parent.initializeVariable(VariableBrief(name, map.false.type), this, this);
							}
							else {
								SyntaxException.throwMissingAssignmentIfFalse(name, this._whenFalseExpression);
							}
						}
						{
							let __ks_0 = this._condition.__ks_func_inferWhenFalseTypes_0(new Dictionary());
							for(const name in __ks_0) {
								const data = __ks_0[name];
								this._scope.updateInferable(name, data, this);
							}
						}
					}
					else {
						for(const name in this._lateInitVariables) {
							const map = this._lateInitVariables[name];
							let type = null;
							if(map.true.initializable === true) {
								if(map.false.initializable === true) {
									type = Type.union(this._scope, map.true.type, map.false.type);
								}
								else {
									SyntaxException.throwMissingAssignmentIfFalse(name, this._whenFalseExpression);
								}
							}
							else {
								SyntaxException.throwMissingAssignmentIfTrue(name, this._whenTrueExpression);
							}
							this._parent.initializeVariable(VariableBrief.__ks_new(name, type), this, this);
						}
						const conditionInferables = this._condition.__ks_func_inferWhenFalseTypes_0(new Dictionary());
						const trueInferables = this._whenTrueScope.listUpdatedInferables();
						for(const name in trueInferables) {
							const inferable = trueInferables[name];
							const trueType = inferable.type;
							if(KSType.isValue(conditionInferables[name])) {
								const conditionType = conditionInferables[name].type;
								if(trueType.equals(conditionType) === true) {
									this._scope.updateInferable(name, inferable, this);
								}
								else {
									this._scope.updateInferable(name, (() => {
										const d = new Dictionary();
										d.isVariable = inferable.isVariable;
										d.type = Type.union(this._scope, trueType, conditionType);
										return d;
									})(), this);
								}
							}
							else if((inferable.isVariable === true) && this._scope.__ks_func_hasVariable_0(name)) {
								this._scope.replaceVariable(name, trueType, true, false, this);
							}
						}
					}
				}
			}
			else {
				this._scope.line(this._data.whenFalse.start.line);
				this._whenFalseExpression.prepare();
				this._scope.line(this._data.end.line);
				if(this._whenTrueExpression.isExit() === true) {
					for(const name in this._initializedVariables) {
						const data = this._initializedVariables[name];
						if(data.false.initializable === true) {
							data.variable.type = data.false.type;
							this._parent.initializeVariable(data.variable, this, this);
						}
					}
					for(const name in this._lateInitVariables) {
						const map = this._lateInitVariables[name];
						if(map.false.initializable === true) {
							this._parent.initializeVariable(VariableBrief(name, map.false.type), this, this);
						}
						else {
							SyntaxException.__ks_sttc_throwMissingAssignmentIfFalse_0(name, this._whenFalseExpression);
						}
					}
					{
						let __ks_0 = this._whenFalseScope.listUpdatedInferables();
						for(const name in __ks_0) {
							const data = __ks_0[name];
							this._scope.updateInferable(name, data, this);
						}
					}
				}
				else if(this._whenFalseExpression.isExit() === true) {
					for(const name in this._initializedVariables) {
						const data = this._initializedVariables[name];
						if(data.true.initializable === true) {
							data.variable.type = data.true.type;
							this._parent.initializeVariable(data.variable, this, this);
						}
					}
					for(const name in this._lateInitVariables) {
						const map = this._lateInitVariables[name];
						if(map.true.initializable === true) {
							this._parent.initializeVariable(VariableBrief(name, map.true.type), this, this);
						}
						else {
							SyntaxException.throwMissingAssignmentIfTrue(name, this._whenTrueExpression);
						}
					}
					{
						let __ks_0 = this._whenTrueScope.listUpdatedInferables();
						for(const name in __ks_0) {
							const data = __ks_0[name];
							this._scope.updateInferable(name, data, this);
						}
					}
				}
				else {
					for(const name in this._initializedVariables) {
						const data = this._initializedVariables[name];
						if((data.true.initializable === true) && (data.false.initializable === true)) {
							data.variable.type = Type.union(this._scope, data.true.type, data.false.type);
							this._parent.initializeVariable(data.variable, this, this);
						}
					}
					for(const name in this._lateInitVariables) {
						const map = this._lateInitVariables[name];
						let type = null;
						if(map.true.initializable === true) {
							if(map.false.initializable === true) {
								type = Type.union(this._scope, map.true.type, map.false.type);
							}
							else {
								SyntaxException.__ks_sttc_throwMissingAssignmentIfFalse_0(name, this._whenFalseExpression);
							}
						}
						else {
							SyntaxException.throwMissingAssignmentIfTrue(name, this._whenTrueExpression);
						}
						this._parent.initializeVariable(VariableBrief.__ks_new(name, type), this, this);
					}
					const trueInferables = this._whenTrueScope.listUpdatedInferables();
					const falseInferables = this._whenFalseScope.listUpdatedInferables();
					for(const name in trueInferables) {
						const inferable = trueInferables[name];
						const trueType = inferable.type;
						if(KSType.isValue(falseInferables[name])) {
							const falseType = falseInferables[name].type;
							if(trueType.equals(falseType) === true) {
								this._scope.updateInferable(name, inferable, this);
							}
							else {
								this._scope.updateInferable(name, (() => {
									const d = new Dictionary();
									d.isVariable = inferable.isVariable;
									d.type = Type.union(this._scope, trueType, falseType);
									return d;
								})(), this);
							}
						}
						else if((inferable.isVariable === true) && this._scope.__ks_func_hasVariable_0(name)) {
							this._scope.replaceVariable(name, inferable.type, true, false, this);
						}
					}
					for(const name in falseInferables) {
						const inferable = falseInferables[name];
						if(!KSType.isValue(trueInferables[name])) {
							if((inferable.isVariable === true) && this._scope.__ks_func_hasVariable_0(name)) {
								this._scope.replaceVariable(name, inferable.type, true, false, this);
							}
						}
					}
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			if(this._declared) {
				this._declaration.__ks_func_translate_0();
			}
			else {
				this._condition.__ks_func_translate_0();
			}
			this._whenTrueExpression.translate();
			KSType.isValue(this._whenFalseExpression) ? this._whenFalseExpression.translate() : null;
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_addAssignments_0(variables) {
			if(this._cascade) {
				this._parent.addAssignments(variables);
			}
			else if(this._declared && !this._bindingDeclaration) {
				for(let __ks_0 = 0, __ks_1 = variables.length, variable; __ks_0 < __ks_1; ++__ks_0) {
					variable = variables[__ks_0];
					if(!(this._declaration.isDeclararingVariable(variable) === true)) {
						__ks_Array.__ks_func_pushUniq_0.call(this._assignments, [variable]);
					}
				}
			}
			else {
				__ks_Array.__ks_func_pushUniq_0.call(this._assignments, [].concat(variables));
			}
		}
		__ks_func_addInitializableVariable_3(variable, node) {
			const name = variable.__ks_func_name_0();
			const whenTrue = node === this._whenTrueExpression;
			let map = this._lateInitVariables[name];
			if(KSType.isValue(map)) {
				if(whenTrue) {
					if(map[!whenTrue].initializable === true) {
						map[whenTrue].initializable = true;
					}
					else if(!this._hasWhenFalse) {
						SyntaxException.throwMissingAssignmentIfNoElse(name, this);
					}
				}
				else {
					map[whenTrue].initializable = true;
				}
			}
			else if(!this._hasWhenFalse) {
				SyntaxException.throwMissingAssignmentIfNoElse(name, this);
			}
			else {
				this._lateInitVariables[name] = (() => {
					const d = new Dictionary();
					d.variable = variable;
					d[whenTrue] = (() => {
						const d = new Dictionary();
						d.initializable = true;
						d.type = null;
						return d;
					})();
					d[!whenTrue] = (() => {
						const d = new Dictionary();
						d.initializable = false;
						d.type = null;
						return d;
					})();
					return d;
				})();
			}
			this._parent.addInitializableVariable(variable, node);
		}
		__ks_func_addInitializableVariable_4(variable, whenTrue, node) {
			const name = variable.__ks_func_name_0();
			let map = this._lateInitVariables[name];
			if(KSType.isValue(map)) {
				map[whenTrue].initializable = true;
			}
			else if(!this._hasWhenFalse && whenTrue) {
				SyntaxException.throwMissingAssignmentIfNoElse(name, this);
			}
			else {
				this._lateInitVariables[name] = (() => {
					const d = new Dictionary();
					d.variable = variable;
					d[whenTrue] = (() => {
						const d = new Dictionary();
						d.initializable = true;
						d.type = null;
						return d;
					})();
					d[!whenTrue] = (() => {
						const d = new Dictionary();
						d.initializable = false;
						d.type = null;
						return d;
					})();
					return d;
				})();
			}
			this._parent.addInitializableVariable(variable, node);
		}
		__ks_func_addInitializableVariable_1(variable, node) {
			if(KSType.isClassInstance(variable, Variable) && KSType.isValue(node)) {
				return this.__ks_func_addInitializableVariable_3(variable, node);
			}
			return super.__ks_func_addInitializableVariable_1(variable, node);
		}
		__ks_func_addInitializableVariable_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Variable);
			const t1 = KSType.isValue;
			const t2 = KSType.isBoolean;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addInitializableVariable_3.call(that, args[0], args[1]);
				}
			}
			if(args.length === 3) {
				if(t0(args[0]) && t2(args[1]) && t1(args[2])) {
					return proto.__ks_func_addInitializableVariable_4.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_addInitializableVariable_rt.call(null, that, Statement.prototype, args);
		}
		__ks_func_assignments_0() {
			if(KSType.isClassInstance(this._whenFalseExpression, IfStatement)) {
				return [].concat(this._assignments, this._whenFalseExpression.__ks_func_assignments_0());
			}
			else {
				return this._assignments;
			}
		}
		__ks_func_checkReturnType_0(type) {
			this._whenTrueExpression.checkReturnType(type);
			KSType.isValue(this._whenFalseExpression) ? this._whenFalseExpression.checkReturnType(type) : null;
		}
		getWhenFalseScope() {
			return this.__ks_func_getWhenFalseScope_rt.call(null, this, this, arguments);
		}
		__ks_func_getWhenFalseScope_0() {
			return this._whenFalseScope;
		}
		__ks_func_getWhenFalseScope_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getWhenFalseScope_0.call(that);
			}
			if(super.__ks_func_getWhenFalseScope_rt) {
				return super.__ks_func_getWhenFalseScope_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getWhenTrueScope() {
			return this.__ks_func_getWhenTrueScope_rt.call(null, this, this, arguments);
		}
		__ks_func_getWhenTrueScope_0() {
			return this._whenTrueScope;
		}
		__ks_func_getWhenTrueScope_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getWhenTrueScope_0.call(that);
			}
			if(super.__ks_func_getWhenTrueScope_rt) {
				return super.__ks_func_getWhenTrueScope_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		initializeLateVariable() {
			return this.__ks_func_initializeLateVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_initializeLateVariable_0(name, type, whenTrue) {
			let map = this._lateInitVariables[name];
			if(KSType.isValue(map)) {
				map[whenTrue].type = type;
			}
			else {
				throw new NotSupportedException(this);
			}
		}
		__ks_func_initializeLateVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Type);
			const t2 = KSType.isBoolean;
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_initializeLateVariable_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_initializeLateVariable_rt) {
				return super.__ks_func_initializeLateVariable_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_initializeVariable_1(variable, expression, node) {
			const {name, type} = variable;
			const whenTrue = node === this._whenTrueExpression;
			let map = this._lateInitVariables[name];
			if(KSType.isValue(map)) {
				if(map[whenTrue].type !== null) {
					if(variable.isImmutable() === true) {
						ReferenceException.__ks_sttc_throwImmutable_0(name, expression);
					}
					else if(!type.matchContentOf(map[whenTrue].type)) {
						TypeException.throwInvalidAssignement(name, map[whenTrue].type, type, expression);
					}
				}
				else {
					map[whenTrue].initializable = true;
					map[whenTrue].type = type;
				}
				const clone = node.__ks_func_scope_0().getVariable(name).clone();
				if(clone.isDefinitive() === true) {
					clone.setRealType(type);
				}
				else {
					clone.setDeclaredType(type, true).flagDefinitive();
				}
				node.__ks_func_scope_0().replaceVariable(name, clone);
			}
			else if(KSType.isValue((map = this._initializedVariables[name]))) {
				if(map[whenTrue].type !== null) {
					if(variable.immutable) {
						ReferenceException.__ks_sttc_throwImmutable_0(name, expression);
					}
					else if(!variable.type.matchContentOf(map[whenTrue].type)) {
						TypeException.throwInvalidAssignement(name, map[whenTrue].type, variable.type, expression);
					}
				}
				else {
					map[whenTrue].initializable = true;
					map[whenTrue].type = variable.type;
				}
				node.__ks_func_scope_0().updateInferable(name, variable, expression);
			}
			else {
				this._initializedVariables[name] = (() => {
					const d = new Dictionary();
					d.variable = variable;
					d[whenTrue] = (() => {
						const d = new Dictionary();
						d.initializable = true;
						d.type = variable.type;
						return d;
					})();
					d[!whenTrue] = (() => {
						const d = new Dictionary();
						d.initializable = false;
						d.type = null;
						return d;
					})();
					return d;
				})();
			}
		}
		__ks_func_isCascade_0() {
			return this._cascade;
		}
		__ks_func_isExit_0() {
			return KSType.isValue(this._whenFalseExpression) && (this._whenTrueExpression.isExit() === true) && (this._whenFalseExpression.isExit() === true);
		}
		__ks_func_isInitializingInstanceVariable_0(name) {
			if(this._condition.isInitializingInstanceVariable(name)) {
				return true;
			}
			if(this._hasWhenFalse) {
				return (this._whenTrueExpression.isInitializingInstanceVariable(name) === true) && (this._whenFalseExpression.isInitializingInstanceVariable(name) === true);
			}
			else {
				return false;
			}
		}
		isInitializingStaticVariable() {
			return this.__ks_func_isInitializingStaticVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingStaticVariable_0(name) {
			if(this._condition.isInitializingStaticVariable(name) === true) {
				return true;
			}
			if(this._hasWhenFalse) {
				return (this._whenTrueExpression.isInitializingStaticVariable(name) === true) && (this._whenFalseExpression.isInitializingStaticVariable(name) === true);
			}
			else {
				return false;
			}
		}
		__ks_func_isInitializingStaticVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingStaticVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingStaticVariable_rt) {
				return super.__ks_func_isInitializingStaticVariable_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isJumpable_0() {
			return true;
		}
		__ks_func_isLateInitializable_0() {
			return true;
		}
		__ks_func_isUsingVariable_0(name) {
			if(this._declared) {
				if(this._declaration.__ks_func_isUsingVariable_0(name) === true) {
					return true;
				}
			}
			else {
				if(this._condition.__ks_func_isUsingVariable_1(name) === true) {
					return true;
				}
			}
			if(this._whenTrueExpression.isUsingVariable(name) === true) {
				return true;
			}
			return (this._whenFalseExpression !== null) && (this._whenFalseExpression.isUsingVariable(name) === true);
		}
		setCascade() {
			return this.__ks_func_setCascade_rt.call(null, this, this, arguments);
		}
		__ks_func_setCascade_0(cascade) {
			this._cascade = cascade;
		}
		__ks_func_setCascade_rt(that, proto, args) {
			const t0 = KSType.isBoolean;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setCascade_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_setCascade_rt) {
				return super.__ks_func_setCascade_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_20(fragments, mode) {
			if(this._declared && !this._bindingDeclaration) {
				fragments.compile(this._declaration);
				const ctrl = fragments.newControl();
				this.toIfFragments(ctrl, mode);
				ctrl.done();
			}
			else {
				const ctrl = fragments.newControl();
				this.toIfFragments(ctrl, mode);
				ctrl.done();
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_20.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toIfFragments() {
			return this.__ks_func_toIfFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toIfFragments_0(fragments, mode) {
			fragments.code("if(");
			if(this._declared) {
				if(this._bindingDeclaration) {
					fragments.code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue(")).compileReusable(this._condition).code(")");
					fragments.code(" ? (");
					this._declaration.__ks_func_declarator_0().toAssignmentFragments(fragments, this._condition);
					fragments.code(", true) : false");
				}
				else {
					if(this._cascade) {
						let first = true;
						this._declaration.__ks_func_walk_4((() => {
							const __ks_rt = (...args) => {
								const t0 = KSType.isValue;
								if(args.length === 2) {
									if(t0(args[0]) && t0(args[1])) {
										return __ks_rt.__ks_0.call(this, args[0], args[1]);
									}
								}
								throw KSHelper.badArgs();
							};
							__ks_rt.__ks_0 = (name, __ks_0) => {
								if(first) {
									fragments.code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue(("));
									this._declaration.__ks_func_toInlineFragments_0(fragments, mode);
									fragments.code("))");
									first = false;
								}
								else {
									fragments.code(KSHelper.concatString(" && ", $runtime.type.__ks_0(this), ".isValue("), name, ")");
								}
							};
							return __ks_rt;
						})());
					}
					else {
						let first = true;
						this._declaration.__ks_func_walk_4((() => {
							const __ks_rt = (...args) => {
								const t0 = KSType.isValue;
								if(args.length === 2) {
									if(t0(args[0]) && t0(args[1])) {
										return __ks_rt.__ks_0.call(this, args[0], args[1]);
									}
								}
								throw KSHelper.badArgs();
							};
							__ks_rt.__ks_0 = (name, __ks_0) => {
								if(first) {
									first = false;
								}
								else {
									fragments.code(" && ");
								}
								fragments.code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue("), name, ")");
							};
							return __ks_rt;
						})());
					}
				}
			}
			else {
				fragments.compileBoolean(this._condition);
			}
			fragments.code(")").step();
			fragments.compile(this._whenTrueExpression, mode);
			if(KSType.isValue(this._whenFalseExpression)) {
				if(KSType.isClassInstance(this._whenFalseExpression, IfStatement)) {
					fragments.step().code("else ");
					this._whenFalseExpression.__ks_func_toIfFragments_0(fragments, mode);
				}
				else {
					fragments.step().code("else").step();
					fragments.compile(this._whenFalseExpression, mode);
				}
			}
		}
		__ks_func_toIfFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toIfFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toIfFragments_rt) {
				return super.__ks_func_toIfFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ImplementDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ImplementDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ImplementDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._forkedMethods = new Dictionary();
			this._newSealedClass = false;
			this._properties = [];
			this._sharingProperties = new Dictionary();
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			let __ks_0;
			if(KSType.isValue(__ks_0 = this._scope.getVariable(this._data.variable.name)) ? (this._variable = __ks_0, false) : true) {
				ReferenceException.throwNotDefined(this._data.variable.name, this);
			}
			this._variable.__ks_func_setComplete_0(false);
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_enhance_0() {
			if(!(this._variable.__ks_func_isClassStatement_0() === true)) {
				this.__ks_func_resolveType_0(false);
			}
		}
		resolveType() {
			return this.__ks_func_resolveType_rt.call(null, this, this, arguments);
		}
		__ks_func_resolveType_0(__ks_class_1) {
			this._type = this._variable.__ks_func_getDeclaredType_0();
			if(!KSType.isClassInstance(this._type, NamedType)) {
				TypeException.__ks_sttc_throwImplInvalidType_0(this);
			}
			if(this._variable.__ks_func_isPredefined_0() === true) {
				this._variable = this._scope.define(this._variable.__ks_func_name_0(), true, this._type.__ks_func_clone_1().__ks_func_unflagAltering_0(), this);
				this._newSealedClass = (this._type.__ks_func_isSealed_0() === true) && (this._type.__ks_func_isExtendable_0() === true);
			}
			else if(((this._type.__ks_func_isAlien_0() === true) || (this._type.__ks_func_isRequired_0() === true)) && !(this._variable.__ks_func_isAltereable_0() === true)) {
				this._variable.__ks_func_setDeclaredType_0(this._type.__ks_func_unflagAltering_0());
			}
			else if(__ks_class_1 || (this._type.__ks_func_isAltering_0() === true)) {
				this._variable.__ks_func_setDeclaredType_0(this._type.__ks_func_clone_1().__ks_func_unflagAltering_0());
			}
			this._variable.__ks_func_prepareAlteration_0();
			this._type = this._variable.__ks_func_getDeclaredType_0();
			if(!KSType.isClassInstance(this._type, NamedType)) {
				TypeException.__ks_sttc_throwImplInvalidType_0(this);
			}
		}
		__ks_func_resolveType_rt(that, proto, args) {
			const t0 = KSType.isBoolean;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_resolveType_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_resolveType_rt) {
				return super.__ks_func_resolveType_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(this._variable.__ks_func_isClassStatement_0() === true) {
				this.__ks_func_resolveType_0(true);
			}
			const type = this._type.__ks_func_type_0();
			if(KSType.isClassInstance(type, ClassType)) {
				for(let __ks_0 = 0, __ks_1 = this._data.properties.length, data; __ks_0 < __ks_1; ++__ks_0) {
					data = this._data.properties[__ks_0];
					let property = null;
					let __ks_2 = data.kind.valueOf();
					if(__ks_2 === NodeKind.FieldDeclaration.value) {
						property = new ImplementClassFieldDeclaration(data, this, this._type);
					}
					else if(__ks_2 === NodeKind.MethodDeclaration.value) {
						if(type.isConstructor(data.name.name) === true) {
							property = new ImplementClassConstructorDeclaration(data, this, this._type);
						}
						else if(type.isDestructor(data.name.name) === true) {
							NotImplementedException.__ks_sttc_throw_0([this]);
						}
						else {
							property = new ImplementClassMethodDeclaration(data, this, this._type);
						}
					}
					else {
						throw new NotSupportedException(KSHelper.concatString("Unexpected kind ", data.kind), this);
					}
					property.__ks_func_analyse_0();
					this._properties.push(property);
				}
			}
			else if(KSType.isClassInstance(type, EnumType)) {
				for(let __ks_0 = 0, __ks_1 = this._data.properties.length, data; __ks_0 < __ks_1; ++__ks_0) {
					data = this._data.properties[__ks_0];
					let property = null;
					let __ks_2 = data.kind.valueOf();
					if(__ks_2 === NodeKind.FieldDeclaration.value) {
						property = new ImplementEnumFieldDeclaration(data, this, this._type);
					}
					else if(__ks_2 === NodeKind.MethodDeclaration.value) {
						property = new ImplementEnumMethodDeclaration(data, this, this._type);
					}
					else {
						throw new NotSupportedException(KSHelper.concatString("Unexpected kind ", data.kind), this);
					}
					property.__ks_func_analyse_0();
					this._properties.push(property);
				}
			}
			else if(KSType.isClassInstance(type, NamespaceType)) {
				for(let __ks_0 = 0, __ks_1 = this._data.properties.length, data; __ks_0 < __ks_1; ++__ks_0) {
					data = this._data.properties[__ks_0];
					let property = null;
					let __ks_2 = data.kind.valueOf();
					if(__ks_2 === NodeKind.FieldDeclaration.value) {
						property = new ImplementNamespaceVariableDeclaration(data, this, this._type);
					}
					else if(__ks_2 === NodeKind.MethodDeclaration.value) {
						property = new ImplementNamespaceFunctionDeclaration(data, this, this._type);
					}
					else {
						throw new NotSupportedException(KSHelper.concatString("Unexpected kind ", data.kind), this);
					}
					property.__ks_func_analyse_0();
					this._properties.push(property);
				}
			}
			else {
				TypeException.__ks_sttc_throwImplInvalidType_0(this);
			}
			const methods = (() => {
				const d = new Dictionary();
				d.false = new Dictionary();
				d.true = new Dictionary();
				return d;
			})();
			for(let __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.prepare();
				let name = property.getSharedName();
				if(KSType.isValue(name)) {
					if(KSType.isValue(this._sharingProperties[name])) {
						this._sharingProperties[name].push(property);
					}
					else {
						this._sharingProperties[name] = [property];
					}
				}
				if(property.isMethod() === true) {
					const name = property.name();
					const type = property.type();
					const instance = property.isInstance();
					const mode = property.getMatchingMode();
					let __ks_methods_1 = methods[instance][name];
					if(KSType.isValue(__ks_methods_1)) {
						for(let __ks_2 = 0, __ks_3 = __ks_methods_1.length, method; __ks_2 < __ks_3; ++__ks_2) {
							method = __ks_methods_1[__ks_2];
							if(method.isSubsetOf(type, mode) === true) {
								if(property.isConstructor() === true) {
									SyntaxException.throwDuplicateConstructor(property);
								}
								else {
									SyntaxException.throwDuplicateMethod(name, property);
								}
							}
						}
						__ks_methods_1.push(type);
					}
					else {
						methods[instance][name] = [type];
					}
				}
			}
			for(const name in this._forkedMethods) {
				const methods = this._forkedMethods[name];
				for(let __ks_0 in methods) {
					const {original, forks} = methods[__ks_0];
					const index = original.index();
					let found = false;
					for(let __ks_1 = 0, __ks_2 = this._type.listInstanceMethods(name), __ks_3 = __ks_2.length, method; __ks_1 < __ks_3 && !(found); ++__ks_1) {
						method = __ks_2[__ks_1];
						if(index === method.type().index()) {
							method.flagForked(this._type, forks);
							found = true;
						}
					}
					if(!found) {
						throw new NotImplementedException();
					}
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addForkedMethod() {
			return this.__ks_func_addForkedMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_addForkedMethod_1(name, oldMethod, newMethod) {
			const index = oldMethod.__ks_func_index_0();
			if(!KSType.isValue(this._forkedMethods[name])) {
				this._forkedMethods[name] = new Dictionary();
			}
			if(!KSType.isValue(this._forkedMethods[name][index])) {
				this._forkedMethods[name][index] = (() => {
					const d = new Dictionary();
					d.original = oldMethod;
					d.forks = [newMethod];
					return d;
				})();
			}
			else {
				this._forkedMethods[name][index].forks.push(newMethod);
			}
		}
		__ks_func_addForkedMethod_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, ClassMethodType);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
					return proto.__ks_func_addForkedMethod_1.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_addForkedMethod_rt) {
				return super.__ks_func_addForkedMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_21(fragments, mode) {
			if(this._newSealedClass === true) {
				fragments.line(KSHelper.concatString($runtime.immutableScope.__ks_0(this), this._type.__ks_func_getSealedName_0(), " = {}"));
			}
			for(let __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.toFragments(fragments, Mode.None);
			}
			for(let __ks_0 in this._sharingProperties) {
				const properties = this._sharingProperties[__ks_0];
				properties[0].toSharedFragments(fragments, properties);
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_21.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_11() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_11.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ImplementClassFieldDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ImplementClassFieldDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._defaultValue = false;
			this._immutable = false;
			this._init = -1;
			this._instance = true;
			this._lateInit = false;
			this._value = null;
		}
		__ks_cons_0(data, parent, variable) {
			Statement.prototype.__ks_cons_rt.call(null, this, [data, parent]);
			this._variable = variable;
			this._class = this._variable.__ks_func_type_0();
			this._classRef = this._scope.__ks_func_reference_0(this._variable);
			this._name = this._internalName = data.name.name;
			let __ks_private_1 = false;
			let alias = false;
			for(let __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = data.modifiers[__ks_0];
				let __ks_2 = modifier.kind.valueOf();
				if(__ks_2 === ModifierKind.Immutable.value) {
					this._immutable = true;
				}
				else if(__ks_2 === ModifierKind.LateInit.value) {
					this._lateInit = true;
				}
				else if(__ks_2 === ModifierKind.Private.value) {
					__ks_private_1 = true;
				}
				else if(__ks_2 === ModifierKind.Static.value) {
					this._instance = false;
				}
				else if(__ks_2 === ModifierKind.ThisAlias.value) {
					alias = true;
				}
			}
			if(__ks_private_1) {
				if(alias) {
					this._internalName = "_" + this._name;
				}
				else if(this._name[0] === "_") {
					this._name = this._name.substr(1);
				}
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, ClassType));
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
					return ImplementClassFieldDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			if(KSType.isValue(this._data.value)) {
				this._defaultValue = true;
				this._value = $compile.expression(this._data.value, this);
				this._value.analyse();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._type = ClassVariableType.__ks_sttc_fromAST_4(this._data, this);
			this._type.__ks_func_flagAltering_0();
			if(this._class.__ks_func_isSealed_0() === true) {
				this._type.__ks_func_flagSealed_0();
			}
			if(this._instance) {
				this._class.__ks_func_addInstanceVariable_0(this._internalName, this._type);
			}
			else {
				this._class.__ks_func_addClassVariable_0(this._internalName, this._type);
			}
			if(this._defaultValue) {
				if(this._instance) {
					this._init = this._class.__ks_func_incInitializationSequence_0();
				}
			}
			else if(!this._lateInit && !(this._type.__ks_func_isNullable_0() === true)) {
				SyntaxException.__ks_sttc_throwNotInitializedField_0(this._name, this);
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			if(this._defaultValue) {
				this._value.prepare();
				if(!KSType.isValue(this._data.type) && this._immutable && !this._lateInit) {
					this._type.type(this._value.type());
				}
				this._value.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getSharedName() {
			return this.__ks_func_getSharedName_rt.call(null, this, this, arguments);
		}
		__ks_func_getSharedName_0() {
			return (this._defaultValue && this._instance) ? "__ks_init" : null;
		}
		__ks_func_getSharedName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getSharedName_0.call(that);
			}
			if(super.__ks_func_getSharedName_rt) {
				return super.__ks_func_getSharedName_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isMethod() {
			return this.__ks_func_isMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isMethod_0() {
			return false;
		}
		__ks_func_isMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isMethod_0.call(that);
			}
			if(super.__ks_func_isMethod_rt) {
				return super.__ks_func_isMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInstance() {
			return this.__ks_func_isInstance_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstance_3() {
			return this._instance;
		}
		__ks_func_isInstance_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstance_3.call(that);
			}
			if(super.__ks_func_isInstance_rt) {
				return super.__ks_func_isInstance_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toFragments_1(fragments, mode) {
			if(!this._defaultValue) {
				return;
			}
			if(this._class.__ks_func_isSealed_0() === true) {
				if(this._instance) {
					let line = null, block = null, ctrl = null;
					line = fragments.newLine();
					line.code(KSHelper.concatString(this._variable.__ks_func_getSealedName_0(), ".__ks_get_", this._name, " = function(that)"));
					block = line.newBlock();
					ctrl = block.newControl();
					ctrl.code(KSHelper.concatString("if(!that[", $runtime.initFlag.__ks_0(this), "])")).step();
					ctrl.line(KSHelper.concatString(this._variable.__ks_func_getSealedName_0(), ".__ks_init(that)"));
					ctrl.done();
					block.line("return that." + this._internalName);
					block.done();
					line.done();
					line = fragments.newLine();
					line.code(KSHelper.concatString(this._variable.__ks_func_getSealedName_0(), ".__ks_set_", this._name, " = function(that, value)"));
					block = line.newBlock();
					ctrl = block.newControl();
					ctrl.code(KSHelper.concatString("if(!that[", $runtime.initFlag.__ks_0(this), "])")).step();
					ctrl.line(KSHelper.concatString(this._variable.__ks_func_getSealedName_0(), ".__ks_init(that)"));
					ctrl.done();
					block.line("that." + this._internalName + " = value");
					block.done();
					line.done();
				}
				else {
					fragments.newLine().code(KSHelper.concatString(this._variable.__ks_func_getSealedName_0(), ".", this._internalName, " = ")).compile(this._value).done();
				}
			}
			else {
				if(!this._instance) {
					fragments.newLine().code(KSHelper.concatString(this._variable.__ks_func_name_0(), ".", this._internalName, " = ")).compile(this._value).done();
				}
			}
		}
		toDefaultFragments() {
			return this.__ks_func_toDefaultFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toDefaultFragments_0(fragments) {
			if(!(this._instance && this._defaultValue)) {
				return;
			}
			if(this._class.__ks_func_isSealed_0() === true) {
				fragments.newLine().code("that." + this._internalName + " = ").compile(this._value).done();
			}
			else {
				fragments.newLine().code("this." + this._internalName + " = ").compile(this._value).done();
			}
		}
		__ks_func_toDefaultFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toDefaultFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toDefaultFragments_rt) {
				return super.__ks_func_toDefaultFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toSharedFragments() {
			return this.__ks_func_toSharedFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toSharedFragments_0(fragments, properties) {
			if(properties.some((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 3) {
						if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (property, __ks_0, __ks_1) => {
					return property.isInstance();
				};
				return __ks_rt;
			})()) === true) {
				if(this._class.__ks_func_isSealed_0() === true) {
					if(this._init > 0) {
						fragments.line(KSHelper.concatString(this._variable.__ks_func_getSealedName_0(), ".__ks_init_", this._init, " = ", this._variable.__ks_func_getSealedName_0(), ".__ks_init"));
					}
					const line = fragments.newLine();
					line.code(KSHelper.concatString(this._variable.__ks_func_getSealedName_0(), ".__ks_init = function(that)"));
					const block = line.newBlock();
					if(this._init > 0) {
						block.line(KSHelper.concatString(this._variable.__ks_func_getSealedName_0(), ".__ks_init_", this._init, "(that)"));
					}
					for(let __ks_0 = 0, __ks_1 = properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
						property = properties[__ks_0];
						property.toDefaultFragments(block);
					}
					block.line(KSHelper.concatString("that[", $runtime.initFlag.__ks_0(this), "] = true"));
					block.done();
					line.done();
				}
				else {
					fragments.line(KSHelper.concatString(this._variable.__ks_func_name_0(), ".prototype.__ks_init_", this._init, " = ", this._variable.__ks_func_name_0(), ".prototype.__ks_init"));
					const line = fragments.newLine();
					line.code(KSHelper.concatString(this._variable.__ks_func_name_0(), ".prototype.__ks_init = function()"));
					const block = line.newBlock();
					block.line(KSHelper.concatString("this.__ks_init_", this._init, "()"));
					for(let __ks_0 = 0, __ks_1 = properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
						property = properties[__ks_0];
						property.toDefaultFragments(block);
					}
					block.done();
					line.done();
				}
			}
		}
		__ks_func_toSharedFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toSharedFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toSharedFragments_rt) {
				return super.__ks_func_toSharedFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_12() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_12.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ImplementClassMethodDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ImplementClassMethodDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._aliases = [];
			this._autoTyping = false;
			this._exists = false;
			this._hiddenOverride = false;
			this._indigentValues = [];
			this._instance = true;
			this._override = false;
			this._overwrite = false;
			this._topNodes = [];
		}
		__ks_cons_0(data, parent, variable) {
			Statement.prototype.__ks_cons_rt.call(null, this, [data, parent, parent.scope(), ScopeType.Function]);
			this._variable = variable;
			this._class = this._variable.__ks_func_type_0();
			this._classRef = this._scope.__ks_func_reference_0(this._variable);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, ClassType));
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
					return ImplementClassMethodDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._scope.line(this._data.start.line);
			this._name = this._data.name.name;
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Override.value) {
					this._override = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Overwrite.value) {
					this._overwrite = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Static.value) {
					this._instance = false;
				}
			}
			this._this = this._scope.__ks_func_define_0("this", true, this._classRef, true, this);
			this._parameters = [];
			for(let __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = Parameter.__ks_new_0(parameter, this));
				parameter.__ks_func_analyse_0();
			}
			this._block = $compile.function($ast.body.__ks_0(this._data), this);
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._scope.line(this._data.start.line);
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_prepare_0();
			}
			if(this._instance) {
				if(this._class.__ks_func_isSealed_0() === true) {
					this._exists = this._class.__ks_func_hasSealedInstanceMethod_0(this._name);
				}
				else {
					this._exists = this._class.__ks_func_hasInstanceMethod_0(this._name);
				}
			}
			this._type = new ClassMethodType(KSHelper.mapArray(this._parameters, function(parameter) {
				return parameter.__ks_func_type_30();
			}), this._data, this);
			this._type.__ks_func_flagAltering_0();
			if(this._class.__ks_func_isSealed_0() === true) {
				this._type.__ks_func_flagSealed_0();
			}
			const returnReference = KSType.isValue(this._data.type) ? KSHelper.valueOf(this._data.type.kind) === NodeKind.ReturnTypeReference.value : false;
			let overridden = null;
			if(this._instance) {
				if(this._override) {
					let data = this.__ks_func_getOveriddenMethod_1(this._class, returnReference);
					if(KSType.isValue(data)) {
						overridden = data.method, this._type = data.type;
						if(!(this._class.__ks_func_isAbstract_0() === true)) {
							this._hiddenOverride = true;
						}
						const overloaded = this.__ks_func_listOverloadedMethods_1(this._class);
						__ks_Array.__ks_func_remove_0.call(KSHelper.cast(overloaded, "Array", false, null, "Array"), [overridden]);
						for(let __ks_0 = 0, __ks_1 = overloaded.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = overloaded[__ks_0];
							this._parent.addForkedMethod(this._name, method, this._type);
						}
					}
					else if(this.__ks_func_isAssertingOverride_1() === true) {
						SyntaxException.__ks_sttc_throwNoOverridableMethod_0(this._variable, this._name, this._parameters, this);
					}
					else {
						this._override = false;
						this._internalName = KSHelper.concatString("__ks_func_", this._name, "_", this._class.__ks_func_addInstanceMethod_0(this._name, this._type));
					}
				}
				else if(this._overwrite) {
					if(!(this._class.__ks_func_isSealed_0() === true)) {
						SyntaxException.__ks_sttc_throwNotSealedOverwrite_0(this);
					}
					const methods = this._class.__ks_func_listMatchingInstanceMethods_0(this._name, this._type, MatchingMode(MatchingMode.SimilarParameter | MatchingMode.ShiftableParameters | MatchingMode.IgnoreReturn | MatchingMode.IgnoreError));
					if(methods.length === 0) {
						SyntaxException.__ks_sttc_throwNoSuitableOverwrite_0(this._classRef, this._name, this._type, this);
					}
					this._class.overwriteInstanceMethod(this._name, this._type, methods);
					this._internalName = KSHelper.concatString("__ks_func_", this._name, "_", this._type.__ks_func_index_0());
					const type = Type.union.apply(Type, [].concat([this._scope], methods));
					const variable = this._scope.define("precursor", true, type, this);
					variable.replaceCall = (() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 3) {
								if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (data, __ks_arguments_1, node) => {
							return new CallOverwrittenMethodSubstitude(data, __ks_arguments_1, this._variable, this._name, methods, true, this);
						};
						return __ks_rt;
					})();
				}
				else {
					if(this._class.__ks_func_hasMatchingInstanceMethod_0(this._name, this._type, MatchingMode(MatchingMode.ExactParameter | MatchingMode.IgnoreName | MatchingMode.Superclass)) === true) {
						SyntaxException.__ks_sttc_throwDuplicateMethod_0(this._name, this);
					}
					else {
						this._internalName = KSHelper.concatString("__ks_func_", this._name, "_", this._class.__ks_func_addInstanceMethod_0(this._name, this._type));
					}
				}
			}
			else {
				if(this._override) {
					NotImplementedException.__ks_sttc_throw_0([this]);
				}
				else if(this._overwrite) {
					if(!(this._class.__ks_func_isSealed_0() === true)) {
						NotImplementedException.__ks_sttc_throw_0([this]);
					}
					const methods = this._class.listMatchingClassMethods(this._name, this._type, MatchingMode.ShiftableParameters);
					if(methods.length === 0) {
						SyntaxException.__ks_sttc_throwNoSuitableOverwrite_0(this._classRef, this._name, this._type, this);
					}
					this._class.overwriteClassMethod(this._name, this._type, methods);
					this._internalName = KSHelper.concatString("__ks_sttc_", this._name, "_", this._type.__ks_func_index_0());
					const type = Type.union.apply(Type, [].concat([this._scope], methods));
					const variable = this._scope.define("precursor", true, type, this);
					variable.replaceCall = (() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 3) {
								if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (data, __ks_arguments_1, node) => {
							return new CallOverwrittenMethodSubstitude(data, __ks_arguments_1, this._variable, this._name, methods, false, this);
						};
						return __ks_rt;
					})();
				}
				else {
					if(this._class.__ks_func_hasMatchingClassMethod_0(this._name, this._type, MatchingMode.ExactParameter) === true) {
						SyntaxException.__ks_sttc_throwDuplicateMethod_0(this._name, this);
					}
					else {
						this._internalName = KSHelper.concatString("__ks_sttc_", this._name, "_", this._class.__ks_func_addClassMethod_0(this._name, this._type));
					}
				}
			}
			this._block.__ks_func_analyse_2(this._aliases);
			this._block.__ks_func_analyse_0();
			if(returnReference) {
				let __ks_0 = this._data.type.value.kind.valueOf();
				if(__ks_0 === NodeKind.Identifier.value) {
					if(this._data.type.value.name === "auto") {
						if(!this._override) {
							this._type.setReturnType(this._block.__ks_func_getUnpreparedType_2());
							this._autoTyping = true;
						}
					}
					else {
						if(!this._override) {
							this._type.setReturnType(this._parent.type().reference(this._scope));
						}
						if(this._instance) {
							const __ks_return_1 = $compile.expression(this._data.type.value, this);
							__ks_return_1.analyse();
							this._block.addReturn(__ks_return_1);
						}
					}
				}
				else if(__ks_0 === NodeKind.ThisExpression.value) {
					const __ks_return_1 = $compile.expression(this._data.type.value, this);
					__ks_return_1.analyse();
					if(!this._override) {
						this._type.setReturnType(__ks_return_1.getUnpreparedType());
					}
					this._block.addReturn(__ks_return_1);
				}
			}
			if(KSType.isValue(overridden)) {
				const oldType = overridden.getReturnType();
				const newType = this._type.__ks_func_getReturnType_0();
				if(!((newType.isSubsetOf(oldType, MatchingMode(MatchingMode.Exact | MatchingMode.Missing)) === true) || (newType.isInstanceOf(oldType) === true))) {
					if(this._override) {
						if(this.__ks_func_isAssertingOverride_1() === true) {
							SyntaxException.throwNoOverridableMethod(this._parent.extends(), this._name, this._parameters, this);
						}
						else {
							this._override = false;
						}
					}
					else {
						SyntaxException.throwInvalidMethodReturn(this._parent.name(), this._name, this);
					}
				}
				this._internalName = KSHelper.concatString("__ks_func_", this._name, "_", this._type.__ks_func_index_0());
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_translate_0();
			}
			for(let __ks_0 = 0, __ks_1 = this._indigentValues.length, indigent; __ks_0 < __ks_1; ++__ks_0) {
				indigent = this._indigentValues[__ks_0];
				indigent.value.prepare();
				indigent.value.translate();
			}
			if(this._autoTyping) {
				this._block.__ks_func_prepare_0();
				this._type.setReturnType(this._block.__ks_func_type_39());
			}
			else {
				this._block.__ks_func_type_40(this._type.__ks_func_getReturnType_0()).prepare();
			}
			this._block.__ks_func_translate_0();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addAtThisParameter() {
			return this.__ks_func_addAtThisParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_addAtThisParameter_2(statement) {
			if(!(ClassDeclaration.isAssigningAlias(this._block.__ks_func_statements_0(), statement.__ks_func_name_20(), false, false) === true)) {
				this._aliases.push(statement);
			}
		}
		__ks_func_addAtThisParameter_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, AliasStatement);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addAtThisParameter_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_addAtThisParameter_rt) {
				return super.__ks_func_addAtThisParameter_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addIndigentValue() {
			return this.__ks_func_addIndigentValue_rt.call(null, this, this, arguments);
		}
		__ks_func_addIndigentValue_3(value, parameters) {
			const name = KSHelper.concatString("__ks_default_", this._class.__ks_func_level_0(), "_", this._class.__ks_func_incDefaultSequence_0());
			this._indigentValues.push((() => {
				const d = new Dictionary();
				d.name = name;
				d.value = value;
				d.parameters = parameters;
				return d;
			})());
			return name;
		}
		__ks_func_addIndigentValue_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Expression);
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addIndigentValue_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addIndigentValue_rt) {
				return super.__ks_func_addIndigentValue_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addTopNode() {
			return this.__ks_func_addTopNode_rt.call(null, this, this, arguments);
		}
		__ks_func_addTopNode_5(node) {
			this._topNodes.push(node);
		}
		__ks_func_addTopNode_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addTopNode_5.call(that, args[0]);
				}
			}
			if(super.__ks_func_addTopNode_rt) {
				return super.__ks_func_addTopNode_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_authority_0() {
			return this;
		}
		isAssertingOverride() {
			return this.__ks_func_isAssertingOverride_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingOverride_1() {
			return this._options.rules.assertOverride;
		}
		__ks_func_isAssertingOverride_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingOverride_1.call(that);
			}
			if(super.__ks_func_isAssertingOverride_rt) {
				return super.__ks_func_isAssertingOverride_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameter() {
			return this.__ks_func_isAssertingParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameter_5() {
			return this._options.rules.assertParameter;
		}
		__ks_func_isAssertingParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameter_5.call(that);
			}
			if(super.__ks_func_isAssertingParameter_rt) {
				return super.__ks_func_isAssertingParameter_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameterType() {
			return this.__ks_func_isAssertingParameterType_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameterType_5() {
			return (this._options.rules.assertParameter === true) && (this._options.rules.assertParameterType === true);
		}
		__ks_func_isAssertingParameterType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameterType_5.call(that);
			}
			if(super.__ks_func_isAssertingParameterType_rt) {
				return super.__ks_func_isAssertingParameterType_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		class() {
			return this.__ks_func_class_rt.call(null, this, this, arguments);
		}
		__ks_func_class_1() {
			return this._variable;
		}
		__ks_func_class_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_class_1.call(that);
			}
			if(super.__ks_func_class_rt) {
				return super.__ks_func_class_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getMatchingMode() {
			return this.__ks_func_getMatchingMode_rt.call(null, this, this, arguments);
		}
		__ks_func_getMatchingMode_0() {
			if(this._override) {
				return MatchingMode.ShiftableParameters;
			}
			else if(this._overwrite) {
				return MatchingMode(MatchingMode.SimilarParameter | MatchingMode.ShiftableParameters);
			}
			else {
				return MatchingMode.ExactParameter;
			}
		}
		__ks_func_getMatchingMode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getMatchingMode_0.call(that);
			}
			if(super.__ks_func_getMatchingMode_rt) {
				return super.__ks_func_getMatchingMode_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getOverridableVarname() {
			return this.__ks_func_getOverridableVarname_rt.call(null, this, this, arguments);
		}
		__ks_func_getOverridableVarname_3() {
			return "this";
		}
		__ks_func_getOverridableVarname_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getOverridableVarname_3.call(that);
			}
			if(super.__ks_func_getOverridableVarname_rt) {
				return super.__ks_func_getOverridableVarname_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getParameterOffset() {
			return this.__ks_func_getParameterOffset_rt.call(null, this, this, arguments);
		}
		__ks_func_getParameterOffset_5() {
			return 0;
		}
		__ks_func_getParameterOffset_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getParameterOffset_5.call(that);
			}
			if(super.__ks_func_getParameterOffset_rt) {
				return super.__ks_func_getParameterOffset_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getSharedName() {
			return this.__ks_func_getSharedName_rt.call(null, this, this, arguments);
		}
		__ks_func_getSharedName_1() {
			return this._override ? null : this._instance ? "_im_" + this._name : "_sm_" + this._name;
		}
		__ks_func_getSharedName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getSharedName_1.call(that);
			}
			if(super.__ks_func_getSharedName_rt) {
				return super.__ks_func_getSharedName_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isConstructor() {
			return this.__ks_func_isConstructor_rt.call(null, this, this, arguments);
		}
		__ks_func_isConstructor_0() {
			return false;
		}
		__ks_func_isConstructor_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isConstructor_0.call(that);
			}
			if(super.__ks_func_isConstructor_rt) {
				return super.__ks_func_isConstructor_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isConsumedError_0(error) {
			return this._type.__ks_func_isCatchingError_0(error);
		}
		isInstance() {
			return this.__ks_func_isInstance_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstance_4() {
			return this._instance;
		}
		__ks_func_isInstance_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstance_4.call(that);
			}
			if(super.__ks_func_isInstance_rt) {
				return super.__ks_func_isInstance_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInstanceMethod() {
			return this.__ks_func_isInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstanceMethod_4() {
			return this._instance;
		}
		__ks_func_isInstanceMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstanceMethod_4.call(that);
			}
			if(super.__ks_func_isInstanceMethod_rt) {
				return super.__ks_func_isInstanceMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isMethod() {
			return this.__ks_func_isMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isMethod_1() {
			return true;
		}
		__ks_func_isMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isMethod_1.call(that);
			}
			if(super.__ks_func_isMethod_rt) {
				return super.__ks_func_isMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isOverridableFunction() {
			return this.__ks_func_isOverridableFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_isOverridableFunction_5() {
			return true;
		}
		__ks_func_isOverridableFunction_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isOverridableFunction_5.call(that);
			}
			if(super.__ks_func_isOverridableFunction_rt) {
				return super.__ks_func_isOverridableFunction_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_6() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_6.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameters() {
			return this.__ks_func_parameters_rt.call(null, this, this, arguments);
		}
		__ks_func_parameters_5() {
			return this._parameters;
		}
		__ks_func_parameters_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameters_5.call(that);
			}
			if(super.__ks_func_parameters_rt) {
				return super.__ks_func_parameters_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toIndigentFragments() {
			return this.__ks_func_toIndigentFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toIndigentFragments_3(fragments) {
			for(let __ks_0 = 0, __ks_1 = this._indigentValues.length, name, value, parameters; __ks_0 < __ks_1; ++__ks_0) {
				({name, value, parameters} = this._indigentValues[__ks_0]);
				const line = fragments.newLine();
				const ctrl = line.newControl(null, false, false);
				if(this._class.__ks_func_isSealed_0() === true) {
					ctrl.code(KSHelper.concatString(this._variable.__ks_func_getSealedName_0(), ".", name, " = function(", parameters.join(", "), ")")).step();
				}
				else {
					ctrl.code(KSHelper.concatString(this._variable.__ks_func_name_0(), ".prototype.", name, " = function(", parameters.join(", "), ")")).step();
				}
				ctrl.newLine().code("return ").compile(value).done();
				ctrl.done();
				line.done();
			}
		}
		__ks_func_toIndigentFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toIndigentFragments_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_toIndigentFragments_rt) {
				return super.__ks_func_toIndigentFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toInstanceFragments() {
			return this.__ks_func_toInstanceFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toInstanceFragments_0(fragments) {
			const name = this._variable.__ks_func_name_0();
			const assessment = Router.assess(this._class.__ks_func_listInstanceMethods_0(this._name), this._name, this);
			const line = fragments.newLine();
			const block = line.code(KSHelper.concatString(name, ".prototype.__ks_func_", this._name, "_rt = function(that, proto, args)")).newBlock();
			Router.toFragments((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (__ks_function_1, line) => {
					line.code(KSHelper.concatString("proto.__ks_func_", this._name, "_", __ks_function_1.index(), ".call(that"));
					return true;
				};
				return __ks_rt;
			})(), null, assessment, block, this);
			block.done();
			line.done();
			if(!this._exists) {
				const line = fragments.newLine();
				line.code(KSHelper.concatString(name, ".prototype.", this._name, " = function()")).newBlock().line("return this.__ks_func_" + this._name + "_rt.call(null, this, this, arguments)").done();
				line.done();
			}
		}
		__ks_func_toInstanceFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toInstanceFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toInstanceFragments_rt) {
				return super.__ks_func_toInstanceFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStaticFragments() {
			return this.__ks_func_toStaticFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStaticFragments_0(fragments) {
			const name = this._variable.__ks_func_name_0();
			const assessment = Router.assess(this._class.__ks_func_listClassMethods_0(this._name), this._name, this);
			const line = fragments.newLine();
			const block = line.code(KSHelper.concatString(name, ".", this._name, " = function()")).newBlock();
			Router.toFragments((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (__ks_function_1, line) => {
					line.code(KSHelper.concatString(name, ".__ks_func_", this._name, "_", __ks_function_1.index(), "("));
					return false;
				};
				return __ks_rt;
			})(), "arguments", assessment, block, this);
			block.done();
			line.done();
		}
		__ks_func_toStaticFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toStaticFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toStaticFragments_rt) {
				return super.__ks_func_toStaticFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toSealedInstanceFragments() {
			return this.__ks_func_toSealedInstanceFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toSealedInstanceFragments_0(fragments) {
			const name = this._variable.__ks_func_name_0();
			const sealedName = this._variable.__ks_func_getSealedName_0();
			const assessment = Router.assess(this._class.__ks_func_listInstanceMethods_0(this._name), this._name, this);
			const exhaustive = this._class.__ks_func_isExhaustiveInstanceMethod_1(this._name, this);
			if(!this._exists) {
				const line = fragments.newLine();
				const block = line.code(KSHelper.concatString(sealedName, "._im_", this._name, " = function(that, ...args)")).newBlock();
				block.line(KSHelper.concatString("return ", sealedName, ".__ks_func_", this._name, "_rt(that, args)"));
				block.done();
				line.done();
			}
			const line = fragments.newLine();
			const block = line.code(KSHelper.concatString(sealedName, ".__ks_func_", this._name, "_rt = function(that, args)")).newBlock();
			Router.toFragments((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (__ks_function_1, line) => {
					if(__ks_function_1.isSealed() === true) {
						line.code(KSHelper.concatString(sealedName, ".__ks_func_", this._name, "_", __ks_function_1.index(), ".call(that"));
						return true;
					}
					else {
						line.code(KSHelper.concatString("that.__ks_func_", this._name, "_", __ks_function_1.index(), "("));
						return false;
					}
				};
				return __ks_rt;
			})(), null, assessment, block, (exhaustive === true) ? null : Router.FooterType.NO_THROW, (exhaustive === true) ? null : (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (fragments, __ks_0) => {
					fragments.newControl().code("if(that." + this._name + ")").step().line("return that." + this._name + "(...args)").done();
					fragments.line(KSHelper.concatString("throw ", $runtime.helper.__ks_0(this), ".badArgs()"));
				};
				return __ks_rt;
			})(), this);
			block.done();
			line.done();
		}
		__ks_func_toSealedInstanceFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toSealedInstanceFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toSealedInstanceFragments_rt) {
				return super.__ks_func_toSealedInstanceFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toSealedStaticFragments() {
			return this.__ks_func_toSealedStaticFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toSealedStaticFragments_0(fragments) {
			const name = this._variable.__ks_func_getSealedName_0();
			const assessment = Router.assess(this._class.__ks_func_listClassMethods_0(this._name), this._name, this);
			const exhaustive = this._class.__ks_func_isExhaustiveInstanceMethod_1(this._name, this);
			const line = fragments.newLine();
			const block = line.code(KSHelper.concatString(name, "._sm_", this._name, " = function()")).newBlock();
			Router.toFragments((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (__ks_function_1, line) => {
					line.code(KSHelper.concatString(name, ".__ks_sttc_", this._name, "_", __ks_function_1.index(), "("));
					return false;
				};
				return __ks_rt;
			})(), "arguments", assessment, block, (exhaustive === true) ? null : Router.FooterType.NO_THROW, (exhaustive === true) ? null : (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (fragments, __ks_0) => {
					fragments.newControl().code(KSHelper.concatString("if(", this._variable.__ks_func_name_0(), ".", this._name, ")")).step().line(KSHelper.concatString("return ", this._variable.__ks_func_name_0(), ".", this._name, "(...arguments)")).done();
					fragments.line(KSHelper.concatString("throw ", $runtime.helper.__ks_0(this), ".badArgs()"));
				};
				return __ks_rt;
			})(), this);
			block.done();
			line.done();
		}
		__ks_func_toSealedStaticFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toSealedStaticFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toSealedStaticFragments_rt) {
				return super.__ks_func_toSealedStaticFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toSharedFragments() {
			return this.__ks_func_toSharedFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toSharedFragments_1(fragments, __ks_0) {
			if(this._override) {
				return;
			}
			if(this._instance) {
				if(this._class.__ks_func_isSealed_0() === true) {
					this.__ks_func_toSealedInstanceFragments_0(fragments);
				}
				else {
					this.__ks_func_toInstanceFragments_0(fragments);
				}
			}
			else {
				if(this._class.__ks_func_isSealed_0() === true) {
					this.__ks_func_toSealedStaticFragments_0(fragments);
				}
				else {
					this.__ks_func_toStaticFragments_0(fragments);
				}
			}
		}
		__ks_func_toSharedFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toSharedFragments_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toSharedFragments_rt) {
				return super.__ks_func_toSharedFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_22(fragments, mode) {
			const line = fragments.newLine();
			if(this._class.__ks_func_isSealed_0() === true) {
				line.code(KSHelper.concatString(this._variable.__ks_func_getSealedName_0(), ".", this._internalName, " = function("));
			}
			else {
				if(this._instance) {
					line.code(KSHelper.concatString(this._variable.__ks_func_name_0(), ".prototype.", this._internalName, " = function("));
				}
				else {
					line.code(KSHelper.concatString(this._variable.__ks_func_name_0(), ".", this._internalName, " = function("));
				}
			}
			const block = Parameter.toFragments(this, line, ParameterMode.Default, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(null, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(fragments) {
					fragments.code(")");
					return fragments.newBlock();
				};
				return __ks_rt;
			})());
			for(let __ks_0 = 0, __ks_1 = this._topNodes.length, node; __ks_0 < __ks_1; ++__ks_0) {
				node = this._topNodes[__ks_0];
				node.toAuthorityFragments(block);
			}
			block.compile(this._block);
			block.done();
			line.done();
			this.__ks_func_toIndigentFragments_3(fragments);
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_22.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_13() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_13.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getOveriddenMethod() {
			return this.__ks_func_getOveriddenMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_getOveriddenMethod_1(superclass, returnReference) {
			let mode = MatchingMode(MatchingMode.FunctionSignature | MatchingMode.IgnoreReturn | MatchingMode.MissingError);
			if(!this._override) {
				mode = MatchingMode(mode & ~MatchingMode.MissingParameterType & ~MatchingMode.MissingParameterArity);
			}
			const methods = superclass.__ks_func_listInstantiableMethods_1(this._name, this._type, mode);
			let method = null;
			let exact = false;
			if(methods.length === 1) {
				method = methods[0];
			}
			else if(methods.length > 0) {
				for(let __ks_0 = 0, __ks_1 = methods.length, m; __ks_0 < __ks_1; ++__ks_0) {
					m = methods[__ks_0];
					if(m.isSubsetOf(this._type, MatchingMode.ExactParameter) === true) {
						method = m;
						exact = true;
						break;
					}
				}
				if(!KSType.isValue(method)) {
					throw new NotSupportedException(this);
				}
			}
			if(KSType.isValue(method)) {
				const type = this._override ? method.clone() : this._type;
				if(this._override) {
					const parameters = type.parameters();
					for(let index = 0, __ks_0 = this._parameters.length, parameter; index < __ks_0; ++index) {
						parameter = this._parameters[index];
						const currentType = parameter.__ks_func_type_30();
						const masterType = parameters[index];
						if(currentType.__ks_func_isMissingType_0() === true) {
							parameter.type(masterType);
						}
						else {
							if((masterType.hasDefaultValue() === true) && !(currentType.__ks_func_hasDefaultValue_1() === true)) {
								parameter.setDefaultValue(masterType.getDefaultValue());
							}
							parameters[index] = currentType;
						}
					}
				}
				if(returnReference) {
				}
				else if(this._override) {
					if(!(this._type.__ks_func_isMissingReturn_0() === true)) {
						const oldType = method.getReturnType();
						const newType = this._type.__ks_func_getReturnType_0();
						if(!((newType.isSubsetOf(oldType, MatchingMode(MatchingMode.Default | MatchingMode.Missing)) === true) || (newType.isInstanceOf(oldType) === true))) {
							if(this.__ks_func_isAssertingOverride_1() === true) {
								SyntaxException.throwNoOverridableMethod(this._parent.type(), this._name, this._parameters, this);
							}
							else {
								this._override = false;
							}
							return null;
						}
						else {
							type.setReturnType(method.getReturnType());
						}
					}
				}
				else {
					if(this._type.__ks_func_isMissingReturn_0() === true) {
						type.setReturnType(method.getReturnType());
					}
				}
				if(!(this._type.__ks_func_isMissingError_0() === true)) {
					const newTypes = this._type.__ks_func_listErrors_0();
					for(let __ks_0 = 0, __ks_1 = method.listErrors(), __ks_2 = __ks_1.length, oldType; __ks_0 < __ks_2; ++__ks_0) {
						oldType = __ks_1[__ks_0];
						let matched = false;
						for(let __ks_3 = 0, __ks_4 = newTypes.length, newType; __ks_3 < __ks_4 && !(matched); ++__ks_3) {
							newType = newTypes[__ks_3];
							if((newType.isSubsetOf(oldType, MatchingMode.Default) === true) || (newType.isInstanceOf(oldType) === true)) {
								matched = true;
							}
						}
						if(!matched) {
							if(this._override) {
								if(this.__ks_func_isAssertingOverride_1() === true) {
									SyntaxException.throwNoOverridableMethod(this._parent.type(), this._name, this._parameters, this);
								}
								else {
									this._override = false;
								}
							}
							return null;
						}
					}
				}
				if(!this._override && (exact || (type.isSubsetOf(method, MatchingMode(MatchingMode.ExactParameter | MatchingMode.IgnoreName)) === true))) {
					type.index(method.index());
				}
				return (() => {
					const d = new Dictionary();
					d.method = method;
					d.type = type;
					return d;
				})();
			}
			else if(this._override) {
				if(this.__ks_func_isAssertingOverride_1() === true) {
					SyntaxException.throwNoOverridableMethod(this._parent.type(), this._name, this._parameters, this);
				}
				else {
					this._override = false;
				}
			}
			return null;
		}
		__ks_func_getOveriddenMethod_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ClassType);
			const t1 = KSType.isBoolean;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_getOveriddenMethod_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_getOveriddenMethod_rt) {
				return super.__ks_func_getOveriddenMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listOverloadedMethods() {
			return this.__ks_func_listOverloadedMethods_rt.call(null, this, this, arguments);
		}
		__ks_func_listOverloadedMethods_1(superclass) {
			let methods = superclass.__ks_func_listInstanceMethods_0(this._name);
			if(KSType.isValue(methods)) {
				for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					if(method.isSubsetOf(this._type, MatchingMode.ExactParameter) === true) {
						return [];
					}
				}
			}
			return superclass.__ks_func_listInstantiableMethods_1(this._name, this._type, MatchingMode(MatchingMode(MatchingMode.FunctionSignature | MatchingMode.SubsetParameter | MatchingMode.MissingParameter) & ~MatchingMode.AdditionalParameter));
		}
		__ks_func_listOverloadedMethods_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ClassType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listOverloadedMethods_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_listOverloadedMethods_rt) {
				return super.__ks_func_listOverloadedMethods_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ImplementClassConstructorDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ImplementClassConstructorDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._aliases = [];
			this._dependent = false;
			this._overwrite = false;
			this._topNodes = [];
		}
		__ks_cons_0(data, parent, variable) {
			Statement.prototype.__ks_cons_rt.call(null, this, [data, parent, parent.scope(), ScopeType.Function]);
			this._variable = variable;
			this._class = this._variable.__ks_func_type_0();
			this._classRef = this._scope.__ks_func_reference_0(this._variable);
			if(this._class.__ks_func_isHybrid_0() === true) {
				NotSupportedException.__ks_sttc_throw_1([this]);
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, ClassType));
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
					return ImplementClassConstructorDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._scope.line(this._data.start.line);
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Overwrite.value) {
					this._overwrite = true;
				}
			}
			this._this = this._scope.__ks_func_define_0("this", true, this._classRef, true, this);
			const body = $ast.body.__ks_0(this._data);
			if(this._class.__ks_func_isSealed_0() === true) {
				if(this.getConstructorIndex($ast.block(body).statements) !== -1) {
					this._scope.rename("this", "that");
					this._this.replaceCall = (() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 3) {
								if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (data, __ks_arguments_1, node) => {
							return CallSealedConstructorSubstitude.__ks_new_0(data, __ks_arguments_1, this._variable, this);
						};
						return __ks_rt;
					})();
					this._dependent = true;
				}
			}
			else {
				this._this.replaceCall = (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (data, __ks_arguments_1, node) => {
						return CallThisConstructorSubstitude.__ks_new_0(data, __ks_arguments_1, this._variable, this);
					};
					return __ks_rt;
				})();
			}
			this._parameters = [];
			for(let __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = Parameter.__ks_new_0(parameter, this));
				parameter.__ks_func_analyse_0();
			}
			this._block = ConstructorBlock.__ks_new_0($ast.block(body), this, this._scope);
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._scope.line(this._data.start.line);
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_prepare_0();
			}
			this._type = new ClassConstructorType(KSHelper.mapArray(this._parameters, function(parameter) {
				return parameter.__ks_func_type_30();
			}), this._data, this);
			this._type.__ks_func_flagAltering_0();
			if(this._class.__ks_func_isSealed_0() === true) {
				this._type.__ks_func_flagSealed_0();
			}
			if(this._dependent) {
				this._type.__ks_func_flagDependent_0();
			}
			if(this._overwrite) {
				if(!(this._class.__ks_func_isSealed_0() === true)) {
					SyntaxException.__ks_sttc_throwNotSealedOverwrite_0(this);
				}
				const methods = this._class.__ks_func_listMatchingConstructors_0(this._type, MatchingMode(MatchingMode.SimilarParameter | MatchingMode.ShiftableParameters));
				if(methods.length === 0) {
					SyntaxException.__ks_sttc_throwNoSuitableOverwrite_0(this._classRef, "constructor", this._type, this);
				}
				this._class.overwriteConstructor(this._type, methods);
				this._internalName = KSHelper.concatString("__ks_cons_", this._type.__ks_func_index_0());
				const variable = this._scope.__ks_func_define_0("precursor", true, this._classRef, void 0, this);
				variable.replaceCall = (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (data, __ks_arguments_1, node) => {
						return CallOverwrittenConstructorSubstitude.__ks_new_0(data, __ks_arguments_1, this._variable, this);
					};
					return __ks_rt;
				})();
			}
			else {
				if(this._class.__ks_func_hasMatchingConstructor_0(this._type, MatchingMode.ExactParameter) === true) {
					SyntaxException.__ks_sttc_throwDuplicateConstructor_0(this);
				}
				else {
					this._internalName = KSHelper.concatString("__ks_cons_", this._class.__ks_func_addConstructor_0(this._type));
				}
			}
			let index = 1;
			if(this._block.__ks_func_isEmpty_0() === true) {
				if(this._class.__ks_func_isExtending_0() === true) {
					this.__ks_func_addCallToParentConstructor_1();
					index = 0;
				}
			}
			else if((this._class.__ks_func_isExtending_0() === true) && ((index = this.getConstructorIndex(this._block.__ks_func_statements_0())) === -1)) {
				SyntaxException.__ks_sttc_throwNoSuperCall_0(this);
			}
			if(this._aliases.length === 0) {
				this._block.__ks_func_analyse_0();
			}
			else {
				this._block.__ks_func_analyse_1(0, index);
				this._block.__ks_func_analyse_2(this._aliases);
				this._block.__ks_func_analyse_1(index + 1);
			}
			for(let __ks_0 = 0, __ks_1 = this._aliases.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._aliases[__ks_0];
				const name = statement.getVariableName();
				let variable = this._class.getInstanceVariable(name);
				if(KSType.isValue(variable)) {
					if(variable.isRequiringInitialization() === true) {
						this._block.initializeVariable(VariableBrief(name, statement.type(), void 0, void 0, void 0, true), statement, this);
					}
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_translate_0();
			}
			this._block.__ks_func_prepare_0();
			this._block.__ks_func_translate_0();
			this._class.__ks_func_forEachInstanceVariables_0((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (name, variable) => {
					if((variable.isRequiringInitialization() === true) && !(variable.isAlien() === true) && !(variable.isAltering() === true)) {
						this.__ks_func_checkVariableInitialization_1(name);
					}
				};
				return __ks_rt;
			})());
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addAtThisParameter() {
			return this.__ks_func_addAtThisParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_addAtThisParameter_3(statement) {
			if(!(ClassDeclaration.isAssigningAlias(this._block.__ks_func_statements_0(), statement.__ks_func_name_20(), false, false) === true)) {
				this._aliases.push(statement);
			}
		}
		__ks_func_addAtThisParameter_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, AliasStatement);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addAtThisParameter_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_addAtThisParameter_rt) {
				return super.__ks_func_addAtThisParameter_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addCallToParentConstructor() {
			return this.__ks_func_addCallToParentConstructor_rt.call(null, this, this, arguments);
		}
		__ks_func_addCallToParentConstructor_1() {
			const extendedType = this._class.__ks_func_extends_0().type();
			if(extendedType.matchArguments([]) === true) {
				if((extendedType.hasConstructors() === true) || (extendedType.isSealed() === true)) {
					this._block.__ks_func_addStatement_0((() => {
						const d = new Dictionary();
						d.kind = NodeKind.CallExpression;
						d.attributes = [];
						d.modifiers = [];
						d.scope = (() => {
							const d = new Dictionary();
							d.kind = ScopeKind.This;
							return d;
						})();
						d.callee = (() => {
							const d = new Dictionary();
							d.kind = NodeKind.Identifier;
							d.name = "super";
							d.start = this._data.start;
							d.end = this._data.start;
							return d;
						})();
						d.arguments = [];
						d.start = this._data.start;
						d.end = this._data.start;
						return d;
					})());
				}
			}
			else {
				SyntaxException.__ks_sttc_throwNoSuperCall_0(this);
			}
		}
		__ks_func_addCallToParentConstructor_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_addCallToParentConstructor_1.call(that);
			}
			if(super.__ks_func_addCallToParentConstructor_rt) {
				return super.__ks_func_addCallToParentConstructor_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addTopNode() {
			return this.__ks_func_addTopNode_rt.call(null, this, this, arguments);
		}
		__ks_func_addTopNode_6(node) {
			this._topNodes.push(node);
		}
		__ks_func_addTopNode_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addTopNode_6.call(that, args[0]);
				}
			}
			if(super.__ks_func_addTopNode_rt) {
				return super.__ks_func_addTopNode_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_authority_0() {
			return this;
		}
		checkVariableInitialization() {
			return this.__ks_func_checkVariableInitialization_rt.call(null, this, this, arguments);
		}
		__ks_func_checkVariableInitialization_1(name) {
			if(this._block.__ks_func_isInitializingInstanceVariable_3(name) === true) {
				this._type.addInitializingInstanceVariable(name);
			}
			else {
				SyntaxException.__ks_sttc_throwNotInitializedField_0(name, this);
			}
		}
		__ks_func_checkVariableInitialization_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_checkVariableInitialization_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_checkVariableInitialization_rt) {
				return super.__ks_func_checkVariableInitialization_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		class() {
			return this.__ks_func_class_rt.call(null, this, this, arguments);
		}
		__ks_func_class_2() {
			return this._variable;
		}
		__ks_func_class_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_class_2.call(that);
			}
			if(super.__ks_func_class_rt) {
				return super.__ks_func_class_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getConstructorIndex() {
			return this.__ks_func_getConstructorIndex_rt.call(null, this, this, arguments);
		}
		__ks_func_getConstructorIndex_1(body) {
			for(let index = 0, __ks_0 = body.length, statement; index < __ks_0; ++index) {
				statement = body[index];
				if(KSHelper.valueOf(statement.kind) === NodeKind.CallExpression.value) {
					if((KSHelper.valueOf(statement.callee.kind) === NodeKind.Identifier.value) && ((statement.callee.name === "this") || (statement.callee.name === "super") || (this._overwrite && (statement.callee.name === "precursor")))) {
						return index;
					}
				}
				else if(KSHelper.valueOf(statement.kind) === NodeKind.IfStatement.value) {
					if(KSType.isValue(statement.whenFalse) && (this.getConstructorIndex(statement.whenTrue.statements) !== -1) && (this.getConstructorIndex(statement.whenFalse.statements) !== -1)) {
						return index;
					}
				}
			}
			return -1;
		}
		__ks_func_getConstructorIndex_rt(that, proto, args) {
			const t0 = KSType.isArray;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getConstructorIndex_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_getConstructorIndex_rt) {
				return super.__ks_func_getConstructorIndex_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getMatchingMode() {
			return this.__ks_func_getMatchingMode_rt.call(null, this, this, arguments);
		}
		__ks_func_getMatchingMode_1() {
			if(this._overwrite) {
				return MatchingMode(MatchingMode.SimilarParameter | MatchingMode.ShiftableParameters);
			}
			else {
				return MatchingMode.ExactParameter;
			}
		}
		__ks_func_getMatchingMode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getMatchingMode_1.call(that);
			}
			if(super.__ks_func_getMatchingMode_rt) {
				return super.__ks_func_getMatchingMode_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getOverridableVarname() {
			return this.__ks_func_getOverridableVarname_rt.call(null, this, this, arguments);
		}
		__ks_func_getOverridableVarname_4() {
			return "this";
		}
		__ks_func_getOverridableVarname_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getOverridableVarname_4.call(that);
			}
			if(super.__ks_func_getOverridableVarname_rt) {
				return super.__ks_func_getOverridableVarname_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getParameterOffset() {
			return this.__ks_func_getParameterOffset_rt.call(null, this, this, arguments);
		}
		__ks_func_getParameterOffset_6() {
			return 0;
		}
		__ks_func_getParameterOffset_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getParameterOffset_6.call(that);
			}
			if(super.__ks_func_getParameterOffset_rt) {
				return super.__ks_func_getParameterOffset_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getSharedName() {
			return this.__ks_func_getSharedName_rt.call(null, this, this, arguments);
		}
		__ks_func_getSharedName_2() {
			return "__ks_cons";
		}
		__ks_func_getSharedName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getSharedName_2.call(that);
			}
			if(super.__ks_func_getSharedName_rt) {
				return super.__ks_func_getSharedName_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameter() {
			return this.__ks_func_isAssertingParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameter_6() {
			return this._options.rules.assertParameter;
		}
		__ks_func_isAssertingParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameter_6.call(that);
			}
			if(super.__ks_func_isAssertingParameter_rt) {
				return super.__ks_func_isAssertingParameter_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameterType() {
			return this.__ks_func_isAssertingParameterType_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameterType_6() {
			return (this._options.rules.assertParameter === true) && (this._options.rules.assertParameterType === true);
		}
		__ks_func_isAssertingParameterType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameterType_6.call(that);
			}
			if(super.__ks_func_isAssertingParameterType_rt) {
				return super.__ks_func_isAssertingParameterType_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isConstructor() {
			return this.__ks_func_isConstructor_rt.call(null, this, this, arguments);
		}
		__ks_func_isConstructor_1() {
			return true;
		}
		__ks_func_isConstructor_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isConstructor_1.call(that);
			}
			if(super.__ks_func_isConstructor_rt) {
				return super.__ks_func_isConstructor_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isConsumedError_0(error) {
			return this._type.__ks_func_isCatchingError_0(error);
		}
		isExtending() {
			return this.__ks_func_isExtending_rt.call(null, this, this, arguments);
		}
		__ks_func_isExtending_1() {
			return this._class.__ks_func_isExtending_0();
		}
		__ks_func_isExtending_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExtending_1.call(that);
			}
			if(super.__ks_func_isExtending_rt) {
				return super.__ks_func_isExtending_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInstance() {
			return this.__ks_func_isInstance_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstance_5() {
			return false;
		}
		__ks_func_isInstance_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstance_5.call(that);
			}
			if(super.__ks_func_isInstance_rt) {
				return super.__ks_func_isInstance_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isMethod() {
			return this.__ks_func_isMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isMethod_2() {
			return true;
		}
		__ks_func_isMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isMethod_2.call(that);
			}
			if(super.__ks_func_isMethod_rt) {
				return super.__ks_func_isMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isOverridableFunction() {
			return this.__ks_func_isOverridableFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_isOverridableFunction_6() {
			return true;
		}
		__ks_func_isOverridableFunction_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isOverridableFunction_6.call(that);
			}
			if(super.__ks_func_isOverridableFunction_rt) {
				return super.__ks_func_isOverridableFunction_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_7() {
			return "constructor";
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_7.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameters() {
			return this.__ks_func_parameters_rt.call(null, this, this, arguments);
		}
		__ks_func_parameters_6() {
			return this._parameters;
		}
		__ks_func_parameters_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameters_6.call(that);
			}
			if(super.__ks_func_parameters_rt) {
				return super.__ks_func_parameters_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toCreatorFragments() {
			return this.__ks_func_toCreatorFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toCreatorFragments_0(fragments) {
			const classname = this._variable.__ks_func_name_0();
			const name = (this._class.__ks_func_isSealed_0() === true) ? this._variable.__ks_func_getSealedName_0() : this._variable.__ks_func_name_0();
			const args = (this._type.__ks_func_max_0() === 0) ? "" : "...args";
			const line = fragments.newLine();
			const block = line.code(KSHelper.concatString(name, ".__ks_new_", this._type.__ks_func_index_0(), " = function(", args, ")")).newBlock();
			if(this._class.__ks_func_isSealed_0() === true) {
				if(this._type.__ks_func_isDependent_0() === true) {
					block.line(KSHelper.concatString("return ", name, ".__ks_cons_", this._type.__ks_func_index_0(), "(", args, ")"));
				}
				else {
					block.line(KSHelper.concatString("return ", name, ".__ks_cons_", this._type.__ks_func_index_0(), ".call(new ", classname, "(), ", args, ")"));
				}
			}
			else {
				block.line(KSHelper.concatString("const o = Object.create(", this._variable.__ks_func_name_0(), ".prototype)")).line("o.__ks_init()").line(KSHelper.concatString("o.__ks_cons_", this._type.__ks_func_index_0(), "(", args, ")")).line("return o");
			}
			block.done();
			line.done();
		}
		__ks_func_toCreatorFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toCreatorFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toCreatorFragments_rt) {
				return super.__ks_func_toCreatorFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toSharedFragments() {
			return this.__ks_func_toSharedFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toSharedFragments_2(fragments, __ks_0) {
			const classname = this._variable.__ks_func_name_0();
			const line = fragments.newLine();
			const assessment = Router.assess(this._class.__ks_func_listAccessibleConstructors_0(), "constructor", this);
			if(this._class.__ks_func_isSealed_0() === true) {
				const sealedName = this._variable.__ks_func_getSealedName_0();
				const exhaustive = this._class.__ks_func_isExhaustiveConstructor_1(this);
				const block = line.code(KSHelper.concatString(sealedName, ".new = function()")).newBlock();
				Router.toFragments((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (__ks_function_1, line) => {
						if(__ks_function_1.isSealed() === true) {
							if(__ks_function_1.isDependent() === true) {
								line.code(KSHelper.concatString(sealedName, ".__ks_cons_", __ks_function_1.index(), "("));
								return false;
							}
							else {
								line.code(KSHelper.concatString(sealedName, ".__ks_cons_", __ks_function_1.index(), ".call(new ", classname, "()"));
								return true;
							}
						}
						else {
							line.code(KSHelper.concatString("new ", classname, "("));
							return false;
						}
					};
					return __ks_rt;
				})(), "arguments", assessment, block, (exhaustive === true) ? null : Router.FooterType.NO_THROW, (exhaustive === true) ? null : (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (fragments, __ks_0) => {
						fragments.line(KSHelper.concatString("return new ", classname, "(...arguments)"));
					};
					return __ks_rt;
				})(), this);
				block.done();
			}
			else {
				const block = line.code(KSHelper.concatString(classname, ".prototype.__ks_cons_rt = function(that, args)")).newBlock();
				Router.toFragments((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (__ks_function_1, line) => {
						line.code(KSHelper.concatString(classname, ".prototype.__ks_cons_", __ks_function_1.index(), ".call(that"));
						return true;
					};
					return __ks_rt;
				})(), null, assessment, block, this);
				block.done();
			}
			line.done();
		}
		__ks_func_toSharedFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toSharedFragments_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toSharedFragments_rt) {
				return super.__ks_func_toSharedFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_23(fragments, mode) {
			this.__ks_func_toCreatorFragments_0(fragments);
			const line = fragments.newLine();
			if(this._class.__ks_func_isSealed_0() === true) {
				line.code(KSHelper.concatString(this._variable.__ks_func_getSealedName_0(), ".", this._internalName, " = function("));
			}
			else {
				line.code(KSHelper.concatString(this._variable.__ks_func_name_0(), ".prototype.", this._internalName, " = function("));
			}
			const block = Parameter.toFragments(this, line, ParameterMode.Default, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(null, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(fragments) {
					fragments.code(")");
					return fragments.newBlock();
				};
				return __ks_rt;
			})());
			for(let __ks_0 = 0, __ks_1 = this._topNodes.length, node; __ks_0 < __ks_1; ++__ks_0) {
				node = this._topNodes[__ks_0];
				node.toAuthorityFragments(block);
			}
			block.compile(this._block);
			if(this._class.__ks_func_isSealed_0() === true) {
				block.newLine().code("return ").compile(this._this).done();
			}
			block.done();
			line.done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_23.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_14() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_14.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class CallOverwrittenMethodSubstitude {
		static __ks_new_0(...args) {
			const o = Object.create(CallOverwrittenMethodSubstitude.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
			this._methods = [];
		}
		__ks_cons_0(data, __ks_arguments_1, __ks_class_1, name, methods, instance, node) {
			if(data === void 0) {
				data = null;
			}
			if(__ks_arguments_1 === void 0) {
				__ks_arguments_1 = null;
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._class = __ks_class_1;
			this._name = name;
			this._instance = instance;
			const types = [];
			for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				if(method.matchArguments(this._arguments, node) === true) {
					types.push(method.__ks_func_getReturnType_0());
					this._methods.push(method);
				}
			}
			this._type = Type.union(this._class.__ks_func_scope_0(), ...types);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, ClassType));
			const t2 = KSType.isString;
			const t3 = value => KSType.isArray(value, value => KSType.isClassInstance(value, FunctionType));
			const t4 = KSType.isBoolean;
			const t5 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 7) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3]) && t3(args[4]) && t4(args[5]) && t5(args[6])) {
					return CallOverwrittenMethodSubstitude.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
				}
			}
			throw KSHelper.badArgs();
		}
		isNullable() {
			return this.__ks_func_isNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_isNullable_0() {
			return false;
		}
		__ks_func_isNullable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNullable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isSkippable() {
			return this.__ks_func_isSkippable_rt.call(null, this, this, arguments);
		}
		__ks_func_isSkippable_0() {
			return false;
		}
		__ks_func_isSkippable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSkippable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode) {
			if((this._methods.length === 1) && (this._methods[0].__ks_func_isSealed_0() === true)) {
				fragments.code(KSHelper.concatString(this._class.__ks_func_getSealedName_0(), ".__ks_", (this._instance ? "func" : "sttc"), "_", this._name, "_", this._methods[0].__ks_func_index_0()));
				if(this._arguments.length === 0) {
					fragments.code(".apply(this");
				}
				else {
					fragments.code(".call(this, ");
					for(let index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
						argument = this._arguments[index];
						if(index !== 0) {
							fragments.code($comma);
						}
						fragments.compile(argument);
					}
				}
			}
			else {
				fragments.code("this." + this._name + "(");
				for(let index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
					argument = this._arguments[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(argument);
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			throw KSHelper.badArgs();
		}
	}
	class CallSealedConstructorSubstitude {
		static __ks_new_0(...args) {
			const o = Object.create(CallSealedConstructorSubstitude.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
		}
		__ks_cons_0(data, __ks_arguments_1, __ks_class_1, node) {
			if(data === void 0) {
				data = null;
			}
			if(__ks_arguments_1 === void 0) {
				__ks_arguments_1 = null;
			}
			if(node === void 0) {
				node = null;
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._class = __ks_class_1;
			this._node = node;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, ClassType));
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t0(args[3])) {
					return CallSealedConstructorSubstitude.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		isNullable() {
			return this.__ks_func_isNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_isNullable_0() {
			return false;
		}
		__ks_func_isNullable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNullable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isSkippable() {
			return this.__ks_func_isSkippable_rt.call(null, this, this, arguments);
		}
		__ks_func_isSkippable_0() {
			return false;
		}
		__ks_func_isSkippable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSkippable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode) {
			fragments.code(KSHelper.concatString("var that = ", this._class.__ks_func_getSealedName_0(), ".new("));
			for(let index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
			if(this._class.__ks_func_type_0().isInitializing() === true) {
				fragments.whenDone(KSHelper.vcurry($callSealedInitializer, null, fragments, this._class, this._node));
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return Type.Void;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			throw KSHelper.badArgs();
		}
	}
	class CallOverwrittenConstructorSubstitude {
		static __ks_new_0(...args) {
			const o = Object.create(CallOverwrittenConstructorSubstitude.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
		}
		__ks_cons_0(data, __ks_arguments_1, __ks_class_1, node) {
			if(data === void 0) {
				data = null;
			}
			if(__ks_arguments_1 === void 0) {
				__ks_arguments_1 = null;
			}
			if(node === void 0) {
				node = null;
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._class = __ks_class_1;
			this._node = node;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, ClassType));
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t0(args[3])) {
					return CallOverwrittenConstructorSubstitude.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		isNullable() {
			return this.__ks_func_isNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_isNullable_0() {
			return false;
		}
		__ks_func_isNullable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNullable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isSkippable() {
			return this.__ks_func_isSkippable_rt.call(null, this, this, arguments);
		}
		__ks_func_isSkippable_0() {
			return false;
		}
		__ks_func_isSkippable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSkippable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode) {
			fragments.code(KSHelper.concatString("const that = new ", this._class.__ks_func_name_0(), "("));
			for(let index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
			if((this._class.__ks_func_isSealed_0() === true) && (this._class.__ks_func_type_0().isInitializing() === true)) {
				fragments.whenDone(KSHelper.vcurry($callSealedInitializer, null, fragments, this._class, this._node));
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return Type.Void;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			throw KSHelper.badArgs();
		}
	}
	function $callSealedInitializer() {
		return $callSealedInitializer.__ks_rt(this, arguments);
	};
	$callSealedInitializer.__ks_0 = function(fragments, type, node) {
		const ctrl = fragments.newControl();
		ctrl.code(KSHelper.concatString("if(!that[", $runtime.initFlag.__ks_0(node), "])")).step();
		ctrl.line(KSHelper.concatString(type.getSealedName(), ".__ks_init(that)"));
		ctrl.done();
	};
	$callSealedInitializer.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 3) {
			if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
				return $callSealedInitializer.__ks_0.call(that, args[0], args[1], args[2]);
			}
		}
		throw KSHelper.badArgs();
	};
	class ImplementEnumFieldDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ImplementEnumFieldDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._composite = false;
			this._defaultValue = false;
		}
		__ks_cons_0(data, parent, enumName) {
			Statement.prototype.__ks_cons_rt.call(null, this, [data, parent]);
			this._enumName = enumName;
			this._enum = this._enumName.__ks_func_type_0();
			this._enumRef = this._scope.__ks_func_reference_0(this._enumName);
			this._name = data.name.name;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, EnumType));
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
					return ImplementEnumFieldDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			const value = this._data.value;
			let __ks_0 = this._enum.__ks_func_kind_0().valueOf();
			if(__ks_0 === EnumTypeKind.Flags.value) {
				if(KSType.isValue(value)) {
					if((KSHelper.valueOf(value.kind) === NodeKind.BinaryExpression.value) && ((KSHelper.valueOf(value.operator.kind) === BinaryOperatorKind.BitwiseOr.value) || (KSHelper.valueOf(value.operator.kind) === BinaryOperatorKind.Addition.value))) {
						this._composite = true;
						this._operands = [value.left, value.right];
					}
					else if((KSHelper.valueOf(value.kind) === NodeKind.PolyadicExpression.value) && ((KSHelper.valueOf(value.operator.kind) === BinaryOperatorKind.BitwiseOr.value) || (KSHelper.valueOf(value.operator.kind) === BinaryOperatorKind.Addition.value))) {
						this._composite = true;
						this._operands = value.operands;
					}
					else {
						if(KSHelper.valueOf(value.kind) === NodeKind.NumericExpression.value) {
							if(KSOperator.gt(value.value, 53)) {
								SyntaxException.throwEnumOverflow(this._enumName.__ks_func_name_0(), this);
							}
							let tmp = this._enum.index(value.value);
						}
						else {
							SyntaxException.__ks_sttc_throwInvalidEnumValue_0(value, this);
						}
						this._value = KSHelper.toString(KSOperator.lte(this._enum.__ks_func_index_2(), 0) ? 0 : Math.pow(2, KSOperator.subtraction(this._enum.__ks_func_index_2(), 1)));
					}
				}
				else {
					if(KSOperator.gt(this._enum.__ks_func_step_0(), 53)) {
						SyntaxException.throwEnumOverflow(this._enumName.__ks_func_name_0(), this);
					}
					this._value = KSHelper.toString(KSOperator.lte(this._enum.__ks_func_index_2(), 0) ? 0 : Math.pow(2, KSOperator.subtraction(this._enum.__ks_func_index_2(), 1)));
				}
			}
			else if(__ks_0 === EnumTypeKind.String.value) {
				if(KSType.isValue(value)) {
					if(KSHelper.valueOf(value.kind) === NodeKind.Literal.value) {
						this._value = $quote(value.value);
					}
					else {
						throw new NotSupportedException(this);
					}
				}
				else {
					this._value = $quote(this._name.toLowerCase());
				}
			}
			else if(__ks_0 === EnumTypeKind.Number.value) {
				if(KSType.isValue(value)) {
					if(KSHelper.valueOf(value.kind) === NodeKind.NumericExpression.value) {
						this._value = KSHelper.toString(this._enum.index(value.value));
					}
					else {
						throw new NotSupportedException(this);
					}
				}
				else {
					this._value = KSHelper.toString(this._enum.__ks_func_step_0());
				}
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._variable = this._enum.__ks_func_addVariable_0(this._name);
			this._variable.__ks_func_flagAlteration_0();
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getSharedName() {
			return this.__ks_func_getSharedName_rt.call(null, this, this, arguments);
		}
		__ks_func_getSharedName_3() {
			return null;
		}
		__ks_func_getSharedName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getSharedName_3.call(that);
			}
			if(super.__ks_func_getSharedName_rt) {
				return super.__ks_func_getSharedName_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isMethod() {
			return this.__ks_func_isMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isMethod_3() {
			return false;
		}
		__ks_func_isMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isMethod_3.call(that);
			}
			if(super.__ks_func_isMethod_rt) {
				return super.__ks_func_isMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toFragments_1(fragments, mode) {
			const name = this._enumName.__ks_func_name_0();
			const line = fragments.newLine().code(name, ".", this._name, " = ", name, "(");
			if(this._composite) {
				for(let i = 0, __ks_0 = this._operands.length, operand; i < __ks_0; ++i) {
					operand = this._operands[i];
					if(i > 0) {
						line.code(" | ");
					}
					line.code(name, ".", operand.name);
				}
			}
			else {
				line.code(this._value);
			}
			line.code(")").done();
		}
	}
	class ImplementEnumMethodDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ImplementEnumMethodDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._autoTyping = false;
			this._indigentValues = [];
			this._instance = true;
			this._override = false;
			this._topNodes = [];
		}
		__ks_cons_0(data, parent, enumName) {
			Statement.prototype.__ks_cons_rt.call(null, this, [data, parent, parent.scope(), ScopeType.Function]);
			this._enumName = enumName;
			this._enum = this._enumName.__ks_func_type_0();
			this._enumRef = this._scope.__ks_func_reference_0(this._enumName);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, EnumType));
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
					return ImplementEnumMethodDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._scope.line(this._data.start.line);
			this._name = this._data.name.name;
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Override.value) {
					this._override = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Overwrite.value) {
					NotSupportedException.__ks_sttc_throw_1([this]);
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Static.value) {
					this._instance = false;
				}
			}
			this._parameters = [];
			for(let __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = Parameter.__ks_new_0(parameter, this));
				parameter.__ks_func_analyse_0();
			}
			this._block = $compile.function($ast.body.__ks_0(this._data), this);
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._scope.line(this._data.start.line);
			if(this._instance) {
				this._scope.__ks_func_define_0("this", true, this._enumRef, true, this);
				this._scope.rename("this", "that");
			}
			for(let __ks_0 = 0, __ks_1 = this._enum.__ks_func_listVariables_0(), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
				name = __ks_1[__ks_0];
				const variable = this._scope.define(name, true, this._enumRef, true, this._parent);
				variable.renameAs(KSHelper.concatString(this._enumName.__ks_func_name_0(), ".", name));
			}
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_prepare_0();
			}
			this._type = new EnumMethodType(KSHelper.mapArray(this._parameters, function(parameter) {
				return parameter.__ks_func_type_30();
			}), this._data, this);
			this._type.__ks_func_flagAlteration_0();
			if(this._instance) {
				let mode = MatchingMode(MatchingMode.FunctionSignature | MatchingMode.IgnoreReturn | MatchingMode.MissingError);
				if(this._override) {
					let method = this._enum.__ks_func_getInstantiableMethod_0(this._name, this._type, mode);
					if(KSType.isValue(method)) {
						this._type = method.clone().flagAlteration();
						const parameters = this._type.__ks_func_parameters_0();
						for(let index = 0, __ks_0 = this._parameters.length, parameter; index < __ks_0; ++index) {
							parameter = this._parameters[index];
							parameter.__ks_func_type_31(parameters[index]);
						}
					}
					else if(this.__ks_func_isAssertingOverride_2() === true) {
						SyntaxException.__ks_sttc_throwNoOverridableMethod_0(this._enumName, this._name, this._parameters, this);
					}
					else {
						this._override = false;
						this._enum.__ks_func_addInstanceMethod_1(this._name, this._type);
					}
				}
				else {
					mode = MatchingMode(mode & ~MatchingMode.MissingParameterType & ~MatchingMode.MissingParameterArity);
					if(this._enum.__ks_func_hasMatchingInstanceMethod_1(this._name, this._type, MatchingMode.ExactParameter) === true) {
						SyntaxException.__ks_sttc_throwDuplicateMethod_0(this._name, this);
					}
					else {
						this._enum.__ks_func_addInstanceMethod_1(this._name, this._type);
					}
				}
			}
			else {
				if(this._override) {
					NotSupportedException.__ks_sttc_throw_1([this]);
				}
				else {
					if(this._enum.__ks_func_hasMatchingStaticMethod_0(this._name, this._type, MatchingMode.ExactParameter) === true) {
						SyntaxException.__ks_sttc_throwDuplicateMethod_0(this._name, this);
					}
					else {
						this._enum.__ks_func_addStaticMethod_0(this._name, this._type);
					}
				}
			}
			this._block.__ks_func_analyse_0();
			if(KSType.isValue(this._data.type) ? KSHelper.valueOf(this._data.type.kind) === NodeKind.ReturnTypeReference.value : false) {
				let __ks_0 = this._data.type.value.kind.valueOf();
				if(__ks_0 === NodeKind.Identifier.value) {
					if(this._data.type.value.name === "auto") {
						this._type.setReturnType(this._block.__ks_func_getUnpreparedType_2());
						this._autoTyping = true;
					}
					else {
						NotSupportedException.__ks_sttc_throw_1([this]);
					}
				}
				else if(__ks_0 === NodeKind.ThisExpression.value) {
					NotSupportedException.__ks_sttc_throw_1([this]);
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_translate_0();
			}
			for(let __ks_0 = 0, __ks_1 = this._indigentValues.length, indigent; __ks_0 < __ks_1; ++__ks_0) {
				indigent = this._indigentValues[__ks_0];
				indigent.value.prepare();
				indigent.value.translate();
			}
			if(this._autoTyping) {
				this._block.__ks_func_prepare_0();
				this._type.setReturnType(this._block.__ks_func_type_39());
			}
			else {
				this._block.__ks_func_type_40(this._type.__ks_func_getReturnType_0()).prepare();
			}
			this._block.__ks_func_translate_0();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addIndigentValue() {
			return this.__ks_func_addIndigentValue_rt.call(null, this, this, arguments);
		}
		__ks_func_addIndigentValue_4(value, parameters) {
			const name = KSHelper.concatString("__ks_default_", this._enum.__ks_func_incDefaultSequence_1());
			this._indigentValues.push((() => {
				const d = new Dictionary();
				d.name = name;
				d.value = value;
				d.parameters = parameters;
				return d;
			})());
			return name;
		}
		__ks_func_addIndigentValue_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Expression);
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_addIndigentValue_4.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addIndigentValue_rt) {
				return super.__ks_func_addIndigentValue_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addTopNode() {
			return this.__ks_func_addTopNode_rt.call(null, this, this, arguments);
		}
		__ks_func_addTopNode_7(node) {
			this._topNodes.push(node);
		}
		__ks_func_addTopNode_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addTopNode_7.call(that, args[0]);
				}
			}
			if(super.__ks_func_addTopNode_rt) {
				return super.__ks_func_addTopNode_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_authority_0() {
			return this;
		}
		getMatchingMode() {
			return this.__ks_func_getMatchingMode_rt.call(null, this, this, arguments);
		}
		__ks_func_getMatchingMode_2() {
			if(this._override) {
				return MatchingMode.ShiftableParameters;
			}
			else {
				return MatchingMode.ExactParameter;
			}
		}
		__ks_func_getMatchingMode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getMatchingMode_2.call(that);
			}
			if(super.__ks_func_getMatchingMode_rt) {
				return super.__ks_func_getMatchingMode_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getOverridableVarname() {
			return this.__ks_func_getOverridableVarname_rt.call(null, this, this, arguments);
		}
		__ks_func_getOverridableVarname_5() {
			return this._enumName.__ks_func_name_0();
		}
		__ks_func_getOverridableVarname_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getOverridableVarname_5.call(that);
			}
			if(super.__ks_func_getOverridableVarname_rt) {
				return super.__ks_func_getOverridableVarname_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getParameterOffset() {
			return this.__ks_func_getParameterOffset_rt.call(null, this, this, arguments);
		}
		__ks_func_getParameterOffset_7() {
			return this._instance ? 1 : 0;
		}
		__ks_func_getParameterOffset_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getParameterOffset_7.call(that);
			}
			if(super.__ks_func_getParameterOffset_rt) {
				return super.__ks_func_getParameterOffset_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getSharedName() {
			return this.__ks_func_getSharedName_rt.call(null, this, this, arguments);
		}
		__ks_func_getSharedName_4() {
			return this._override ? null : this._instance ? "__ks_func_" + this._name : this._name;
		}
		__ks_func_getSharedName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getSharedName_4.call(that);
			}
			if(super.__ks_func_getSharedName_rt) {
				return super.__ks_func_getSharedName_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingOverride() {
			return this.__ks_func_isAssertingOverride_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingOverride_2() {
			return this._options.rules.assertOverride;
		}
		__ks_func_isAssertingOverride_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingOverride_2.call(that);
			}
			if(super.__ks_func_isAssertingOverride_rt) {
				return super.__ks_func_isAssertingOverride_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameter() {
			return this.__ks_func_isAssertingParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameter_7() {
			return this._options.rules.assertParameter;
		}
		__ks_func_isAssertingParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameter_7.call(that);
			}
			if(super.__ks_func_isAssertingParameter_rt) {
				return super.__ks_func_isAssertingParameter_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameterType() {
			return this.__ks_func_isAssertingParameterType_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameterType_7() {
			return (this._options.rules.assertParameter === true) && (this._options.rules.assertParameterType === true);
		}
		__ks_func_isAssertingParameterType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameterType_7.call(that);
			}
			if(super.__ks_func_isAssertingParameterType_rt) {
				return super.__ks_func_isAssertingParameterType_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInstance() {
			return this.__ks_func_isInstance_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstance_6() {
			return this._instance;
		}
		__ks_func_isInstance_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstance_6.call(that);
			}
			if(super.__ks_func_isInstance_rt) {
				return super.__ks_func_isInstance_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInstanceMethod() {
			return this.__ks_func_isInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstanceMethod_5() {
			return this._instance;
		}
		__ks_func_isInstanceMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstanceMethod_5.call(that);
			}
			if(super.__ks_func_isInstanceMethod_rt) {
				return super.__ks_func_isInstanceMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isMethod() {
			return this.__ks_func_isMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isMethod_4() {
			return true;
		}
		__ks_func_isMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isMethod_4.call(that);
			}
			if(super.__ks_func_isMethod_rt) {
				return super.__ks_func_isMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isOverridableFunction() {
			return this.__ks_func_isOverridableFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_isOverridableFunction_7() {
			return true;
		}
		__ks_func_isOverridableFunction_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isOverridableFunction_7.call(that);
			}
			if(super.__ks_func_isOverridableFunction_rt) {
				return super.__ks_func_isOverridableFunction_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_8() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_8.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameters() {
			return this.__ks_func_parameters_rt.call(null, this, this, arguments);
		}
		__ks_func_parameters_7() {
			return this._parameters;
		}
		__ks_func_parameters_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameters_7.call(that);
			}
			if(super.__ks_func_parameters_rt) {
				return super.__ks_func_parameters_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toIndigentFragments() {
			return this.__ks_func_toIndigentFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toIndigentFragments_4(fragments) {
			for(let __ks_0 = 0, __ks_1 = this._indigentValues.length, name, value, parameters; __ks_0 < __ks_1; ++__ks_0) {
				({name, value, parameters} = this._indigentValues[__ks_0]);
				const line = fragments.newLine();
				const ctrl = line.newControl(null, false, false);
				ctrl.code(KSHelper.concatString(this._enumName.__ks_func_name_0(), ".", name, " = function(", parameters.join(", "), ")")).step();
				ctrl.newLine().code("return ").compile(value).done();
				ctrl.done();
				line.done();
			}
		}
		__ks_func_toIndigentFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toIndigentFragments_4.call(that, args[0]);
				}
			}
			if(super.__ks_func_toIndigentFragments_rt) {
				return super.__ks_func_toIndigentFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toSharedFragments() {
			return this.__ks_func_toSharedFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toSharedFragments_3(fragments, __ks_0) {
			const name = this._enumName.__ks_func_name_0();
			if(this._instance) {
				const assessment = this._enum.__ks_func_getInstanceAssessment_0(this._name, this);
				const line = fragments.newLine();
				const ctrl = line.newControl(null, false, false);
				ctrl.code(KSHelper.concatString(name, ".__ks_func_", this._name, " = function(that, ...args)")).step();
				Router.toFragments((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (__ks_function_1, line) => {
						line.code(KSHelper.concatString(name, ".__ks_func_", this._name, "_", __ks_function_1.index(), "(that"));
						return true;
					};
					return __ks_rt;
				})(), "args", assessment, ctrl.block(), this);
				ctrl.done();
				line.done();
			}
			else {
				const assessment = this._enum.__ks_func_getStaticAssessment_0(this._name, this);
				const line = fragments.newLine();
				const ctrl = line.newControl(null, false, false);
				ctrl.code(KSHelper.concatString(name, ".", this._name, " = function()")).step();
				Router.toFragments((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (__ks_function_1, line) => {
						line.code(KSHelper.concatString(name, ".__ks_sttc_", this._name, "_", __ks_function_1.index(), "("));
						return false;
					};
					return __ks_rt;
				})(), "arguments", assessment, ctrl.block(), this);
				ctrl.done();
				line.done();
			}
		}
		__ks_func_toSharedFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toSharedFragments_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toSharedFragments_rt) {
				return super.__ks_func_toSharedFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_24(fragments, mode) {
			const line = fragments.newLine();
			if(this._instance) {
				line.code(KSHelper.concatString(this._enumName.__ks_func_name_0(), ".__ks_func_", this._name, "_", this._type.__ks_func_index_0(), " = function(that"));
			}
			else {
				line.code(KSHelper.concatString(this._enumName.__ks_func_name_0(), ".__ks_sttc_", this._name, "_", this._type.__ks_func_index_0(), " = function("));
			}
			const block = Parameter.toFragments(this, line, ParameterMode.Default, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(null, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(fragments) {
					fragments.code(")");
					return fragments.newBlock();
				};
				return __ks_rt;
			})());
			for(let __ks_0 = 0, __ks_1 = this._topNodes.length, node; __ks_0 < __ks_1; ++__ks_0) {
				node = this._topNodes[__ks_0];
				node.toAuthorityFragments(block);
			}
			block.compile(this._block);
			block.done();
			line.done();
			this.__ks_func_toIndigentFragments_4(fragments);
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_24.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_15() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_15.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ImplementNamespaceVariableDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ImplementNamespaceVariableDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, parent, variable) {
			Statement.prototype.__ks_cons_rt.call(null, this, [data, parent]);
			this._variable = variable;
			this._namespace = this._variable.__ks_func_type_0();
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, NamespaceType));
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
					return ImplementNamespaceVariableDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._value = $compile.expression(this._data.value, this);
			this._value.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._value.prepare();
			const property = NamespacePropertyType.fromAST(this._data.type, this);
			property.flagAltering();
			if(this._namespace.__ks_func_isSealed_0() === true) {
				property.flagSealed();
			}
			this._namespace.addProperty(this._data.name.name, property);
			this._type = property.type();
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._value.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getSharedName() {
			return this.__ks_func_getSharedName_rt.call(null, this, this, arguments);
		}
		__ks_func_getSharedName_5() {
			return null;
		}
		__ks_func_getSharedName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getSharedName_5.call(that);
			}
			if(super.__ks_func_getSharedName_rt) {
				return super.__ks_func_getSharedName_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isMethod() {
			return this.__ks_func_isMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isMethod_5() {
			return false;
		}
		__ks_func_isMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isMethod_5.call(that);
			}
			if(super.__ks_func_isMethod_rt) {
				return super.__ks_func_isMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toFragments_1(fragments, mode) {
			if(this._namespace.__ks_func_isSealed_0() === true) {
				fragments.newLine().code(this._variable.__ks_func_getSealedName_0(), ".", this._data.name.name, " = ").compile(this._value).done();
			}
			else {
				fragments.newLine().code(this._variable.__ks_func_name_0(), ".", this._data.name.name, " = ").compile(this._value).done();
			}
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_16() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_16.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ImplementNamespaceFunctionDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ImplementNamespaceFunctionDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._autoTyping = false;
			this._awaiting = false;
			this._exit = false;
			this._main = false;
			this._parameters = [];
			this._returnNull = false;
			this._topNodes = [];
		}
		__ks_cons_0(data, parent, variable) {
			Statement.prototype.__ks_cons_rt.call(null, this, [data, parent, parent.scope(), ScopeType.Block]);
			this._variable = variable;
			this._namespace = this._variable.__ks_func_type_0();
			this._namespaceRef = this._scope.__ks_func_reference_0(this._variable);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, NamespaceType));
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
					return ImplementNamespaceFunctionDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._name = this._data.name.name;
			for(let __ks_0 = 0, __ks_1 = this._data.parameters.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.parameters[__ks_0];
				const parameter = Parameter.__ks_new_0(data, this);
				parameter.__ks_func_analyse_0();
				this._parameters.push(parameter);
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.prepare();
			}
			const property = NamespacePropertyType.fromAST(this._data, this);
			property.flagAltering();
			if(this._namespace.__ks_func_isSealed_0() === true) {
				property.flagSealed();
			}
			this._type = property.type();
			this._returnNull = KSType.isValue(this._data.body) && ((KSHelper.valueOf(this._data.body.kind) === NodeKind.IfStatement.value) || (KSHelper.valueOf(this._data.body.kind) === NodeKind.UnlessStatement.value));
			this._main = !this._namespace.__ks_func_hasProperty_0(this._name);
			if(this._namespace.__ks_func_hasMatchingFunction_0(this._name, this._type, MatchingMode.ExactParameter) === true) {
				SyntaxException.throwDuplicateFunction(this._name, this);
			}
			else {
				this._internalName = KSHelper.concatString("__ks_", this._namespace.__ks_func_addFunction_3(this._name, this._type));
			}
			this._block = $compile.function($ast.body.__ks_0(this._data), this);
			this._block.__ks_func_analyse_0();
			this._autoTyping = KSType.isValue(this._data.type) ? KSHelper.valueOf(this._data.type.kind) === NodeKind.ReturnTypeReference.value : false;
			if(this._autoTyping) {
				this._type.setReturnType(this._block.__ks_func_getUnpreparedType_2());
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.translate();
			}
			if(this._autoTyping) {
				this._block.__ks_func_prepare_0();
				this._type.setReturnType(this._block.__ks_func_type_39());
			}
			else {
				this._block.__ks_func_type_40(this._type.__ks_func_getReturnType_0()).prepare();
			}
			this._block.__ks_func_translate_0();
			this._awaiting = this._block.__ks_func_isAwait_3();
			this._exit = this._block.__ks_func_isExit_3();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addTopNode() {
			return this.__ks_func_addTopNode_rt.call(null, this, this, arguments);
		}
		__ks_func_addTopNode_8(node) {
			this._topNodes.push(node);
		}
		__ks_func_addTopNode_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addTopNode_8.call(that, args[0]);
				}
			}
			if(super.__ks_func_addTopNode_rt) {
				return super.__ks_func_addTopNode_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_authority_0() {
			return this;
		}
		getMatchingMode() {
			return this.__ks_func_getMatchingMode_rt.call(null, this, this, arguments);
		}
		__ks_func_getMatchingMode_3() {
			return MatchingMode.ExactParameter;
		}
		__ks_func_getMatchingMode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getMatchingMode_3.call(that);
			}
			if(super.__ks_func_getMatchingMode_rt) {
				return super.__ks_func_getMatchingMode_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getParameterOffset() {
			return this.__ks_func_getParameterOffset_rt.call(null, this, this, arguments);
		}
		__ks_func_getParameterOffset_8() {
			return 0;
		}
		__ks_func_getParameterOffset_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getParameterOffset_8.call(that);
			}
			if(super.__ks_func_getParameterOffset_rt) {
				return super.__ks_func_getParameterOffset_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getSharedName() {
			return this.__ks_func_getSharedName_rt.call(null, this, this, arguments);
		}
		__ks_func_getSharedName_6() {
			return null;
		}
		__ks_func_getSharedName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getSharedName_6.call(that);
			}
			if(super.__ks_func_getSharedName_rt) {
				return super.__ks_func_getSharedName_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameter() {
			return this.__ks_func_isAssertingParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameter_8() {
			return this._options.rules.assertParameter;
		}
		__ks_func_isAssertingParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameter_8.call(that);
			}
			if(super.__ks_func_isAssertingParameter_rt) {
				return super.__ks_func_isAssertingParameter_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameterType() {
			return this.__ks_func_isAssertingParameterType_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameterType_8() {
			return (this._options.rules.assertParameter === true) && (this._options.rules.assertParameterType === true);
		}
		__ks_func_isAssertingParameterType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameterType_8.call(that);
			}
			if(super.__ks_func_isAssertingParameterType_rt) {
				return super.__ks_func_isAssertingParameterType_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isConsumedError_0(error) {
			return this._type.__ks_func_isCatchingError_0(error);
		}
		isInstance() {
			return this.__ks_func_isInstance_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstance_7() {
			return false;
		}
		__ks_func_isInstance_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstance_7.call(that);
			}
			if(super.__ks_func_isInstance_rt) {
				return super.__ks_func_isInstance_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInstanceMethod() {
			return this.__ks_func_isInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstanceMethod_6() {
			return false;
		}
		__ks_func_isInstanceMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstanceMethod_6.call(that);
			}
			if(super.__ks_func_isInstanceMethod_rt) {
				return super.__ks_func_isInstanceMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isMethod() {
			return this.__ks_func_isMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isMethod_6() {
			return true;
		}
		__ks_func_isMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isMethod_6.call(that);
			}
			if(super.__ks_func_isMethod_rt) {
				return super.__ks_func_isMethod_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isOverridableFunction() {
			return this.__ks_func_isOverridableFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_isOverridableFunction_8() {
			return false;
		}
		__ks_func_isOverridableFunction_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isOverridableFunction_8.call(that);
			}
			if(super.__ks_func_isOverridableFunction_rt) {
				return super.__ks_func_isOverridableFunction_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_9() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_9.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameters() {
			return this.__ks_func_parameters_rt.call(null, this, this, arguments);
		}
		__ks_func_parameters_8() {
			return this._parameters;
		}
		__ks_func_parameters_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameters_8.call(that);
			}
			if(super.__ks_func_parameters_rt) {
				return super.__ks_func_parameters_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toFragments_1(fragments, mode) {
			this.__ks_func_toMainFragments_1(fragments);
			this.__ks_func_toStatementFragments_25(fragments, mode);
			this.__ks_func_toRouterFragments_1(fragments);
		}
		toMainFragments() {
			return this.__ks_func_toMainFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toMainFragments_1(fragments) {
			const __ks_namespace_1 = (this._namespace.__ks_func_isSealed_0() === true) ? this._variable.__ks_func_getSealedName_0() : this._variable.__ks_func_name_0();
			const line = fragments.newLine();
			const block = line.code(KSHelper.concatString(__ks_namespace_1, ".", this._name, " = function()")).newBlock();
			block.line(KSHelper.concatString("return ", __ks_namespace_1, ".", this._name, ".__ks_rt(this, arguments)"));
			block.done();
			line.done();
		}
		__ks_func_toMainFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toMainFragments_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_toMainFragments_rt) {
				return super.__ks_func_toMainFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toRouterFragments() {
			return this.__ks_func_toRouterFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toRouterFragments_1(fragments) {
			const __ks_namespace_1 = (this._namespace.__ks_func_isSealed_0() === true) ? this._variable.__ks_func_getSealedName_0() : this._variable.__ks_func_name_0();
			const assessment = this.__ks_func_type_17().assessment(this._name, this);
			const line = fragments.newLine();
			const block = line.code(KSHelper.concatString(__ks_namespace_1, ".", this._name, ".__ks_rt = function(that, args)")).newBlock();
			Router.toFragments((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (__ks_function_1, line) => {
					line.code(KSHelper.concatString(__ks_namespace_1, ".", this._name, ".__ks_", __ks_function_1.index(), ".call(that"));
					return true;
				};
				return __ks_rt;
			})(), null, assessment, block, this);
			block.done();
			line.done();
		}
		__ks_func_toRouterFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toRouterFragments_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_toRouterFragments_rt) {
				return super.__ks_func_toRouterFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_25(fragments, mode) {
			const __ks_namespace_1 = (this._namespace.__ks_func_isSealed_0() === true) ? this._variable.__ks_func_getSealedName_0() : this._variable.__ks_func_name_0();
			const line = fragments.newLine();
			line.code(KSHelper.concatString(__ks_namespace_1, ".", this._name, ".", this._internalName, " = function("));
			const block = Parameter.toFragments(this, line, ParameterMode.Default, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(null, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(fragments) {
					return fragments.code(")").newBlock();
				};
				return __ks_rt;
			})());
			block.compile(this._block, Mode.None);
			if(!this._exit) {
				if(!this._awaiting && this._type.__ks_func_isAsync_0()) {
					block.line("__ks_cb()");
				}
				else if(this._returnNull) {
					block.line("return null");
				}
			}
			block.done();
			line.done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_25.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_17() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_17.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	const $importExts = (() => {
		const d = new Dictionary();
		d.data = (() => {
			const d = new Dictionary();
			d.json = true;
			return d;
		})();
		d.source = (() => {
			const d = new Dictionary();
			d.coffee = true;
			d.js = true;
			d.ks = true;
			d.ts = true;
			return d;
		})();
		return d;
	})();
	const $nodeModules = (() => {
		const d = new Dictionary();
		d.assert = true;
		d.buffer = true;
		d.child_process = true;
		d.cluster = true;
		d.constants = true;
		d.crypto = true;
		d.dgram = true;
		d.dns = true;
		d.domain = true;
		d.events = true;
		d.fs = true;
		d.http = true;
		d.https = true;
		d.module = true;
		d.net = true;
		d.os = true;
		d.path = true;
		d.punycode = true;
		d.querystring = true;
		d.readline = true;
		d.repl = true;
		d.stream = true;
		d.string_decoder = true;
		d.tls = true;
		d.tty = true;
		d.url = true;
		d.util = true;
		d.v8 = true;
		d.vm = true;
		d.zlib = true;
		return d;
	})();
	function $nodeModulesPaths() {
		return $nodeModulesPaths.__ks_rt(this, arguments);
	};
	$nodeModulesPaths.__ks_0 = function(start) {
		start = fs.resolve(start);
		let prefix = "/";
		if(/^([A-Za-z]:)/.test(start) === true) {
			prefix = "";
		}
		else if(/^\\\\/.test(start) === true) {
			prefix = "\\\\";
		}
		let splitRe = (process.platform === "win32") ? /[\/\\]/ : /\/+/;
		let parts = start.split(splitRe);
		let dirs = [];
		for(let i = KSOperator.subtraction(parts.length, 1); i >= 0; --i) {
			if(parts[i] === "node_modules") {
				continue;
			}
			dirs.push(KSHelper.concatString(prefix, path.join(path.join.apply(path, [].concat(parts.slice(0, i + 1))), "node_modules")));
		}
		if(process.platform === "win32") {
			dirs[dirs.length - 1] = dirs[dirs.length - 1].replace(":", ":\\");
		}
		return dirs;
	};
	$nodeModulesPaths.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 1) {
			if(t0(args[0])) {
				return $nodeModulesPaths.__ks_0.call(that, args[0]);
			}
		}
		throw KSHelper.badArgs();
	};
	const ImportedVariable = KSHelper.struct(function(name, __ks_sealed_1, systemic) {
		if(__ks_sealed_1 === void 0 || __ks_sealed_1 === null) {
			__ks_sealed_1 = false;
		}
		if(systemic === void 0 || systemic === null) {
			systemic = false;
		}
		const _ = new Dictionary();
		_.name = name;
		_.sealed = __ks_sealed_1;
		_.systemic = systemic;
		return _;
	}, function(__ks_new, args) {
		const t0 = KSType.isString;
		const t1 = value => KSType.isBoolean(value) || KSType.isNull(value);
		const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
		let pts;
		if(args.length >= 1 && args.length <= 3) {
			if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t1, pts, 1) && te(pts, 2)) {
				return __ks_new(args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
			}
		}
		throw KSHelper.badArgs();
	});
	const Arguments = KSHelper.struct(function(values, fromLocal, toImport) {
		if(values === void 0 || values === null) {
			values = [];
		}
		if(fromLocal === void 0 || fromLocal === null) {
			fromLocal = new Dictionary();
		}
		if(toImport === void 0 || toImport === null) {
			toImport = new Dictionary();
		}
		const _ = new Dictionary();
		_.values = values;
		_.fromLocal = fromLocal;
		_.toImport = toImport;
		return _;
	}, function(__ks_new, args) {
		const t0 = value => KSType.isArray(value) || KSType.isNull(value);
		const t1 = value => KSType.isDictionary(value) || KSType.isNull(value);
		const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
		let pts;
		if(args.length >= 1 && args.length <= 2) {
			if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0)) {
				if(KSHelper.isVarargs(args, 0, 1, t1, pts, 1) && te(pts, 2)) {
					return __ks_new(KSHelper.getVararg(args, 0, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), void 0);
				}
				throw KSHelper.badArgs();
			}
			if(KSHelper.isVarargs(args, 0, 1, t1, pts = [0], 0) && KSHelper.isVarargs(args, 0, 1, t1, pts, 1) && te(pts, 2)) {
				return __ks_new(void 0, KSHelper.getVararg(args, 0, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
			}
			throw KSHelper.badArgs();
		}
		if(args.length <= 3) {
			if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && KSHelper.isVarargs(args, 0, 1, t1, pts, 1) && KSHelper.isVarargs(args, 0, 1, t1, pts, 2) && te(pts, 3)) {
				return __ks_new(KSHelper.getVararg(args, 0, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
			}
		}
		throw KSHelper.badArgs();
	});
	const ImportMode = KSHelper.enum(Number, {
		Default: 0,
		Import: 1,
		ExternOrImport: 2,
		RequireOrImport: 3
	});
	class Importer extends Statement {
		__ks_init() {
			super.__ks_init();
			this._alias = null;
			this._arguments = Arguments.__ks_new();
			this._autofill = false;
			this._count = 0;
			this._extAddendum = "";
			this._filename = null;
			this._hasArguments = true;
			this._imports = new Dictionary();
			this._isKSFile = false;
			this._pathAddendum = "";
			this._reusable = false;
			this._variables = new Dictionary();
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			let x = this._data.source.value;
			let y = this.__ks_func_directory_0();
			let metadata = null;
			if(/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[\\\/])/.test(x) === true) {
				x = fs.resolve(y, x);
				if(!((this.loadFile(x, "", null) === true) || (this.loadDirectory(x, null) === true))) {
					IOException.throwNotFoundModule(x, y, this);
				}
			}
			else {
				if(!((this.loadNodeModule(x, y) === true) || (this.loadCoreModule(x) === true))) {
					IOException.throwNotFoundModule(x, y, this);
				}
			}
			const module = this.__ks_func_module_0();
			if(this._isKSFile) {
				this._worker.__ks_func_prepare_0(this._arguments);
				this._scope.line(this.__ks_func_line_0());
				for(let __ks_0 = 0, __ks_1 = this._arguments.values.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = this._arguments.values[__ks_0];
					if(argument.required === true) {
						module.addRequirement(new ImportingRequirement(argument.name, argument.type, this));
						let variable = this._scope.getVariable(argument.name);
						if(KSType.isValue(variable)) {
							variable.setDeclaredType(argument.type);
						}
						else {
							this._scope.define(argument.name, true, argument.type, true, this);
						}
					}
				}
				const matchables = [];
				const workerScope = this._worker.__ks_func_scope_0();
				for(const name in this._imports) {
					const def = this._imports[name];
					workerScope.rename(name, def.local, this._scope);
				}
				for(const name in this._imports) {
					const def = this._imports[name];
					const variable = this._scope.getVariable(def.local);
					if(def.isAlias === true) {
						const type = new NamedContainerType(def.local, NamespaceType.__ks_new_0(KSHelper.notNull(this._scope)));
						for(let i = 1, __ks_0 = this._metaExports.exports.length; i < __ks_0; i += 2) {
							const name = this._metaExports.exports[i];
							type.addProperty(name, this._worker.getType(name));
						}
						variable.__ks_func_setDeclaredType_0(type);
					}
					else {
						if(!(this._worker.__ks_func_hasType_0(name) === true)) {
							ReferenceException.throwNotDefinedInModule(name, this._data.source.value, this);
						}
						const type = this._worker.__ks_func_getType_0(name);
						if((def.type !== null) && !(type.isSubsetOf(def.type, MatchingMode.Signature) === true)) {
							TypeException.throwNotCompatibleDefinition(def.local, name, this._data.source.value, this);
						}
						if(def.newVariable === true) {
							variable.setDeclaredType(KSType.isValue(type) ? type : def.type);
						}
						else if(!(variable.__ks_func_isPredefined_0() === true) && !KSType.isNumber(this._arguments.fromLocal[def.local])) {
							ReferenceException.throwNotPassed(def.local, this._data.source.value, this);
						}
						else if(type.isSubsetOf(variable.__ks_func_getDeclaredType_0(), MatchingMode(MatchingMode.Signature | MatchingMode.Renamed)) === true) {
							const alien = variable.__ks_func_getDeclaredType_0().isAlien();
							variable.setDeclaredType(KSType.isValue(type) ? type : def.type);
							if(alien === true) {
								variable.__ks_func_getDeclaredType_0().flagAlien();
							}
						}
						else {
							TypeException.throwNotCompatibleArgument(def.local, name, this._data.source.value, this);
						}
						if(type.isNamed() === true) {
							type.name(def.local);
							type.scope().reassignReference(name, def.local, this._scope);
						}
						if(!(type.isAlias() === true)) {
							const __ks_var_1 = ImportedVariable(def.local, (type.isSealed() === true) && !(type.isSystemic() === true), type.isSystemic());
							this._variables[name] = __ks_var_1;
							if(__ks_var_1.sealed) {
								this._count += 2;
							}
							else {
								this._count += 1;
							}
							if((type.isSystemic() === true) && (def.local === "Dictionary")) {
								module.flag("Dictionary");
							}
							else {
								module.import(def.local);
							}
						}
					}
					variable.__ks_func_setComplete_0(true);
				}
				if((this._count !== 0) || (this._alias !== null)) {
					module.flagRegister();
				}
			}
			else {
				for(let __ks_0 in this._imports) {
					const __ks_import_1 = this._imports[__ks_0];
					module.import(__ks_import_1.local);
				}
			}
			if(this._count !== 0) {
				if(this._alias === null) {
					if(this._count > 1) {
						this._reuseName = this._scope.__ks_func_acquireTempName_0(false);
						this._scope.releaseTempName(this._reuseName);
					}
				}
				else {
					this._reuseName = this._alias;
				}
			}
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._arguments.values.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments.values[__ks_0];
				if(!(argument.required === true)) {
					const variable = this._scope.getVariable(argument.identifier);
					if(!(variable.__ks_func_isImmutable_0() === true) || !(variable.__ks_func_isComplete_0() === true)) {
						SyntaxException.throwOnlyStaticImport(variable.__ks_func_name_0(), this._data.source.value, this);
					}
				}
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addArgument() {
			return this.__ks_func_addArgument_rt.call(null, this, this, arguments);
		}
		__ks_func_addArgument_0(data, autofill, __ks_arguments_1) {
			const argument = (() => {
				const d = new Dictionary();
				d.index = this._isKSFile ? null : 0;
				d.isApproved = true;
				d.isAutofill = autofill;
				d.isIdentifier = false;
				d.isNamed = false;
				d.required = false;
				d.value = $compile.expression(data.value, this);
				return d;
			})();
			for(let __ks_0 = 0, __ks_1 = data.modifiers.length, modifer; __ks_0 < __ks_1; ++__ks_0) {
				modifer = data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifer.kind) === ModifierKind.Required.value) {
					argument.required = true;
					break;
				}
			}
			if(argument.required) {
				let variable, __ks_0;
				if((KSType.isValue(__ks_0 = this._scope.getVariable(data.value.name)) ? (variable = __ks_0, true) : false) && !(variable.__ks_func_getDeclaredType_0().isPredefined() === true)) {
					ReferenceException.throwDefined(data.value.name, this);
				}
				argument.isNamed = true;
				argument.name = (KSType.isValue(data.name) && KSType.isValue(data.name.name)) ? data.name.name : data.value.name;
				argument.isIdentifier = true;
				argument.identifier = data.value.name;
				__ks_arguments_1.fromLocal[data.value.name] = __ks_arguments_1.values.length;
				__ks_arguments_1.toImport[argument.name] = __ks_arguments_1.values.length;
			}
			else if(KSHelper.valueOf(data.value.kind) === NodeKind.Identifier.value) {
				argument.isNamed = true;
				argument.name = (KSType.isValue(data.name) && KSType.isValue(data.name.name)) ? data.name.name : data.value.name;
				argument.isIdentifier = true;
				argument.identifier = data.value.name;
				__ks_arguments_1.fromLocal[data.value.name] = __ks_arguments_1.values.length;
				__ks_arguments_1.toImport[argument.name] = __ks_arguments_1.values.length;
			}
			else if(KSType.isValue(data.name)) {
				argument.isNamed = true;
				argument.name = data.name.name;
				argument.identifier = data.name.name;
				__ks_arguments_1.fromLocal[argument.name] = __ks_arguments_1.values.length;
				__ks_arguments_1.toImport[argument.name] = __ks_arguments_1.values.length;
			}
			else {
				SyntaxException.throwOnlyStaticImport(this._data.source.value, this);
			}
			__ks_arguments_1.values.push(argument);
		}
		__ks_func_addArgument_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_addArgument_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_addArgument_rt) {
				return super.__ks_func_addArgument_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addImport() {
			return this.__ks_func_addImport_rt.call(null, this, this, arguments);
		}
		__ks_func_addImport_0(imported, local, isAlias, type = null) {
			let variable, __ks_0;
			const newVariable = (KSType.isValue(__ks_0 = this._scope.__ks_func_getVariable_0(local)) ? (variable = __ks_0, false) : true) || (variable.isPredefined() === true);
			if(newVariable) {
				this._scope.__ks_func_define_0(local, true, null, true, this);
			}
			else if(this._parent.includePath() !== null) {
				return;
			}
			else if(isAlias) {
				SyntaxException.__ks_sttc_throwAlreadyDeclared_0(local, this);
			}
			this._imports[imported] = (() => {
				const d = new Dictionary();
				d.local = local;
				d.isAlias = isAlias;
				d.newVariable = newVariable;
				d.type = type;
				return d;
			})();
		}
		__ks_func_addImport_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isBoolean;
			const t2 = value => KSType.isClassInstance(value, Type) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 3 && args.length <= 4) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [3], 0) && te(pts, 1)) {
					return proto.__ks_func_addImport_0.call(that, args[0], args[1], args[2], KSHelper.getVararg(args, 3, pts[1]));
				}
			}
			if(super.__ks_func_addImport_rt) {
				return super.__ks_func_addImport_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addVariable() {
			return this.__ks_func_addVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_addVariable_0(imported, local, isVariable, type) {
			if(type === void 0) {
				type = null;
			}
			let variable, __ks_0;
			if((KSType.isValue(__ks_0 = this._scope.__ks_func_getVariable_0(local)) ? (variable = __ks_0, true) : false) && !(variable.__ks_func_isPredefined_0() === true)) {
				if(this._parent.includePath() !== null) {
					return;
				}
				else if(isVariable) {
					if(!KSType.isNumber(this._arguments.fromLocal[local])) {
						ReferenceException.throwNotPassed(local, this._data.source.value, this);
					}
					else if(variable.getDeclared().isMergeable(type) === true) {
						variable.getDeclared().merge(type, this);
					}
					else {
						ReferenceException.throwNotMergeable(local, this._data.source.value, this);
					}
				}
				else {
					SyntaxException.__ks_sttc_throwAlreadyDeclared_0(local, this);
				}
			}
			else {
				this._scope.__ks_func_define_0(local, true, type, true, this);
			}
			this.__ks_func_module_0().import(local);
			if(isVariable && !KSType.isClassInstance(type, AliasType)) {
				this._variables[imported] = ImportedVariable.__ks_new(local);
				++this._count;
			}
		}
		__ks_func_addVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isBoolean;
			const t2 = value => KSType.isClassInstance(value, Type) || KSType.isNull(value);
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3])) {
					return proto.__ks_func_addVariable_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_addVariable_rt) {
				return super.__ks_func_addVariable_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		buildArguments() {
			return this.__ks_func_buildArguments_rt.call(null, this, this, arguments);
		}
		__ks_func_buildArguments_0(metadata, __ks_arguments_1) {
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				__ks_arguments_1 = this.__ks_default_2_0();
			}
			this._scope.line(KSOperator.subtraction(this.__ks_func_line_0(), 1));
			if(KSType.isValue(this._data.arguments) ? this._data.arguments.length !== 0 : false) {
				for(let __ks_0 = 0, __ks_1 = this._data.arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = this._data.arguments[__ks_0];
					this.addArgument(argument, false, __ks_arguments_1);
				}
				if(this._autofill) {
					for(let i = 0, __ks_0 = metadata.requirements.length; i < __ks_0; i += 3) {
						const name = metadata.requirements[i + 1];
						if(!KSType.isValue(__ks_arguments_1.toImport[name])) {
							if(this._scope.hasVariable(name)) {
								this.__ks_func_addArgument_0((() => {
									const d = new Dictionary();
									d.modifiers = [];
									d.value = (() => {
										const d = new Dictionary();
										d.kind = NodeKind.Identifier;
										d.name = name;
										return d;
									})();
									return d;
								})(), true, __ks_arguments_1);
							}
							else {
								this.validateRequirement(metadata.requirements[i + 2], name, metadata);
							}
						}
					}
				}
			}
			else if(this._autofill) {
				for(let i = 0, __ks_0 = metadata.requirements.length; i < __ks_0; i += 3) {
					const name = metadata.requirements[i + 1];
					if(this._scope.hasVariable(name)) {
						this.__ks_func_addArgument_0((() => {
							const d = new Dictionary();
							d.modifiers = [];
							d.value = (() => {
								const d = new Dictionary();
								d.kind = NodeKind.Identifier;
								d.name = name;
								return d;
							})();
							return d;
						})(), true, __ks_arguments_1);
					}
					else {
						this.validateRequirement(metadata.requirements[i + 2], name, metadata);
					}
				}
			}
			else {
				for(let i = 0, __ks_0 = metadata.requirements.length; i < __ks_0; i += 3) {
					this.validateRequirement(metadata.requirements[i + 2], metadata.requirements[i + 1], metadata);
				}
			}
			if(__ks_arguments_1.values.length !== 0) {
				const unmatchedArguments = KSHelper.newArrayRange(0, __ks_arguments_1.values.length, 1, true, false);
				const requirements = [];
				const queue = [];
				const reqReferences = new Dictionary();
				const alterations = new Dictionary();
				for(let i = 0, __ks_0 = metadata.aliens.length; i < __ks_0; i += 3) {
					const index = metadata.aliens[i];
					const name = metadata.aliens[i + 1];
					let type = null;
					if(!KSType.isValue(reqReferences[index])) {
						type = Type.import(index, metadata.references, reqReferences, alterations, queue, this._scope, this);
					}
					else {
						type = reqReferences[index];
					}
					reqReferences[index] = Type.toNamedType(name, type);
				}
				for(let i = 0, __ks_0 = metadata.requirements.length; i < __ks_0; i += 3) {
					const index = metadata.requirements[i];
					const name = metadata.requirements[i + 1];
					if(KSType.isNumber(__ks_arguments_1.toImport[name])) {
						const argument = __ks_arguments_1.values[__ks_arguments_1.toImport[name]];
						argument.index = i / 3;
						argument.type = Type.import(index, metadata.references, reqReferences, alterations, queue, this._scope, this);
						reqReferences[index] = Type.toNamedType(name, argument.type);
						__ks_Array.__ks_func_remove_0.call(unmatchedArguments, [__ks_arguments_1.toImport[name]]);
					}
					else {
						requirements.push(metadata.requirements.slice(i, i + 3));
					}
				}
				while(queue.length > 0) {
					queue.shift()();
				}
				const len = __ks_arguments_1.values.length;
				let nextArgument = 0;
				for(let __ks_0 = 0, __ks_1 = requirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
					requirement = requirements[__ks_0];
					while((nextArgument < len) && (__ks_arguments_1.values[nextArgument].index !== null)) {
						++nextArgument;
					}
					if(nextArgument === len) {
						if(requirement[2] === true) {
							SyntaxException.throwMissingRequirement(requirement[1], this);
						}
					}
					else {
						__ks_arguments_1.values[nextArgument].index = requirement[0];
						__ks_arguments_1.values[nextArgument].name = requirement[1];
						__ks_Array.__ks_func_remove_0.call(unmatchedArguments, [nextArgument]);
					}
				}
				if(unmatchedArguments.length !== 0) {
					SyntaxException.__ks_sttc_throwUnmatchedImportArguments_0(KSHelper.mapArray(unmatchedArguments, function(i) {
						return __ks_arguments_1.values[i].name;
					}), this);
				}
			}
			for(let index = 0, __ks_0 = [...__ks_arguments_1.values], __ks_1 = __ks_0.length, argument; index < __ks_1; ++index) {
				argument = __ks_0[index];
				if(!(argument.required === true)) {
					const variable = this._scope.getVariable(argument.identifier);
					if(variable.__ks_func_getRealType_0().isSubsetOf(argument.type, MatchingMode.Signature) === true) {
						argument.type = variable.__ks_func_getRealType_0();
					}
					else if(argument.isAutofill === true) {
						__ks_arguments_1.values.splice(index, 1);
						delete __ks_arguments_1.fromLocal[argument.identifier];
						delete __ks_arguments_1.toImport[argument.name];
					}
					else {
						TypeException.throwNotCompatibleArgument(argument.identifier, argument.name, this._data.source.value, this);
					}
				}
			}
			return __ks_arguments_1;
		}
		__ks_default_2_0() {
			return Arguments.__ks_new();
		}
		__ks_func_buildArguments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isStructInstance(value, Arguments) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_buildArguments_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_buildArguments_rt) {
				return super.__ks_func_buildArguments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getModuleName() {
			return this.__ks_func_getModuleName_rt.call(null, this, this, arguments);
		}
		__ks_func_getModuleName_0() {
			return this._moduleName;
		}
		__ks_func_getModuleName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getModuleName_0.call(that);
			}
			if(super.__ks_func_getModuleName_rt) {
				return super.__ks_func_getModuleName_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		loadCoreModule() {
			return this.__ks_func_loadCoreModule_rt.call(null, this, this, arguments);
		}
		__ks_func_loadCoreModule_0(moduleName) {
			if($nodeModules[moduleName] === true) {
				return this.__ks_func_loadNodeFile_0(null, moduleName);
			}
			return false;
		}
		__ks_func_loadCoreModule_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_loadCoreModule_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_loadCoreModule_rt) {
				return super.__ks_func_loadCoreModule_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		loadDirectory() {
			return this.__ks_func_loadDirectory_rt.call(null, this, this, arguments);
		}
		__ks_func_loadDirectory_0(dir, moduleName = null) {
			let pkgfile = path.join(dir, "package.json");
			if(fs.isFile(pkgfile) === true) {
				let pkg = null;
				try {
					pkg = JSON.parse(fs.readFile(pkgfile));
				}
				catch(__ks_0) {
				}
				if(KSType.isValue(pkg)) {
					let metadata = null;
					if(KSType.isValue(pkg.kaoscript)) {
						const metadata = KSType.isValue(pkg.kaoscript.metadata) ? path.join(dir, pkg.kaoscript.metadata) : null;
						if(KSType.isValue(pkg.kaoscript.main)) {
							if(this.loadKSFile(path.join(dir, pkg.kaoscript.main), pkg.kaoscript.main, null, moduleName, metadata) === true) {
								return true;
							}
						}
						else if(KSType.isValue(metadata)) {
							if(this.__ks_func_loadKSFile_0(null, null, null, KSType.isValue(moduleName) ? moduleName : dir, metadata) === true) {
								return true;
							}
						}
					}
					if(KSType.isString(pkg.main) && ((this.loadFile(path.join(dir, pkg.main), pkg.main, moduleName) === true) || (this.loadDirectory(path.join(dir, pkg.main), moduleName) === true))) {
						return true;
					}
				}
			}
			return this.loadFile(path.join(dir, "index"), "index", moduleName);
		}
		__ks_func_loadDirectory_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0])) {
					return proto.__ks_func_loadDirectory_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_loadDirectory_rt) {
				return super.__ks_func_loadDirectory_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		loadFile() {
			return this.__ks_func_loadFile_rt.call(null, this, this, arguments);
		}
		__ks_func_loadFile_0(filename, pathAddendum, moduleName = null) {
			if(fs.isFile(filename) === true) {
				if(filename.endsWith($extensions.source) === true) {
					return this.loadKSFile(filename, pathAddendum, null, moduleName);
				}
				else {
					return this.__ks_func_loadNodeFile_0(filename, moduleName);
				}
			}
			if(fs.isFile(filename + $extensions.source) === true) {
				return this.loadKSFile(filename + $extensions.source, pathAddendum, $extensions.source, moduleName);
			}
			else {
				for(const ext in require.extensions) {
					if(fs.isFile(filename + ext) === true) {
						return this.__ks_func_loadNodeFile_0(filename, moduleName);
					}
				}
			}
			return false;
		}
		__ks_func_loadFile_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_loadFile_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_loadFile_rt) {
				return super.__ks_func_loadFile_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		loadKSFile() {
			return this.__ks_func_loadKSFile_rt.call(null, this, this, arguments);
		}
		__ks_func_loadKSFile_0(filename, pathAddendum, extAddendum, moduleName = null, metadataPath = null) {
			if(filename === void 0) {
				filename = null;
			}
			if(pathAddendum === void 0 || pathAddendum === null) {
				pathAddendum = "";
			}
			if(extAddendum === void 0 || extAddendum === null) {
				extAddendum = "";
			}
			const module = this.__ks_func_module_0();
			if(moduleName === null) {
				moduleName = module.path(filename, this._data.source.value);
				if((moduleName.slice(KSOperator.negative($extensions.source.length)).toLowerCase() !== $extensions.source) && (path.basename(filename) === path.basename(KSHelper.concatString(moduleName, $extensions.source)))) {
					moduleName = KSHelper.concatString(moduleName, $extensions.source);
				}
			}
			if(module.compiler().isInHierarchy(filename) === true) {
				SyntaxException.throwLoopingImport(this._data.source.value, this);
			}
			this._isKSFile = true;
			this._filename = filename;
			this._pathAddendum = pathAddendum;
			this._extAddendum = extAddendum;
			this._moduleName = moduleName;
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifer; __ks_0 < __ks_1 && !(this._autofill); ++__ks_0) {
				modifer = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifer.kind) === ModifierKind.Autofill.value) {
					this._autofill = true;
				}
			}
			this.__ks_func_loadMetadata_0();
			this._worker = new ImportWorker(this._metaRequirements, this._metaExports, this);
			const macros = new Dictionary();
			for(let i = 0, __ks_0 = this._metaExports.macros.length; i < __ks_0; i += 2) {
				macros[this._metaExports.macros[i]] = KSHelper.mapArray(this._metaExports.macros[i + 1], function(data) {
					return JSON.parse(Buffer.from(data, "base64").toString("utf8"));
				});
			}
			this._scope.line(this.__ks_func_line_0());
			if(this._data.specifiers.length === 0) {
				for(let i = 1, __ks_0 = this._metaExports.exports.length; i < __ks_0; i += 2) {
					let name = this._metaExports.exports[i];
					this.addImport(name, name, false);
				}
				for(const name in macros) {
					const datas = macros[name];
					for(let __ks_0 = 0, __ks_1 = datas.length, data; __ks_0 < __ks_1; ++__ks_0) {
						data = datas[__ks_0];
						MacroDeclaration.__ks_new_0(data, this, null, name);
					}
				}
			}
			else {
				let name = null, type = null;
				for(let __ks_0 = 0, __ks_1 = this._data.specifiers.length, specifier; __ks_0 < __ks_1; ++__ks_0) {
					specifier = this._data.specifiers[__ks_0];
					if(KSHelper.valueOf(specifier.kind) === NodeKind.ImportExclusionSpecifier.value) {
						const exclusions = KSHelper.mapArray(specifier.exclusions, function(exclusion) {
							return exclusion.name;
						});
						for(let i = 1, __ks_2 = this._metaExports.exports.length; i < __ks_2; i += 2) {
							if(exclusions.indexOf(this._metaExports.exports[i]) === -1) {
								name = this._metaExports.exports[i];
								this.addImport(name, name, false);
							}
						}
						for(const name in macros) {
							const datas = macros[name];
							if(exclusions.indexOf(name) === -1) {
								for(let __ks_2 = 0, __ks_3 = datas.length, data; __ks_2 < __ks_3; ++__ks_2) {
									data = datas[__ks_2];
									MacroDeclaration.__ks_new_0(data, this, null, name);
								}
							}
						}
					}
					else if(KSHelper.valueOf(specifier.kind) === NodeKind.ImportNamespaceSpecifier.value) {
						this._alias = specifier.local.name;
					}
					else {
						let __ks_2 = specifier.imported.kind.valueOf();
						if(__ks_2 === NodeKind.ClassDeclaration.value) {
							name = specifier.imported.name.name;
							type = Type.__ks_sttc_fromAST_0(specifier.imported, this);
						}
						else if(__ks_2 === NodeKind.Identifier.value) {
							name = specifier.imported.name;
							type = null;
						}
						else if(__ks_2 === NodeKind.VariableDeclarator.value) {
							name = specifier.imported.name.name;
							type = KSType.isValue(specifier.imported.type) ? Type.__ks_sttc_fromAST_0(specifier.imported.type, this) : null;
						}
						else {
							console.info(specifier.imported);
							throw new NotImplementedException();
						}
						if(KSType.isValue(macros[name])) {
							for(let __ks_2 = 0, __ks_3 = macros[name].length, data; __ks_2 < __ks_3; ++__ks_2) {
								data = macros[name][__ks_2];
								new MacroDeclaration(data, this, null, specifier.local.name);
							}
						}
						else {
							this.addImport(name, specifier.local.name, false, type);
						}
					}
				}
				if(this._alias !== null) {
					this.__ks_func_addImport_0(this._alias, this._alias, true);
				}
			}
			this._scope.line(KSOperator.subtraction(this.__ks_func_line_0(), 1));
			return true;
		}
		__ks_func_loadKSFile_rt(that, proto, args) {
			const t0 = value => KSType.isString(value) || KSType.isNull(value);
			const t1 = () => true;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t0(args[1])) {
						return proto.__ks_func_loadKSFile_0.call(that, args[0], args[1], void 0, void 0, void 0);
					}
					return proto.__ks_func_loadKSFile_0.call(that, args[0], void 0, void 0, args[1], void 0);
				}
			}
			if(args.length === 3) {
				if(t0(args[0])) {
					if(t0(args[1])) {
						if(t0(args[2])) {
							return proto.__ks_func_loadKSFile_0.call(that, args[0], args[1], args[2], void 0, void 0);
						}
						return proto.__ks_func_loadKSFile_0.call(that, args[0], args[1], void 0, args[2], void 0);
					}
					return proto.__ks_func_loadKSFile_0.call(that, args[0], void 0, void 0, args[1], args[2]);
				}
			}
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[1])) {
					if(t0(args[2])) {
						return proto.__ks_func_loadKSFile_0.call(that, args[0], args[1], args[2], args[3], void 0);
					}
					return proto.__ks_func_loadKSFile_0.call(that, args[0], args[1], void 0, args[2], args[3]);
				}
			}
			if(args.length >= 1 && args.length <= 5) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t0, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t0, pts, 1) && KSHelper.isVarargs(args, 0, 1, t1, pts, 2) && KSHelper.isVarargs(args, 0, 1, t1, pts, 3) && te(pts, 4)) {
					return proto.__ks_func_loadKSFile_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]));
				}
			}
			if(super.__ks_func_loadKSFile_rt) {
				return super.__ks_func_loadKSFile_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		loadMetadata() {
			return this.__ks_func_loadMetadata_rt.call(null, this, this, arguments);
		}
		__ks_func_loadMetadata_0() {
			const module = this.__ks_func_module_0();
			const source = fs.readFile(this._filename);
			const target = this._options.target;
			let upto = module.isUpToDate(this._filename, source);
			if(KSType.isValue(upto)) {
				let metadata = this.readMetadata(getRequirementsPath(this._filename));
				if(KSType.isValue(metadata)) {
					const variations = [module._options.target.name, module._options.target.version];
					const __ks_arguments_1 = this.__ks_func_buildArguments_0(metadata);
					let next = 0;
					for(let __ks_0 = 0, __ks_1 = __ks_Array.__ks_func_sort_0.call([...__ks_arguments_1.values], (() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 2) {
								if(t0(args[0]) && t0(args[1])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (a, b) => {
							return KSOperator.subtraction(a.index, b.index);
						};
						return __ks_rt;
					})()), __ks_2 = __ks_1.length, argument; __ks_0 < __ks_2; ++__ks_0) {
						argument = __ks_1[__ks_0];
						while(next !== argument.index) {
							variations.push(null);
							++next;
						}
						argument.type.toVariations(variations);
						++next;
					}
					const length = KSOperator.division(metadata.requirements.length, 3);
					while(next !== length) {
						variations.push(null);
						++next;
					}
					const variationId = fs.djb2a(variations.join());
					if(__ks_Array.__ks_func_contains_0.call(KSHelper.cast(upto.variations, "Array", false, null, "Array"), variationId)) {
						this._metaRequirements = metadata;
						this._arguments = __ks_arguments_1;
						this._variationId = variationId;
						let __ks_metadata_1 = this.readMetadata(getExportsPath(this._filename, variationId));
						if(KSType.isValue(__ks_metadata_1)) {
							this._metaExports = __ks_metadata_1;
							module.addHashes(this._filename, upto.hashes);
							return;
						}
					}
				}
			}
			const compiler = module.compiler().createServant(this._filename);
			compiler.initiate(source);
			this._metaRequirements = compiler.toRequirements();
			this.buildArguments(this._metaRequirements, this._arguments);
			const __ks_arguments_1 = KSHelper.mapRange(0, KSOperator.division(this._metaRequirements.requirements.length, 3), 1, true, false, function(i) {
				return false;
			});
			for(let __ks_0 = 0, __ks_1 = this._arguments.values.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments.values[__ks_0];
				__ks_arguments_1[argument.index] = (() => {
					const d = new Dictionary();
					d.name = argument.identifier;
					d.type = argument.type;
					return d;
				})();
			}
			this._scope.line(this.__ks_func_line_0());
			for(let __ks_0 = 0, __ks_1 = this._arguments.values.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments.values[__ks_0];
				if(argument.required === true) {
					if(!this._scope.hasVariable(argument.name)) {
						this._scope.define(argument.name, true, argument.type, true, this);
					}
				}
			}
			compiler.setArguments(__ks_arguments_1, this._data.source.value, this);
			compiler.finish();
			compiler.writeFiles();
			this._metaExports = compiler.toExports();
			module.addHashes(this._filename, compiler.toHashes());
			this._variationId = compiler.toVariationId();
		}
		__ks_func_loadMetadata_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_loadMetadata_0.call(that);
			}
			if(super.__ks_func_loadMetadata_rt) {
				return super.__ks_func_loadMetadata_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		loadNodeFile() {
			return this.__ks_func_loadNodeFile_rt.call(null, this, this, arguments);
		}
		__ks_func_loadNodeFile_0(filename = null, moduleName = null) {
			const module = this.__ks_func_module_0();
			let file = null;
			if(moduleName === null) {
				file = moduleName = module.path(filename, this._data.source.value);
			}
			if(KSType.isValue(this._data.arguments)) {
				for(let __ks_0 = 0, __ks_1 = this._data.arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = this._data.arguments[__ks_0];
					if(KSType.isValue(argument.name)) {
						SyntaxException.throwInvalidImportAliasArgument(this);
					}
					else {
						this.addArgument(argument, false, this._arguments);
					}
				}
			}
			else {
				this._hasArguments = false;
			}
			this._isKSFile = false;
			this._moduleName = moduleName;
			if(this._data.specifiers.length === 0) {
				const parts = this._data.source.value.split("/");
				for(let __ks_0 = parts.length - 1, __ks_1 = 0, part; __ks_0 >= __ks_1 && (this._alias === null); --__ks_0) {
					part = parts[__ks_0];
					if(!(/(?:^\.+$|^@)/.test(part) === true)) {
						const dots = part.split(".");
						const last = KSOperator.subtraction(dots.length, 1);
						if(last === 0) {
							this._alias = dots[0].replace(/[-_]+(.)/g, (() => {
								const __ks_rt = (...args) => {
									const t0 = KSType.isValue;
									const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
									let pts;
									if(args.length >= 2) {
										if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, args.length - 2, t0, pts = [2], 0) && te(pts, 1)) {
											return __ks_rt.__ks_0.call(this, args[0], args[1], KSHelper.getVarargs(args, 2, pts[1]));
										}
									}
									throw KSHelper.badArgs();
								};
								__ks_rt.__ks_0 = (m, l, __ks_0) => {
									return l.toUpperCase();
								};
								return __ks_rt;
							})());
						}
						else if($importExts.data[dots[last]] === true) {
							this._alias = dots.slice(0, last).join(".").replace(/[-_.]+(.)/g, (() => {
								const __ks_rt = (...args) => {
									const t0 = KSType.isValue;
									const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
									let pts;
									if(args.length >= 2) {
										if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, args.length - 2, t0, pts = [2], 0) && te(pts, 1)) {
											return __ks_rt.__ks_0.call(this, args[0], args[1], KSHelper.getVarargs(args, 2, pts[1]));
										}
									}
									throw KSHelper.badArgs();
								};
								__ks_rt.__ks_0 = (m, l, __ks_0) => {
									return l.toUpperCase();
								};
								return __ks_rt;
							})());
						}
						else if($importExts.source[dots[last]] === true) {
							this._alias = dots[KSOperator.subtraction(last, 1)].replace(/[-_]+(.)/g, (() => {
								const __ks_rt = (...args) => {
									const t0 = KSType.isValue;
									const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
									let pts;
									if(args.length >= 2) {
										if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, args.length - 2, t0, pts = [2], 0) && te(pts, 1)) {
											return __ks_rt.__ks_0.call(this, args[0], args[1], KSHelper.getVarargs(args, 2, pts[1]));
										}
									}
									throw KSHelper.badArgs();
								};
								__ks_rt.__ks_0 = (m, l, __ks_0) => {
									return l.toUpperCase();
								};
								return __ks_rt;
							})());
						}
						else {
							this._alias = dots[last].replace(/[-_]+(.)/g, (() => {
								const __ks_rt = (...args) => {
									const t0 = KSType.isValue;
									const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
									let pts;
									if(args.length >= 2) {
										if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, args.length - 2, t0, pts = [2], 0) && te(pts, 1)) {
											return __ks_rt.__ks_0.call(this, args[0], args[1], KSHelper.getVarargs(args, 2, pts[1]));
										}
									}
									throw KSHelper.badArgs();
								};
								__ks_rt.__ks_0 = (m, l, __ks_0) => {
									return l.toUpperCase();
								};
								return __ks_rt;
							})());
						}
					}
				}
				if(this._alias === null) {
					SyntaxException.__ks_sttc_throwUnnamedWildcardImport_0(this);
				}
				this.__ks_func_addVariable_0(this._alias, this._alias, false, null);
			}
			else {
				let type = null;
				for(let __ks_0 = 0, __ks_1 = this._data.specifiers.length, specifier; __ks_0 < __ks_1; ++__ks_0) {
					specifier = this._data.specifiers[__ks_0];
					if(KSHelper.valueOf(specifier.kind) === NodeKind.ImportExclusionSpecifier.value) {
						NotSupportedException.__ks_sttc_throw_1(["JavaScript import doesn't support exclusions", this]);
					}
					else if(KSHelper.valueOf(specifier.kind) === NodeKind.ImportNamespaceSpecifier.value) {
						this._alias = specifier.local.name;
						if(KSType.isValue(specifier.specifiers) ? specifier.specifiers.length !== 0 : false) {
							type = NamespaceType.__ks_new_0(KSHelper.notNull(this._scope));
							for(let __ks_2 = 0, __ks_3 = specifier.specifiers.length, s; __ks_2 < __ks_3; ++__ks_2) {
								s = specifier.specifiers[__ks_2];
								if(KSHelper.valueOf(s.imported.kind) === NodeKind.Identifier.value) {
									type.addProperty(s.local.name, Type.Any);
								}
								else {
									type.addProperty(s.local.name, Type.__ks_sttc_fromAST_0(s.imported, this).__ks_func_flagAlien_0());
								}
							}
							this.addVariable(this._alias, this._alias, false, type);
						}
						else {
							this.addVariable(this._alias, this._alias, false, null);
						}
					}
					else {
						if(KSHelper.valueOf(specifier.imported.kind) === NodeKind.Identifier.value) {
							this.addVariable(specifier.imported.name, specifier.local.name, true, null);
						}
						else {
							type = Type.__ks_sttc_fromAST_0(specifier.imported, this).__ks_func_flagAlien_0();
							this.addVariable(specifier.imported.name.name, specifier.local.name, true, type);
						}
					}
				}
			}
			return true;
		}
		__ks_func_loadNodeFile_rt(that, proto, args) {
			const t0 = () => true;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 2) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && KSHelper.isVarargs(args, 0, 1, t0, pts, 1) && te(pts, 2)) {
					return proto.__ks_func_loadNodeFile_0.call(that, KSHelper.getVararg(args, 0, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			if(super.__ks_func_loadNodeFile_rt) {
				return super.__ks_func_loadNodeFile_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		loadNodeModule() {
			return this.__ks_func_loadNodeModule_rt.call(null, this, this, arguments);
		}
		__ks_func_loadNodeModule_0(moduleName, start) {
			let dirs = $nodeModulesPaths.__ks_0(start);
			let file = null, metadata = null;
			for(let __ks_0 = 0, __ks_1 = dirs.length, dir; __ks_0 < __ks_1; ++__ks_0) {
				dir = dirs[__ks_0];
				file = path.join(dir, moduleName);
				if((this.loadFile(file, "", moduleName) === true) || (this.loadDirectory(file, moduleName) === true)) {
					return true;
				}
			}
			return false;
		}
		__ks_func_loadNodeModule_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_loadNodeModule_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_loadNodeModule_rt) {
				return super.__ks_func_loadNodeModule_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		readMetadata() {
			return this.__ks_func_readMetadata_rt.call(null, this, this, arguments);
		}
		__ks_func_readMetadata_0(file) {
			try {
				return JSON.parse(fs.readFile(file), fs.unescapeJSON);
			}
			catch(__ks_0) {
				return null;
			}
		}
		__ks_func_readMetadata_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_readMetadata_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_readMetadata_rt) {
				return super.__ks_func_readMetadata_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		registerMacro() {
			return this.__ks_func_registerMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_registerMacro_3(name, macro) {
			this._parent.registerMacro(name, macro);
		}
		__ks_func_registerMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_registerMacro_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_registerMacro_rt) {
				return super.__ks_func_registerMacro_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toImportFragments() {
			return this.__ks_func_toImportFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toImportFragments_0(fragments, destructuring) {
			if(destructuring === void 0 || destructuring === null) {
				destructuring = true;
			}
			if(this._isKSFile) {
				this.__ks_func_toKSFileFragments_0(fragments, destructuring);
			}
			else {
				this.__ks_func_toNodeFileFragments_0(fragments, destructuring);
			}
		}
		__ks_func_toImportFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0])) {
					return proto.__ks_func_toImportFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toImportFragments_rt) {
				return super.__ks_func_toImportFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toKSFileFragments() {
			return this.__ks_func_toKSFileFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toKSFileFragments_0(fragments, destructuring) {
			if(this._count === 0) {
				if(this._alias !== null) {
					const line = fragments.newLine().code("var ", this._alias, " = ");
					this.toRequireFragments(line);
					line.done();
				}
				else if(this._arguments.values.length !== 0) {
					const line = fragments.newLine();
					this.toRequireFragments(line);
					line.done();
				}
			}
			else {
				if(this._alias !== null) {
					const line = fragments.newLine().code("var ", this._reuseName, " = ");
					this.toRequireFragments(line);
					line.done();
				}
				if(this._count === 1) {
					let variable = null, name = null;
					for(name in this._variables) {
						variable = this._variables[name];
					}
					if(variable.systemic === true) {
						const line = fragments.newLine().code(KSHelper.concatString("var __ks_", variable.name, " = "));
						this.toRequireFragments(line);
						line.code(KSHelper.concatString(".__ks_", name)).done();
					}
					else {
						const line = fragments.newLine().code(KSHelper.concatString("var ", variable.name, " = "));
						this.toRequireFragments(line);
						line.code(KSHelper.concatString(".", name)).done();
					}
				}
				else {
					if(!(destructuring === true) || (this._options.format.destructuring === "es5")) {
						let varname = null;
						if(this._reusable) {
							varname = this._reuseName;
						}
						else {
							const line = fragments.newLine().code("var __ks__ = ");
							this.toRequireFragments(line);
							line.done();
							varname = "__ks__";
						}
						if(destructuring === true) {
							const line = fragments.newLine().code("var ");
							let nf = false;
							for(const name in this._variables) {
								const variable = this._variables[name];
								if(nf) {
									line.code(", ");
								}
								else {
									nf = true;
								}
								if((variable.name === name) && ($virtuals[name] === true)) {
									line.code("__ks_" + variable.name + " = " + varname + ".__ks_" + name);
								}
								else {
									if(variable.systemic) {
										line.code("__ks_" + variable.name + " = " + varname + ".__ks_" + name);
									}
									else {
										line.code(variable.name + " = " + varname + "." + name);
										if(variable.sealed) {
											line.code(", __ks_" + variable.name + " = " + varname + ".__ks_" + name);
										}
									}
								}
							}
							line.done();
						}
					}
					else {
						const line = fragments.newLine().code("var {");
						let nf = false;
						for(const name in this._variables) {
							const variable = this._variables[name];
							if(nf) {
								line.code(", ");
							}
							else {
								nf = true;
							}
							if(variable.name === name) {
								if($virtuals[name] === true) {
									line.code("__ks_" + name);
								}
								else {
									if(variable.systemic) {
										line.code("__ks_" + name);
									}
									else {
										line.code(name);
										if(variable.sealed) {
											line.code(", __ks_" + name);
										}
									}
								}
							}
							else {
								if(variable.systemic) {
									line.code("__ks_" + name + ": __ks_" + variable.name);
								}
								else {
									line.code(name + ": " + variable.name);
									if(variable.sealed) {
										line.code(", __ks_" + name + ": __ks_" + variable.name);
									}
								}
							}
						}
						line.code("} = ");
						this.toRequireFragments(line);
						line.done();
					}
				}
			}
		}
		__ks_func_toKSFileFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toKSFileFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toKSFileFragments_rt) {
				return super.__ks_func_toKSFileFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toNodeFileFragments() {
			return this.__ks_func_toNodeFileFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toNodeFileFragments_0(fragments, destructuring) {
			if(this._count === 0) {
				if(this._alias !== null) {
					const line = fragments.newLine().code("var ", this._alias, " = ");
					this.toRequireFragments(line);
					line.done();
				}
			}
			else {
				if(this._alias !== null) {
					const line = fragments.newLine().code("var ", this._reuseName, " = ");
					this.toRequireFragments(line);
					line.done();
				}
				let name = null, alias = null;
				if(this._count === 1) {
					let variable = null, name = null;
					for(name in this._variables) {
						variable = this._variables[name];
					}
					const line = fragments.newLine().code(KSHelper.concatString("var ", variable.name, " = "));
					this.toRequireFragments(line);
					line.code(KSHelper.concatString(".", name)).done();
				}
				else if(this._count > 0) {
					if(!(destructuring === true) || (this._options.format.destructuring === "es5")) {
						let line = fragments.newLine().code("var __ks__ = ");
						this.toRequireFragments(line);
						line.done();
						if(destructuring === true) {
							line = fragments.newLine().code("var ");
							let nf = false;
							for(const name in this._variables) {
								const variable = this._variables[name];
								if(nf) {
									line.code(", ");
								}
								else {
									nf = true;
								}
								line.code(variable.name + " = __ks__." + name);
							}
							line.done();
						}
					}
					else {
						let line = fragments.newLine().code("var {");
						let nf = false;
						for(const name in this._variables) {
							const variable = this._variables[name];
							if(nf) {
								line.code(", ");
							}
							else {
								nf = true;
							}
							if(variable.name === name) {
								line.code(name);
							}
							else {
								line.code(name, ": ", variable.name);
							}
						}
						line.code("} = ");
						this.toRequireFragments(line);
						line.done();
					}
				}
			}
		}
		__ks_func_toNodeFileFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toNodeFileFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toNodeFileFragments_rt) {
				return super.__ks_func_toNodeFileFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toRequireFragments() {
			return this.__ks_func_toRequireFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toRequireFragments_0(fragments) {
			if(this._reusable) {
				fragments.code(this._reuseName);
			}
			else {
				if(this._isKSFile) {
					let modulePath = "";
					if(KSOperator.gt(this._pathAddendum.length, 0)) {
						const dirname = path.dirname(this._pathAddendum);
						const basename = path.basename(this._pathAddendum);
						modulePath = KSHelper.concatString(this._moduleName, path.sep, dirname, path.sep, ".", basename, ".", this._variationId, ".ksb");
					}
					else if($localFileRegex.test(this._moduleName) === true) {
						const basename = path.basename(this._moduleName);
						let dirname = null;
						if(this._parent.includePath() === null) {
							dirname = path.dirname(this._moduleName);
						}
						else {
							dirname = path.dirname(this._parent.includePath());
						}
						modulePath = KSHelper.concatString(dirname, path.sep, ".", basename, ".", this._variationId, ".ksb");
					}
					else {
						const dirname = path.dirname(this._moduleName);
						const basename = path.basename(this._moduleName);
						modulePath = KSHelper.concatString(dirname, path.sep, ".", basename, this._extAddendum, ".", this._variationId, ".ksb");
					}
					fragments.code(KSHelper.concatString("require(", $quote.__ks_0(modulePath), ")"));
				}
				else {
					fragments.code(KSHelper.concatString("require(", $quote.__ks_0(this._moduleName), ")"));
				}
				if(this._hasArguments) {
					fragments.code("(");
					let nf = false;
					for(let __ks_0 = 0, __ks_1 = this._arguments.values.length, argument; __ks_0 < __ks_1; ++__ks_0) {
						argument = this._arguments.values[__ks_0];
						if((argument.isApproved === true) && (argument.index !== null)) {
							if(nf) {
								fragments.code($comma);
							}
							else {
								nf = true;
							}
							if((argument.isIdentifier === true) && (argument.type.isSystemic() === true)) {
								fragments.code(KSHelper.concatString("__ks_", argument.identifier));
							}
							else {
								fragments.compile(argument.value);
								if((argument.isIdentifier === true) && (argument.type.isSealed() === true)) {
									fragments.code(KSHelper.concatString(", __ks_", argument.identifier));
								}
							}
						}
					}
					fragments.code(")");
				}
				this._reusable = true;
			}
		}
		__ks_func_toRequireFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toRequireFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toRequireFragments_rt) {
				return super.__ks_func_toRequireFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		validateRequirement() {
			return this.__ks_func_validateRequirement_rt.call(null, this, this, arguments);
		}
		__ks_func_validateRequirement_0(required, name, metadata) {
			if(required === true) {
				SyntaxException.__ks_sttc_throwMissingRequirement_0(name, this);
			}
			else if((this.__ks_func_mode_0() === ImportMode.Import) && KSType.isNumber(required)) {
				for(let i = 0, __ks_0 = metadata.aliens.length; i < __ks_0; i += 3) {
					if(metadata.aliens[i] === required) {
						metadata.aliens[i + 2] = true;
						break;
					}
				}
			}
		}
		__ks_func_validateRequirement_rt(that, proto, args) {
			const t0 = value => KSType.isBoolean(value) || KSType.isNumber(value);
			const t1 = KSType.isString;
			const t2 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_validateRequirement_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_validateRequirement_rt) {
				return super.__ks_func_validateRequirement_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ImportDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ImportDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ImportDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._declarators = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			for(let __ks_0 = 0, __ks_1 = this._data.declarations.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._data.declarations[__ks_0];
				this._declarators.push(declarator = ImportDeclarator.__ks_new_0(declarator, this));
				declarator.__ks_func_initiate_0();
			}
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.analyse();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.prepare();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		registerMacro() {
			return this.__ks_func_registerMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_registerMacro_4(name, macro) {
			this._parent.registerMacro(name, macro);
		}
		__ks_func_registerMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_registerMacro_4.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_registerMacro_rt) {
				return super.__ks_func_registerMacro_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_26(fragments, mode) {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.toFragments(fragments, mode);
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_26.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ImportDeclarator extends Importer {
		static __ks_new_0(...args) {
			const o = Object.create(ImportDeclarator.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ImportDeclarator.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		flagForcefullyRebinded() {
			return this.__ks_func_flagForcefullyRebinded_rt.call(null, this, this, arguments);
		}
		__ks_func_flagForcefullyRebinded_1() {
		}
		__ks_func_flagForcefullyRebinded_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagForcefullyRebinded_1.call(that);
			}
			if(super.__ks_func_flagForcefullyRebinded_rt) {
				return super.__ks_func_flagForcefullyRebinded_rt.call(null, that, Importer.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		mode() {
			return this.__ks_func_mode_rt.call(null, this, this, arguments);
		}
		__ks_func_mode_0() {
			return ImportMode.Import;
		}
		__ks_func_mode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_mode_0.call(that);
			}
			if(super.__ks_func_mode_rt) {
				return super.__ks_func_mode_rt.call(null, that, Importer.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_27(fragments, mode) {
			this.__ks_func_toImportFragments_0(fragments);
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_27.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Importer.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ImportWorker {
		static __ks_new_0(...args) {
			const o = Object.create(ImportWorker.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
		}
		__ks_cons_0(metaRequirements, metaExports, node) {
			if(metaRequirements === void 0) {
				metaRequirements = null;
			}
			if(metaExports === void 0) {
				metaExports = null;
			}
			if(node === void 0) {
				node = null;
			}
			this._metaRequirements = metaRequirements;
			this._metaExports = metaExports;
			this._node = node;
			this._scope = new ImportScope(node.scope());
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return ImportWorker.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		hasType() {
			return this.__ks_func_hasType_rt.call(null, this, this, arguments);
		}
		__ks_func_hasType_0(name) {
			return this._scope.__ks_func_hasDefinedVariable_0(name);
		}
		__ks_func_hasType_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_hasType_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		getType() {
			return this.__ks_func_getType_rt.call(null, this, this, arguments);
		}
		__ks_func_getType_0(name) {
			return this._scope.__ks_func_getDefinedVariable_0(name).__ks_func_getDeclaredType_0();
		}
		__ks_func_getType_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getType_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0(__ks_arguments_1) {
			const module = this._node.module();
			const references = new Dictionary();
			const queue = [];
			const variables = new Dictionary();
			const metadata = [...this._metaRequirements.references, ...this._metaExports.references];
			const alterations = (() => {
				const d = new Dictionary();
				d.mode = this._node.mode();
				return d;
			})();
			const newAliens = new Dictionary();
			const oldAliens = [];
			for(let i = 0, __ks_0 = this._metaRequirements.aliens.length; i < __ks_0; i += 3) {
				const index = this._metaRequirements.aliens[i];
				const name = this._metaRequirements.aliens[i + 1];
				let type = null;
				if(!KSType.isValue(references[index])) {
					type = Type.import(index, metadata, references, alterations, queue, this._scope, this._node);
					const origin = type.__ks_func_origin_0();
					if(KSType.isValue(origin)) {
						type.__ks_func_origin_1(TypeOrigin(origin | TypeOrigin.Extern | TypeOrigin.Import));
					}
					else {
						type.__ks_func_origin_1(TypeOrigin(TypeOrigin.Extern | TypeOrigin.Import));
					}
				}
				else {
					type = references[index];
				}
				type = Type.toNamedType(name, type);
				if(this._metaRequirements.aliens[i + 2] === true) {
					type = type.__ks_func_flagRequired_0();
				}
				let alien = module.getAlien(name);
				if(KSType.isValue(alien)) {
					oldAliens.push(name, type, alien);
					references[index] = alien;
				}
				else {
					newAliens[name] = index;
					references[index] = type;
				}
			}
			while(queue.length > 0) {
				queue.shift()();
			}
			for(let index = 0, __ks_0 = oldAliens.length, name; index < __ks_0; index += 3) {
				name = oldAliens[index];
				const newType = oldAliens[index + 1];
				const oldType = oldAliens[index + 1];
				if(!(oldType.isSubsetOf(newType, MatchingMode.Signature) === true)) {
					TypeException.throwNotCompatibleAlien(name, this._node.data().source.value, this._node);
				}
			}
			if(KSOperator.gt(this._metaRequirements.requirements.length, 0)) {
				const reqReferences = KSHelper.concatDictionary(references);
				for(let i = 0, __ks_0 = this._metaRequirements.requirements.length; i < __ks_0; i += 3) {
					const index = this._metaRequirements.requirements[i];
					const name = this._metaRequirements.requirements[i + 1];
					const type = KSType.isValue(references[index]) ? references[index] : Type.import(index, metadata, reqReferences, alterations, queue, this._scope, this._node);
					reqReferences[index] = Type.toNamedType(name, type);
				}
				while(queue.length > 0) {
					queue.shift()();
				}
				for(let i = 0, __ks_0 = this._metaRequirements.requirements.length; i < __ks_0; i += 3) {
					const name = this._metaRequirements.requirements[i + 1];
					const type = reqReferences[this._metaRequirements.requirements[i]];
					let index = __ks_arguments_1.toImport[name];
					if(KSType.isValue(index)) {
						const argument = __ks_arguments_1.values[index];
						if(!(argument.required === true) && !(type.isAny() === true) && !(argument.type.isSubsetOf(type, MatchingMode.Signature) === true)) {
							if(argument.isAutofill === true) {
								argument.isApproved = false;
							}
							else {
								TypeException.throwNotCompatibleArgument(argument.name, name, this._node.data().source.value, this._node);
							}
						}
					}
				}
				for(let i = 0, __ks_0 = this._metaRequirements.requirements.length; i < __ks_0; i += 3) {
					const reqIndex = this._metaRequirements.requirements[i];
					const name = this._metaRequirements.requirements[i + 1];
					let type;
					let index = __ks_arguments_1.toImport[name];
					if(KSType.isValue(index)) {
						const argument = __ks_arguments_1.values[index];
						if(argument.isApproved === true) {
							if(argument.required === true) {
								argument.type = reqReferences[reqIndex];
							}
							let type = references[reqIndex];
							if(KSType.isValue(type)) {
								if(!(argument.type.isSubsetOf(type, MatchingMode.Signature) === true)) {
									TypeException.throwNotCompatibleAlien(name, this._node.data().source.value, this._node);
								}
							}
							references[reqIndex] = argument.type;
						}
					}
					else if(KSType.isValue((type = references[reqIndex]))) {
						references[reqIndex] = type.flagRequired();
					}
				}
			}
			for(const name in newAliens) {
				const index = newAliens[name];
				module.addAlien(name, references[index]);
			}
			for(let i = 0, __ks_0 = this._metaRequirements.requirements.length; i < __ks_0; i += 3) {
				const index = this._metaRequirements.requirements[i];
				const name = this._metaRequirements.requirements[i + 1];
				let type = null;
				if(!KSType.isValue(references[index])) {
					type = Type.import(index, metadata, references, alterations, queue, this._scope, this._node);
					type.__ks_func_origin_1(TypeOrigin.Require);
				}
				else {
					type = references[index];
					const origin = type.origin();
					if(KSType.isValue(origin)) {
						type.origin(TypeOrigin(KSHelper.cast(origin, "TypeOrigin", false, TypeOrigin, "Enum") | TypeOrigin.Require));
					}
					else {
						type.origin(TypeOrigin(TypeOrigin.Require | TypeOrigin.Import));
					}
				}
				references[index] = Type.toNamedType(name, type);
			}
			for(let i = 0, __ks_0 = this._metaExports.exports.length; i < __ks_0; i += 2) {
				const index = this._metaExports.exports[i];
				const name = this._metaExports.exports[i + 1];
				let type = null;
				if(!KSType.isValue(references[index])) {
					type = Type.import(index, metadata, references, alterations, queue, this._scope, this._node);
				}
				else {
					type = references[index];
				}
				type = Type.toNamedType(name, type);
				let variable = this._scope.getDefinedVariable(name);
				if(KSType.isValue(variable)) {
					variable.__ks_func_setDeclaredType_0(type);
				}
				else {
					this._scope.addVariable(name, new Variable(name, false, false, type), this._node);
					variables[index] = true;
				}
				references[index] = type;
			}
			for(let i = 0, __ks_0 = this._metaRequirements.aliens.length; i < __ks_0; i += 3) {
				const index = this._metaRequirements.aliens[i];
				const name = this._metaRequirements.aliens[i + 1];
				if(!this._scope.hasVariable(name)) {
					this._scope.addVariable(name, new Variable(name, false, false, references[index]), this._node);
					variables[index] = true;
				}
			}
			for(let index = 0, __ks_0 = metadata.length; index < __ks_0; ++index) {
				if(!KSType.isValue(references[index])) {
					const type = Type.toNamedType(Type.import(index, metadata, references, alterations, queue, this._scope, this._node), true, this._scope, this._node);
					references[index] = type;
				}
				else if(!(variables[index] === true)) {
					const type = references[index];
					if(KSType.isClassInstance(type, NamedType) && !this._scope.hasVariable(type.__ks_func_name_0())) {
						this._scope.define(type.__ks_func_name_0(), true, type, this._node);
					}
				}
			}
			while(queue.length > 0) {
				queue.shift()();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_prepare_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		scope() {
			return this.__ks_func_scope_rt.call(null, this, this, arguments);
		}
		__ks_func_scope_0() {
			return this._scope;
		}
		__ks_func_scope_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_scope_0.call(that);
			}
			throw KSHelper.badArgs();
		}
	}
	class DependencyStatement extends Statement {
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		define() {
			return this.__ks_func_define_rt.call(null, this, this, arguments);
		}
		__ks_func_define_0(declaration) {
			const options = Attribute.configure(declaration, this._options, AttributeTarget.Statement, this.__ks_func_file_0());
			const scope = this._parent.__ks_func_scope_0();
			let __ks_0 = declaration.kind.valueOf();
			if(__ks_0 === NodeKind.ClassDeclaration.value) {
				const type = this.__ks_func_applyFlags_0(new ClassType(scope));
				const variable = scope.define(declaration.name.name, true, type, this);
				if(KSType.isValue(declaration.extends)) {
					let superVar, __ks_1;
					if(KSType.isValue(__ks_1 = this._scope.getVariable(declaration.extends.name)) ? (superVar = __ks_1, false) : true) {
						ReferenceException.throwNotDefined(declaration.extends.name, this);
					}
					else if(!(superVar.__ks_func_getDeclaredType_0().isClass() === true)) {
						TypeException.throwNotClass(declaration.extends.name, this);
					}
					type.extends(superVar.__ks_func_getDeclaredType_0());
				}
				for(let __ks_1 = 0, __ks_2 = declaration.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = declaration.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Abstract.value) {
						type.flagAbstract();
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Sealed.value) {
						type.flagSealed();
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Systemic.value) {
						type.flagSystemic();
					}
				}
				if(declaration.members.length !== 0) {
					for(let __ks_1 = 0, __ks_2 = declaration.members.length, member; __ks_1 < __ks_2; ++__ks_1) {
						member = declaration.members[__ks_1];
						type.addPropertyFromAST(member, this);
					}
				}
				if((options.rules.nonExhaustive === true) || (declaration.members.length === 0)) {
					type.setExhaustive(false);
				}
				else {
					type.setExhaustive(true);
				}
				return variable;
			}
			else if(__ks_0 === NodeKind.EnumDeclaration.value) {
				let ekind = EnumTypeKind.Number;
				if(KSType.isValue(declaration.type)) {
					if(Type.__ks_sttc_fromAST_0(declaration.type, this).__ks_func_isString_0() === true) {
						ekind = EnumTypeKind.String;
					}
				}
				const type = this.__ks_func_applyFlags_0(new EnumType(scope, ekind));
				const variable = scope.define(declaration.name.name, true, type, this);
				if((options.rules.nonExhaustive === true) || (declaration.members.length === 0)) {
					type.setExhaustive(false);
				}
				else {
					type.setExhaustive(true);
				}
				if(declaration.members.length !== 0) {
					for(let __ks_1 = 0, __ks_2 = declaration.members.length, member; __ks_1 < __ks_2; ++__ks_1) {
						member = declaration.members[__ks_1];
						type.addPropertyFromAST(member, this);
					}
				}
				return variable;
			}
			else if(__ks_0 === NodeKind.FunctionDeclaration.value) {
				let type = null;
				if(KSType.isValue(declaration.parameters)) {
					const parameters = KSHelper.mapArray(declaration.parameters, (parameter) => {
						return ParameterType.fromAST(parameter, this);
					});
					type = FunctionType.__ks_new_2(parameters, declaration, this);
				}
				else {
					type = this.__ks_func_scope_0().reference("Function");
				}
				type = this.applyFlags(type);
				const variable = scope.define(declaration.name.name, true, type, true, this);
				if((options.rules.nonExhaustive === true) || !KSType.isValue(declaration.parameters)) {
					type.setExhaustive(false);
				}
				else {
					type.setExhaustive(true);
				}
				return variable;
			}
			else if(__ks_0 === NodeKind.NamespaceDeclaration.value) {
				const type = this.__ks_func_applyFlags_0(new NamespaceType(scope));
				const variable = scope.define(declaration.name.name, true, type, this);
				for(let __ks_1 = 0, __ks_2 = declaration.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = declaration.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Sealed.value) {
						type.flagSealed();
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Systemic.value) {
						type.flagSystemic();
					}
				}
				if((options.rules.nonExhaustive === true) || (declaration.statements.length === 0)) {
					type.setExhaustive(false);
				}
				else {
					type.setExhaustive(true);
				}
				if(declaration.statements.length !== 0) {
					for(let __ks_1 = 0, __ks_2 = declaration.statements.length, statement; __ks_1 < __ks_2; ++__ks_1) {
						statement = declaration.statements[__ks_1];
						type.addPropertyFromAST(statement, this);
					}
				}
				return variable;
			}
			else if(__ks_0 === NodeKind.VariableDeclarator.value) {
				let type = Type.__ks_sttc_fromAST_0(declaration.type, this);
				let instance = KSType.isClassInstance(type, ClassType);
				if(KSType.isClassInstance(type, ReferenceType) && (type.__ks_func_isClass_0() === true)) {
					type = new ClassType(scope);
					type.__ks_func_setExhaustive_0(false);
				}
				else {
					if(options.rules.nonExhaustive === true) {
						type.__ks_func_setExhaustive_0(false);
					}
					else {
						type.__ks_func_setExhaustive_0(true);
					}
				}
				for(let __ks_1 = 0, __ks_2 = declaration.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = declaration.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Sealed.value) {
						if(!(type.__ks_func_isSealable_0() === true)) {
							type = new SealableType(scope, type);
						}
						type.__ks_func_flagSealed_0();
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Systemic.value) {
						if(!(type.__ks_func_isSealable_0() === true)) {
							type = new SealableType(scope, type);
						}
						type.__ks_func_flagSystemic_0();
					}
				}
				type = this.__ks_func_applyFlags_0(type);
				if(instance) {
					type = this._scope.__ks_func_reference_0(type);
				}
				return scope.define(declaration.name.name, true, type, true, this);
			}
			else {
				throw new NotSupportedException(KSHelper.concatString("Unexpected kind ", declaration.kind), this);
			}
		}
		__ks_func_define_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_define_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_define_rt) {
				return super.__ks_func_define_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ExternDeclaration extends DependencyStatement {
		static __ks_new_0(...args) {
			const o = Object.create(ExternDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ExternDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._lines = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			const module = this.__ks_func_module_0();
			let variable = null;
			for(let __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = this._data.declarations[__ks_0];
				let __ks_2;
				if((KSType.isValue(__ks_2 = this._scope.getVariable(declaration.name.name)) ? (variable = __ks_2, true) : false) && !(variable.__ks_func_isPredefined_0() === true)) {
					if(KSHelper.valueOf(declaration.kind) === NodeKind.FunctionDeclaration.value) {
						let parameters = null;
						if(KSType.isValue(declaration.parameters) ? declaration.parameters.length !== 0 : false) {
							parameters = KSHelper.mapArray(declaration.parameters, (parameter) => {
								return ParameterType.fromAST(parameter, this);
							});
						}
						else {
							parameters = [new ParameterType(this._scope, Type.Any, 0, Infinity)];
						}
						const type = (new FunctionType(parameters, declaration, this)).__ks_func_flagAlien_0();
						if(KSType.isClassInstance(variable.__ks_func_getDeclaredType_0(), FunctionType)) {
							const newType = OverloadedFunctionType.__ks_new_0(this._scope);
							newType.addFunction(variable.__ks_func_getDeclaredType_0());
							newType.addFunction(type);
							variable.__ks_func_setDeclaredType_0(newType);
						}
						else if(KSType.isClassInstance(variable.__ks_func_getDeclaredType_0(), OverloadedFunctionType)) {
							variable.__ks_func_getDeclaredType_0().addFunction(type);
						}
						else {
							SyntaxException.throwAlreadyDeclared(declaration.name.name, this);
						}
					}
					else if(this._parent.includePath() === null) {
						variable = this.define(declaration);
						if((variable.getDeclaredType().isSealed() === true) && (variable.getDeclaredType().isExtendable() === true)) {
							this._lines.push(KSHelper.concatString("var ", variable.getDeclaredType().getSealedName(), " = {}"));
						}
					}
					else {
					}
				}
				else {
					variable = this.define(declaration);
					const type = variable.getDeclaredType();
					if((type.isSealed() === true) && (type.isExtendable() === true)) {
						this._lines.push(KSHelper.concatString("var ", type.getSealedName(), " = {}"));
					}
				}
				variable.setComplete(true);
				module.addAlien(variable.name(), variable.getDeclaredType());
			}
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		applyFlags() {
			return this.__ks_func_applyFlags_rt.call(null, this, this, arguments);
		}
		__ks_func_applyFlags_0(type) {
			return type.__ks_func_flagAlien_0().flagRequired();
		}
		__ks_func_applyFlags_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_applyFlags_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_applyFlags_rt) {
				return super.__ks_func_applyFlags_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_28(fragments, mode) {
			for(let __ks_0 = 0, __ks_1 = this._lines.length, line; __ks_0 < __ks_1; ++__ks_0) {
				line = this._lines[__ks_0];
				fragments.line(line);
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_28.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class RequireDeclaration extends DependencyStatement {
		static __ks_new_0(...args) {
			const o = Object.create(RequireDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(RequireDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			const module = this.__ks_func_module_0();
			if(module.isBinary() === true) {
				SyntaxException.__ks_sttc_throwNotBinary_0("require", this);
			}
			for(let __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = this._data.declarations[__ks_0];
				let variable = this._scope.getVariable(declaration.name.name);
				if(KSType.isValue(variable)) {
					if(KSHelper.valueOf(declaration.kind) === NodeKind.FunctionDeclaration.value) {
						const requirement = module.getRequirement(declaration.name.name);
						let parameters = null;
						if(KSType.isValue(declaration.parameters) ? declaration.parameters.length !== 0 : false) {
							parameters = KSHelper.mapArray(declaration.parameters, (parameter) => {
								return ParameterType.fromAST(parameter, this);
							});
						}
						else {
							parameters = [new ParameterType(this._scope, Type.Any, 0, Infinity)];
						}
						const type = new FunctionType(parameters, declaration, this);
						if(KSType.isClassInstance(variable.__ks_func_getDeclaredType_0(), FunctionType)) {
							const newType = OverloadedFunctionType.__ks_new_0(this._scope);
							newType.addFunction(variable.__ks_func_getDeclaredType_0());
							newType.__ks_func_addFunction_0(type);
							variable.__ks_func_setDeclaredType_0(newType);
							requirement.type(newType);
						}
						else if(KSType.isClassInstance(variable.__ks_func_getDeclaredType_0(), OverloadedFunctionType)) {
							variable.__ks_func_getDeclaredType_0().addFunction(type);
						}
						else {
							SyntaxException.throwAlreadyDeclared(declaration.name.name, this);
						}
					}
					else if(this._parent.includePath() === null) {
						this.addRequirement(declaration);
					}
					else {
					}
				}
				else {
					this.addRequirement(declaration);
				}
			}
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addRequirement() {
			return this.__ks_func_addRequirement_rt.call(null, this, this, arguments);
		}
		__ks_func_addRequirement_0(declaration) {
			const variable = this.__ks_func_define_0(declaration);
			const requirement = new StaticRequirement(variable, this);
			this.__ks_func_module_0().addRequirement(requirement);
		}
		__ks_func_addRequirement_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addRequirement_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_addRequirement_rt) {
				return super.__ks_func_addRequirement_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		applyFlags() {
			return this.__ks_func_applyFlags_rt.call(null, this, this, arguments);
		}
		__ks_func_applyFlags_0(type) {
			return type.__ks_func_flagRequirement_0().flagRequired();
		}
		__ks_func_applyFlags_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_applyFlags_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_applyFlags_rt) {
				return super.__ks_func_applyFlags_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_29(fragments, mode) {
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_29.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ExternOrRequireDeclaration extends DependencyStatement {
		static __ks_new_0(...args) {
			const o = Object.create(ExternOrRequireDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ExternOrRequireDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			const module = this.__ks_func_module_0();
			if(module.isBinary() === true) {
				SyntaxException.__ks_sttc_throwNotBinary_0("extern|require", this);
			}
			module.flag("Type");
			if(this._parent.includePath() !== null) {
				let variable = null;
				for(let __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
					declaration = this._data.declarations[__ks_0];
					let __ks_2;
					if(KSType.isValue(__ks_2 = this._scope.getVariable(declaration.name.name)) ? (variable = __ks_2, true) : false) {
					}
					else {
						this.addRequirement(declaration);
					}
				}
			}
			else {
				for(let __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
					declaration = this._data.declarations[__ks_0];
					this.addRequirement(declaration);
				}
			}
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addRequirement() {
			return this.__ks_func_addRequirement_rt.call(null, this, this, arguments);
		}
		__ks_func_addRequirement_1(declaration) {
			const variable = this.__ks_func_define_0(declaration);
			const requirement = new EORDynamicRequirement(variable, this);
			this.__ks_func_module_0().addAlien(requirement.__ks_func_name_0(), requirement.__ks_func_type_0()).addRequirement(requirement);
		}
		__ks_func_addRequirement_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addRequirement_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_addRequirement_rt) {
				return super.__ks_func_addRequirement_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		applyFlags() {
			return this.__ks_func_applyFlags_rt.call(null, this, this, arguments);
		}
		__ks_func_applyFlags_0(type) {
			return type.__ks_func_flagAlien_0().flagRequirement().origin(TypeOrigin.ExternOrRequire);
		}
		__ks_func_applyFlags_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_applyFlags_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_applyFlags_rt) {
				return super.__ks_func_applyFlags_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_30(fragments, mode) {
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_30.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class RequireOrExternDeclaration extends DependencyStatement {
		static __ks_new_0(...args) {
			const o = Object.create(RequireOrExternDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(RequireOrExternDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._requirements = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			const module = this.__ks_func_module_0();
			if(module.isBinary() === true) {
				SyntaxException.__ks_sttc_throwNotBinary_0("require|extern", this);
			}
			module.flag("Type");
			if(this._parent.includePath() !== null) {
				for(let __ks_0 = 0, __ks_1 = this._data.declarations.length, data; __ks_0 < __ks_1; ++__ks_0) {
					data = this._data.declarations[__ks_0];
					let variable = this._scope.getVariable(data.name.name);
					if(KSType.isValue(variable)) {
					}
					else {
						this.addRequirement(data);
					}
				}
			}
			else {
				for(let __ks_0 = 0, __ks_1 = this._data.declarations.length, data; __ks_0 < __ks_1; ++__ks_0) {
					data = this._data.declarations[__ks_0];
					this.addRequirement(data);
				}
			}
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addRequirement() {
			return this.__ks_func_addRequirement_rt.call(null, this, this, arguments);
		}
		__ks_func_addRequirement_2(declaration) {
			const variable = this.__ks_func_define_0(declaration);
			const requirement = new ROEDynamicRequirement(variable, this);
			this.__ks_func_module_0().addRequirement(requirement).addAlien(requirement.__ks_func_name_0(), requirement.__ks_func_type_0());
		}
		__ks_func_addRequirement_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addRequirement_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_addRequirement_rt) {
				return super.__ks_func_addRequirement_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		applyFlags() {
			return this.__ks_func_applyFlags_rt.call(null, this, this, arguments);
		}
		__ks_func_applyFlags_0(type) {
			return type.__ks_func_flagAlien_0().flagRequirement().origin(TypeOrigin(TypeOrigin.RequireOrExtern | TypeOrigin.Require | TypeOrigin.Extern));
		}
		__ks_func_applyFlags_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_applyFlags_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_applyFlags_rt) {
				return super.__ks_func_applyFlags_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_31(fragments, mode) {
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_31.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, DependencyStatement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class RequireOrImportDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(RequireOrImportDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(RequireOrImportDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._declarators = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			if(this.__ks_func_module_0().isBinary() === true) {
				SyntaxException.__ks_sttc_throwNotBinary_0("require|import", this);
			}
			for(let __ks_0 = 0, __ks_1 = this._data.declarations.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.declarations[__ks_0];
				const declarator = RequireOrImportDeclarator.__ks_new_0(data, this);
				declarator.__ks_func_initiate_0();
				this._declarators.push(declarator);
			}
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.analyse();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.prepare();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_32(fragments, mode) {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.toStatementFragments(fragments, mode);
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_32.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class RequireOrImportDeclarator extends Importer {
		static __ks_new_0(...args) {
			const o = Object.create(RequireOrImportDeclarator.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(RequireOrImportDeclarator.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._requirements = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			super.__ks_func_initiate_0();
			const module = this.__ks_func_module_0();
			if(this._count !== 0) {
				if(this._parent.includePath() === null) {
					const line = this.__ks_func_line_0();
					for(let __ks_0 in this._variables) {
						const __ks_var_1 = this._variables[__ks_0];
						let variable = this._scope.__ks_func_getVariable_0(__ks_var_1.name);
						if(KSType.isValue(variable)) {
							if(this._scope.hasDefinedVariableBefore(__ks_var_1.name, line) === true) {
								variable.__ks_func_declaration_0().flagForcefullyRebinded();
							}
							else {
								const requirement = ROIDynamicRequirement.__ks_new_1(variable, this);
								const type = requirement.__ks_func_type_0();
								if(type.isAlien() === true) {
									const origin = type.origin();
									if(KSType.isValue(origin)) {
										type.origin(TypeOrigin(KSHelper.cast(origin, "TypeOrigin", false, TypeOrigin, "Enum") | TypeOrigin.RequireOrExtern));
									}
									else {
										type.origin(TypeOrigin.RequireOrExtern);
									}
									requirement.__ks_func_flagAlternative_0();
								}
								this._requirements.push(requirement);
								module.addRequirement(requirement);
							}
						}
					}
				}
				else {
					throw new NotImplementedException(this);
				}
			}
			if(this._requirements.length > 1) {
				for(let __ks_0 = 0, __ks_1 = this._requirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
					requirement = this._requirements[__ks_0];
					requirement.acquireTempName();
				}
			}
			if(this._alias !== null) {
				throw new NotImplementedException(this);
			}
		}
		flagForcefullyRebinded() {
			return this.__ks_func_flagForcefullyRebinded_rt.call(null, this, this, arguments);
		}
		__ks_func_flagForcefullyRebinded_2() {
		}
		__ks_func_flagForcefullyRebinded_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagForcefullyRebinded_2.call(that);
			}
			if(super.__ks_func_flagForcefullyRebinded_rt) {
				return super.__ks_func_flagForcefullyRebinded_rt.call(null, that, Importer.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		mode() {
			return this.__ks_func_mode_rt.call(null, this, this, arguments);
		}
		__ks_func_mode_0() {
			return ImportMode.RequireOrImport;
		}
		__ks_func_mode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_mode_0.call(that);
			}
			if(super.__ks_func_mode_rt) {
				return super.__ks_func_mode_rt.call(null, that, Importer.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_33(fragments, mode) {
			const module = this.__ks_func_module_0();
			if(this._requirements.length === 0) {
				this.__ks_func_toImportFragments_0(fragments);
			}
			else if(this._requirements.length === 1) {
				const requirement = this._requirements[0];
				const argument = module.getArgument(requirement.index());
				if(!KSType.isValue(argument)) {
					const ctrl = fragments.newControl();
					if(requirement.isSystemic() === true) {
						ctrl.code("if(!", $runtime.type.__ks_0(this), ".isValue(", requirement.getSealedName(), "))").step();
					}
					else {
						ctrl.code("if(!", $runtime.type.__ks_0(this), ".isValue(", requirement.name(), "))").step();
					}
					this.toImportFragments(ctrl);
					ctrl.done();
				}
				else if(KSType.isBoolean(argument)) {
					this.__ks_func_toImportFragments_0(fragments);
				}
			}
			else {
				const unknowns = [];
				const notpasseds = [];
				for(let __ks_0 = 0, __ks_1 = this._requirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
					requirement = this._requirements[__ks_0];
					const argument = module.getArgument(requirement.index());
					if(!KSType.isValue(argument)) {
						if(requirement.isSystemic() === true) {
							fragments.line(KSHelper.concatString("var ", requirement.tempName(), "_valuable = ", $runtime.type.__ks_0(this), ".isValue(", requirement.getSealedName(), ")"));
						}
						else {
							fragments.line(KSHelper.concatString("var ", requirement.tempName(), "_valuable = ", $runtime.type.__ks_0(this), ".isValue(", requirement.name(), ")"));
						}
						unknowns.push(requirement);
					}
					else if(KSType.isBoolean(argument)) {
						notpasseds.push(requirement);
					}
				}
				if((notpasseds.length > 0) || (unknowns.length > 0)) {
					let ctrl = fragments;
					if(unknowns.length > 0) {
						ctrl = fragments.newControl().code("if(");
						for(let index = 0, __ks_0 = unknowns.length, requirement; index < __ks_0; ++index) {
							requirement = unknowns[index];
							if(!(index === 0)) {
								ctrl.code(" || ");
							}
							ctrl.code(KSHelper.concatString("!", requirement.tempName(), "_valuable"));
						}
						ctrl.code(")").step();
					}
					if(notpasseds.length === this._requirements.length) {
						this.__ks_func_toImportFragments_0(ctrl, true);
					}
					else {
						this.__ks_func_toImportFragments_0(ctrl, false);
						for(let __ks_0 = 0, __ks_1 = notpasseds.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
							requirement = notpasseds[__ks_0];
							if(requirement.isSystemic() === true) {
								ctrl.line(KSHelper.concatString(requirement.getSealedName(), " = __ks__.", requirement.getSealedName()));
							}
							else {
								ctrl.line(KSHelper.concatString(requirement.name(), " = __ks__.", requirement.name()));
								if(requirement.isSealed() === true) {
									ctrl.line(KSHelper.concatString(requirement.getSealedName(), " = __ks__.", requirement.getSealedName()));
								}
							}
						}
						for(let __ks_0 = 0, __ks_1 = unknowns.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
							requirement = unknowns[__ks_0];
							const control = ctrl.newControl().code(KSHelper.concatString("if(!", requirement.tempName(), "_valuable)")).step();
							if(requirement.isSystemic() === true) {
								control.line(KSHelper.concatString(requirement.getSealedName(), " = __ks__.", requirement.getSealedName()));
							}
							else {
								control.line(KSHelper.concatString(requirement.name(), " = __ks__.", requirement.name()));
								if(requirement.isSealed() === true) {
									control.line(KSHelper.concatString(requirement.getSealedName(), " = __ks__.", requirement.getSealedName()));
								}
							}
							control.done();
						}
						if(unknowns.length > 0) {
							ctrl.done();
						}
					}
				}
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_33.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Importer.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ExternOrImportDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ExternOrImportDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ExternOrImportDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._declarators = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			if(this.__ks_func_module_0().isBinary() === true) {
				SyntaxException.__ks_sttc_throwNotBinary_0("extern|import", this);
			}
			for(let __ks_0 = 0, __ks_1 = this._data.declarations.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.declarations[__ks_0];
				const declarator = ExternOrImportDeclarator.__ks_new_0(data, this);
				declarator.__ks_func_initiate_0();
				this._declarators.push(declarator);
			}
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.analyse();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.prepare();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_34(fragments, mode) {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.toStatementFragments(fragments, mode);
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_34.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ExternOrImportDeclarator extends Importer {
		static __ks_new_0(...args) {
			const o = Object.create(ExternOrImportDeclarator.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ExternOrImportDeclarator.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._requirements = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			const module = this.__ks_func_module_0();
			for(let __ks_0 in this._variables) {
				const __ks_var_1 = this._variables[__ks_0];
				let variable = this._scope.__ks_func_getVariable_0(__ks_var_1.name);
				if(KSType.isValue(variable)) {
					const requirement = ROIDynamicRequirement.__ks_new_1(variable, this);
					const type = requirement.__ks_func_type_0().flagAlien();
					const origin = type.origin();
					if(KSType.isValue(origin)) {
						type.origin(TypeOrigin(KSHelper.cast(origin, "TypeOrigin", false, TypeOrigin, "Enum") | TypeOrigin.ExternOrRequire));
					}
					else {
						type.origin(TypeOrigin.ExternOrRequire);
					}
					requirement.type(type);
					this._requirements.push(requirement);
					module.addAlien(__ks_var_1.name, type);
				}
			}
			if(this._requirements.length > 1) {
				for(let __ks_0 = 0, __ks_1 = this._requirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
					requirement = this._requirements[__ks_0];
					requirement.acquireTempName();
				}
			}
			if(this._alias !== null) {
				throw new NotImplementedException(this);
			}
		}
		flagForcefullyRebinded() {
			return this.__ks_func_flagForcefullyRebinded_rt.call(null, this, this, arguments);
		}
		__ks_func_flagForcefullyRebinded_3() {
		}
		__ks_func_flagForcefullyRebinded_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagForcefullyRebinded_3.call(that);
			}
			if(super.__ks_func_flagForcefullyRebinded_rt) {
				return super.__ks_func_flagForcefullyRebinded_rt.call(null, that, Importer.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		mode() {
			return this.__ks_func_mode_rt.call(null, this, this, arguments);
		}
		__ks_func_mode_0() {
			return ImportMode.ExternOrImport;
		}
		__ks_func_mode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_mode_0.call(that);
			}
			if(super.__ks_func_mode_rt) {
				return super.__ks_func_mode_rt.call(null, that, Importer.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_35(fragments, mode) {
			if(this._requirements.length === 0) {
				this.__ks_func_toImportFragments_0(fragments);
			}
			else if(this._requirements.length === 1) {
				const requirement = this._requirements[0];
				const ctrl = fragments.newControl();
				if(requirement.isSystemic() === true) {
					ctrl.code("if(!", $runtime.type.__ks_0(this), ".isValue(", requirement.getSealedName(), "))").step();
				}
				else {
					ctrl.code("if(!", $runtime.type.__ks_0(this), ".isValue(", requirement.name(), "))").step();
				}
				this.toImportFragments(ctrl);
				ctrl.done();
			}
			else {
				for(let __ks_0 = 0, __ks_1 = this._requirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
					requirement = this._requirements[__ks_0];
					if(requirement.isSystemic() === true) {
						fragments.line(KSHelper.concatString("var ", requirement.tempName(), "_valuable = ", $runtime.type.__ks_0(this), ".isValue(", requirement.getSealedName(), ")"));
					}
					else {
						fragments.line(KSHelper.concatString("var ", requirement.tempName(), "_valuable = ", $runtime.type.__ks_0(this), ".isValue(", requirement.name(), ")"));
					}
				}
				const ctrl = fragments.newControl().code("if(");
				for(let index = 0, __ks_0 = this._requirements.length, requirement; index < __ks_0; ++index) {
					requirement = this._requirements[index];
					if(index !== 0) {
						ctrl.code(" || ");
					}
					ctrl.code(KSHelper.concatString("!", requirement.tempName(), "_valuable"));
				}
				ctrl.code(")").step();
				this.toImportFragments(ctrl, false);
				for(let __ks_0 = 0, __ks_1 = this._requirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
					requirement = this._requirements[__ks_0];
					const control = ctrl.newControl().code(KSHelper.concatString("if(!", requirement.tempName(), "_valuable)")).step();
					if(requirement.isSystemic() === true) {
						control.line(KSHelper.concatString(requirement.getSealedName(), " = __ks__.", requirement.getSealedName()));
					}
					else {
						control.line(KSHelper.concatString(requirement.name(), " = __ks__.", requirement.name()));
						if(requirement.isSealed() === true) {
							control.line(KSHelper.concatString(requirement.getSealedName(), " = __ks__.", requirement.getSealedName()));
						}
					}
					control.done();
				}
				ctrl.done();
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_35.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Importer.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class Requirement {
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
			this._index = -1;
		}
		__ks_cons_0(name, type, node) {
			this._name = name;
			this._type = type;
			this._node = node;
			if((this._type.__ks_func_isSystemic_0() === true) && (this._name === "Dictionary")) {
				node.__ks_func_module_0().flag("Dictionary");
			}
		}
		__ks_cons_1(variable, node) {
			Requirement.prototype.__ks_cons_rt.call(null, this, [variable.__ks_func_name_0(), variable.__ks_func_getDeclaredType_0(), node]);
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Variable);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			const t2 = KSType.isString;
			const t3 = value => KSType.isClassInstance(value, Type);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return Requirement.prototype.__ks_cons_1.call(that, args[0], args[1]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 3) {
				if(t2(args[0]) && t3(args[1]) && t1(args[2])) {
					return Requirement.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		alternative() {
			return this.__ks_func_alternative_rt.call(null, this, this, arguments);
		}
		__ks_func_alternative_0() {
			return this._alternative;
		}
		__ks_func_alternative_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_alternative_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		flagAlternative() {
			return this.__ks_func_flagAlternative_rt.call(null, this, this, arguments);
		}
		__ks_func_flagAlternative_0() {
			let type = this._type;
			while(KSType.isValue(type.__ks_func_minorOriginal_0())) {
				type = type.__ks_func_minorOriginal_0();
			}
			this._alternative = type;
			return this;
		}
		__ks_func_flagAlternative_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagAlternative_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		getSealedName() {
			return this.__ks_func_getSealedName_rt.call(null, this, this, arguments);
		}
		__ks_func_getSealedName_0() {
			return this._type.getSealedName();
		}
		__ks_func_getSealedName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getSealedName_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		index() {
			return this.__ks_func_index_rt.call(null, this, this, arguments);
		}
		__ks_func_index_0() {
			return this._index;
		}
		__ks_func_index_1(index) {
			this._index = index;
		}
		__ks_func_index_rt(that, proto, args) {
			const t0 = KSType.isNumber;
			if(args.length === 0) {
				return proto.__ks_func_index_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_index_1.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		isRequired() {
			return this.__ks_func_isRequired_rt.call(null, this, this, arguments);
		}
		__ks_func_isRequired_0() {
			return this._type.__ks_func_isRequired_0();
		}
		__ks_func_isRequired_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRequired_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isSealed() {
			return this.__ks_func_isSealed_rt.call(null, this, this, arguments);
		}
		__ks_func_isSealed_0() {
			return this._type.__ks_func_isSealed_0();
		}
		__ks_func_isSealed_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSealed_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isSystemic() {
			return this.__ks_func_isSystemic_rt.call(null, this, this, arguments);
		}
		__ks_func_isSystemic_0() {
			return this._type.__ks_func_isSystemic_0();
		}
		__ks_func_isSystemic_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSystemic_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_0() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		toNameFragments() {
			return this.__ks_func_toNameFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toNameFragments_0(fragments) {
			if(this._type.__ks_func_isSealed_0() === true) {
				fragments.code(this._type.getSealedName());
			}
			else {
				fragments.code(this._name);
			}
		}
		__ks_func_toNameFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toNameFragments_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		toRequiredMetadata() {
			return this.__ks_func_toRequiredMetadata_rt.call(null, this, this, arguments);
		}
		__ks_func_toRequiredMetadata_0() {
			if(this._type.__ks_func_isRequired_0() === true) {
				return true;
			}
			else if(KSType.isValue(this._alternative)) {
				return this._alternative.__ks_func_referenceIndex_0();
			}
			else {
				return false;
			}
		}
		__ks_func_toRequiredMetadata_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toRequiredMetadata_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_1(type) {
			this._type = type;
			return this;
		}
		__ks_func_type_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_type_1.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
	}
	class StaticRequirement extends Requirement {
		static __ks_new_0(...args) {
			const o = Object.create(StaticRequirement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(StaticRequirement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_0(name, type, node) {
			Requirement.prototype.__ks_cons_0.call(this, name, type, node);
		}
		__ks_cons_1(variable, node) {
			Requirement.prototype.__ks_cons_1.call(this, variable, node);
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Variable);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			const t2 = KSType.isString;
			const t3 = value => KSType.isClassInstance(value, Type);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return StaticRequirement.prototype.__ks_cons_1.call(that, args[0], args[1]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 3) {
				if(t2(args[0]) && t3(args[1]) && t1(args[2])) {
					return StaticRequirement.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments) {
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Requirement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toParameterFragments() {
			return this.__ks_func_toParameterFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toParameterFragments_0(fragments, comma) {
			const module = this._node.__ks_func_module_0();
			const argument = module.getArgument(this._index);
			if(!KSType.isValue(argument)) {
				if(comma === true) {
					fragments.code($comma);
				}
				if(this._type.__ks_func_isSystemic_0() === true) {
					fragments.code(this._type.getSealedName());
				}
				else {
					fragments.code(this._name);
					if(this._type.__ks_func_isSealed_0() === true) {
						fragments.code(", __ks_" + this._name);
					}
				}
				return true;
			}
			else if(!KSType.isBoolean(argument)) {
				if(comma === true) {
					fragments.code($comma);
				}
				if(this._type.__ks_func_isSystemic_0() === true) {
					fragments.code(this._type.getSealedName());
				}
				else {
					fragments.code(this._name);
					if(this._type.__ks_func_isSealed_0() === true) {
						fragments.code($comma, this._type.getSealedName());
					}
				}
				return true;
			}
			else {
				return comma;
			}
		}
		__ks_func_toParameterFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toParameterFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toParameterFragments_rt) {
				return super.__ks_func_toParameterFragments_rt.call(null, that, Requirement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ImportingRequirement extends StaticRequirement {
		static __ks_new_0(...args) {
			const o = Object.create(ImportingRequirement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(name, type, node) {
			StaticRequirement.prototype.__ks_cons_rt.call(null, this, [name, type, node]);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Type);
			const t2 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return ImportingRequirement.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isRequired_0() {
			return false;
		}
	}
	class DynamicRequirement extends Requirement {
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		toParameterFragments() {
			return this.__ks_func_toParameterFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toParameterFragments_1(fragments, comma) {
			const module = this._node.__ks_func_module_0();
			const argument = module.getArgument(this._index);
			if(!KSType.isValue(argument)) {
				if(comma === true) {
					fragments.code($comma);
				}
				if(this._type.__ks_func_isSystemic_0() === true) {
					fragments.code(this._type.getSealedName());
				}
				else {
					fragments.code(this._parameter);
					if(this._type.__ks_func_isSealed_0() === true) {
						fragments.code(", __ks_" + this._parameter);
					}
				}
				return true;
			}
			else if(!KSType.isBoolean(argument)) {
				if(comma === true) {
					fragments.code($comma);
				}
				if(this._type.__ks_func_isSystemic_0() === true) {
					fragments.code(this._type.getSealedName());
				}
				else {
					fragments.code(this._name);
					if(this._type.__ks_func_isSealed_0() === true) {
						fragments.code($comma, this._type.getSealedName());
					}
				}
				return true;
			}
			else {
				return comma;
			}
		}
		__ks_func_toParameterFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toParameterFragments_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toParameterFragments_rt) {
				return super.__ks_func_toParameterFragments_rt.call(null, that, Requirement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class EORDynamicRequirement extends DynamicRequirement {
		static __ks_new_0(...args) {
			const o = Object.create(EORDynamicRequirement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(variable, node) {
			DynamicRequirement.prototype.__ks_cons_1.call(this, variable, node);
			if(!(this._type.__ks_func_isSystemic_0() === true)) {
				this._parameter = this._node.__ks_func_module_0().scope().acquireTempName(false);
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Variable);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return EORDynamicRequirement.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_1(fragments) {
			const module = this._node.__ks_func_module_0();
			const argument = module.getArgument(this._index);
			if(!KSType.isValue(argument)) {
				if(this._type.__ks_func_isSystemic_0() === true) {
					const ctrl = fragments.newControl().code("if(!", $runtime.type.__ks_0(this._node), ".isValue(", this.__ks_func_getSealedName_0(), "))").step();
					ctrl.line(KSHelper.concatString(this.__ks_func_getSealedName_0(), " = {}"));
					ctrl.done();
				}
				else {
					const ctrl = fragments.newControl().code("if(!", $runtime.type.__ks_0(this._node), ".isValue(", this._name, "))").step();
					ctrl.line(this._name + " = " + this._parameter);
					if(this._type.__ks_func_isSealed_0() === true) {
						ctrl.line("__ks_" + this._name + " = {}");
						ctrl.step().code("else").step();
						ctrl.line("__ks_" + this._name + " = __ks_" + this._parameter);
					}
					ctrl.done();
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toFragments_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, DynamicRequirement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ROEDynamicRequirement extends DynamicRequirement {
		static __ks_new_0(...args) {
			const o = Object.create(ROEDynamicRequirement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(variable, node) {
			DynamicRequirement.prototype.__ks_cons_1.call(this, variable, node);
			if(!(this._type.__ks_func_isSystemic_0() === true)) {
				this._parameter = this._node.__ks_func_module_0().scope().acquireTempName(false);
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Variable);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return ROEDynamicRequirement.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_2(fragments) {
			const module = this._node.__ks_func_module_0();
			const argument = module.getArgument(this._index);
			if(!KSType.isValue(argument)) {
				if(this._type.__ks_func_isSystemic_0() === true) {
					const ctrl = fragments.newControl().code("if(!", $runtime.type.__ks_0(this._node), ".isValue(", this._type.getSealedName(), "))").step();
					ctrl.line(KSHelper.concatString(this._type.getSealedName(), " = {}"));
					ctrl.done();
				}
				else {
					const ctrl = fragments.newControl().code("if(", $runtime.type.__ks_0(this._node), ".isValue(", this._parameter, "))").step();
					ctrl.line(this._name + " = " + this._parameter);
					if(this._type.__ks_func_isSealed_0() === true) {
						ctrl.line("__ks_" + this._name + " = __ks_" + this._parameter);
						ctrl.step().code("else").step();
						ctrl.line("__ks_" + this._name + " = {}");
					}
					ctrl.done();
				}
			}
			else if(KSType.isBoolean(argument)) {
				if(this._type.__ks_func_isSealed_0() === true) {
					fragments.line(KSHelper.concatString($runtime.immutableScope.__ks_0(this._node), this._type.getSealedName(), " = {}"));
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toFragments_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, DynamicRequirement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ROIDynamicRequirement extends StaticRequirement {
		static __ks_new_0(...args) {
			const o = Object.create(ROIDynamicRequirement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ROIDynamicRequirement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_0(name, type, node) {
			StaticRequirement.prototype.__ks_cons_0.call(this, name, type, node);
		}
		__ks_cons_1(variable, importer) {
			StaticRequirement.prototype.__ks_cons_rt.call(null, this, [variable, this._importer = importer]);
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, Variable);
			const t1 = KSType.isValue;
			const t2 = KSType.isString;
			const t3 = value => KSType.isClassInstance(value, Type);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return ROIDynamicRequirement.prototype.__ks_cons_1.call(that, args[0], args[1]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 3) {
				if(t2(args[0]) && t3(args[1]) && t4(args[2])) {
					return ROIDynamicRequirement.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		acquireTempName() {
			return this.__ks_func_acquireTempName_rt.call(null, this, this, arguments);
		}
		__ks_func_acquireTempName_0() {
			this._tempName = this._node.__ks_func_module_0().scope().acquireTempName(false);
		}
		__ks_func_acquireTempName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_acquireTempName_0.call(that);
			}
			if(super.__ks_func_acquireTempName_rt) {
				return super.__ks_func_acquireTempName_rt.call(null, that, StaticRequirement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		tempName() {
			return this.__ks_func_tempName_rt.call(null, this, this, arguments);
		}
		__ks_func_tempName_0() {
			return this._tempName;
		}
		__ks_func_tempName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_tempName_0.call(that);
			}
			if(super.__ks_func_tempName_rt) {
				return super.__ks_func_tempName_rt.call(null, that, StaticRequirement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	const $localFileRegex = /^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[\\\/])/;
	class IncludeDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(IncludeDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(IncludeDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._declarators = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			let directory = this.__ks_func_directory_0();
			let x = null;
			for(let __ks_0 = 0, __ks_1 = this._data.declarations.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.declarations[__ks_0];
				const file = data.file;
				if($localFileRegex.test(file) === true) {
					x = fs.resolve(directory, file);
					if((fs.isFile(x) === true) || (fs.isFile(x = KSHelper.concatString(x, $extensions.source)) === true)) {
						if(this.__ks_func_canLoadLocalFile_0(x) === true) {
							this.loadLocalFile(data, x);
						}
					}
					else {
						IOException.throwNotFoundFile(file, directory, this);
					}
				}
				else {
					let modulePath = file;
					let moduleVersion = "";
					let nf = true;
					for(let __ks_2 = 0, __ks_3 = $nodeModulesPaths(directory), __ks_4 = __ks_3.length, dir; __ks_2 < __ks_4 && nf; ++__ks_2) {
						dir = __ks_3[__ks_2];
						x = fs.resolve(dir, file);
						if(fs.isFile(x) === true) {
							nf = false;
						}
						else if(fs.isFile(KSHelper.concatString(x, $extensions.source)) === true) {
							x = KSHelper.concatString(x, $extensions.source);
							modulePath = KSHelper.concatString(modulePath, $extensions.source);
							nf = false;
						}
						else {
							let pkgfile = path.join(x, "package.json");
							if(fs.isFile(pkgfile) === true) {
								let pkg = KSHelper.try(() => JSON.parse(fs.readFile(pkgfile)), null);
								if(KSType.isValue(pkg)) {
									if(KSType.isValue(pkg.kaoscript) && (fs.isFile(path.join(x, pkg.kaoscript.main)) === true)) {
										x = path.join(x, pkg.kaoscript.main);
										modulePath = path.join(modulePath, pkg.kaoscript.main);
										nf = false;
									}
									else if(KSType.isValue(pkg.main)) {
										if(fs.isFile(path.join(x, pkg.main)) === true) {
											x = path.join(x, pkg.main);
											modulePath = path.join(modulePath, pkg.main);
											nf = false;
										}
										else if(fs.isFile(path.join(x, KSHelper.concatString(pkg.main, $extensions.source))) === true) {
											x = path.join(x, KSHelper.concatString(pkg.main, $extensions.source));
											modulePath = path.join(modulePath, KSHelper.concatString(pkg.main, $extensions.source));
											nf = false;
										}
										else if(fs.isFile(path.join(x, pkg.main, "index" + $extensions.source)) === true) {
											x = path.join(x, pkg.main, "index" + $extensions.source);
											modulePath = path.join(modulePath, pkg.main, "index" + $extensions.source);
											nf = false;
										}
									}
									if(!nf) {
										moduleVersion = pkg.version;
									}
								}
							}
							if(nf && (fs.isFile(path.join(x, "index" + $extensions.source)) === true)) {
								x = path.join(x, "index" + $extensions.source);
								modulePath = path.join(modulePath, "index" + $extensions.source);
								nf = false;
							}
						}
					}
					if(nf) {
						IOException.throwNotFoundModule(file, directory, this);
					}
					if(this.canLoadModuleFile(x, file, modulePath, moduleVersion) === true) {
						this.loadModuleFile(data, x, file, modulePath, moduleVersion);
					}
				}
			}
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.analyse();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_enhance_0() {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.enhance();
			}
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.prepare();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		canLoadLocalFile() {
			return this.__ks_func_canLoadLocalFile_rt.call(null, this, this, arguments);
		}
		__ks_func_canLoadLocalFile_0(file) {
			return !(this.__ks_func_module_0().hasInclude(file) === true);
		}
		__ks_func_canLoadLocalFile_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_canLoadLocalFile_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_canLoadLocalFile_rt) {
				return super.__ks_func_canLoadLocalFile_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		canLoadModuleFile() {
			return this.__ks_func_canLoadModuleFile_rt.call(null, this, this, arguments);
		}
		__ks_func_canLoadModuleFile_0(file, name, path, version) {
			let versions, __ks_0;
			if(KSType.isValue(__ks_0 = this.__ks_func_module_0().listIncludeVersions(file, path)) ? (versions = __ks_0, true) : false) {
				if(KSOperator.gt(versions.length, 1) || (versions[0] === version)) {
					return false;
				}
				else {
					SyntaxException.__ks_sttc_throwMismatchedInclude_0(name, this);
				}
			}
			else {
				return true;
			}
		}
		__ks_func_canLoadModuleFile_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
					return proto.__ks_func_canLoadModuleFile_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_canLoadModuleFile_rt) {
				return super.__ks_func_canLoadModuleFile_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_export_7(recipient, enhancement) {
			if(enhancement === void 0 || enhancement === null) {
				enhancement = false;
			}
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.export(recipient, enhancement);
			}
		}
		__ks_func_export_0(recipient) {
			return this.__ks_func_export_7(recipient);
		}
		__ks_func_export_1(recipient, enhancement) {
			return this.__ks_func_export_7(recipient, enhancement);
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_export_7.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			return super.__ks_func_export_rt.call(null, that, Statement.prototype, args);
		}
		__ks_func_isExportable_0() {
			return true;
		}
		loadLocalFile() {
			return this.__ks_func_loadLocalFile_rt.call(null, this, this, arguments);
		}
		__ks_func_loadLocalFile_0(declaration, path) {
			const module = this.__ks_func_module_0();
			let data = fs.readFile(path);
			module.addHash(path, module.compiler().sha256(path, data));
			module.addInclude(path);
			try {
				data = module.parse(data, path);
			}
			catch(error) {
				error.filename = path;
				throw error;
			}
			const declarator = new IncludeDeclarator(declaration, data, path, this);
			declarator.__ks_func_initiate_0();
			this._declarators.push(declarator);
		}
		__ks_func_loadLocalFile_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_loadLocalFile_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_loadLocalFile_rt) {
				return super.__ks_func_loadLocalFile_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		loadModuleFile() {
			return this.__ks_func_loadModuleFile_rt.call(null, this, this, arguments);
		}
		__ks_func_loadModuleFile_0(declaration, path, moduleName, modulePath, moduleVersion) {
			const module = this.__ks_func_module_0();
			let data = fs.readFile(path);
			module.addHash(path, module.compiler().sha256(path, data));
			module.addInclude(path, modulePath, moduleVersion);
			try {
				data = module.parse(data, path);
			}
			catch(error) {
				error.filename = path;
				throw error;
			}
			const declarator = new IncludeDeclarator(declaration, data, path, moduleName, this);
			declarator.__ks_func_initiate_0();
			this._declarators.push(declarator);
		}
		__ks_func_loadModuleFile_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 5) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4])) {
					return proto.__ks_func_loadModuleFile_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			if(super.__ks_func_loadModuleFile_rt) {
				return super.__ks_func_loadModuleFile_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		registerMacro() {
			return this.__ks_func_registerMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_registerMacro_5(name, macro) {
			return this._parent.registerMacro(name, macro);
		}
		__ks_func_registerMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_registerMacro_5.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_registerMacro_rt) {
				return super.__ks_func_registerMacro_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toFragments_1(fragments, mode) {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.toFragments(fragments, mode);
			}
		}
	}
	class IncludeAgainDeclaration extends IncludeDeclaration {
		static __ks_new_0(...args) {
			const o = Object.create(IncludeAgainDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(IncludeAgainDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_canLoadLocalFile_0(file) {
			return true;
		}
		__ks_func_canLoadModuleFile_0(file, name, path, version) {
			return true;
		}
	}
	class IncludeDeclarator extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(IncludeDeclarator.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._offsetEnd = 0;
			this._offsetStart = 0;
			this._statements = [];
		}
		__ks_cons_0(declaration, data, file, moduleName = null, parent) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			Statement.prototype.__ks_cons_0.call(this, data, parent);
			this._file = file;
			this._options = Attribute.configure(declaration, this._options, AttributeTarget.Global, super.__ks_func_file_0(), true);
			this._directory = path.dirname(file);
			if(moduleName === null) {
				this._includePath = parent.includePath();
			}
			else if((parent.includePath() === null) || !($localFileRegex.test(moduleName) === true)) {
				this._includePath = moduleName;
			}
			else {
				this._includePath = path.join(parent.includePath(), moduleName);
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isString;
			const t2 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			const t3 = value => KSType.isString(value) || KSType.isNull(value);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[2]) && t2(args[3])) {
					return IncludeDeclarator.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], void 0, args[3]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[2]) && t3(args[3]) && t2(args[4])) {
					return IncludeDeclarator.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_initiate_0() {
			Attribute.configure(this._data, this._parent.__ks_func_parent_0()._options, AttributeTarget.Global, this.__ks_func_file_0());
			const offset = this._scope.__ks_func_getLineOffset_0();
			this._offsetStart = this._scope.__ks_func_line_0();
			this._scope.setLineOffset(this._offsetStart);
			for(let __ks_0 = 0, __ks_1 = this._data.body.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.body[__ks_0];
				this._scope.line(data.start.line);
				let statement = $compile.statement(data, this, void 0);
				if(KSType.isValue(statement)) {
					this._statements.push(statement);
					statement.initiate();
				}
			}
			this._scope.line(this._data.end.line);
			this._offsetEnd = (offset + this._scope.__ks_func_line_0()) - this._offsetStart;
			this._scope.setLineOffset(this._offsetEnd);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._scope.setLineOffset(this._offsetStart);
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.analyse();
			}
			this._scope.setLineOffset(this._offsetEnd);
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_enhance_0() {
			this._scope.setLineOffset(this._offsetStart);
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.enhance();
			}
			this._scope.setLineOffset(this._offsetEnd);
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._scope.setLineOffset(this._offsetStart);
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.prepare();
			}
			this._scope.setLineOffset(this._offsetEnd);
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._scope.setLineOffset(this._offsetStart);
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.translate();
			}
			this._scope.setLineOffset(this._offsetEnd);
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_directory_0() {
			return this._directory;
		}
		__ks_func_export_8(recipient, enhancement) {
			if(enhancement === void 0 || enhancement === null) {
				enhancement = false;
			}
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(statement.isExportable() === true) {
					statement.export(recipient, enhancement);
				}
			}
		}
		__ks_func_export_0(recipient) {
			return this.__ks_func_export_8(recipient);
		}
		__ks_func_export_1(recipient, enhancement) {
			return this.__ks_func_export_8(recipient, enhancement);
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_export_8.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			return super.__ks_func_export_rt.call(null, that, Statement.prototype, args);
		}
		__ks_func_file_0() {
			return this._file;
		}
		__ks_func_includePath_1() {
			return this._includePath;
		}
		isUsingStaticVariableBefore() {
			return this.__ks_func_isUsingStaticVariableBefore_rt.call(null, this, this, arguments);
		}
		__ks_func_isUsingStaticVariableBefore_1(__ks_class_1, varname, stmt) {
			const line = stmt.__ks_func_line_0();
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(!(KSOperator.lt(statement.line(), line) && (statement !== stmt))) {
					break;
				}
				if(statement.isUsingStaticVariable(__ks_class_1, varname) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isUsingStaticVariableBefore_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Statement);
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
					return proto.__ks_func_isUsingStaticVariableBefore_1.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_isUsingStaticVariableBefore_rt) {
				return super.__ks_func_isUsingStaticVariableBefore_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		recipient() {
			return this.__ks_func_recipient_rt.call(null, this, this, arguments);
		}
		__ks_func_recipient_1() {
			return this.__ks_func_module_0();
		}
		__ks_func_recipient_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_recipient_1.call(that);
			}
			if(super.__ks_func_recipient_rt) {
				return super.__ks_func_recipient_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		registerMacro() {
			return this.__ks_func_registerMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_registerMacro_6(name, macro) {
			return this._parent.registerMacro(name, macro);
		}
		__ks_func_registerMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_registerMacro_6.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_registerMacro_rt) {
				return super.__ks_func_registerMacro_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toFragments_1(fragments, mode) {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.toFragments(fragments, mode);
			}
		}
	}
	class NamespaceDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(NamespaceDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._exports = new Dictionary();
			this._topNodes = [];
		}
		__ks_cons_0(data, parent, scope) {
			Statement.prototype.__ks_cons_rt.call(null, this, [data, parent, new NamespaceScope(scope)]);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return NamespaceDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_initiate_0() {
			this._name = this._data.name.name;
			this._type = NamedContainerType.__ks_new_0(this._name, NamespaceType.__ks_new_0(this._scope));
			this._variable = this._scope.__ks_func_parent_0().define(this._name, true, this._type, this);
			this._statements = [];
			for(let __ks_0 = 0, __ks_1 = this._data.statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._data.statements[__ks_0];
				this._scope.line(statement.start.line);
				this._statements.push(statement = $compile.statement(statement, this));
				statement.initiate();
			}
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.analyse();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_enhance_0() {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.enhance();
			}
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(statement.isExportable() === true) {
					this._scope.line(statement.line());
					statement.export(this, true);
				}
			}
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.prepare();
			}
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(statement.isExportable() === true) {
					this._scope.line(statement.line());
					statement.export(this, false);
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_addInitializableVariable_1(variable, node) {
		}
		addTopNode() {
			return this.__ks_func_addTopNode_rt.call(null, this, this, arguments);
		}
		__ks_func_addTopNode_9(node) {
			this._topNodes.push(node);
		}
		__ks_func_addTopNode_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addTopNode_9.call(that, args[0]);
				}
			}
			if(super.__ks_func_addTopNode_rt) {
				return super.__ks_func_addTopNode_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_authority_0() {
			return this;
		}
		__ks_func_export_0(recipient) {
			recipient.export(this._name, this._variable);
		}
		__ks_func_export_9(name, variable) {
			this._type.addProperty(name, variable.getDeclaredType());
			this._exports[name] = variable;
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_export_0.call(that, args[0]);
				}
			}
			if(args.length === 2) {
				if(t1(args[0]) && t0(args[1])) {
					return proto.__ks_func_export_9.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_export_rt.call(null, that, Statement.prototype, args);
		}
		exportMacro() {
			return this.__ks_func_exportMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_exportMacro_3(name, macro) {
			this._parent.exportMacro(KSHelper.concatString(this._name, ".", name), macro);
		}
		__ks_func_exportMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_exportMacro_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_exportMacro_rt) {
				return super.__ks_func_exportMacro_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_includePath_1() {
			return null;
		}
		__ks_func_initializeVariable_1(variable, expression, node) {
			let __ks_var_1 = this._scope.__ks_func_getDefinedVariable_0(variable.name);
			if(KSType.isValue(__ks_var_1)) {
				__ks_var_1.__ks_func_setDeclaredType_0(variable.type);
			}
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_10() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_10.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		publishMacro() {
			return this.__ks_func_publishMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_publishMacro_1(name, macro) {
			this._scope.addMacro(name, macro);
			this._parent.registerMacro(KSHelper.concatString(this._name, ".", name), macro);
		}
		__ks_func_publishMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_publishMacro_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_publishMacro_rt) {
				return super.__ks_func_publishMacro_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		recipient() {
			return this.__ks_func_recipient_rt.call(null, this, this, arguments);
		}
		__ks_func_recipient_2() {
			return this;
		}
		__ks_func_recipient_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_recipient_2.call(that);
			}
			if(super.__ks_func_recipient_rt) {
				return super.__ks_func_recipient_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		registerMacro() {
			return this.__ks_func_registerMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_registerMacro_7(name, macro) {
			this._scope.addMacro(name, macro);
		}
		__ks_func_registerMacro_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_registerMacro_7.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_registerMacro_rt) {
				return super.__ks_func_registerMacro_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toExportFragements() {
			return this.__ks_func_toExportFragements_rt.call(null, this, this, arguments);
		}
		__ks_func_toExportFragements_0(fragments) {
			const line = fragments.newLine().code("return ");
			const object = line.newObject();
			for(const name in this._exports) {
				const variable = this._exports[name];
				variable.getDeclaredType().toExportFragment(object, name, variable);
			}
			object.done();
			line.done();
		}
		__ks_func_toExportFragements_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toExportFragements_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toExportFragements_rt) {
				return super.__ks_func_toExportFragements_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_36(fragments, mode) {
			const line = fragments.newLine().code($runtime.scope.__ks_0(this), this._name, $equals, $runtime.helper.__ks_0(this), ".namespace(function()");
			const block = line.newBlock();
			for(let __ks_0 = 0, __ks_1 = this._topNodes.length, node; __ks_0 < __ks_1; ++__ks_0) {
				node = this._topNodes[__ks_0];
				node.toAuthorityFragments(block);
			}
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				block.compile(statement);
			}
			this.toExportFragements(block);
			block.done();
			line.code(")").done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_36.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_18() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_18.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ReturnStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ReturnStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ReturnStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._await = false;
			this._async = false;
			this._enumCasting = false;
			this._exceptions = false;
			this._function = null;
			this._value = null;
			this._temp = null;
			this._type = Type.Any;
		}
		__ks_cons_0(data, parent, scope) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			if(scope === void 0) {
				scope = null;
			}
			Statement.prototype.__ks_cons_0.call(this, data, parent, scope);
			let ancestor = parent;
			while(KSType.isValue(ancestor) && !(KSType.isClassInstance(ancestor, AnonymousFunctionExpression) || KSType.isClassInstance(ancestor, ArrowFunctionExpression) || KSType.isClassInstance(ancestor, FunctionDeclarator) || KSType.isClassInstance(ancestor, ClassMethodDeclaration) || KSType.isClassInstance(ancestor, ImplementClassMethodDeclaration) || KSType.isClassInstance(ancestor, ImplementNamespaceFunctionDeclaration))) {
				ancestor = ancestor.__ks_func_parent_0();
			}
			if(KSType.isValue(ancestor)) {
				this._function = ancestor;
			}
		}
		__ks_cons_1(value, parent) {
			if(value === void 0) {
				value = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			Statement.prototype.__ks_cons_rt.call(null, this, [value.data(), parent, parent.__ks_func_scope_0()]);
			this._value = value;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			const t2 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return ReturnStatement.prototype.__ks_cons_1.call(that, args[0], args[1]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 3) {
				if(t1(args[1]) && t2(args[2])) {
					return ReturnStatement.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			if(KSType.isValue(this._data.value)) {
				this._value = $compile.expression(this._data.value, this);
				this._value.analyse();
				this._await = this._value.isAwait();
				this._exceptions = this._value.hasExceptions();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(this._value !== null) {
				this._value.prepare();
				this._value.acquireReusable(false);
				this._value.releaseReusable();
				if(this._afterwards.length !== 0) {
					this._temp = this._scope.acquireTempName(this);
				}
				this.assignTempVariables(this._scope);
				this._type = this._value.type();
			}
			if(KSType.isValue(this._function)) {
				this._async = this._function.type().isAsync();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			if(this._value !== null) {
				this._value.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		acquireReusable() {
			return this.__ks_func_acquireReusable_rt.call(null, this, this, arguments);
		}
		__ks_func_acquireReusable_0(acquire) {
			if(this._value !== null) {
				this._value.acquireReusable(acquire);
			}
		}
		__ks_func_acquireReusable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_acquireReusable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_acquireReusable_rt) {
				return super.__ks_func_acquireReusable_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_checkReturnType_0(type) {
			if(KSType.isValue(this._value)) {
				if(KSType.isClassInstance(this._value, UnaryOperatorForcedTypeCasting)) {
					this._type = type;
				}
				else if(!(this._type.__ks_func_isExplicit_0() === true) && (this._type.__ks_func_isAny_0() === true)) {
				}
				else if(this._type.__ks_func_isSubsetOf_0(type, MatchingMode(MatchingMode.Exact | MatchingMode.NonNullToNull | MatchingMode.Subclass)) === true) {
				}
				else if((this._type.__ks_func_isEnum_0() === true) && (this._type.__ks_func_isSubsetOf_0(type, MatchingMode(MatchingMode.Exact | MatchingMode.NonNullToNull | MatchingMode.Subclass | MatchingMode.AutoCast)) === true)) {
					this._type = type;
					this._enumCasting = true;
				}
				else if(this._type.__ks_func_isUnion_0() === true) {
					let cast = false;
					for(let __ks_0 = 0, __ks_1 = this._type.types(), __ks_2 = __ks_1.length, tt; __ks_0 < __ks_2; ++__ks_0) {
						tt = __ks_1[__ks_0];
						if(tt.isSubsetOf(type, MatchingMode(MatchingMode.Exact | MatchingMode.NonNullToNull | MatchingMode.Subclass)) === true) {
						}
						else if((tt.isEnum() === true) && (tt.discard().type().isSubsetOf(type, MatchingMode(MatchingMode.Exact | MatchingMode.NonNullToNull | MatchingMode.Subclass)) === true)) {
							cast = true;
						}
						else {
							TypeException.__ks_sttc_throwUnexpectedReturnType_0(type, this._type, this);
						}
					}
					if(cast) {
						this._type = type;
						this._enumCasting = true;
					}
				}
				else {
					TypeException.__ks_sttc_throwUnexpectedReturnType_0(type, this._type, this);
				}
			}
		}
		hasExceptions() {
			return this.__ks_func_hasExceptions_rt.call(null, this, this, arguments);
		}
		__ks_func_hasExceptions_1() {
			return this._exceptions;
		}
		__ks_func_hasExceptions_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasExceptions_1.call(that);
			}
			if(super.__ks_func_hasExceptions_rt) {
				return super.__ks_func_hasExceptions_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getUnpreparedType() {
			return this.__ks_func_getUnpreparedType_rt.call(null, this, this, arguments);
		}
		__ks_func_getUnpreparedType_0() {
			return this._value.getUnpreparedType();
		}
		__ks_func_getUnpreparedType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getUnpreparedType_0.call(that);
			}
			if(super.__ks_func_getUnpreparedType_rt) {
				return super.__ks_func_getUnpreparedType_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_initializeVariable_5(variable, expression) {
			if(variable.instance) {
				if(variable.immutable && (this._parent.isInitializedVariable("this." + variable.name) === true)) {
					ReferenceException.__ks_sttc_throwImmutableField_0(variable.name, this);
				}
				if(!(this._parent.isUsingInstanceVariableBefore(variable.name, this) === true)) {
					this._parent.initializeVariable(variable, expression, this);
				}
			}
			else if(variable.static) {
				if(!(this._parent.isUsingStaticVariableBefore(variable.class, variable.name, this) === true)) {
					this._parent.initializeVariable(variable, expression, this);
				}
			}
			else {
				this._parent.initializeVariable(variable, expression, this);
			}
		}
		__ks_func_initializeVariable_rt(that, proto, args) {
			const t0 = value => KSType.isStructInstance(value, VariableBrief);
			const t1 = value => KSType.isClassInstance(value, Expression);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_initializeVariable_5.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_initializeVariable_rt.call(null, that, Statement.prototype, args);
		}
		__ks_func_isAwait_0() {
			return this._await;
		}
		__ks_func_isExit_0() {
			return true;
		}
		isExpectingType() {
			return this.__ks_func_isExpectingType_rt.call(null, this, this, arguments);
		}
		__ks_func_isExpectingType_0() {
			return true;
		}
		__ks_func_isExpectingType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExpectingType_0.call(that);
			}
			if(super.__ks_func_isExpectingType_rt) {
				return super.__ks_func_isExpectingType_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isUsingVariable_0(name) {
			return (this._value !== null) && (this._value.isUsingVariable(name) === true);
		}
		__ks_func_listNonLocalVariables_0(scope, variables) {
			if(this._value !== null) {
				this._value.listNonLocalVariables(scope, variables);
			}
			return variables;
		}
		__ks_func_reference_0() {
			return this._temp;
		}
		releaseReusable() {
			return this.__ks_func_releaseReusable_rt.call(null, this, this, arguments);
		}
		__ks_func_releaseReusable_0() {
			if(this._value !== null) {
				this._value.releaseReusable();
			}
		}
		__ks_func_releaseReusable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_releaseReusable_0.call(that);
			}
			if(super.__ks_func_releaseReusable_rt) {
				return super.__ks_func_releaseReusable_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_setExpectedType_0(type) {
			if(type.__ks_func_isNever_0() === true) {
				TypeException.__ks_sttc_throwUnexpectedReturnedValue_0(this);
			}
			else if(type.__ks_func_isVoid_0() === true) {
				if(this._value !== null) {
					TypeException.__ks_sttc_throwUnexpectedReturnedValue_0(this);
				}
			}
			else {
				if(this._value === null) {
					TypeException.__ks_sttc_throwExpectedReturnedValue_0(type, this);
				}
				else {
					this._value.setExpectedType(type);
				}
			}
		}
		toAwaitStatementFragments() {
			return this.__ks_func_toAwaitStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toAwaitStatementFragments_1(fragments, statements) {
			const line = fragments.newLine();
			const item = this._value.toFragments(line, Mode.None);
			item([this]);
			line.done();
		}
		__ks_func_toAwaitStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toAwaitStatementFragments_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toAwaitStatementFragments_rt) {
				return super.__ks_func_toAwaitStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toCastingFragments() {
			return this.__ks_func_toCastingFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toCastingFragments_0(fragments, mode) {
			if(this._enumCasting) {
				this._value.toCastingFragments(fragments, mode);
			}
			else {
				fragments.compile(this._value);
			}
		}
		__ks_func_toCastingFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toCastingFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toCastingFragments_rt) {
				return super.__ks_func_toCastingFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toFragments_1(fragments, mode) {
			if(this._value === null) {
				if(this._async) {
					fragments.line("return __ks_cb()");
				}
				else {
					fragments.line("return", this._data);
				}
			}
			else if(this._temp === null) {
				if(this._assignments.length !== 0) {
					fragments.newLine().code(KSOperator.addOrConcat($runtime.scope.__ks_0(this), this._assignments.join(", "))).done();
				}
				if(this._value.isAwaiting() === true) {
					return KSHelper.vcurry(this.toAwaitStatementFragments, this, fragments);
				}
				else {
					const line = fragments.newLine().code("return ");
					if(this._async) {
						line.code("__ks_cb(null, ");
						this.toCastingFragments(line, mode);
						line.code(")");
					}
					else {
						this.toCastingFragments(line, mode);
					}
					line.done();
				}
			}
			else {
				if(this._value.isAwaiting() === true) {
					throw new NotImplementedException(this);
				}
				else {
					__ks_Array.__ks_func_remove_0.call(this._assignments, [this._temp]);
					if(this._assignments.length !== 0) {
						fragments.newLine().code(KSOperator.addOrConcat($runtime.scope.__ks_0(this), this._assignments.join(", "))).done();
					}
					const line = fragments.newLine().code(KSHelper.concatString($runtime.scope.__ks_0(this), this._temp, " = "));
					this.toCastingFragments(line, mode);
					line.done();
					for(let __ks_0 = 0, __ks_1 = this._afterwards.length, afterward; __ks_0 < __ks_1; ++__ks_0) {
						afterward = this._afterwards[__ks_0];
						afterward.toAfterwardFragments(fragments);
					}
					if(this._async) {
						fragments.line("return __ks_cb(null, " + this._temp + ")");
					}
					else {
						fragments.line("return " + this._temp);
					}
				}
			}
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_19() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_19.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	const $switch = (() => {
		const d = new Dictionary();
		d.length = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length === 1) {
					if(t0(args[0])) {
						return __ks_rt.__ks_0.call(null, args[0]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(elements) {
				let min = 0;
				let max = 0;
				for(let __ks_0 = 0, __ks_1 = elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = elements[__ks_0];
					if(element.spread === true) {
						max = Infinity;
					}
					else {
						++min;
						++max;
					}
				}
				return (() => {
					const d = new Dictionary();
					d.min = min;
					d.max = max;
					return d;
				})();
			};
			return __ks_rt;
		})();
		return d;
	})();
	class SwitchStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(SwitchStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(SwitchStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._castingEnum = false;
			this._clauses = [];
			this._hasDefaultClause = false;
			this._hasLateInitVariables = false;
			this._initializedVariables = new Dictionary();
			this._lateInitVariables = new Dictionary();
			this._name = null;
			this._reusableValue = false;
			this._usingFallthrough = false;
			this._value = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._value = $compile.expression(this._data.expression, this);
			this._value.analyse();
			this._reusableValue = !KSType.isClassInstance(this._value, IdentifierLiteral);
			this._hasDefaultClause = false;
			let condition = null, binding = null;
			for(let index = 0, __ks_0 = this._data.clauses.length, data; index < __ks_0; ++index) {
				data = this._data.clauses[index];
				const clause = (() => {
					const d = new Dictionary();
					d.hasTest = KSType.isValue(data.filter);
					d.bindings = [];
					d.conditions = [];
					d.scope = this.newScope(this._scope, ScopeType.InlineBlock);
					return d;
				})();
				this._clauses.push(clause);
				clause.scope.index = index;
				for(let __ks_1 = 0, __ks_2 = data.conditions.length, ccData; __ks_1 < __ks_2; ++__ks_1) {
					ccData = data.conditions[__ks_1];
					if(KSHelper.valueOf(ccData.kind) === NodeKind.SwitchConditionArray.value) {
						condition = new SwitchConditionArray(ccData, this, clause.scope);
					}
					else if(KSHelper.valueOf(ccData.kind) === NodeKind.SwitchConditionEnum.value) {
						throw new NotImplementedException(this);
					}
					else if(KSHelper.valueOf(ccData.kind) === NodeKind.SwitchConditionObject.value) {
						throw new NotImplementedException(this);
					}
					else if(KSHelper.valueOf(ccData.kind) === NodeKind.SwitchConditionRange.value) {
						condition = new SwitchConditionRange(ccData, this, clause.scope);
					}
					else if(KSHelper.valueOf(ccData.kind) === NodeKind.SwitchConditionType.value) {
						condition = new SwitchConditionType(ccData, this, clause.scope);
					}
					else {
						condition = new SwitchConditionValue(ccData, this, clause.scope);
					}
					condition.__ks_func_analyse_0();
					clause.conditions.push(condition);
				}
				if(clause.conditions.length === 0) {
					this._hasDefaultClause = true;
				}
				for(let __ks_1 = 0, __ks_2 = data.bindings.length, bbData; __ks_1 < __ks_2; ++__ks_1) {
					bbData = data.bindings[__ks_1];
					if(KSHelper.valueOf(bbData.kind) === NodeKind.ArrayBinding.value) {
						binding = new SwitchBindingArray(bbData, this, clause.scope);
						clause.hasTest = true;
					}
					else if(KSHelper.valueOf(bbData.kind) === NodeKind.ObjectBinding.value) {
						throw new NotImplementedException(this);
					}
					else if(KSHelper.valueOf(bbData.kind) === NodeKind.SwitchTypeCasting.value) {
						binding = new SwitchBindingType(bbData, this, clause.scope);
					}
					else {
						binding = new SwitchBindingValue(bbData, this, clause.scope);
					}
					binding.__ks_func_analyse_0();
					clause.bindings.push(binding);
				}
				clause.filter = new SwitchFilter(data, this, clause.scope);
				clause.filter.analyse();
				clause.body = $compile.block(data.body, this, clause.scope);
			}
			for(let __ks_0 = 0, __ks_1 = this._clauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._clauses[__ks_0];
				clause.body.analyse();
			}
			if(this._hasLateInitVariables && !this._hasDefaultClause) {
				for(const name in this._lateInitVariables) {
					const value = this._lateInitVariables[name];
					if(value.variable.isImmutable() === true) {
						SyntaxException.__ks_sttc_throwMissingAssignmentSwitchNoDefault_0(name, this);
					}
				}
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._value.prepare();
			this._valueType = this._value.type();
			if(this._reusableValue) {
				this._name = this._scope.__ks_func_acquireTempName_0(false);
			}
			const enumValue = this._valueType.__ks_func_isEnum_0();
			const inferables = new Dictionary();
			let enumConditions = 0;
			let maxConditions = 0;
			let maxInferables = this._clauses.length;
			for(let index = 0, __ks_0 = this._clauses.length, clause; index < __ks_0; ++index) {
				clause = this._clauses[index];
				for(let __ks_1 = 0, __ks_2 = clause.conditions.length, condition; __ks_1 < __ks_2; ++__ks_1) {
					condition = clause.conditions[__ks_1];
					condition.prepare();
					if(condition.isEnum() === true) {
						++enumConditions;
					}
					++maxConditions;
				}
				for(let __ks_1 = 0, __ks_2 = clause.bindings.length, binding; __ks_1 < __ks_2; ++__ks_1) {
					binding = clause.bindings[__ks_1];
					binding.prepare();
				}
				clause.filter.prepare();
				clause.body.prepare();
				if(this._usingFallthrough) {
					clause.name = this._scope.__ks_func_acquireTempName_0(false);
				}
				if(clause.body.isExit() === true) {
					--maxInferables;
				}
				else {
					{
						let __ks_1 = clause.body.scope().listUpdatedInferables();
						for(const name in __ks_1) {
							const data = __ks_1[name];
							if(KSType.isValue(inferables[name])) {
								if(inferables[name].union === true) {
									inferables[name].data.type.addType(data.type);
								}
								else if(!(data.type.equals(inferables[name].data.type) === true)) {
									inferables[name].data.type = Type.union(this._scope, inferables[name].data.type, data.type);
									inferables[name].union = inferables[name].data.type.isUnion();
								}
								inferables[name].count++;
							}
							else {
								inferables[name] = (() => {
									const d = new Dictionary();
									d.count = 1;
									d.union = false;
									d.data = data;
									return d;
								})();
							}
						}
					}
				}
			}
			if((enumConditions !== 0) || (enumValue === true)) {
				if((enumValue === true) && (enumConditions === maxConditions)) {
				}
				else {
					for(let __ks_0 = 0, __ks_1 = this._clauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
						clause = this._clauses[__ks_0];
						for(let __ks_2 = 0, __ks_3 = clause.conditions.length, condition; __ks_2 < __ks_3; ++__ks_2) {
							condition = clause.conditions[__ks_2];
							condition.setCastingEnum(true);
						}
					}
					if((enumValue === true) || (this._valueType.__ks_func_isAny_0() === true)) {
						this._castingEnum = true;
						if(!this._reusableValue) {
							this._name = this._scope.__ks_func_acquireTempName_0(false);
							this._reusableValue = true;
						}
					}
				}
			}
			for(const name in this._initializedVariables) {
				const data = this._initializedVariables[name];
				const types = [];
				let initializable = true;
				for(let index = 0, __ks_0 = data.clauses.length, clause; index < __ks_0; ++index) {
					clause = data.clauses[index];
					if(clause.initializable === true) {
						types.push(clause.type);
					}
					else if(!(clause.body.isExit() === true)) {
						initializable = false;
						break;
					}
				}
				if(initializable) {
					data.variable.type = Type.union(this._scope, ...types);
					this._parent.initializeVariable(data.variable, this, this);
				}
			}
			for(const name in this._lateInitVariables) {
				const data = this._lateInitVariables[name];
				const types = [];
				for(let index = 0, __ks_0 = data.clauses.length, clause; index < __ks_0; ++index) {
					clause = data.clauses[index];
					if(clause.initializable === true) {
						types.push(clause.type);
					}
					else if(!(this._clauses[index].body.isExit() === true)) {
						SyntaxException.throwMissingAssignmentSwitchClause(name, this._clauses[index].body);
					}
				}
				const type = Type.union(this._scope, ...types);
				this._parent.initializeVariable(VariableBrief(name, type), this, this);
			}
			for(const name in inferables) {
				const inferable = inferables[name];
				if(inferable.count === maxInferables) {
					this._scope.updateInferable(name, inferable.data, this);
				}
				else if(inferable.data.isVariable === true) {
					this._scope.replaceVariable(name, inferable.data.type, true, false, this);
				}
			}
			if(this._reusableValue) {
				this._scope.releaseTempName(this._name);
			}
			else {
				this._name = this._scope.getVariable(this._data.expression.name).__ks_func_getSecureName_0();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._value.translate();
			for(let __ks_0 = 0, __ks_1 = this._clauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._clauses[__ks_0];
				for(let __ks_2 = 0, __ks_3 = clause.conditions.length, condition; __ks_2 < __ks_3; ++__ks_2) {
					condition = clause.conditions[__ks_2];
					condition.translate();
				}
				for(let __ks_2 = 0, __ks_3 = clause.bindings.length, binding; __ks_2 < __ks_3; ++__ks_2) {
					binding = clause.bindings[__ks_2];
					binding.translate();
				}
				clause.filter.translate();
				clause.body.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_addInitializableVariable_1(variable, node) {
			const name = variable.name();
			if(!this._hasDefaultClause) {
				SyntaxException.throwMissingAssignmentSwitchNoDefault(name, this);
			}
			let clauseIndex = null;
			for(let index = 0, __ks_0 = this._clauses.length, clause; index < __ks_0; ++index) {
				clause = this._clauses[index];
				if(clause.body === node) {
					clauseIndex = index;
					break;
				}
			}
			let map = this._lateInitVariables[name];
			if(KSType.isValue(map)) {
				map.clauses[clauseIndex] = (() => {
					const d = new Dictionary();
					d.initializable = true;
					d.type = null;
					return d;
				})();
			}
			else {
				const map = (() => {
					const d = new Dictionary();
					d.variable = variable;
					d.clauses = [];
					return d;
				})();
				for(let i = 0, __ks_0 = this._data.clauses.length; i < __ks_0; ++i) {
					if(i === clauseIndex) {
						map.clauses[i] = (() => {
							const d = new Dictionary();
							d.initializable = true;
							d.type = null;
							return d;
						})();
					}
					else {
						map.clauses[i] = (() => {
							const d = new Dictionary();
							d.initializable = false;
							d.type = null;
							return d;
						})();
					}
				}
				this._lateInitVariables[name] = map;
			}
			this._hasLateInitVariables = true;
			this._parent.addInitializableVariable(variable, node);
		}
		__ks_func_defineVariables_2(left, scope) {
			let alreadyDeclared = null;
			for(let __ks_0 = 0, __ks_1 = left.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
				name = __ks_1[__ks_0];
				if(scope.hasDefinedVariable(name) === true) {
					SyntaxException.throwAlreadyDeclared(name, this);
				}
				else if(this._options.rules.noUndefined === true) {
					ReferenceException.throwNotDefined(name, this);
				}
				else {
					scope.define(name, false, AnyType.NullableUnexplicit, true, this);
				}
			}
		}
		__ks_func_defineVariables_1(left, scope, expression, leftMost) {
			return this.__ks_func_defineVariables_2(left, scope, expression, leftMost);
		}
		__ks_func_defineVariables_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_defineVariables_2.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_defineVariables_rt.call(null, that, Statement.prototype, args);
		}
		__ks_func_checkReturnType_0(type) {
			for(let __ks_0 = 0, __ks_1 = this._clauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._clauses[__ks_0];
				clause.body.checkReturnType(type);
			}
		}
		flagUsingFallthrough() {
			return this.__ks_func_flagUsingFallthrough_rt.call(null, this, this, arguments);
		}
		__ks_func_flagUsingFallthrough_0() {
			this._usingFallthrough = true;
			return this;
		}
		__ks_func_flagUsingFallthrough_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagUsingFallthrough_0.call(that);
			}
			if(super.__ks_func_flagUsingFallthrough_rt) {
				return super.__ks_func_flagUsingFallthrough_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_initializeVariable_1(variable, expression, node) {
			const {name, type} = variable;
			let map = this._lateInitVariables[name];
			if(KSType.isValue(map)) {
				let clause = null;
				for(let i = 0, __ks_0 = this._clauses.length, cc; i < __ks_0; ++i) {
					cc = this._clauses[i];
					if(cc.body === node) {
						if(!KSType.isValue(map.clauses[i])) {
							ReferenceException.__ks_sttc_throwImmutable_0(name, expression);
						}
						clause = map.clauses[i];
						break;
					}
				}
				if(clause.type !== null) {
					if(variable.isImmutable() === true) {
						ReferenceException.__ks_sttc_throwImmutable_0(name, expression);
					}
					else if(!type.matchContentOf(clause.type)) {
						TypeException.throwInvalidAssignement(name, clause.type, type, expression);
					}
				}
				else {
					clause.type = type;
				}
				const clone = node.__ks_func_scope_0().getVariable(name).clone();
				if(clone.isDefinitive() === true) {
					clone.setRealType(type);
				}
				else {
					clone.setDeclaredType(type, true).flagDefinitive();
				}
				node.__ks_func_scope_0().replaceVariable(name, clone);
			}
			else if(!this._hasDefaultClause) {
			}
			else if(KSType.isValue((map = this._initializedVariables[name]))) {
				let clause = null;
				for(let i = 0, __ks_0 = this._clauses.length, cc; i < __ks_0; ++i) {
					cc = this._clauses[i];
					if(cc.body === node) {
						if(!KSType.isValue(map.clauses[i])) {
							ReferenceException.__ks_sttc_throwImmutable_0(name, expression);
						}
						clause = map.clauses[i];
						break;
					}
				}
				if(clause.type !== null) {
					if(variable.isImmutable() === true) {
						ReferenceException.__ks_sttc_throwImmutable_0(name, expression);
					}
					else if(!type.matchContentOf(clause.type)) {
						TypeException.throwInvalidAssignement(name, clause.type, type, expression);
					}
				}
				else {
					clause.type = type;
					clause.initializable = true;
				}
				node.__ks_func_scope_0().updateInferable(name, variable, expression);
			}
			else {
				const map = (() => {
					const d = new Dictionary();
					d.variable = variable;
					d.clauses = [];
					return d;
				})();
				for(let index = 0, __ks_0 = this._clauses.length, clause; index < __ks_0; ++index) {
					clause = this._clauses[index];
					if(clause.body === node) {
						map.clauses[index] = (() => {
							const d = new Dictionary();
							d.initializable = true;
							d.type = type;
							return d;
						})();
					}
					else {
						map.clauses[index] = (() => {
							const d = new Dictionary();
							d.initializable = false;
							d.type = null;
							return d;
						})();
					}
				}
				this._initializedVariables[name] = map;
			}
		}
		__ks_func_isExit_0() {
			if(!this._hasDefaultClause) {
				return false;
			}
			for(let __ks_0 = 0, __ks_1 = this._clauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._clauses[__ks_0];
				if(!(clause.body.isExit() === true)) {
					return false;
				}
			}
			return true;
		}
		__ks_func_isJumpable_0() {
			return true;
		}
		__ks_func_isLateInitializable_0() {
			return true;
		}
		__ks_func_isUsingVariable_0(name) {
			if(this._value.isUsingVariable(name) === true) {
				return true;
			}
			for(let __ks_0 = 0, __ks_1 = this._clauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._clauses[__ks_0];
				if(clause.body.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		toFallthroughFragments() {
			return this.__ks_func_toFallthroughFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFallthroughFragments_0(fragments) {
			if(KSOperator.lt(this._nextClauseIndex, this._clauses.length)) {
				fragments.line(KSHelper.concatString(this._clauses[this._nextClauseIndex].name, "()"));
			}
		}
		__ks_func_toFallthroughFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toFallthroughFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toFallthroughFragments_rt) {
				return super.__ks_func_toFallthroughFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_37(fragments, mode) {
			if(this._clauses.length === 0) {
				return;
			}
			if(this._reusableValue) {
				const line = fragments.newLine().code($runtime.scope.__ks_0(this), this._name, " = ").compile(this._value);
				if(this._castingEnum) {
					if(this._valueType.__ks_func_isEnum_0() === true) {
						line.code(".value");
					}
					else if(this._valueType.__ks_func_isAny_0() === true) {
						line.code(".valueOf()");
					}
				}
				line.done();
			}
			else if(this._castingEnum) {
				const line = fragments.newLine().code($runtime.scope.__ks_0(this), this._name, " = ", this._data.expression.name);
				if(this._valueType.__ks_func_isEnum_0() === true) {
					line.code(".value");
				}
				else if(this._valueType.__ks_func_isAny_0() === true) {
					line.code(".valueOf()");
				}
				line.done();
			}
			for(let clauseIdx = 0, __ks_0 = this._clauses.length, clause; clauseIdx < __ks_0; ++clauseIdx) {
				clause = this._clauses[clauseIdx];
				for(let __ks_1 = 0, __ks_2 = clause.conditions.length, condition; __ks_1 < __ks_2; ++__ks_1) {
					condition = clause.conditions[__ks_1];
					condition.toStatementFragments(fragments);
				}
				clause.filter.toStatementFragments(fragments);
				if(this._usingFallthrough) {
					const line = fragments.newLine().code(KSHelper.concatString($runtime.scope.__ks_0(this), clause.name, " = () =>"));
					const block = line.newBlock();
					this._nextClauseIndex = clauseIdx + 1;
					for(let __ks_1 = 0, __ks_2 = clause.bindings.length, binding; __ks_1 < __ks_2; ++__ks_1) {
						binding = clause.bindings[__ks_1];
						binding.toFragments(block);
					}
					clause.body.toFragments(block, mode);
					block.done();
					line.done();
				}
			}
			let ctrl = fragments.newControl();
			let we = false;
			for(let clauseIdx = 0, __ks_0 = this._clauses.length, clause; clauseIdx < __ks_0; ++clauseIdx) {
				clause = this._clauses[clauseIdx];
				if(clause.conditions.length !== 0) {
					if(we) {
						SyntaxException.__ks_sttc_throwAfterDefaultClause_0(this);
					}
					if(clauseIdx !== 0) {
						ctrl.step().code("else if(");
					}
					else {
						ctrl.code("if(");
					}
					for(let i = 0, __ks_1 = clause.conditions.length, condition; i < __ks_1; ++i) {
						condition = clause.conditions[i];
						if(i !== 0) {
							ctrl.code(" || ");
						}
						condition.toBooleanFragments(ctrl, this._name);
					}
					clause.filter.toBooleanFragments(ctrl, true);
					ctrl.code(")").step();
					if(this._usingFallthrough) {
						ctrl.line(KSHelper.concatString(clause.name, "()"));
					}
					else {
						for(let __ks_1 = 0, __ks_2 = clause.bindings.length, binding; __ks_1 < __ks_2; ++__ks_1) {
							binding = clause.bindings[__ks_1];
							binding.toFragments(ctrl);
						}
						clause.body.toFragments(ctrl, mode);
					}
				}
				else if(clause.hasTest === true) {
					if(clauseIdx !== 0) {
						ctrl.step().code("else if(");
					}
					else {
						ctrl.code("if(");
					}
					clause.filter.toBooleanFragments(ctrl, false);
					ctrl.code(")").step();
					if(this._usingFallthrough) {
						ctrl.line(KSHelper.concatString(clause.name, "()"));
					}
					else {
						for(let __ks_1 = 0, __ks_2 = clause.bindings.length, binding; __ks_1 < __ks_2; ++__ks_1) {
							binding = clause.bindings[__ks_1];
							binding.toFragments(ctrl);
						}
						clause.body.toFragments(ctrl, mode);
					}
				}
				else {
					if(clauseIdx !== 0) {
						ctrl.step().code("else");
					}
					else {
						ctrl.code("if(true)");
					}
					we = true;
					ctrl.step();
					if(this._usingFallthrough) {
						ctrl.line(KSHelper.concatString(clause.name, "()"));
					}
					else {
						for(let __ks_1 = 0, __ks_2 = clause.bindings.length, binding; __ks_1 < __ks_2; ++__ks_1) {
							binding = clause.bindings[__ks_1];
							binding.toFragments(ctrl);
						}
						clause.body.toFragments(ctrl, mode);
					}
				}
			}
			ctrl.done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_37.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class SwitchBindingArray extends AbstractNode {
		static __ks_new_0() {
			const o = Object.create(SwitchBindingArray.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(SwitchBindingArray.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(SwitchBindingArray.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._array = $compile.expression(this._data, this);
			this._array.setAssignment(AssignmentType.Expression);
			this._array.analyse();
			this._parent.defineVariables(this._array, this._scope);
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._array.prepare();
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._array.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_9(fragments) {
			let line = fragments.newLine();
			line.code($runtime.scope.__ks_0(this));
			this._array.toAssignmentFragments(line, new Literal(this._parent._name, this));
			line.done();
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toFragments_9.call(that, args[0]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class SwitchBindingType extends AbstractNode {
		static __ks_new_0() {
			const o = Object.create(SwitchBindingType.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(SwitchBindingType.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(SwitchBindingType.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._scope.define(this._data.name.name, false, Type.__ks_sttc_fromAST_0(this._data.type, this), true, this);
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_10(fragments) {
			fragments.line($runtime.scope.__ks_0(this), this._data.name.name, " = ", this._parent._name);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toFragments_10.call(that, args[0]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class SwitchBindingValue extends AbstractNode {
		static __ks_new_0() {
			const o = Object.create(SwitchBindingValue.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(SwitchBindingValue.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(SwitchBindingValue.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._scope.define(this._data.name, false, this);
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_11(fragments) {
			fragments.line($runtime.scope.__ks_0(this), this._data.name, " = ", this._parent._name);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toFragments_11.call(that, args[0]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class SwitchConditionArray extends AbstractNode {
		static __ks_new_0() {
			const o = Object.create(SwitchConditionArray.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(SwitchConditionArray.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(SwitchConditionArray.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._flatten = false;
			this._name = null;
			this._values = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._flatten = this._options.format.destructuring === "es5";
			for(let __ks_0 = 0, __ks_1 = this._data.values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._data.values[__ks_0];
				if(KSHelper.valueOf(value.kind) !== NodeKind.OmittedExpression.value) {
					if(KSHelper.valueOf(value.kind) === NodeKind.SwitchConditionRange.value) {
						value = SwitchConditionRange.__ks_new_1(value, this);
					}
					else {
						value = SwitchConditionValue.__ks_new_1(value, this);
					}
					value.__ks_func_analyse_0();
					this._values.push(value);
				}
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(KSOperator.gt(this._values.length, 0)) {
				this._name = this._scope.__ks_func_parent_0().acquireTempName(false);
			}
			for(let __ks_0 = 0, __ks_1 = this._values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._values[__ks_0];
				value.prepare();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._values[__ks_0];
				value.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isEnum() {
			return this.__ks_func_isEnum_rt.call(null, this, this, arguments);
		}
		__ks_func_isEnum_0() {
			return false;
		}
		__ks_func_isEnum_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isEnum_0.call(that);
			}
			if(super.__ks_func_isEnum_rt) {
				return super.__ks_func_isEnum_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toBooleanFragments() {
			return this.__ks_func_toBooleanFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toBooleanFragments_0(fragments, name) {
			this.__ks_func_module_0().flag("Type");
			fragments.code("(", $runtime.typeof.__ks_0("Array", this), "(", name, ")");
			let mm = $switch.length(this._data.values);
			if(mm.min === mm.max) {
				if(KSOperator.neq(mm.min, Infinity)) {
					fragments.code(" && ", name, ".length === ", mm.min);
				}
			}
			else {
				fragments.code(" && ", name, ".length >= ", mm.min);
				if(KSOperator.neq(mm.max, Infinity)) {
					fragments.code(" && ", name, ".length <= ", mm.max);
				}
			}
			if(KSType.isValue(this._name)) {
				fragments.code(" && ", this._name, "(", name, ")");
			}
			fragments.code(")");
		}
		__ks_func_toBooleanFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toBooleanFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toBooleanFragments_rt) {
				return super.__ks_func_toBooleanFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_38(fragments) {
			if(KSOperator.gt(this._values.length, 0)) {
				let line = fragments.newLine();
				if(this._flatten) {
					const name = Literal.__ks_new_0("__ks__", this);
					line.code($runtime.scope.__ks_0(this), this._name, " = function(__ks__)");
					const block = line.newBlock();
					block.done();
				}
				else {
					line.code($runtime.scope.__ks_0(this), this._name, " = ([");
					for(let i = 0, __ks_0 = this._data.values.length, value; i < __ks_0; ++i) {
						value = this._data.values[i];
						if(i !== 0) {
							line.code(", ");
						}
						if(KSHelper.valueOf(value.kind) === NodeKind.OmittedExpression.value) {
							if(value.spread === true) {
								line.code("...");
							}
						}
						else {
							line.code("__ks_", i);
						}
					}
					line.code("]) => ");
					let index = 0;
					for(let i = 0, __ks_0 = this._data.values.length, value; i < __ks_0; ++i) {
						value = this._data.values[i];
						if(KSHelper.valueOf(value.kind) !== NodeKind.OmittedExpression.value) {
							if(index !== 0) {
								line.code(" && ");
							}
							this._values[index].toBooleanFragments(line, "__ks_" + i);
							index++;
						}
					}
				}
				line.done();
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toStatementFragments_38.call(that, args[0]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class SwitchConditionRange extends AbstractNode {
		static __ks_new_0() {
			const o = Object.create(SwitchConditionRange.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(SwitchConditionRange.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(SwitchConditionRange.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._from = true;
			this._to = true;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			if(KSType.isValue(this._data.from)) {
				this._left = $compile.expression(this._data.from, this);
			}
			else {
				this._left = $compile.expression(this._data.then, this);
				this._from = false;
			}
			if(KSType.isValue(this._data.to)) {
				this._right = $compile.expression(this._data.to, this);
			}
			else {
				this._right = $compile.expression(this._data.til, this);
				this._to = false;
			}
			this._left.analyse();
			this._right.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._left.prepare();
			this._right.prepare();
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._left.translate();
			this._right.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isEnum() {
			return this.__ks_func_isEnum_rt.call(null, this, this, arguments);
		}
		__ks_func_isEnum_1() {
			return false;
		}
		__ks_func_isEnum_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isEnum_1.call(that);
			}
			if(super.__ks_func_isEnum_rt) {
				return super.__ks_func_isEnum_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toBooleanFragments() {
			return this.__ks_func_toBooleanFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toBooleanFragments_1(fragments, name) {
			fragments.code(name, (this._from === true) ? " >= " : ">").compile(this._left).code(" && ").code(name, (this._to === true) ? " <= " : "<").compile(this._right);
		}
		__ks_func_toBooleanFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toBooleanFragments_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toBooleanFragments_rt) {
				return super.__ks_func_toBooleanFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_39(fragments) {
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toStatementFragments_39.call(that, args[0]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class SwitchConditionType extends AbstractNode {
		static __ks_new_0() {
			const o = Object.create(SwitchConditionType.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(SwitchConditionType.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(SwitchConditionType.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._type = Type.__ks_sttc_fromAST_0(this._data.type, this);
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isEnum() {
			return this.__ks_func_isEnum_rt.call(null, this, this, arguments);
		}
		__ks_func_isEnum_2() {
			return false;
		}
		__ks_func_isEnum_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isEnum_2.call(that);
			}
			if(super.__ks_func_isEnum_rt) {
				return super.__ks_func_isEnum_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toBooleanFragments() {
			return this.__ks_func_toBooleanFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toBooleanFragments_2(fragments, name) {
			this._type.__ks_func_toPositiveTestFragments_0(fragments, Literal.__ks_new_1(false, this, KSHelper.notNull(this._scope), name));
		}
		__ks_func_toBooleanFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toBooleanFragments_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toBooleanFragments_rt) {
				return super.__ks_func_toBooleanFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_40(fragments) {
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toStatementFragments_40.call(that, args[0]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class SwitchConditionValue extends AbstractNode {
		static __ks_new_0() {
			const o = Object.create(SwitchConditionValue.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(SwitchConditionValue.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(SwitchConditionValue.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._castingEnum = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._value = $compile.expression(this._data, this);
			this._value.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._value.prepare();
			this._type = this._value.type();
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._value.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isEnum() {
			return this.__ks_func_isEnum_rt.call(null, this, this, arguments);
		}
		__ks_func_isEnum_3() {
			return this._type.__ks_func_isEnum_0();
		}
		__ks_func_isEnum_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isEnum_3.call(that);
			}
			if(super.__ks_func_isEnum_rt) {
				return super.__ks_func_isEnum_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setCastingEnum() {
			return this.__ks_func_setCastingEnum_rt.call(null, this, this, arguments);
		}
		__ks_func_setCastingEnum_0(castingEnum) {
			this._castingEnum = castingEnum;
		}
		__ks_func_setCastingEnum_rt(that, proto, args) {
			const t0 = KSType.isBoolean;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setCastingEnum_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_setCastingEnum_rt) {
				return super.__ks_func_setCastingEnum_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toBooleanFragments() {
			return this.__ks_func_toBooleanFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toBooleanFragments_3(fragments, name) {
			fragments.code(name, " === ").compile(this._value);
			if(this._castingEnum) {
				if(this._type.__ks_func_isEnum_0() === true) {
					fragments.code(".value");
				}
				else if(this._type.__ks_func_isAny_0() === true) {
					fragments.code(".valueOf()");
				}
			}
		}
		__ks_func_toBooleanFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toBooleanFragments_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toBooleanFragments_rt) {
				return super.__ks_func_toBooleanFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_41(fragments) {
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toStatementFragments_41.call(that, args[0]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class SwitchFilter extends AbstractNode {
		static __ks_new_0() {
			const o = Object.create(SwitchFilter.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(SwitchFilter.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(SwitchFilter.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._bindings = [];
			this._filter = null;
			this._flatten = false;
			this._name = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._flatten = this._options.format.destructuring === "es5";
			if(KSType.isValue(this._data.filter)) {
				if(KSOperator.gt(this._data.bindings.length, 0)) {
					this._name = this._scope.__ks_func_parent_0().acquireTempName(false);
					for(let __ks_0 = 0, __ks_1 = this._data.bindings.length, data; __ks_0 < __ks_1; ++__ks_0) {
						data = this._data.bindings[__ks_0];
						const binding = $compile.expression(data, this, void 0);
						binding.analyse();
						this._bindings.push(binding);
					}
				}
				this._filter = $compile.expression(this._data.filter, this);
				this._filter.analyse();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(this._filter !== null) {
				for(let __ks_0 = 0, __ks_1 = this._bindings.length, binding; __ks_0 < __ks_1; ++__ks_0) {
					binding = this._bindings[__ks_0];
					binding.prepare();
				}
				this._filter.prepare();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			if(KSType.isValue(this._filter)) {
				for(let __ks_0 = 0, __ks_1 = this._bindings.length, binding; __ks_0 < __ks_1; ++__ks_0) {
					binding = this._bindings[__ks_0];
					binding.translate();
				}
				this._filter.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toBooleanFragments() {
			return this.__ks_func_toBooleanFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toBooleanFragments_4(fragments, nf) {
			let mm = null;
			for(let __ks_0 = 0, __ks_1 = this._data.bindings.length, binding; __ks_0 < __ks_1; ++__ks_0) {
				binding = this._data.bindings[__ks_0];
				if(KSHelper.valueOf(binding.kind) === NodeKind.ArrayBinding.value) {
					this.__ks_func_module_0().flag("Type");
					if(nf === true) {
						fragments.code(" && ");
					}
					else {
						nf = true;
					}
					fragments.code($runtime.typeof.__ks_0("Array", this), "(", this._parent._name, ")");
					mm = $switch.length(binding.elements);
					if(mm.min === mm.max) {
						if(KSOperator.neq(mm.min, Infinity)) {
							fragments.code(" && ", this._parent._name, ".length === ", mm.min);
						}
					}
					else {
						fragments.code(" && ", this._parent._name, ".length >= ", mm.min);
						if(KSOperator.neq(mm.max, Infinity)) {
							fragments.code(" && ", this._parent._name, ".length <= ", mm.max);
						}
					}
				}
			}
			if(KSType.isValue(this._name)) {
				if(nf === true) {
					fragments.code(" && ");
				}
				fragments.code(this._name, "(", this._parent._name, ")");
				this._scope.__ks_func_parent_0().releaseTempName(this._name);
			}
			else if(KSType.isValue(this._filter)) {
				if(nf === true) {
					fragments.code(" && ").wrapBoolean(this._filter, Mode.None, Junction.AND);
				}
				else {
					fragments.compileBoolean(this._filter);
				}
			}
		}
		__ks_func_toBooleanFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toBooleanFragments_4.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toBooleanFragments_rt) {
				return super.__ks_func_toBooleanFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_42(fragments) {
			if(this._name !== null) {
				let line = fragments.newLine();
				if(this._flatten) {
					const name = Literal.__ks_new_0("__ks__", this);
					line.code($runtime.scope.__ks_0(this), this._name, " = function(__ks__)");
					const block = line.newBlock();
					const ln = block.newLine().code($runtime.scope.__ks_0(this));
					let comma = false;
					for(let __ks_0 = 0, __ks_1 = this._bindings.length, binding; __ks_0 < __ks_1; ++__ks_0) {
						binding = this._bindings[__ks_0];
						if(comma) {
							line.code(", ");
						}
						else {
							comma = true;
						}
						binding.toFlatFragments(ln, name);
					}
					ln.done();
					block.newLine().code("return ").compile(this._filter).done();
					block.done();
				}
				else {
					line.code($runtime.scope.__ks_0(this), this._name, " = (");
					for(let i = 0, __ks_0 = this._bindings.length, binding; i < __ks_0; ++i) {
						binding = this._bindings[i];
						if(i !== 0) {
							line.code(", ");
						}
						line.compile(binding);
					}
					line.code(") => ").compile(this._filter);
				}
				line.done();
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toStatementFragments_42.call(that, args[0]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ThrowStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(ThrowStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._function = null;
			this._inSource = true;
			this._value = null;
		}
		__ks_cons_0(data, parent, scope) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			if(scope === void 0) {
				scope = null;
			}
			Statement.prototype.__ks_cons_0.call(this, data, parent, scope);
			let ancestor = parent;
			let __ks_0;
			do {
				if(KSType.isClassInstance(ancestor, AnonymousFunctionExpression) || KSType.isClassInstance(ancestor, ArrowFunctionExpression) || KSType.isClassInstance(ancestor, FunctionDeclarator) || KSType.isClassInstance(ancestor, ClassMethodDeclaration) || KSType.isClassInstance(ancestor, ImplementClassMethodDeclaration) || KSType.isClassInstance(ancestor, ImplementNamespaceFunctionDeclaration)) {
					this._function = ancestor;
					this._inSource = false;
					break;
				}
				else if(KSType.isClassInstance(ancestor, ClassConstructorDeclaration) || KSType.isClassInstance(ancestor, ClassDestructorDeclaration)) {
					this._inSource = false;
					break;
				}
			}
			while(KSType.isValue(__ks_0 = ancestor.__ks_func_parent_0()) ? (ancestor = __ks_0, true) : false)
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			if(args.length === 3) {
				if(t0(args[1]) && t1(args[2])) {
					return ThrowStatement.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._value = $compile.expression(this._data.value, this);
			this._value.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._value.prepare();
			let type, __ks_0;
			if(KSType.isValue(__ks_0 = this._value.type().discardReference()) ? (type = __ks_0, false) : true) {
				TypeException.__ks_sttc_throwRequireClass_0(this);
			}
			else if((type.isNamed() === true) && KSType.isClassInstance(type.type(), ClassType)) {
				Exception.validateReportedError(type, this);
			}
			else if(!(type.isAny() === true)) {
				TypeException.__ks_sttc_throwRequireClass_0(this);
			}
			else if(this._inSource && !(this.__ks_func_module_0().isBinary() === true)) {
				SyntaxException.__ks_sttc_throwUnreportedError_0(this);
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isExit_0() {
			return true;
		}
		__ks_func_isUsingVariable_0(name) {
			return this._value.isUsingVariable(name);
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._value.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_43(fragments, mode) {
			if(KSType.isValue(this._function) ? this._function.type().isAsync() === true : false) {
				fragments.newLine().code("return __ks_cb(").compile(this._value).code(")").done();
			}
			else {
				fragments.newLine().code("throw ").compile(this._value).done();
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_43.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	const TryState = KSHelper.enum(Number, {
		Body: 0,
		Catch: 1,
		Finally: 2
	});
	class TryStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(TryStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(TryStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._await = false;
			this._catchClause = null;
			this._catchClauses = [];
			this._exit = false;
			this._finalizer = null;
			this._hasCatch = false;
			this._hasFinally = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			let scope = null;
			if(KSType.isValue(this._data.catchClauses)) {
				let variable = null, body = null, type = null;
				for(let __ks_0 = 0, __ks_1 = this._data.catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
					clause = this._data.catchClauses[__ks_0];
					let __ks_2;
					if(KSType.isValue(__ks_2 = this._scope.getVariable(clause.type.name)) ? (variable = __ks_2, false) : true) {
						ReferenceException.throwNotDefined(clause.type.name, this);
					}
					if(KSType.isValue(clause.binding)) {
						scope = this.newScope(this._scope, ScopeType.InlineBlock);
						scope.define(clause.binding.name, false, Type.Any, this);
					}
					else {
						scope = this._scope;
					}
					body = $compile.block(clause.body, this, scope);
					body.analyse();
					type = $compile.expression(clause.type, this, scope);
					type.analyse();
					this._catchClauses.push((() => {
						const d = new Dictionary();
						d.body = body;
						d.type = type;
						return d;
					})());
				}
			}
			if(KSType.isValue(this._data.catchClause)) {
				if(KSType.isValue(this._data.catchClause.binding)) {
					scope = this.newScope(this._scope, ScopeType.InlineBlock);
					scope.define(this._data.catchClause.binding.name, false, Type.Any, this);
				}
				else {
					scope = this._scope;
				}
				this._catchClause = $compile.block(this._data.catchClause.body, this, scope);
				this._catchClause.analyse();
			}
			this._block = $compile.block($ast.body.__ks_0(this._data), this);
			this._block.__ks_func_analyse_0();
			this._await = this._block.__ks_func_isAwait_3();
			if(KSType.isValue(this._data.finalizer)) {
				this._finalizer = $compile.block(this._data.finalizer, this);
				this._finalizer.analyse();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._hasCatch = this._catchClauses.length !== 0;
			for(let __ks_0 = 0, __ks_1 = this._catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._catchClauses[__ks_0];
				clause.body.prepare();
				clause.type.prepare();
			}
			if(this._catchClause !== null) {
				this._catchClause.prepare();
				this._hasCatch = true;
			}
			this._block.__ks_func_prepare_0();
			this._exit = (this._block.__ks_func_isExit_3() === true) && this._hasCatch && (this._catchClause.isExit() === true);
			if(this._finalizer !== null) {
				this._finalizer.prepare();
				this._hasFinally = true;
				if(this._finalizer.isExit() === true) {
					this._exit = true;
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._block.__ks_func_translate_0();
			for(let __ks_0 = 0, __ks_1 = this._catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._catchClauses[__ks_0];
				clause.body.translate();
				clause.type.translate();
			}
			if(KSType.isValue(this._catchClause)) {
				this._catchClause.translate();
			}
			if(KSType.isValue(this._finalizer)) {
				this._finalizer.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_checkReturnType_0(type) {
			this._block.__ks_func_checkReturnType_1(type);
			for(let __ks_0 = 0, __ks_1 = this._catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._catchClauses[__ks_0];
				clause.body.translate();
			}
			KSType.isValue(this._catchClause) ? this._catchClause.checkReturnType(type) : null;
			KSType.isValue(this._finalizer) ? this._finalizer.checkReturnType(type) : null;
		}
		getErrorVarname() {
			return this.__ks_func_getErrorVarname_rt.call(null, this, this, arguments);
		}
		__ks_func_getErrorVarname_0() {
			if((this._catchClauses.length === 0) && (KSType.isValue(this._data.catchClause) && KSType.isValue(this._data.catchClause.binding))) {
				return this._data.catchClause.binding.name;
			}
			else {
				return this._scope.__ks_func_acquireTempName_0(false);
			}
		}
		__ks_func_getErrorVarname_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getErrorVarname_0.call(that);
			}
			if(super.__ks_func_getErrorVarname_rt) {
				return super.__ks_func_getErrorVarname_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isAwait_0() {
			return this._await;
		}
		__ks_func_isConsumedError_0(error) {
			if(this._catchClauses.length > 0) {
				for(let __ks_0 = 0, __ks_1 = this._catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
					clause = this._catchClauses[__ks_0];
					if(error.matchInheritanceOf(clause.type.type()) === true) {
						return true;
					}
				}
				return false;
			}
			else {
				return true;
			}
		}
		__ks_func_isExit_0() {
			return this._exit;
		}
		__ks_func_isJumpable_0() {
			return true;
		}
		__ks_func_isUsingVariable_0(name) {
			if(this._block.__ks_func_isUsingVariable_3(name) === true) {
				return true;
			}
			for(let __ks_0 = 0, __ks_1 = this._catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._catchClauses[__ks_0];
				if(clause.body.isUsingVariable(name) === true) {
					return true;
				}
			}
			if((this._catchClause !== null) && (this._catchClause.isUsingVariable(name) === true)) {
				return true;
			}
			return this._hasFinally && (this._finalizer.isUsingVariable(name) === true);
		}
		toAwaitStatementFragments() {
			return this.__ks_func_toAwaitStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toAwaitStatementFragments_2(fragments, statements) {
			if(statements.length !== 0) {
				this._continueVarname = this._scope.__ks_func_acquireTempName_0();
				const line = fragments.newLine().code($runtime.scope.__ks_0(this), this._continueVarname, " = () =>");
				const block = line.newBlock();
				let index = -1;
				let item = null;
				for(let i = 0, __ks_0 = statements.length, statement; i < __ks_0 && (index === -1); ++i) {
					statement = statements[i];
					let __ks_1;
					if(KSType.isValue(__ks_1 = statement.toFragments(block, Mode.None)) ? (item = __ks_1, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(statements.slice(index + 1));
				}
				block.done();
				line.done();
			}
			if(KSType.isValue(this._finalizer)) {
				this._state = TryState.Finally;
				this._finallyVarname = this._scope.__ks_func_acquireTempName_0();
				const line = fragments.newLine().code($runtime.scope.__ks_0(this), this._finallyVarname, " = () =>");
				line.newBlock().compile(this._finalizer).done();
				line.done();
			}
			if((this._catchClauses.length !== 0) || KSType.isValue(this._catchClause)) {
				this._state = TryState.Catch;
				this._catchVarname = this._scope.__ks_func_acquireTempName_0();
				const error = this.__ks_func_getErrorVarname_0();
				const line = fragments.newLine().code($runtime.scope.__ks_0(this), this._catchVarname, KSHelper.concatString(" = (", error, ") =>"));
				const block = line.newBlock();
				this.toCatchFragments(block, error);
				this._scope.releaseTempName(error);
				block.done();
				line.done();
			}
			this._state = TryState.Body;
			const ctrl = fragments.newControl().code("try").step();
			ctrl.compile(this._block, Mode.None);
			ctrl.step().code("catch(__ks_e)").step();
			if(KSType.isValue(this._catchVarname)) {
				ctrl.line(this._catchVarname + "(__ks_e)");
			}
			else if(KSType.isValue(this._finallyVarname)) {
				ctrl.line(this._finallyVarname + "()");
			}
			else if(KSType.isValue(this._continueVarname)) {
				ctrl.line(this._continueVarname + "()");
			}
			ctrl.done();
		}
		__ks_func_toAwaitStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toAwaitStatementFragments_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toAwaitStatementFragments_rt) {
				return super.__ks_func_toAwaitStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toAwaitExpressionFragments() {
			return this.__ks_func_toAwaitExpressionFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toAwaitExpressionFragments_1(fragments, parameters, statements) {
			fragments.code("(__ks_e");
			for(let __ks_0 = 0, __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = parameters[__ks_0];
				fragments.code($comma).compile(parameter);
			}
			fragments.code(") =>");
			const block = fragments.newBlock();
			const ctrl = block.newControl().code("if(__ks_e)").step();
			if(this._state === TryState.Body) {
				if(KSType.isValue(this._catchVarname)) {
					ctrl.line(this._catchVarname + "(__ks_e)");
				}
				else if(KSType.isValue(this._finallyVarname)) {
					ctrl.line(this._finallyVarname + "()");
				}
				else if(KSType.isValue(this._continueVarname)) {
					ctrl.line(this._continueVarname + "()");
				}
			}
			else if(this._state === TryState.Catch) {
				if(KSType.isValue(this._finallyVarname)) {
					ctrl.line(this._finallyVarname + "()");
				}
				else if(KSType.isValue(this._continueVarname)) {
					ctrl.line(this._continueVarname + "()");
				}
			}
			else if(this._state === TryState.Finally) {
				if(KSType.isValue(this._continueVarname)) {
					ctrl.line(this._continueVarname + "()");
				}
			}
			ctrl.step().code("else").step();
			const statement = statements[KSOperator.subtraction(statements.length, 1)];
			if(this._state === TryState.Body) {
				if(!(statement.hasExceptions() === true) && ((statements.length === 1) || ((statements.length === 2) && KSType.isClassInstance(statements[0], VariableDeclaration) && (statements[0].__ks_func_isAwait_0() === true)))) {
					if(statements.length === 2) {
						ctrl.compile(statements[0]);
					}
					ctrl.compile(statement);
					if(!KSType.isClassInstance(statement, ReturnStatement)) {
						if(KSType.isValue(this._finallyVarname)) {
							ctrl.line(this._finallyVarname + "()");
						}
						else if(KSType.isValue(this._continueVarname)) {
							ctrl.line(this._continueVarname + "()");
						}
					}
				}
				else {
					const returnOutside = KSType.isClassInstance(statement, ReturnStatement) && (statement.hasExceptions() === true);
					if(returnOutside) {
						statement.toDeclareReusableFragments(ctrl);
					}
					const ctrl2 = ctrl.newControl().code("try").step();
					let index = -1;
					let item = null;
					for(let i = 0, __ks_0 = KSOperator.subtraction(statements.length, 1); i < __ks_0 && (index === -1); ++i) {
						let __ks_1;
						if(KSType.isValue(__ks_1 = statements[i].toFragments(ctrl2, Mode.None)) ? (item = __ks_1, true) : false) {
							index = i;
						}
					}
					if(index !== -1) {
						item(statements.slice(index + 1));
					}
					else {
						if(returnOutside) {
							statement.toReusableFragments(ctrl2);
						}
						else {
							let __ks_0;
							if(KSType.isValue(__ks_0 = statement.toFragments(ctrl2, Mode.None)) ? (item = __ks_0, true) : false) {
								item([]);
							}
						}
					}
					ctrl2.step().code("catch(__ks_e)").step();
					if(KSType.isValue(this._catchVarname)) {
						ctrl2.line("return " + this._catchVarname + "(__ks_e)");
					}
					ctrl2.done();
					if(!KSType.isValue(item)) {
						if(returnOutside) {
							ctrl.compile(statement);
						}
						else if(!KSType.isClassInstance(statement, ReturnStatement)) {
							if(KSType.isValue(this._finallyVarname)) {
								ctrl.line(this._finallyVarname + "()");
							}
							else if(KSType.isValue(this._continueVarname)) {
								ctrl.line(this._continueVarname + "()");
							}
						}
					}
				}
			}
			else {
				let index = -1;
				let item = null;
				for(let i = 0, __ks_0 = statements.length; i < __ks_0 && (index === -1); ++i) {
					let __ks_1;
					if(KSType.isValue(__ks_1 = statements[i].toFragments(ctrl, Mode.None)) ? (item = __ks_1, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(statements.slice(index + 1));
				}
				if(this._state === TryState.Catch) {
					if(KSType.isValue(this._finallyVarname)) {
						ctrl.line(this._finallyVarname + "()");
					}
					else if(KSType.isValue(this._continueVarname)) {
						ctrl.line(this._continueVarname + "()");
					}
				}
				else if(this._state === TryState.Finally) {
					if(KSType.isValue(this._continueVarname)) {
						ctrl.line(this._continueVarname + "()");
					}
				}
			}
			ctrl.done();
			block.done();
			fragments.code(")").done();
		}
		__ks_func_toAwaitExpressionFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toAwaitExpressionFragments_1.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toAwaitExpressionFragments_rt) {
				return super.__ks_func_toAwaitExpressionFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toCatchFragments() {
			return this.__ks_func_toCatchFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toCatchFragments_0(fragments, error) {
			let async = false;
			if(this._catchClauses.length !== 0) {
				this.__ks_func_module_0().flag("Type");
				let ifs = fragments.newControl();
				for(let i = 0, __ks_0 = this._data.catchClauses.length, clause; i < __ks_0; ++i) {
					clause = this._data.catchClauses[i];
					if(i !== 0) {
						ifs.step().code("else ");
					}
					ifs.code("if(", $runtime.type.__ks_0(this), ".isClassInstance(", error, ", ").compile(this._catchClauses[i].type).code("))").step();
					if(KSType.isValue(clause.binding)) {
						ifs.line($runtime.scope.__ks_0(this), clause.binding.name, " = ", error);
					}
					ifs.compile(this._catchClauses[i].body);
					if(!(this._catchClauses[i].body.isAwait() === true) && KSType.isValue(this._continueVarname)) {
						ifs.line(this._continueVarname + "()");
					}
				}
				if(KSType.isValue(this._catchClause)) {
					ifs.step().code("else").step();
					if(KSType.isValue(this._data.catchClause.binding)) {
						ifs.line($runtime.scope.__ks_0(this), this._data.catchClause.binding.name, " = ", error);
					}
					ifs.compile(this._catchClause);
					if(!(this._catchClause.isAwait() === true) && KSType.isValue(this._continueVarname)) {
						ifs.line(this._continueVarname + "()");
					}
				}
				else if(KSType.isValue(this._continueVarname)) {
					ifs.step().code("else").step();
					ifs.line(this._continueVarname + "()");
				}
				ifs.done();
			}
			else if(KSType.isValue(this._catchClause)) {
				fragments.compile(this._catchClause);
				if(!(this._catchClause.isAwait() === true)) {
					if(KSType.isValue(this._finallyVarname)) {
						fragments.line(this._finallyVarname + "()");
					}
					else if(KSType.isValue(this._continueVarname)) {
						fragments.line(this._continueVarname + "()");
					}
				}
			}
			else if(KSType.isValue(this._finallyVarname)) {
				fragments.line(this._finallyVarname + "()");
			}
			else if(KSType.isValue(this._continueVarname)) {
				fragments.line(this._continueVarname + "()");
			}
		}
		__ks_func_toCatchFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toCatchFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toCatchFragments_rt) {
				return super.__ks_func_toCatchFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFinallyFragments() {
			return this.__ks_func_toFinallyFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFinallyFragments_0(fragments) {
			fragments.code("finally").step().compile(this._finalizer);
		}
		__ks_func_toFinallyFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toFinallyFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toFinallyFragments_rt) {
				return super.__ks_func_toFinallyFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_44(fragments, mode) {
			if(this._await) {
				return KSHelper.vcurry(this.toAwaitStatementFragments, this, fragments);
			}
			else {
				const ctrl = fragments.newControl().code("try").step();
				ctrl.compile(this._block, Mode.None);
				if(KSType.isValue(this._finallyVarname)) {
					ctrl.line(this._finallyVarname + "()");
				}
				ctrl.step();
				const error = this.__ks_func_getErrorVarname_0();
				if(this._hasCatch) {
					ctrl.code(KSHelper.concatString("catch(", error, ")")).step();
					this.toCatchFragments(ctrl, error);
					if(this._hasFinally) {
						ctrl.step();
						this.toFinallyFragments(ctrl);
					}
				}
				else if(this._hasFinally) {
					this.toFinallyFragments(ctrl);
				}
				else {
					ctrl.code(KSHelper.concatString("catch(", error, ")")).step();
				}
				this._scope.releaseTempName(error);
				ctrl.done();
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_44.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class TypeAliasDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(TypeAliasDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(TypeAliasDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			this._name = this._data.name.name;
			this._variable = this._scope.__ks_func_define_0(this._name, true, AliasType.__ks_new_1(this._scope, Type.__ks_sttc_fromAST_0(this._data.type, this)), void 0, this);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_export_0(recipient) {
			recipient.export(this._name, this._variable);
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_11() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_11.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_45(fragments, mode) {
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_45.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class UnlessStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(UnlessStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(UnlessStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._bodyScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._condition = $compile.expression(this._data.condition, this, this._scope);
			this._condition.analyse();
			this._body = $compile.block(this._data.whenFalse, this, this._bodyScope);
			this._body.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._condition.prepare();
			if(!(this._condition.type().canBeBoolean() === true)) {
				TypeException.throwInvalidCondition(this._condition, this);
			}
			this.assignTempVariables(this._scope);
			this._body.prepare();
			if(this._body.isExit() === true) {
				{
					let __ks_0 = this._condition.inferWhenTrueTypes(new Dictionary());
					for(const name in __ks_0) {
						const data = __ks_0[name];
						this._scope.updateInferable(name, data, this);
					}
				}
			}
			else {
				const conditionInferables = this._condition.inferWhenTrueTypes(new Dictionary());
				const trueInferables = this._bodyScope.listUpdatedInferables();
				for(const name in trueInferables) {
					const inferable = trueInferables[name];
					const trueType = inferable.type;
					if(KSType.isValue(conditionInferables[name])) {
						const conditionType = conditionInferables[name].type;
						if(trueType.equals(conditionType) === true) {
							this._scope.updateInferable(name, inferable, this);
						}
						else {
							this._scope.updateInferable(name, (() => {
								const d = new Dictionary();
								d.isVariable = inferable.isVariable;
								d.type = Type.union(this._scope, trueType, conditionType);
								return d;
							})(), this);
						}
					}
					else if(inferable.isVariable === true) {
						this._scope.replaceVariable(name, trueType, true, false, this);
					}
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._condition.translate();
			this._body.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_checkReturnType_0(type) {
			this._body.checkReturnType(type);
		}
		__ks_func_isJumpable_0() {
			return true;
		}
		__ks_func_isUsingVariable_0(name) {
			return (this._condition.isUsingVariable(name) === true) || (this._body.isUsingVariable() === true);
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_46(fragments, mode) {
			fragments.newControl().code("if(!").wrapBoolean(this._condition).code(")").step().compile(this._body).done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_46.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class UntilStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(UntilStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(UntilStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._bindingScope = this.newScope(this._scope, ScopeType.Hollow);
			this._bodyScope = this.__ks_func_newScope_0(this._bindingScope, ScopeType.InlineBlock);
			this._condition = $compile.expression(this._data.condition, this, this._bindingScope);
			this._condition.analyse();
			this._body = $compile.block(this._data.body, this, this._bodyScope);
			this._body.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._condition.prepare();
			if(!(this._condition.type().canBeBoolean() === true)) {
				TypeException.throwInvalidCondition(this._condition, this);
			}
			this.assignTempVariables(this._scope);
			this._scope.line(this._data.body.start.line);
			this._body.prepare();
			{
				let __ks_0 = this._bodyScope.listUpdatedInferables();
				for(const name in __ks_0) {
					const inferable = __ks_0[name];
					if((inferable.isVariable === true) && this._scope.__ks_func_hasVariable_0(name)) {
						this._scope.replaceVariable(name, inferable.type, true, false, this);
					}
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._condition.translate();
			this._body.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_checkReturnType_0(type) {
			this._body.checkReturnType(type);
		}
		__ks_func_isJumpable_0() {
			return true;
		}
		__ks_func_isLoop_0() {
			return true;
		}
		__ks_func_isUsingVariable_0(name) {
			return (this._condition.isUsingVariable(name) === true) || (this._body.isUsingVariable() === true);
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_47(fragments, mode) {
			fragments.newControl().code("while(!").wrapBoolean(this._condition).code(")").step().compile(this._body).done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_47.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class VariableDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(VariableDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(VariableDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._autotype = false;
			this._await = false;
			this._cascade = false;
			this._declarators = [];
			this._function = null;
			this._hasInit = false;
			this._immutable = true;
			this._lateInit = false;
			this._rebindable = false;
			this._redeclared = false;
			this._toDeclareAll = true;
			this._try = null;
			this._type = Type.Null;
		}
		__ks_cons_0(data, parent, scope = parent.__ks_func_scope_0()) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			Statement.prototype.__ks_cons_0.call(this, data, parent, scope);
			let ancestor = parent;
			while(KSType.isValue(ancestor) && !(KSType.isClassInstance(ancestor, AnonymousFunctionExpression) || KSType.isClassInstance(ancestor, ArrowFunctionExpression) || KSType.isClassInstance(ancestor, FunctionDeclarator) || KSType.isClassInstance(ancestor, ClassMethodDeclaration) || KSType.isClassInstance(ancestor, ImplementClassMethodDeclaration) || KSType.isClassInstance(ancestor, ImplementNamespaceFunctionDeclaration))) {
				if(KSType.isClassInstance(ancestor, TryStatement)) {
					this._try = ancestor;
				}
				ancestor = ancestor.__ks_func_parent_0();
			}
			if(KSType.isValue(ancestor)) {
				this._function = ancestor;
			}
		}
		__ks_cons_1(data, parent, scope, initScope, cascade) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			if(scope === void 0) {
				scope = null;
			}
			VariableDeclaration.prototype.__ks_cons_0.call(this, data, parent, scope);
			this._initScope = initScope;
			this._cascade = cascade;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t2 = value => KSType.isClassInstance(value, Scope);
			const t3 = KSType.isBoolean;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return VariableDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 5) {
				if(t0(args[1]) && t1(args[2]) && t2(args[3]) && t3(args[4])) {
					return VariableDeclaration.prototype.__ks_cons_1.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_initiate_0() {
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Dynamic.value) {
					this._immutable = false;
					this._rebindable = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Mutable.value) {
					this._autotype = true;
					this._immutable = false;
					this._rebindable = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.LateInit.value) {
					this._lateInit = true;
				}
			}
			let declarator = null;
			for(let __ks_0 = 0, __ks_1 = this._data.variables.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.variables[__ks_0];
				let __ks_2 = data.name.kind.valueOf();
				if(__ks_2 === NodeKind.ArrayBinding.value) {
					declarator = VariableBindingDeclarator.__ks_new_1(data, this);
				}
				else if(__ks_2 === NodeKind.Identifier.value) {
					declarator = VariableIdentifierDeclarator.__ks_new_1(data, this);
				}
				else if(__ks_2 === NodeKind.ObjectBinding.value) {
					declarator = VariableBindingDeclarator.__ks_new_1(data, this);
				}
				else {
					throw new NotImplementedException(this);
				}
				declarator.__ks_func_analyse_0();
				this._declarators.push(declarator);
			}
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			if(KSType.isValue(this._data.init)) {
				this._hasInit = true;
				if(this._immutable) {
					this._rebindable = KSType.isValue(this._initScope);
				}
				if(!KSType.isValue(this._initScope)) {
					this._initScope = this.newScope(this._scope, ScopeType.Hollow);
				}
				const line = this._initScope.getRawLine();
				this._initScope.line(KSOperator.subtraction(line, 1));
				this._init = $compile.expression(this._data.init, this, this._initScope);
				this._init.analyse();
				this._initScope.line(line);
				this._await = this._init.isAwait();
				if(this._await && !KSType.isValue(this._function) && !(this.__ks_func_module_0().isBinary() === true)) {
					SyntaxException.__ks_sttc_throwInvalidAwait_0(this);
				}
			}
			if(this._hasInit && (this._declarators.length === 1)) {
				if(KSType.isClassInstance(this._declarators[0], VariableIdentifierDeclarator)) {
					this.reference(this._declarators[0].__ks_func_name_12());
				}
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			const declarator = this._declarators[0];
			if(this._hasInit) {
				this._init.prepare();
				this._type = this._init.type();
				if(this._type.__ks_func_isInoperative_0() === true) {
					TypeException.throwUnexpectedInoperative(this._init, this);
				}
				if(KSType.isClassInstance(this._parent, IfStatement)) {
					this._type = this._type.__ks_func_setNullable_0(false);
				}
				if(this._autotype) {
					if(this._type.__ks_func_isNull_0() === true) {
						declarator.setDeclaredType(AnyType.NullableExplicit);
					}
					else {
						declarator.setDeclaredType(this._type);
					}
					declarator.flagDefinitive();
				}
				else {
					declarator.setRealType(this._type);
				}
				this.__ks_func_assignTempVariables_0(this._initScope);
			}
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.prepare();
				if(declarator.isRedeclared() === true) {
					this._redeclared = true;
				}
			}
			if(this._hasInit) {
				declarator.setRealType(this._type);
				if(KSType.isClassInstance(declarator, VariableIdentifierDeclarator)) {
					let type = declarator.__ks_func_type_21();
					if(KSType.isValue(type)) {
						this._init.validateType(type);
					}
				}
				this._init.acquireReusable(declarator.isSplitAssignment());
				this._init.releaseReusable();
				this.__ks_func_statement_0().assignTempVariables(this._scope);
			}
			else {
				this._type = this._declarators[0].variable().getRealType();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			if(this._hasInit) {
				this._init.translate();
			}
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		declarator() {
			return this.__ks_func_declarator_rt.call(null, this, this, arguments);
		}
		__ks_func_declarator_0() {
			return this._declarators[0];
		}
		__ks_func_declarator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_declarator_0.call(that);
			}
			if(super.__ks_func_declarator_rt) {
				return super.__ks_func_declarator_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_defineVariables_3(declarator) {
			let alreadyDeclared = null;
			const assignments = [];
			for(let __ks_0 = 0, __ks_1 = declarator.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
				name = __ks_1[__ks_0];
				if(this._scope.hasDefinedVariable(name)) {
					SyntaxException.throwAlreadyDeclared(name, this);
				}
				alreadyDeclared = this._scope.hasDeclaredVariable(name);
				const variable = this._scope.define(name, this.__ks_func_isImmutable_1(), null, this);
				if(alreadyDeclared) {
					alreadyDeclared = !(variable.__ks_func_isRenamed_0() === true);
				}
				if(alreadyDeclared) {
					this._toDeclareAll = false;
				}
				else {
					assignments.push(variable.__ks_func_getSecureName_0());
				}
			}
			if(this._cascade) {
				this._parent.addAssignments(assignments);
			}
		}
		__ks_func_defineVariables_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_defineVariables_3.call(that, args[0]);
				}
			}
			return super.__ks_func_defineVariables_rt.call(null, that, Statement.prototype, args);
		}
		__ks_func_export_0(recipient) {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.export(recipient);
			}
		}
		hasInit() {
			return this.__ks_func_hasInit_rt.call(null, this, this, arguments);
		}
		__ks_func_hasInit_0() {
			return this._hasInit;
		}
		__ks_func_hasInit_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasInit_0.call(that);
			}
			if(super.__ks_func_hasInit_rt) {
				return super.__ks_func_hasInit_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getIdentifierVariable() {
			return this.__ks_func_getIdentifierVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_getIdentifierVariable_0() {
			if((this._declarators.length === 1) && KSType.isClassInstance(this._declarators[0], VariableIdentifierDeclarator)) {
				return this._declarators[0]._variable;
			}
			else {
				return null;
			}
		}
		__ks_func_getIdentifierVariable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getIdentifierVariable_0.call(that);
			}
			if(super.__ks_func_getIdentifierVariable_rt) {
				return super.__ks_func_getIdentifierVariable_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		init() {
			return this.__ks_func_init_rt.call(null, this, this, arguments);
		}
		__ks_func_init_0() {
			return this._init;
		}
		__ks_func_init_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_init_0.call(that);
			}
			if(super.__ks_func_init_rt) {
				return super.__ks_func_init_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAutoTyping() {
			return this.__ks_func_isAutoTyping_rt.call(null, this, this, arguments);
		}
		__ks_func_isAutoTyping_0() {
			return this._autotype;
		}
		__ks_func_isAutoTyping_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAutoTyping_0.call(that);
			}
			if(super.__ks_func_isAutoTyping_rt) {
				return super.__ks_func_isAutoTyping_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isAwait_0() {
			return this._await;
		}
		isDeclararingVariable() {
			return this.__ks_func_isDeclararingVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isDeclararingVariable_0(name) {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				if(declarator.isDeclararingVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isDeclararingVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isDeclararingVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isDeclararingVariable_rt) {
				return super.__ks_func_isDeclararingVariable_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isDuplicate() {
			return this.__ks_func_isDuplicate_rt.call(null, this, this, arguments);
		}
		__ks_func_isDuplicate_0(scope) {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				if(declarator.isDuplicate(scope) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isDuplicate_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isDuplicate_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isDuplicate_rt) {
				return super.__ks_func_isDuplicate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isExpectingType() {
			return this.__ks_func_isExpectingType_rt.call(null, this, this, arguments);
		}
		__ks_func_isExpectingType_1() {
			return this._declarators[0].isStronglyTyped();
		}
		__ks_func_isExpectingType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExpectingType_1.call(that);
			}
			if(super.__ks_func_isExpectingType_rt) {
				return super.__ks_func_isExpectingType_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isImmutable() {
			return this.__ks_func_isImmutable_rt.call(null, this, this, arguments);
		}
		__ks_func_isImmutable_1() {
			return this._immutable;
		}
		__ks_func_isImmutable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isImmutable_1.call(that);
			}
			if(super.__ks_func_isImmutable_rt) {
				return super.__ks_func_isImmutable_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isLateInit() {
			return this.__ks_func_isLateInit_rt.call(null, this, this, arguments);
		}
		__ks_func_isLateInit_1() {
			return this._lateInit;
		}
		__ks_func_isLateInit_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isLateInit_1.call(that);
			}
			if(super.__ks_func_isLateInit_rt) {
				return super.__ks_func_isLateInit_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isUsingVariable_0(name) {
			return this._hasInit && (this._init.isUsingVariable(name) === true);
		}
		__ks_func_isUsingInstanceVariable_0(name) {
			return this._hasInit && (this._init.isUsingInstanceVariable(name) === true);
		}
		__ks_func_isUsingStaticVariable_0(__ks_class_1, varname) {
			return this._hasInit && (this._init.isUsingStaticVariable(__ks_class_1, varname) === true);
		}
		__ks_func_listNonLocalVariables_0(scope, variables) {
			if(this._hasInit) {
				this._init.listNonLocalVariables(scope, variables);
			}
			return variables;
		}
		toAwaitStatementFragments() {
			return this.__ks_func_toAwaitStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toAwaitStatementFragments_3(fragments, statements) {
			const line = fragments.newLine();
			const item = this._init.toFragments(line, Mode.None);
			statements.unshift(this);
			item(statements);
			line.done();
		}
		__ks_func_toAwaitStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toAwaitStatementFragments_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toAwaitStatementFragments_rt) {
				return super.__ks_func_toAwaitStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toFragments_1(fragments, mode) {
			const variables = this.__ks_func_assignments_0();
			if(variables.length !== 0) {
				fragments.newLine().code(KSOperator.addOrConcat($runtime.scope.__ks_0(this), variables.join(", "))).done();
			}
			if(this._hasInit) {
				if(this._init.isAwaiting() === true) {
					return KSHelper.vcurry(this.toAwaitStatementFragments, this, fragments);
				}
				else {
					const declarator = this._declarators[0];
					let line = fragments.newLine();
					if(this._toDeclareAll) {
						if(this._options.format.variables === "es5") {
							line.code("var ");
						}
						else if(this._rebindable || this._redeclared) {
							line.code("let ");
						}
						else {
							line.code("const ");
						}
					}
					declarator.toAssignmentFragments(line, this._init);
					line.done();
				}
			}
			else {
				let line = fragments.newLine();
				if(this._toDeclareAll) {
					if(this._options.format.variables === "es5") {
						line.code("var ");
					}
					else {
						line.code("let ");
					}
				}
				for(let index = 0, __ks_0 = this._declarators.length, declarator; index < __ks_0; ++index) {
					declarator = this._declarators[index];
					if(index !== 0) {
						line.code($comma);
					}
					line.compile(declarator).code(" = null");
				}
				line.done();
			}
		}
		toInlineFragments() {
			return this.__ks_func_toInlineFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toInlineFragments_0(fragments, mode) {
			if(this._init.isAwaiting() === true) {
				NotImplementedException.__ks_sttc_throw_0([this]);
			}
			else {
				this._declarators[0].toAssignmentFragments(fragments, this._init);
			}
		}
		__ks_func_toInlineFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toInlineFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toInlineFragments_rt) {
				return super.__ks_func_toInlineFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_20() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_20.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		walk() {
			return this.__ks_func_walk_rt.call(null, this, this, arguments);
		}
		__ks_func_walk_4(fn) {
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.walk(fn);
			}
		}
		__ks_func_walk_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_walk_4.call(that, args[0]);
				}
			}
			if(super.__ks_func_walk_rt) {
				return super.__ks_func_walk_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class VariableBindingDeclarator extends AbstractNode {
		static __ks_new_0() {
			const o = Object.create(VariableBindingDeclarator.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(VariableBindingDeclarator.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(VariableBindingDeclarator.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._type = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._binding = $compile.expression(this._data.name, this);
			this._binding.setAssignment(AssignmentType.Declaration);
			if(this._parent.isImmutable() === true) {
				this._binding.flagImmutable();
			}
			this._binding.analyse();
			this._parent.defineVariables(this._binding);
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(KSType.isValue(this._data.type)) {
				this.__ks_func_setDeclaredType_0(Type.__ks_sttc_fromAST_0(this._data.type, this));
			}
			else if(this._parent.isImmutable() === true) {
				this.setDeclaredType(this._parent.type());
			}
			this._binding.prepare();
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._binding.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_10(recipient) {
			this._binding.export(recipient);
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_export_10.call(that, args[0]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		flagDefinitive() {
			return this.__ks_func_flagDefinitive_rt.call(null, this, this, arguments);
		}
		__ks_func_flagDefinitive_0() {
		}
		__ks_func_flagDefinitive_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagDefinitive_0.call(that);
			}
			if(super.__ks_func_flagDefinitive_rt) {
				return super.__ks_func_flagDefinitive_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isDeclararingVariable() {
			return this.__ks_func_isDeclararingVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isDeclararingVariable_1(name) {
			return this._binding.isDeclararingVariable(name);
		}
		__ks_func_isDeclararingVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isDeclararingVariable_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_isDeclararingVariable_rt) {
				return super.__ks_func_isDeclararingVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isDuplicate() {
			return this.__ks_func_isDuplicate_rt.call(null, this, this, arguments);
		}
		__ks_func_isDuplicate_1(scope) {
			return false;
		}
		__ks_func_isDuplicate_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isDuplicate_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_isDuplicate_rt) {
				return super.__ks_func_isDuplicate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRedeclared() {
			return this.__ks_func_isRedeclared_rt.call(null, this, this, arguments);
		}
		__ks_func_isRedeclared_0() {
			return this._binding.isRedeclared();
		}
		__ks_func_isRedeclared_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRedeclared_0.call(that);
			}
			if(super.__ks_func_isRedeclared_rt) {
				return super.__ks_func_isRedeclared_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isSplitAssignment() {
			return this.__ks_func_isSplitAssignment_rt.call(null, this, this, arguments);
		}
		__ks_func_isSplitAssignment_0() {
			return this._binding.isSplitAssignment();
		}
		__ks_func_isSplitAssignment_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSplitAssignment_0.call(that);
			}
			if(super.__ks_func_isSplitAssignment_rt) {
				return super.__ks_func_isSplitAssignment_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isStronglyTyped() {
			return this.__ks_func_isStronglyTyped_rt.call(null, this, this, arguments);
		}
		__ks_func_isStronglyTyped_0() {
			return true;
		}
		__ks_func_isStronglyTyped_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isStronglyTyped_0.call(that);
			}
			if(super.__ks_func_isStronglyTyped_rt) {
				return super.__ks_func_isStronglyTyped_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setDeclaredType() {
			return this.__ks_func_setDeclaredType_rt.call(null, this, this, arguments);
		}
		__ks_func_setDeclaredType_0(type) {
			if(type === void 0) {
				type = null;
			}
			this._type = type;
			if(!(this._type.__ks_func_isAny_0() === true)) {
				if(KSType.isClassInstance(this._binding, ArrayBinding)) {
					if(!((type.__ks_func_isArray_0() === true) || (type.__ks_func_isTuple_0() === true))) {
						TypeException.__ks_sttc_throwInvalidBinding_0("Array", this);
					}
				}
				else {
					if(!((type.__ks_func_isDictionary_0() === true) || (type.__ks_func_isStruct_0() === true))) {
						TypeException.__ks_sttc_throwInvalidBinding_0("Dictionary", this);
					}
				}
				this._binding.type(this._type);
			}
		}
		__ks_func_setDeclaredType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type) || KSType.isNull(value);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setDeclaredType_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_setDeclaredType_rt) {
				return super.__ks_func_setDeclaredType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setRealType() {
			return this.__ks_func_setRealType_rt.call(null, this, this, arguments);
		}
		__ks_func_setRealType_0(type) {
			if(!(type.__ks_func_isAny_0() === true)) {
				if(KSType.isClassInstance(this._binding, ArrayBinding)) {
					if(!((type.__ks_func_isArray_0() === true) || (type.__ks_func_isTuple_0() === true))) {
						TypeException.__ks_sttc_throwInvalidBinding_0("Array", this);
					}
				}
				else {
					if(!((type.__ks_func_isDictionary_0() === true) || (type.__ks_func_isStruct_0() === true))) {
						TypeException.__ks_sttc_throwInvalidBinding_0("Dictionary", this);
					}
				}
			}
		}
		__ks_func_setRealType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setRealType_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_setRealType_rt) {
				return super.__ks_func_setRealType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_12(fragments, mode) {
			fragments.compile(this._binding);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_12.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toAssignmentFragments() {
			return this.__ks_func_toAssignmentFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toAssignmentFragments_0(fragments, value) {
			return this._binding.toAssignmentFragments(fragments, value);
		}
		__ks_func_toAssignmentFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toAssignmentFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toAssignmentFragments_rt) {
				return super.__ks_func_toAssignmentFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		walk() {
			return this.__ks_func_walk_rt.call(null, this, this, arguments);
		}
		__ks_func_walk_5(fn) {
			this._binding.walk(fn);
		}
		__ks_func_walk_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_walk_5.call(that, args[0]);
				}
			}
			if(super.__ks_func_walk_rt) {
				return super.__ks_func_walk_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class VariableIdentifierDeclarator extends AbstractNode {
		static __ks_new_0() {
			const o = Object.create(VariableIdentifierDeclarator.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(VariableIdentifierDeclarator.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(VariableIdentifierDeclarator.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._lateInit = false;
			this._type = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._name = this._data.name.name;
			this._identifier = new IdentifierLiteral(this._data.name, this, this._scope);
			this._identifier.__ks_func_setAssignment_0(AssignmentType.Declaration);
			this._identifier.__ks_func_analyse_0();
			this._parent.defineVariables(this._identifier);
			this._variable = this._identifier.__ks_func_variable_1();
			this._lateInit = this._parent.isLateInit();
			if(this._lateInit) {
				this._variable.__ks_func_flagLateInit_0();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(KSType.isValue(this._data.type)) {
				this._type = Type.__ks_sttc_fromAST_0(this._data.type, this);
				if(this._type.__ks_func_isNull_0() === true) {
					TypeException.__ks_sttc_throwNullTypeVariable_0(this._name, this);
				}
				this._variable.setDeclaredType(this._type, this._parent.hasInit()).flagDefinitive();
			}
			else if(this._parent.isAutoTyping() === true) {
			}
			else if(!this._lateInit || !(this._parent.isImmutable() === true)) {
				if(this._parent.isImmutable() === true) {
					this._type = this._variable.__ks_func_getRealType_0();
				}
				else {
					this._type = AnyType.NullableUnexplicit;
				}
				this._variable.setDeclaredType(this._type, this._parent.hasInit()).flagDefinitive();
			}
			this._identifier.__ks_func_prepare_0();
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._identifier.__ks_func_translate_0();
			if(this._lateInit && !(this._variable.__ks_func_isInitialized_0() === true)) {
				SyntaxException.__ks_sttc_throwNotInitializedVariable_0(this._name, this);
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_11(recipient) {
			recipient.export(this._name, this._variable);
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_export_11.call(that, args[0]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		flagDefinitive() {
			return this.__ks_func_flagDefinitive_rt.call(null, this, this, arguments);
		}
		__ks_func_flagDefinitive_1() {
			this._variable.__ks_func_flagDefinitive_0();
		}
		__ks_func_flagDefinitive_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagDefinitive_1.call(that);
			}
			if(super.__ks_func_flagDefinitive_rt) {
				return super.__ks_func_flagDefinitive_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isDuplicate() {
			return this.__ks_func_isDuplicate_rt.call(null, this, this, arguments);
		}
		__ks_func_isDuplicate_2(scope) {
			if(scope.hasDeclaredVariable(this._name) === true) {
				return true;
			}
			while(scope.isInline() === true) {
				scope = scope.parent();
				if(scope.hasDeclaredVariable(this._name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isDuplicate_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isDuplicate_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_isDuplicate_rt) {
				return super.__ks_func_isDuplicate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isDeclararingVariable() {
			return this.__ks_func_isDeclararingVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isDeclararingVariable_2(name) {
			return this._name === name;
		}
		__ks_func_isDeclararingVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isDeclararingVariable_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_isDeclararingVariable_rt) {
				return super.__ks_func_isDeclararingVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRedeclared() {
			return this.__ks_func_isRedeclared_rt.call(null, this, this, arguments);
		}
		__ks_func_isRedeclared_1() {
			return this._scope.isRedeclaredVariable(this._name);
		}
		__ks_func_isRedeclared_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRedeclared_1.call(that);
			}
			if(super.__ks_func_isRedeclared_rt) {
				return super.__ks_func_isRedeclared_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isSplitAssignment() {
			return this.__ks_func_isSplitAssignment_rt.call(null, this, this, arguments);
		}
		__ks_func_isSplitAssignment_1() {
			return false;
		}
		__ks_func_isSplitAssignment_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSplitAssignment_1.call(that);
			}
			if(super.__ks_func_isSplitAssignment_rt) {
				return super.__ks_func_isSplitAssignment_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isStronglyTyped() {
			return this.__ks_func_isStronglyTyped_rt.call(null, this, this, arguments);
		}
		__ks_func_isStronglyTyped_1() {
			return KSType.isValue(this._data.type);
		}
		__ks_func_isStronglyTyped_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isStronglyTyped_1.call(that);
			}
			if(super.__ks_func_isStronglyTyped_rt) {
				return super.__ks_func_isStronglyTyped_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_12() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_12.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setDeclaredType() {
			return this.__ks_func_setDeclaredType_rt.call(null, this, this, arguments);
		}
		__ks_func_setDeclaredType_1(type) {
			if(this._type === null) {
				this._variable.__ks_func_setDeclaredType_0(type);
			}
		}
		__ks_func_setDeclaredType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setDeclaredType_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_setDeclaredType_rt) {
				return super.__ks_func_setDeclaredType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setRealType() {
			return this.__ks_func_setRealType_rt.call(null, this, this, arguments);
		}
		__ks_func_setRealType_1(type) {
			if(this._type !== null) {
				if(!type.__ks_func_isAssignableToVariable_1(this._type, false)) {
					TypeException.__ks_sttc_throwInvalidAssignement_1(this._name, this._type, type, this);
				}
			}
			this._variable.__ks_func_setRealType_0(type);
		}
		__ks_func_setRealType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setRealType_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_setRealType_rt) {
				return super.__ks_func_setRealType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_13(fragments, mode) {
			fragments.compile(this._identifier);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_13.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toAssignmentFragments() {
			return this.__ks_func_toAssignmentFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toAssignmentFragments_1(fragments, value) {
			fragments.compile(this._identifier).code($equals).compile(value);
		}
		__ks_func_toAssignmentFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toAssignmentFragments_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toAssignmentFragments_rt) {
				return super.__ks_func_toAssignmentFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_21() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_21.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		variable() {
			return this.__ks_func_variable_rt.call(null, this, this, arguments);
		}
		__ks_func_variable_0() {
			return this._variable;
		}
		__ks_func_variable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_variable_0.call(that);
			}
			if(super.__ks_func_variable_rt) {
				return super.__ks_func_variable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		walk() {
			return this.__ks_func_walk_rt.call(null, this, this, arguments);
		}
		__ks_func_walk_6(fn) {
			fn(this._variable.__ks_func_getSecureName_0(), this._variable.__ks_func_getRealType_0());
		}
		__ks_func_walk_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_walk_6.call(that, args[0]);
				}
			}
			if(super.__ks_func_walk_rt) {
				return super.__ks_func_walk_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class WhileStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(WhileStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(WhileStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._bindingDeclaration = false;
			this._body = null;
			this._declared = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			if(KSHelper.valueOf(this._data.condition.kind) === NodeKind.VariableDeclaration.value) {
				this._declared = true;
				this._bindingScope = this.newScope(this._scope, ScopeType.Bleeding);
				this._bindingDeclaration = KSHelper.valueOf(this._data.condition.variables[0].name.kind) !== NodeKind.Identifier.value;
				this._declaration = VariableDeclaration.__ks_new_1(this._data.condition, this, this._bindingScope, KSHelper.notNull(this._scope), true);
				this._declaration.__ks_func_initiate_0();
			}
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			if(this._declared) {
				this._declaration.__ks_func_analyse_0();
				if(this._bindingDeclaration) {
					this._condition = this._declaration.__ks_func_init_0();
				}
				this._bodyScope = this.__ks_func_newScope_0(this._bindingScope, ScopeType.InlineBlock);
			}
			else {
				this._bindingScope = this.newScope(this._scope, ScopeType.Hollow);
				this._bodyScope = this.__ks_func_newScope_0(this._bindingScope, ScopeType.InlineBlock);
				this._condition = $compile.expression(this._data.condition, this, this._bindingScope);
				this._condition.__ks_func_analyse_0();
			}
			this._scope.line(this._data.body.start.line);
			this._body = $compile.block(this._data.body, this, this._bodyScope);
			this._body.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(this._declared) {
				this._declaration.__ks_func_prepare_0();
				if(this._bindingDeclaration) {
					this._condition.__ks_func_acquireReusable_1(true);
					this._condition.__ks_func_releaseReusable_1();
				}
				let variable = this._declaration.__ks_func_getIdentifierVariable_0();
				if(KSType.isValue(variable)) {
					variable.setRealType(variable.getRealType().setNullable(false));
				}
			}
			else {
				this._condition.__ks_func_prepare_0();
				if(!(this._condition.__ks_func_type_22().canBeBoolean() === true)) {
					TypeException.__ks_sttc_throwInvalidCondition_0(this._condition, this);
				}
				{
					let __ks_0 = this._condition.__ks_func_inferWhenTrueTypes_0(new Dictionary());
					for(const name in __ks_0) {
						const data = __ks_0[name];
						this._bodyScope.updateInferable(name, data, this);
					}
				}
				this._condition.__ks_func_acquireReusable_1(false);
				this._condition.__ks_func_releaseReusable_1();
			}
			this.assignTempVariables(this._scope);
			this._scope.line(this._data.body.start.line);
			this._body.prepare();
			{
				let __ks_0 = this._bodyScope.listUpdatedInferables();
				for(const name in __ks_0) {
					const inferable = __ks_0[name];
					if((inferable.isVariable === true) && this._scope.__ks_func_hasVariable_0(name)) {
						this._scope.replaceVariable(name, inferable.type, true, false, this);
					}
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			if(this._declared) {
				this._declaration.__ks_func_translate_0();
			}
			else {
				this._condition.__ks_func_translate_0();
			}
			this._body.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_checkReturnType_0(type) {
			this._body.checkReturnType(type);
		}
		__ks_func_isCascade_0() {
			return this._declared;
		}
		__ks_func_isJumpable_0() {
			return true;
		}
		__ks_func_isLoop_0() {
			return true;
		}
		__ks_func_isUsingVariable_0(name) {
			if(this._declared) {
				if(this._declaration.__ks_func_isUsingVariable_0(name) === true) {
					return true;
				}
			}
			else {
				if(this._condition.__ks_func_isUsingVariable_1(name) === true) {
					return true;
				}
			}
			return this._body.isUsingVariable(name);
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_48(fragments, mode) {
			const ctrl = fragments.newControl().code("while(");
			if(this._declared) {
				if(this._bindingDeclaration) {
					ctrl.code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue(")).compileReusable(this._condition).code(")");
					ctrl.code(" ? (");
					this._declaration.__ks_func_declarator_0().toAssignmentFragments(ctrl, this._condition);
					ctrl.code(", true) : false");
				}
				else {
					let first = true;
					this._declaration.__ks_func_walk_4((() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 2) {
								if(t0(args[0]) && t0(args[1])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (name, __ks_0) => {
							if(first) {
								ctrl.code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue("));
								this._declaration.toInlineFragments(ctrl, mode);
								ctrl.code(")");
								first = false;
							}
							else {
								ctrl.code(KSHelper.concatString(" && ", $runtime.type.__ks_0(this), ".isValue("), name, ")");
							}
						};
						return __ks_rt;
					})());
				}
			}
			else {
				ctrl.compileBoolean(this._condition);
			}
			ctrl.code(")").step().compile(this._body).done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_48.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class Expression extends AbstractNode {
		__ks_init() {
			super.__ks_init();
			this._leftMost = null;
			this._statement = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		acquireReusable() {
			return this.__ks_func_acquireReusable_rt.call(null, this, this, arguments);
		}
		__ks_func_acquireReusable_1(acquire) {
		}
		__ks_func_acquireReusable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_acquireReusable_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_acquireReusable_rt) {
				return super.__ks_func_acquireReusable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		flagAssignable() {
			return this.__ks_func_flagAssignable_rt.call(null, this, this, arguments);
		}
		__ks_func_flagAssignable_0() {
			if(!(this.__ks_func_isAssignable_0() === true)) {
				ReferenceException.__ks_sttc_throwInvalidAssignment_0(this);
			}
		}
		__ks_func_flagAssignable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagAssignable_0.call(that);
			}
			if(super.__ks_func_flagAssignable_rt) {
				return super.__ks_func_flagAssignable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getDeclaredType() {
			return this.__ks_func_getDeclaredType_rt.call(null, this, this, arguments);
		}
		__ks_func_getDeclaredType_0() {
			return this.__ks_func_type_22();
		}
		__ks_func_getDeclaredType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getDeclaredType_0.call(that);
			}
			if(super.__ks_func_getDeclaredType_rt) {
				return super.__ks_func_getDeclaredType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getUnpreparedType() {
			return this.__ks_func_getUnpreparedType_rt.call(null, this, this, arguments);
		}
		__ks_func_getUnpreparedType_1() {
			return AnyType.NullableUnexplicit;
		}
		__ks_func_getUnpreparedType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getUnpreparedType_1.call(that);
			}
			if(super.__ks_func_getUnpreparedType_rt) {
				return super.__ks_func_getUnpreparedType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasExceptions() {
			return this.__ks_func_hasExceptions_rt.call(null, this, this, arguments);
		}
		__ks_func_hasExceptions_2() {
			return true;
		}
		__ks_func_hasExceptions_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasExceptions_2.call(that);
			}
			if(super.__ks_func_hasExceptions_rt) {
				return super.__ks_func_hasExceptions_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		inferTypes() {
			return this.__ks_func_inferTypes_rt.call(null, this, this, arguments);
		}
		__ks_func_inferTypes_0(inferables) {
			return inferables;
		}
		__ks_func_inferTypes_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_inferTypes_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_inferTypes_rt) {
				return super.__ks_func_inferTypes_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		inferWhenTrueTypes() {
			return this.__ks_func_inferWhenTrueTypes_rt.call(null, this, this, arguments);
		}
		__ks_func_inferWhenTrueTypes_0(inferables) {
			return this.__ks_func_inferTypes_0(inferables);
		}
		__ks_func_inferWhenTrueTypes_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_inferWhenTrueTypes_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_inferWhenTrueTypes_rt) {
				return super.__ks_func_inferWhenTrueTypes_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		inferWhenFalseTypes() {
			return this.__ks_func_inferWhenFalseTypes_rt.call(null, this, this, arguments);
		}
		__ks_func_inferWhenFalseTypes_0(inferables) {
			return this.__ks_func_inferTypes_0(inferables);
		}
		__ks_func_inferWhenFalseTypes_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_inferWhenFalseTypes_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_inferWhenFalseTypes_rt) {
				return super.__ks_func_inferWhenFalseTypes_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		initializeVariable() {
			return this.__ks_func_initializeVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_initializeVariable_6(variable, expression) {
		}
		__ks_func_initializeVariable_rt(that, proto, args) {
			const t0 = value => KSType.isStructInstance(value, VariableBrief);
			const t1 = value => KSType.isClassInstance(value, Expression);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_initializeVariable_6.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_initializeVariable_rt) {
				return super.__ks_func_initializeVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssignable() {
			return this.__ks_func_isAssignable_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssignable_0() {
			return false;
		}
		__ks_func_isAssignable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssignable_0.call(that);
			}
			if(super.__ks_func_isAssignable_rt) {
				return super.__ks_func_isAssignable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAwait() {
			return this.__ks_func_isAwait_rt.call(null, this, this, arguments);
		}
		__ks_func_isAwait_2() {
			return false;
		}
		__ks_func_isAwait_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAwait_2.call(that);
			}
			if(super.__ks_func_isAwait_rt) {
				return super.__ks_func_isAwait_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAwaiting() {
			return this.__ks_func_isAwaiting_rt.call(null, this, this, arguments);
		}
		__ks_func_isAwaiting_0() {
			return false;
		}
		__ks_func_isAwaiting_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAwaiting_0.call(that);
			}
			if(super.__ks_func_isAwaiting_rt) {
				return super.__ks_func_isAwaiting_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isBooleanComputed() {
			return this.__ks_func_isBooleanComputed_rt.call(null, this, this, arguments);
		}
		__ks_func_isBooleanComputed_0() {
			return (this.__ks_func_isComputed_0() === true) || !(this.__ks_func_type_22().isBoolean() === true) || (this.__ks_func_type_22().isNullable() === true);
		}
		__ks_func_isBooleanComputed_1(junction) {
			return this.__ks_func_isBooleanComputed_0();
		}
		__ks_func_isBooleanComputed_rt(that, proto, args) {
			const t0 = value => KSType.isEnumInstance(value, Junction);
			if(args.length === 0) {
				return proto.__ks_func_isBooleanComputed_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isBooleanComputed_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_isBooleanComputed_rt) {
				return super.__ks_func_isBooleanComputed_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isCallable() {
			return this.__ks_func_isCallable_rt.call(null, this, this, arguments);
		}
		__ks_func_isCallable_0() {
			return false;
		}
		__ks_func_isCallable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isCallable_0.call(that);
			}
			if(super.__ks_func_isCallable_rt) {
				return super.__ks_func_isCallable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isComposite() {
			return this.__ks_func_isComposite_rt.call(null, this, this, arguments);
		}
		__ks_func_isComposite_1() {
			return true;
		}
		__ks_func_isComposite_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isComposite_1.call(that);
			}
			if(super.__ks_func_isComposite_rt) {
				return super.__ks_func_isComposite_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isComputed() {
			return this.__ks_func_isComputed_rt.call(null, this, this, arguments);
		}
		__ks_func_isComputed_0() {
			return false;
		}
		__ks_func_isComputed_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isComputed_0.call(that);
			}
			if(super.__ks_func_isComputed_rt) {
				return super.__ks_func_isComputed_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isDeclarable() {
			return this.__ks_func_isDeclarable_rt.call(null, this, this, arguments);
		}
		__ks_func_isDeclarable_0() {
			return false;
		}
		__ks_func_isDeclarable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isDeclarable_0.call(that);
			}
			if(super.__ks_func_isDeclarable_rt) {
				return super.__ks_func_isDeclarable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isExit() {
			return this.__ks_func_isExit_rt.call(null, this, this, arguments);
		}
		__ks_func_isExit_2() {
			return false;
		}
		__ks_func_isExit_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExit_2.call(that);
			}
			if(super.__ks_func_isExit_rt) {
				return super.__ks_func_isExit_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isExpectingType() {
			return this.__ks_func_isExpectingType_rt.call(null, this, this, arguments);
		}
		__ks_func_isExpectingType_2() {
			return false;
		}
		__ks_func_isExpectingType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExpectingType_2.call(that);
			}
			if(super.__ks_func_isExpectingType_rt) {
				return super.__ks_func_isExpectingType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isIgnorable() {
			return this.__ks_func_isIgnorable_rt.call(null, this, this, arguments);
		}
		__ks_func_isIgnorable_0() {
			return false;
		}
		__ks_func_isIgnorable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isIgnorable_0.call(that);
			}
			if(super.__ks_func_isIgnorable_rt) {
				return super.__ks_func_isIgnorable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitializable() {
			return this.__ks_func_isInitializable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializable_0() {
			return false;
		}
		__ks_func_isInitializable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInitializable_0.call(that);
			}
			if(super.__ks_func_isInitializable_rt) {
				return super.__ks_func_isInitializable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_2(name) {
			return false;
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInferable() {
			return this.__ks_func_isInferable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInferable_0() {
			return false;
		}
		__ks_func_isInferable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInferable_0.call(that);
			}
			if(super.__ks_func_isInferable_rt) {
				return super.__ks_func_isInferable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isLateInit() {
			return this.__ks_func_isLateInit_rt.call(null, this, this, arguments);
		}
		__ks_func_isLateInit_2() {
			return false;
		}
		__ks_func_isLateInit_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isLateInit_2.call(that);
			}
			if(super.__ks_func_isLateInit_rt) {
				return super.__ks_func_isLateInit_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isLooseComposite() {
			return this.__ks_func_isLooseComposite_rt.call(null, this, this, arguments);
		}
		__ks_func_isLooseComposite_0() {
			return this.__ks_func_isComposite_1();
		}
		__ks_func_isLooseComposite_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isLooseComposite_0.call(that);
			}
			if(super.__ks_func_isLooseComposite_rt) {
				return super.__ks_func_isLooseComposite_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isMatchingType() {
			return this.__ks_func_isMatchingType_rt.call(null, this, this, arguments);
		}
		__ks_func_isMatchingType_0(type) {
			return this.__ks_func_type_22().matchContentOf(type);
		}
		__ks_func_isMatchingType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isMatchingType_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isMatchingType_rt) {
				return super.__ks_func_isMatchingType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isNullable() {
			return this.__ks_func_isNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_isNullable_0() {
			return false;
		}
		__ks_func_isNullable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNullable_0.call(that);
			}
			if(super.__ks_func_isNullable_rt) {
				return super.__ks_func_isNullable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isNullableComputed() {
			return this.__ks_func_isNullableComputed_rt.call(null, this, this, arguments);
		}
		__ks_func_isNullableComputed_0() {
			return this.__ks_func_isComputed_0();
		}
		__ks_func_isNullableComputed_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNullableComputed_0.call(that);
			}
			if(super.__ks_func_isNullableComputed_rt) {
				return super.__ks_func_isNullableComputed_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isSkippable() {
			return this.__ks_func_isSkippable_rt.call(null, this, this, arguments);
		}
		__ks_func_isSkippable_0() {
			return false;
		}
		__ks_func_isSkippable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSkippable_0.call(that);
			}
			if(super.__ks_func_isSkippable_rt) {
				return super.__ks_func_isSkippable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isUsingInstanceVariable() {
			return this.__ks_func_isUsingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isUsingInstanceVariable_1(name) {
			return false;
		}
		__ks_func_isUsingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isUsingInstanceVariable_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_isUsingInstanceVariable_rt) {
				return super.__ks_func_isUsingInstanceVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isUsingNonLocalVariables() {
			return this.__ks_func_isUsingNonLocalVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_isUsingNonLocalVariables_0(scope) {
			return false;
		}
		__ks_func_isUsingNonLocalVariables_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Scope);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isUsingNonLocalVariables_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isUsingNonLocalVariables_rt) {
				return super.__ks_func_isUsingNonLocalVariables_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isUsingSetter() {
			return this.__ks_func_isUsingSetter_rt.call(null, this, this, arguments);
		}
		__ks_func_isUsingSetter_0() {
			return false;
		}
		__ks_func_isUsingSetter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isUsingSetter_0.call(that);
			}
			if(super.__ks_func_isUsingSetter_rt) {
				return super.__ks_func_isUsingSetter_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isUsingStaticVariable() {
			return this.__ks_func_isUsingStaticVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isUsingStaticVariable_1(__ks_class_1, varname) {
			return false;
		}
		__ks_func_isUsingStaticVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_isUsingStaticVariable_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_isUsingStaticVariable_rt) {
				return super.__ks_func_isUsingStaticVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isUsingVariable() {
			return this.__ks_func_isUsingVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isUsingVariable_1(name) {
			return false;
		}
		__ks_func_isUsingVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isUsingVariable_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_isUsingVariable_rt) {
				return super.__ks_func_isUsingVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isSplitAssignment() {
			return this.__ks_func_isSplitAssignment_rt.call(null, this, this, arguments);
		}
		__ks_func_isSplitAssignment_2() {
			return false;
		}
		__ks_func_isSplitAssignment_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSplitAssignment_2.call(that);
			}
			if(super.__ks_func_isSplitAssignment_rt) {
				return super.__ks_func_isSplitAssignment_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listLocalVariables() {
			return this.__ks_func_listLocalVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_listLocalVariables_0(scope, variables) {
			return variables;
		}
		__ks_func_listLocalVariables_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Scope);
			const t1 = KSType.isArray;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_listLocalVariables_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_listLocalVariables_rt) {
				return super.__ks_func_listLocalVariables_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listNonLocalVariables() {
			return this.__ks_func_listNonLocalVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			return variables;
		}
		__ks_func_listNonLocalVariables_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Scope);
			const t1 = KSType.isArray;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_listNonLocalVariables_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_listNonLocalVariables_rt) {
				return super.__ks_func_listNonLocalVariables_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		releaseReusable() {
			return this.__ks_func_releaseReusable_rt.call(null, this, this, arguments);
		}
		__ks_func_releaseReusable_1() {
		}
		__ks_func_releaseReusable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_releaseReusable_1.call(that);
			}
			if(super.__ks_func_releaseReusable_rt) {
				return super.__ks_func_releaseReusable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setAssignment() {
			return this.__ks_func_setAssignment_rt.call(null, this, this, arguments);
		}
		__ks_func_setAssignment_0(assignment) {
		}
		__ks_func_setAssignment_rt(that, proto, args) {
			const t0 = value => KSType.isEnumInstance(value, AssignmentType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setAssignment_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_setAssignment_rt) {
				return super.__ks_func_setAssignment_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setExpectedType() {
			return this.__ks_func_setExpectedType_rt.call(null, this, this, arguments);
		}
		__ks_func_setExpectedType_1(type) {
		}
		__ks_func_setExpectedType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setExpectedType_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_setExpectedType_rt) {
				return super.__ks_func_setExpectedType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_statement_0() {
			if(!KSType.isValue(this._statement)) {
				this._leftMost = this;
				while(!KSType.isClassInstance(this._leftMost._parent, Statement)) {
					this._leftMost = this._leftMost._parent;
				}
				this._statement = this._leftMost._parent;
			}
			return this._statement;
		}
		toArgumentFragments() {
			return this.__ks_func_toArgumentFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toArgumentFragments_0(fragments, mode) {
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			this.toFragments(fragments, mode);
		}
		__ks_func_toArgumentFragments_1(fragments, type, mode) {
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			this.__ks_func_toArgumentFragments_0(fragments, mode);
		}
		__ks_func_toArgumentFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toArgumentFragments_0.call(that, args[0], void 0);
				}
			}
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return proto.__ks_func_toArgumentFragments_1.call(that, args[0], args[1], void 0);
					}
					return proto.__ks_func_toArgumentFragments_0.call(that, args[0], args[1]);
				}
			}
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_toArgumentFragments_1.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toArgumentFragments_rt) {
				return super.__ks_func_toArgumentFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toBooleanFragments() {
			return this.__ks_func_toBooleanFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toBooleanFragments_5(fragments, mode, junction) {
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			this.toFragments(fragments, mode);
			if(!(this.__ks_func_type_22().isBoolean() === true) || (this.__ks_func_type_22().isNullable() === true)) {
				fragments.code(" === true");
			}
		}
		__ks_func_toBooleanFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = () => true;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 3) {
				if(t0(args[0])) {
					if(KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t1, pts, 1) && te(pts, 2)) {
						return proto.__ks_func_toBooleanFragments_5.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
					}
					throw KSHelper.badArgs();
				}
			}
			if(super.__ks_func_toBooleanFragments_rt) {
				return super.__ks_func_toBooleanFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toCastingFragments() {
			return this.__ks_func_toCastingFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toCastingFragments_1(fragments, mode) {
			fragments.code($runtime.helper.__ks_0(this), ".valueOf(");
			this.toFragments(fragments, mode);
			fragments.code(")");
		}
		__ks_func_toCastingFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toCastingFragments_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toCastingFragments_rt) {
				return super.__ks_func_toCastingFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toNullableFragments() {
			return this.__ks_func_toNullableFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toNullableFragments_0(fragments) {
			return this.toFragments(fragments, Mode.None);
		}
		__ks_func_toNullableFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toNullableFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toNullableFragments_rt) {
				return super.__ks_func_toNullableFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toOperandFragments() {
			return this.__ks_func_toOperandFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toOperandFragments_0(fragments, operator, type) {
			return this.toFragments(fragments, Mode.None);
		}
		__ks_func_toOperandFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toOperandFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toOperandFragments_rt) {
				return super.__ks_func_toOperandFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toQuote() {
			return this.__ks_func_toQuote_rt.call(null, this, this, arguments);
		}
		__ks_func_toQuote_0() {
			throw new NotSupportedException();
		}
		__ks_func_toQuote_1(__ks_double_1) {
			if(__ks_double_1) {
				return "\"" + this.__ks_func_toQuote_0() + "\"";
			}
			else {
				return "'" + this.__ks_func_toQuote_0() + "'";
			}
		}
		__ks_func_toQuote_rt(that, proto, args) {
			const t0 = KSType.isBoolean;
			if(args.length === 0) {
				return proto.__ks_func_toQuote_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toQuote_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_toQuote_rt) {
				return super.__ks_func_toQuote_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toReusableFragments() {
			return this.__ks_func_toReusableFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toReusableFragments_0(fragments) {
			return this.toFragments(fragments, Mode.None);
		}
		__ks_func_toReusableFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toReusableFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toReusableFragments_rt) {
				return super.__ks_func_toReusableFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStringFragments() {
			return this.__ks_func_toStringFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStringFragments_0(fragments) {
			const type = this.__ks_func_type_22();
			if((type.isReference() === true) && (type.type().isEnum() === true)) {
				fragments.compile(this).code(".value");
			}
			else {
				fragments.wrap(this);
			}
		}
		__ks_func_toStringFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toStringFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toStringFragments_rt) {
				return super.__ks_func_toStringFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toTypeQuote() {
			return this.__ks_func_toTypeQuote_rt.call(null, this, this, arguments);
		}
		__ks_func_toTypeQuote_0() {
			return this.__ks_func_type_22().toQuote();
		}
		__ks_func_toTypeQuote_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toTypeQuote_0.call(that);
			}
			if(super.__ks_func_toTypeQuote_rt) {
				return super.__ks_func_toTypeQuote_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_22() {
			return AnyType.NullableUnexplicit;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_22.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		validateType() {
			return this.__ks_func_validateType_rt.call(null, this, this, arguments);
		}
		__ks_func_validateType_0(type) {
		}
		__ks_func_validateType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_validateType_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_validateType_rt) {
				return super.__ks_func_validateType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		variable() {
			return this.__ks_func_variable_rt.call(null, this, this, arguments);
		}
		__ks_func_variable_1() {
			return null;
		}
		__ks_func_variable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_variable_1.call(that);
			}
			if(super.__ks_func_variable_rt) {
				return super.__ks_func_variable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class Literal extends Expression {
		static __ks_new_0(...args) {
			const o = Object.create(Literal.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(Literal.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_0(value, parent) {
			if(value === void 0) {
				value = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			Expression.prototype.__ks_cons_1.call(this, false, parent, void 0);
			this._value = value;
		}
		__ks_cons_1(data, parent, scope, value) {
			if(value === void 0) {
				value = null;
			}
			Expression.prototype.__ks_cons_rt.call(null, this, [data, parent, scope]);
			this._value = value;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return Literal.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
					return Literal.prototype.__ks_cons_1.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_hasExceptions_2() {
			return false;
		}
		__ks_func_isComposite_1() {
			return false;
		}
		listAssignments() {
			return this.__ks_func_listAssignments_rt.call(null, this, this, arguments);
		}
		__ks_func_listAssignments_0(array) {
			return array;
		}
		__ks_func_listAssignments_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listAssignments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_listAssignments_rt) {
				return super.__ks_func_listAssignments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			return variables;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_14(fragments, mode) {
			if(this._data === true) {
				fragments.code(this._value, this._data);
			}
			else {
				fragments.code(this._value);
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_14.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			return this._value;
		}
		__ks_func_validateType_1(type) {
			if(!(this.__ks_func_type_22().isAssignableToVariable(type, false) === true)) {
				TypeException.throwInvalidAssignement(type, this.__ks_func_type_22(), this);
			}
		}
		__ks_func_validateType_0(type) {
			if(KSType.isClassInstance(type, ReferenceType)) {
				return this.__ks_func_validateType_1(type);
			}
			return super.__ks_func_validateType_0(type);
		}
		__ks_func_validateType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ReferenceType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_validateType_1.call(that, args[0]);
				}
			}
			return super.__ks_func_validateType_rt.call(null, that, Expression.prototype, args);
		}
		value() {
			return this.__ks_func_value_rt.call(null, this, this, arguments);
		}
		__ks_func_value_0() {
			return this._value;
		}
		__ks_func_value_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_value_0.call(that);
			}
			if(super.__ks_func_value_rt) {
				return super.__ks_func_value_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class IdentifierLiteral extends Literal {
		static __ks_new_0(...args) {
			const o = Object.create(IdentifierLiteral.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._assignable = false;
			this._assignment = AssignmentType.Neither;
			this._isMacro = false;
			this._isVariable = false;
		}
		__ks_cons_0(data, parent, scope) {
			if(scope === void 0 || scope === null) {
				scope = parent.scope();
			}
			Literal.prototype.__ks_cons_rt.call(null, this, [data, parent, scope, data.name]);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1])) {
					return IdentifierLiteral.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_analyse_0() {
			if(this._assignment === AssignmentType.Neither) {
				let name;
				if(this._scope.hasVariable(this._value)) {
					this._isVariable = true;
					this._line = this._scope.__ks_func_line_0();
					if(this._value === "Dictionary") {
						this.__ks_func_module_0().flag("Dictionary");
					}
				}
				else if(this._scope.hasMacro(this._value)) {
					this._isMacro = true;
				}
				else if(KSType.isValue((name = $runtime.getVariable(this._value, this._parent)))) {
					this._value = name;
					this._realType = this._declaredType = Type.Any;
				}
				else {
					ReferenceException.throwNotDefined(this._value, this);
				}
			}
			else {
				this._isVariable = true;
				this._line = this._scope.__ks_func_line_0();
			}
		}
		__ks_func_prepare_0() {
			if(this._isVariable) {
				const variable = this._scope.getVariable(this._value, this._line);
				if(this._assignable) {
					if(variable.__ks_func_isImmutable_0() === true) {
						if(variable.__ks_func_isLateInit_0() === true) {
							if(variable.__ks_func_isInitialized_0() === true) {
								ReferenceException.throwImmutable(this._value, this);
							}
						}
						else {
							ReferenceException.throwImmutable(this._value, this);
						}
					}
				}
				if(this._scope.hasDeclaredVariable(this._value) && !(this._scope.hasDefinedVariable(this._value, this._line) === true) && !(variable.__ks_func_isPredefined_0() === true)) {
					this._scope.renameNext(this._value, this._line);
				}
				if((this._assignment === AssignmentType.Neither) && (variable.__ks_func_isLateInit_0() === true) && !(variable.__ks_func_isInitialized_0() === true)) {
					SyntaxException.throwNotInitializedVariable(this._value, this);
				}
				this._declaredType = variable.__ks_func_getDeclaredType_0();
				this._realType = variable.__ks_func_getRealType_0();
			}
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_12(recipient) {
			recipient.export(this._value, this);
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_export_12.call(that, args[0]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Literal.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_flagAssignable_0() {
			this._assignable = true;
		}
		getVariableDeclaration() {
			return this.__ks_func_getVariableDeclaration_rt.call(null, this, this, arguments);
		}
		__ks_func_getVariableDeclaration_0(__ks_class_1) {
			return __ks_class_1.getInstanceVariable(this._value);
		}
		__ks_func_getVariableDeclaration_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getVariableDeclaration_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getVariableDeclaration_rt) {
				return super.__ks_func_getVariableDeclaration_rt.call(null, that, Literal.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getDeclaredType_0() {
			return this._declaredType;
		}
		__ks_func_getUnpreparedType_1() {
			if(this._isVariable) {
				return this._scope.getVariable(this._value, this._line).__ks_func_getRealType_0();
			}
			else {
				return this._realType;
			}
		}
		initializeVariables() {
			return this.__ks_func_initializeVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_initializeVariables_0(type, node) {
			if(this._isVariable) {
				const variable = this._scope.getVariable(this._value, this._line);
				if(variable.__ks_func_isLateInit_0() === true) {
					node.initializeVariable(VariableBrief(this._value, type, void 0, true, true));
				}
			}
		}
		__ks_func_initializeVariables_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isClassInstance(value, Expression);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_initializeVariables_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_initializeVariables_rt) {
				return super.__ks_func_initializeVariables_rt.call(null, that, Literal.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isAssignable_0() {
			return true;
		}
		__ks_func_isDeclarable_0() {
			return true;
		}
		isDeclararingVariable() {
			return this.__ks_func_isDeclararingVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isDeclararingVariable_3(name) {
			return this._value === name;
		}
		__ks_func_isDeclararingVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isDeclararingVariable_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_isDeclararingVariable_rt) {
				return super.__ks_func_isDeclararingVariable_rt.call(null, that, Literal.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isExpectingType_2() {
			if(this._isVariable) {
				const variable = this._scope.getVariable(this._value, this._line);
				return variable.__ks_func_isDefinitive_0();
			}
			else {
				return false;
			}
		}
		isMacro() {
			return this.__ks_func_isMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_isMacro_0() {
			return this._isMacro;
		}
		__ks_func_isMacro_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isMacro_0.call(that);
			}
			if(super.__ks_func_isMacro_rt) {
				return super.__ks_func_isMacro_rt.call(null, that, Literal.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRedeclared() {
			return this.__ks_func_isRedeclared_rt.call(null, this, this, arguments);
		}
		__ks_func_isRedeclared_2() {
			return this._scope.isRedeclaredVariable(this._value);
		}
		__ks_func_isRedeclared_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRedeclared_2.call(that);
			}
			if(super.__ks_func_isRedeclared_rt) {
				return super.__ks_func_isRedeclared_rt.call(null, that, Literal.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRenamed() {
			return this.__ks_func_isRenamed_rt.call(null, this, this, arguments);
		}
		__ks_func_isRenamed_0() {
			return this._scope.isRenamedVariable(this._value);
		}
		__ks_func_isRenamed_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRenamed_0.call(that);
			}
			if(super.__ks_func_isRenamed_rt) {
				return super.__ks_func_isRenamed_rt.call(null, that, Literal.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isInferable_0() {
			return true;
		}
		__ks_func_isUsingNonLocalVariables_0(scope) {
			if(this._isVariable) {
				const variable = this._scope.getVariable(this._value, this._line);
				if((this._value !== "this") && !(variable.__ks_func_isPredefined_0() === true) && !scope.hasDeclaredVariable(this._value)) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isUsingVariable_1(name) {
			return this._value === name;
		}
		__ks_func_listAssignments_0(array) {
			array.push(this._value);
			return array;
		}
		__ks_func_listLocalVariables_0(scope, variables) {
			if(this._isVariable) {
				const variable = this._scope.getVariable(this._value, this._line);
				if((this._value !== "this") && !(variable.__ks_func_isPredefined_0() === true) && scope.hasDeclaredVariable(this._value)) {
					__ks_Array._im_pushUniq(variables, variable);
				}
			}
			return variables;
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			if(this._isVariable) {
				const variable = this._scope.getVariable(this._value, this._line);
				if((this._value !== "this") && !(variable.__ks_func_isModule_0() === true) && !scope.hasDeclaredVariable(this._value)) {
					__ks_Array._im_pushUniq(variables, variable);
				}
			}
			return variables;
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_13() {
			return this._value;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_13.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Literal.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		path() {
			return this.__ks_func_path_rt.call(null, this, this, arguments);
		}
		__ks_func_path_0() {
			return this._value;
		}
		__ks_func_path_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_path_0.call(that);
			}
			if(super.__ks_func_path_rt) {
				return super.__ks_func_path_rt.call(null, that, Literal.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_setAssignment_0(assignment) {
			this._assignment = assignment;
		}
		toAssignmentFragments() {
			return this.__ks_func_toAssignmentFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toAssignmentFragments_2(fragments, value) {
			fragments.compile(this).code($equals).compile(value);
		}
		__ks_func_toAssignmentFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toAssignmentFragments_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toAssignmentFragments_rt) {
				return super.__ks_func_toAssignmentFragments_rt.call(null, that, Literal.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toFragments_14(fragments, mode) {
			if(this._isVariable) {
				fragments.compile(this._scope.getVariable(this._value, this._line));
			}
			else {
				fragments.code(this._value, this._data);
			}
		}
		__ks_func_type_22() {
			return this._realType;
		}
		__ks_func_type_23(type, scope, node) {
			if(this._isVariable) {
				this._realType = scope.replaceVariable(this._value, type, node).getRealType();
			}
		}
		__ks_func_type_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isClassInstance(value, Scope);
			const t2 = KSType.isValue;
			if(args.length === 0) {
				return proto.__ks_func_type_22.call(that);
			}
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_type_23.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_type_rt.call(null, that, Literal.prototype, args);
		}
		__ks_func_variable_1() {
			return this._scope.getVariable(this._value, this._line);
		}
		walk() {
			return this.__ks_func_walk_rt.call(null, this, this, arguments);
		}
		__ks_func_walk_7(fn) {
			if(this._isVariable) {
				fn(this._value, this._realType);
			}
			else {
				throw new NotSupportedException();
			}
		}
		__ks_func_walk_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_walk_7.call(that, args[0]);
				}
			}
			if(super.__ks_func_walk_rt) {
				return super.__ks_func_walk_rt.call(null, that, Literal.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class NumberLiteral extends Literal {
		static __ks_new_0(...args) {
			const o = Object.create(NumberLiteral.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, parent, scope) {
			if(scope === void 0 || scope === null) {
				scope = parent.scope();
			}
			Literal.prototype.__ks_cons_rt.call(null, this, [data, parent, scope, data.value]);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1])) {
					return NumberLiteral.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getUnpreparedType_1() {
			return this.__ks_func_type_22();
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("Number");
		}
	}
	class StringLiteral extends Literal {
		static __ks_new_0(...args) {
			const o = Object.create(StringLiteral.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, parent, scope) {
			if(scope === void 0 || scope === null) {
				scope = parent.scope();
			}
			Literal.prototype.__ks_cons_rt.call(null, this, [data, parent, scope, $quote(data.value)]);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1])) {
					return StringLiteral.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getUnpreparedType_1() {
			return this.__ks_func_type_22();
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("String");
		}
	}
	class ArrayExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(ArrayExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ArrayExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ArrayExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._flatten = false;
			this._values = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			const es5 = this._options.format.spreads === "es5";
			for(let __ks_0 = 0, __ks_1 = this._data.values.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.values[__ks_0];
				const value = $compile.expression(data, this, void 0);
				value.analyse();
				if(es5 && KSType.isClassInstance(value, UnaryOperatorSpread)) {
					this._flatten = true;
				}
				this._values.push(value);
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			let type = null;
			for(let index = 0, __ks_0 = this._values.length, value; index < __ks_0; ++index) {
				value = this._values[index];
				value.prepare();
				if(index === 0) {
					type = value.type().discardSpread();
				}
				else if(type !== null) {
					if(!(type.equals(value.type().discardSpread()) === true)) {
						type = null;
					}
				}
			}
			if(type === null) {
				this._type = this._scope.__ks_func_reference_0("Array");
			}
			else {
				this._type = Type.arrayOf(type, this._scope);
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._values[__ks_0];
				value.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isMatchingType_0(type) {
			if(this._values.length === 0) {
				return (type.__ks_func_isAny_0() === true) || (type.__ks_func_isArray_0() === true);
			}
			else {
				return this._type.__ks_func_matchContentOf_0(type);
			}
		}
		__ks_func_isUsingVariable_1(name) {
			for(let __ks_0 = 0, __ks_1 = this._values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._values[__ks_0];
				if(value.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			for(let __ks_0 = 0, __ks_1 = this._values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._values[__ks_0];
				value.listNonLocalVariables(scope, variables);
			}
			return variables;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_15(fragments, mode) {
			if(this._flatten) {
				if(this._values.length === 1) {
					fragments.code("[].concat(").compile(this._values[0].argument()).code(")");
				}
				else {
					CallExpression.__ks_sttc_toFlattenArgumentsFragments_0(fragments, this._values);
				}
			}
			else {
				fragments.code("[");
				for(let index = 0, __ks_0 = this._values.length, value; index < __ks_0; ++index) {
					value = this._values[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(value);
				}
				fragments.code("]");
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_15.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
		__ks_func_validateType_2(type) {
			if(type.__ks_func_hasParameters_0() === true) {
				const parameter = type.__ks_func_parameter_2(0);
				for(let __ks_0 = 0, __ks_1 = this._values.length, value; __ks_0 < __ks_1; ++__ks_0) {
					value = this._values[__ks_0];
					value.validateType(parameter);
				}
			}
		}
		__ks_func_validateType_0(type) {
			if(KSType.isClassInstance(type, ReferenceType)) {
				return this.__ks_func_validateType_2(type);
			}
			return super.__ks_func_validateType_0(type);
		}
		__ks_func_validateType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ReferenceType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_validateType_2.call(that, args[0]);
				}
			}
			return super.__ks_func_validateType_rt.call(null, that, Expression.prototype, args);
		}
	}
	class ArrayRange extends Expression {
		static __ks_new_0() {
			const o = Object.create(ArrayRange.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ArrayRange.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ArrayRange.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._by = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._from = $compile.expression(KSType.isValue(this._data.from) ? this._data.from : this._data.then, this);
			this._from.analyse();
			this._to = $compile.expression(KSType.isValue(this._data.to) ? this._data.to : this._data.til, this);
			this._to.analyse();
			if(KSType.isValue(this._data.by)) {
				this._by = $compile.expression(this._data.by, this);
				this._by.analyse();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._type = Type.arrayOf(this._scope.__ks_func_reference_0("Number"), this._scope);
			this._from.prepare();
			this._to.prepare();
			if(KSType.isValue(this._by)) {
				this._by.prepare();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._from.translate();
			this._to.translate();
			if(this._by !== null) {
				this._by.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isUsingVariable_1(name) {
			return (this._from.isUsingVariable(name) === true) || (this._to.isUsingVariable(name) === true) || (KSType.isValue(this._by) ? this._by.isUsingVariable(name) === true : false);
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			this._from.listNonLocalVariables(scope, variables);
			this._to.listNonLocalVariables(scope, variables);
			KSType.isValue(this._by) ? this._by.listNonLocalVariables(scope, variables) : null;
			return variables;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_16(fragments, mode) {
			this.__ks_func_module_0().flag("Helper");
			fragments.code($runtime.helper.__ks_0(this), ".newArrayRange(").compile(this._from).code($comma).compile(this._to);
			if(this._by === null) {
				fragments.code(", 1");
			}
			else {
				fragments.code(", ").compile(this._by);
			}
			fragments.code($comma, KSType.isValue(this._data.from), $comma, KSType.isValue(this._data.to), ")");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_16.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	function $return() {
		return $return.__ks_rt(this, arguments);
	};
	$return.__ks_0 = function(data = null) {
		return (() => {
			const d = new Dictionary();
			d.kind = NodeKind.ReturnStatement;
			d.value = data;
			d.start = data.start;
			return d;
		})();
	};
	$return.__ks_rt = function(that, args) {
		if(args.length <= 1) {
			return $return.__ks_0.call(that, args[0]);
		}
		throw KSHelper.badArgs();
	};
	class ArrayComprehensionForFrom extends Expression {
		static __ks_new_0() {
			const o = Object.create(ArrayComprehensionForFrom.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ArrayComprehensionForFrom.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ArrayComprehensionForFrom.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._by = null;
			this._when = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._bindingScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._bodyScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
			this._bindingScope.define(this._data.loop.variable.name, false, this._scope.__ks_func_reference_0("Number"), true, this);
			this._variable = $compile.expression(this._data.loop.variable, this, this._bindingScope);
			this._variable.analyse();
			this._from = $compile.expression(this._data.loop.from, this, this._scope);
			this._from.analyse();
			this._to = $compile.expression(KSType.isValue(this._data.loop.to) ? this._data.loop.to : this._data.loop.til, this, this._scope);
			this._to.analyse();
			if(KSType.isValue(this._data.loop.by)) {
				this._by = $compile.expression(this._data.loop.by, this, this._scope);
				this._by.analyse();
			}
			this._body = $compile.statement($return.__ks_0(this._data.body), this, this._bodyScope);
			this._body.initiate();
			this._body.analyse();
			if(KSType.isValue(this._data.loop.when)) {
				this._when = $compile.statement($return.__ks_0(this._data.loop.when), this, this._bodyScope);
				this._when.initiate();
				this._when.analyse();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._variable.prepare();
			this._from.prepare();
			this._to.prepare();
			if(KSType.isValue(this._by)) {
				this._by.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._variable.translate();
			this._from.translate();
			this._to.translate();
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			this._body.translate();
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isUsingVariable_1(name) {
			return (this._from.isUsingVariable(name) === true) || (this._to.isUsingVariable(name) === true) || ((this._by !== null) && (this._by.isUsingVariable(name) === true)) || ((this._when !== null) && (this._when.isUsingVariable(name) === true)) || (this._body.isUsingVariable(name) === true);
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			this._from.listNonLocalVariables(scope, variables);
			this._to.listNonLocalVariables(scope, variables);
			KSType.isValue(this._by) ? this._by.listNonLocalVariables(scope, variables) : null;
			KSType.isValue(this._when) ? this._when.listNonLocalVariables(scope, variables) : null;
			KSType.isValue(this._body) ? this._body.listNonLocalVariables(scope, variables) : null;
			return variables;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_17(fragments, mode) {
			this.__ks_func_module_0().flag("Helper");
			const surround = $function.surround.__ks_0(this);
			fragments.code($runtime.helper.__ks_0(this), ".mapRange(").compile(this._from).code($comma).compile(this._to);
			if(this._by === null) {
				fragments.code(", 1");
			}
			else {
				fragments.code($comma).compile(this._by);
			}
			fragments.code($comma, KSType.isValue(this._data.loop.from), $comma, KSType.isValue(this._data.loop.to), $comma);
			fragments.code(surround.beforeParameters).compile(this._variable).code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(KSType.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(this._variable).code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_17.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("Array");
		}
	}
	class ArrayComprehensionForIn extends Expression {
		static __ks_new_0() {
			const o = Object.create(ArrayComprehensionForIn.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ArrayComprehensionForIn.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ArrayComprehensionForIn.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._declaration = false;
			this._declaredVariables = [];
			this._declareIndex = false;
			this._declareValue = false;
			this._descending = false;
			this._immutable = false;
			this._when = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._bindingScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._bodyScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
			for(let __ks_0 = 0, __ks_1 = this._data.loop.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.loop.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
					this._declaration = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
					this._immutable = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Descending.value) {
					this._descending = true;
				}
			}
			this._expression = $compile.expression(this._data.loop.expression, this, this._scope);
			this._expression.analyse();
			if(KSType.isValue(this._data.loop.value)) {
				this._value = $compile.expression(this._data.loop.value, this, this._bindingScope);
				this._value.setAssignment(AssignmentType.Expression);
				this._value.analyse();
				for(let __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
					name = __ks_1[__ks_0];
					const variable = this._scope.getVariable(name);
					if(this._declaration || (variable === null)) {
						this._declareValue = true;
						this._declaredVariables.push(this._bindingScope.define(name, this._immutable, AnyType.NullableUnexplicit, true, this));
					}
					else if(variable.__ks_func_isImmutable_0() === true) {
						ReferenceException.throwImmutable(name, this);
					}
				}
			}
			else {
				this._valueName = this._bindingScope.acquireTempName();
			}
			if(KSType.isValue(this._data.loop.index)) {
				const variable = this._bindingScope.getVariable(this._data.loop.index.name);
				if(this._declaration || (variable === null)) {
					this._bindingScope.define(this._data.loop.index.name, this._immutable, this._bindingScope.reference("Number"), true, this);
					this._declareIndex = true;
				}
				else if(variable.isImmutable() === true) {
					ReferenceException.throwImmutable(this._data.loop.index.name, this);
				}
				this._index = $compile.expression(this._data.loop.index, this, this._bindingScope);
				this._index.analyse();
			}
			this._body = $compile.statement($return.__ks_0(this._data.body), this, this._bodyScope);
			this._body.initiate();
			this._body.analyse();
			if(KSType.isValue(this._data.loop.when)) {
				this._when = $compile.statement($return.__ks_0(this._data.loop.when), this, this._bodyScope);
				this._when.initiate();
				this._when.analyse();
			}
			if(KSType.isValue(this._valueName)) {
				this._bindingScope.releaseTempName(this._valueName);
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._expression.prepare();
			const type = this._expression.type();
			if(!((type.isAny() === true) || (type.isArray() === true))) {
				TypeException.__ks_sttc_throwInvalidForInExpression_0(this);
			}
			if(KSType.isValue(this._value)) {
				const parameterType = type.parameter();
				const valueType = Type.__ks_sttc_fromAST_0(this._data.type, this);
				if(!(parameterType.matchContentOf(valueType) === true)) {
					TypeException.throwInvalidAssignement(this._value, valueType, parameterType, this);
				}
				const realType = (parameterType.isMorePreciseThan(valueType) === true) ? parameterType : valueType;
				if(KSType.isClassInstance(this._value, IdentifierLiteral)) {
					if(this._declareValue) {
						this._value.type(realType, this._bindingScope, this);
					}
					else {
						this._bindingScope.replaceVariable(this._value.__ks_func_name_13(), realType, this);
					}
				}
				else {
					for(let __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
						name = __ks_1[__ks_0];
						this._bindingScope.replaceVariable(name, realType.getProperty(name), this);
					}
				}
			}
			if(KSType.isValue(this._index)) {
				if(!this._declareIndex) {
					this._bindingScope.replaceVariable(this._data.loop.index.name, this._bindingScope.reference("Number"), this);
				}
				this._index.prepare();
			}
			this._body.prepare();
			if(this._body.type().isAny() === true) {
				this._type = this._scope.__ks_func_reference_0("Array");
			}
			else {
				this._type = Type.arrayOf(this._body.type(), this._scope);
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._expression.translate();
			if(KSType.isValue(this._value)) {
				this._value.translate();
			}
			if(KSType.isValue(this._index)) {
				this._index.translate();
			}
			this._body.translate();
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isUsingVariable_1(name) {
			return (this._expression.isUsingVariable(name) === true) || ((this._when !== null) && (this._when.isUsingVariable(name) === true)) || (this._body.isUsingVariable(name) === true);
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			this._expression.listNonLocalVariables(scope, variables);
			KSType.isValue(this._when) ? this._when.listNonLocalVariables(scope, variables) : null;
			KSType.isValue(this._body) ? this._body.listNonLocalVariables(scope, variables) : null;
			return variables;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_18(fragments, mode) {
			this.__ks_func_module_0().flag("Helper");
			const surround = $function.surround.__ks_0(this);
			fragments.code($runtime.helper.__ks_0(this), ".mapArray(").compile(this._expression).code(", ");
			fragments.code(surround.beforeParameters).compile(KSType.isValue(this._value) ? this._value : this._valueName);
			if(KSType.isValue(this._index)) {
				fragments.code($comma).compile(this._index);
			}
			fragments.code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(KSType.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(KSType.isValue(this._value) ? this._value : this._valueName);
				if(KSType.isValue(this._index)) {
					fragments.code($comma).compile(this._index);
				}
				fragments.code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_18.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class ArrayComprehensionForOf extends Expression {
		static __ks_new_0() {
			const o = Object.create(ArrayComprehensionForOf.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ArrayComprehensionForOf.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ArrayComprehensionForOf.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._declaration = false;
			this._defineKey = false;
			this._defineValue = false;
			this._immutable = false;
			this._when = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._bindingScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._bodyScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
			for(let __ks_0 = 0, __ks_1 = this._data.loop.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.loop.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
					this._declaration = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
					this._immutable = true;
				}
			}
			this._expression = $compile.expression(this._data.loop.expression, this, this._scope);
			this._expression.analyse();
			if(KSType.isValue(this._data.loop.key)) {
				const keyVariable = this._scope.getVariable(this._data.loop.key.name);
				if(this._declaration || (keyVariable === null)) {
					this._bindingScope.define(this._data.loop.key.name, this._immutable, this._bindingScope.reference("String"), true, this);
					this._defineKey = true;
				}
				else if(keyVariable.__ks_func_isImmutable_0() === true) {
					ReferenceException.throwImmutable(this._data.loop.key.name, this);
				}
				this._key = $compile.expression(this._data.loop.key, this, this._bindingScope);
				this._key.analyse();
			}
			else {
				this._keyName = this._bindingScope.acquireTempName();
			}
			if(KSType.isValue(this._data.loop.value)) {
				this._value = $compile.expression(this._data.loop.value, this, this._bindingScope);
				this._value.setAssignment(AssignmentType.Expression);
				this._value.analyse();
				for(let __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
					name = __ks_1[__ks_0];
					const variable = this._bindingScope.getVariable(name);
					if(this._declaration || (variable === null)) {
						this._defineValue = true;
						this._bindingScope.define(name, this._immutable, AnyType.NullableUnexplicit, true, this);
					}
					else if(variable.isImmutable() === true) {
						ReferenceException.throwImmutable(name, this);
					}
				}
			}
			this._body = $compile.statement($return.__ks_0(this._data.body), this, this._bodyScope);
			this._body.initiate();
			this._body.analyse();
			if(KSType.isValue(this._data.loop.when)) {
				this._when = $compile.statement($return.__ks_0(this._data.loop.when), this, this._bodyScope);
				this._when.initiate();
				this._when.analyse();
			}
			if(KSType.isValue(this._keyName)) {
				this._bindingScope.releaseTempName(this._keyName);
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._expression.prepare();
			const type = this._expression.type();
			if(!((type.isAny() === true) || (type.isDictionary() === true) || (type.isObject() === true))) {
				TypeException.__ks_sttc_throwInvalidForOfExpression_0(this);
			}
			if(KSType.isValue(this._value)) {
				const parameterType = type.parameter();
				const valueType = Type.__ks_sttc_fromAST_0(this._data.type, this);
				if(!(parameterType.matchContentOf(valueType) === true)) {
					TypeException.throwInvalidAssignement(this._value, valueType, parameterType, this);
				}
				const realType = (parameterType.isMorePreciseThan(valueType) === true) ? parameterType : valueType;
				if(KSType.isClassInstance(this._value, IdentifierLiteral)) {
					if(this._defineValue) {
						this._value.type(realType, this._bindingScope, this);
					}
					else {
						this._bindingScope.replaceVariable(this._value.__ks_func_name_13(), realType, this);
					}
				}
				else {
					for(let __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
						name = __ks_1[__ks_0];
						this._bindingScope.replaceVariable(name, realType.getProperty(name), this);
					}
				}
			}
			if(KSType.isValue(this._key)) {
				if(!this._defineKey) {
					this._bindingScope.replaceVariable(this._data.key.name, this._bindingScope.reference("String"), this);
				}
				this._key.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._expression.translate();
			if(KSType.isValue(this._key)) {
				this._key.translate();
			}
			if(KSType.isValue(this._value)) {
				this._value.translate();
			}
			this._body.translate();
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isUsingVariable_1(name) {
			return (this._expression.isUsingVariable(name) === true) || ((this._when !== null) && (this._when.isUsingVariable(name) === true)) || (this._body.isUsingVariable(name) === true);
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			this._expression.listNonLocalVariables(scope, variables);
			KSType.isValue(this._when) ? this._when.listNonLocalVariables(scope, variables) : null;
			KSType.isValue(this._body) ? this._body.listNonLocalVariables(scope, variables) : null;
			return variables;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_19(fragments, mode) {
			this.__ks_func_module_0().flag("Helper");
			const surround = $function.surround.__ks_0(this);
			fragments.code($runtime.helper.__ks_0(this), ".mapDictionary(").compile(this._expression).code(", ");
			fragments.code(surround.beforeParameters).compile(KSType.isValue(this._key) ? this._key : this._keyName);
			if(KSType.isValue(this._value)) {
				fragments.code($comma).compile(this._value);
			}
			fragments.code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(KSType.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(KSType.isValue(this._key) ? this._key : this._keyName);
				if(KSType.isValue(this._value)) {
					fragments.code($comma).compile(this._value);
				}
				fragments.code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_19.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("Array");
		}
	}
	class ArrayComprehensionForRange extends Expression {
		static __ks_new_0() {
			const o = Object.create(ArrayComprehensionForRange.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ArrayComprehensionForRange.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ArrayComprehensionForRange.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._by = null;
			this._when = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._bindingScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._bodyScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
			this._bindingScope.define(this._data.loop.value.name, false, this._scope.__ks_func_reference_0("Number"), true, this);
			this._value = $compile.expression(this._data.loop.value, this, this._bindingScope);
			this._value.analyse();
			this._from = $compile.expression(this._data.loop.from, this, this._scope);
			this._from.analyse();
			this._to = $compile.expression(this._data.loop.to, this, this._scope);
			this._to.analyse();
			if(KSType.isValue(this._data.loop.by)) {
				this._by = $compile.expression(this._data.loop.by, this, this._scope);
				this._body.analyse();
			}
			this._body = $compile.statement($return.__ks_0(this._data.body), this, this._bodyScope);
			this._body.initiate();
			this._body.analyse();
			if(KSType.isValue(this._data.loop.when)) {
				this._when = $compile.statement($return.__ks_0(this._data.loop.when), this, this._bodyScope);
				this._when.initiate();
				this._when.analyse();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._value.prepare();
			this._from.prepare();
			this._to.prepare();
			if(KSType.isValue(this._by)) {
				this._by.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._value.translate();
			this._from.translate();
			this._to.translate();
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			this._body.translate();
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isUsingVariable_1(name) {
			return (this._from.isUsingVariable(name) === true) || (this._to.isUsingVariable(name) === true) || ((this._by !== null) && (this._by.isUsingVariable(name) === true)) || ((this._when !== null) && (this._when.isUsingVariable(name) === true)) || (this._body.isUsingVariable(name) === true);
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			this._from.listNonLocalVariables(scope, variables);
			this._to.listNonLocalVariables(scope, variables);
			KSType.isValue(this._by) ? this._by.listNonLocalVariables(scope, variables) : null;
			KSType.isValue(this._when) ? this._when.listNonLocalVariables(scope, variables) : null;
			KSType.isValue(this._body) ? this._body.listNonLocalVariables(scope, variables) : null;
			return variables;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_20(fragments, mode) {
			this.__ks_func_module_0().flag("Helper");
			const surround = $function.surround.__ks_0(this);
			fragments.code($runtime.helper.__ks_0(this), ".mapRange(").compile(this._from).code($comma).compile(this._to);
			if(KSType.isValue(this._by)) {
				fragments.code(", ").compile(this._by);
			}
			else {
				fragments.code(", 1");
			}
			fragments.code($comma, "true", $comma, "true", $comma).code(surround.beforeParameters).compile(this._value).code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(KSType.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(this._value).code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_20.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("Array");
		}
	}
	class AwaitExpression extends Expression {
		static __ks_new_0(...args) {
			const o = Object.create(AwaitExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._awaiting = true;
			this._reuseName = null;
		}
		__ks_cons_0(data, parent, scope = null) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			Expression.prototype.__ks_cons_1.call(this, data, parent, scope);
			let ancestor = parent;
			while(KSType.isValue(ancestor) && !(KSType.isClassInstance(ancestor, AnonymousFunctionExpression) || KSType.isClassInstance(ancestor, ArrowFunctionExpression) || KSType.isClassInstance(ancestor, FunctionDeclarator) || KSType.isClassInstance(ancestor, ClassMethodDeclaration) || KSType.isClassInstance(ancestor, ImplementClassMethodDeclaration) || KSType.isClassInstance(ancestor, ImplementNamespaceFunctionDeclaration))) {
				if(KSType.isClassInstance(ancestor, TryStatement)) {
					this._try = ancestor;
				}
				ancestor = ancestor.__ks_func_parent_0();
			}
			if(KSType.isValue(ancestor)) {
				this._function = ancestor;
			}
			else if(!(this.__ks_func_module_0().isBinary() === true)) {
				SyntaxException.__ks_sttc_throwInvalidAwait_0(this);
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return AwaitExpression.prototype.__ks_cons_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._operation = $compile.expression(this._data.operation, this);
			this._operation.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._operation.prepare();
			this._reuseName = this._scope.__ks_func_acquireTempName_0(false);
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._operation.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isAwait_2() {
			return true;
		}
		__ks_func_isAwaiting_0() {
			return this._awaiting;
		}
		__ks_func_isUsingVariable_1(name) {
			return this._operation.isUsingVariable(name);
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			return this._operation.listNonLocalVariables(scope, variables);
		}
		toAwaitExpressionFragments() {
			return this.__ks_func_toAwaitExpressionFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toAwaitExpressionFragments_2(fragments, statements) {
			fragments.code(KSHelper.concatString("(__ks_e, ", this._reuseName, ") =>"));
			const block = fragments.newBlock();
			let index = -1;
			let item = null;
			for(let i = 0, __ks_0 = statements.length, statement; i < __ks_0 && (index === -1); ++i) {
				statement = statements[i];
				let __ks_1;
				if(KSType.isValue(__ks_1 = statement.toFragments(block, Mode.None)) ? (item = __ks_1, true) : false) {
					index = i;
				}
			}
			if(index !== -1) {
				item(statements.slice(index + 1));
			}
			block.done();
			fragments.code(")").done();
		}
		__ks_func_toAwaitExpressionFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toAwaitExpressionFragments_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toAwaitExpressionFragments_rt) {
				return super.__ks_func_toAwaitExpressionFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_21(fragments, mode) {
			if(this._awaiting) {
				let item, __ks_0;
				if(KSType.isValue(__ks_0 = this._operation.toFragments(fragments, Mode.Async)) ? (item = __ks_0, true) : false) {
					return item;
				}
				else {
					this._awaiting = false;
					if(KSType.isValue(this._try)) {
						return KSHelper.vcurry(this._try.toAwaitExpressionFragments, this._try, fragments, [Literal.__ks_new_0(KSHelper.notNull(this._reuseName), this)]);
					}
					else if(KSType.isValue(this._function) ? this._function.type().isAsync() === true : false) {
						return KSHelper.vcurry(this._function.toAwaitExpressionFragments, this._function, fragments, [Literal.__ks_new_0(KSHelper.notNull(this._reuseName), this)]);
					}
					else {
						return KSHelper.vcurry(this.toAwaitExpressionFragments, this, fragments);
					}
				}
			}
			else {
				fragments.code(this._reuseName);
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_21.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._operation.type();
		}
	}
	class ArrayBinding extends Expression {
		static __ks_new_0() {
			const o = Object.create(ArrayBinding.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ArrayBinding.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ArrayBinding.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._assignment = AssignmentType.Neither;
			this._elements = [];
			this._flatten = false;
			this._immutable = false;
			this._type = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._flatten = this._options.format.destructuring === "es5";
			for(let index = 0, __ks_0 = this._data.elements.length, data; index < __ks_0; ++index) {
				data = this._data.elements[index];
				const element = this.newElement(data);
				element.setAssignment(this._assignment);
				element.index(index);
				element.analyse();
				if((element.isThisAliasing() === true) && (this._assignment !== AssignmentType.Parameter)) {
					this._flatten = true;
				}
				this._elements.push(element);
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(this._type === null) {
				for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					element.prepare();
				}
				this._type = this._scope.__ks_func_reference_0("Array");
			}
			else if(KSType.isClassInstance(this._type, ArrayType)) {
				if(KSOperator.lt(this._type.__ks_func_length_2(), this._elements.length)) {
					ReferenceException.throwBindingExceedArray(this._elements.length, this._type.__ks_func_length_2(), this);
				}
				for(let index = 0, __ks_0 = this._elements.length, element; index < __ks_0; ++index) {
					element = this._elements[index];
					element.type(this._type.__ks_func_getElement_0(index));
					element.prepare();
				}
			}
			else if(this._type.__ks_func_isTuple_0() === true) {
				const type = this._type.__ks_func_discard_0();
				if(KSOperator.lt(type.length(), this._elements.length)) {
					ReferenceException.throwBindingExceedArray(this._elements.length, type.length(), this);
				}
				for(let index = 0, __ks_0 = this._elements.length, element; index < __ks_0; ++index) {
					element = this._elements[index];
					element.type(type.getProperty(index).type());
					element.prepare();
				}
			}
			else {
				const type = this._type.parameter();
				for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					element.type(type);
					element.prepare();
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_13(recipient) {
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.export(recipient);
			}
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_export_13.call(that, args[0]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		flagImmutable() {
			return this.__ks_func_flagImmutable_rt.call(null, this, this, arguments);
		}
		__ks_func_flagImmutable_0() {
			this._immutable = true;
		}
		__ks_func_flagImmutable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagImmutable_0.call(that);
			}
			if(super.__ks_func_flagImmutable_rt) {
				return super.__ks_func_flagImmutable_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		initializeVariables() {
			return this.__ks_func_initializeVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_initializeVariables_1(type, node) {
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.initializeVariables(type, node);
			}
		}
		__ks_func_initializeVariables_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isClassInstance(value, Expression);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_initializeVariables_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_initializeVariables_rt) {
				return super.__ks_func_initializeVariables_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isAssignable_0() {
			return true;
		}
		__ks_func_isDeclarable_0() {
			return true;
		}
		isImmutable() {
			return this.__ks_func_isImmutable_rt.call(null, this, this, arguments);
		}
		__ks_func_isImmutable_2() {
			return this._immutable;
		}
		__ks_func_isImmutable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isImmutable_2.call(that);
			}
			if(super.__ks_func_isImmutable_rt) {
				return super.__ks_func_isImmutable_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isDeclararingVariable() {
			return this.__ks_func_isDeclararingVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isDeclararingVariable_4(name) {
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				if(element.isDeclararingVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isDeclararingVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isDeclararingVariable_4.call(that, args[0]);
				}
			}
			if(super.__ks_func_isDeclararingVariable_rt) {
				return super.__ks_func_isDeclararingVariable_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRedeclared() {
			return this.__ks_func_isRedeclared_rt.call(null, this, this, arguments);
		}
		__ks_func_isRedeclared_3() {
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				if(element.isRedeclared() === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isRedeclared_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRedeclared_3.call(that);
			}
			if(super.__ks_func_isRedeclared_rt) {
				return super.__ks_func_isRedeclared_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isSplitAssignment_2() {
			return this._flatten && KSOperator.gt(this._elements.length, 1);
		}
		listAssignments() {
			return this.__ks_func_listAssignments_rt.call(null, this, this, arguments);
		}
		__ks_func_listAssignments_1(array) {
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.listAssignments(array);
			}
			return array;
		}
		__ks_func_listAssignments_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listAssignments_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_listAssignments_rt) {
				return super.__ks_func_listAssignments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_14() {
			return null;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_14.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		newElement() {
			return this.__ks_func_newElement_rt.call(null, this, this, arguments);
		}
		__ks_func_newElement_0(data) {
			return ArrayBindingElement.__ks_new_1(data, this, this._scope);
		}
		__ks_func_newElement_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_newElement_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_newElement_rt) {
				return super.__ks_func_newElement_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_setAssignment_0(assignment) {
			this._assignment = assignment;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_22(fragments, mode) {
			fragments.code("[");
			for(let i = 0, __ks_0 = this._elements.length; i < __ks_0; ++i) {
				if(i !== 0) {
					fragments.code(", ");
				}
				this._elements[i].toFragments(fragments);
			}
			fragments.code("]");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_22.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toAssignmentFragments() {
			return this.__ks_func_toAssignmentFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toAssignmentFragments_3(fragments, value) {
			if(this._flatten) {
				this.__ks_func_toFlatFragments_0(fragments, value);
			}
			else {
				fragments.compile(this).code($equals).compile(value);
			}
		}
		__ks_func_toAssignmentFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toAssignmentFragments_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toAssignmentFragments_rt) {
				return super.__ks_func_toAssignmentFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFlatFragments() {
			return this.__ks_func_toFlatFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFlatFragments_0(fragments, value) {
			if(this._elements.length === 1) {
				this._elements[0].toFlatFragments(fragments, value);
			}
			else {
				const reusableValue = TempReusableExpression.__ks_new_0(value, this);
				let comma = false;
				for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					if(!(element.isAnonymous() === true)) {
						if(comma) {
							fragments.code(", ");
						}
						else {
							comma = true;
						}
						element.toFlatFragments(fragments, reusableValue);
					}
				}
			}
		}
		__ks_func_toFlatFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFlatFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFlatFragments_rt) {
				return super.__ks_func_toFlatFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
		__ks_func_type_24(type) {
			if(type === void 0) {
				type = null;
			}
			this._type = type;
			return this;
		}
		__ks_func_type_25(type, scope, node) {
		}
		__ks_func_type_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Type);
			const t2 = value => KSType.isClassInstance(value, Scope);
			const t3 = KSType.isValue;
			if(args.length === 0) {
				return proto.__ks_func_type_22.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_type_24.call(that, args[0]);
				}
			}
			if(args.length === 3) {
				if(t1(args[0]) && t2(args[1]) && t3(args[2])) {
					return proto.__ks_func_type_25.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_type_rt.call(null, that, Expression.prototype, args);
		}
		walk() {
			return this.__ks_func_walk_rt.call(null, this, this, arguments);
		}
		__ks_func_walk_8(fn) {
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.walk(fn);
			}
		}
		__ks_func_walk_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_walk_8.call(that, args[0]);
				}
			}
			if(super.__ks_func_walk_rt) {
				return super.__ks_func_walk_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ArrayBindingElement extends Expression {
		static __ks_new_0() {
			const o = Object.create(ArrayBindingElement.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ArrayBindingElement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ArrayBindingElement.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._assignment = AssignmentType.Neither;
			this._defaultValue = null;
			this._hasDefaultValue = false;
			this._index = -1;
			this._name = null;
			this._named = false;
			this._rest = false;
			this._thisAlias = false;
			this._type = AnyType.NullableUnexplicit;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			if(KSType.isValue(this._data.name)) {
				this._name = this.compileVariable(this._data.name);
				this._name.setAssignment(this._assignment);
				this._name.analyse();
				this._named = true;
				if(KSType.isValue(this._data.defaultValue)) {
					this._hasDefaultValue = true;
					this._defaultValue = $compile.expression(this._data.defaultValue, this);
					this._defaultValue.analyse();
				}
				this._thisAlias = KSHelper.valueOf(this._data.name.kind) === NodeKind.ThisExpression.value;
			}
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Rest.value) {
					this._rest = true;
				}
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(KSType.isValue(this._data.type)) {
				this._type = Type.__ks_sttc_fromAST_0(this._data.type, this);
			}
			if(this._named) {
				this._name.prepare();
				if(this._hasDefaultValue) {
					this._defaultValue.prepare();
				}
				if(KSType.isClassInstance(this._name, IdentifierLiteral)) {
					const variable = this._name.__ks_func_variable_1();
					variable.setDeclaredType(this._type);
					if(this._assignment === AssignmentType.Declaration) {
						variable.setRealType(this._type);
					}
					else if(this._hasDefaultValue) {
						variable.setRealType(this._defaultValue.type());
					}
				}
				else {
					this._name.type(this._type);
				}
			}
			this.__ks_func_statement_0().assignTempVariables(this._scope);
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			if(this._named) {
				this._name.translate();
				if(this._hasDefaultValue) {
					this._defaultValue.translate();
				}
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		compileVariable() {
			return this.__ks_func_compileVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_compileVariable_0(data) {
			return $compile.expression.__ks_0(data, this);
		}
		__ks_func_compileVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_compileVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_compileVariable_rt) {
				return super.__ks_func_compileVariable_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_14(recipient) {
			return this._named ? this._name.export(recipient) : null;
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_export_14.call(that, args[0]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		index() {
			return this.__ks_func_index_rt.call(null, this, this, arguments);
		}
		__ks_func_index_1(index) {
			if(index === void 0) {
				index = null;
			}
			this._index = index;
			return this;
		}
		__ks_func_index_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_index_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_index_rt) {
				return super.__ks_func_index_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		initializeVariables() {
			return this.__ks_func_initializeVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_initializeVariables_2(type, node) {
			let name = this._name.name();
			if(KSType.isValue(name)) {
				let __ks_0;
				this._name.initializeVariables(KSType.isValue(__ks_0 = type.getProperty(name)) ? __ks_0 : AnyType.NullableUnexplicit, node);
			}
		}
		__ks_func_initializeVariables_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isClassInstance(value, Expression);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_initializeVariables_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_initializeVariables_rt) {
				return super.__ks_func_initializeVariables_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isImmutable() {
			return this.__ks_func_isImmutable_rt.call(null, this, this, arguments);
		}
		__ks_func_isImmutable_3() {
			return this._parent.isImmutable();
		}
		__ks_func_isImmutable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isImmutable_3.call(that);
			}
			if(super.__ks_func_isImmutable_rt) {
				return super.__ks_func_isImmutable_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isDeclararingVariable() {
			return this.__ks_func_isDeclararingVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isDeclararingVariable_5(name) {
			return this._named ? this._name.isDeclararingVariable(name) : false;
		}
		__ks_func_isDeclararingVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isDeclararingVariable_5.call(that, args[0]);
				}
			}
			if(super.__ks_func_isDeclararingVariable_rt) {
				return super.__ks_func_isDeclararingVariable_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAnonymous() {
			return this.__ks_func_isAnonymous_rt.call(null, this, this, arguments);
		}
		__ks_func_isAnonymous_0() {
			return !this._named;
		}
		__ks_func_isAnonymous_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAnonymous_0.call(that);
			}
			if(super.__ks_func_isAnonymous_rt) {
				return super.__ks_func_isAnonymous_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRedeclared() {
			return this.__ks_func_isRedeclared_rt.call(null, this, this, arguments);
		}
		__ks_func_isRedeclared_4() {
			return this._named ? this._name.isRedeclared() : false;
		}
		__ks_func_isRedeclared_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRedeclared_4.call(that);
			}
			if(super.__ks_func_isRedeclared_rt) {
				return super.__ks_func_isRedeclared_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRest() {
			return this.__ks_func_isRest_rt.call(null, this, this, arguments);
		}
		__ks_func_isRest_0() {
			return this._rest;
		}
		__ks_func_isRest_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRest_0.call(that);
			}
			if(super.__ks_func_isRest_rt) {
				return super.__ks_func_isRest_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isThisAliasing() {
			return this.__ks_func_isThisAliasing_rt.call(null, this, this, arguments);
		}
		__ks_func_isThisAliasing_0() {
			return this._thisAlias;
		}
		__ks_func_isThisAliasing_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isThisAliasing_0.call(that);
			}
			if(super.__ks_func_isThisAliasing_rt) {
				return super.__ks_func_isThisAliasing_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listAssignments() {
			return this.__ks_func_listAssignments_rt.call(null, this, this, arguments);
		}
		__ks_func_listAssignments_2(array) {
			return this._named ? this._name.listAssignments(array) : array;
		}
		__ks_func_listAssignments_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listAssignments_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_listAssignments_rt) {
				return super.__ks_func_listAssignments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		max() {
			return this.__ks_func_max_rt.call(null, this, this, arguments);
		}
		__ks_func_max_0() {
			return this._rest ? Infinity : 1;
		}
		__ks_func_max_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_max_0.call(that);
			}
			if(super.__ks_func_max_rt) {
				return super.__ks_func_max_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		min() {
			return this.__ks_func_min_rt.call(null, this, this, arguments);
		}
		__ks_func_min_0() {
			return this._rest ? 0 : 1;
		}
		__ks_func_min_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_min_0.call(that);
			}
			if(super.__ks_func_min_rt) {
				return super.__ks_func_min_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_setAssignment_0(assignment) {
			this._assignment = assignment;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_23(fragments) {
			if(this._rest) {
				fragments.code("...");
			}
			if(this._named) {
				fragments.compile(this._name);
				if(this._defaultValue !== null) {
					fragments.code(" = ").compile(this._defaultValue);
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toFragments_23.call(that, args[0]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toExistFragments() {
			return this.__ks_func_toExistFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toExistFragments_0(fragments, name) {
			if(this._rest) {
				fragments.code("...");
			}
			if(this._named) {
				if(this._defaultValue !== null) {
					fragments.code(" = ").compile(this._defaultValue);
				}
			}
		}
		__ks_func_toExistFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toExistFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toExistFragments_rt) {
				return super.__ks_func_toExistFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFlatFragments() {
			return this.__ks_func_toFlatFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFlatFragments_1(fragments, value) {
			if(this._named) {
				if(KSType.isClassInstance(this._name, ArrayBinding)) {
					this._name.__ks_func_toFlatFragments_0(fragments, new FlatArrayBindingElement(value, this._index, this));
				}
				else {
					fragments.compile(this._name).code($equals).wrap(value).code(KSHelper.concatString("[", this._index, "]"));
				}
			}
		}
		__ks_func_toFlatFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFlatFragments_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFlatFragments_rt) {
				return super.__ks_func_toFlatFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
		__ks_func_type_26(type) {
			this._type = type;
			return this;
		}
		__ks_func_type_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 0) {
				return proto.__ks_func_type_22.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_type_26.call(that, args[0]);
				}
			}
			return super.__ks_func_type_rt.call(null, that, Expression.prototype, args);
		}
		walk() {
			return this.__ks_func_walk_rt.call(null, this, this, arguments);
		}
		__ks_func_walk_9(fn) {
			if(this._named) {
				this._name.walk(fn);
			}
		}
		__ks_func_walk_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_walk_9.call(that, args[0]);
				}
			}
			if(super.__ks_func_walk_rt) {
				return super.__ks_func_walk_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class FlatArrayBindingElement extends Expression {
		static __ks_new_0(...args) {
			const o = Object.create(FlatArrayBindingElement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(array, index, parent) {
			if(array === void 0) {
				array = null;
			}
			if(index === void 0) {
				index = null;
			}
			Expression.prototype.__ks_cons_rt.call(null, this, [new Dictionary(), parent]);
			this._array = array;
			this._index = index;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return FlatArrayBindingElement.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isComposite_1() {
			return false;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_24(fragments, mode) {
			fragments.wrap(this._array).code("[").compile(this._index).code("]");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_24.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class FlatObjectBindingElement extends Expression {
		static __ks_new_0(...args) {
			const o = Object.create(FlatObjectBindingElement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(item, property, parent) {
			if(item === void 0) {
				item = null;
			}
			if(property === void 0) {
				property = null;
			}
			Expression.prototype.__ks_cons_rt.call(null, this, [new Dictionary(), parent]);
			this._item = item;
			this._property = property;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return FlatObjectBindingElement.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isComposite_1() {
			return false;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_25(fragments, mode) {
			fragments.wrap(this._item).code(".").compile(this._property);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_25.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class FlatReusableBindingElement extends Expression {
		static __ks_new_0(...args) {
			const o = Object.create(FlatReusableBindingElement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(value, parent) {
			if(value === void 0) {
				value = null;
			}
			Expression.prototype.__ks_cons_rt.call(null, this, [new Dictionary(), parent]);
			this._value = value;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return FlatReusableBindingElement.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isComposite_1() {
			return false;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_26(fragments, mode) {
			fragments.code("(").compileReusable(this._value).code(")");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_26.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ObjectBinding extends Expression {
		static __ks_new_0() {
			const o = Object.create(ObjectBinding.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ObjectBinding.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ObjectBinding.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._assignment = AssignmentType.Neither;
			this._elements = [];
			this._flatten = false;
			this._immutable = false;
			this._type = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._flatten = this._options.format.destructuring === "es5";
			for(let __ks_0 = 0, __ks_1 = this._data.elements.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.elements[__ks_0];
				const element = this.newElement(data);
				element.setAssignment(this._assignment);
				element.analyse();
				if((element.hasDefaultValue() === true) || ((element.isThisAliasing() === true) && (this._assignment !== AssignmentType.Parameter))) {
					this._flatten = true;
				}
				this._elements.push(element);
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(this._type === null) {
				this._type = DestructurableObjectType.__ks_new_0();
				for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					element.prepare();
					if(KSType.isClassInstance(element, ObjectBindingElement)) {
						this._type.addProperty(element.__ks_func_name_16(), element.__ks_func_type_22());
					}
				}
			}
			else if(KSType.isClassInstance(this._type, DictionaryType)) {
				for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					if(element.isRequired() === true) {
						let property = this._type.getProperty(element.name());
						if(KSType.isValue(property)) {
							element.type(property);
						}
						else {
							ReferenceException.throwUndefinedBindingVariable(element.name(), this);
						}
					}
					element.prepare();
				}
			}
			else if(this._type.__ks_func_isStruct_0() === true) {
				const type = this._type.__ks_func_discard_0();
				for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					if(element.isRequired() === true) {
						let property = type.getProperty(element.name());
						if(KSType.isValue(property)) {
							element.type(property.type());
						}
						else {
							ReferenceException.throwUndefinedBindingVariable(element.name(), this);
						}
					}
					element.prepare();
				}
			}
			else {
				const type = this._type.parameter();
				for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					element.type(type);
					element.prepare();
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_15(recipient) {
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.export(recipient);
			}
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_export_15.call(that, args[0]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		flagImmutable() {
			return this.__ks_func_flagImmutable_rt.call(null, this, this, arguments);
		}
		__ks_func_flagImmutable_1() {
			this._immutable = true;
		}
		__ks_func_flagImmutable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_flagImmutable_1.call(that);
			}
			if(super.__ks_func_flagImmutable_rt) {
				return super.__ks_func_flagImmutable_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		initializeVariables() {
			return this.__ks_func_initializeVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_initializeVariables_3(type, node) {
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.initializeVariables(type, node);
			}
		}
		__ks_func_initializeVariables_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isClassInstance(value, Expression);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_initializeVariables_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_initializeVariables_rt) {
				return super.__ks_func_initializeVariables_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isAssignable_0() {
			return true;
		}
		__ks_func_isDeclarable_0() {
			return true;
		}
		isImmutable() {
			return this.__ks_func_isImmutable_rt.call(null, this, this, arguments);
		}
		__ks_func_isImmutable_4() {
			return this._immutable;
		}
		__ks_func_isImmutable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isImmutable_4.call(that);
			}
			if(super.__ks_func_isImmutable_rt) {
				return super.__ks_func_isImmutable_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isDeclararingVariable() {
			return this.__ks_func_isDeclararingVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isDeclararingVariable_6(name) {
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				if(element.isDeclararingVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isDeclararingVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isDeclararingVariable_6.call(that, args[0]);
				}
			}
			if(super.__ks_func_isDeclararingVariable_rt) {
				return super.__ks_func_isDeclararingVariable_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRedeclared() {
			return this.__ks_func_isRedeclared_rt.call(null, this, this, arguments);
		}
		__ks_func_isRedeclared_5() {
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				if(element.isRedeclared() === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isRedeclared_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRedeclared_5.call(that);
			}
			if(super.__ks_func_isRedeclared_rt) {
				return super.__ks_func_isRedeclared_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isSplitAssignment_2() {
			return this._flatten && KSOperator.gt(this._elements.length, 1);
		}
		listAssignments() {
			return this.__ks_func_listAssignments_rt.call(null, this, this, arguments);
		}
		__ks_func_listAssignments_3(array) {
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.listAssignments(array);
			}
			return array;
		}
		__ks_func_listAssignments_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listAssignments_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_listAssignments_rt) {
				return super.__ks_func_listAssignments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_15() {
			return null;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_15.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		newElement() {
			return this.__ks_func_newElement_rt.call(null, this, this, arguments);
		}
		__ks_func_newElement_1(data) {
			return ObjectBindingElement.__ks_new_1(data, this, this._scope);
		}
		__ks_func_newElement_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_newElement_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_newElement_rt) {
				return super.__ks_func_newElement_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_setAssignment_0(assignment) {
			this._assignment = assignment;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_27(fragments, mode) {
			fragments.code("{");
			for(let i = 0, __ks_0 = this._elements.length; i < __ks_0; ++i) {
				if(i !== 0) {
					fragments.code(", ");
				}
				this._elements[i].toFragments(fragments);
			}
			fragments.code("}");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_27.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toAssignmentFragments() {
			return this.__ks_func_toAssignmentFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toAssignmentFragments_4(fragments, value) {
			if(this._flatten) {
				this.__ks_func_toFlatFragments_2(fragments, value);
			}
			else if(this._assignment === AssignmentType.Declaration) {
				fragments.compile(this).code($equals).compile(value);
			}
			else {
				fragments.code("(").compile(this).code($equals).compile(value).code(")");
			}
		}
		__ks_func_toAssignmentFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toAssignmentFragments_4.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toAssignmentFragments_rt) {
				return super.__ks_func_toAssignmentFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFlatFragments() {
			return this.__ks_func_toFlatFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFlatFragments_2(fragments, value) {
			if(this._elements.length === 1) {
				this._elements[0].toFlatFragments(fragments, value);
			}
			else {
				const reusableValue = TempReusableExpression.__ks_new_0(value, this);
				this._elements[0].toFlatFragments(fragments, reusableValue);
				for(let __ks_0 = 1, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					fragments.code(", ");
					element.toFlatFragments(fragments, reusableValue);
				}
			}
		}
		__ks_func_toFlatFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFlatFragments_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFlatFragments_rt) {
				return super.__ks_func_toFlatFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			let fragments = "{";
			for(let index = 0, __ks_0 = this._elements.length, element; index < __ks_0; ++index) {
				element = this._elements[index];
				if(index !== 0) {
					fragments += ", ";
				}
				fragments = KSHelper.concatString(fragments, element.name());
			}
			fragments += "}";
			return fragments;
		}
		__ks_func_type_22() {
			return this._type;
		}
		__ks_func_type_27(type) {
			if(type === void 0) {
				type = null;
			}
			this._type = type;
			return this;
		}
		__ks_func_type_28(type, scope, node) {
		}
		__ks_func_type_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Type);
			const t2 = value => KSType.isClassInstance(value, Scope);
			const t3 = KSType.isValue;
			if(args.length === 0) {
				return proto.__ks_func_type_22.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_type_27.call(that, args[0]);
				}
			}
			if(args.length === 3) {
				if(t1(args[0]) && t2(args[1]) && t3(args[2])) {
					return proto.__ks_func_type_28.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_type_rt.call(null, that, Expression.prototype, args);
		}
		walk() {
			return this.__ks_func_walk_rt.call(null, this, this, arguments);
		}
		__ks_func_walk_10(fn) {
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.walk(fn);
			}
		}
		__ks_func_walk_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_walk_10.call(that, args[0]);
				}
			}
			if(super.__ks_func_walk_rt) {
				return super.__ks_func_walk_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ObjectBindingElement extends Expression {
		static __ks_new_0() {
			const o = Object.create(ObjectBindingElement.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ObjectBindingElement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ObjectBindingElement.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._alias = null;
			this._assignment = AssignmentType.Neither;
			this._computed = false;
			this._defaultValue = null;
			this._hasDefaultValue = false;
			this._rest = false;
			this._sameName = false;
			this._thisAlias = false;
			this._type = AnyType.NullableUnexplicit;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Computed.value) {
					this._computed = true;
					break;
				}
			}
			if(KSType.isValue(this._data.alias)) {
				this._name = $compile.expression(this._data.name, this);
				this._alias = this.compileVariable(this._data.alias);
				this._thisAlias = KSHelper.valueOf(this._data.alias.kind) === NodeKind.ThisExpression.value;
			}
			else if(KSHelper.valueOf(this._data.name.kind) === NodeKind.ThisExpression.value) {
				this._name = $compile.expression(this._data.name.name, this);
				this._alias = this.compileVariable(this._data.name);
				this._thisAlias = true;
				this._sameName = true;
			}
			else {
				this._name = this.compileVariable(this._data.name);
				this._alias = this._name;
				this._sameName = true;
			}
			this._alias.setAssignment(this._assignment);
			this._alias.analyse();
			if(KSType.isValue(this._data.defaultValue)) {
				this._hasDefaultValue = true;
				this._defaultValue = $compile.expression(this._data.defaultValue, this);
				this._defaultValue.analyse();
			}
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Rest.value) {
					this._rest = true;
				}
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(KSType.isValue(this._data.type)) {
				this._type = Type.__ks_sttc_fromAST_0(this._data.type, this);
			}
			this._alias.prepare();
			if(this._hasDefaultValue) {
				this._defaultValue.prepare();
			}
			if(KSType.isClassInstance(this._alias, IdentifierLiteral)) {
				const variable = this._alias.__ks_func_variable_1();
				variable.setDeclaredType(this._type);
				if(this._assignment === AssignmentType.Declaration) {
					variable.setRealType(this._type);
				}
				else if(this._hasDefaultValue) {
					variable.setRealType(this._defaultValue.type());
				}
			}
			else if(!KSType.isClassInstance(this._alias, ThisExpression)) {
				this._alias.type(this._type);
			}
			this.__ks_func_statement_0().assignTempVariables(this._scope);
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._alias.translate();
			if(this._hasDefaultValue) {
				this._defaultValue.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		compileVariable() {
			return this.__ks_func_compileVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_compileVariable_1(data) {
			return $compile.expression.__ks_0(data, this);
		}
		__ks_func_compileVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_compileVariable_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_compileVariable_rt) {
				return super.__ks_func_compileVariable_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_16(recipient) {
			return this._alias.export(recipient);
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_export_16.call(that, args[0]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasDefaultValue() {
			return this.__ks_func_hasDefaultValue_rt.call(null, this, this, arguments);
		}
		__ks_func_hasDefaultValue_1() {
			return this._hasDefaultValue;
		}
		__ks_func_hasDefaultValue_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasDefaultValue_1.call(that);
			}
			if(super.__ks_func_hasDefaultValue_rt) {
				return super.__ks_func_hasDefaultValue_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		initializeVariables() {
			return this.__ks_func_initializeVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_initializeVariables_4(type, node) {
			let __ks_0, __ks_1, __ks_2;
			this._alias.initializeVariables(KSType.isValue(__ks_0 = type.getProperty(this._name.name())) ? __ks_0 : AnyType.NullableUnexplicit, node);
		}
		__ks_func_initializeVariables_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isClassInstance(value, Expression);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_initializeVariables_4.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_initializeVariables_rt) {
				return super.__ks_func_initializeVariables_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isImmutable() {
			return this.__ks_func_isImmutable_rt.call(null, this, this, arguments);
		}
		__ks_func_isImmutable_5() {
			return this._parent.isImmutable();
		}
		__ks_func_isImmutable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isImmutable_5.call(that);
			}
			if(super.__ks_func_isImmutable_rt) {
				return super.__ks_func_isImmutable_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isDeclararingVariable() {
			return this.__ks_func_isDeclararingVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isDeclararingVariable_7(name) {
			return this._alias.isDeclararingVariable(name);
		}
		__ks_func_isDeclararingVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isDeclararingVariable_7.call(that, args[0]);
				}
			}
			if(super.__ks_func_isDeclararingVariable_rt) {
				return super.__ks_func_isDeclararingVariable_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRedeclared() {
			return this.__ks_func_isRedeclared_rt.call(null, this, this, arguments);
		}
		__ks_func_isRedeclared_6() {
			return this._alias.isRedeclared();
		}
		__ks_func_isRedeclared_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRedeclared_6.call(that);
			}
			if(super.__ks_func_isRedeclared_rt) {
				return super.__ks_func_isRedeclared_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRequired() {
			return this.__ks_func_isRequired_rt.call(null, this, this, arguments);
		}
		__ks_func_isRequired_0() {
			return !(this._computed || this._rest || this._hasDefaultValue);
		}
		__ks_func_isRequired_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRequired_0.call(that);
			}
			if(super.__ks_func_isRequired_rt) {
				return super.__ks_func_isRequired_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isThisAliasing() {
			return this.__ks_func_isThisAliasing_rt.call(null, this, this, arguments);
		}
		__ks_func_isThisAliasing_1() {
			return this._thisAlias;
		}
		__ks_func_isThisAliasing_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isThisAliasing_1.call(that);
			}
			if(super.__ks_func_isThisAliasing_rt) {
				return super.__ks_func_isThisAliasing_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listAssignments() {
			return this.__ks_func_listAssignments_rt.call(null, this, this, arguments);
		}
		__ks_func_listAssignments_4(array) {
			return this._alias.listAssignments(array);
		}
		__ks_func_listAssignments_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listAssignments_4.call(that, args[0]);
				}
			}
			if(super.__ks_func_listAssignments_rt) {
				return super.__ks_func_listAssignments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_16() {
			return this._name.value();
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_16.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_setAssignment_0(assignment) {
			this._assignment = assignment;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_28(fragments) {
			if(this._rest) {
				fragments.code("...");
			}
			if($keywords[this.__ks_func_name_16()] === true) {
				if(this._computed) {
					fragments.code("[" + this.__ks_func_name_16() + "]: ").compile(this._alias);
				}
				else {
					fragments.code(this.__ks_func_name_16() + ": ").compile(this._alias);
				}
			}
			else {
				if(this._computed) {
					fragments.code("[").compile(this._name).code("]: ").compile(this._alias);
				}
				else if(this._sameName) {
					fragments.compile(this._alias);
				}
				else {
					fragments.compile(this._name).code(": ").compile(this._alias);
				}
			}
			if(this._hasDefaultValue) {
				fragments.code(" = ").compile(this._defaultValue);
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toFragments_28.call(that, args[0]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toExistFragments() {
			return this.__ks_func_toExistFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toExistFragments_1(fragments, name) {
			if(this._rest) {
				fragments.code("...");
			}
			if($keywords[this.__ks_func_name_16()] === true) {
				if(this._computed) {
					fragments.code(KSHelper.concatString("[", this.__ks_func_name_16(), "]: ", name));
				}
				else {
					fragments.code(KSHelper.concatString(this.__ks_func_name_16(), ": ", name));
				}
			}
			else {
				if(this._computed) {
					fragments.code("[").compile(this._name).code("]: ", name);
				}
				else {
					fragments.compile(this._name).code(": ", name);
				}
			}
			if(this._hasDefaultValue) {
				fragments.code(" = ").compile(this._defaultValue);
			}
		}
		__ks_func_toExistFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toExistFragments_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toExistFragments_rt) {
				return super.__ks_func_toExistFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFlatFragments() {
			return this.__ks_func_toFlatFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFlatFragments_3(fragments, value) {
			if(KSType.isClassInstance(this._alias, ObjectBinding)) {
				this._alias.__ks_func_toFlatFragments_2(fragments, new FlatObjectBindingElement(value, this._name, this));
			}
			else if($keywords[this.__ks_func_name_16()] === true) {
				if(this._hasDefaultValue) {
					fragments.compile(this._alias).code($equals, $runtime.helper.__ks_0(this), ".default(").wrap(value).code(".").code(this.__ks_func_name_16()).code($comma).compile(this._defaultValue).code(")");
				}
				else {
					fragments.compile(this._alias).code($equals).wrap(value).code(".").code(this.__ks_func_name_16());
				}
			}
			else {
				if(this._hasDefaultValue) {
					fragments.compile(this._alias).code($equals, $runtime.helper.__ks_0(this), ".default(").wrap(value).code(".").compile(this._name).code($comma).compile(this._defaultValue).code(")");
				}
				else {
					fragments.compile(this._alias).code($equals).wrap(value).code(".").compile(this._name);
				}
			}
		}
		__ks_func_toFlatFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFlatFragments_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFlatFragments_rt) {
				return super.__ks_func_toFlatFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
		__ks_func_type_29(type) {
			this._type = type;
			return this;
		}
		__ks_func_type_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 0) {
				return proto.__ks_func_type_22.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_type_29.call(that, args[0]);
				}
			}
			return super.__ks_func_type_rt.call(null, that, Expression.prototype, args);
		}
		walk() {
			return this.__ks_func_walk_rt.call(null, this, this, arguments);
		}
		__ks_func_walk_11(fn) {
			this._alias.walk(fn);
		}
		__ks_func_walk_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_walk_11.call(that, args[0]);
				}
			}
			if(super.__ks_func_walk_rt) {
				return super.__ks_func_walk_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class CallExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(CallExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(CallExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(CallExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._arguments = [];
			this._await = false;
			this._callees = [];
			this._calleeByHash = new Dictionary();
			this._flatten = false;
			this._hasDefaultCallee = false;
			this._named = false;
			this._nullable = false;
			this._nullableComputed = false;
			this._object = null;
			this._reusable = false;
			this._reuseName = null;
			this._tested = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			const es5 = (this._data.arguments.length !== 1) && (this._options.format.spreads === "es5");
			for(let __ks_0 = 0, __ks_1 = this._data.arguments.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.arguments[__ks_0];
				const argument = $compile.expression(data, this, void 0);
				argument.analyse();
				if(es5 && KSType.isClassInstance(argument, UnaryOperatorSpread)) {
					this._flatten = true;
				}
				else if(argument.isAwait() === true) {
					this._await = true;
				}
				if(KSType.isClassInstance(argument, NamedArgument)) {
					this._named = true;
				}
				this._arguments.push(argument);
			}
			if((KSHelper.valueOf(this._data.callee.kind) === NodeKind.MemberExpression.value) && !(this._data.callee.modifiers.some((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 3) {
						if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (modifier, __ks_0, __ks_1) => {
					return KSHelper.valueOf(modifier.kind) === ModifierKind.Computed.value;
				};
				return __ks_rt;
			})()) === true)) {
				this._object = $compile.expression(this._data.callee.object, this);
				this._object.analyse();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.prepare();
				if(argument.type().isInoperative() === true) {
					TypeException.throwUnexpectedInoperative(argument, this);
				}
			}
			if(this._options.format.spreads === "es5") {
				for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1 && !(this._flatten); ++__ks_0) {
					argument = this._arguments[__ks_0];
					if(KSType.isClassInstance(argument, UnaryOperatorSpread)) {
						this._flatten = true;
					}
				}
			}
			else {
				for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1 && !(this._flatten); ++__ks_0) {
					argument = this._arguments[__ks_0];
					if(KSType.isClassInstance(argument, UnaryOperatorSpread) && !(argument.__ks_func_argument_0().type().isArray() === true)) {
						this._flatten = true;
					}
				}
			}
			if(this._object !== null) {
				this._object.prepare();
				this._property = this._data.callee.property.name;
				this.makeMemberCallee(this._object.type());
			}
			else {
				if(KSHelper.valueOf(this._data.callee.kind) === NodeKind.Identifier.value) {
					let variable = this._scope.getVariable(this._data.callee.name);
					if(KSType.isValue(variable)) {
						const type = variable.__ks_func_getRealType_0();
						if(type.isFunction() === true) {
							if(type.isAsync() === true) {
								if(KSType.isClassInstance(this._parent, VariableDeclaration)) {
									if(!(this._parent.__ks_func_isAwait_0() === true)) {
										TypeException.throwNotSyncFunction(this._data.callee.name, this);
									}
								}
								else if(!KSType.isClassInstance(this._parent, AwaitExpression)) {
									TypeException.throwNotSyncFunction(this._data.callee.name, this);
								}
							}
							else {
								if(KSType.isClassInstance(this._parent, VariableDeclaration)) {
									if(this._parent.__ks_func_isAwait_0() === true) {
										TypeException.throwNotAsyncFunction(this._data.callee.name, this);
									}
								}
								else if(KSType.isClassInstance(this._parent, AwaitExpression)) {
									TypeException.throwNotAsyncFunction(this._data.callee.name, this);
								}
							}
						}
						let substitute = KSType.isFunction(variable.replaceCall) ? variable.replaceCall(this._data, this._arguments, this) : null;
						if(KSType.isValue(substitute)) {
							this.__ks_func_addCallee_0(new SubstituteCallee(this._data, substitute, this));
						}
						else {
							this.makeCallee(type, variable.__ks_func_name_0());
						}
					}
					else {
						ReferenceException.throwUndefinedFunction(this._data.callee.name, this);
					}
				}
				else if(KSHelper.valueOf(this._data.callee.kind) === NodeKind.FunctionExpression.value) {
					throw new NotImplementedException(this);
				}
				else if(KSHelper.valueOf(this._data.callee.kind) === NodeKind.LambdaExpression.value) {
					const expression = $compile.expression(this._data.callee, this);
					expression.analyse();
					expression.prepare();
					const __ks_function_1 = expression.type();
					const assessment = __ks_function_1.assessment("", this);
					let result = Router.matchArguments(assessment, this._arguments, this);
					if(KSType.isValue(result)) {
						if(KSType.isStructInstance(result, LenientCallMatchResult)) {
							this.__ks_func_addCallee_0(new DefaultCallee(this._data, expression, this));
						}
						else {
							const simplified = new SimplifiedArrowFunctionExpression(expression, result.matches[0]);
							this.__ks_func_addCallee_0(new DefaultCallee(this._data, simplified, this));
						}
					}
					else {
						ReferenceException.__ks_sttc_throwNoMatchingFunction_0("", this._arguments, this);
					}
				}
				else if(KSHelper.valueOf(this._data.callee.kind) === NodeKind.ThisExpression.value) {
					const expression = $compile.expression(this._data.callee, this);
					expression.analyse();
					expression.prepare();
					this._property = this._data.callee.name.name;
					const type = expression.type();
					if(KSType.isClassInstance(type, FunctionType) || KSType.isClassInstance(type, OverloadedFunctionType)) {
						const assessment = KSType.isClassInstance(type, FunctionType) ? type.__ks_func_assessment_0(this._property, this) : type.__ks_func_assessment_1(this._property, this);
						let result = Router.matchArguments(assessment, this._arguments, this);
						if(KSType.isValue(result)) {
							if(KSType.isStructInstance(result, LenientCallMatchResult)) {
								this.__ks_func_addCallee_0(new ThisCallee(this._data, expression, this._property, result.possibilities, this));
							}
							else {
								if(result.matches.length === 1) {
									this.__ks_func_addCallee_0(new PreciseThisCallee(this._data, expression, this._property, result.matches[0], this));
								}
								else {
									throw new NotImplementedException(this);
								}
							}
						}
						else {
							ReferenceException.throwNoMatchingClassMethod(this._property, expression.getClass().name(), KSHelper.mapArray(this._arguments, function(argument) {
								return argument.type();
							}), this);
						}
					}
					else if(type.isFunction() === true) {
						this.__ks_func_addCallee_0(new DefaultCallee(this._data, null, null, this));
					}
					else {
						ReferenceException.__ks_sttc_throwUndefinedFunction_0(this._property, this);
					}
				}
				else {
					if(this._named) {
						NotImplementedException.__ks_sttc_throw_0([this]);
					}
					this.__ks_func_addCallee_0(new DefaultCallee(this._data, null, null, this));
				}
			}
			if(this._callees.length === 1) {
				this._nullable = this._callees[0].__ks_func_isNullable_0();
				this._nullableComputed = this._callees[0].__ks_func_isNullableComputed_0();
				this._type = this._callees[0].__ks_func_type_0();
			}
			else {
				this._nullable = this._callees[0].__ks_func_isNullable_0();
				this._nullableComputed = this._callees[0].__ks_func_isNullableComputed_0();
				const types = [this._callees[0].__ks_func_type_0()];
				for(let i = 1, __ks_0 = this._callees.length; i < __ks_0; ++i) {
					const type = this._callees[i].__ks_func_type_0();
					if(!__ks_Array.__ks_func_any_0.call(types, (() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 3) {
								if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (item, __ks_0, __ks_1) => {
							return type.__ks_func_equals_0(item);
						};
						return __ks_rt;
					})())) {
						types.push(type);
					}
					if(this._callees[i].__ks_func_isNullable_0() === true) {
						this._nullable = true;
					}
					if(this._callees[i].__ks_func_isNullableComputed_0() === true) {
						this._nullableComputed = true;
					}
				}
				this._type = Type.union(this.__ks_func_scope_0(), ...types);
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.translate();
			}
			for(let __ks_0 = 0, __ks_1 = this._callees.length, callee; __ks_0 < __ks_1; ++__ks_0) {
				callee = this._callees[__ks_0];
				callee.__ks_func_translate_0();
			}
			if(KSHelper.valueOf(this._data.scope.kind) === ScopeKind.Argument.value) {
				this._callScope = $compile.expression(this._data.scope.value, this);
				this._callScope.analyse();
				this._callScope.prepare();
				this._callScope.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_acquireReusable_1(acquire) {
			if(acquire === true) {
				this._reuseName = this._scope.__ks_func_acquireTempName_0();
			}
			for(let __ks_0 = 0, __ks_1 = this._callees.length, callee; __ks_0 < __ks_1; ++__ks_0) {
				callee = this._callees[__ks_0];
				callee.__ks_func_acquireReusable_0(acquire);
			}
			for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.acquireReusable(acquire);
			}
		}
		arguments() {
			return this.__ks_func_arguments_rt.call(null, this, this, arguments);
		}
		__ks_func_arguments_0() {
			return this._arguments;
		}
		__ks_func_arguments_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_arguments_0.call(that);
			}
			if(super.__ks_func_arguments_rt) {
				return super.__ks_func_arguments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_inferTypes_0(inferables) {
			if(this._object !== null) {
				this._object.inferTypes(inferables);
				if(this._nullable && (this._object.isInferable() === true)) {
					inferables[this._object.path()] = (() => {
						const d = new Dictionary();
						d.isVariable = KSType.isClassInstance(this._object, IdentifierLiteral);
						d.type = this._object.type().setNullable(false);
						return d;
					})();
				}
			}
			for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.inferTypes(inferables);
			}
			return inferables;
		}
		__ks_func_isAwait_2() {
			return this._await;
		}
		__ks_func_isAwaiting_0() {
			for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				if(argument.isAwaiting() === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isCallable_0() {
			return !this._reusable;
		}
		__ks_func_isComposite_1() {
			return !this._reusable;
		}
		__ks_func_isComputed_0() {
			return (this._nullable || (this._callees.length > 1)) && !this._tested;
		}
		__ks_func_isExit_2() {
			return this._type.__ks_func_isNever_0();
		}
		__ks_func_isExpectingType_2() {
			return true;
		}
		__ks_func_isInitializingInstanceVariable_2(name) {
			for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				if(argument.isInitializingInstanceVariable(name) === true) {
					return true;
				}
			}
			for(let __ks_0 = 0, __ks_1 = this._callees.length, callee; __ks_0 < __ks_1; ++__ks_0) {
				callee = this._callees[__ks_0];
				if(!(callee.isInitializingInstanceVariable(name) === true)) {
					return false;
				}
			}
			return true;
		}
		__ks_func_isNullable_0() {
			return this._nullable;
		}
		__ks_func_isNullableComputed_0() {
			return this._nullableComputed;
		}
		__ks_func_isSkippable_0() {
			return (this._callees.length === 1) && (this._callees[0].__ks_func_isSkippable_0() === true);
		}
		__ks_func_isUsingInstanceVariable_1(name) {
			if(this._object !== null) {
				if(this._object.isUsingInstanceVariable(name) === true) {
					return true;
				}
			}
			else if((KSHelper.valueOf(this._data.callee.kind) === NodeKind.Identifier.value) && (this._data.callee.name === name)) {
				return true;
			}
			for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				if(argument.isUsingInstanceVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isUsingNonLocalVariables_0(scope) {
			if(this._object !== null) {
				if(this._object.isUsingNonLocalVariables(scope) === true) {
					return true;
				}
			}
			else if(KSHelper.valueOf(this._data.callee.kind) === NodeKind.Identifier.value) {
				const variable = this._scope.getVariable(this._data.callee.name);
				if(!scope.hasDeclaredVariable(variable.__ks_func_name_0())) {
					return true;
				}
			}
			for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				if(argument.isUsingNonLocalVariables(scope) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isUsingStaticVariable_1(__ks_class_1, varname) {
			if(this._object !== null) {
				if(this._object.isUsingStaticVariable(__ks_class_1, varname) === true) {
					return true;
				}
			}
			for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				if(argument.isUsingStaticVariable(__ks_class_1, varname) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isUsingVariable_1(name) {
			if(this._object !== null) {
				if(this._object.isUsingVariable(name) === true) {
					return true;
				}
			}
			else if((KSHelper.valueOf(this._data.callee.kind) === NodeKind.Identifier.value) && (this._data.callee.name === name)) {
				return true;
			}
			for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				if(argument.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_listLocalVariables_0(scope, variables) {
			if(this._object !== null) {
				this._object.listLocalVariables(scope, variables);
			}
			else if(KSHelper.valueOf(this._data.callee.kind) === NodeKind.Identifier.value) {
				const variable = this._scope.getVariable(this._data.callee.name);
				if(scope.hasDeclaredVariable(variable.__ks_func_name_0())) {
					__ks_Array._im_pushUniq(variables, variable);
				}
			}
			for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.listLocalVariables(scope, variables);
			}
			return variables;
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			if(this._object !== null) {
				this._object.listNonLocalVariables(scope, variables);
			}
			else if(KSHelper.valueOf(this._data.callee.kind) === NodeKind.Identifier.value) {
				const variable = this._scope.getVariable(this._data.callee.name);
				if(!(variable.__ks_func_isModule_0() === true) && !scope.hasDeclaredVariable(variable.__ks_func_name_0())) {
					__ks_Array._im_pushUniq(variables, variable);
				}
			}
			for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.listNonLocalVariables(scope, variables);
			}
			return variables;
		}
		makeCallee() {
			return this.__ks_func_makeCallee_rt.call(null, this, this, arguments);
		}
		__ks_func_makeCallee_0(type, name) {
			if(name === void 0) {
				name = null;
			}
			if(KSType.isClassInstance(type, FunctionType) || KSType.isClassInstance(type, OverloadedFunctionType)) {
				const assessment = type.assessment(name, this);
				let result = Router.matchArguments(assessment, this._arguments, this);
				if(KSType.isValue(result)) {
					if(KSType.isStructInstance(result, LenientCallMatchResult)) {
						this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, result.possibilities, result.arguments, this));
					}
					else {
						if(result.matches.length === 1) {
							const match = result.matches[0];
							if((match.function.__ks_func_isAlien_0() === true) || (match.function.__ks_func_index_0() === -1) || KSType.isClassInstance(match.function, ClassMethodType)) {
								this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, match.function, this));
							}
							else {
								this.__ks_func_addCallee_0(new FunctionCallee(this._data, match, this));
							}
						}
						else {
							const functions = KSHelper.mapArray(result.matches, function(match) {
								return match.function;
							});
							this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, functions, this));
						}
					}
				}
				else {
					if(type.__ks_func_isExhaustive_1(this) === true) {
						ReferenceException.throwNoMatchingFunction(name, this._arguments, this);
					}
					else {
						this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, null, this));
					}
				}
			}
			else if(type.__ks_func_isEnum_0() === true) {
				const assessment = type.__ks_func_discardName_0().assessment(type.__ks_func_reference_0(this._scope), this);
				let result = Router.matchArguments(assessment, this._arguments, type.__ks_func_isExhaustive_1(this), this);
				if(KSType.isValue(result)) {
					if(KSType.isStructInstance(result, LenientCallMatchResult)) {
						this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, type.__ks_func_setNullable_0(true), result.arguments, this));
					}
					else {
						this.__ks_func_addCallee_0(new EnumCallee(this._data, result.matches[0], this));
					}
				}
				else {
					if(type.__ks_func_isExhaustive_1(this) === true) {
						ReferenceException.throwNoMatchingStruct(name, this._arguments, this);
					}
					else {
						this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, type.__ks_func_setNullable_0(true), this));
					}
				}
			}
			else if(type.__ks_func_isStruct_0() === true) {
				const assessment = type.__ks_func_discardName_0().assessment(type.__ks_func_reference_0(this._scope), this);
				let result = Router.matchArguments(assessment, this._arguments, type.__ks_func_isExhaustive_1(this), this);
				if(KSType.isValue(result)) {
					if(KSType.isStructInstance(result, LenientCallMatchResult)) {
						this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, type, result.arguments, this));
					}
					else {
						this.__ks_func_addCallee_0(new StructCallee(this._data, result.matches[0], this));
					}
				}
				else {
					if(type.__ks_func_isExhaustive_1(this) === true) {
						ReferenceException.throwNoMatchingStruct(name, this._arguments, this);
					}
					else {
						this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, type, this));
					}
				}
			}
			else if(type.__ks_func_isTuple_0() === true) {
				const assessment = type.__ks_func_discardName_0().assessment(type.__ks_func_reference_0(this._scope), this);
				let result = Router.matchArguments(assessment, this._arguments, this);
				if(KSType.isValue(result)) {
					if(KSType.isStructInstance(result, LenientCallMatchResult)) {
						this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, type, result.arguments, this));
					}
					else {
						this.__ks_func_addCallee_0(new TupleCallee(this._data, result.matches[0], this));
					}
				}
				else {
					if(type.__ks_func_isExhaustive_1(this) === true) {
						ReferenceException.throwNoMatchingTuple(name, this._arguments, this);
					}
					else {
						this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, type, this));
					}
				}
			}
			else {
				this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, null, this));
			}
		}
		__ks_func_makeCallee_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isString(value) || KSType.isNull(value);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_makeCallee_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_makeCallee_rt) {
				return super.__ks_func_makeCallee_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		makeMemberCallee() {
			return this.__ks_func_makeMemberCallee_rt.call(null, this, this, arguments);
		}
		__ks_func_makeMemberCallee_0(value, name = null) {
			if(KSType.isClassInstance(value, AliasType)) {
				this.makeMemberCallee(value.type(), name);
			}
			else if(KSType.isClassInstance(value, ClassVariableType)) {
				this.makeMemberCalleeFromReference(value.type());
			}
			else if(KSType.isClassInstance(value, ClassType)) {
				name = KSHelper.notNull(name);
				if(value.hasClassMethod(this._property) === true) {
					const assessment = value.getClassAssessment(this._property, this);
					let result = Router.matchArguments(assessment, this._arguments, this);
					if(KSType.isValue(result)) {
						if(KSType.isStructInstance(result, LenientCallMatchResult)) {
							if(result.possibilities.some((() => {
								const __ks_rt = (...args) => {
									const t0 = KSType.isValue;
									if(args.length === 3) {
										if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
											return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
										}
									}
									throw KSHelper.badArgs();
								};
								__ks_rt.__ks_0 = (__ks_function_1, __ks_0, __ks_1) => {
									return __ks_function_1.isSealed();
								};
								return __ks_rt;
							})()) === true) {
								this.__ks_func_addCallee_0(new SealedCallee(this._data, name, false, result.possibilities, this));
							}
							else {
								this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, result.possibilities, this));
							}
						}
						else {
							if(result.matches.length === 1) {
								const match = result.matches[0];
								if(match.function.__ks_func_isSealed_0() === true) {
									this.__ks_func_addCallee_0(new SealedPreciseMethodCallee(this._data, this._object, this._property, match, name, this));
								}
								else {
									this.__ks_func_addCallee_0(new PreciseMethodCallee(this._data, this._object, this._property, match, this.__ks_func_scope_0().reference(name), this));
								}
							}
							else {
								throw new NotImplementedException(this);
							}
						}
					}
					else {
						if(value.isExhaustiveClassMethod(this._property, this) === true) {
							ReferenceException.throwNoMatchingClassMethod(this._property, name.__ks_func_name_0(), KSHelper.mapArray(this._arguments, function(argument) {
								return argument.type();
							}), this);
						}
						else if(assessment.sealed === true) {
							this.__ks_func_addCallee_0(new SealedMethodCallee(this._data, name, false, this));
						}
						else {
							this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, null, this));
						}
					}
				}
				else if(value.isExhaustive(this) === true) {
					ReferenceException.throwNotFoundClassMethod(this._property, name.__ks_func_name_0(), this);
				}
				else {
					this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, null, this));
				}
			}
			else if(KSType.isClassInstance(value, DictionaryType)) {
				let property = value.getProperty(this._property);
				if(KSType.isValue(property)) {
					this.makeCallee(property, this._property);
				}
				else {
					this.__ks_func_makeMemberCalleeFromReference_0(this._scope.__ks_func_reference_0("Dictionary"));
				}
			}
			else if(KSType.isClassInstance(value, EnumType)) {
				name = KSHelper.notNull(name);
				if(value.hasStaticMethod(this._property) === true) {
					const assessment = value.getStaticAssessment(this._property, this);
					let result = Router.matchArguments(assessment, this._arguments, this);
					if(KSType.isValue(result)) {
						if(KSType.isStructInstance(result, LenientCallMatchResult)) {
							this.__ks_func_addCallee_0(new EnumMethodCallee(this._data, this._object, this._property, result.possibilities, this));
						}
						else {
							if(result.matches.length === 1) {
								this.__ks_func_addCallee_0(new PreciseMethodCallee(this._data, this._object, this._property, result.matches[0], this.__ks_func_scope_0().reference(name), this));
							}
							else {
								throw new NotImplementedException(this);
							}
						}
					}
					else {
						if(value.isExhaustiveStaticMethod(this._property, this) === true) {
							ReferenceException.throwNoMatchingEnumMethod(this._property, name.__ks_func_name_0(), this._arguments, this);
						}
						else {
							this.__ks_func_addCallee_0(new EnumMethodCallee(this._data, this._object, this._property, null, this));
						}
					}
				}
				else if(value.isExhaustive(this) === true) {
					ReferenceException.throwNotFoundEnumMethod(this._property, name.__ks_func_name_0(), this);
				}
				else {
					this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, null, this));
				}
			}
			else if(KSType.isClassInstance(value, ExclusionType)) {
				this.makeMemberCallee(value.getMainType());
			}
			else if(KSType.isClassInstance(value, FunctionType)) {
				this.__ks_func_makeMemberCalleeFromReference_0(this._scope.__ks_func_reference_0("Function"));
			}
			else if(KSType.isClassInstance(value, NamedType)) {
				this.makeMemberCallee(value.type(), value);
			}
			else if(KSType.isClassInstance(value, NamespaceType)) {
				let property = value.getProperty(this._property);
				if(KSType.isValue(property)) {
					if(KSType.isClassInstance(property, FunctionType) || KSType.isClassInstance(property, OverloadedFunctionType)) {
						const assessment = KSType.isClassInstance(property, FunctionType) ? property.__ks_func_assessment_0(this._property, this) : property.__ks_func_assessment_1(this._property, this);
						let result = Router.matchArguments(assessment, this._arguments, this);
						if(KSType.isValue(result)) {
							if(KSType.isStructInstance(result, LenientCallMatchResult)) {
								this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, result.possibilities, this));
							}
							else {
								if(result.matches.length === 1) {
									const match = result.matches[0];
									if((match.function.__ks_func_isAlien_0() === true) || (match.function.__ks_func_index_0() === -1)) {
										this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, match.function, this));
									}
									else {
										this.__ks_func_addCallee_0(new FunctionCallee(this._data, match, this));
									}
								}
								else {
									const functions = KSHelper.mapArray(result.matches, function(match) {
										return match.function;
									});
									this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, functions, this));
								}
							}
						}
						else if(property.__ks_func_isExhaustive_1(this) === true) {
							ReferenceException.throwNoMatchingFunctionInNamespace(this._property, name, this._arguments, this);
						}
						else {
							this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, null, this));
						}
					}
					else if(KSType.isClassInstance(property, SealableType)) {
						this.makeNamespaceCallee(property.__ks_func_type_0(), property.__ks_func_isSealed_0(), name);
					}
					else {
						this.makeNamespaceCallee(property, value.isSealedProperty(this._property), name);
					}
				}
				else if(value.isExhaustive(this) === true) {
					ReferenceException.__ks_sttc_throwNotDefinedProperty_0(this._property, this);
				}
				else {
					this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, null, this));
				}
			}
			else if(KSType.isClassInstance(value, ParameterType)) {
				this.makeMemberCallee(value.type(), name);
			}
			else if(KSType.isClassInstance(value, ReferenceType)) {
				if((value.isNullable() === true) && !(this._options.rules.ignoreMisfit === true)) {
					if(!(this._data.callee.modifiers.some((() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 3) {
								if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (modifier, __ks_0, __ks_1) => {
							return KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value;
						};
						return __ks_rt;
					})()) === true)) {
						TypeException.__ks_sttc_throwNullableCaller_0(this._property, this);
					}
				}
				this.__ks_func_makeMemberCalleeFromReference_0(value);
			}
			else if(KSType.isClassInstance(value, SealableType)) {
				this.makeMemberCallee(value.type(), name);
			}
			else if(KSType.isClassInstance(value, UnionType)) {
				for(let __ks_0 = 0, __ks_1 = value.types(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
					type = __ks_1[__ks_0];
					this.makeMemberCallee(type);
				}
			}
			else {
				this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, null, this));
			}
		}
		__ks_func_makeMemberCallee_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_makeMemberCallee_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_makeMemberCallee_rt) {
				return super.__ks_func_makeMemberCallee_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		makeMemberCalleeFromReference() {
			return this.__ks_func_makeMemberCalleeFromReference_rt.call(null, this, this, arguments);
		}
		__ks_func_makeMemberCalleeFromReference_0(value, reference) {
			if(reference === void 0 || reference === null) {
				reference = value;
			}
			if(KSType.isClassInstance(value, AliasType)) {
				this.makeMemberCalleeFromReference(value.type());
			}
			else if(KSType.isClassInstance(value, ClassType)) {
				let callee, substitute, __ks_0;
				if(value.hasInstantiableMethod(this._property) === true) {
					const assessment = value.getInstantiableAssessment(this._property, this);
					let result = Router.matchArguments(assessment, this._arguments, this);
					if(KSType.isValue(result)) {
						if(KSType.isStructInstance(result, LenientCallMatchResult)) {
							if(result.possibilities.some((() => {
								const __ks_rt = (...args) => {
									const t0 = KSType.isValue;
									if(args.length === 3) {
										if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
											return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
										}
									}
									throw KSHelper.badArgs();
								};
								__ks_rt.__ks_0 = (__ks_function_1, __ks_0, __ks_1) => {
									return __ks_function_1.isSealed();
								};
								return __ks_rt;
							})()) === true) {
								this.__ks_func_addCallee_0(new SealedCallee(this._data, reference.__ks_func_type_0(), true, result.possibilities, this));
							}
							else {
								this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, result.possibilities, this));
							}
						}
						else {
							if(result.matches.length === 1) {
								const match = result.matches[0];
								if(match.function.__ks_func_isSealed_0() === true) {
									const __ks_class_1 = value.getClassWithInstanceMethod(this._property, reference.__ks_func_type_0());
									this.__ks_func_addCallee_0(new SealedPreciseMethodCallee(this._data, this._object, this._property, match, __ks_class_1, this));
								}
								else {
									this.__ks_func_addCallee_0(new PreciseMethodCallee(this._data, this._object, this._property, match, reference, this));
								}
							}
							else {
								throw new NotImplementedException(this);
							}
						}
					}
					else {
						if(value.isExhaustiveInstanceMethod(this._property, this) === true) {
							ReferenceException.__ks_sttc_throwNoMatchingClassMethod_0(this._property, reference.__ks_func_name_2(), KSHelper.mapArray(this._arguments, function(argument) {
								return argument.type();
							}), this);
						}
						else {
							this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, null, this));
						}
					}
				}
				else if((KSHelper.valueOf(this._data.callee.object.kind) === NodeKind.Identifier.value) && (KSType.isValue(__ks_0 = this._scope.getVariable(this._data.callee.object.name)) ? (callee = __ks_0, true) : false) && (KSType.isFunction(callee.replaceMemberCall) && KSType.isValue(__ks_0 = callee.replaceMemberCall(this._property, this._arguments, this)) ? (substitute = __ks_0, true) : false)) {
					this.__ks_func_addCallee_0(new SubstituteCallee(this._data, substitute, Type.Any, this));
				}
				else if(value.isExhaustive(this) === true) {
					ReferenceException.__ks_sttc_throwNotFoundClassMethod_0(this._property, reference.__ks_func_name_2(), this);
				}
				else {
					this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, null, this));
				}
			}
			else if(KSType.isClassInstance(value, DictionaryType)) {
				let property = value.getProperty(this._property);
				if(KSType.isValue(property)) {
					if(KSType.isClassInstance(property, FunctionType) || KSType.isClassInstance(property, OverloadedFunctionType)) {
						const assessment = KSType.isClassInstance(property, FunctionType) ? property.__ks_func_assessment_0(this._property, this) : property.__ks_func_assessment_1(this._property, this);
						let result = Router.matchArguments(assessment, this._arguments, this);
						if(KSType.isValue(result)) {
							if(KSType.isStructInstance(result, LenientCallMatchResult)) {
								this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, result.possibilities, this));
							}
							else {
								if(result.matches.length === 1) {
									const match = result.matches[0];
									if((match.function.__ks_func_isAlien_0() === true) || (match.function.__ks_func_index_0() === -1)) {
										this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, match.function, this));
									}
									else {
										this.__ks_func_addCallee_0(new FunctionCallee(this._data, match, this));
									}
								}
								else {
									const functions = KSHelper.mapArray(result.matches, function(match) {
										return match.function;
									});
									this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, functions, this));
								}
							}
						}
						else if(property.__ks_func_isExhaustive_1(this) === true) {
							ReferenceException.throwNoMatchingFunction(this._property, reference.__ks_func_name_2(), this._arguments, this);
						}
						else {
							this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, null, this));
						}
					}
					else {
						throw new NotImplementedException(this);
					}
				}
				else if(value.isExhaustive(this) === true) {
					ReferenceException.__ks_sttc_throwNotDefinedProperty_0(this._property, this);
				}
				else {
					this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, null, this));
				}
			}
			else if(KSType.isClassInstance(value, EnumType)) {
				if(value.hasInstanceMethod(this._property) === true) {
					const assessment = value.getInstanceAssessment(this._property, this);
					let result = Router.matchArguments(assessment, this._arguments, this);
					if(KSType.isValue(result)) {
						if(KSType.isStructInstance(result, LenientCallMatchResult)) {
							this.__ks_func_addCallee_0(new EnumMethodCallee(this._data, KSHelper.cast(reference.__ks_func_discardReference_0(), "NamedType", false, NamedType, "Class"), "__ks_func_" + this._property, result.possibilities, this));
						}
						else {
							if(result.matches.length === 1) {
								const match = result.matches[0];
								this.__ks_func_addCallee_0(new InvertedPreciseMethodCallee(this._data, KSHelper.cast(reference.__ks_func_discardReference_0(), "NamedType", false, NamedType, "Class"), this._property, match, this));
							}
							else {
								const functions = KSHelper.mapArray(result.matches, function(match) {
									return match.function;
								});
								this.__ks_func_addCallee_0(new EnumMethodCallee(this._data, KSHelper.cast(reference.__ks_func_discardReference_0(), "NamedType", false, NamedType, "Class"), "__ks_func_" + this._property, result.functions, this));
							}
						}
					}
					else {
						if(value.isExhaustiveInstanceMethod(this._property, this) === true) {
							ReferenceException.__ks_sttc_throwNoMatchingEnumMethod_0(this._property, reference.__ks_func_name_2(), this._arguments, this);
						}
						else {
							this.__ks_func_addCallee_0(new EnumMethodCallee(this._data, KSHelper.cast(reference.__ks_func_discardReference_0(), "NamedType", false, NamedType, "Class"), "__ks_func_" + this._property, null, this));
						}
					}
				}
				else if(reference.isExhaustive(this) === true) {
					ReferenceException.__ks_sttc_throwNotFoundEnumMethod_0(this._property, reference.__ks_func_name_2(), this);
				}
				else {
					this.__ks_func_addCallee_0(new EnumMethodCallee(this._data, KSHelper.cast(reference.__ks_func_discardReference_0(), "NamedType", false, NamedType, "Class"), "__ks_func_" + this._property, null, this));
				}
			}
			else if(KSType.isClassInstance(value, FunctionType)) {
				throw new NotImplementedException(this);
			}
			else if(KSType.isClassInstance(value, NamedType)) {
				this.makeMemberCalleeFromReference(value.type(), reference);
			}
			else if(KSType.isClassInstance(value, ParameterType)) {
				throw new NotImplementedException(this);
			}
			else if(KSType.isClassInstance(value, ReferenceType)) {
				this.makeMemberCalleeFromReference(value.type(), value);
			}
			else if(KSType.isClassInstance(value, UnionType)) {
				for(let __ks_0 = 0, __ks_1 = value.types(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
					type = __ks_1[__ks_0];
					this.makeMemberCallee(type);
				}
			}
			else {
				this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, null, this));
			}
		}
		__ks_func_makeMemberCalleeFromReference_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, ReferenceType) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_makeMemberCalleeFromReference_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_makeMemberCalleeFromReference_rt) {
				return super.__ks_func_makeMemberCalleeFromReference_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		makeNamespaceCallee() {
			return this.__ks_func_makeNamespaceCallee_rt.call(null, this, this, arguments);
		}
		__ks_func_makeNamespaceCallee_0(property, __ks_sealed_1, name) {
			if(KSType.isClassInstance(property, FunctionType)) {
				if(__ks_sealed_1 === true) {
					this.__ks_func_addCallee_0(new SealedFunctionCallee(this._data, name, property, property.__ks_func_getReturnType_0(), this));
				}
				else {
					this.__ks_func_makeCallee_0(property, this._property);
				}
			}
			else if(KSType.isClassInstance(property, OverloadedFunctionType)) {
				this.__ks_func_makeCallee_0(property, this._property);
			}
			else {
				this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, property, this));
			}
		}
		__ks_func_makeNamespaceCallee_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_makeNamespaceCallee_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_makeNamespaceCallee_rt) {
				return super.__ks_func_makeNamespaceCallee_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_releaseReusable_1() {
			if(KSType.isValue(this._reuseName)) {
				this._scope.releaseTempName(this._reuseName);
			}
			for(let __ks_0 = 0, __ks_1 = this._callees.length, callee; __ks_0 < __ks_1; ++__ks_0) {
				callee = this._callees[__ks_0];
				callee.__ks_func_releaseReusable_0();
			}
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_29(fragments, mode) {
			if(mode.valueOf() === Mode.Async.value) {
				for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = this._arguments[__ks_0];
					if(argument.isAwaiting() === true) {
						return argument.toFragments(fragments, mode);
					}
				}
				this.__ks_func_toCallFragments_0(fragments, mode);
				if(this._arguments.length !== 0) {
					fragments.code(", ");
				}
			}
			else {
				if(this._reusable) {
					fragments.code(this._reuseName);
				}
				else if((this.__ks_func_isNullable_0() === true) && !this._tested) {
					fragments.wrapNullable(this).code(" ? ");
					this._tested = true;
					this.__ks_func_toFragments_29(fragments, mode);
					fragments.code(" : null");
				}
				else {
					for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
						argument = this._arguments[__ks_0];
						if(argument.isAwaiting() === true) {
							return argument.toFragments(fragments, mode);
						}
					}
					this.__ks_func_toCallFragments_0(fragments, mode);
					fragments.code(")");
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_29.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toBooleanFragments_6(fragments, mode, junction) {
			if(mode.valueOf() === Mode.Async.value) {
				this.__ks_func_toCallFragments_0(fragments, mode);
				if(this._arguments.length !== 0) {
					fragments.code(", ");
				}
			}
			else {
				if(this._reusable) {
					fragments.code(this._reuseName);
					if(!(this._type.__ks_func_isBoolean_0() === true) || (this._type.__ks_func_isNullable_0() === true)) {
						fragments.code(" === true");
					}
				}
				else if((this.__ks_func_isNullable_0() === true) && !this._tested) {
					fragments.wrapNullable(this).code(" ? ");
					this._tested = true;
					this.__ks_func_toFragments_29(fragments, mode);
					if(!(this._type.__ks_func_isBoolean_0() === true) || (this._type.__ks_func_isNullable_0() === true)) {
						fragments.code(" === true");
					}
					fragments.code(" : false");
				}
				else {
					this.__ks_func_toCallFragments_0(fragments, mode);
					fragments.code(")");
					if(!(this._type.__ks_func_isBoolean_0() === true) || (this._type.__ks_func_isNullable_0() === true)) {
						fragments.code(" === true");
					}
				}
			}
		}
		__ks_func_toBooleanFragments_5(fragments, mode, junction) {
			return this.__ks_func_toBooleanFragments_6(fragments, mode, junction);
		}
		__ks_func_toBooleanFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toBooleanFragments_6.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_toBooleanFragments_rt.call(null, that, Expression.prototype, args);
		}
		toCallFragments() {
			return this.__ks_func_toCallFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toCallFragments_0(fragments, mode) {
			if(this._callees.length === 1) {
				this._callees[0].__ks_func_toFragments_0(fragments, mode, this);
			}
			else {
				this.__ks_func_module_0().flag("Type");
				for(let __ks_0 = 0, __ks_1 = this._callees.length - 1, callee; __ks_0 < __ks_1; ++__ks_0) {
					callee = this._callees[__ks_0];
					callee.toPositiveTestFragments(fragments, this);
					fragments.code(" ? ");
					callee.__ks_func_toFragments_0(fragments, mode, this);
					fragments.code(") : ");
				}
				__ks_Array.__ks_func_last_0.call(this._callees).toFragments(fragments, mode, this);
			}
		}
		__ks_func_toCallFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toCallFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toCallFragments_rt) {
				return super.__ks_func_toCallFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			let fragments = "";
			if(this._object !== null) {
				fragments = KSHelper.concatString(fragments, this._object.toQuote());
			}
			else if(KSHelper.valueOf(this._data.callee.kind) === NodeKind.Identifier.value) {
				fragments = KSHelper.concatString(fragments, this._data.callee.name);
			}
			else {
				NotImplementedException.__ks_sttc_throw_0([this]);
			}
			fragments += "()";
			return fragments;
		}
		__ks_func_toNullableFragments_0(fragments) {
			if(!this._tested) {
				this._tested = true;
				if(this._callees.length === 1) {
					this._callees[0].toNullableFragments(fragments, this);
				}
				else {
					throw new NotImplementedException(this);
				}
			}
		}
		__ks_func_toReusableFragments_0(fragments) {
			fragments.code(this._reuseName, $equals).compile(this);
			this._reusable = true;
		}
		__ks_func_type_22() {
			return this._type;
		}
		addCallee() {
			return this.__ks_func_addCallee_rt.call(null, this, this, arguments);
		}
		__ks_func_addCallee_0(callee) {
			let hash = callee.__ks_func_hashCode_0();
			if(KSType.isValue(hash)) {
				let main = this._calleeByHash[hash];
				if(KSType.isValue(main)) {
					main.__ks_func_mergeWith_0(callee);
				}
				else {
					this._callees.push(callee);
					this._calleeByHash[hash] = callee;
				}
			}
			else {
				this._callees.push(callee);
			}
		}
		__ks_func_addCallee_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Callee);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addCallee_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_addCallee_rt) {
				return super.__ks_func_addCallee_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toFlattenArgumentsFragments_0(fragments, __ks_arguments_1, prefill = null) {
			if((__ks_arguments_1.length === 1) && (prefill === null) && (__ks_arguments_1[0].argument().type().isArray() === true)) {
				__ks_arguments_1[0].argument().toArgumentFragments(fragments);
			}
			else {
				if(prefill === null) {
					fragments.code("[].concat(");
				}
				else {
					fragments.code("[").compile(prefill).code("].concat(");
				}
				let opened = false;
				for(let index = 0, __ks_0 = __ks_arguments_1.length, argument; index < __ks_0; ++index) {
					argument = __ks_arguments_1[index];
					if(KSType.isClassInstance(argument, UnaryOperatorSpread)) {
						if(opened) {
							fragments.code("], ");
							opened = false;
						}
						else if(index !== 0) {
							fragments.code($comma);
						}
						argument.__ks_func_argument_0().toArgumentFragments(fragments);
					}
					else {
						if(index !== 0) {
							fragments.code($comma);
						}
						if(!opened) {
							fragments.code("[");
							opened = true;
						}
						argument.toArgumentFragments(fragments);
					}
				}
				if(opened) {
					fragments.code("]");
				}
				fragments.code(")");
			}
		}
		static toFlattenArgumentsFragments() {
			const t0 = KSType.isValue;
			if(arguments.length >= 2 && arguments.length <= 3) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return CallExpression.__ks_sttc_toFlattenArgumentsFragments_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Expression.toFlattenArgumentsFragments) {
				return Expression.toFlattenArgumentsFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class NamedArgument extends Expression {
		static __ks_new_0() {
			const o = Object.create(NamedArgument.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(NamedArgument.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(NamedArgument.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._name = this._data.name.name;
			this._value = $compile.expression(this._data.value, this);
			this._value.__ks_func_analyse_0();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._value.__ks_func_prepare_0();
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._value.__ks_func_translate_0();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isAwait_2() {
			return this._value.__ks_func_isAwait_2();
		}
		__ks_func_isUsingVariable_1(name) {
			return this._value.__ks_func_isUsingVariable_1(name);
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_17() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_17.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._value.__ks_func_type_22();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_30(fragments, mode) {
			this._value.toFragments(fragments, mode);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_30.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class SimplifiedArrowFunctionExpression extends Expression {
		static __ks_new_0(...args) {
			const o = Object.create(SimplifiedArrowFunctionExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(expression, match) {
			if(expression === void 0) {
				expression = null;
			}
			Expression.prototype.__ks_cons_rt.call(null, this, [expression.data(), expression.parent(), expression.scope(), ScopeType.Block]);
			this._expression = expression;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return SimplifiedArrowFunctionExpression.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._expression.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_31(fragments, mode) {
			fragments.code("((");
			const block = Parameter.toFragments(this._expression, fragments, ParameterMode.Default, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(null, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(fragments) {
					return fragments.code(") =>").newBlock();
				};
				return __ks_rt;
			})());
			block.compile(this._expression._block);
			if(!(this._expression._awaiting === true) && !(this._expression._exit === true) && (this._expression._type.isAsync() === true)) {
				block.line("__ks_cb()");
			}
			block.done();
			fragments.code(")");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_31.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class Callee {
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
			this._nullable = false;
			this._nullableProperty = false;
		}
		__ks_cons_0(data) {
			if(data === void 0) {
				data = null;
			}
			this._data = data;
			for(let __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value) {
					this._nullable = true;
				}
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return Callee.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		acquireReusable() {
			return this.__ks_func_acquireReusable_rt.call(null, this, this, arguments);
		}
		__ks_func_acquireReusable_0(acquire) {
		}
		__ks_func_acquireReusable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_acquireReusable_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		isNullable() {
			return this.__ks_func_isNullable_rt.call(null, this, this, arguments);
		}
		__ks_func_isNullable_0() {
			return this._nullable || this._nullableProperty;
		}
		__ks_func_isNullable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNullable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isNullableComputed() {
			return this.__ks_func_isNullableComputed_rt.call(null, this, this, arguments);
		}
		__ks_func_isNullableComputed_0() {
			return this._nullable && this._nullableProperty;
		}
		__ks_func_isNullableComputed_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isNullableComputed_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isSkippable() {
			return this.__ks_func_isSkippable_rt.call(null, this, this, arguments);
		}
		__ks_func_isSkippable_0() {
			return false;
		}
		__ks_func_isSkippable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSkippable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		mergeWith() {
			return this.__ks_func_mergeWith_rt.call(null, this, this, arguments);
		}
		__ks_func_mergeWith_0(that) {
			throw new NotSupportedException();
		}
		__ks_func_mergeWith_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Callee);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_mergeWith_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		releaseReusable() {
			return this.__ks_func_releaseReusable_rt.call(null, this, this, arguments);
		}
		__ks_func_releaseReusable_0() {
		}
		__ks_func_releaseReusable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_releaseReusable_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		validate() {
			return this.__ks_func_validate_rt.call(null, this, this, arguments);
		}
		__ks_func_validate_0(type, node) {
			for(let __ks_0 = 0, __ks_1 = type.__ks_func_listErrors_0(), __ks_2 = __ks_1.length, error; __ks_0 < __ks_2; ++__ks_0) {
				error = __ks_1[__ks_0];
				Exception.validateReportedError(error.discardReference(), node);
			}
		}
		__ks_func_validate_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, FunctionType);
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_validate_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
	}
	class DefaultCallee extends Callee {
		static __ks_new_0(...args) {
			const o = Object.create(DefaultCallee.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(DefaultCallee.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(DefaultCallee.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_0(data, object, type, __ks_arguments_1 = null, node) {
			if(data === void 0) {
				data = null;
			}
			if(object === void 0) {
				object = null;
			}
			if(type === void 0) {
				type = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._object = object;
			this._arguments = __ks_arguments_1;
			this._node = node;
			if(object === null) {
				this._expression = $compile.expression(data.callee, node);
			}
			else {
				this._expression = new MemberExpression(data.callee, node, node.__ks_func_scope_0(), object);
			}
			this._expression.__ks_func_analyse_0();
			this._expression.__ks_func_prepare_0();
			this._flatten = node._flatten;
			this._nullableProperty = this._expression.__ks_func_isNullable_0();
			this._scope = data.scope.kind;
			if(!KSType.isValue(type)) {
				type = this._expression.__ks_func_type_22();
			}
			if(KSType.isArray(type)) {
				const types = [];
				for(let __ks_0 = 0, __ks_1 = type.length, tt; __ks_0 < __ks_1; ++__ks_0) {
					tt = type[__ks_0];
					this.validate(tt, node);
					__ks_Array.__ks_func_pushUniq_0.call(types, [tt.getReturnType()]);
				}
				this._type = Type.union(node.__ks_func_scope_0(), ...types);
			}
			else if(KSType.isClassInstance(type, Type) ? type.__ks_func_isClass_0() : type.isClass() === true) {
				TypeException.throwConstructorWithoutNew(type.name(), node);
			}
			else if(KSType.isClassInstance(type, FunctionType)) {
				this.__ks_func_validate_0(type, node);
				this._type = type.__ks_func_getReturnType_0();
			}
			else if((KSType.isClassInstance(type, Type) ? type.__ks_func_isStruct_0() : type.isStruct() === true) || (KSType.isClassInstance(type, Type) ? type.__ks_func_isTuple_0() : type.isTuple() === true)) {
				this._type = node.__ks_func_scope_0().reference(type);
			}
			else {
				this._type = AnyType.NullableUnexplicit;
			}
		}
		__ks_cons_1(data, object, methods, type, __ks_arguments_1 = null, node) {
			if(data === void 0) {
				data = null;
			}
			if(object === void 0) {
				object = null;
			}
			if(methods === void 0) {
				methods = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._object = object;
			this._methods = methods;
			this._type = type;
			this._arguments = __ks_arguments_1;
			this._node = node;
			this._expression = new MemberExpression(data.callee, node, node.__ks_func_scope_0(), object);
			this._expression.__ks_func_analyse_0();
			this._expression.__ks_func_prepare_0();
			this._flatten = node._flatten;
			this._nullableProperty = this._expression.__ks_func_isNullable_0();
			this._scope = data.scope.kind;
			for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				this.__ks_func_validate_0(method, node);
			}
			if(this._type.__ks_func_isClass_0() === true) {
				TypeException.throwConstructorWithoutNew(this._type.name(), node);
			}
		}
		__ks_cons_2(data, expression, node) {
			if(data === void 0) {
				data = null;
			}
			if(expression === void 0) {
				expression = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._expression = expression;
			this._node = node;
			this._flatten = node._flatten;
			this._nullableProperty = this._expression.__ks_func_isNullable_0();
			this._scope = data.scope.kind;
			const type = this._expression.__ks_func_type_22();
			if(KSType.isArray(type)) {
				const types = [];
				for(let __ks_0 = 0, __ks_1 = type.length, tt; __ks_0 < __ks_1; ++__ks_0) {
					tt = type[__ks_0];
					this.validate(tt, node);
					__ks_Array.__ks_func_pushUniq_0.call(types, [tt.getReturnType()]);
				}
				this._type = Type.union(node.__ks_func_scope_0(), ...types);
			}
			else if(type.isClass() === true) {
				TypeException.throwConstructorWithoutNew(type.name(), node);
			}
			else if(KSType.isClassInstance(type, FunctionType)) {
				this.__ks_func_validate_0(type, node);
				this._type = type.__ks_func_getReturnType_0();
			}
			else if((type.isStruct() === true) || (type.isTuple() === true)) {
				this._type = node.__ks_func_scope_0().reference(type);
			}
			else {
				this._type = AnyType.NullableUnexplicit;
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, Expression) || KSType.isNull(value);
			const t2 = value => KSType.isClassInstance(value, CallExpression);
			const t3 = value => KSType.isClassInstance(value, Type) || KSType.isArray(value, value => KSType.isClassInstance(value, Type)) || KSType.isNull(value);
			const t4 = value => KSType.isArray(value, value => KSType.isClassInstance(value, FunctionType)) || KSType.isNull(value);
			const t5 = value => KSType.isClassInstance(value, Type);
			const t6 = value => KSType.isArray(value, KSType.isNumber) || KSType.isNull(value);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return DefaultCallee.prototype.__ks_cons_2.call(that, args[0], args[1], args[2]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t3(args[2]) && t2(args[3])) {
					return DefaultCallee.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], void 0, args[3]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1])) {
					if(t4(args[2])) {
						if(t5(args[3]) && t2(args[4])) {
							return DefaultCallee.prototype.__ks_cons_1.call(that, args[0], args[1], args[2], args[3], void 0, args[4]);
						}
					}
					if(t3(args[2]) && t6(args[3]) && t2(args[4])) {
						return DefaultCallee.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
					throw KSHelper.badArgs();
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 6) {
				if(t0(args[0]) && t1(args[1]) && t4(args[2]) && t5(args[3]) && t6(args[4]) && t2(args[5])) {
					return DefaultCallee.prototype.__ks_cons_1.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_acquireReusable_0(acquire) {
			this._expression.__ks_func_acquireReusable_1(this._nullable || (this._flatten && (this._scope === ScopeKind.This)));
		}
		hashCode() {
			return this.__ks_func_hashCode_rt.call(null, this, this, arguments);
		}
		__ks_func_hashCode_0() {
			return "default";
		}
		__ks_func_hashCode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hashCode_0.call(that);
			}
			if(super.__ks_func_hashCode_rt) {
				return super.__ks_func_hashCode_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_0(name) {
			if(KSType.isValue(this._methods)) {
				for(let __ks_0 = 0, __ks_1 = this._methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._methods[__ks_0];
					if(!(method.isInitializingInstanceVariable(name) === true)) {
						return false;
					}
				}
				return true;
			}
			else {
				return false;
			}
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_mergeWith_0(that) {
			this._type = Type.union(this._node.__ks_func_scope_0(), this._type, that.__ks_func_type_0());
		}
		__ks_func_releaseReusable_0() {
			this._expression.__ks_func_releaseReusable_1();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode, node) {
			const __ks_arguments_1 = this.__ks_func_prepareArguments_0(node);
			if(this._flatten) {
				if(this._scope === ScopeKind.Argument) {
					fragments.compileReusable(this._expression).code(".apply(").compile(node._callScope, mode);
				}
				else if((this._scope === ScopeKind.Null) || !KSType.isClassInstance(this._expression, MemberExpression)) {
					fragments.compileReusable(this._expression).code(".apply(null");
				}
				else {
					fragments.compileReusable(this._expression).code(".apply(").compile(this._expression.__ks_func_caller_0(), mode);
				}
				CallExpression.toFlattenArgumentsFragments(fragments.code($comma), __ks_arguments_1);
			}
			else {
				let __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					fragments.wrap(this._expression, mode).code(".call(").compile(node._callScope, mode);
					for(let __ks_1 = 0, __ks_2 = __ks_arguments_1.length, argument; __ks_1 < __ks_2; ++__ks_1) {
						argument = __ks_arguments_1[__ks_1];
						fragments.code($comma);
						DefaultCallee.__ks_sttc_toArgumentFragments_0(argument, fragments, mode);
					}
				}
				else if(__ks_0 === ScopeKind.Null) {
					fragments.wrap(this._expression, mode).code(".call(null");
					for(let __ks_1 = 0, __ks_2 = __ks_arguments_1.length, argument; __ks_1 < __ks_2; ++__ks_1) {
						argument = __ks_arguments_1[__ks_1];
						fragments.code($comma);
						DefaultCallee.__ks_sttc_toArgumentFragments_0(argument, fragments, mode);
					}
				}
				else if(__ks_0 === ScopeKind.This) {
					fragments.wrap(this._expression, mode).code("(");
					for(let index = 0, __ks_1 = __ks_arguments_1.length, argument; index < __ks_1; ++index) {
						argument = __ks_arguments_1[index];
						if(index !== 0) {
							fragments.code($comma);
						}
						DefaultCallee.__ks_sttc_toArgumentFragments_0(argument, fragments, mode);
					}
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toCurryFragments() {
			return this.__ks_func_toCurryFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toCurryFragments_0(fragments, mode, node) {
			node.module().flag("Helper");
			const __ks_arguments_1 = this.__ks_func_prepareArguments_0(node);
			if(this._flatten) {
				let __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					fragments.code($runtime.helper.__ks_0(node), ".vcurry(").compile(this._expression).code($comma).compile(node._callScope);
				}
				else if(__ks_0 === ScopeKind.Null) {
					fragments.code($runtime.helper.__ks_0(node), ".vcurry(").compile(this._expression).code(", null");
				}
				else if(__ks_0 === ScopeKind.This) {
					fragments.code($runtime.helper.__ks_0(node), ".vcurry(").compile(this._expression).code($comma).compile(this._expression.caller());
				}
				for(let __ks_0 = 0, __ks_1 = __ks_arguments_1.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = __ks_arguments_1[__ks_0];
					fragments.code($comma);
					DefaultCallee.__ks_sttc_toArgumentFragments_0(argument, fragments, mode);
				}
			}
			else {
				let __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					fragments.code($runtime.helper.__ks_0(node), ".vcurry(").compile(this._expression).code($comma).compile(node._callScope);
				}
				else if(__ks_0 === ScopeKind.Null) {
					fragments.code($runtime.helper.__ks_0(node), ".vcurry(").compile(this._expression).code(", null");
				}
				else if(__ks_0 === ScopeKind.This) {
					fragments.code($runtime.helper.__ks_0(node), ".vcurry(").compile(this._expression).code(", ").compile(this._expression.caller());
				}
				for(let __ks_0 = 0, __ks_1 = __ks_arguments_1.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = __ks_arguments_1[__ks_0];
					fragments.code($comma);
					DefaultCallee.__ks_sttc_toArgumentFragments_0(argument, fragments, mode);
				}
			}
		}
		__ks_func_toCurryFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toCurryFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toCurryFragments_rt) {
				return super.__ks_func_toCurryFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toNullableFragments() {
			return this.__ks_func_toNullableFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toNullableFragments_0(fragments, node) {
			if(this._nullable) {
				if(this._expression.__ks_func_isNullable_0() === true) {
					fragments.compileNullable(this._expression).code(" && ");
				}
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isFunction(")).compileReusable(this._expression).code(")");
			}
			else if(this._expression.__ks_func_isNullable_0() === true) {
				fragments.compileNullable(this._expression);
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isValue(")).compileReusable(this._expression).code(")");
			}
		}
		__ks_func_toNullableFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toNullableFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toNullableFragments_rt) {
				return super.__ks_func_toNullableFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node) {
			fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isValue(")).compileReusable(this._object).code(")");
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._expression.__ks_func_translate_0();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_1(type) {
			this._type = type;
			return this;
		}
		__ks_func_type_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_type_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepareArguments() {
			return this.__ks_func_prepareArguments_rt.call(null, this, this, arguments);
		}
		__ks_func_prepareArguments_0(node) {
			if(KSType.isValue(this._arguments)) {
				return KSHelper.mapArray(this._arguments, function(index) {
					return node._arguments[index];
				});
			}
			else {
				return node._arguments;
			}
		}
		__ks_func_prepareArguments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_prepareArguments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_prepareArguments_rt) {
				return super.__ks_func_prepareArguments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toArgumentFragments_0(argument, fragments, mode) {
			if(argument === void 0) {
				argument = null;
			}
			if(KSType.isValue(argument)) {
				argument.toArgumentFragments(fragments, mode);
			}
			else {
				fragments.code("void 0");
			}
		}
		static toArgumentFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[1]) && t0(arguments[2])) {
					return DefaultCallee.__ks_sttc_toArgumentFragments_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(Callee.toArgumentFragments) {
				return Callee.toArgumentFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class EnumCallee extends Callee {
		static __ks_new_0(...args) {
			const o = Object.create(EnumCallee.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, match, node) {
			if(data === void 0) {
				data = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._node = node;
			this._expression = $compile.expression(data.callee, node);
			this._expression.analyse();
			this._expression.prepare();
			this._flatten = node._flatten;
			this._nullableProperty = this._expression.isNullable();
			this._scope = data.scope.kind;
			this._function = match.function;
			this._arguments = match.arguments;
			this.__ks_func_validate_0(this._function, node);
			this._type = this._function.__ks_func_getReturnType_0();
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isStructInstance(value, CallMatch);
			const t2 = value => KSType.isClassInstance(value, CallExpression);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return EnumCallee.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		hashCode() {
			return this.__ks_func_hashCode_rt.call(null, this, this, arguments);
		}
		__ks_func_hashCode_0() {
			return KSHelper.concatString("enum:", this._arguments);
		}
		__ks_func_hashCode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hashCode_0.call(that);
			}
			if(super.__ks_func_hashCode_rt) {
				return super.__ks_func_hashCode_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_mergeWith_0(that) {
			this._type = Type.union(this._node.__ks_func_scope_0(), this._type, that.__ks_func_type_0());
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode, node) {
			fragments.wrap(this._expression, mode).code(".__ks_from").code("(");
			Router.toArgumentsFragments(this._arguments, node._arguments, this._function, false, fragments, mode);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._expression.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class EnumMethodCallee extends Callee {
		static __ks_new_0(...args) {
			const o = Object.create(EnumMethodCallee.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, __ks_enum_1, methodName, methods, node) {
			if(data === void 0) {
				data = null;
			}
			if(methods === void 0) {
				methods = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._enum = __ks_enum_1;
			this._methodName = methodName;
			this._methods = methods;
			this._expression = new MemberExpression(data.callee, node, node.scope(), node._object);
			this._expression.__ks_func_analyse_0();
			this._expression.__ks_func_prepare_0();
			this._flatten = node._flatten;
			this._nullableProperty = this._expression.__ks_func_isNullable_0();
			this._scope = data.scope.kind;
			if(KSType.isValue(this._methods)) {
				const union = new UnionType(node.scope());
				for(let __ks_0 = 0, __ks_1 = this._methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._methods[__ks_0];
					union.__ks_func_addType_1(method.__ks_func_getReturnType_0());
				}
				this._type = union.__ks_func_type_0();
			}
			else {
				this._type = this._expression.__ks_func_type_22();
			}
			for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				this.__ks_func_validate_0(method, node);
			}
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, EnumType));
			const t2 = KSType.isString;
			const t3 = value => KSType.isArray(value, value => KSType.isClassInstance(value, FunctionType)) || KSType.isNull(value);
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t0(args[4])) {
					return EnumMethodCallee.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_acquireReusable_0(acquire) {
			this._expression.acquireReusable(this._nullable || (this._flatten && (this._scope === ScopeKind.This)));
		}
		hashCode() {
			return this.__ks_func_hashCode_rt.call(null, this, this, arguments);
		}
		__ks_func_hashCode_0() {
			return null;
		}
		__ks_func_hashCode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hashCode_0.call(that);
			}
			if(super.__ks_func_hashCode_rt) {
				return super.__ks_func_hashCode_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_1(name) {
			if(KSType.isValue(this._methods)) {
				for(let __ks_0 = 0, __ks_1 = this._methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._methods[__ks_0];
					if(!(method.isInitializingInstanceVariable(name) === true)) {
						return false;
					}
				}
				return true;
			}
			else {
				return false;
			}
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_releaseReusable_0() {
			this._expression.releaseReusable();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode, node) {
			if(this._flatten) {
				NotImplementedException.__ks_sttc_throw_0([node]);
			}
			else {
				let __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					NotImplementedException.__ks_sttc_throw_0([node]);
				}
				else if(__ks_0 === ScopeKind.Null) {
					NotImplementedException.__ks_sttc_throw_0([node]);
				}
				else if(__ks_0 === ScopeKind.This) {
					fragments.code(KSHelper.concatString(this._enum.__ks_func_name_0(), ".", this._methodName, "("));
					fragments.wrap(this._expression._object, mode);
					for(let index = 0, __ks_1 = node._arguments.length, argument; index < __ks_1; ++index) {
						argument = node._arguments[index];
						fragments.code($comma);
						argument.toArgumentFragments(fragments, mode);
					}
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toNullableFragments() {
			return this.__ks_func_toNullableFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toNullableFragments_1(fragments, node) {
			NotImplementedException.__ks_sttc_throw_0([node]);
		}
		__ks_func_toNullableFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toNullableFragments_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toNullableFragments_rt) {
				return super.__ks_func_toNullableFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._expression.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class FunctionCallee extends Callee {
		static __ks_new_0(...args) {
			const o = Object.create(FunctionCallee.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, match, node) {
			if(data === void 0) {
				data = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._node = node;
			this._expression = $compile.expression(data.callee, node);
			this._expression.analyse();
			this._expression.prepare();
			this._flatten = node._flatten;
			this._nullableProperty = this._expression.isNullable();
			this._scope = data.scope.kind;
			this.__ks_func_validate_0(match.function, node);
			this._functions = [match.function];
			this._index = match.function.__ks_func_getCallIndex_0();
			this._arguments = match.arguments;
			this._type = match.function.__ks_func_getReturnType_0();
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isStructInstance(value, CallMatch);
			const t2 = value => KSType.isClassInstance(value, CallExpression);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return FunctionCallee.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_acquireReusable_0(acquire) {
			this._expression.acquireReusable(this._flatten);
		}
		hashCode() {
			return this.__ks_func_hashCode_rt.call(null, this, this, arguments);
		}
		__ks_func_hashCode_0() {
			return KSHelper.concatString("function:", this._index, ":", this._arguments);
		}
		__ks_func_hashCode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hashCode_0.call(that);
			}
			if(super.__ks_func_hashCode_rt) {
				return super.__ks_func_hashCode_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_2(name) {
			return false;
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_mergeWith_0(that) {
			this._type = Type.union(this._node.__ks_func_scope_0(), this._type, that.__ks_func_type_0());
			this._functions.push.apply(this._functions, [].concat(that.functions()));
		}
		__ks_func_releaseReusable_0() {
			this._expression.releaseReusable();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode, node) {
			if(this._flatten) {
				if(this._scope === ScopeKind.Argument) {
					fragments.compileReusable(this._expression).code(".apply(").compile(node._callScope, mode);
				}
				else if((this._scope === ScopeKind.Null) || !KSType.isClassInstance(this._expression, MemberExpression)) {
					fragments.compileReusable(this._expression).code(".apply(null");
				}
				else {
					fragments.compileReusable(this._expression).code(".apply(").compile(this._expression.__ks_func_caller_0(), mode);
				}
				CallExpression.toFlattenArgumentsFragments(fragments.code($comma), node._arguments);
			}
			else {
				let __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					fragments.wrap(this._expression, mode).code(KSHelper.concatString(".__ks_", this._index)).code(".call(").compile(node._callScope, mode);
					Router.toArgumentsFragments(this._arguments, node._arguments, this._functions[0], true, fragments, mode);
				}
				else if(__ks_0 === ScopeKind.Null) {
					fragments.wrap(this._expression, mode).code(KSHelper.concatString(".__ks_", this._index)).code(".call(null");
					Router.toArgumentsFragments(this._arguments, node._arguments, this._functions[0], true, fragments, mode);
				}
				else if(__ks_0 === ScopeKind.This) {
					fragments.wrap(this._expression, mode).code(KSHelper.concatString(".__ks_", this._index)).code("(");
					Router.toArgumentsFragments(this._arguments, node._arguments, this._functions[0], false, fragments, mode);
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toCurryFragments() {
			return this.__ks_func_toCurryFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toCurryFragments_1(fragments, mode, node) {
			node.module().flag("Helper");
			if(this._flatten) {
				let __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					fragments.code($runtime.helper.__ks_0(node), ".curry(").compile(this._expression).code(KSHelper.concatString(".__ks_", this._index)).code($comma).compile(node._callScope);
				}
				else if(__ks_0 === ScopeKind.Null) {
					fragments.code($runtime.helper.__ks_0(node), ".curry(").compile(this._expression).code(KSHelper.concatString(".__ks_", this._index)).code(", null");
				}
				else if(__ks_0 === ScopeKind.This) {
					fragments.code($runtime.helper.__ks_0(node), ".curry(").compile(this._expression).code(KSHelper.concatString(".__ks_", this._index)).code(", ").compile(this._expression.caller());
				}
				CallExpression.toFlattenArgumentsFragments(fragments.code($comma), node._arguments);
			}
			else {
				let __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					fragments.code($runtime.helper.__ks_0(node), ".vcurry(").compile(this._expression).code(KSHelper.concatString(".__ks_", this._index)).code($comma).compile(node._callScope);
				}
				else if(__ks_0 === ScopeKind.Null) {
					fragments.code($runtime.helper.__ks_0(node), ".vcurry(").compile(this._expression).code(KSHelper.concatString(".__ks_", this._index)).code(", null");
				}
				else if(__ks_0 === ScopeKind.This) {
					fragments.code($runtime.helper.__ks_0(node), ".vcurry(").compile(this._expression).code(KSHelper.concatString(".__ks_", this._index)).code(", ").compile(this._expression.caller());
				}
				Router.toArgumentsFragments(this._arguments, node._arguments, this._functions[0], true, fragments, mode);
			}
		}
		__ks_func_toCurryFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toCurryFragments_1.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toCurryFragments_rt) {
				return super.__ks_func_toCurryFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._expression.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class InvertedPreciseMethodCallee extends Callee {
		static __ks_new_0(...args) {
			const o = Object.create(InvertedPreciseMethodCallee.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, name, property, match, node) {
			if(data === void 0) {
				data = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._name = name;
			this._property = property;
			this._expression = new MemberExpression(data.callee, node, node.scope(), node._object);
			this._expression.__ks_func_analyse_0();
			this._expression.__ks_func_prepare_0();
			this._nullableProperty = this._expression.__ks_func_isNullable_0();
			this._scope = data.scope.kind;
			this._function = match.function;
			this._arguments = match.arguments;
			this.__ks_func_validate_0(this._function, node);
			this._type = this._function.__ks_func_getReturnType_0();
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType);
			const t2 = KSType.isString;
			const t3 = value => KSType.isStructInstance(value, CallMatch);
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t0(args[4])) {
					return InvertedPreciseMethodCallee.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		}
		hashCode() {
			return this.__ks_func_hashCode_rt.call(null, this, this, arguments);
		}
		__ks_func_hashCode_0() {
			return null;
		}
		__ks_func_hashCode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hashCode_0.call(that);
			}
			if(super.__ks_func_hashCode_rt) {
				return super.__ks_func_hashCode_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_3(name) {
			return this._function.isInitializingInstanceVariable(name);
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode, node) {
			let __ks_0 = this._scope;
			if(__ks_0 === ScopeKind.Argument) {
				throw new NotImplementedException(node);
			}
			else if(__ks_0 === ScopeKind.Null) {
				throw new NotImplementedException(node);
			}
			else if(__ks_0 === ScopeKind.This) {
				fragments.code(KSHelper.toString(this._name.__ks_func_name_0()));
				if(this._function.__ks_func_isInstance_0() === true) {
					fragments.code(KSHelper.concatString(".__ks_func_", this._property, "_", this._function.__ks_func_index_0(), "("));
				}
				else {
					fragments.code(KSHelper.concatString(".__ks_sttc_", this._property, "_", this._function.__ks_func_index_0(), "("));
				}
				fragments.wrap(this._expression._object, mode);
				Router.toArgumentsFragments(this._arguments, node._arguments, this._function, true, fragments, mode);
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._expression.__ks_func_translate_0();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class PreciseMethodCallee extends Callee {
		static __ks_new_0(...args) {
			const o = Object.create(PreciseMethodCallee.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, object, property, match, reference, node) {
			if(data === void 0) {
				data = null;
			}
			if(object === void 0) {
				object = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._object = object;
			this._property = property;
			this._reference = reference;
			this._node = node;
			this._expression = new MemberExpression(data.callee, node, node.__ks_func_scope_0(), object);
			this._expression.__ks_func_analyse_0();
			this._expression.__ks_func_prepare_0();
			this._flatten = node._flatten;
			this._nullableProperty = this._expression.__ks_func_isNullable_0();
			this._scope = data.scope.kind;
			this.__ks_func_validate_0(match.function, node);
			this._functions = [match.function];
			this._index = match.function.__ks_func_index_0();
			this._alien = match.function.__ks_func_isAlien_0();
			this._instance = match.function.__ks_func_isInstance_0();
			this._arguments = match.arguments;
			this._type = match.function.__ks_func_getReturnType_0();
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isString;
			const t2 = value => KSType.isStructInstance(value, CallMatch);
			const t3 = value => KSType.isClassInstance(value, ReferenceType);
			const t4 = value => KSType.isClassInstance(value, CallExpression);
			if(args.length === 6) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3]) && t3(args[4]) && t4(args[5])) {
					return PreciseMethodCallee.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_acquireReusable_0(acquire) {
			this._expression.acquireReusable(this._flatten && (this._scope === ScopeKind.This));
		}
		functions() {
			return this.__ks_func_functions_rt.call(null, this, this, arguments);
		}
		__ks_func_functions_0() {
			return this._functions;
		}
		__ks_func_functions_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_functions_0.call(that);
			}
			if(super.__ks_func_functions_rt) {
				return super.__ks_func_functions_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hashCode() {
			return this.__ks_func_hashCode_rt.call(null, this, this, arguments);
		}
		__ks_func_hashCode_0() {
			return KSHelper.concatString("method:", this._property, ":", this._index, ":", this._alien, ":", this._instance, ":", this._arguments);
		}
		__ks_func_hashCode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hashCode_0.call(that);
			}
			if(super.__ks_func_hashCode_rt) {
				return super.__ks_func_hashCode_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_4(name) {
			for(let __ks_0 = 0, __ks_1 = this._functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_function_1 = this._functions[__ks_0];
				if(__ks_function_1.isInitializingInstanceVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_4.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_mergeWith_0(that) {
			this._type = Type.union(this._node.__ks_func_scope_0(), this._type, that.__ks_func_type_0());
			this._functions.push.apply(this._functions, [].concat(that.functions()));
		}
		__ks_func_releaseReusable_0() {
			this._expression.releaseReusable();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode, node) {
			if(this._flatten) {
				let __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This) {
					fragments.compileReusable(this._object);
					if(this._alien) {
						fragments.code("." + this._property + ".call(");
					}
					else if(this._instance) {
						fragments.code(KSHelper.concatString(".__ks_func_", this._property, "_", this._index, ".call("));
					}
					else {
						fragments.code(KSHelper.concatString(".__ks_sttc_", this._property, "_", this._index, ".call("));
					}
					fragments.compile(this._object, mode);
					Router.toArgumentsFragments(this._arguments, node._arguments, this._functions[0], true, fragments, mode);
				}
			}
			else {
				let __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This) {
					if(this._alien) {
						fragments.wrap(this._object).code("." + this._property + "(");
					}
					else if(this._instance) {
						fragments.wrap(this._object).code(KSHelper.concatString(".__ks_func_", this._property, "_", this._index, "("));
					}
					else {
						fragments.wrap(this._object).code(KSHelper.concatString(".__ks_sttc_", this._property, "_", this._index, "("));
					}
					Router.toArgumentsFragments(this._arguments, node._arguments, this._functions[0], false, fragments, mode);
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toCurryFragments() {
			return this.__ks_func_toCurryFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toCurryFragments_2(fragments, mode, node) {
			node.module().flag("Helper");
			if(this._flatten) {
				throw new NotImplementedException(this);
			}
			else {
				fragments.code($runtime.helper.__ks_0(node), ".vcurry(");
				if(this._alien) {
					fragments.compile(this._object).code("." + this._property).code($comma);
				}
				else if(this._instance) {
					fragments.compile(this._object).code(KSHelper.concatString(".__ks_func_", this._property, "_", this._index)).code($comma);
				}
				else {
					fragments.compile(this._object).code(KSHelper.concatString(".__ks_sttc_", this._property, "_", this._index)).code($comma);
				}
				let __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					fragments.compile(node._callScope);
				}
				else if(__ks_0 === ScopeKind.Null) {
					fragments.code("null");
				}
				else if(__ks_0 === ScopeKind.This) {
					fragments.compile(this._object.caller());
				}
				Router.toArgumentsFragments(this._arguments, node._arguments, this._functions[0], true, fragments, mode);
			}
		}
		__ks_func_toCurryFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toCurryFragments_2.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toCurryFragments_rt) {
				return super.__ks_func_toCurryFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toNullableFragments() {
			return this.__ks_func_toNullableFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toNullableFragments_2(fragments, node) {
			if(this._nullable) {
				if(this._expression.isNullable() === true) {
					fragments.compileNullable(this._expression).code(" && ");
				}
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isFunction(")).compileReusable(this._expression).code(")");
			}
			else if(this._expression.isNullable() === true) {
				fragments.compileNullable(this._expression);
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isValue(")).compileReusable(this._expression).code(")");
			}
		}
		__ks_func_toNullableFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toNullableFragments_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toNullableFragments_rt) {
				return super.__ks_func_toNullableFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_1(fragments, node) {
			this._reference.toPositiveTestFragments(fragments, this._object);
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toPositiveTestFragments_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._object.translate();
			this._expression.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class PreciseThisCallee extends Callee {
		static __ks_new_0(...args) {
			const o = Object.create(PreciseThisCallee.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, expression, property, match, node) {
			if(data === void 0) {
				data = null;
			}
			if(expression === void 0) {
				expression = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._expression = expression;
			this._property = property;
			this._node = node;
			this._flatten = node._flatten;
			this._nullableProperty = this._expression.isNullable();
			this._scope = data.scope.kind;
			this.__ks_func_validate_0(match.function, node);
			this._functions = [match.function];
			this._index = match.function.__ks_func_index_0();
			this._alien = match.function.__ks_func_isAlien_0();
			this._instance = match.function.__ks_func_isInstance_0();
			this._arguments = match.arguments;
			this._type = match.function.__ks_func_getReturnType_0();
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isString;
			const t2 = value => KSType.isStructInstance(value, CallMatch);
			const t3 = value => KSType.isClassInstance(value, CallExpression);
			if(args.length === 5) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3]) && t3(args[4])) {
					return PreciseThisCallee.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		}
		functions() {
			return this.__ks_func_functions_rt.call(null, this, this, arguments);
		}
		__ks_func_functions_1() {
			return this._functions;
		}
		__ks_func_functions_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_functions_1.call(that);
			}
			if(super.__ks_func_functions_rt) {
				return super.__ks_func_functions_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hashCode() {
			return this.__ks_func_hashCode_rt.call(null, this, this, arguments);
		}
		__ks_func_hashCode_0() {
			return KSHelper.concatString("this:", this._property, ":", this._index, ":", this._alien, ":", this._instance, ":", this._arguments);
		}
		__ks_func_hashCode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hashCode_0.call(that);
			}
			if(super.__ks_func_hashCode_rt) {
				return super.__ks_func_hashCode_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_5(name) {
			for(let __ks_0 = 0, __ks_1 = this._functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_function_1 = this._functions[__ks_0];
				if(__ks_function_1.isInitializingInstanceVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_5.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_mergeWith_0(that) {
			this._type = Type.union(this._node.__ks_func_scope_0(), this._type, that.__ks_func_type_0());
			this._functions.push.apply(this._functions, [].concat(that.functions()));
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode, node) {
			const name = this._node.__ks_func_scope_0().getVariable("this").getSecureName();
			if(this._flatten) {
				let __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This) {
					throw new NotImplementedException(node);
				}
			}
			else {
				let __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This) {
					if(this._alien) {
						fragments.code(KSHelper.concatString(name, ".", this._property, "("));
					}
					else if(this._instance) {
						fragments.code(KSHelper.concatString(name, ".__ks_func_", this._property, "_", this._index, "("));
					}
					else {
						fragments.code(KSHelper.concatString(name, ".__ks_sttc_", this._property, "_", this._index, "("));
					}
					Router.toArgumentsFragments(this._arguments, node._arguments, this._functions[0], false, fragments, mode);
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._expression.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class SealedCallee extends Callee {
		static __ks_new_0(...args) {
			const o = Object.create(SealedCallee.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, variable, instance, methods, node) {
			if(data === void 0) {
				data = null;
			}
			if(methods === void 0) {
				methods = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._variable = variable;
			this._instance = instance;
			this._methods = methods;
			this._node = node;
			this._object = node._object;
			this._property = node._property;
			this._flatten = node._flatten;
			this._nullableProperty = data.callee.modifiers.some((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 3) {
						if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (modifier, __ks_0, __ks_1) => {
					return KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value;
				};
				return __ks_rt;
			})());
			this._scope = data.scope.kind;
			const types = [];
			for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				this.__ks_func_validate_0(method, node);
				types.push(method.__ks_func_getReturnType_0());
			}
			this._type = Type.union(node.__ks_func_scope_0(), ...types);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, ClassType));
			const t2 = KSType.isBoolean;
			const t3 = value => KSType.isArray(value, value => KSType.isClassInstance(value, FunctionType)) || KSType.isNull(value);
			const t4 = value => KSType.isClassInstance(value, CallExpression);
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
					return SealedCallee.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		}
		hashCode() {
			return this.__ks_func_hashCode_rt.call(null, this, this, arguments);
		}
		__ks_func_hashCode_0() {
			return "sealed";
		}
		__ks_func_hashCode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hashCode_0.call(that);
			}
			if(super.__ks_func_hashCode_rt) {
				return super.__ks_func_hashCode_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_6(name) {
			for(let __ks_0 = 0, __ks_1 = this._methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._methods[__ks_0];
				if(!(method.isInitializingInstanceVariable(name) === true)) {
					return false;
				}
			}
			return true;
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_6.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_mergeWith_0(that) {
			this._type = Type.union(this._node.__ks_func_scope_0(), this._type, that.__ks_func_type_0());
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode, node) {
			if(this._flatten) {
				let __ks_0 = node._data.scope.kind.valueOf();
				if(__ks_0 === ScopeKind.Argument.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This.value) {
					if(this._instance) {
						fragments.code(KSHelper.concatString(this._variable.__ks_func_getSealedPath_0(), "._im_", this._property, ".apply(null, "));
						CallExpression.toFlattenArgumentsFragments(fragments, node._arguments, this._object);
					}
					else {
						fragments.code(KSHelper.concatString(this._variable.__ks_func_getSealedPath_0(), "._sm_", this._property, ".apply(null, "));
						CallExpression.toFlattenArgumentsFragments(fragments, node._arguments);
					}
				}
			}
			else {
				let __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This) {
					if(this._instance) {
						fragments.code(KSHelper.concatString(this._variable.__ks_func_getSealedPath_0(), "._im_", this._property, "(")).compile(this._object);
						for(let __ks_1 = 0, __ks_2 = node._arguments.length, argument; __ks_1 < __ks_2; ++__ks_1) {
							argument = node._arguments[__ks_1];
							fragments.code($comma);
							argument.toArgumentFragments(fragments, mode);
						}
					}
					else {
						fragments.code(KSHelper.concatString(this._variable.__ks_func_getSealedPath_0(), "._sm_", this._property, "("));
						for(let index = 0, __ks_1 = node._arguments.length, argument; index < __ks_1; ++index) {
							argument = node._arguments[index];
							if(index !== 0) {
								fragments.code($comma);
							}
							argument.toArgumentFragments(fragments, mode);
						}
					}
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toNullableFragments() {
			return this.__ks_func_toNullableFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toNullableFragments_3(fragments, node) {
			fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isValue(")).compile(this._object).code(")");
		}
		__ks_func_toNullableFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toNullableFragments_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toNullableFragments_rt) {
				return super.__ks_func_toNullableFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_2(fragments, node) {
			this._node.__ks_func_scope_0().reference(this._variable).toPositiveTestFragments(fragments, this._object);
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toPositiveTestFragments_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_2(type) {
			this._type = type;
			return this;
		}
		__ks_func_type_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_type_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class SealedFunctionCallee extends Callee {
		static __ks_new_0(...args) {
			const o = Object.create(SealedFunctionCallee.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, variable, __ks_function_1, type, node) {
			if(data === void 0) {
				data = null;
			}
			if(__ks_function_1 === void 0) {
				__ks_function_1 = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._variable = variable;
			this._function = __ks_function_1;
			this._type = type;
			this._object = node._object;
			this._property = node._property;
			this._nullableProperty = node._object.isNullable();
			this.validate(__ks_function_1, node);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, NamespaceType));
			const t2 = value => KSType.isClassInstance(value, Type);
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t0(args[2]) && t2(args[3]) && t0(args[4])) {
					return SealedFunctionCallee.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		}
		hashCode() {
			return this.__ks_func_hashCode_rt.call(null, this, this, arguments);
		}
		__ks_func_hashCode_0() {
			return null;
		}
		__ks_func_hashCode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hashCode_0.call(that);
			}
			if(super.__ks_func_hashCode_rt) {
				return super.__ks_func_hashCode_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_7(name) {
			return this._function.isInitializingInstanceVariable(name);
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_7.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode, node) {
			if(node._flatten === true) {
				let __ks_0 = node._data.scope.kind.valueOf();
				if(__ks_0 === ScopeKind.Argument.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This.value) {
					throw new NotImplementedException(node);
				}
			}
			else {
				let __ks_0 = node._data.scope.kind.valueOf();
				if(__ks_0 === ScopeKind.Argument.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This.value) {
					fragments.code(KSHelper.concatString(this._variable.__ks_func_getSealedName_0(), ".", this._property, "("));
					for(let index = 0, __ks_1 = node._arguments.length, argument; index < __ks_1; ++index) {
						argument = node._arguments[index];
						if(index !== 0) {
							fragments.code($comma);
						}
						argument.toArgumentFragments(fragments, mode);
					}
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_3(fragments, node) {
			this._type.toPositiveTestFragments(fragments, this._object);
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toPositiveTestFragments_3.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._object.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class SealedMethodCallee extends Callee {
		static __ks_new_0(...args) {
			const o = Object.create(SealedMethodCallee.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, variable, instance, node) {
			if(data === void 0) {
				data = null;
			}
			if(node === void 0) {
				node = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._variable = variable;
			this._instance = instance;
			this._node = node;
			this._object = node._object;
			this._property = node._property;
			this._nullableProperty = data.callee.modifiers.some((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(this, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (modifier) => {
					return KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value;
				};
				return __ks_rt;
			})());
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, ClassType));
			const t2 = KSType.isBoolean;
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t0(args[3])) {
					return SealedMethodCallee.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._object.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hashCode() {
			return this.__ks_func_hashCode_rt.call(null, this, this, arguments);
		}
		__ks_func_hashCode_0() {
			return null;
		}
		__ks_func_hashCode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hashCode_0.call(that);
			}
			if(super.__ks_func_hashCode_rt) {
				return super.__ks_func_hashCode_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_8(name) {
			let __ks_class_1 = this._variable.__ks_func_type_0();
			if(this._instance) {
				while(true) {
					let methods = __ks_class_1.listInstanceMethods(this._property);
					if(KSType.isValue(methods)) {
						for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = methods[__ks_0];
							if(!(method.isInitializingInstanceVariable(name) === true)) {
								return false;
							}
						}
					}
					if(__ks_class_1.isExtending() === true) {
						__ks_class_1 = __ks_class_1.extends().type();
					}
					else {
						break;
					}
				}
			}
			else {
				while(true) {
					let methods = __ks_class_1.listClassMethods(this._property);
					if(KSType.isValue(methods)) {
						for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = methods[__ks_0];
							if(!(method.isInitializingInstanceVariable(name) === true)) {
								return false;
							}
						}
					}
					if(__ks_class_1.isExtending() === true) {
						__ks_class_1 = __ks_class_1.extends().type();
					}
					else {
						break;
					}
				}
			}
			return true;
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_8.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode, node) {
			if(node._flatten === true) {
				let __ks_0 = node._data.scope.kind.valueOf();
				if(__ks_0 === ScopeKind.Argument.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This.value) {
					if(this._instance) {
						fragments.code(KSHelper.concatString(this._variable.__ks_func_getSealedPath_0(), "._im_", this._property, ".apply(null, "));
						CallExpression.toFlattenArgumentsFragments(fragments, node._arguments, this._object);
					}
					else {
						fragments.code(KSHelper.concatString(this._variable.__ks_func_getSealedPath_0(), "._sm_", this._property, ".apply(null, "));
						CallExpression.toFlattenArgumentsFragments(fragments, node._arguments);
					}
				}
			}
			else {
				let __ks_0 = node._data.scope.kind.valueOf();
				if(__ks_0 === ScopeKind.Argument.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This.value) {
					if(this._instance) {
						fragments.code(KSHelper.concatString(this._variable.__ks_func_getSealedPath_0(), "._im_", this._property, "(")).compile(this._object);
						for(let __ks_1 = 0, __ks_2 = node._arguments.length, argument; __ks_1 < __ks_2; ++__ks_1) {
							argument = node._arguments[__ks_1];
							fragments.code($comma);
							argument.toArgumentFragments(fragments, mode);
						}
					}
					else {
						fragments.code(KSHelper.concatString(this._variable.__ks_func_getSealedPath_0(), "._sm_", this._property, "("));
						for(let index = 0, __ks_1 = node._arguments.length, argument; index < __ks_1; ++index) {
							argument = node._arguments[index];
							if(index !== 0) {
								fragments.code($comma);
							}
							argument.toArgumentFragments(fragments, mode);
						}
					}
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toNullableFragments() {
			return this.__ks_func_toNullableFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toNullableFragments_4(fragments, node) {
			fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isValue(")).compile(this._object).code(")");
		}
		__ks_func_toNullableFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toNullableFragments_4.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toNullableFragments_rt) {
				return super.__ks_func_toNullableFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_4(fragments, node) {
			this._node.scope().reference(this._variable).toPositiveTestFragments(fragments, this._object);
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toPositiveTestFragments_4.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return AnyType.NullableUnexplicit;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class SealedPreciseMethodCallee extends Callee {
		static __ks_new_0(...args) {
			const o = Object.create(SealedPreciseMethodCallee.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, object, property, match, variable, node) {
			if(data === void 0) {
				data = null;
			}
			if(object === void 0) {
				object = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._object = object;
			this._property = property;
			this._variable = variable;
			this._node = node;
			this._expression = new MemberExpression(data.callee, node, node.__ks_func_scope_0(), object);
			this._expression.__ks_func_analyse_0();
			this._expression.__ks_func_prepare_0();
			this._flatten = node._flatten;
			this._nullableProperty = this._expression.__ks_func_isNullable_0();
			this._scope = data.scope.kind;
			this._function = match.function;
			this._arguments = match.arguments;
			this.__ks_func_validate_0(this._function, node);
			this._type = this._function.__ks_func_getReturnType_0();
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isString;
			const t2 = value => KSType.isStructInstance(value, CallMatch);
			const t3 = value => KSType.isClassInstance(value, NamedType, value => KSType.isClassInstance(value, ClassType));
			const t4 = value => KSType.isClassInstance(value, CallExpression);
			if(args.length === 6) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3]) && t3(args[4]) && t4(args[5])) {
					return SealedPreciseMethodCallee.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
				}
			}
			throw KSHelper.badArgs();
		}
		getContextSubstitute() {
			return this.__ks_func_getContextSubstitute_rt.call(null, this, this, arguments);
		}
		__ks_func_getContextSubstitute_0(expression) {
			if(KSType.isClassInstance(expression, IdentifierLiteral)) {
				const variable = expression.__ks_func_variable_1();
				let substitute = KSType.isFunction(variable.replaceContext) ? variable.replaceContext() : null;
				if(KSType.isValue(substitute)) {
					return substitute;
				}
			}
			return null;
		}
		__ks_func_getContextSubstitute_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getContextSubstitute_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getContextSubstitute_rt) {
				return super.__ks_func_getContextSubstitute_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hashCode() {
			return this.__ks_func_hashCode_rt.call(null, this, this, arguments);
		}
		__ks_func_hashCode_0() {
			return null;
		}
		__ks_func_hashCode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hashCode_0.call(that);
			}
			if(super.__ks_func_hashCode_rt) {
				return super.__ks_func_hashCode_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_9(name) {
			return this._function.isInitializingInstanceVariable(name);
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_9.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode, node) {
			if(this._flatten) {
				let __ks_0 = node._data.scope.kind.valueOf();
				if(__ks_0 === ScopeKind.Argument.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This.value) {
					if(this._function.__ks_func_isInstance_0() === true) {
						fragments.code(KSHelper.concatString(this._variable.__ks_func_getSealedPath_0(), ".__ks_func_", this._property, "_", this._function.__ks_func_index_0(), ".call("));
						let substitute = this.getContextSubstitute(this._object);
						if(KSType.isValue(substitute)) {
							substitute(fragments);
						}
						else {
							fragments.compile(this._object);
						}
						fragments.code($comma);
						CallExpression.toFlattenArgumentsFragments(fragments, node._arguments);
					}
					else {
						fragments.code(KSHelper.concatString(this._variable.__ks_func_getSealedPath_0(), ".__ks_sttc_", this._property, "_", this._function.__ks_func_index_0(), ".apply(null, "));
						CallExpression.toFlattenArgumentsFragments(fragments, node._arguments);
					}
				}
			}
			else {
				let __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This) {
					if(this._function.__ks_func_isAlien_0() === true) {
						throw new NotImplementedException(node);
					}
					else {
						if(this._function.__ks_func_isInstance_0() === true) {
							fragments.code(KSHelper.concatString(this._variable.__ks_func_getSealedPath_0(), ".__ks_func_", this._property, "_", this._function.__ks_func_index_0(), ".call("));
							let substitute = this.getContextSubstitute(this._object);
							if(KSType.isValue(substitute)) {
								substitute(fragments);
							}
							else {
								fragments.compile(this._object);
							}
							Router.toArgumentsFragments(this._arguments, node._arguments, this._function, true, fragments, mode);
						}
						else {
							fragments.code(KSHelper.concatString(this._variable.__ks_func_getSealedPath_0(), ".__ks_sttc_", this._property, "_", this._function.__ks_func_index_0(), "("));
							Router.toArgumentsFragments(this._arguments, node._arguments, this._function, false, fragments, mode);
						}
					}
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toNullableFragments() {
			return this.__ks_func_toNullableFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toNullableFragments_5(fragments, node) {
			if(this._nullable) {
				if(this._expression.isNullable() === true) {
					fragments.compileNullable(this._expression).code(" && ");
				}
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isFunction(")).compileReusable(this._expression).code(")");
			}
			else if(this._expression.isNullable() === true) {
				fragments.compileNullable(this._expression);
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isValue(")).compileReusable(this._expression).code(")");
			}
		}
		__ks_func_toNullableFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toNullableFragments_5.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toNullableFragments_rt) {
				return super.__ks_func_toNullableFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_5(fragments, node) {
			this._node.__ks_func_scope_0().reference(this._variable).toPositiveTestFragments(fragments, this._object);
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toPositiveTestFragments_5.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._expression.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class StructCallee extends Callee {
		static __ks_new_0(...args) {
			const o = Object.create(StructCallee.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, match, node) {
			if(data === void 0) {
				data = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._node = node;
			this._expression = $compile.expression(data.callee, node);
			this._expression.analyse();
			this._expression.prepare();
			this._flatten = node._flatten;
			this._nullableProperty = this._expression.isNullable();
			this._scope = data.scope.kind;
			this._function = match.function;
			this._arguments = match.arguments;
			this.__ks_func_validate_0(this._function, node);
			this._type = this._function.__ks_func_getReturnType_0();
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isStructInstance(value, CallMatch);
			const t2 = value => KSType.isClassInstance(value, CallExpression);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return StructCallee.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		hashCode() {
			return this.__ks_func_hashCode_rt.call(null, this, this, arguments);
		}
		__ks_func_hashCode_0() {
			return KSHelper.concatString("struct:", this._arguments);
		}
		__ks_func_hashCode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hashCode_0.call(that);
			}
			if(super.__ks_func_hashCode_rt) {
				return super.__ks_func_hashCode_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_mergeWith_0(that) {
			this._type = Type.union(this._node.__ks_func_scope_0(), this._type, that.__ks_func_type_0());
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode, node) {
			fragments.wrap(this._expression, mode).code(".__ks_new").code("(");
			Router.toArgumentsFragments(this._arguments, node._arguments, this._function, false, fragments, mode);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._expression.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class SubstituteCallee extends Callee {
		static __ks_new_0(...args) {
			const o = Object.create(SubstituteCallee.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(SubstituteCallee.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_0(data, substitute, node) {
			if(data === void 0) {
				data = null;
			}
			if(substitute === void 0) {
				substitute = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._substitute = substitute;
			this._nullableProperty = substitute.isNullable();
			this._type = this._substitute.type();
		}
		__ks_cons_1(data, substitute, type, node) {
			if(data === void 0) {
				data = null;
			}
			if(substitute === void 0) {
				substitute = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._substitute = substitute;
			this._type = type;
			this._nullableProperty = substitute.isNullable();
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return SubstituteCallee.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t0(args[3])) {
					return SubstituteCallee.prototype.__ks_cons_1.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_10(name) {
			return this._substitute.isInitializingInstanceVariable(name);
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_10.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isSkippable_0() {
			return this._substitute.isSkippable();
		}
		hashCode() {
			return this.__ks_func_hashCode_rt.call(null, this, this, arguments);
		}
		__ks_func_hashCode_0() {
			return null;
		}
		__ks_func_hashCode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hashCode_0.call(that);
			}
			if(super.__ks_func_hashCode_rt) {
				return super.__ks_func_hashCode_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode, node) {
			this._substitute.toFragments(fragments, mode);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ThisCallee extends Callee {
		static __ks_new_0(...args) {
			const o = Object.create(ThisCallee.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, expression, property, methods, node) {
			if(data === void 0) {
				data = null;
			}
			if(expression === void 0) {
				expression = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._expression = expression;
			this._property = property;
			this._methods = methods;
			this._node = node;
			this._flatten = node._flatten;
			this._nullableProperty = this._expression.isNullable();
			this._scope = data.scope.kind;
			const types = [];
			for(let __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				this.__ks_func_validate_0(method, node);
				types.push(method.__ks_func_getReturnType_0());
			}
			this._type = Type.union(this._node.__ks_func_scope_0(), ...types);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isString;
			const t2 = value => KSType.isArray(value, value => KSType.isClassInstance(value, FunctionType));
			const t3 = value => KSType.isClassInstance(value, CallExpression);
			if(args.length === 5) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3]) && t3(args[4])) {
					return ThisCallee.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		}
		hashCode() {
			return this.__ks_func_hashCode_rt.call(null, this, this, arguments);
		}
		__ks_func_hashCode_0() {
			return "this";
		}
		__ks_func_hashCode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hashCode_0.call(that);
			}
			if(super.__ks_func_hashCode_rt) {
				return super.__ks_func_hashCode_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_11(name) {
			for(let __ks_0 = 0, __ks_1 = this._methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._methods[__ks_0];
				if(method.isInitializingInstanceVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_11.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode, node) {
			const name = this._node.__ks_func_scope_0().getVariable("this").getSecureName();
			if(this._flatten) {
				let __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This) {
					throw new NotImplementedException(node);
				}
			}
			else {
				let __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This) {
					fragments.code(KSHelper.concatString(name, ".", this._property, "("));
					for(let index = 0, __ks_1 = node._arguments.length, argument; index < __ks_1; ++index) {
						argument = node._arguments[index];
						if(index !== 0) {
							fragments.code($comma);
						}
						DefaultCallee.__ks_sttc_toArgumentFragments_0(argument, fragments, mode);
					}
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._expression.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class TupleCallee extends Callee {
		static __ks_new_0(...args) {
			const o = Object.create(TupleCallee.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data, match, node) {
			if(data === void 0) {
				data = null;
			}
			Callee.prototype.__ks_cons_0.call(this, data);
			this._node = node;
			this._expression = $compile.expression(data.callee, node);
			this._expression.analyse();
			this._expression.prepare();
			this._flatten = node._flatten;
			this._nullableProperty = this._expression.isNullable();
			this._scope = data.scope.kind;
			this._function = match.function;
			this._arguments = match.arguments;
			this.__ks_func_validate_0(this._function, node);
			this._type = this._function.__ks_func_getReturnType_0();
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isStructInstance(value, CallMatch);
			const t2 = value => KSType.isClassInstance(value, CallExpression);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return TupleCallee.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		hashCode() {
			return this.__ks_func_hashCode_rt.call(null, this, this, arguments);
		}
		__ks_func_hashCode_0() {
			return KSHelper.concatString("tuple:", this._arguments);
		}
		__ks_func_hashCode_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hashCode_0.call(that);
			}
			if(super.__ks_func_hashCode_rt) {
				return super.__ks_func_hashCode_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_mergeWith_0(that) {
			this._type = Type.union(this._node.__ks_func_scope_0(), this._type, that.__ks_func_type_0());
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, mode, node) {
			fragments.wrap(this._expression, mode).code(".__ks_new").code("(");
			Router.toArgumentsFragments(this._arguments, node._arguments, this._function, false, fragments, mode);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._expression.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_0() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_0.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Callee.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ConditionalExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(ConditionalExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ConditionalExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ConditionalExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._whenTrue = $compile.expression(this._data.whenTrue, this);
			this._whenTrue.analyse();
			this._whenFalse = $compile.expression(this._data.whenFalse, this);
			this._whenFalse.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._condition.prepare();
			{
				let __ks_0 = this._condition.inferTypes(new Dictionary());
				for(const name in __ks_0) {
					const data = __ks_0[name];
					this._scope.updateInferable(name, data, this);
				}
			}
			this._whenTrue.prepare();
			this._whenFalse.prepare();
			const t = this._whenTrue.type();
			const f = this._whenFalse.type();
			if(t.equals(f) === true) {
				this._type = t;
			}
			else if(f.isNull() === true) {
				this._type = t.setNullable(true);
			}
			else if(t.isNull() === true) {
				this._type = f.setNullable(true);
			}
			else {
				this._type = Type.union(this._scope, t, f);
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._condition.translate();
			this._whenTrue.translate();
			this._whenFalse.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isComputed_0() {
			return true;
		}
		__ks_func_isUsingVariable_1(name) {
			return (this._condition.isUsingVariable(name) === true) || (this._whenTrue.isUsingVariable(name) === true) || (this._whenFalse.isUsingVariable(name) === true);
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			this._condition.listNonLocalVariables(scope, variables);
			this._whenTrue.listNonLocalVariables(scope, variables);
			this._whenFalse.listNonLocalVariables(scope, variables);
			return variables;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_32(fragments, mode) {
			fragments.wrapBoolean(this._condition).code(" ? ").compile(this._whenTrue).code(" : ").compile(this._whenFalse);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_32.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class CreateExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(CreateExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(CreateExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(CreateExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._alien = false;
			this._arguments = [];
			this._computed = true;
			this._flatten = false;
			this._hybrid = false;
			this._sealed = false;
			this._type = Type.Any;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._factory = $compile.expression(this._data.class, this);
			this._factory.__ks_func_analyse_0();
			const es5 = this._options.format.spreads === "es5";
			for(let __ks_0 = 0, __ks_1 = this._data.arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._data.arguments[__ks_0];
				this._arguments.push(argument = $compile.expression(argument, this));
				argument.analyse();
				if(es5 && KSType.isClassInstance(argument, UnaryOperatorSpread)) {
					this._flatten = true;
				}
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._factory.__ks_func_prepare_0();
			for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.prepare();
			}
			let type, __ks_0;
			if(KSType.isValue(__ks_0 = this._factory.__ks_func_type_22()) ? (type = __ks_0, false) : true) {
				ReferenceException.__ks_sttc_throwNotDefined_0(this._factory.__ks_func_toQuote_0(), this);
			}
			else if((type.isNamed() === true) && KSType.isClassInstance(type.type(), ClassType)) {
				if(type.type().isAbstract() === true) {
					TypeException.throwCannotBeInstantiated(type.name(), this);
				}
				if(type.type().hasSealedConstructors() === true) {
					this._sealed = true;
				}
				const assessment = type.type().getConstructorAssessment(type.name(), this);
				let result = Router.matchArguments(assessment, this._arguments, this);
				if(KSType.isValue(result)) {
					this._result = result;
				}
				else if(type.type().isExhaustiveConstructor(this) === true) {
					ReferenceException.throwNoMatchingConstructor(type.name(), this._arguments, this);
				}
				this._alien = type.isAlien();
				this._hybrid = type.isHybrid();
				this._type = this._scope.__ks_func_reference_0(type);
			}
			else if(!((type.isAny() === true) || (type.isClass() === true))) {
				TypeException.throwNotClass(type.toQuote(), this);
			}
			if(this._flatten) {
				this._computed = false;
			}
			else if(!KSType.isValue(this._result) || KSType.isStructInstance(this._result, LenientCallMatchResult)) {
				if(this._sealed) {
					this._computed = false;
				}
				else {
					this._computed = true;
				}
			}
			else {
				if(this._hybrid) {
					this._computed = true;
				}
				else if(this._result.matches.length === 0) {
					this._computed = this._alien;
				}
				else if(this._result.matches.length === 1) {
					const {function: __ks_function_1, arguments: __ks_arguments_1} = this._result.matches[0];
					if(this._sealed && !(__ks_function_1.__ks_func_isSealed_0() === true)) {
						this._computed = true;
					}
					else {
						this._computed = false;
					}
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._factory.__ks_func_translate_0();
			for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isComputed_0() {
			return this._computed;
		}
		__ks_func_isUsingVariable_1(name) {
			if(this._factory.__ks_func_isUsingVariable_1(name) === true) {
				return true;
			}
			for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				if(argument.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			this._factory.__ks_func_listNonLocalVariables_1(scope, variables);
			for(let __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.listNonLocalVariables(scope, variables);
			}
			return variables;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_33(fragments, mode) {
			if(this._flatten) {
				if(this._sealed) {
					fragments.code(KSHelper.concatString(this._type.__ks_func_type_0().getSealedName(), ".new.apply(null"));
					CallExpression.toFlattenArgumentsFragments(fragments.code($comma), this._arguments);
					fragments.code(")");
				}
				else {
					this.__ks_func_module_0().flag("Helper");
					fragments.code(KSHelper.concatString($runtime.helper.__ks_0(this), ".create(")).compile(this._factory);
					CallExpression.toFlattenArgumentsFragments(fragments.code($comma), this._arguments);
					fragments.code(")");
				}
			}
			else {
				if(!KSType.isValue(this._result) || KSType.isStructInstance(this._result, LenientCallMatchResult)) {
					if(this._sealed) {
						fragments.code(KSHelper.concatString(this._type.__ks_func_type_0().getSealedName(), ".new("));
					}
					else {
						fragments.code("new ").compile(this._factory).code("(");
					}
					for(let i = 0, __ks_0 = this._arguments.length, argument; i < __ks_0; ++i) {
						argument = this._arguments[i];
						if(i !== 0) {
							fragments.code($comma);
						}
						fragments.compile(argument);
					}
					fragments.code(")");
				}
				else {
					if(this._hybrid) {
						fragments.code("new ").compile(this._factory).code("(");
						for(let i = 0, __ks_0 = this._arguments.length, argument; i < __ks_0; ++i) {
							argument = this._arguments[i];
							if(i !== 0) {
								fragments.code($comma);
							}
							fragments.compile(argument);
						}
						fragments.code(")");
					}
					else if(this._result.matches.length === 0) {
						if(this._alien) {
							fragments.code("new ").compile(this._factory).code("()");
						}
						else {
							fragments.code(KSHelper.concatString(this._type.__ks_func_type_0().path(), ".__ks_new_0")).code("()");
						}
					}
					else if(this._result.matches.length === 1) {
						const {function: __ks_function_1, arguments: __ks_arguments_1} = this._result.matches[0];
						if(this._sealed) {
							if(__ks_function_1.__ks_func_isSealed_0() === true) {
								fragments.code(KSHelper.concatString(this._type.__ks_func_type_0().getSealedName(), ".__ks_new_", __ks_function_1.__ks_func_index_0())).code("(");
							}
							else {
								fragments.code("new ").compile(this._factory).code("(");
							}
						}
						else {
							fragments.code(KSHelper.concatString(this._type.__ks_func_type_0().path(), ".__ks_new_", __ks_function_1.__ks_func_index_0())).code("(");
						}
						Router.toArgumentsFragments.__ks_0(__ks_arguments_1, this._arguments, __ks_function_1, false, fragments, mode);
						fragments.code(")");
					}
					else {
						throw new NotImplementedException();
					}
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_33.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class CurryExpression extends CallExpression {
		static __ks_new_0() {
			const o = Object.create(CurryExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(CurryExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(CurryExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_makeCallee_1(type, name) {
			this.__ks_func_addCallee_0(new DefaultCallee(this._data, this._object, null, this));
		}
		__ks_func_makeCallee_0(type, name) {
			return this.__ks_func_makeCallee_1(type, name);
		}
		__ks_func_makeCallee_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_makeCallee_1.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_makeCallee_rt.call(null, that, CallExpression.prototype, args);
		}
		__ks_func_toCallFragments_0(fragments, mode) {
			if(this._callees.length === 1) {
				this._callees[0].toCurryFragments(fragments, mode, this);
			}
			else if(this._callees.length === 2) {
				this.__ks_func_module_0().flag("Type");
				this._callees[0].toPositiveTestFragments(fragments, this);
				fragments.code(" ? ");
				this._callees[0].toCurryFragments(fragments, mode, this);
				fragments.code(") : ");
				this._callees[1].toCurryFragments(fragments, mode, this);
			}
			else {
				throw new NotImplementedException(this);
			}
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("Function");
		}
	}
	class DictionaryExpression extends Expression {
		static __ks_new_0(...args) {
			const o = Object.create(DictionaryExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._empty = true;
			this._properties = [];
			this._reusable = false;
			this._reuseName = null;
			this._spread = false;
			this._varname = "d";
		}
		__ks_cons_0(data, parent, scope) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			if(scope === void 0) {
				scope = null;
			}
			Expression.prototype.__ks_cons_rt.call(null, this, [data, parent, scope, ScopeType.Hollow]);
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			if(args.length === 3) {
				if(t0(args[1]) && t1(args[2])) {
					return DictionaryExpression.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			const names = new Dictionary();
			for(let __ks_0 = 0, __ks_1 = this._data.properties.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.properties[__ks_0];
				let property = null;
				if(KSHelper.valueOf(data.kind) === NodeKind.UnaryExpression.value) {
					property = DictionarySpreadMember.__ks_new_1(data, this);
					property.__ks_func_analyse_0();
					this._spread = true;
					this.__ks_func_module_0().flag("Helper");
				}
				else if((KSHelper.valueOf(data.name.kind) === NodeKind.Identifier.value) || (KSHelper.valueOf(data.name.kind) === NodeKind.Literal.value)) {
					property = DictionaryLiteralMember.__ks_new_1(data, this);
					property.__ks_func_analyse_0();
					if(names[property.__ks_func_reference_0()] === true) {
						SyntaxException.__ks_sttc_throwDuplicateKey_0(property);
					}
					names[property.__ks_func_reference_0()] = true;
				}
				else if(KSHelper.valueOf(data.name.kind) === NodeKind.ThisExpression.value) {
					property = DictionaryThisMember.__ks_new_1(data, this);
					property.__ks_func_analyse_0();
					if(names[property.__ks_func_reference_0()] === true) {
						SyntaxException.__ks_sttc_throwDuplicateKey_0(property);
					}
					names[property.__ks_func_reference_0()] = true;
				}
				else {
					property = DictionaryComputedMember.__ks_new_1(data, this);
					property.__ks_func_analyse_0();
				}
				this._properties.push(property);
			}
			if((this._options.format.functions === "es5") && !this._spread && this._scope.__ks_func_hasVariable_0("this")) {
				this._scope.rename("this", "that");
			}
			this._empty = this._properties.length === 0;
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._type = DictionaryType.__ks_new_0(this._scope);
			for(let __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.prepare();
				if(KSType.isClassInstance(property, DictionaryLiteralMember)) {
					this._type.addProperty(property.__ks_func_name_18(), property.__ks_func_type_22());
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_acquireReusable_1(acquire) {
			if(acquire === true) {
				this._reuseName = this._scope.__ks_func_acquireTempName_0();
			}
			for(let __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.acquireReusable(acquire);
			}
		}
		__ks_func_isComputed_0() {
			return true;
		}
		__ks_func_isMatchingType_0(type) {
			if(this._properties.length === 0) {
				return (type.__ks_func_isAny_0() === true) || (type.__ks_func_isDictionary_0() === true);
			}
			else {
				return this._type.__ks_func_matchContentOf_0(type);
			}
		}
		isSpread() {
			return this.__ks_func_isSpread_rt.call(null, this, this, arguments);
		}
		__ks_func_isSpread_0() {
			return this._spread;
		}
		__ks_func_isSpread_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSpread_0.call(that);
			}
			if(super.__ks_func_isSpread_rt) {
				return super.__ks_func_isSpread_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isUsingVariable_1(name) {
			for(let __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				if(property.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			for(let __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.listNonLocalVariables(scope, variables);
			}
			return variables;
		}
		__ks_func_reference_0() {
			return this._parent.__ks_func_reference_0();
		}
		__ks_func_releaseReusable_1() {
			if(this._reuseName !== null) {
				this._scope.releaseTempName(this._reuseName);
			}
			for(let __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.releaseReusable();
			}
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_34(fragments, mode) {
			if(this._reusable) {
				fragments.code(this._reuseName);
			}
			else if(this._empty) {
				fragments.code("new ", $runtime.dictionary.__ks_0(this), "()");
			}
			else if(this._spread) {
				fragments.code($runtime.helper.__ks_0(this), ".concatDictionary(");
				let opened = false;
				for(let index = 0, __ks_0 = this._properties.length, property; index < __ks_0; ++index) {
					property = this._properties[index];
					if(KSType.isClassInstance(property, DictionarySpreadMember)) {
						if(opened) {
							fragments.code("}, ");
							opened = false;
						}
						else if(index !== 0) {
							fragments.code($comma);
						}
						fragments.compile(property);
					}
					else {
						if(index !== 0) {
							fragments.code($comma);
						}
						if(!opened) {
							fragments.code("{");
							opened = true;
						}
						fragments.compile(property);
					}
				}
				if(opened) {
					fragments.code("}");
				}
				fragments.code(")");
			}
			else {
				if(this.__ks_func_isUsingVariable_1("d") === true) {
					if(!(this.__ks_func_isUsingVariable_1("o") === true)) {
						this._varname = "o";
					}
					else if(!(this.__ks_func_isUsingVariable_1("_") === true)) {
						this._varname = "_";
					}
					else {
						this._varname = "__ks__";
					}
				}
				let usingThis = false;
				if(this._options.format.functions === "es5") {
					if(this.__ks_func_isUsingVariable_1("this") === true) {
						usingThis = true;
						fragments.code("(function(that)");
					}
					else {
						fragments.code("(function()");
					}
				}
				else {
					fragments.code("(() =>");
				}
				const block = fragments.newBlock();
				block.line($const.__ks_0(this), this._varname, " = new ", $runtime.dictionary.__ks_0(this), "()");
				for(let __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
					property = this._properties[__ks_0];
					block.newLine().compile(property).done();
				}
				block.line("return " + this._varname).done();
				if(usingThis) {
					fragments.code(KSHelper.concatString(")(", this._scope.__ks_func_parent_0().getVariable("this").getSecureName(), ")"));
				}
				else {
					fragments.code(")()");
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_34.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toReusableFragments_0(fragments) {
			fragments.code(this._reuseName, $equals).compile(this);
			this._reusable = true;
		}
		__ks_func_type_22() {
			return this._type;
		}
		__ks_func_validateType_3(type) {
			for(let __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				if(KSType.isClassInstance(property, DictionaryLiteralMember)) {
					let propertyType = type.getProperty(property.__ks_func_name_18());
					if(KSType.isValue(propertyType)) {
						property.__ks_func_validateType_0(propertyType);
					}
				}
			}
		}
		__ks_func_validateType_4(type) {
			if(type.__ks_func_hasParameters_0() === true) {
				const parameter = type.__ks_func_parameter_2(0);
				for(let __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
					property = this._properties[__ks_0];
					if(KSType.isClassInstance(property, DictionaryLiteralMember)) {
						property.validateType(parameter);
					}
				}
			}
		}
		__ks_func_validateType_0(type) {
			if(KSType.isClassInstance(type, DictionaryType)) {
				return this.__ks_func_validateType_3(type);
			}
			if(KSType.isClassInstance(type, ReferenceType)) {
				return this.__ks_func_validateType_4(type);
			}
			return super.__ks_func_validateType_0(type);
		}
		__ks_func_validateType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, DictionaryType);
			const t1 = value => KSType.isClassInstance(value, ReferenceType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_validateType_3.call(that, args[0]);
				}
				if(t1(args[0])) {
					return proto.__ks_func_validateType_4.call(that, args[0]);
				}
			}
			return super.__ks_func_validateType_rt.call(null, that, Expression.prototype, args);
		}
		varname() {
			return this.__ks_func_varname_rt.call(null, this, this, arguments);
		}
		__ks_func_varname_0() {
			return this._varname;
		}
		__ks_func_varname_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_varname_0.call(that);
			}
			if(super.__ks_func_varname_rt) {
				return super.__ks_func_varname_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class DictionaryLiteralMember extends Expression {
		static __ks_new_0() {
			const o = Object.create(DictionaryLiteralMember.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(DictionaryLiteralMember.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(DictionaryLiteralMember.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._computed = true;
			this._enumCasting = false;
			this._function = false;
			this._shorthand = true;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._options = Attribute.configure(this._data, this._options, AttributeTarget.Property, this.__ks_func_file_0());
			if(KSHelper.valueOf(this._data.name.kind) === NodeKind.Identifier.value) {
				this._name = new Literal(this._data.name, this, KSHelper.notNull(this._scope), this._data.name.name);
				this.__ks_func_reference_1(KSHelper.concatString(".", this._data.name.name));
				this._computed = false;
			}
			else {
				this._name = new StringLiteral(this._data.name, this);
				this.__ks_func_reference_1(KSHelper.concatString("[", $quote(this._data.name.value), "]"));
			}
			if(KSHelper.valueOf(this._data.kind) === NodeKind.ObjectMember.value) {
				this._value = $compile.expression(this._data.value, this);
				this._function = KSHelper.valueOf(this._data.value.kind) === NodeKind.FunctionExpression.value;
				this._shorthand = (KSHelper.valueOf(this._data.name.kind) === NodeKind.Identifier.value) && (KSHelper.valueOf(this._data.value.kind) === NodeKind.Identifier.value) && (this._data.name.name === this._data.value.name);
			}
			else {
				this._value = $compile.expression(this._data.name, this);
			}
			this._value.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._value.prepare();
			this._type = this._value.type();
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._value.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_acquireReusable_1(acquire) {
			return this._value.acquireReusable(acquire);
		}
		__ks_func_isUsingVariable_1(name) {
			return this._value.isUsingVariable(name);
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			return this._value.listNonLocalVariables(scope, variables);
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_18() {
			return this._name.value();
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_18.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_releaseReusable_1() {
			return this._value.releaseReusable();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_35(fragments, mode) {
			if(this._parent.isSpread() === true) {
				fragments.compile(this._name);
				if(!this._shorthand || (this._value.isRenamed() === true)) {
					if(!this._function) {
						fragments.code(": ");
					}
				}
			}
			else if(this._computed) {
				fragments.code(this._parent.varname(), "[").compile(this._name).code("]", $equals);
			}
			else {
				fragments.code(this._parent.varname(), ".").compile(this._name).code($equals);
			}
			if(this._enumCasting) {
				this._value.toCastingFragments(fragments, mode);
			}
			else {
				fragments.compile(this._value);
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_35.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
		__ks_func_validateType_0(type) {
			if((this._type.__ks_func_isEnum_0() === true) && !(type.__ks_func_isEnum_0() === true)) {
				this._enumCasting = true;
			}
		}
		value() {
			return this.__ks_func_value_rt.call(null, this, this, arguments);
		}
		__ks_func_value_1() {
			return this._value;
		}
		__ks_func_value_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_value_1.call(that);
			}
			if(super.__ks_func_value_rt) {
				return super.__ks_func_value_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class DictionaryComputedMember extends Expression {
		static __ks_new_0() {
			const o = Object.create(DictionaryComputedMember.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(DictionaryComputedMember.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(DictionaryComputedMember.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._options = Attribute.configure(this._data, this._options, AttributeTarget.Property, this.__ks_func_file_0());
			if(KSHelper.valueOf(this._data.name.kind) === NodeKind.ComputedPropertyName.value) {
				this._name = $compile.expression(this._data.name.expression, this);
			}
			else {
				this._name = TemplateExpression.__ks_new_1(this._data.name, this);
				this._name.__ks_func_computing_0(true);
			}
			this._name.analyse();
			this._value = $compile.expression(this._data.value, this);
			this._value.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._name.prepare();
			this._value.prepare();
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._name.translate();
			this._value.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_acquireReusable_1(acquire) {
			this._name.acquireReusable(acquire);
			this._value.acquireReusable(acquire);
		}
		__ks_func_isUsingVariable_1(name) {
			return (this._name.isUsingVariable(name) === true) || (this._value.isUsingVariable(name) === true);
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			this._name.listNonLocalVariables(scope, variables);
			this._value.listNonLocalVariables(scope, variables);
			return variables;
		}
		__ks_func_releaseReusable_1() {
			this._name.releaseReusable();
			this._value.releaseReusable();
		}
		toComputedFragments() {
			return this.__ks_func_toComputedFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toComputedFragments_0(fragments, name) {
			fragments.code(name).code("[").compile(this._name).code("]").code($equals).compile(this._value).code($comma);
		}
		__ks_func_toComputedFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toComputedFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toComputedFragments_rt) {
				return super.__ks_func_toComputedFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_36(fragments, mode) {
			fragments.code(this._parent.varname(), "[").compile(this._name).code("]", $equals).compile(this._value);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_36.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		value() {
			return this.__ks_func_value_rt.call(null, this, this, arguments);
		}
		__ks_func_value_2() {
			return this._value;
		}
		__ks_func_value_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_value_2.call(that);
			}
			if(super.__ks_func_value_rt) {
				return super.__ks_func_value_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class DictionaryThisMember extends Expression {
		static __ks_new_0() {
			const o = Object.create(DictionaryThisMember.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(DictionaryThisMember.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(DictionaryThisMember.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._name = new Literal(this._data.name.name, this, KSHelper.notNull(this._scope), this._data.name.name.name);
			this._value = $compile.expression(this._data.name, this);
			this._value.analyse();
			this.__ks_func_reference_1(KSHelper.concatString(".", this._name.__ks_func_value_0()));
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._value.prepare();
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._value.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isUsingVariable_1(name) {
			return this._value.isUsingVariable(name);
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			return this._value.listNonLocalVariables(scope, variables);
		}
		toComputedFragments() {
			return this.__ks_func_toComputedFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toComputedFragments_1(fragments, name) {
			fragments.code(name).code(this._reference).code($equals).compile(this._value).code($comma);
		}
		__ks_func_toComputedFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toComputedFragments_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toComputedFragments_rt) {
				return super.__ks_func_toComputedFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_37(fragments, mode) {
			fragments.compile(this._name).code(": ").compile(this._value);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_37.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		value() {
			return this.__ks_func_value_rt.call(null, this, this, arguments);
		}
		__ks_func_value_3() {
			return this._value;
		}
		__ks_func_value_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_value_3.call(that);
			}
			if(super.__ks_func_value_rt) {
				return super.__ks_func_value_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class DictionarySpreadMember extends Expression {
		static __ks_new_0() {
			const o = Object.create(DictionarySpreadMember.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(DictionarySpreadMember.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(DictionarySpreadMember.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._options = Attribute.configure(this._data, this._options, AttributeTarget.Property, this.__ks_func_file_0());
			this._value = $compile.expression(this._data.argument, this);
			this._value.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._value.prepare();
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._value.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isUsingVariable_1(name) {
			return this._value.isUsingVariable(name);
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			return this._value.listNonLocalVariables(scope, variables);
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_38(fragments, mode) {
			fragments.compile(this._value);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_38.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		value() {
			return this.__ks_func_value_rt.call(null, this, this, arguments);
		}
		__ks_func_value_4() {
			return this._value;
		}
		__ks_func_value_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_value_4.call(that);
			}
			if(super.__ks_func_value_rt) {
				return super.__ks_func_value_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class EnumExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(EnumExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(EnumExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(EnumExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._enumCasting = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._enum = $compile.expression(this._data.enum, this);
			this._enum.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._enum.prepare();
			const named = this._enum.type();
			if(!(named.type().isEnum() === true)) {
				TypeException.throwNotEnum(this._data.enum.name, this);
			}
			else if(!(named.type().hasVariable(this._data.member.name) === true)) {
				ReferenceException.throwNotDefinedEnumElement(this._data.member.name, named.name(), this);
			}
			this._type = named.reference(this._scope);
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._enum.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isUsingVariable_1(name) {
			return false;
		}
		__ks_func_toArgumentFragments_2(fragments, type, mode) {
			this.__ks_func_toFragments_39(fragments, mode);
			if(!((type.__ks_func_isAny_0() === true) || (type.__ks_func_isEnum_0() === true))) {
				fragments.code(".value");
			}
		}
		__ks_func_toArgumentFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, Type);
			const t2 = value => KSType.isEnumInstance(value, Mode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return proto.__ks_func_toArgumentFragments_2.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_toArgumentFragments_rt.call(null, that, Expression.prototype, args);
		}
		__ks_func_toCastingFragments_1(fragments, mode) {
			this.__ks_func_toFragments_39(fragments, mode);
			fragments.code(".value");
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_39(fragments, mode) {
			fragments.compile(this._enum).code(".", this._data.member.name);
			if(this._enumCasting) {
				fragments.code(".value");
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_39.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			return KSHelper.concatString(this._enum.toQuote(), "::", this._data.member.name);
		}
		__ks_func_type_22() {
			return this._type;
		}
		__ks_func_validateType_0(type) {
			if(!(type.__ks_func_isAny_0() === true) && !(type.__ks_func_isEnum_0() === true)) {
				this._enumCasting = true;
			}
		}
	}
	class AnonymousFunctionExpression extends Expression {
		static __ks_new_0(...args) {
			const o = Object.create(AnonymousFunctionExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._autoTyping = false;
			this._awaiting = false;
			this._exit = false;
			this._isObjectMember = false;
			this._topNodes = [];
		}
		__ks_cons_0(data, parent, scope) {
			Expression.prototype.__ks_cons_rt.call(null, this, [data, parent, scope, ScopeType.Function]);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return AnonymousFunctionExpression.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._scope.define("this", true, Type.Any, this);
			this._parameters = [];
			for(let __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = Parameter.__ks_new_0(parameter, this));
				parameter.__ks_func_analyse_0();
			}
			this._isObjectMember = KSType.isClassInstance(this._parent.__ks_func_parent_0(), DictionaryExpression);
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_prepare_0();
			}
			this._type = new FunctionType(KSHelper.mapArray(this._parameters, function(parameter) {
				return parameter.__ks_func_type_30();
			}), this._data, 0, this);
			this._block = $compile.function($ast.body.__ks_0(this._data), this);
			this._block.__ks_func_analyse_0();
			this._autoTyping = KSType.isValue(this._data.type) ? KSHelper.valueOf(this._data.type.kind) === NodeKind.ReturnTypeReference.value : false;
			if(this._autoTyping) {
				this._type.setReturnType(this._block.__ks_func_getUnpreparedType_2());
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_translate_0();
			}
			if(this._autoTyping) {
				this._block.__ks_func_prepare_0();
				this._type.setReturnType(this._block.__ks_func_type_39());
			}
			else {
				this._block.type(this._type.getReturnType()).prepare();
			}
			this._block.__ks_func_translate_0();
			this._awaiting = this._block.__ks_func_isAwait_3();
			this._exit = this._block.__ks_func_isExit_3();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addInitializableVariable() {
			return this.__ks_func_addInitializableVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_addInitializableVariable_5(variable, node) {
		}
		__ks_func_addInitializableVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_addInitializableVariable_5.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addInitializableVariable_rt) {
				return super.__ks_func_addInitializableVariable_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addTopNode() {
			return this.__ks_func_addTopNode_rt.call(null, this, this, arguments);
		}
		__ks_func_addTopNode_10(node) {
			this._topNodes.push(node);
		}
		__ks_func_addTopNode_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addTopNode_10.call(that, args[0]);
				}
			}
			if(super.__ks_func_addTopNode_rt) {
				return super.__ks_func_addTopNode_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_authority_0() {
			return this;
		}
		__ks_func_getFunctionNode_0() {
			return this;
		}
		getParameterOffset() {
			return this.__ks_func_getParameterOffset_rt.call(null, this, this, arguments);
		}
		__ks_func_getParameterOffset_9() {
			return 0;
		}
		__ks_func_getParameterOffset_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getParameterOffset_9.call(that);
			}
			if(super.__ks_func_getParameterOffset_rt) {
				return super.__ks_func_getParameterOffset_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasPreservedParameter() {
			return this.__ks_func_hasPreservedParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_hasPreservedParameter_1() {
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				if(parameter.__ks_func_isPreserved_0() === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_hasPreservedParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasPreservedParameter_1.call(that);
			}
			if(super.__ks_func_hasPreservedParameter_rt) {
				return super.__ks_func_hasPreservedParameter_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_initializeVariable_7(variable, expression, node) {
		}
		__ks_func_initializeVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_initializeVariable_7.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_initializeVariable_rt.call(null, that, Expression.prototype, args);
		}
		isAssertingParameter() {
			return this.__ks_func_isAssertingParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameter_9() {
			return this._options.rules.assertParameter;
		}
		__ks_func_isAssertingParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameter_9.call(that);
			}
			if(super.__ks_func_isAssertingParameter_rt) {
				return super.__ks_func_isAssertingParameter_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameterType() {
			return this.__ks_func_isAssertingParameterType_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameterType_9() {
			return (this._options.rules.assertParameter === true) && (this._options.rules.assertParameterType === true);
		}
		__ks_func_isAssertingParameterType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameterType_9.call(that);
			}
			if(super.__ks_func_isAssertingParameterType_rt) {
				return super.__ks_func_isAssertingParameterType_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isComputed_0() {
			return true;
		}
		__ks_func_isConsumedError_0(error) {
			return this._type.isCatchingError(error);
		}
		isInstanceMethod() {
			return this.__ks_func_isInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstanceMethod_7() {
			return false;
		}
		__ks_func_isInstanceMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstanceMethod_7.call(that);
			}
			if(super.__ks_func_isInstanceMethod_rt) {
				return super.__ks_func_isInstanceMethod_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isOverridableFunction() {
			return this.__ks_func_isOverridableFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_isOverridableFunction_9() {
			return false;
		}
		__ks_func_isOverridableFunction_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isOverridableFunction_9.call(that);
			}
			if(super.__ks_func_isOverridableFunction_rt) {
				return super.__ks_func_isOverridableFunction_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isUsingVariable_1(name) {
			return false;
		}
		parameters() {
			return this.__ks_func_parameters_rt.call(null, this, this, arguments);
		}
		__ks_func_parameters_9() {
			return this._parameters;
		}
		__ks_func_parameters_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameters_9.call(that);
			}
			if(super.__ks_func_parameters_rt) {
				return super.__ks_func_parameters_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_40(fragments, mode) {
			const assessment = this.__ks_func_type_22().assessment("__ks_rt", this);
			const block = fragments.code("(() =>").newBlock();
			const lineRouter = block.newLine().code("const __ks_rt = (");
			const preserved = this.__ks_func_hasPreservedParameter_1();
			if(preserved === true) {
				for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = this._parameters[__ks_0];
					lineRouter.compile(parameter).code($comma);
				}
			}
			const blockRouter = lineRouter.code("...args) =>").newBlock();
			if(preserved === true) {
				const line = blockRouter.newLine().code("args.unshift(");
				for(let index = 0, __ks_0 = this._parameters.length, parameter; index < __ks_0; ++index) {
					parameter = this._parameters[index];
					if(!(index === 0)) {
						line.code($comma);
					}
					line.compile(parameter);
				}
				line.code(")").done();
			}
			Router.toFragments((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (__ks_function_1, line) => {
					line.code(KSHelper.concatString("__ks_rt.__ks_", __ks_function_1.index(), ".call(null"));
					return true;
				};
				return __ks_rt;
			})(), null, assessment, blockRouter, this);
			blockRouter.done();
			lineRouter.done();
			const lineFunction = block.newLine();
			lineFunction.code("__ks_rt.__ks_0 = function(");
			const blockFunction = Parameter.toFragments(this, lineFunction, ParameterMode.Default, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(null, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(fragments) {
					return fragments.code(")").newBlock();
				};
				return __ks_rt;
			})());
			for(let __ks_0 = 0, __ks_1 = this._topNodes.length, node; __ks_0 < __ks_1; ++__ks_0) {
				node = this._topNodes[__ks_0];
				blockFunction.toAuthorityFragments(block);
			}
			blockFunction.compile(this._block, Mode.None);
			if(!this._awaiting && !this._exit && (this._type.isAsync() === true)) {
				blockFunction.line("__ks_cb()");
			}
			blockFunction.done();
			lineFunction.done();
			block.line("return __ks_rt");
			block.done();
			fragments.code(")()");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_40.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class ArrowFunctionExpression extends Expression {
		static __ks_new_0(...args) {
			const o = Object.create(ArrowFunctionExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._autoTyping = false;
			this._awaiting = false;
			this._es5 = false;
			this._exit = false;
			this._shiftToAuthority = false;
			this._usingThis = false;
		}
		__ks_cons_0(data, parent, scope) {
			Expression.prototype.__ks_cons_rt.call(null, this, [data, parent, scope, ScopeType.Block]);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return ArrowFunctionExpression.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._es5 = this._options.format.functions === "es5";
			this._block = $compile.function($ast.body.__ks_0(this._data), this);
			this._parameters = [];
			for(let __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = Parameter.__ks_new_0(parameter, this));
				parameter.__ks_func_analyse_0();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_prepare_0();
			}
			this._type = new FunctionType(KSHelper.mapArray(this._parameters, function(parameter) {
				return parameter.__ks_func_type_30();
			}), this._data, 0, this);
			this._block.__ks_func_analyse_0();
			this._autoTyping = KSType.isValue(this._data.type) ? KSHelper.valueOf(this._data.type.kind) === NodeKind.ReturnTypeReference.value : false;
			if(this._autoTyping) {
				this._type.setReturnType(this._block.__ks_func_getUnpreparedType_2());
			}
			this._usingThis = this.__ks_func_isUsingVariable_1("this");
			if(this._es5) {
				this._variables = this._block.listNonLocalVariables(this._scope, []);
				if(this._usingThis || (this._variables.length !== 0)) {
					this._shiftToAuthority = true;
					const authority = this.__ks_func_authority_0();
					this._name = authority.scope().getReservedName();
					authority.addTopNode(this);
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.__ks_func_translate_0();
			}
			if(this._autoTyping) {
				this._block.__ks_func_prepare_0();
				this._type.setReturnType(this._block.__ks_func_type_39());
			}
			else {
				this._block.type(this._type.getReturnType()).prepare();
			}
			this._block.__ks_func_translate_0();
			this._awaiting = this._block.__ks_func_isAwait_3();
			this._exit = this._block.__ks_func_isExit_3();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addInitializableVariable() {
			return this.__ks_func_addInitializableVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_addInitializableVariable_6(variable, node) {
		}
		__ks_func_addInitializableVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_addInitializableVariable_6.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addInitializableVariable_rt) {
				return super.__ks_func_addInitializableVariable_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getFunctionNode_0() {
			return this;
		}
		getParameterOffset() {
			return this.__ks_func_getParameterOffset_rt.call(null, this, this, arguments);
		}
		__ks_func_getParameterOffset_10() {
			if(this._shiftToAuthority) {
				return this._variables.length;
			}
			else {
				return 0;
			}
		}
		__ks_func_getParameterOffset_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getParameterOffset_10.call(that);
			}
			if(super.__ks_func_getParameterOffset_rt) {
				return super.__ks_func_getParameterOffset_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasPreservedParameter() {
			return this.__ks_func_hasPreservedParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_hasPreservedParameter_2() {
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				if(parameter.__ks_func_isPreserved_0() === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_hasPreservedParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasPreservedParameter_2.call(that);
			}
			if(super.__ks_func_hasPreservedParameter_rt) {
				return super.__ks_func_hasPreservedParameter_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_initializeVariable_8(variable, expression, node) {
		}
		__ks_func_initializeVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_initializeVariable_8.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_initializeVariable_rt.call(null, that, Expression.prototype, args);
		}
		isAssertingParameter() {
			return this.__ks_func_isAssertingParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameter_10() {
			return this._options.rules.assertParameter;
		}
		__ks_func_isAssertingParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameter_10.call(that);
			}
			if(super.__ks_func_isAssertingParameter_rt) {
				return super.__ks_func_isAssertingParameter_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameterType() {
			return this.__ks_func_isAssertingParameterType_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameterType_10() {
			return (this._options.rules.assertParameter === true) && (this._options.rules.assertParameterType === true);
		}
		__ks_func_isAssertingParameterType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameterType_10.call(that);
			}
			if(super.__ks_func_isAssertingParameterType_rt) {
				return super.__ks_func_isAssertingParameterType_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isComputed_0() {
			return true;
		}
		__ks_func_isConsumedError_0(error) {
			return this._type.isCatchingError(error);
		}
		isInstanceMethod() {
			return this.__ks_func_isInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstanceMethod_8() {
			return false;
		}
		__ks_func_isInstanceMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstanceMethod_8.call(that);
			}
			if(super.__ks_func_isInstanceMethod_rt) {
				return super.__ks_func_isInstanceMethod_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isOverridableFunction() {
			return this.__ks_func_isOverridableFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_isOverridableFunction_10() {
			return false;
		}
		__ks_func_isOverridableFunction_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isOverridableFunction_10.call(that);
			}
			if(super.__ks_func_isOverridableFunction_rt) {
				return super.__ks_func_isOverridableFunction_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isUsingVariable_1(name) {
			for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				if(parameter.__ks_func_isUsingVariable_2(name) === true) {
					return true;
				}
			}
			return this._block.__ks_func_isUsingVariable_3(name);
		}
		parameters() {
			return this.__ks_func_parameters_rt.call(null, this, this, arguments);
		}
		__ks_func_parameters_10() {
			return this._parameters;
		}
		__ks_func_parameters_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameters_10.call(that);
			}
			if(super.__ks_func_parameters_rt) {
				return super.__ks_func_parameters_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_41(fragments, mode) {
			if(this._shiftToAuthority) {
				if(this._variables.length === 0) {
					if(this._usingThis) {
						fragments.code(this._name + ".bind(this)");
					}
					else {
						fragments.code(this._name);
					}
				}
				else {
					const bind = this._usingThis ? "this" : "null";
					fragments.code(KSHelper.concatString($runtime.helper.__ks_0(this), ".vcurry(", this._name, ", ", bind));
					for(let __ks_0 = 0, __ks_1 = this._variables.length, variable; __ks_0 < __ks_1; ++__ks_0) {
						variable = this._variables[__ks_0];
						fragments.code(KSHelper.concatString(", ", variable.__ks_func_getSecureName_0()));
					}
					fragments.code(")");
				}
			}
			else {
				if(this._es5) {
					throw new NotImplementedException(this);
				}
				else {
					const assessment = this._type.assessment("__ks_rt", this);
					const block = fragments.code("(() =>").newBlock();
					const lineRouter = block.newLine().code("const __ks_rt = (");
					const preserved = this.__ks_func_hasPreservedParameter_2();
					if(preserved === true) {
						for(let __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
							parameter = this._parameters[__ks_0];
							lineRouter.compile(parameter).code($comma);
						}
					}
					const blockRouter = lineRouter.code("...args) =>").newBlock();
					if(preserved === true) {
						const line = blockRouter.newLine().code("args.unshift(");
						for(let index = 0, __ks_0 = this._parameters.length, parameter; index < __ks_0; ++index) {
							parameter = this._parameters[index];
							if(!(index === 0)) {
								line.code($comma);
							}
							line.compile(parameter);
						}
						line.code(")").done();
					}
					Router.toFragments((() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 2) {
								if(t0(args[0]) && t0(args[1])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (__ks_function_1, line) => {
							line.code(KSHelper.concatString("__ks_rt.__ks_", __ks_function_1.index(), ".call(this"));
							return true;
						};
						return __ks_rt;
					})(), null, assessment, blockRouter, this);
					blockRouter.done();
					lineRouter.done();
					const lineFunction = block.newLine();
					lineFunction.code("__ks_rt.__ks_0 = (");
					const blockFunction = Parameter.toFragments(this, lineFunction, ParameterMode.Default, (() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 1) {
								if(t0(args[0])) {
									return __ks_rt.__ks_0.call(null, args[0]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = function(fragments) {
							return fragments.code(") =>").newBlock();
						};
						return __ks_rt;
					})());
					blockFunction.compile(this._block, Mode.None);
					if(!this._awaiting && !this._exit && (this._type.isAsync() === true)) {
						blockFunction.line("__ks_cb()");
					}
					blockFunction.done();
					lineFunction.done();
					block.line("return __ks_rt");
					block.done();
					fragments.code(")()");
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_41.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toAuthorityFragments() {
			return this.__ks_func_toAuthorityFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toAuthorityFragments_0(fragments) {
			const ctrl = fragments.newControl().code(KSHelper.concatString($runtime.immutableScope.__ks_0(this), this._name, " = function("));
			for(let index = 0, __ks_0 = this._variables.length, variable; index < __ks_0; ++index) {
				variable = this._variables[index];
				if(index !== 0) {
					ctrl.code($comma);
				}
				ctrl.code(variable.__ks_func_getSecureName_0());
			}
			Parameter.toFragments(this, ctrl, ParameterMode.Default, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(null, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(fragments) {
					return fragments.code(")").step();
				};
				return __ks_rt;
			})());
			ctrl.compile(this._block);
			if(!this._awaiting && !this._exit && (this._type.isAsync() === true)) {
				ctrl.line("__ks_cb()");
			}
			ctrl.done();
		}
		__ks_func_toAuthorityFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toAuthorityFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toAuthorityFragments_rt) {
				return super.__ks_func_toAuthorityFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class IfExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(IfExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(IfExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(IfExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._whenTrue = $compile.expression(this._data.whenTrue, this);
			this._whenTrue.analyse();
			if(KSType.isValue(this._data.whenFalse)) {
				this._whenFalse = $compile.expression(this._data.whenFalse, this);
				this._whenFalse.analyse();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._condition.prepare();
			{
				let __ks_0 = this._condition.inferTypes(new Dictionary());
				for(const name in __ks_0) {
					const data = __ks_0[name];
					this._scope.updateInferable(name, data, this);
				}
			}
			this._whenTrue.prepare();
			if(KSType.isValue(this._whenFalse)) {
				this._whenFalse.prepare();
				const t = this._whenTrue.type();
				const f = this._whenFalse.type();
				if(t.equals(f) === true) {
					this._type = t;
				}
				else if(f.isNull() === true) {
					this._type = t.setNullable(true);
				}
				else if(t.isNull() === true) {
					this._type = f.setNullable(true);
				}
				else {
					this._type = Type.union(this._scope, t, f);
				}
			}
			else {
				this._type = this._whenTrue.type();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._condition.translate();
			this._whenTrue.translate();
			if(KSType.isValue(this._whenFalse)) {
				this._whenFalse.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isComputed_0() {
			return true;
		}
		__ks_func_isUsingVariable_1(name) {
			return (this._condition.isUsingVariable(name) === true) || (this._whenTrue.isUsingVariable(name) === true) || (KSType.isValue(this._whenFalse) ? this._whenFalse.isUsingVariable(name) === true : false);
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			this._condition.listNonLocalVariables(scope, variables);
			this._whenTrue.listNonLocalVariables(scope, variables);
			KSType.isValue(this._whenFalse) ? this._whenFalse.listNonLocalVariables(scope, variables) : null;
			return variables;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_42(fragments, mode) {
			if(KSType.isValue(this._whenFalse)) {
				fragments.wrapBoolean(this._condition).code(" ? ").compile(this._whenTrue).code(" : ").compile(this._whenFalse);
			}
			else {
				fragments.wrapBoolean(this._condition).code(" ? ").compile(this._whenTrue).code(" : null");
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_42.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_49(fragments, mode) {
			const ctrl = fragments.newControl();
			ctrl.code("if(");
			ctrl.compileBoolean(this._condition);
			ctrl.code(")").step().line(this._whenTrue).done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_49.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class IfVariableDeclarationExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(IfVariableDeclarationExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(IfVariableDeclarationExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(IfVariableDeclarationExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._declarators = [];
			this._destructuring = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._immutable = !(this._data.rebindable === true);
			this._autotype = this._immutable || (this._data.autotype === true);
			this._await = this._data.await;
			for(let __ks_0 = 0, __ks_1 = this._data.variables.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.variables[__ks_0];
				let declarator = null;
				let __ks_2 = data.name.kind.valueOf();
				if(__ks_2 === NodeKind.ArrayBinding.value) {
					declarator = VariableBindingDeclarator.__ks_new_1(data, this);
				}
				else if(__ks_2 === NodeKind.Identifier.value) {
					declarator = VariableIdentifierDeclarator.__ks_new_1(data, this);
				}
				else if(__ks_2 === NodeKind.ObjectBinding.value) {
					declarator = VariableBindingDeclarator.__ks_new_1(data, this);
				}
				else {
					console.info(data);
					throw new NotImplementedException(this);
				}
				declarator.__ks_func_analyse_0();
				this._declarators.push(declarator);
			}
			this._init = $compile.expression(this._data.init, this);
			this._init.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._init.prepare();
			if(this._autotype) {
				this._declarators[0].type(this._init.type());
			}
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.prepare();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._init.translate();
			for(let __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isImmutable() {
			return this.__ks_func_isImmutable_rt.call(null, this, this, arguments);
		}
		__ks_func_isImmutable_6() {
			return this._immutable;
		}
		__ks_func_isImmutable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isImmutable_6.call(that);
			}
			if(super.__ks_func_isImmutable_rt) {
				return super.__ks_func_isImmutable_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_43(fragments, mode) {
			if(this._await) {
				throw new NotImplementedException(this);
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue(")).compile(this._declarators[0]).code($equals).compile(this._init).code(")");
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_43.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class MemberExpression extends Expression {
		static __ks_new_0(...args) {
			const o = Object.create(MemberExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(MemberExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._assignable = false;
			this._assignment = AssignmentType.Neither;
			this._computed = false;
			this._inferable = false;
			this._nullable = false;
			this._prepareObject = true;
			this._sealed = false;
			this._stringProperty = false;
			this._tested = false;
			this._type = AnyType.NullableUnexplicit;
			this._usingGetter = false;
			this._usingSetter = false;
		}
		__ks_cons_0(data, parent, scope) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			if(scope === void 0) {
				scope = null;
			}
			Expression.prototype.__ks_cons_1.call(this, data, parent, scope);
		}
		__ks_cons_1(data, parent, scope, object) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			if(scope === void 0) {
				scope = null;
			}
			if(object === void 0) {
				object = null;
			}
			Expression.prototype.__ks_cons_1.call(this, data, parent, scope);
			this._object = object;
			this._prepareObject = false;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t2 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[1]) && t1(args[2])) {
					return MemberExpression.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 4) {
				if(t0(args[1]) && t1(args[2]) && t2(args[3])) {
					return MemberExpression.prototype.__ks_cons_1.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Computed.value) {
					this._computed = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value) {
					this._nullable = true;
				}
			}
			if(this._prepareObject) {
				this._object = $compile.expression(this._data.object, this);
				this._object.analyse();
				if(this._computed) {
					this._property = $compile.expression(this._data.property, this);
					this._property.analyse();
				}
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(this._prepareObject) {
				this._object.prepare();
				const type = this._object.type();
				if((type.isNull() === true) && !this._nullable && !(this._options.rules.ignoreMisfit === true)) {
					ReferenceException.throwNullExpression(this._object, this);
				}
				if(this._computed) {
					this._property.prepare();
					if(type.isTuple() === true) {
						if(KSType.isClassInstance(this._property, NumberLiteral)) {
							let property = type.discard().getProperty(this._property.__ks_func_value_0());
							if(KSType.isValue(property)) {
								this._type = property.type();
							}
							else if(type.isExhaustive(this) === true) {
								ReferenceException.throwNotDefinedProperty(this._property.__ks_func_value_0(), this);
							}
						}
					}
					else if((type.isArray() === true) || (type.isDictionary() === true)) {
						this._type = type.parameter();
					}
					if(this._object.isInferable() === true) {
						if(KSType.isClassInstance(this._property, NumberLiteral)) {
							this._inferable = true;
							this._path = KSHelper.concatString(this._object.path(), "[", this._property.__ks_func_value_0(), "]");
						}
						else if(KSType.isClassInstance(this._property, StringLiteral)) {
							this._inferable = true;
							this._path = KSHelper.concatString(this._object.path(), "['", this._property.__ks_func_value_0(), "']");
						}
						if(this._inferable) {
							let __ks_type_1 = this._scope.getChunkType(this._path);
							if(KSType.isValue(__ks_type_1)) {
								this._type = __ks_type_1;
							}
						}
					}
				}
				else {
					const isTuple = type.isTuple();
					this._property = this._data.property.name;
					if(!(isTuple === true)) {
						let __ks_0;
						if(KSOperator.lte(48, __ks_0 = this._property.charCodeAt(0)) && KSOperator.lte(__ks_0, 57)) {
							SyntaxException.throwInvalidIdentifier(this._property, this);
						}
					}
					if(type.isDictionary() === true) {
						this._type = type.parameter();
					}
					if(isTuple === true) {
						this._computed = true;
						this._stringProperty = true;
						let property = type.getProperty(this._property);
						if(KSType.isValue(property)) {
							this._property = KSHelper.toString(property.index());
							this._type = property.type();
						}
						else if(this._assignable) {
							ReferenceException.__ks_sttc_throwInvalidAssignment_0(this);
						}
						else if(type.isExhaustive(this) === true) {
							ReferenceException.throwNotDefinedProperty(this._property, this);
						}
						if(this._object.isInferable() === true) {
							this._inferable = true;
							this._path = KSHelper.concatString(this._object.path(), "[", this._property, "]");
						}
					}
					else if(type.isStruct() === true) {
						let property = type.getProperty(this._property);
						if(KSType.isValue(property)) {
							this._type = property.type();
						}
						else if(this._assignable) {
							ReferenceException.__ks_sttc_throwInvalidAssignment_0(this);
						}
						else if(type.isExhaustive(this) === true) {
							ReferenceException.throwNotDefinedProperty(this._property, this);
						}
						if(this._object.isInferable() === true) {
							this._inferable = true;
							this._path = KSHelper.concatString(this._object.path(), ".", this._property);
						}
					}
					else {
						let property = type.getProperty(this._property);
						if(KSType.isValue(property)) {
							const __ks_type_1 = type.discardReference();
							if((__ks_type_1.isClass() === true) && KSType.isClassInstance(property, ClassVariableType) && (property.__ks_func_isSealed_0() === true)) {
								this._sealed = true;
								this._usingGetter = property.__ks_func_hasDefaultValue_0();
								this._usingSetter = property.__ks_func_hasDefaultValue_0();
							}
							this._type = property.discardVariable();
						}
						else {
							if(type.isEnum() === true) {
								SyntaxException.__ks_sttc_throwInvalidEnumAccess_0(this);
							}
							else if(type.isExhaustive(this) === true) {
								if(this._assignable) {
									ReferenceException.__ks_sttc_throwInvalidAssignment_0(this);
								}
								else {
									ReferenceException.throwNotDefinedProperty(this._property, this);
								}
							}
						}
						if(this._object.isInferable() === true) {
							this._inferable = true;
							this._path = KSHelper.concatString(this._object.path(), ".", this._property);
						}
					}
					if(this._assignable) {
						let property;
						let variable = this.__ks_func_declaration_0();
						if(KSType.isValue(variable)) {
							if(variable.isImmutable() === true) {
								if(variable.isLateInit() === true) {
									if(variable.isInitialized() === true) {
										ReferenceException.__ks_sttc_throwImmutable_1(this);
									}
								}
								else {
									ReferenceException.__ks_sttc_throwImmutable_1(this);
								}
							}
						}
						else if(KSType.isValue((property = this._object.type().getProperty(this._property)))) {
							if(property.isImmutable() === true) {
								ReferenceException.__ks_sttc_throwImmutable_1(this);
							}
						}
					}
				}
			}
			else {
				const type = this._object.type();
				if((type.isNull() === true) && !this._nullable && !(this._options.rules.ignoreMisfit === true)) {
					ReferenceException.throwNullExpression(this._object, this);
				}
				if(this._computed) {
					this._property = $compile.expression(this._data.property, this);
					this._property.analyse();
					this._property.prepare();
				}
				else {
					this._property = this._data.property.name;
					let __ks_0;
					if(KSOperator.lte(48, __ks_0 = this._property.charCodeAt(0)) && KSOperator.lte(__ks_0, 57)) {
						if(!(type.isTuple() === true)) {
							SyntaxException.throwInvalidIdentifier(this._property, this);
						}
					}
				}
			}
			if(this._nullable && !(this._object.type().isNullable() === true) && !(this._options.rules.ignoreMisfit === true)) {
				if(!(KSType.isClassInstance(this._object, MemberExpression) && (this._object.__ks_func_isComputedMember_0() === true))) {
					TypeException.__ks_sttc_throwNotNullableExistential_0(this._object, this);
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._object.translate();
			if(this._computed && !this._stringProperty) {
				this._property.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_acquireReusable_1(acquire) {
			if(this._object.isCallable() === true) {
				this._object.acquireReusable(this._nullable || (acquire === true));
			}
			if(this._computed && !this._stringProperty && (this._property.isCallable() === true)) {
				this._property.acquireReusable(this._nullable || (acquire === true));
			}
		}
		caller() {
			return this.__ks_func_caller_rt.call(null, this, this, arguments);
		}
		__ks_func_caller_0() {
			return this._object;
		}
		__ks_func_caller_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_caller_0.call(that);
			}
			if(super.__ks_func_caller_rt) {
				return super.__ks_func_caller_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		declaration() {
			return this.__ks_func_declaration_rt.call(null, this, this, arguments);
		}
		__ks_func_declaration_0() {
			if(this._computed) {
				return null;
			}
			let node;
			let __ks_0;
			let declaration = KSType.isValue(__ks_0 = this._object.variable()) ? __ks_0.declaration() : null;
			if(KSType.isValue(declaration)) {
				if(KSType.isClassInstance(declaration, ClassDeclaration)) {
					return declaration.getClassVariable(this._property);
				}
			}
			else if(KSType.isValue((node = this._parent.__ks_func_getFunctionNode_0()))) {
				if(KSType.isClassInstance(node, ClassConstructorDeclaration)) {
					return node.__ks_func_parent_0().getInstanceVariable(this._property);
				}
			}
			return null;
		}
		__ks_func_declaration_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_declaration_0.call(that);
			}
			if(super.__ks_func_declaration_rt) {
				return super.__ks_func_declaration_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_flagAssignable_0() {
			this._assignable = true;
		}
		__ks_func_inferTypes_0(inferables) {
			this._object.inferTypes(inferables);
			if(this._computed && !this._stringProperty) {
				this._property.inferTypes(inferables);
			}
			return inferables;
		}
		initializeVariables() {
			return this.__ks_func_initializeVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_initializeVariables_5(type, node) {
			if(this._computed) {
				return;
			}
			if(KSType.isClassInstance(this._object, IdentifierLiteral)) {
				let property = this._object.__ks_func_type_22().getProperty(this._property);
				if(KSType.isValue(property)) {
					if((this._object.__ks_func_type_22().isClass() === true) && !(this._object.__ks_func_type_22().isReference() === true)) {
						node.initializeVariable(VariableBrief(this._property, type, void 0, property.isImmutable(), void 0, void 0, true, this._object.__ks_func_name_13()));
					}
					else if(this._object.__ks_func_name_13() === "this") {
						node.initializeVariable(VariableBrief(this._path.substring(5), type, void 0, property.isImmutable(), void 0, true));
					}
				}
			}
		}
		__ks_func_initializeVariables_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isClassInstance(value, Expression);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_initializeVariables_5.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_initializeVariables_rt) {
				return super.__ks_func_initializeVariables_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isCallable_0() {
			return (this._object.isCallable() === true) || (this._computed && !this._stringProperty && (this._property.isCallable() === true));
		}
		__ks_func_isComputed_0() {
			return (this.__ks_func_isNullable_0() === true) && !this._tested;
		}
		isComputedMember() {
			return this.__ks_func_isComputedMember_rt.call(null, this, this, arguments);
		}
		__ks_func_isComputedMember_0() {
			return this._computed;
		}
		__ks_func_isComputedMember_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isComputedMember_0.call(that);
			}
			if(super.__ks_func_isComputedMember_rt) {
				return super.__ks_func_isComputedMember_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isInferable_0() {
			return this._inferable;
		}
		__ks_func_isLooseComposite_0() {
			return (this.__ks_func_isCallable_0() === true) || (this.__ks_func_isNullable_0() === true);
		}
		isMacro() {
			return this.__ks_func_isMacro_rt.call(null, this, this, arguments);
		}
		__ks_func_isMacro_1() {
			return false;
		}
		__ks_func_isMacro_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isMacro_1.call(that);
			}
			if(super.__ks_func_isMacro_rt) {
				return super.__ks_func_isMacro_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isNullable_0() {
			return this._nullable || (this._object.isNullable() === true) || (this._computed && !this._stringProperty && (this._property.isNullable() === true));
		}
		__ks_func_isNullableComputed_0() {
			return (((this._object.isNullable() === true) ? 1 : 0) + (this._nullable ? 1 : 0) + ((this._computed && !this._stringProperty && (this._property.isNullable() === true)) ? 1 : 0)) > 1;
		}
		__ks_func_isUsingSetter_0() {
			return this._usingSetter;
		}
		__ks_func_isUsingVariable_1(name) {
			return this._object.isUsingVariable(name);
		}
		__ks_func_isUsingInstanceVariable_1(name) {
			return (this._property === name) && KSType.isClassInstance(this._object, IdentifierLiteral) && (this._object.__ks_func_name_13() === "this") && (this._object.__ks_func_type_22().discard().hasInstanceVariable(this._property) === true);
		}
		__ks_func_isUsingStaticVariable_1(__ks_class_1, varname) {
			return (this._property === varname) && KSType.isClassInstance(this._object, IdentifierLiteral) && (this._object.__ks_func_name_13() === __ks_class_1);
		}
		listAssignments() {
			return this.__ks_func_listAssignments_rt.call(null, this, this, arguments);
		}
		__ks_func_listAssignments_5(array) {
			return array;
		}
		__ks_func_listAssignments_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listAssignments_5.call(that, args[0]);
				}
			}
			if(super.__ks_func_listAssignments_rt) {
				return super.__ks_func_listAssignments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			this._object.listNonLocalVariables(scope, variables);
			if(this._computed) {
				this._property.listNonLocalVariables(scope, variables);
			}
			return variables;
		}
		path() {
			return this.__ks_func_path_rt.call(null, this, this, arguments);
		}
		__ks_func_path_1() {
			return this._path;
		}
		__ks_func_path_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_path_1.call(that);
			}
			if(super.__ks_func_path_rt) {
				return super.__ks_func_path_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_releaseReusable_1() {
			if(this._object.isCallable() === true) {
				this._object.releaseReusable();
			}
			if(this._computed && !this._stringProperty && (this._property.isCallable() === true)) {
				this._property.releaseReusable();
			}
		}
		__ks_func_setAssignment_0(assignment) {
			this._assignment = assignment;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_44(fragments, mode) {
			if((this.__ks_func_isNullable_0() === true) && !this._tested) {
				fragments.wrapNullable(this).code(" ? ").compile(this._object);
				if(this._computed) {
					fragments.code("[").compile(this._property).code("] : null");
				}
				else {
					fragments.code($dot).compile(this._property).code(" : null");
				}
			}
			else {
				const type = this._object.type();
				if(this._usingGetter) {
					if(this._sealed) {
						const name = (this._property[0] === "_") ? this._property.substr(1) : this._property;
						fragments.code(KSHelper.concatString(type.type().getSealedName(), ".__ks_get_", name, "(")).compile(this._object).code(")");
					}
					else {
						NotImplementedException.__ks_sttc_throw_0([this]);
					}
				}
				else if(this._prepareObject && (this._type.__ks_func_isMethod_0() === true) && !KSType.isClassInstance(this._parent, UnaryOperatorExpression)) {
					fragments.code(KSHelper.concatString($runtime.helper.__ks_0(this), ".bindMethod("));
					if((this._object.isComputed() === true) || (KSHelper.valueOf(this._object._data.kind) === NodeKind.NumericExpression.value)) {
						fragments.compile(this._object);
					}
					else if((type.isNamespace() === true) && (type.isSealed() === true) && (type.type().isSealedProperty(this._property) === true)) {
						fragments.code(type.getSealedName());
					}
					else {
						fragments.compile(this._object);
					}
					fragments.code($comma);
					if(this._computed) {
						fragments.compile(this._property);
					}
					else {
						fragments.code("\"").compile(this._property).code("\"");
					}
					fragments.code(")");
				}
				else {
					if((this._object.isComputed() === true) || (KSHelper.valueOf(this._object._data.kind) === NodeKind.NumericExpression.value)) {
						fragments.code("(").compile(this._object).code(")");
					}
					else if((type.isNamespace() === true) && (type.isSealed() === true) && (type.type().isSealedProperty(this._property) === true)) {
						fragments.code(type.getSealedName());
					}
					else {
						fragments.compile(this._object);
					}
					if(this._computed) {
						fragments.code("[").compile(this._property).code("]");
					}
					else {
						fragments.code($dot).compile(this._property);
					}
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_44.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toBooleanFragments_7(fragments, mode, junction) {
			if((this.__ks_func_isNullable_0() === true) && !this._tested) {
				if(this._computed) {
					fragments.compileNullable(this).code(" ? ").compile(this._object).code("[").compile(this._property).code("]");
				}
				else {
					fragments.compileNullable(this).code(" ? ").compile(this._object).code($dot).compile(this._property);
				}
				if(!(this._type.__ks_func_isBoolean_0() === true) || (this._type.__ks_func_isNullable_0() === true)) {
					fragments.code(" === true");
				}
				fragments.code(" : false");
			}
			else {
				if(this._computed) {
					fragments.wrap(this._object).code("[").compile(this._property).code("]");
				}
				else {
					fragments.wrap(this._object).code($dot).compile(this._property);
				}
				if(!(this._type.__ks_func_isBoolean_0() === true) || (this._type.__ks_func_isNullable_0() === true)) {
					fragments.code(" === true");
				}
			}
		}
		__ks_func_toBooleanFragments_5(fragments, mode, junction) {
			return this.__ks_func_toBooleanFragments_7(fragments, mode, junction);
		}
		__ks_func_toBooleanFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toBooleanFragments_7.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_toBooleanFragments_rt.call(null, that, Expression.prototype, args);
		}
		__ks_func_toNullableFragments_0(fragments) {
			if(!this._tested) {
				this._tested = true;
				let conditional = false;
				if(this._object.isNullable() === true) {
					fragments.compileNullable(this._object);
					conditional = true;
				}
				if(this._nullable) {
					if(conditional) {
						fragments.code(" && ");
					}
					fragments.code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue(")).compileReusable(this._object).code(")");
					conditional = true;
				}
				if(this._computed && !this._stringProperty && (this._property.isNullable() === true)) {
					if(conditional) {
						fragments.code(" && ");
					}
					fragments.compileNullable(this._property);
				}
			}
		}
		__ks_func_toQuote_0() {
			let fragments = this._object.toQuote();
			if(this._nullable) {
				fragments = KSHelper.concatString(fragments, "?");
			}
			if(this._computed) {
				if(this._stringProperty) {
					fragments = KSHelper.concatString(fragments, KSHelper.concatString("[", this._property, "]"));
				}
				else {
					fragments = KSHelper.concatString(fragments, KSHelper.concatString("[", this._property.toQuote(), "]"));
				}
			}
			else {
				fragments = KSHelper.concatString(fragments, KSHelper.concatString(".", this._property));
			}
			return fragments;
		}
		__ks_func_toReusableFragments_0(fragments) {
			const objectCallable = this._object.isCallable();
			if(objectCallable === true) {
				fragments.code("(").compileReusable(this._object).code(", ").compile(this._object);
			}
			else {
				fragments.wrap(this._object);
			}
			if(this._computed) {
				if(!this._stringProperty && (this._property.isCallable() === true)) {
					fragments.code("[").compileReusable(this._property).code("]");
				}
				else {
					fragments.code("[").compile(this._property).code("]");
				}
			}
			else {
				fragments.code($dot).compile(this._property);
			}
			if(objectCallable === true) {
				fragments.code(")");
			}
		}
		toSetterFragments() {
			return this.__ks_func_toSetterFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toSetterFragments_0(fragments, value) {
			if(this._sealed) {
				const name = (this._property[0] === "_") ? this._property.substr(1) : this._property;
				fragments.code(KSHelper.concatString(this._object.type().type().getSealedName(), ".__ks_set_", name, "(")).compile(this._object).code($comma).compile(value).code(")");
			}
			else {
				NotImplementedException.__ks_sttc_throw_0([this]);
			}
		}
		__ks_func_toSetterFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toSetterFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toSetterFragments_rt) {
				return super.__ks_func_toSetterFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class OmittedExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(OmittedExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(OmittedExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(OmittedExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRedeclared() {
			return this.__ks_func_isRedeclared_rt.call(null, this, this, arguments);
		}
		__ks_func_isRedeclared_7() {
			return false;
		}
		__ks_func_isRedeclared_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRedeclared_7.call(that);
			}
			if(super.__ks_func_isRedeclared_rt) {
				return super.__ks_func_isRedeclared_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listAssignments() {
			return this.__ks_func_listAssignments_rt.call(null, this, this, arguments);
		}
		__ks_func_listAssignments_6(array) {
			return array;
		}
		__ks_func_listAssignments_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listAssignments_6.call(that, args[0]);
				}
			}
			if(super.__ks_func_listAssignments_rt) {
				return super.__ks_func_listAssignments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_setAssignment_1(__ks_0) {
		}
		__ks_func_setAssignment_0(assignment) {
			return this.__ks_func_setAssignment_1([]);
		}
		__ks_func_setAssignment_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return proto.__ks_func_setAssignment_1.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			return super.__ks_func_setAssignment_rt.call(null, that, Expression.prototype, args);
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_45(fragments) {
			if(this._data.spread === true) {
				fragments.code("...");
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toFragments_45.call(that, args[0]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class RegularExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(RegularExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(RegularExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(RegularExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isUsingVariable_1(name) {
			return false;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_46(fragments, mode) {
			fragments.code(this._data.value);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_46.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("RegExp");
		}
	}
	class SequenceExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(SequenceExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(SequenceExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(SequenceExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._expressions = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._data.expressions.length, expression; __ks_0 < __ks_1; ++__ks_0) {
				expression = this._data.expressions[__ks_0];
				this._expressions.push(expression = $compile.expression(expression, this));
				expression.analyse();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			for(let __ks_0 = 0, __ks_1 = this._expressions.length, expression; __ks_0 < __ks_1; ++__ks_0) {
				expression = this._expressions[__ks_0];
				expression.__ks_func_prepare_0();
			}
			this._last = this._expressions.length - 1;
			this._type = this._expressions[this._last].__ks_func_type_22();
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._expressions.length, expression; __ks_0 < __ks_1; ++__ks_0) {
				expression = this._expressions[__ks_0];
				expression.__ks_func_translate_0();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isUsingVariable_1(name) {
			for(let __ks_0 = 0, __ks_1 = this._expressions.length, expression; __ks_0 < __ks_1; ++__ks_0) {
				expression = this._expressions[__ks_0];
				if(expression.__ks_func_isUsingVariable_1(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			for(let __ks_0 = 0, __ks_1 = this._expressions.length, expression; __ks_0 < __ks_1; ++__ks_0) {
				expression = this._expressions[__ks_0];
				expression.__ks_func_listNonLocalVariables_1(scope, variables);
			}
			return variables;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_47(fragments, mode) {
			fragments.code("(");
			for(let index = 0, __ks_0 = this._expressions.length, expression; index < __ks_0; ++index) {
				expression = this._expressions[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(expression);
			}
			fragments.code(")");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_47.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toBooleanFragments_8(fragments, mode, junction) {
			fragments.code("(");
			for(let index = 0, __ks_0 = Math.min(this._expressions.length, this._last), expression; index < __ks_0; ++index) {
				expression = this._expressions[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(expression);
			}
			fragments.code($comma).compileBoolean(this._expressions[this._last]);
			fragments.code(")");
		}
		__ks_func_toBooleanFragments_5(fragments, mode, junction) {
			return this.__ks_func_toBooleanFragments_8(fragments, mode, junction);
		}
		__ks_func_toBooleanFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toBooleanFragments_8.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_toBooleanFragments_rt.call(null, that, Expression.prototype, args);
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class TemplateExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(TemplateExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(TemplateExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(TemplateExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._computing = false;
			this._elements = [];
			this._isString = true;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._data.elements.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.elements[__ks_0];
				const element = $compile.expression(data, this, void 0);
				element.analyse();
				this._elements.push(element);
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			for(let index = 0, __ks_0 = this._elements.length, element; index < __ks_0; ++index) {
				element = this._elements[index];
				element.prepare();
				if(this._isString) {
					const type = element.type();
					if(!(type.isString() === true) || (type.isNullable() === true)) {
						this._isString = false;
					}
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		computing() {
			return this.__ks_func_computing_rt.call(null, this, this, arguments);
		}
		__ks_func_computing_0(computing) {
			this._computing = computing;
		}
		__ks_func_computing_rt(that, proto, args) {
			const t0 = KSType.isBoolean;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_computing_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_computing_rt) {
				return super.__ks_func_computing_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isUsingVariable_1(name) {
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				if(element.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isComputed_0() {
			return (this._elements.length > 1) || !this._isString;
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.listNonLocalVariables(scope, variables);
			}
			return variables;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_48(fragments, mode) {
			if(this._elements.length === 0) {
				fragments.code("\"\"");
			}
			else if(this._elements.length === 1) {
				if(this._computing) {
					fragments.wrap(this._elements[0]);
				}
				else if(this._isString) {
					this._elements[0].toStringFragments(fragments);
				}
				else {
					fragments.code($runtime.helper.__ks_0(this), ".toString(").compile(this._elements[0]).code(")");
				}
			}
			else if(this._isString) {
				this._elements[0].toStringFragments(fragments);
				for(let __ks_0 = 1, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					fragments.code(" + ").wrap(element);
				}
			}
			else {
				fragments.code($runtime.helper.__ks_0(this), ".concatString(").wrap(this._elements[0]);
				for(let index = 1, __ks_0 = this._elements.length, element; index < __ks_0; ++index) {
					element = this._elements[index];
					fragments.code(", ").wrap(element);
				}
				fragments.code(")");
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_48.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("String");
		}
	}
	class ThisExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(ThisExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ThisExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ThisExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._assignable = false;
			this._assignment = AssignmentType.Neither;
			this._calling = false;
			this._composite = false;
			this._immutable = false;
			this._instance = true;
			this._lateInit = false;
			this._namesake = false;
			this._sealed = false;
			this._type = null;
			this._variableName = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._name = this._data.name.name;
			let parent = this._parent;
			let __ks_0;
			do {
				if(KSType.isClassInstance(parent, CallExpression) && (parent.__ks_func_data_0().callee === this._data)) {
					this._calling = true;
				}
				else if(KSType.isClassInstance(parent, ClassMethodDeclaration) || KSType.isClassInstance(parent, ClassVariableDeclaration)) {
					this._instance = KSType.isClassInstance(parent, ClassMethodDeclaration) ? parent.__ks_func_isInstance_2() : parent.__ks_func_isInstance_0();
					this._class = parent.__ks_func_parent_0().type();
					this._declaration = parent.__ks_func_parent_0();
					if(KSType.isClassInstance(parent, ClassMethodDeclaration) && (parent.__ks_func_parameters_2().length === 0)) {
						if(parent.__ks_func_name_2() === this._name) {
							this._namesake = true;
						}
					}
					break;
				}
				else if(KSType.isClassInstance(parent, ClassConstructorDeclaration) || KSType.isClassInstance(parent, ClassDestructorDeclaration)) {
					this._class = parent.__ks_func_parent_0().type();
					this._declaration = parent.__ks_func_parent_0();
					break;
				}
				else if(KSType.isClassInstance(parent, ImplementClassMethodDeclaration)) {
					if(!(parent.__ks_func_isInstance_4() === true)) {
						SyntaxException.__ks_sttc_throwUnexpectedAlias_0(this._name, this);
					}
					this._class = parent.__ks_func_class_1();
					this._declaration = parent.__ks_func_parent_0();
					break;
				}
				else if(KSType.isClassInstance(parent, ImplementClassConstructorDeclaration)) {
					this._class = parent.__ks_func_class_2();
					this._declaration = parent.__ks_func_parent_0();
					break;
				}
			}
			while(KSType.isValue(__ks_0 = parent.__ks_func_parent_0()) ? (parent = __ks_0, true) : false)
			if(!KSType.isValue(this._class)) {
				SyntaxException.__ks_sttc_throwUnexpectedAlias_0(this._name, this);
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(!(this._type === null)) {
				return;
			}
			const type = this._class.__ks_func_type_0();
			if(this._instance) {
				const name = this._scope.__ks_func_getVariable_0("this").__ks_func_getSecureName_0();
				if(this._calling) {
					let variable = null;
					let __ks_0;
					if(KSType.isValue(__ks_0 = type.getInstanceVariable(this._name)) ? (variable = __ks_0, true) : false) {
						this._variableName = this._name;
						this._fragment = KSHelper.concatString(name, ".", this._variableName);
					}
					else if(KSType.isValue(__ks_0 = type.getInstanceVariable("_" + this._name)) ? (variable = __ks_0, true) : false) {
						this._variableName = "_" + this._name;
						if((variable.isSealed() === true) && (variable.hasDefaultValue() === true) && (this._assignment === AssignmentType.Neither)) {
							this._fragment = KSHelper.concatString(this._class.__ks_func_getSealedName_0(), ".__ks_get_", this._name, "(", name, ")");
						}
						else {
							this._fragment = KSHelper.concatString(name, ".", this._variableName);
						}
					}
					if(KSType.isValue(variable)) {
						this._type = KSType.isValue(__ks_0 = this._scope.getChunkType(this._fragment)) ? __ks_0 : variable.type();
						if(this._type.__ks_func_canBeFunction_0()) {
							this._immutable = variable.isImmutable();
							this._sealed = variable.isSealed();
							this._lateInit = !this._immutable && (variable.isLateInit() === true);
						}
						else {
							this._type = null;
							this._variableName = null;
							this._fragment = "";
						}
					}
					if(!KSType.isValue(this._variableName)) {
						if(type.hasInstantiableMethod(this._name) === true) {
							const assessment = type.getInstantiableAssessment(this._name, this);
							let result = Router.matchArguments(assessment, this._parent.arguments(), this);
							if(KSType.isValue(result)) {
								this._fragment = KSHelper.concatString(name, ".", this._name);
								if(KSType.isStructInstance(result, PreciseCallMatchResult)) {
									this._type = Type.union(this._scope, ...KSHelper.mapArray(result.matches, function(match) {
										return match.function;
									}));
								}
								else {
									this._type = Type.union(this._scope, ...result.possibilities);
								}
							}
							else if(type.isExhaustive(this) === true) {
								ReferenceException.throwNoMatchingClassMethod(this._name, this._class.__ks_func_name_0(), KSHelper.mapArray(this._parent.arguments(), function(argument) {
									return argument.type();
								}), this);
							}
							else {
								this._fragment = KSHelper.concatString(name, ".", this._name);
								this._type = KSType.isValue(__ks_0 = this._scope.getChunkType(this._fragment)) ? __ks_0 : Type.union.apply(Type, [].concat([this._scope], type.listInstantiableMethods(this._name)));
							}
						}
						else {
							ReferenceException.__ks_sttc_throwUndefinedInstanceField_0(this._name, this);
						}
					}
				}
				else {
					let variable = null;
					let __ks_0;
					if(KSType.isValue(__ks_0 = type.getInstanceVariable(this._name)) ? (variable = __ks_0, true) : false) {
						this._variableName = this._name;
						this._fragment = KSHelper.concatString(name, ".", this._variableName);
					}
					else if(KSType.isValue(__ks_0 = type.getInstanceVariable("_" + this._name)) ? (variable = __ks_0, true) : false) {
						this._variableName = "_" + this._name;
						if((variable.isSealed() === true) && (variable.hasDefaultValue() === true) && (this._assignment === AssignmentType.Neither)) {
							this._fragment = KSHelper.concatString(this._class.__ks_func_getSealedName_0(), ".__ks_get_", this._name, "(", name, ")");
						}
						else {
							this._fragment = KSHelper.concatString(name, ".", this._variableName);
						}
					}
					if(KSType.isValue(variable)) {
						this._type = KSType.isValue(__ks_0 = this._scope.getChunkType(this._fragment)) ? __ks_0 : variable.type();
						this._immutable = variable.isImmutable();
						this._sealed = variable.isSealed();
						this._lateInit = !this._immutable && (variable.isLateInit() === true);
					}
					else if(type.hasInstantiableMethod(this._name) === true) {
						this._type = Type.union.apply(Type, [].concat([this._scope], type.listInstantiableMethods(this._name)));
						this._fragment = KSHelper.concatString($runtime.helper.__ks_0(this), ".bindMethod(", name, ", \"", this._name, "\")");
					}
					else if(type.isExhaustive(this) === true) {
						if(this._assignable) {
							ReferenceException.__ks_sttc_throwInvalidAssignment_0(this);
						}
						else {
							ReferenceException.__ks_sttc_throwNotDefinedProperty_0(this._name, this);
						}
					}
					else {
						ReferenceException.__ks_sttc_throwUndefinedInstanceField_0(this._name, this);
					}
				}
			}
			else {
				const name = this._class.__ks_func_name_0();
				if(this._calling) {
					NotImplementedException.__ks_sttc_throw_0([this]);
				}
				else {
					let variable = null;
					let __ks_0;
					if(KSType.isValue(__ks_0 = type.getClassVariable(this._name)) ? (variable = __ks_0, true) : false) {
						this._variableName = this._name;
					}
					else if(KSType.isValue(__ks_0 = type.getClassVariable("_" + this._name)) ? (variable = __ks_0, true) : false) {
						this._variableName = "_" + this._name;
					}
					else {
						ReferenceException.__ks_sttc_throwUndefinedClassField_0(this._name, this);
					}
					if(KSType.isValue(variable)) {
						this._fragment = KSHelper.concatString(name, ".", this._variableName);
						this._type = KSType.isValue(__ks_0 = this._scope.getChunkType(this._fragment)) ? __ks_0 : variable.type();
						this._immutable = variable.isImmutable();
						this._sealed = variable.isSealed();
					}
					else {
						ReferenceException.__ks_sttc_throwUndefinedClassField_0(this._name, this);
					}
				}
			}
			if(this._assignable) {
				let variable = this.__ks_func_declaration_1();
				if(KSType.isValue(variable)) {
					if(variable.isImmutable() === true) {
						if(variable.isLateInit() === true) {
							if(variable.isInitialized() === true) {
								ReferenceException.__ks_sttc_throwImmutable_1(this);
							}
						}
						else {
							ReferenceException.__ks_sttc_throwImmutable_1(this);
						}
					}
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		declaration() {
			return this.__ks_func_declaration_rt.call(null, this, this, arguments);
		}
		__ks_func_declaration_1() {
			let node = this._parent.__ks_func_getFunctionNode_0();
			if(KSType.isValue(node)) {
				if(KSType.isClassInstance(node, ClassConstructorDeclaration)) {
					return node.__ks_func_parent_0().getInstanceVariable(this._variableName);
				}
			}
			return null;
		}
		__ks_func_declaration_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_declaration_1.call(that);
			}
			if(super.__ks_func_declaration_rt) {
				return super.__ks_func_declaration_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_flagAssignable_0() {
			this._assignable = true;
		}
		fragment() {
			return this.__ks_func_fragment_rt.call(null, this, this, arguments);
		}
		__ks_func_fragment_0() {
			return this._fragment;
		}
		__ks_func_fragment_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_fragment_0.call(that);
			}
			if(super.__ks_func_fragment_rt) {
				return super.__ks_func_fragment_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getClass() {
			return this.__ks_func_getClass_rt.call(null, this, this, arguments);
		}
		__ks_func_getClass_0() {
			return this._class;
		}
		__ks_func_getClass_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getClass_0.call(that);
			}
			if(super.__ks_func_getClass_rt) {
				return super.__ks_func_getClass_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getDeclaredType_0() {
			if(KSType.isValue(this._variableName)) {
				if(this._instance) {
					let variable = this._class.__ks_func_type_0().getInstanceVariable(this._variableName);
					if(KSType.isValue(variable)) {
						return variable.type();
					}
				}
				else {
					let variable = this._class.__ks_func_type_0().getClassVariable(this._variableName);
					if(KSType.isValue(variable)) {
						return variable.type();
					}
				}
			}
			return this._type;
		}
		getVariableName() {
			return this.__ks_func_getVariableName_rt.call(null, this, this, arguments);
		}
		__ks_func_getVariableName_0() {
			return this._variableName;
		}
		__ks_func_getVariableName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getVariableName_0.call(that);
			}
			if(super.__ks_func_getVariableName_rt) {
				return super.__ks_func_getVariableName_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_getUnpreparedType_1() {
			this.__ks_func_prepare_0();
			return this._type;
		}
		initializeVariables() {
			return this.__ks_func_initializeVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_initializeVariables_6(type, node) {
			if(this._variableName !== null) {
				node.initializeVariable(VariableBrief.__ks_new(this._variableName, type, void 0, this._immutable, void 0, this._instance));
			}
		}
		__ks_func_initializeVariables_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isClassInstance(value, Expression);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_initializeVariables_6.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_initializeVariables_rt) {
				return super.__ks_func_initializeVariables_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isAssignable_0() {
			return !this._calling && !this._composite;
		}
		__ks_func_isComposite_1() {
			return this._composite;
		}
		__ks_func_isExpectingType_2() {
			return true;
		}
		__ks_func_isInferable_0() {
			return !this._calling && !this._composite;
		}
		__ks_func_isLateInit_2() {
			return this._lateInit;
		}
		__ks_func_isInitializable_0() {
			return true;
		}
		isSealed() {
			return this.__ks_func_isSealed_rt.call(null, this, this, arguments);
		}
		__ks_func_isSealed_0() {
			return this._sealed;
		}
		__ks_func_isSealed_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isSealed_0.call(that);
			}
			if(super.__ks_func_isSealed_rt) {
				return super.__ks_func_isSealed_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isUsingVariable_1(name) {
			return this._instance && (name === "this");
		}
		__ks_func_isUsingInstanceVariable_1(name) {
			return this._instance && (this._variableName === name);
		}
		listAssignments() {
			return this.__ks_func_listAssignments_rt.call(null, this, this, arguments);
		}
		__ks_func_listAssignments_7(array) {
			if(this._variableName !== null) {
				array.push(this._variableName);
			}
			return array;
		}
		__ks_func_listAssignments_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listAssignments_7.call(that, args[0]);
				}
			}
			if(super.__ks_func_listAssignments_rt) {
				return super.__ks_func_listAssignments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_19() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_19.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		path() {
			return this.__ks_func_path_rt.call(null, this, this, arguments);
		}
		__ks_func_path_2() {
			return this._fragment;
		}
		__ks_func_path_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_path_2.call(that);
			}
			if(super.__ks_func_path_rt) {
				return super.__ks_func_path_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_setAssignment_0(assignment) {
			this._assignment = assignment;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_49(fragments, mode) {
			fragments.code(this._fragment);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_49.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			return "@" + this._name;
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class TryExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(TryExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(TryExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(TryExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._defaultValue = null;
			this._reusable = false;
			this._reuseName = null;
			this._unwrap = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Disabled.value) {
					this._unwrap = true;
				}
			}
			this._argument = $compile.expression(this._data.argument, this);
			this._argument.__ks_func_analyse_0();
			if(KSType.isValue(this._data.defaultValue)) {
				this._defaultValue = $compile.expression(this._data.defaultValue, this);
				this._defaultValue.__ks_func_analyse_0();
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._argument.__ks_func_prepare_0();
			if(this._unwrap && (this._argument.__ks_func_type_22().isInoperative() === true)) {
				TypeException.__ks_sttc_throwUnexpectedInoperative_0(this._argument, this);
			}
			if(this._defaultValue !== null) {
				this._defaultValue.__ks_func_prepare_0();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._argument.__ks_func_translate_0();
			if(this._defaultValue !== null) {
				this._defaultValue.__ks_func_translate_0();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_acquireReusable_1(acquire) {
			if(acquire === true) {
				this._reuseName = this._scope.__ks_func_acquireTempName_0();
			}
		}
		__ks_func_isComputed_0() {
			return true;
		}
		__ks_func_isConsumedError_0(error) {
			return true;
		}
		__ks_func_isUsingVariable_1(name) {
			return this._argument.__ks_func_isUsingVariable_1(name);
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			return this._argument.__ks_func_listNonLocalVariables_1(scope, variables);
		}
		__ks_func_releaseReusable_1() {
			if(this._reuseName !== null) {
				this._scope.releaseTempName(this._reuseName);
			}
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_50(fragments, mode) {
			if(this._reusable) {
				fragments.code(this._reuseName);
			}
			else if(this._unwrap) {
				fragments.compile(this._argument);
			}
			else {
				fragments.code($runtime.helper.__ks_0(this), ".try(");
				if(this._options.format.functions === "es5") {
					fragments.code("function(){return ").compile(this._argument).code(";}");
				}
				else {
					fragments.code("() => ").compile(this._argument);
				}
				fragments.code(", ");
				if(this._defaultValue === null) {
					fragments.code("null");
				}
				else {
					fragments.compile(this._defaultValue);
				}
				fragments.code(")");
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_50.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toBooleanFragments_9(fragments, mode, junction) {
			if(this._unwrap) {
				fragments.compileBoolean(this._argument);
			}
			else if(this._defaultValue === null) {
				fragments.code($runtime.helper.__ks_0(this), ".tryTest(");
				if(this._options.format.functions === "es5") {
					fragments.code("function(){return ").compile(this._argument).code(";}");
				}
				else {
					fragments.code("() => ").compile(this._argument);
				}
				fragments.code(")");
			}
			else {
				this.__ks_func_toFragments_50(fragments, mode);
			}
		}
		__ks_func_toBooleanFragments_5(fragments, mode, junction) {
			return this.__ks_func_toBooleanFragments_9(fragments, mode, junction);
		}
		__ks_func_toBooleanFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toBooleanFragments_9.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_toBooleanFragments_rt.call(null, that, Expression.prototype, args);
		}
		__ks_func_toReusableFragments_0(fragments) {
			fragments.code(this._reuseName, $equals).compile(this);
			this._reusable = true;
		}
		__ks_func_type_22() {
			return this._argument.__ks_func_type_22();
		}
	}
	class UnlessExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(UnlessExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(UnlessExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(UnlessExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._whenFalse = $compile.expression(this._data.whenFalse, this);
			this._whenFalse.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._condition.prepare();
			this._whenFalse.prepare();
			this._type = this._whenFalse.type().setNullable(true);
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._condition.translate();
			this._whenFalse.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isComputed_0() {
			return true;
		}
		__ks_func_isUsingVariable_1(name) {
			return (this._condition.isUsingVariable(name) === true) || (this._whenFalse.isUsingVariable(name) === true);
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			this._condition.listNonLocalVariables(scope, variables);
			this._whenFalse.listNonLocalVariables(scope, variables);
			return variables;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_51(fragments, mode) {
			fragments.wrapBoolean(this._condition).code(" ? null : ").compile(this._whenFalse);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_51.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_50(fragments, mode) {
			fragments.newControl().code("if(!").wrapBoolean(this._condition).code(")").step().line(this._whenFalse).done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_50.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class TempReusableExpression extends Expression {
		static __ks_new_0(...args) {
			const o = Object.create(TempReusableExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._count = 0;
		}
		__ks_cons_0(value, parent) {
			if(value === void 0) {
				value = null;
			}
			Expression.prototype.__ks_cons_rt.call(null, this, [new Dictionary(), parent]);
			this._value = value;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return TempReusableExpression.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isComputed_0() {
			return (this._count === 0) && (this._value.isComposite() === true);
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_52(fragments, mode) {
			if((this._count === 0) && (this._value.isComposite() === true)) {
				fragments.compileReusable(this._value);
			}
			else {
				fragments.compile(this._value);
			}
			++this._count;
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_52.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class TempMemberExpression extends Expression {
		static __ks_new_0(...args) {
			const o = Object.create(TempMemberExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._computed = false;
			this._reusable = false;
			this._reuseName = null;
		}
		__ks_cons_0(object, property, computed, parent, scope) {
			if(object === void 0) {
				object = null;
			}
			if(property === void 0) {
				property = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			if(scope === void 0) {
				scope = null;
			}
			Expression.prototype.__ks_cons_1.call(this, new Dictionary(), parent, scope);
			this._object = object;
			this._property = property;
			this._computed = computed;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isBoolean;
			const t2 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			const t3 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			if(args.length === 5) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3]) && t3(args[4])) {
					return TempMemberExpression.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_acquireReusable_1(acquire) {
			if(acquire === true) {
				this._reuseName = this._scope.__ks_func_acquireTempName_0();
			}
		}
		__ks_func_isComposite_1() {
			return true;
		}
		__ks_func_releaseReusable_1() {
			if(KSType.isValue(this._reuseName)) {
				this._scope.releaseTempName(this._reuseName);
			}
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_53(fragments, mode) {
			if(this._reusable) {
				fragments.code(this._reuseName);
			}
			else if(this._computed) {
				fragments.compile(this._object).code("[").compile(this._property).code("]");
			}
			else {
				fragments.compile(this._object).code(".").compile(this._property);
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_53.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toReusableFragments_0(fragments) {
			fragments.code(this._reuseName, $equals).compile(this);
			this._reusable = true;
		}
	}
	const ParameterMode = KSHelper.enum(Number, {
		ArrowFunction: 0,
		AsyncFunction: 1,
		Default: 2,
		HelperConstructor: 3,
		HybridConstructor: 4,
		OverloadedFunction: 5
	});
	const ParameterWrongDoing = KSHelper.enum(Number, {
		BadType: 0,
		NotNullable: 1
	});
	class Parameter extends AbstractNode {
		static __ks_new_0(...args) {
			const o = Object.create(Parameter.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._anonymous = false;
			this._arity = null;
			this._comprehensive = true;
			this._defaultValue = null;
			this._explicitlyRequired = false;
			this._hasDefaultValue = false;
			this._header = false;
			this._maybeHeadedDefaultValue = false;
			this._rest = false;
		}
		__ks_cons_0(data, parent, scope = parent.__ks_func_scope_0()) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			AbstractNode.prototype.__ks_cons_1.call(this, data, parent, scope);
			this._options = Attribute.configure(data, parent._options, AttributeTarget.Parameter, super.__ks_func_file_0());
			this._preserved = this._options.parameters.preserve;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return Parameter.prototype.__ks_cons_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._anonymous = !KSType.isValue(this._data.name);
			let immutable = true;
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Mutable.value) {
					immutable = false;
				}
			}
			if(this._anonymous) {
				this._name = AnonymousParameter.__ks_new_1(this._data, this);
			}
			else {
				this._name = Parameter.compileExpression(this._data.name, this);
				this._name.setAssignment(AssignmentType.Parameter);
				this._name.analyse();
				for(let __ks_0 = 0, __ks_1 = this._name.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
					name = __ks_1[__ks_0];
					if(this._scope.hasDefinedVariable(name)) {
						SyntaxException.throwAlreadyDeclared(name, this);
					}
					this._scope.define(name, immutable, null, this);
				}
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._name.prepare();
			let type = this._name.type();
			if(!(KSType.isValue(type) ? type.__ks_func_isExplicit_0() === true : false)) {
				type = null;
			}
			if(KSType.isValue(this._data.type)) {
				const declaredType = Type.__ks_sttc_fromAST_0(this._data.type, this);
				if(!KSType.isValue(type) || ((type.__ks_func_isObject_0() === true) && (declaredType.__ks_func_isDictionary_0() === true)) || declaredType.__ks_func_isMorePreciseThan_0(type)) {
					type = declaredType;
				}
			}
			if(type === null) {
				type = AnyType.Unexplicit;
			}
			else if(type.__ks_func_isNull_0() === true) {
				type = NullType.Explicit;
			}
			let min = 1;
			let max = 1;
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Rest.value) {
					this._rest = true;
					if(KSType.isValue(modifier.arity)) {
						this._arity = modifier.arity;
						min = modifier.arity.min;
						max = modifier.arity.max;
					}
					else {
						min = 0;
						max = Infinity;
					}
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Required.value) {
					this._explicitlyRequired = true;
				}
			}
			if(KSType.isValue(this._data.defaultValue)) {
				if((KSHelper.valueOf(this._data.defaultValue.kind) === NodeKind.Identifier.value) && (this._data.defaultValue.name === "null")) {
					if(!(type.__ks_func_isNullable_0() === true)) {
						type = type.__ks_func_setNullable_0(true);
					}
				}
				else if(this._explicitlyRequired && (type.__ks_func_isNullable_0() === true)) {
					SyntaxException.__ks_sttc_throwDeadCodeParameter_0(this);
				}
				if(!(this._explicitlyRequired && (type.__ks_func_isNullable_0() === true))) {
					this._maybeHeadedDefaultValue = (this._options.format.parameters === "es6") && ((type.__ks_func_isNullable_0() === true) || (this._name.isBinding() === true));
					this._defaultValue = $compile.expression(this._data.defaultValue, this._parent);
					this._defaultValue.analyse();
					this._hasDefaultValue = true;
					if(!this._explicitlyRequired) {
						min = 0;
					}
				}
			}
			const name = this._name.name();
			this._type = ParameterType.__ks_new_1(this._scope, name, type, min, max, this._hasDefaultValue);
			if(this._hasDefaultValue && (this._parent.isOverridableFunction() === true)) {
				const scope = this._parent.__ks_func_scope_0();
				this._comprehensive = !(this._defaultValue.isUsingNonLocalVariables(scope) === true);
				if(this._comprehensive) {
					this._type.__ks_func_setDefaultValue_0(this._data.defaultValue, true);
				}
				else {
					const variables = KSHelper.mapArray(this._defaultValue.listLocalVariables(scope, []), function(variable) {
						return variable.name();
					});
					const name = this._parent.addIndigentValue(this._defaultValue, variables);
					const call = KSHelper.concatString(name, "(", variables.join(", "), ")");
					this._type.__ks_func_setDefaultValue_0(call, false);
					this._defaultValue = Literal.__ks_new_0(KSHelper.concatString(this._parent.getOverridableVarname(), ".", call), this._parent);
				}
			}
			type = this._type.__ks_func_getVariableType_0();
			this._name.setDeclaredType(this._rest ? Type.arrayOf(type, this._scope) : type, true);
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._name.translate();
			if(this._hasDefaultValue) {
				this._defaultValue.prepare();
				this._defaultValue.translate();
				if(!(this._defaultValue.type().isAssignableToVariable(this._name.getDeclaredType(), true, true, false) === true)) {
					TypeException.throwInvalidAssignement(this._name, this._name.getDeclaredType(), this._defaultValue.type(), this);
				}
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addAliasParameter() {
			return this.__ks_func_addAliasParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_addAliasParameter_0(expression) {
			const alias = AliasStatement.__ks_new_0(expression, this);
			return this._scope.reference(alias.__ks_func_type_32());
		}
		__ks_func_addAliasParameter_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ThisExpressionParameter);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addAliasParameter_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_addAliasParameter_rt) {
				return super.__ks_func_addAliasParameter_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		arity() {
			return this.__ks_func_arity_rt.call(null, this, this, arguments);
		}
		__ks_func_arity_0() {
			return this._arity;
		}
		__ks_func_arity_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_arity_0.call(that);
			}
			if(super.__ks_func_arity_rt) {
				return super.__ks_func_arity_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getReturnType() {
			return this.__ks_func_getReturnType_rt.call(null, this, this, arguments);
		}
		__ks_func_getReturnType_0() {
			return this._type.getReturnType();
		}
		__ks_func_getReturnType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getReturnType_0.call(that);
			}
			if(super.__ks_func_getReturnType_rt) {
				return super.__ks_func_getReturnType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasDefaultValue() {
			return this.__ks_func_hasDefaultValue_rt.call(null, this, this, arguments);
		}
		__ks_func_hasDefaultValue_2() {
			return this._hasDefaultValue;
		}
		__ks_func_hasDefaultValue_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasDefaultValue_2.call(that);
			}
			if(super.__ks_func_hasDefaultValue_rt) {
				return super.__ks_func_hasDefaultValue_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAnonymous() {
			return this.__ks_func_isAnonymous_rt.call(null, this, this, arguments);
		}
		__ks_func_isAnonymous_1() {
			return this._anonymous;
		}
		__ks_func_isAnonymous_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAnonymous_1.call(that);
			}
			if(super.__ks_func_isAnonymous_rt) {
				return super.__ks_func_isAnonymous_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameter() {
			return this.__ks_func_isAssertingParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameter_11() {
			return this._parent.isAssertingParameter();
		}
		__ks_func_isAssertingParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameter_11.call(that);
			}
			if(super.__ks_func_isAssertingParameter_rt) {
				return super.__ks_func_isAssertingParameter_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameterType() {
			return this.__ks_func_isAssertingParameterType_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameterType_11() {
			return this._parent.isAssertingParameterType();
		}
		__ks_func_isAssertingParameterType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameterType_11.call(that);
			}
			if(super.__ks_func_isAssertingParameterType_rt) {
				return super.__ks_func_isAssertingParameterType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isComprehensive() {
			return this.__ks_func_isComprehensive_rt.call(null, this, this, arguments);
		}
		__ks_func_isComprehensive_0() {
			return this._comprehensive;
		}
		__ks_func_isComprehensive_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isComprehensive_0.call(that);
			}
			if(super.__ks_func_isComprehensive_rt) {
				return super.__ks_func_isComprehensive_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isPreserved() {
			return this.__ks_func_isPreserved_rt.call(null, this, this, arguments);
		}
		__ks_func_isPreserved_0() {
			return this._preserved;
		}
		__ks_func_isPreserved_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isPreserved_0.call(that);
			}
			if(super.__ks_func_isPreserved_rt) {
				return super.__ks_func_isPreserved_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRequired() {
			return this.__ks_func_isRequired_rt.call(null, this, this, arguments);
		}
		__ks_func_isRequired_1() {
			return (this._defaultValue === null) || this._explicitlyRequired;
		}
		__ks_func_isRequired_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRequired_1.call(that);
			}
			if(super.__ks_func_isRequired_rt) {
				return super.__ks_func_isRequired_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isRest() {
			return this.__ks_func_isRest_rt.call(null, this, this, arguments);
		}
		__ks_func_isRest_1() {
			return this._rest;
		}
		__ks_func_isRest_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isRest_1.call(that);
			}
			if(super.__ks_func_isRest_rt) {
				return super.__ks_func_isRest_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isUsingVariable() {
			return this.__ks_func_isUsingVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isUsingVariable_2(name) {
			return this._hasDefaultValue && (this._defaultValue.isUsingVariable(name) === true);
		}
		__ks_func_isUsingVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isUsingVariable_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_isUsingVariable_rt) {
				return super.__ks_func_isUsingVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		max() {
			return this.__ks_func_max_rt.call(null, this, this, arguments);
		}
		__ks_func_max_1() {
			return (KSType.isValue(this._arity) && KSType.isValue(this._arity.max)) ? this._arity.max : 1;
		}
		__ks_func_max_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_max_1.call(that);
			}
			if(super.__ks_func_max_rt) {
				return super.__ks_func_max_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		min() {
			return this.__ks_func_min_rt.call(null, this, this, arguments);
		}
		__ks_func_min_1() {
			return (KSType.isValue(this._arity) && KSType.isValue(this._arity.min)) ? this._arity.min : 1;
		}
		__ks_func_min_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_min_1.call(that);
			}
			if(super.__ks_func_min_rt) {
				return super.__ks_func_min_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setDefaultValue() {
			return this.__ks_func_setDefaultValue_rt.call(null, this, this, arguments);
		}
		__ks_func_setDefaultValue_0(data) {
			this._defaultValue = $compile.expression(data, this._parent);
			this._defaultValue.analyse();
			this._hasDefaultValue = true;
			this._type.__ks_func_setDefaultValue_0(data);
		}
		__ks_func_setDefaultValue_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setDefaultValue_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_setDefaultValue_rt) {
				return super.__ks_func_setDefaultValue_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_54(fragments, mode) {
			fragments.compile(this._name);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_54.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toAfterRestFragments() {
			return this.__ks_func_toAfterRestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toAfterRestFragments_0(fragments, context, index, wrongdoer) {
			this._name.toAfterRestFragments(fragments, context, index, wrongdoer, this._rest, this._arity, this.__ks_func_isRequired_1(), this._defaultValue, this._header && this._maybeHeadedDefaultValue, this._parent.type().isAsync());
		}
		__ks_func_toAfterRestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
					return proto.__ks_func_toAfterRestFragments_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_toAfterRestFragments_rt) {
				return super.__ks_func_toAfterRestFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toBeforeRestFragments() {
			return this.__ks_func_toBeforeRestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toBeforeRestFragments_0(fragments, context, index, rest, wrongdoer) {
			this._name.toBeforeRestFragments(fragments, context, index, wrongdoer, rest, this._arity, this.__ks_func_isRequired_1(), this._defaultValue, this._header && this._maybeHeadedDefaultValue, this._parent.type().isAsync());
		}
		__ks_func_toBeforeRestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 5) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4])) {
					return proto.__ks_func_toBeforeRestFragments_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			if(super.__ks_func_toBeforeRestFragments_rt) {
				return super.__ks_func_toBeforeRestFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toErrorFragments() {
			return this.__ks_func_toErrorFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toErrorFragments_0(fragments, async) {
			this._name.toErrorFragments(fragments, async);
		}
		__ks_func_toErrorFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toErrorFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toErrorFragments_rt) {
				return super.__ks_func_toErrorFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toParameterFragments() {
			return this.__ks_func_toParameterFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toParameterFragments_0(fragments) {
			this._name.toParameterFragments(fragments);
			if(this._maybeHeadedDefaultValue) {
				fragments.code($equals).compile(this._defaultValue);
			}
			this._header = true;
		}
		__ks_func_toParameterFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toParameterFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toParameterFragments_rt) {
				return super.__ks_func_toParameterFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toQuote() {
			return this.__ks_func_toQuote_rt.call(null, this, this, arguments);
		}
		__ks_func_toQuote_2() {
			return this._type.__ks_func_toQuote_0();
		}
		__ks_func_toQuote_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toQuote_2.call(that);
			}
			if(super.__ks_func_toQuote_rt) {
				return super.__ks_func_toQuote_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toValidationFragments() {
			return this.__ks_func_toValidationFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toValidationFragments_0(fragments) {
			if(this._rest) {
				if(this._hasDefaultValue) {
					const ctrl = fragments.newControl().code("if(").compile(this).code(".length === 0)").step();
					ctrl.newLine().compile(this).code($equals).compile(this._defaultValue).done();
					ctrl.done();
				}
			}
			else {
				this._name.toValidationFragments(fragments, this._rest, this._defaultValue, this._header && this._maybeHeadedDefaultValue, this._parent.type().isAsync());
			}
		}
		__ks_func_toValidationFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toValidationFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toValidationFragments_rt) {
				return super.__ks_func_toValidationFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_30() {
			return this._type;
		}
		__ks_func_type_31(type) {
			this._type = type;
			if(this._type.__ks_func_hasDefaultValue_1() === true) {
				if(this._type.__ks_func_isComprehensive_0() === true) {
					this._defaultValue = $compile.expression(this._type.__ks_func_getDefaultValue_0(), this._parent);
					this._defaultValue.analyse();
					this._defaultValue.prepare();
				}
				else {
					this._defaultValue = Literal.__ks_new_0(KSHelper.concatString(this._parent.getOverridableVarname(), ".", this._type.__ks_func_getDefaultValue_0()), this._parent);
				}
				this._hasDefaultValue = true;
			}
			else {
				this._hasDefaultValue = false;
			}
			const t = this._type.__ks_func_getVariableType_0();
			this._name.setDeclaredType(this._rest ? Type.arrayOf(t, this._scope) : t, true);
		}
		__ks_func_type_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ParameterType);
			if(args.length === 0) {
				return proto.__ks_func_type_30.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_type_31.call(that, args[0]);
				}
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_compileExpression_0(data, node) {
			let __ks_0 = data.kind.valueOf();
			if(__ks_0 === NodeKind.ArrayBinding.value) {
				return new ArrayBindingParameter(data, node);
			}
			else if(__ks_0 === NodeKind.Identifier.value) {
				return IdentifierParameter.__ks_new_0(data, node);
			}
			else if(__ks_0 === NodeKind.ObjectBinding.value) {
				return new ObjectBindingParameter(data, node);
			}
			else if(__ks_0 === NodeKind.ThisExpression.value) {
				return new ThisExpressionParameter(data, node);
			}
		}
		static compileExpression() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return Parameter.__ks_sttc_compileExpression_0(arguments[0], arguments[1]);
				}
			}
			if(AbstractNode.compileExpression) {
				return AbstractNode.compileExpression.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_getUntilDifferentTypeIndex_0(parameters, index) {
			const activeType = parameters[index].type().type().setNullable(false);
			for(let i = KSOperator.addOrConcat(index, 1), __ks_0 = parameters.length, parameter; i < __ks_0; ++i) {
				parameter = parameters[i];
				const type = parameter.type();
				if(type.min() === 0) {
					if(!(activeType.equals(type.type().setNullable(false)) === true)) {
						return 0;
					}
					if(KSOperator.gt(type.max(), 1)) {
						return i + 1;
					}
				}
				else {
					return 0;
				}
			}
			return parameters.length;
		}
		static getUntilDifferentTypeIndex() {
			const t0 = KSType.isValue;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return Parameter.__ks_sttc_getUntilDifferentTypeIndex_0(arguments[0], arguments[1]);
				}
			}
			if(AbstractNode.getUntilDifferentTypeIndex) {
				return AbstractNode.getUntilDifferentTypeIndex.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toFragments_0(node, fragments, mode, fn) {
			return Parameter.toKSFragments(node, fragments, mode, fn);
		}
		static toFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 4) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3])) {
					return Parameter.__ks_sttc_toFragments_0(arguments[0], arguments[1], arguments[2], arguments[3]);
				}
			}
			if(AbstractNode.toFragments) {
				return AbstractNode.toFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toKSFragments_0(node, fragments, mode, fn) {
			const parameters = node.parameters();
			const signature = node.type();
			const name = (mode === ParameterMode.Default || mode === ParameterMode.OverloadedFunction || mode === ParameterMode.HelperConstructor) ? "arguments" : "__ks_arguments";
			let restIndex = -1;
			let minBefore = 0;
			let maxBefore = 0;
			let minRest = 0;
			let minAfter = 0;
			let maxAfter = 0;
			for(let i = 0, __ks_0 = parameters.length, parameter; i < __ks_0; ++i) {
				parameter = parameters[i];
				const type = parameter.type();
				if(restIndex !== -1) {
					minAfter = KSOperator.addOrConcat(minAfter, type.min());
					maxAfter = KSOperator.addOrConcat(maxAfter, type.max());
				}
				else if(KSOperator.eq(type.max(), Infinity)) {
					restIndex = i;
					minRest = type.min();
				}
				else {
					minBefore = KSOperator.addOrConcat(minBefore, type.min());
					maxBefore = KSOperator.addOrConcat(maxBefore, type.max());
				}
			}
			if(signature.isAsync() === true) {
				if(restIndex !== -1) {
					++minAfter;
					++maxAfter;
				}
				else {
					++minBefore;
					++maxBefore;
				}
			}
			const context = (() => {
				const d = new Dictionary();
				d.name = name;
				d.async = signature.isAsync();
				d.required = minBefore;
				d.optional = signature.min();
				d.temp = false;
				d.tempL = false;
				d.length = parameters.length;
				d.min = minBefore;
				d.max = KSOperator.addOrConcat(maxBefore, minRest, minAfter);
				d.increment = true;
				return d;
			})();
			let lastHeaderParameterIndex = 0;
			let asyncHeaderParameter = false;
			if(KSOperator.gt(signature.max(), 0)) {
				if(mode === ParameterMode.ArrowFunction) {
					fragments.code("..." + name);
				}
				else if(mode === ParameterMode.HybridConstructor) {
					fragments.code(name);
				}
			}
			if(mode === ParameterMode.Default || mode === ParameterMode.HelperConstructor) {
				const offset = node.getParameterOffset();
				for(let i = 0, __ks_0 = parameters.length, parameter; i < __ks_0; ++i) {
					parameter = parameters[i];
					if(KSOperator.gt(KSOperator.addOrConcat(i, offset), 0)) {
						fragments.code($comma);
					}
					parameter.toParameterFragments(fragments);
				}
				lastHeaderParameterIndex = parameters.length;
				if(context.async === true) {
					if(KSOperator.gt(KSOperator.addOrConcat(offset, lastHeaderParameterIndex), 0)) {
						fragments.code($comma);
					}
					fragments.code("__ks_cb");
				}
			}
			fragments = fn(fragments);
			if(mode !== ParameterMode.HelperConstructor) {
				for(let __ks_0 = 0, __ks_1 = Math.min(parameters.length, lastHeaderParameterIndex), parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = parameters[__ks_0];
					parameter.toValidationFragments(fragments);
				}
			}
			if(lastHeaderParameterIndex === parameters.length) {
				return fragments;
			}
			return fragments;
		}
		static toKSFragments() {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, ParameterMode);
			if(arguments.length === 4) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2]) && t0(arguments[3])) {
					return Parameter.__ks_sttc_toKSFragments_0(arguments[0], arguments[1], arguments[2], arguments[3]);
				}
			}
			if(AbstractNode.toKSFragments) {
				return AbstractNode.toKSFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toHeaderParameterFragments_0(fragments, node, parameters, minAfter, context) {
			const offset = node.getParameterOffset();
			let til = -1;
			for(let i = 0, __ks_0 = parameters.length, parameter; i < __ks_0; ++i) {
				parameter = parameters[i];
				const type = parameter.type();
				if(KSOperator.eq(type.max(), Infinity)) {
					if(KSOperator.gt(KSOperator.addOrConcat(i, offset), 0)) {
						fragments.code($comma);
					}
					parameter.toParameterFragments(fragments);
				}
				else if(KSOperator.gt(type.max(), 1)) {
					if(KSOperator.gt(KSOperator.addOrConcat(i, offset), 0)) {
						fragments.code($comma);
					}
					parameter.toParameterFragments(fragments);
				}
				else if((parameter.isRequired() === true) || ((i + 1) === parameters.length) || (i < ((til === -1) ? til = Parameter.__ks_sttc_getUntilDifferentTypeIndex_0(parameters, i) : til))) {
					if(KSOperator.gt(KSOperator.addOrConcat(i, offset), 0)) {
						fragments.code($comma);
					}
					parameter.toParameterFragments(fragments);
					context.optional = KSOperator.addOrConcat(context.optional, KSOperator.subtraction(type.max(), type.min()));
					context.required = KSOperator.subtraction(context.required, type.min());
				}
				else {
					return i;
				}
			}
			return parameters.length;
		}
		static toHeaderParameterFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 5) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3]) && t0(arguments[4])) {
					return Parameter.__ks_sttc_toHeaderParameterFragments_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
				}
			}
			if(AbstractNode.toHeaderParameterFragments) {
				return AbstractNode.toHeaderParameterFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toAsyncHeaderParameterFragments_0(fragments, parameters, lastHeader) {
			if(lastHeader === parameters.length) {
				if(KSOperator.gt(lastHeader, 0)) {
					fragments.code($comma);
				}
				fragments.code("__ks_cb");
				return true;
			}
			else {
				return false;
			}
		}
		static toAsyncHeaderParameterFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 3) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2])) {
					return Parameter.__ks_sttc_toAsyncHeaderParameterFragments_0(arguments[0], arguments[1], arguments[2]);
				}
			}
			if(AbstractNode.toAsyncHeaderParameterFragments) {
				return AbstractNode.toAsyncHeaderParameterFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toLengthValidationFragments_0(fragments, node, name, signature, parameters, asyncHeader, restIndex, minBefore, minRest, minAfter) {
			if(KSOperator.addOrConcat(minBefore, minRest, minAfter) !== 0) {
				if(signature.isAsync() === true) {
					node.module().flag("Type");
					if(asyncHeader === true) {
						if(node.isAssertingParameter() === true) {
							if(signature.min() === 0) {
								fragments.newControl().code("if(arguments.length < 1)").step().line("throw new SyntaxError(\"Wrong number of arguments (\" + arguments.length + \" for 0 + 1)\")").step().code(KSHelper.concatString("else if(!", $runtime.type.__ks_0(node), ".isFunction(__ks_cb))")).step().line("throw new TypeError(\"'callback' must be a function\")").done();
							}
							else {
								let ctrl = fragments.newControl().code(KSHelper.concatString("if(arguments.length < ", KSOperator.addOrConcat(signature.min(), 1), ")")).step().line(KSHelper.concatString($runtime.scope.__ks_0(node), "__ks_error = new SyntaxError(\"Wrong number of arguments (\" + arguments.length + \" for ", signature.min(), " + 1)\")"));
								ctrl.newControl().code(KSHelper.concatString("if(arguments.length > 0 && ", $runtime.type.__ks_0(node), ".isFunction((__ks_cb = arguments[arguments.length - 1])))")).step().line("return __ks_cb(__ks_error)").step().code("else").step().line("throw __ks_error").done();
								ctrl.step().code(KSHelper.concatString("else if(!", $runtime.type.__ks_0(node), ".isFunction(__ks_cb))")).step().line("throw new TypeError(\"'callback' must be a function\")").done();
							}
						}
					}
					else {
						fragments.line(KSHelper.concatString($runtime.scope.__ks_0(node), "__ks_cb = arguments.length > 0 ? arguments[arguments.length - 1] : null"));
						if(node.isAssertingParameter() === true) {
							let ctrl = fragments.newControl().code(KSHelper.concatString("if(arguments.length < ", KSOperator.addOrConcat(signature.min(), 1), ")")).step().line(KSHelper.concatString($runtime.scope.__ks_0(node), "__ks_error = new SyntaxError(\"Wrong number of arguments (\" + arguments.length + \" for ", signature.min(), " + 1)\")"));
							ctrl.newControl().code(KSHelper.concatString("if(", $runtime.type.__ks_0(node), ".isFunction(__ks_cb))")).step().line("return __ks_cb(__ks_error)").step().code("else").step().line("throw __ks_error").done();
							ctrl.step().code(KSHelper.concatString("else if(!", $runtime.type.__ks_0(node), ".isFunction(__ks_cb))")).step().line("throw new TypeError(\"'callback' must be a function\")");
							ctrl.done();
						}
					}
				}
				else if(node.isAssertingParameter() === true) {
					fragments.newControl().code(KSHelper.concatString("if(", name, ".length < ", KSOperator.addOrConcat(signature.min(), node.getParameterOffset()), ")")).step().line(KSHelper.concatString("throw new SyntaxError(\"Wrong number of arguments (\" + ", name, ".length + \" for ", signature.min(), ")\")")).done();
				}
			}
		}
		static toLengthValidationFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 10) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3]) && t0(arguments[4]) && t0(arguments[5]) && t0(arguments[6]) && t0(arguments[7]) && t0(arguments[8]) && t0(arguments[9])) {
					return Parameter.__ks_sttc_toLengthValidationFragments_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
				}
			}
			if(AbstractNode.toLengthValidationFragments) {
				return AbstractNode.toLengthValidationFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toAfterRestParameterFragments_0(fragments, name, parameters, restIndex, beforeContext, wrongdoer) {
			let parameter = parameters[restIndex];
			const context = (() => {
				const d = new Dictionary();
				d.name = name;
				d.any = parameter.type().isAny();
				d.increment = false;
				d.temp = beforeContext.temp;
				d.tempL = beforeContext.tempL;
				d.length = parameters.length;
				return d;
			})();
			for(let i = KSOperator.addOrConcat(restIndex, 1), __ks_0 = parameters.length, parameter; i < __ks_0; ++i) {
				parameter = parameters[i];
				parameter.toAfterRestFragments(fragments, context, i, wrongdoer);
			}
		}
		static toAfterRestParameterFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 6) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3]) && t0(arguments[4]) && t0(arguments[5])) {
					return Parameter.__ks_sttc_toAfterRestParameterFragments_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
				}
			}
			if(AbstractNode.toAfterRestParameterFragments) {
				return AbstractNode.toAfterRestParameterFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toRestParameterFragments_0(fragments, node, name, signature, parameters, declared, restIndex, minBefore, minAfter, maxAfter, context, wrongdoer) {
			const parameter = parameters[restIndex];
			if(parameter.type().isAny() === true) {
				if(KSOperator.gt(minAfter, 0)) {
					if(!(declared === true)) {
						fragments.line($runtime.scope.__ks_0(node), KSHelper.concatString("__ks_i = ", KSOperator.addOrConcat(KSOperator.subtraction(restIndex, 1), node.getParameterOffset())));
					}
					if(parameter.isAnonymous() === true) {
						fragments.line(KSHelper.concatString("__ks_i = arguments.length - ", minAfter));
					}
					else {
						if((parameter.hasDefaultValue() === true) && (parameter.type().min() === 0)) {
							fragments.newLine().code($runtime.scope.__ks_0(node)).compile(parameter).code(KSHelper.concatString(" = arguments.length > ", ((context.increment === true) ? "++__ks_i" : "__ks_i"), " + ", minAfter, " ? Array.prototype.slice.call(arguments, __ks_i, __ks_i = arguments.length - ", minAfter, ") : ")).compile(parameter._defaultValue).done();
						}
						else {
							fragments.newLine().code($runtime.scope.__ks_0(node)).compile(parameter).code(KSHelper.concatString(" = Array.prototype.slice.call(arguments, ", ((context.increment === true) ? "++__ks_i" : "__ks_i"), ", __ks_i = arguments.length - ", minAfter, ")")).done();
						}
					}
					context.increment = true;
				}
				else {
					if(parameter.isAnonymous() === true) {
						return;
					}
					if(declared === true) {
						if((parameter.hasDefaultValue() === true) && (parameter.type().min() === 0)) {
							fragments.newLine().code($runtime.scope.__ks_0(node)).compile(parameter).code(KSHelper.concatString(" = ", name, ".length > ", ((context.increment === true) ? "++__ks_i" : "__ks_i"), " ? Array.prototype.slice.call(", name, ", __ks_i, ", name, ".length) : ")).compile(parameter._defaultValue).done();
						}
						else {
							fragments.newLine().code($runtime.scope.__ks_0(node)).compile(parameter).code(KSHelper.concatString(" = Array.prototype.slice.call(", name, ", ", ((context.increment === true) ? "++__ks_i" : "__ks_i"), ", ", name, ".length)")).done();
						}
					}
					else {
						if((parameter.hasDefaultValue() === true) && (parameter.type().min() === 0)) {
							fragments.newLine().code($runtime.scope.__ks_0(node)).compile(parameter).code(KSHelper.concatString(" = ", name, ".length > 0 ? Array.prototype.slice.call(", name, ", ", minBefore, ", ", name, ".length) : ")).compile(parameter._defaultValue).done();
						}
						else {
							fragments.newLine().code($runtime.scope.__ks_0(node)).compile(parameter).code(KSHelper.concatString(" = Array.prototype.slice.call(", name, ", ", minBefore, ", ", name, ".length)")).done();
						}
					}
				}
			}
			else {
				node.module().flag("Type");
				if(!(declared === true)) {
					fragments.line($runtime.scope.__ks_0(node), KSHelper.concatString("__ks_i = ", KSOperator.subtraction(restIndex, 1)));
				}
				if(!(parameter.isAnonymous() === true)) {
					fragments.newLine().code($runtime.scope.__ks_0(node)).compile(parameter).code(" = []").done();
				}
				if(KSOperator.gt(minAfter, 0)) {
					const line = fragments.newLine();
					if(!(context.temp === true)) {
						line.code($runtime.scope.__ks_0(node));
						context.temp = true;
					}
					line.code(KSHelper.concatString("__ks__ = arguments.length - ", minAfter)).done();
				}
				if(!(context.increment === true)) {
					fragments.line("--__ks_i");
					context.increment = true;
				}
				if((parameter.hasDefaultValue() === true) && !(parameter.type().isNullable() === true)) {
					const ctrl = fragments.newControl();
					if(KSOperator.gt(minAfter, 0)) {
						ctrl.code("if(__ks__ > ++__ks_i)").step();
					}
					else {
						ctrl.code("if(arguments.length > ++__ks_i)").step();
					}
					const ctrl2 = ctrl.newControl();
					ctrl2.code("if(arguments[__ks_i] === void 0 || arguments[__ks_i] === null)").step();
					ctrl2.step().code("else").step().line("--__ks_i").done();
					ctrl.done();
				}
				const ctrl = fragments.newControl();
				if(KSOperator.gt(minAfter, 0)) {
					ctrl.code("while(__ks__ > ++__ks_i)");
				}
				else {
					ctrl.code("while(arguments.length > ++__ks_i)");
				}
				ctrl.step();
				const ctrl2 = ctrl.newControl();
				const literal = new Literal(false, node, node.scope(), "arguments[__ks_i]");
				if(parameter.type().isNullable() === true) {
					ctrl2.code("if(arguments[__ks_i] === void 0)").step();
					ctrl2.newLine().compile(parameter).code(".push(null)").done();
					ctrl2.step();
					ctrl2.code("else if(arguments[__ks_i] === null || ");
					parameter.type().toPositiveTestFragments(ctrl2, literal, Junction.OR);
					ctrl2.code(")").step();
				}
				else {
					ctrl2.code("if(");
					parameter.type().toPositiveTestFragments(ctrl2, literal, Junction.NONE);
					ctrl2.code(")").step();
				}
				if(!(parameter.isAnonymous() === true)) {
					ctrl2.newLine().compile(parameter).code(".push(arguments[__ks_i])").done();
				}
				ctrl2.step().code("else").step();
				if((minAfter !== 0) || (maxAfter !== 0)) {
					ctrl2.line("--__ks_i").line("break");
				}
				else {
					parameter.toErrorFragments(ctrl2, wrongdoer, signature.isAsync());
				}
				ctrl2.done();
				ctrl.done();
				if(parameter.hasDefaultValue() === true) {
					const ctrl = fragments.newControl().code("if(").compile(parameter).code(".length === 0)").step();
					ctrl.newLine().compile(parameter).code($equals).compile(parameter._defaultValue).done();
					ctrl.done();
				}
				const min = parameter.type().min();
				if(KSOperator.gt(min, 0)) {
					const ctrl = fragments.newControl().code("if(").compile(parameter).code(KSHelper.concatString(".length < ", min, ")")).step();
					if(context.async === true) {
						ctrl.newLine().code(KSHelper.concatString("return __ks_cb(new SyntaxError(\"The rest parameter must have at least ", min, " argument", (KSOperator.gt(min, 1) ? "s" : ""), " (\" + ")).compile(parameter).code(".length + \")\"))").done();
					}
					else {
						ctrl.newLine().code(KSHelper.concatString("throw new SyntaxError(\"The rest parameter must have at least ", min, " argument", (KSOperator.gt(min, 1) ? "s" : ""), " (\" + ")).compile(parameter).code(".length + \")\")").done();
					}
					ctrl.done();
				}
			}
		}
		static toRestParameterFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 12) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3]) && t0(arguments[4]) && t0(arguments[5]) && t0(arguments[6]) && t0(arguments[7]) && t0(arguments[8]) && t0(arguments[9]) && t0(arguments[10]) && t0(arguments[11])) {
					return Parameter.__ks_sttc_toRestParameterFragments_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
				}
			}
			if(AbstractNode.toRestParameterFragments) {
				return AbstractNode.toRestParameterFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toBeforeRestParameterFragments_0(fragments, name, signature, parameters, nextIndex, restIndex, context, wrongdoer) {
			if(restIndex === -1) {
				for(let i = nextIndex, __ks_0 = parameters.length, parameter; i < __ks_0; ++i) {
					parameter = parameters[i];
					parameter.toBeforeRestFragments(fragments, context, i, false, wrongdoer);
				}
			}
			else {
				for(let i = nextIndex, __ks_0 = Math.min(parameters.length, restIndex), parameter; i < __ks_0; ++i) {
					parameter = parameters[i];
					parameter.toBeforeRestFragments(fragments, context, i, true, wrongdoer);
				}
			}
		}
		static toBeforeRestParameterFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 8) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3]) && t0(arguments[4]) && t0(arguments[5]) && t0(arguments[6]) && t0(arguments[7])) {
					return Parameter.__ks_sttc_toBeforeRestParameterFragments_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
				}
			}
			if(AbstractNode.toBeforeRestParameterFragments) {
				return AbstractNode.toBeforeRestParameterFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class AliasStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(AliasStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(expression, parameter) {
			const parent = parameter.__ks_func_parent_0();
			Statement.prototype.__ks_cons_rt.call(null, this, [expression.__ks_func_data_0(), parent]);
			this._expression = expression;
			this._parameter = parameter;
			parent.addAtThisParameter(this);
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, ThisExpressionParameter);
			const t1 = value => KSType.isClassInstance(value, Parameter);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return AliasStatement.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getVariableName() {
			return this.__ks_func_getVariableName_rt.call(null, this, this, arguments);
		}
		__ks_func_getVariableName_1() {
			return this._expression.__ks_func_getVariableName_0();
		}
		__ks_func_getVariableName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getVariableName_1.call(that);
			}
			if(super.__ks_func_getVariableName_rt) {
				return super.__ks_func_getVariableName_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_20() {
			return this._expression.__ks_func_name_19();
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_20.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		path() {
			return this.__ks_func_path_rt.call(null, this, this, arguments);
		}
		__ks_func_path_3() {
			return this._expression.__ks_func_path_2();
		}
		__ks_func_path_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_path_3.call(that);
			}
			if(super.__ks_func_path_rt) {
				return super.__ks_func_path_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_51(fragments, mode) {
			const variable = this._scope.getVariable(this._expression.__ks_func_name_19());
			if((this._expression.__ks_func_isSealed_0() === true) && !(this._parameter.__ks_func_parent_0().isConstructor() === true)) {
				fragments.newLine().code(KSHelper.concatString(this._expression.__ks_func_getClass_0().getSealedName(), ".__ks_set_", this._expression.__ks_func_name_19(), "(this, ")).compile(variable).code(")").done();
			}
			else {
				fragments.newLine().code(this._expression.__ks_func_fragment_0(), $equals).compile(variable).done();
			}
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_51.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_32() {
			return this._expression.type();
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_32.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class IdentifierParameter extends IdentifierLiteral {
		static __ks_new_0(...args) {
			const o = Object.create(IdentifierParameter.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		isBinding() {
			return this.__ks_func_isBinding_rt.call(null, this, this, arguments);
		}
		__ks_func_isBinding_0() {
			return false;
		}
		__ks_func_isBinding_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isBinding_0.call(that);
			}
			if(super.__ks_func_isBinding_rt) {
				return super.__ks_func_isBinding_rt.call(null, that, IdentifierLiteral.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setDeclaredType() {
			return this.__ks_func_setDeclaredType_rt.call(null, this, this, arguments);
		}
		__ks_func_setDeclaredType_2(type, definitive) {
			const variable = this._scope.getVariable(this._value);
			variable.setDeclaredType(type).setRealType(type).setDefinitive(definitive);
			this._declaredType = this._realType = type;
		}
		__ks_func_setDeclaredType_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_setDeclaredType_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_setDeclaredType_rt) {
				return super.__ks_func_setDeclaredType_rt.call(null, that, IdentifierLiteral.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toAfterRestFragments() {
			return this.__ks_func_toAfterRestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toAfterRestFragments_1(fragments, context, index, wrongdoer, rest, arity, required, defaultValue, header, async) {
			if(arity === void 0) {
				arity = null;
			}
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			IdentifierParameter.__ks_sttc_toAfterRestFragments_0(fragments, context, index, wrongdoer, rest, arity, required, defaultValue, header, async, this);
		}
		__ks_func_toAfterRestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 10) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4]) && t0(args[6]) && t0(args[8]) && t0(args[9])) {
					return proto.__ks_func_toAfterRestFragments_1.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
				}
			}
			if(super.__ks_func_toAfterRestFragments_rt) {
				return super.__ks_func_toAfterRestFragments_rt.call(null, that, IdentifierLiteral.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toBeforeRestFragments() {
			return this.__ks_func_toBeforeRestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toBeforeRestFragments_1(fragments, context, index, wrongdoer, rest, arity, required, defaultValue, header, async) {
			if(arity === void 0) {
				arity = null;
			}
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			IdentifierParameter.__ks_sttc_toBeforeRestFragments_0(fragments, context, index, wrongdoer, rest, arity, required, defaultValue, header, async, this);
		}
		__ks_func_toBeforeRestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 10) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4]) && t0(args[6]) && t0(args[8]) && t0(args[9])) {
					return proto.__ks_func_toBeforeRestFragments_1.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
				}
			}
			if(super.__ks_func_toBeforeRestFragments_rt) {
				return super.__ks_func_toBeforeRestFragments_rt.call(null, that, IdentifierLiteral.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toParameterFragments() {
			return this.__ks_func_toParameterFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toParameterFragments_1(fragments) {
			fragments.compile(this);
		}
		__ks_func_toParameterFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toParameterFragments_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_toParameterFragments_rt) {
				return super.__ks_func_toParameterFragments_rt.call(null, that, IdentifierLiteral.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toValidationFragments() {
			return this.__ks_func_toValidationFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toValidationFragments_1(fragments, rest, defaultValue, header, async) {
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			IdentifierParameter.__ks_sttc_toValidationFragments_0(fragments, rest, defaultValue, header, async, this);
		}
		__ks_func_toValidationFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 5) {
				if(t0(args[0]) && t0(args[1]) && t0(args[3]) && t0(args[4])) {
					return proto.__ks_func_toValidationFragments_1.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			if(super.__ks_func_toValidationFragments_rt) {
				return super.__ks_func_toValidationFragments_rt.call(null, that, IdentifierLiteral.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toAfterRestFragments_0(fragments, context, index, wrongdoer, rest, arity, required, defaultValue, header, async, that) {
			if(arity === void 0) {
				arity = null;
			}
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			if(arity !== null) {
				const type = that.getDeclaredType().parameter();
				if(type.isAny() === true) {
					fragments.newLine().code($runtime.scope.__ks_0(that)).compile(that).code(KSHelper.concatString(" = Array.prototype.slice.call(", context.name, ", ", ((context.increment === true) ? "++__ks_i" : "__ks_i"), ", ", ((KSOperator.addOrConcat(index, 1) === context.length) ? "" : "__ks_i = "), "__ks_i + ", KSOperator.addOrConcat(arity.min, (context.increment === true) ? 1 : 0), ")")).done();
					context.increment = true;
				}
				else {
					if(!(context.temp === true)) {
						fragments.line(KSHelper.concatString($runtime.scope.__ks_0(that), "__ks__"));
						context.temp = true;
					}
					fragments.newLine().code($runtime.scope.__ks_0(that)).compile(that).code(" = []").done();
					if(!(context.increment === true)) {
						fragments.line("--__ks_i");
					}
					const line = fragments.newLine();
					if(!(context.tempL === true)) {
						line.code($runtime.scope.__ks_0(that));
						context.tempL = true;
					}
					line.code(KSHelper.concatString("__ks_l = __ks_i + ", KSOperator.addOrConcat(arity.min, 1))).done();
					const ctrl = fragments.newControl().code("while(++__ks_i < __ks_l)").step();
					ctrl.line(KSHelper.concatString("__ks__ = ", context.name, "[__ks_i]"));
					const ctrl2 = ctrl.newControl();
					if(type.isNullable() === true) {
						ctrl2.code("if(__ks__ === void 0 || __ks__ === null)").step().newLine().compile(that).code(".push(null)").done().done();
						ctrl2.step().code("else if(");
						type.toNegativeTestFragments(ctrl2, new Literal(false, that, that.scope(), "__ks__"), Junction.NONE);
					}
					else {
						ctrl2.code("if(__ks__ === void 0 || __ks__ === null || ");
						type.toNegativeTestFragments(ctrl2, new Literal(false, that, that.scope(), "__ks__"), Junction.OR);
					}
					ctrl2.code(")").step();
					if(KSOperator.addOrConcat(index, 1) === context.length) {
						wrongdoer(ctrl2, ParameterWrongDoing.BadType, (() => {
							const d = new Dictionary();
							d.async = context.async;
							d.name = that.name();
							d.type = type;
							return d;
						})());
					}
					else {
						const ctrl3 = ctrl2.newControl().code("if(").compile(that).code(KSHelper.concatString(".length >= ", arity.min, ")")).step();
						ctrl3.line("break").step().code("else").step();
						wrongdoer(ctrl3, ParameterWrongDoing.BadType, (() => {
							const d = new Dictionary();
							d.async = context.async;
							d.name = that.name();
							d.type = type;
							return d;
						})());
						ctrl3.done();
					}
					ctrl2.step().code("else").step().newLine().compile(that).code(".push(__ks__)").done();
					ctrl2.done();
					ctrl.done();
					context.increment = false;
				}
			}
			else if(defaultValue !== null) {
				if(context.any === true) {
					fragments.newLine().code($runtime.scope.__ks_0(that)).compile(that).code($equals).compile(defaultValue).done();
				}
				else {
					const declaredType = that.getDeclaredType();
					if(declaredType.isAny() === true) {
						if(!(context.temp === true)) {
							fragments.line(KSHelper.concatString($runtime.scope.__ks_0(that), "__ks__"));
							context.temp = true;
						}
						let line = fragments.newLine().code($runtime.scope.__ks_0(that)).compile(that).code(KSHelper.concatString(" = ", context.name, ".length > ++__ks_i && (__ks__ = ", context.name, "[", ((context.increment === true) ? "++" : ""), "__ks_i]) !== void 0"));
						if(!(declaredType.isNullable() === true)) {
							line.code(" && __ks__ !== null");
						}
						line.code(" ? __ks__ : ").compile(defaultValue).done();
					}
					else {
						if(!(context.temp === true)) {
							fragments.line(KSHelper.concatString($runtime.scope.__ks_0(that), "__ks__"));
							context.temp = true;
						}
						let line = fragments.newLine().code($runtime.scope.__ks_0(that)).compile(that).code(KSHelper.concatString(" = ", context.name, ".length > ++__ks_i && (__ks__ = ", context.name, "[__ks_i", ((context.increment === true) ? " + 1" : ""), "]) !== void 0 && "));
						if(declaredType.isNullable() === true) {
							line.code("(__ks__ === null || ");
							declaredType.toPositiveTestFragments(line, new Literal(false, that, that.scope(), "__ks__"), Junction.OR);
							line.code(")");
						}
						else {
							declaredType.toPositiveTestFragments(line, new Literal(false, that, that.scope(), "__ks__"), Junction.AND);
						}
						line.code((context.increment === true) ? " ? (++__ks_i, __ks__) : " : " ? __ks__ : ").compile(defaultValue).done();
					}
					context.increment = true;
				}
			}
			else {
				fragments.newLine().code($runtime.scope.__ks_0(that)).compile(that).code(KSHelper.concatString(" = ", context.name, "["), (context.increment === true) ? "++" : "", "__ks_i]").done();
				that.toValidationFragments(fragments, rest, defaultValue, header, async);
				context.increment = true;
			}
		}
		static toAfterRestFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 11) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3]) && t0(arguments[4]) && t0(arguments[6]) && t0(arguments[8]) && t0(arguments[9]) && t0(arguments[10])) {
					return IdentifierParameter.__ks_sttc_toAfterRestFragments_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
				}
			}
			if(IdentifierLiteral.toAfterRestFragments) {
				return IdentifierLiteral.toAfterRestFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toBeforeRestFragments_0(fragments, context, index, wrongdoer, rest, arity, required, defaultValue, header, async, that) {
			if(arity === void 0) {
				arity = null;
			}
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			if(arity !== null) {
				context.required = KSOperator.subtraction(context.required, arity.min);
				const type = that.getDeclaredType().parameter();
				if(type.isAny() === true) {
					if(KSOperator.gt(context.required, 0)) {
						fragments.newLine().code($runtime.scope.__ks_0(that)).compile(that).code(KSHelper.concatString(" = Array.prototype.slice.call(", context.name, ", __ks_i + 1, Math.min(", context.name, ".length - ", context.required, ", __ks_i + ", KSOperator.addOrConcat(arity.max, 1), "))")).done();
					}
					else {
						fragments.newLine().code($runtime.scope.__ks_0(that)).compile(that).code(KSHelper.concatString(" = Array.prototype.slice.call(", context.name, ", __ks_i + 1, Math.min(", context.name, ".length, __ks_i + ", KSOperator.addOrConcat(arity.max, 1), "))")).done();
					}
					if(KSOperator.lt(KSOperator.addOrConcat(index, 1), context.length)) {
						fragments.newLine().code("__ks_i += ").compile(that).code(".length").done();
					}
				}
				else {
					if(!(context.temp === true)) {
						fragments.line(KSHelper.concatString($runtime.scope.__ks_0(that), "__ks__"));
						context.temp = true;
					}
					fragments.newLine().code($runtime.scope.__ks_0(that)).compile(that).code(" = []").done();
					if(!(context.increment === true)) {
						fragments.line("--__ks_i");
					}
					const line = fragments.newLine();
					if(!(context.tempL === true)) {
						line.code($runtime.scope.__ks_0(that));
						context.tempL = true;
					}
					if(KSOperator.gt(context.required, 0)) {
						line.code(KSHelper.concatString("__ks_l = Math.min(", context.name, ".length - ", context.required, ", __ks_i + ", KSOperator.addOrConcat(arity.max, 1), ")"));
					}
					else {
						line.code(KSHelper.concatString("__ks_l = Math.min(", context.name, ".length, __ks_i + ", KSOperator.addOrConcat(arity.max, 1), ")"));
					}
					line.done();
					const ctrl = fragments.newControl().code("while(++__ks_i < __ks_l)").step();
					ctrl.line(KSHelper.concatString("__ks__ = ", context.name, "[__ks_i]"));
					const ctrl2 = ctrl.newControl();
					if(type.isNullable() === true) {
						ctrl2.code("if(__ks__ === void 0 || __ks__ === null)").step().newLine().compile(that).code(".push(null)").done().done();
						ctrl2.step().code("else if(");
						type.toNegativeTestFragments(ctrl2, new Literal(false, that, that.scope(), "__ks__"), Junction.NONE);
					}
					else {
						ctrl2.code("if(__ks__ === void 0 || __ks__ === null || ");
						type.toNegativeTestFragments(ctrl2, new Literal(false, that, that.scope(), "__ks__"), Junction.OR);
					}
					ctrl2.code(")").step();
					if(KSOperator.addOrConcat(index, 1) === context.length) {
						wrongdoer(ctrl2, ParameterWrongDoing.BadType, (() => {
							const d = new Dictionary();
							d.async = context.async;
							d.name = that.name();
							d.type = type;
							return d;
						})());
					}
					else {
						const ctrl3 = ctrl2.newControl().code("if(").compile(that).code(KSHelper.concatString(".length >= ", arity.min, ")")).step();
						ctrl3.line("break").step().code("else").step();
						wrongdoer(ctrl3, ParameterWrongDoing.BadType, (() => {
							const d = new Dictionary();
							d.async = context.async;
							d.name = that.name();
							d.type = type;
							return d;
						})());
						ctrl3.done();
					}
					ctrl2.step().code("else").step().newLine().compile(that).code(".push(__ks__)").done();
					ctrl2.done();
					ctrl.done();
					context.increment = false;
				}
				context.optional = KSOperator.addOrConcat(context.optional, KSOperator.subtraction(arity.max, arity.min));
			}
			else {
				if(!(required === true) && (defaultValue !== null)) {
					const declaredType = that.getDeclaredType();
					if(declaredType.isAny() === true) {
						if(!(context.temp === true)) {
							fragments.line(KSHelper.concatString($runtime.scope.__ks_0(that), "__ks__"));
							context.temp = true;
						}
						const line = fragments.newLine().code($runtime.scope.__ks_0(that)).compile(that).code(KSHelper.concatString(" = ", context.name, ".length > ", context.optional, " && (__ks__ = ", context.name, "[++__ks_i]) !== void 0"));
						if(!(declaredType.isNullable() === true)) {
							line.code(" && __ks__ !== null");
						}
						line.code(" ? __ks__ : ").compile(defaultValue).done();
					}
					else {
						fragments.newLine().code($runtime.scope.__ks_0(that)).compile(that).done();
						const fixed = KSOperator.subtraction(context.max, context.min) === 1;
						const ctrl = fragments.newControl();
						if(fixed) {
							ctrl.code(KSHelper.concatString("if(", context.name, ".length > ", context.optional, " && (")).compile(that).code(KSHelper.concatString(" = ", context.name, "[++__ks_i]) !== void 0"));
						}
						else if(KSOperator.gt(context.required, 0)) {
							ctrl.code(KSHelper.concatString("if(", context.name, ".length > __ks_i + ", KSOperator.addOrConcat(context.required, 1), " && (")).compile(that).code(KSHelper.concatString(" = ", context.name, "[++__ks_i]) !== void 0"));
						}
						else {
							ctrl.code(KSHelper.concatString("if(", context.name, ".length > ++__ks_i && (")).compile(that).code(KSHelper.concatString(" = ", context.name, "[__ks_i]) !== void 0"));
						}
						if(!(declaredType.isNullable() === true)) {
							ctrl.code(" && ").compile(that).code(" !== null");
						}
						ctrl.code(")").step();
						const ctrl2 = ctrl.newControl().code("if(");
						if(declaredType.isNullable() === true) {
							ctrl2.compile(that).code(" !== null && ");
							declaredType.toNegativeTestFragments(ctrl2, that, Junction.AND);
						}
						else {
							declaredType.toNegativeTestFragments(ctrl2, that, Junction.NONE);
						}
						ctrl2.code(")").step();
						if(fixed || (KSOperator.addOrConcat(index, 1) === context.length)) {
							wrongdoer(ctrl2, ParameterWrongDoing.BadType, (() => {
								const d = new Dictionary();
								d.async = context.async;
								d.name = that.name();
								d.type = declaredType;
								return d;
							})());
						}
						else if(rest === true) {
							ctrl2.newLine().compile(that).code($equals).compile(defaultValue).done();
							ctrl2.line("--__ks_i");
						}
						else {
							const ctrl3 = ctrl2.newControl().code(KSHelper.concatString("if(arguments.length - __ks_i < ", KSOperator.addOrConcat(KSOperator.subtraction(context.max, context.optional), context.required), ")")).step();
							ctrl3.newLine().compile(that).code($equals).compile(defaultValue).done();
							ctrl3.line("--__ks_i").step().code("else").step();
							wrongdoer(ctrl3, ParameterWrongDoing.BadType, (() => {
								const d = new Dictionary();
								d.async = context.async;
								d.name = that.name();
								d.type = declaredType;
								return d;
							})());
							ctrl3.done();
						}
						ctrl2.done();
						ctrl.step().code("else").step();
						ctrl.newLine().compile(that).code($equals).compile(defaultValue).done();
						ctrl.done();
					}
					++context.optional;
				}
				else {
					fragments.newLine().code($runtime.scope.__ks_0(that)).compile(that).code(KSHelper.concatString(" = ", context.name, "[++__ks_i]")).done();
					that.toValidationFragments(fragments, rest, defaultValue, header, async);
					--context.required;
				}
			}
		}
		static toBeforeRestFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 11) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[2]) && t0(arguments[3]) && t0(arguments[4]) && t0(arguments[6]) && t0(arguments[8]) && t0(arguments[9]) && t0(arguments[10])) {
					return IdentifierParameter.__ks_sttc_toBeforeRestFragments_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
				}
			}
			if(IdentifierLiteral.toBeforeRestFragments) {
				return IdentifierLiteral.toBeforeRestFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_toValidationFragments_0(fragments, rest, defaultValue, header, async, that) {
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			const declaredType = that.getDeclaredType();
			let ctrl = null;
			if(defaultValue !== null) {
				if(!(header === true)) {
					ctrl = fragments.newControl().code("if(").compile(that).code(" === void 0");
					if(!(declaredType.isNullable() === true)) {
						ctrl.code(" || ").compile(that).code(" === null");
					}
					ctrl.code(")").step();
					ctrl.newLine().compile(that).code($equals).compile(defaultValue).done();
				}
			}
			else {
				if(declaredType.isNullable() === true) {
					ctrl = fragments.newControl().code("if(").compile(that).code(" === void 0").code(")").step();
					ctrl.newLine().compile(that).code(" = null").done();
				}
			}
			if(ctrl !== null) {
				ctrl.done();
			}
		}
		static toValidationFragments() {
			const t0 = KSType.isValue;
			if(arguments.length === 6) {
				if(t0(arguments[0]) && t0(arguments[1]) && t0(arguments[3]) && t0(arguments[4]) && t0(arguments[5])) {
					return IdentifierParameter.__ks_sttc_toValidationFragments_0(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
				}
			}
			if(IdentifierLiteral.toValidationFragments) {
				return IdentifierLiteral.toValidationFragments.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class ArrayBindingParameter extends ArrayBinding {
		static __ks_new_0() {
			const o = Object.create(ArrayBindingParameter.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ArrayBindingParameter.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ArrayBindingParameter.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_analyse_0() {
			super.__ks_func_analyse_0();
			if(this._flatten) {
				this._tempName = Literal.__ks_new_0(this._scope.__ks_func_acquireTempName_0(false), this);
			}
		}
		addAliasParameter() {
			return this.__ks_func_addAliasParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_addAliasParameter_1(parameter) {
			return this._parent.addAliasParameter(parameter);
		}
		__ks_func_addAliasParameter_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ThisExpressionParameter);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addAliasParameter_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_addAliasParameter_rt) {
				return super.__ks_func_addAliasParameter_rt.call(null, that, ArrayBinding.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isBinding() {
			return this.__ks_func_isBinding_rt.call(null, this, this, arguments);
		}
		__ks_func_isBinding_1() {
			return true;
		}
		__ks_func_isBinding_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isBinding_1.call(that);
			}
			if(super.__ks_func_isBinding_rt) {
				return super.__ks_func_isBinding_rt.call(null, that, ArrayBinding.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_newElement_0(data) {
			return ArrayBindingParameterElement.__ks_new_1(data, this, this._scope);
		}
		setDeclaredType() {
			return this.__ks_func_setDeclaredType_rt.call(null, this, this, arguments);
		}
		__ks_func_setDeclaredType_3(type, definitive) {
			if(definitive === void 0 || definitive === null) {
				definitive = false;
			}
			if(type.isAny() === true) {
				for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					element.setDeclaredType(type, definitive);
				}
			}
			else if(type.isArray() === true) {
				if(type.isReference() === true) {
					const elementType = type.parameter();
					for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
						element = this._elements[__ks_0];
						element.setDeclaredType(elementType, definitive);
					}
				}
				else {
					for(let index = 0, __ks_0 = this._elements.length, element; index < __ks_0; ++index) {
						element = this._elements[index];
						element.setDeclaredType(type.getElement(index), definitive);
					}
				}
			}
			else {
				TypeException.__ks_sttc_throwInvalidBinding_0("Array", this);
			}
		}
		__ks_func_setDeclaredType_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_setDeclaredType_3.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_setDeclaredType_rt) {
				return super.__ks_func_setDeclaredType_rt.call(null, that, ArrayBinding.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toParameterFragments() {
			return this.__ks_func_toParameterFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toParameterFragments_2(fragments) {
			if(this._flatten) {
				fragments.compile(this._tempName);
			}
			else {
				fragments.compile(this);
			}
		}
		__ks_func_toParameterFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toParameterFragments_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_toParameterFragments_rt) {
				return super.__ks_func_toParameterFragments_rt.call(null, that, ArrayBinding.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toValidationFragments() {
			return this.__ks_func_toValidationFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toValidationFragments_2(fragments, rest, defaultValue, header, async) {
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			if(this._flatten) {
				const ctrl = fragments.newControl().code("if(").compile(this._tempName).code(" === void 0").code(" || ").compile(this._tempName).code(" === null").code(")").step();
				if(defaultValue !== null) {
					ctrl.newLine().compile(this._tempName).code($equals).compile(defaultValue).done();
				}
				ctrl.done();
				const line = fragments.newLine().code($runtime.scope.__ks_0(this));
				this._elements[0].toFlatFragments(line, this._tempName);
				for(let __ks_0 = 1, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					line.code(", ");
					element.toFlatFragments(line, this._tempName);
				}
				line.done();
			}
		}
		__ks_func_toValidationFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 5) {
				if(t0(args[0]) && t0(args[1]) && t0(args[3]) && t0(args[4])) {
					return proto.__ks_func_toValidationFragments_2.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			if(super.__ks_func_toValidationFragments_rt) {
				return super.__ks_func_toValidationFragments_rt.call(null, that, ArrayBinding.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ArrayBindingParameterElement extends ArrayBindingElement {
		static __ks_new_0() {
			const o = Object.create(ArrayBindingParameterElement.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ArrayBindingParameterElement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ArrayBindingParameterElement.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		addAliasParameter() {
			return this.__ks_func_addAliasParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_addAliasParameter_2(parameter) {
			return this._parent.addAliasParameter(parameter);
		}
		__ks_func_addAliasParameter_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ThisExpressionParameter);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addAliasParameter_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_addAliasParameter_rt) {
				return super.__ks_func_addAliasParameter_rt.call(null, that, ArrayBindingElement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_compileVariable_0(data) {
			return Parameter.__ks_sttc_compileExpression_0(data, this);
		}
		setDeclaredType() {
			return this.__ks_func_setDeclaredType_rt.call(null, this, this, arguments);
		}
		__ks_func_setDeclaredType_4(type, definitive) {
			this._name.setDeclaredType(type, definitive);
		}
		__ks_func_setDeclaredType_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_setDeclaredType_4.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_setDeclaredType_rt) {
				return super.__ks_func_setDeclaredType_rt.call(null, that, ArrayBindingElement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ObjectBindingParameter extends ObjectBinding {
		static __ks_new_0() {
			const o = Object.create(ObjectBindingParameter.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ObjectBindingParameter.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ObjectBindingParameter.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_analyse_0() {
			super.__ks_func_analyse_0();
			if(this._flatten) {
				this._tempName = Literal.__ks_new_0(this._scope.__ks_func_acquireTempName_0(false), this);
			}
		}
		addAliasParameter() {
			return this.__ks_func_addAliasParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_addAliasParameter_3(parameter) {
			return this._parent.addAliasParameter(parameter);
		}
		__ks_func_addAliasParameter_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ThisExpressionParameter);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addAliasParameter_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_addAliasParameter_rt) {
				return super.__ks_func_addAliasParameter_rt.call(null, that, ObjectBinding.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isBinding() {
			return this.__ks_func_isBinding_rt.call(null, this, this, arguments);
		}
		__ks_func_isBinding_2() {
			return true;
		}
		__ks_func_isBinding_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isBinding_2.call(that);
			}
			if(super.__ks_func_isBinding_rt) {
				return super.__ks_func_isBinding_rt.call(null, that, ObjectBinding.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_newElement_1(data) {
			return ObjectBindingParameterElement.__ks_new_1(data, this, this._scope);
		}
		setDeclaredType() {
			return this.__ks_func_setDeclaredType_rt.call(null, this, this, arguments);
		}
		__ks_func_setDeclaredType_5(type, definitive) {
			if(definitive === void 0 || definitive === null) {
				definitive = false;
			}
			if(type.isAny() === true) {
				for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					element.setDeclaredType(type, definitive);
				}
			}
			else if(type.isDictionary() === true) {
				if(type.isReference() === true) {
					const elementType = type.parameter();
					for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
						element = this._elements[__ks_0];
						element.setDeclaredType(elementType, definitive);
					}
				}
				else {
					for(let __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
						element = this._elements[__ks_0];
						element.setDeclaredType(type.getProperty(element.name()), definitive);
					}
				}
			}
			else if(!(type.isObject() === true)) {
				TypeException.__ks_sttc_throwInvalidBinding_0("Object", this);
			}
		}
		__ks_func_setDeclaredType_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return proto.__ks_func_setDeclaredType_5.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			if(super.__ks_func_setDeclaredType_rt) {
				return super.__ks_func_setDeclaredType_rt.call(null, that, ObjectBinding.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toParameterFragments() {
			return this.__ks_func_toParameterFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toParameterFragments_3(fragments) {
			if(this._flatten) {
				fragments.compile(this._tempName);
			}
			else {
				fragments.compile(this);
			}
		}
		__ks_func_toParameterFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toParameterFragments_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_toParameterFragments_rt) {
				return super.__ks_func_toParameterFragments_rt.call(null, that, ObjectBinding.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toValidationFragments() {
			return this.__ks_func_toValidationFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toValidationFragments_3(fragments, rest, defaultValue, header, async) {
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			if(this._flatten) {
				const ctrl = fragments.newControl().code("if(").compile(this._tempName).code(" === void 0").code(" || ").compile(this._tempName).code(" === null").code(")").step();
				if(defaultValue !== null) {
					ctrl.newLine().compile(this._tempName).code($equals).compile(defaultValue).done();
				}
				ctrl.done();
				const line = fragments.newLine().code($runtime.scope.__ks_0(this));
				this._elements[0].toFlatFragments(line, this._tempName);
				for(let __ks_0 = 1, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					line.code(", ");
					element.toFlatFragments(line, this._tempName);
				}
				line.done();
			}
		}
		__ks_func_toValidationFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 5) {
				if(t0(args[0]) && t0(args[1]) && t0(args[3]) && t0(args[4])) {
					return proto.__ks_func_toValidationFragments_3.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			if(super.__ks_func_toValidationFragments_rt) {
				return super.__ks_func_toValidationFragments_rt.call(null, that, ObjectBinding.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ObjectBindingParameterElement extends ObjectBindingElement {
		static __ks_new_0() {
			const o = Object.create(ObjectBindingParameterElement.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ObjectBindingParameterElement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ObjectBindingParameterElement.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		addAliasParameter() {
			return this.__ks_func_addAliasParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_addAliasParameter_4(parameter) {
			return this._parent.addAliasParameter(parameter);
		}
		__ks_func_addAliasParameter_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, ThisExpressionParameter);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addAliasParameter_4.call(that, args[0]);
				}
			}
			if(super.__ks_func_addAliasParameter_rt) {
				return super.__ks_func_addAliasParameter_rt.call(null, that, ObjectBindingElement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_compileVariable_1(data) {
			return Parameter.__ks_sttc_compileExpression_0(data, this);
		}
		setDeclaredType() {
			return this.__ks_func_setDeclaredType_rt.call(null, this, this, arguments);
		}
		__ks_func_setDeclaredType_6(type, definitive) {
			this._alias.setDeclaredType(type, definitive);
		}
		__ks_func_setDeclaredType_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_setDeclaredType_6.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_setDeclaredType_rt) {
				return super.__ks_func_setDeclaredType_rt.call(null, that, ObjectBindingElement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class AnonymousParameter extends AbstractNode {
		static __ks_new_0() {
			const o = Object.create(AnonymousParameter.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AnonymousParameter.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(AnonymousParameter.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._name = this._scope.__ks_func_acquireTempName_0(false);
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_21() {
			return null;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_21.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		setDeclaredType() {
			return this.__ks_func_setDeclaredType_rt.call(null, this, this, arguments);
		}
		__ks_func_setDeclaredType_7(type, definitive) {
			this._type = type;
		}
		__ks_func_setDeclaredType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_setDeclaredType_7.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_setDeclaredType_rt) {
				return super.__ks_func_setDeclaredType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_55(fragments, mode) {
			fragments.code(this._name);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_55.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toBeforeRestFragments() {
			return this.__ks_func_toBeforeRestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toBeforeRestFragments_2(fragments, context, index, wrongdoer, rest, arity, required, defaultValue, header, async) {
			if(arity === void 0) {
				arity = null;
			}
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			if(arity !== null) {
				throw new NotImplementedException(this);
			}
			else {
				if(this._type.__ks_func_isAny_0() === true) {
					fragments.line("++__ks_i");
				}
				else {
					fragments.newLine().code($runtime.scope.__ks_0(this)).compile(this).code(KSHelper.concatString(" = ", context.name, "[++__ks_i]")).done();
					this.__ks_func_toValidationFragments_4(fragments, rest, defaultValue, header, async);
				}
				--context.required;
			}
		}
		__ks_func_toBeforeRestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 10) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4]) && t0(args[6]) && t0(args[8]) && t0(args[9])) {
					return proto.__ks_func_toBeforeRestFragments_2.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
				}
			}
			if(super.__ks_func_toBeforeRestFragments_rt) {
				return super.__ks_func_toBeforeRestFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toParameterFragments() {
			return this.__ks_func_toParameterFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toParameterFragments_4(fragments) {
			fragments.compile(this);
		}
		__ks_func_toParameterFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toParameterFragments_4.call(that, args[0]);
				}
			}
			if(super.__ks_func_toParameterFragments_rt) {
				return super.__ks_func_toParameterFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toValidationFragments() {
			return this.__ks_func_toValidationFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toValidationFragments_4(fragments, rest, defaultValue, header, async) {
			if(defaultValue === void 0) {
				defaultValue = null;
			}
		}
		__ks_func_toValidationFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 5) {
				if(t0(args[0]) && t0(args[1]) && t0(args[3]) && t0(args[4])) {
					return proto.__ks_func_toValidationFragments_4.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			if(super.__ks_func_toValidationFragments_rt) {
				return super.__ks_func_toValidationFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_33() {
			return null;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_33.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ThisExpressionParameter extends ThisExpression {
		static __ks_new_0() {
			const o = Object.create(ThisExpressionParameter.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ThisExpressionParameter.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ThisExpressionParameter.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			if(!KSType.isValue(this._variableName)) {
				throw new NotSupportedException(this);
			}
			const method = this.__ks_func_statement_0();
			if(KSType.isClassInstance(method, ClassMethodDeclaration) || KSType.isClassInstance(method, ImplementClassMethodDeclaration)) {
				const __ks_class_1 = method.__ks_func_parent_0();
				let variable = null;
				if(KSType.isClassInstance(method, ClassMethodDeclaration) ? method.__ks_func_isInstance_2() : method.__ks_func_isInstance_4() === true) {
					variable = __ks_class_1.type().type().getInstanceVariable(this._variableName);
				}
				else {
					variable = __ks_class_1.type().type().getClassVariable(this._variableName);
				}
				if(variable.isImmutable() === true) {
					ReferenceException.__ks_sttc_throwImmutable_1(this);
				}
			}
			else if(KSType.isClassInstance(method, ClassConstructorDeclaration) || KSType.isClassInstance(method, ImplementClassConstructorDeclaration)) {
				const __ks_class_1 = method.__ks_func_parent_0();
				const variable = __ks_class_1.type().type().getInstanceVariable(this._variableName);
				if((variable.isImmutable() === true) && !(variable.isLateInit() === true)) {
					ReferenceException.__ks_sttc_throwImmutable_1(this);
				}
			}
			this._parent.addAliasParameter(this);
		}
		__ks_func_getDeclaredType_0() {
			return this._type;
		}
		isBinding() {
			return this.__ks_func_isBinding_rt.call(null, this, this, arguments);
		}
		__ks_func_isBinding_3() {
			return false;
		}
		__ks_func_isBinding_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isBinding_3.call(that);
			}
			if(super.__ks_func_isBinding_rt) {
				return super.__ks_func_isBinding_rt.call(null, that, ThisExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_listAssignments_7(array) {
			array.push(this._name);
			return array;
		}
		setDeclaredType() {
			return this.__ks_func_setDeclaredType_rt.call(null, this, this, arguments);
		}
		__ks_func_setDeclaredType_8(type, definitive) {
			if(!(type.matchContentOf(this._type) === true)) {
				TypeException.throwInvalidAssignement("@" + this._name, this._type, type, this);
			}
			const variable = this._parent.__ks_func_scope_0().getVariable(this._name);
			variable.setDeclaredType(type).setDefinitive(definitive);
		}
		__ks_func_setDeclaredType_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_setDeclaredType_8.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_setDeclaredType_rt) {
				return super.__ks_func_setDeclaredType_rt.call(null, that, ThisExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toAfterRestFragments() {
			return this.__ks_func_toAfterRestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toAfterRestFragments_2(fragments, context, index, wrongdoer, rest, arity, required, defaultValue, header, async) {
			if(arity === void 0) {
				arity = null;
			}
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			IdentifierParameter.__ks_sttc_toAfterRestFragments_0(fragments, context, index, wrongdoer, rest, arity, required, defaultValue, header, async, this);
		}
		__ks_func_toAfterRestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 10) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4]) && t0(args[6]) && t0(args[8]) && t0(args[9])) {
					return proto.__ks_func_toAfterRestFragments_2.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
				}
			}
			if(super.__ks_func_toAfterRestFragments_rt) {
				return super.__ks_func_toAfterRestFragments_rt.call(null, that, ThisExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toBeforeRestFragments() {
			return this.__ks_func_toBeforeRestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toBeforeRestFragments_3(fragments, context, index, wrongdoer, rest, arity, required, defaultValue, header, async) {
			if(arity === void 0) {
				arity = null;
			}
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			IdentifierParameter.__ks_sttc_toBeforeRestFragments_0(fragments, context, index, wrongdoer, rest, arity, required, defaultValue, header, async, this);
		}
		__ks_func_toBeforeRestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 10) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3]) && t0(args[4]) && t0(args[6]) && t0(args[8]) && t0(args[9])) {
					return proto.__ks_func_toBeforeRestFragments_3.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
				}
			}
			if(super.__ks_func_toBeforeRestFragments_rt) {
				return super.__ks_func_toBeforeRestFragments_rt.call(null, that, ThisExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toFragments_49(fragments, mode) {
			fragments.compile(this._scope.__ks_func_getVariable_0(this._name));
		}
		toParameterFragments() {
			return this.__ks_func_toParameterFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toParameterFragments_5(fragments) {
			fragments.compile(this._scope.__ks_func_getVariable_0(this._name));
		}
		__ks_func_toParameterFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toParameterFragments_5.call(that, args[0]);
				}
			}
			if(super.__ks_func_toParameterFragments_rt) {
				return super.__ks_func_toParameterFragments_rt.call(null, that, ThisExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toValidationFragments() {
			return this.__ks_func_toValidationFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toValidationFragments_5(fragments, rest, defaultValue, header, async) {
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			IdentifierParameter.__ks_sttc_toValidationFragments_0(fragments, rest, defaultValue, header, async, this);
		}
		__ks_func_toValidationFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 5) {
				if(t0(args[0]) && t0(args[1]) && t0(args[3]) && t0(args[4])) {
					return proto.__ks_func_toValidationFragments_5.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			if(super.__ks_func_toValidationFragments_rt) {
				return super.__ks_func_toValidationFragments_rt.call(null, that, ThisExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_34(type) {
		}
		__ks_func_type_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_type_34.call(that, args[0]);
				}
			}
			return super.__ks_func_type_rt.call(null, that, ThisExpression.prototype, args);
		}
	}
	class StructDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(StructDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(StructDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._array = false;
			this._extending = false;
			this._fields = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			this._name = this._data.name.name;
			this._struct = StructType.__ks_new_0(this._scope);
			if(KSType.isValue(this._data.extends)) {
				this._extending = true;
				let name = "";
				let member = this._data.extends;
				while(KSHelper.valueOf(member.kind) === NodeKind.MemberExpression.value) {
					name = KSHelper.concatString(".", member.property.name, name);
					member = member.object;
				}
				this._extendsName = KSHelper.concatString(member.name, name);
			}
			this._type = NamedType.__ks_new_0(this._name, this._struct);
			this._variable = this._scope.__ks_func_define_0(this._name, true, this._type, void 0, this);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._function = StructFunction.__ks_new_0(this._data, this, BlockScope.__ks_new_0(this._scope));
			for(let __ks_0 = 0, __ks_1 = this._data.fields.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.fields[__ks_0];
				const field = new StructFieldDeclaration(data, this);
				field.__ks_func_analyse_0();
				this._fields.push(field);
			}
			this._function.__ks_func_analyse_0();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(this._extending) {
				let __ks_0;
				if(KSType.isValue(__ks_0 = Type.__ks_sttc_fromAST_0(this._data.extends, this)) ? (this._extendsType = __ks_0, false) : true) {
					ReferenceException.__ks_sttc_throwNotDefined_0(this._extendsName, this);
				}
				else if(!KSType.isClassInstance(this._extendsType.__ks_func_discardName_0(), StructType)) {
					TypeException.__ks_sttc_throwNotStruct_0(this._extendsName, this);
				}
				this._struct.__ks_func_extends_3(this._extendsType);
			}
			this._function.__ks_func_prepare_0();
			for(let __ks_0 = 0, __ks_1 = this._fields.length, field; __ks_0 < __ks_1; ++__ks_0) {
				field = this._fields[__ks_0];
				this._struct.addField(field.__ks_func_type_36());
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._fields.length, field; __ks_0 < __ks_1; ++__ks_0) {
				field = this._fields[__ks_0];
				field.__ks_func_translate_0();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_export_0(recipient) {
			recipient.export(this._name, this._variable);
		}
		fields() {
			return this.__ks_func_fields_rt.call(null, this, this, arguments);
		}
		__ks_func_fields_0() {
			return this._fields;
		}
		__ks_func_fields_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_fields_0.call(that);
			}
			if(super.__ks_func_fields_rt) {
				return super.__ks_func_fields_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isEnhancementExport_0() {
			return true;
		}
		isExtending() {
			return this.__ks_func_isExtending_rt.call(null, this, this, arguments);
		}
		__ks_func_isExtending_2() {
			return this._extending;
		}
		__ks_func_isExtending_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExtending_2.call(that);
			}
			if(super.__ks_func_isExtending_rt) {
				return super.__ks_func_isExtending_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toObjectFragments() {
			return this.__ks_func_toObjectFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toObjectFragments_0(fragments, mode) {
			if(!this._extending && (this._fields.length === 0)) {
				fragments.line(KSHelper.concatString("return new ", $runtime.dictionary.__ks_0(this)));
			}
			else {
				let varname = "_";
				if(this._extending) {
					const line = fragments.newLine().code($const.__ks_0(this), varname, $equals, this._extendsName, ".__ks_new(");
					let nf = false;
					for(let __ks_0 = 0, __ks_1 = this._extendsType.__ks_func_type_0().listAllFieldNames(), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
						name = __ks_1[__ks_0];
						if(nf) {
							line.code($comma);
						}
						else {
							nf = true;
						}
						line.code(name);
					}
					line.code(")").done();
				}
				else {
					fragments.line($const.__ks_0(this), varname, " = new ", $runtime.dictionary.__ks_0(this), "()");
				}
				for(let __ks_0 = 0, __ks_1 = this._fields.length, field; __ks_0 < __ks_1; ++__ks_0) {
					field = this._fields[__ks_0];
					fragments.newLine().code(varname, ".").compile(field.__ks_func_name_22()).code($equals).compile(field.__ks_func_parameter_0().name()).done();
				}
				fragments.line("return " + varname);
			}
		}
		__ks_func_toObjectFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toObjectFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toObjectFragments_rt) {
				return super.__ks_func_toObjectFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_52(fragments, mode) {
			const line = fragments.newLine().code(KSHelper.concatString($runtime.immutableScope.__ks_0(this), this._name, " = ", $runtime.helper.__ks_0(this), ".struct("));
			let ctrl = line.newControl(null, false, false).code("function(");
			Parameter.toFragments(this._function, ctrl, ParameterMode.Default, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(null, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(fragments) {
					return fragments.code(")").step();
				};
				return __ks_rt;
			})());
			this.toObjectFragments(ctrl, mode);
			ctrl.done();
			const assessment = this._type.__ks_func_type_0().assessment(this._type.__ks_func_reference_0(this._scope), this);
			ctrl = line.newControl(null, false, false).code(", function(__ks_new, args)").step();
			Router.toFragments((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (__ks_function_1, line) => {
					line.code("__ks_new(");
					return false;
				};
				return __ks_rt;
			})(), null, assessment, ctrl.block(), this);
			ctrl.done();
			if(this._extending) {
				line.code($comma, this._extendsName);
			}
			line.code(")").done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_52.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class StructFunction extends AbstractNode {
		static __ks_new_0(...args) {
			const o = Object.create(StructFunction.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._parameters = [];
		}
		__ks_cons_0(data, parent, scope) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			if(scope === void 0) {
				scope = null;
			}
			AbstractNode.prototype.__ks_cons_1.call(this, data, parent, scope);
			this._type = FunctionType.__ks_new_0(this._scope);
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			if(args.length === 3) {
				if(t0(args[1]) && t1(args[2])) {
					return StructFunction.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			let index = -1;
			if(this._parent.isExtending() === true) {
				for(let __ks_0 = 0, __ks_1 = this._parent._extendsType.type().listAllFields(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
					type = __ks_1[__ks_0];
					const field = StructFieldDeclaration.__ks_new_1(KSHelper.cast(type, "StructFieldType", false, StructFieldType, "Class"), this._parent);
					field.__ks_func_analyse_0();
					field.__ks_func_prepare_0();
					const parameter = field.__ks_func_parameter_0();
					this._parameters.push(parameter);
					this._type.addParameter(parameter.type());
					if(KSOperator.gt(field.__ks_func_index_2(), index)) {
						index = field.__ks_func_index_2();
					}
				}
			}
			for(let __ks_0 = 0, __ks_1 = this._parent.fields(), __ks_2 = __ks_1.length, field; __ks_0 < __ks_2; ++__ks_0) {
				field = __ks_1[__ks_0];
				field.index(++index);
				field.prepare();
				const parameter = field.parameter();
				this._parameters.push(parameter);
				this._type.addParameter(parameter.type());
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getParameterOffset() {
			return this.__ks_func_getParameterOffset_rt.call(null, this, this, arguments);
		}
		__ks_func_getParameterOffset_11() {
			return 0;
		}
		__ks_func_getParameterOffset_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getParameterOffset_11.call(that);
			}
			if(super.__ks_func_getParameterOffset_rt) {
				return super.__ks_func_getParameterOffset_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameter() {
			return this.__ks_func_isAssertingParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameter_12() {
			return this._options.rules.assertNewStruct;
		}
		__ks_func_isAssertingParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameter_12.call(that);
			}
			if(super.__ks_func_isAssertingParameter_rt) {
				return super.__ks_func_isAssertingParameter_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameterType() {
			return this.__ks_func_isAssertingParameterType_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameterType_12() {
			return this.__ks_func_isAssertingParameter_12();
		}
		__ks_func_isAssertingParameterType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameterType_12.call(that);
			}
			if(super.__ks_func_isAssertingParameterType_rt) {
				return super.__ks_func_isAssertingParameterType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isOverridableFunction() {
			return this.__ks_func_isOverridableFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_isOverridableFunction_11() {
			return false;
		}
		__ks_func_isOverridableFunction_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isOverridableFunction_11.call(that);
			}
			if(super.__ks_func_isOverridableFunction_rt) {
				return super.__ks_func_isOverridableFunction_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameters() {
			return this.__ks_func_parameters_rt.call(null, this, this, arguments);
		}
		__ks_func_parameters_11() {
			return this._parameters;
		}
		__ks_func_parameters_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameters_11.call(that);
			}
			if(super.__ks_func_parameters_rt) {
				return super.__ks_func_parameters_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_35() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_35.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class StructFieldDeclaration extends AbstractNode {
		static __ks_new_0(...args) {
			const o = Object.create(StructFieldDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(StructFieldDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_cons_0(data, parent) {
			AbstractNode.prototype.__ks_cons_rt.call(null, this, [data, parent]);
			this._name = data.name.name;
			this._parameter = new StructFieldParameter(this, parent._function);
		}
		__ks_cons_1(type, parent) {
			AbstractNode.prototype.__ks_cons_rt.call(null, this, [new Dictionary(), parent]);
			this._type = type;
			this._name = this._type.__ks_func_name_4();
			this._index = this._type.__ks_func_index_4();
			this._parameter = new StructFieldParameter(this, parent._function);
			this._parameter.__ks_func_unflagValidation_0();
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, StructFieldType);
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return StructFieldDeclaration.prototype.__ks_cons_1.call(that, args[0], args[1]);
					}
				}
				if(t1(args[0]) && t1(args[1])) {
					return StructFieldDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._parameter.__ks_func_analyse_0();
			this._parameter.__ks_func_prepare_0();
			if(!KSType.isValue(this._type)) {
				let type = null;
				if(KSType.isValue(this._data.type)) {
					type = Type.__ks_sttc_fromAST_0(this._data.type, this);
				}
				if(type === null) {
					type = AnyType.Unexplicit;
				}
				else if(type.__ks_func_isNull_0() === true) {
					type = NullType.Explicit;
				}
				this._type = StructFieldType.__ks_new_0(this._scope, this._name, this._index, type, KSHelper.cast(this._parameter.__ks_func_isRequired_1(), "Boolean", false, null, "Boolean"));
				if(KSType.isValue(this._data.defaultValue) && (KSHelper.valueOf(this._data.defaultValue.kind) === NodeKind.Identifier.value) && (this._data.defaultValue.name === "null")) {
					this._type.__ks_func_flagNullable_1();
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._parameter.__ks_func_translate_0();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		index() {
			return this.__ks_func_index_rt.call(null, this, this, arguments);
		}
		__ks_func_index_2() {
			return this._index;
		}
		__ks_func_index_3(index) {
			this._index = index;
			return this;
		}
		__ks_func_index_rt(that, proto, args) {
			const t0 = KSType.isNumber;
			if(args.length === 0) {
				return proto.__ks_func_index_2.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_index_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_index_rt) {
				return super.__ks_func_index_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_22() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_22.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameter() {
			return this.__ks_func_parameter_rt.call(null, this, this, arguments);
		}
		__ks_func_parameter_0() {
			return this._parameter;
		}
		__ks_func_parameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameter_0.call(that);
			}
			if(super.__ks_func_parameter_rt) {
				return super.__ks_func_parameter_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_36() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_36.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class StructFieldParameter extends Parameter {
		static __ks_new_0(...args) {
			const o = Object.create(StructFieldParameter.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._validation = true;
		}
		__ks_cons_0(field, parent) {
			Parameter.prototype.__ks_cons_rt.call(null, this, [field._data, parent]);
			this._field = field;
			this._data.modifiers = [];
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, StructFieldDeclaration);
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return StructFieldParameter.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_analyse_0() {
			this._name = IdentifierParameter.__ks_new_0((() => {
				const d = new Dictionary();
				d.name = this._field.__ks_func_name_22();
				return d;
			})(), this, this._scope);
			this._name.__ks_func_setAssignment_0(AssignmentType.Parameter);
			this._name.__ks_func_analyse_0();
			for(let __ks_0 = 0, __ks_1 = this._name.__ks_func_listAssignments_0([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
				name = __ks_1[__ks_0];
				this._scope.define(name, false, null, this);
			}
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_23() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_23.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Parameter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toValidationFragments_0(fragments) {
			if(this._validation) {
				super.__ks_func_toValidationFragments_0(fragments);
			}
		}
		unflagValidation() {
			return this.__ks_func_unflagValidation_rt.call(null, this, this, arguments);
		}
		__ks_func_unflagValidation_0() {
			this._validation = false;
		}
		__ks_func_unflagValidation_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_unflagValidation_0.call(that);
			}
			if(super.__ks_func_unflagValidation_rt) {
				return super.__ks_func_unflagValidation_rt.call(null, that, Parameter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class TupleDeclaration extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(TupleDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(TupleDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._extending = false;
			this._fields = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			this._name = this._data.name.name;
			let named = false;
			for(let __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				let __ks_2 = modifier.kind.valueOf();
				if(__ks_2 === ModifierKind.Named.value) {
					named = true;
				}
			}
			if(named) {
				this._tuple = NamedTupleType.__ks_new_0(this._scope);
			}
			else {
				this._tuple = UnnamedTupleType.__ks_new_0(this._scope);
			}
			if(KSType.isValue(this._data.extends)) {
				this._extending = true;
				let name = "";
				let member = this._data.extends;
				while(KSHelper.valueOf(member.kind) === NodeKind.MemberExpression.value) {
					name = KSHelper.concatString(".", member.property.name, name);
					member = member.object;
				}
				this._extendsName = KSHelper.concatString(member.name, name);
			}
			this._type = NamedType.__ks_new_0(this._name, this._tuple);
			this._variable = this._scope.__ks_func_define_0(this._name, true, this._type, void 0, this);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._function = TupleFunction.__ks_new_0(this._data, this, BlockScope.__ks_new_0(this._scope));
			for(let __ks_0 = 0, __ks_1 = this._data.fields.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.fields[__ks_0];
				const field = new TupleFieldDeclaration(data, this);
				field.__ks_func_analyse_0();
				this._fields.push(field);
			}
			this._function.__ks_func_analyse_0();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if(this._extending) {
				let __ks_0;
				if(KSType.isValue(__ks_0 = Type.__ks_sttc_fromAST_0(this._data.extends, this)) ? (this._extendsType = __ks_0, false) : true) {
					ReferenceException.__ks_sttc_throwNotDefined_0(this._extendsName, this);
				}
				else if(!KSType.isClassInstance(this._extendsType.__ks_func_discardName_0(), TupleType)) {
					TypeException.__ks_sttc_throwNotTuple_0(this._extendsName, this);
				}
				this._tuple.__ks_func_extends_5(this._extendsType);
			}
			this._function.__ks_func_prepare_0();
			for(let __ks_0 = 0, __ks_1 = this._fields.length, field; __ks_0 < __ks_1; ++__ks_0) {
				field = this._fields[__ks_0];
				this._tuple.addField(field.__ks_func_type_38());
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._fields.length, field; __ks_0 < __ks_1; ++__ks_0) {
				field = this._fields[__ks_0];
				field.__ks_func_translate_0();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_export_0(recipient) {
			recipient.export(this._name, this._variable);
		}
		fields() {
			return this.__ks_func_fields_rt.call(null, this, this, arguments);
		}
		__ks_func_fields_1() {
			return this._fields;
		}
		__ks_func_fields_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_fields_1.call(that);
			}
			if(super.__ks_func_fields_rt) {
				return super.__ks_func_fields_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isEnhancementExport_0() {
			return true;
		}
		isExtending() {
			return this.__ks_func_isExtending_rt.call(null, this, this, arguments);
		}
		__ks_func_isExtending_3() {
			return this._extending;
		}
		__ks_func_isExtending_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExtending_3.call(that);
			}
			if(super.__ks_func_isExtending_rt) {
				return super.__ks_func_isExtending_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toArrayFragments() {
			return this.__ks_func_toArrayFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toArrayFragments_0(fragments, mode) {
			if(this._extending) {
				let varname = "_";
				const line = fragments.newLine().code($const.__ks_0(this), varname, $equals, this._extendsName, ".__ks_builder(");
				for(let index = 0, __ks_0 = this._extendsType.__ks_func_type_0().listAllFields(), __ks_1 = __ks_0.length, field; index < __ks_1; ++index) {
					field = __ks_0[index];
					if(index !== 0) {
						line.code($comma);
					}
					line.code(field.name());
				}
				line.code(")").done();
				for(let __ks_0 = 0, __ks_1 = this._fields.length, field; __ks_0 < __ks_1; ++__ks_0) {
					field = this._fields[__ks_0];
					fragments.line(varname, ".push(", field.__ks_func_type_38().name(), ")");
				}
				fragments.line("return " + varname);
			}
			else {
				const line = fragments.newLine().code("return [");
				for(let index = 0, __ks_0 = this._fields.length, field; index < __ks_0; ++index) {
					field = this._fields[index];
					if(index !== 0) {
						line.code($comma);
					}
					line.compile(field.__ks_func_parameter_1().name());
				}
				line.code("]").done();
			}
		}
		__ks_func_toArrayFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toArrayFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toArrayFragments_rt) {
				return super.__ks_func_toArrayFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_53(fragments, mode) {
			const line = fragments.newLine().code(KSHelper.concatString($runtime.immutableScope.__ks_0(this), this._name, " = ", $runtime.helper.__ks_0(this), ".tuple("));
			let ctrl = line.newControl(null, false, false).code("function(");
			Parameter.toFragments(this._function, ctrl, ParameterMode.Default, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 1) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(null, args[0]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = function(fragments) {
					return fragments.code(")").step();
				};
				return __ks_rt;
			})());
			this.toArrayFragments(ctrl, mode);
			ctrl.done();
			const assessment = this._type.__ks_func_type_0().assessment(this._type.__ks_func_reference_0(this._scope), this);
			ctrl = line.newControl(null, false, false).code(", function(__ks_new, args)").step();
			Router.toFragments((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (__ks_function_1, line) => {
					line.code("__ks_new(");
					return false;
				};
				return __ks_rt;
			})(), null, assessment, ctrl.block(), this);
			ctrl.done();
			if(this._extending) {
				line.code($comma, this._extendsName);
			}
			line.code(")").done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_53.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class TupleFunction extends AbstractNode {
		static __ks_new_0(...args) {
			const o = Object.create(TupleFunction.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._parameters = [];
		}
		__ks_cons_0(data, parent, scope) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			if(scope === void 0) {
				scope = null;
			}
			AbstractNode.prototype.__ks_cons_1.call(this, data, parent, scope);
			this._type = FunctionType.__ks_new_0(this._scope);
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			if(args.length === 3) {
				if(t0(args[1]) && t1(args[2])) {
					return TupleFunction.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			let index = -1;
			if(this._parent.isExtending() === true) {
				const parent = this._parent._extendsType.type();
				for(let __ks_0 = 0, __ks_1 = parent.listAllFields(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
					type = __ks_1[__ks_0];
					const field = new TupleFieldDeclaration(type, this._parent);
					field.__ks_func_analyse_0();
					field.__ks_func_prepare_0();
					const parameter = field.__ks_func_parameter_1();
					this._parameters.push(parameter);
					this._type.addParameter(parameter.type());
				}
				index = KSOperator.addOrConcat(index, parent.length());
			}
			for(let __ks_0 = 0, __ks_1 = this._parent.fields(), __ks_2 = __ks_1.length, field; __ks_0 < __ks_2; ++__ks_0) {
				field = __ks_1[__ks_0];
				field.index(++index);
				field.prepare();
				const parameter = field.parameter();
				this._parameters.push(parameter);
				this._type.addParameter(parameter.type());
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getParameterOffset() {
			return this.__ks_func_getParameterOffset_rt.call(null, this, this, arguments);
		}
		__ks_func_getParameterOffset_12() {
			return 0;
		}
		__ks_func_getParameterOffset_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getParameterOffset_12.call(that);
			}
			if(super.__ks_func_getParameterOffset_rt) {
				return super.__ks_func_getParameterOffset_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameter() {
			return this.__ks_func_isAssertingParameter_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameter_13() {
			return this._options.rules.assertNewTuple;
		}
		__ks_func_isAssertingParameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameter_13.call(that);
			}
			if(super.__ks_func_isAssertingParameter_rt) {
				return super.__ks_func_isAssertingParameter_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssertingParameterType() {
			return this.__ks_func_isAssertingParameterType_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssertingParameterType_13() {
			return this.__ks_func_isAssertingParameter_13();
		}
		__ks_func_isAssertingParameterType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssertingParameterType_13.call(that);
			}
			if(super.__ks_func_isAssertingParameterType_rt) {
				return super.__ks_func_isAssertingParameterType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isOverridableFunction() {
			return this.__ks_func_isOverridableFunction_rt.call(null, this, this, arguments);
		}
		__ks_func_isOverridableFunction_12() {
			return false;
		}
		__ks_func_isOverridableFunction_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isOverridableFunction_12.call(that);
			}
			if(super.__ks_func_isOverridableFunction_rt) {
				return super.__ks_func_isOverridableFunction_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameters() {
			return this.__ks_func_parameters_rt.call(null, this, this, arguments);
		}
		__ks_func_parameters_12() {
			return this._parameters;
		}
		__ks_func_parameters_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameters_12.call(that);
			}
			if(super.__ks_func_parameters_rt) {
				return super.__ks_func_parameters_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_37() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_37.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class TupleFieldDeclaration extends AbstractNode {
		static __ks_new_0(...args) {
			const o = Object.create(TupleFieldDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(TupleFieldDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._hasName = false;
		}
		__ks_cons_0(data, parent) {
			AbstractNode.prototype.__ks_cons_rt.call(null, this, [data, parent]);
			if(KSType.isValue(data.name)) {
				this._name = data.name.name;
				this._hasName = true;
			}
			this._parameter = new TupleFieldParameter(this, parent._function);
		}
		__ks_cons_1(type, parent) {
			AbstractNode.prototype.__ks_cons_rt.call(null, this, [new Dictionary(), parent]);
			this._type = type;
			let __ks_0;
			if(KSType.isValue(__ks_0 = this._type.__ks_func_name_5()) ? (this._name = __ks_0, true) : false) {
				this._hasName = true;
			}
			this._index = this._type.__ks_func_index_5();
			this._parameter = new TupleFieldParameter(this, parent._function);
			this._parameter.__ks_func_unflagValidation_1();
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, TupleFieldType);
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return TupleFieldDeclaration.prototype.__ks_cons_1.call(that, args[0], args[1]);
					}
				}
				if(t1(args[0]) && t1(args[1])) {
					return TupleFieldDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._parameter.__ks_func_analyse_0();
			this._parameter.__ks_func_prepare_0();
			if(!KSType.isValue(this._type)) {
				this._type = new TupleFieldType(this._scope, KSType.isValue(this._data.name) ? this._data.name.name : null, this._index, Type.__ks_sttc_fromAST_0(this._data.type, this), this._parameter.__ks_func_isRequired_1());
				if(KSType.isValue(this._data.defaultValue) && (KSHelper.valueOf(this._data.defaultValue.kind) === NodeKind.Identifier.value) && (this._data.defaultValue.name === "null")) {
					this._type.__ks_func_flagNullable_2();
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._parameter.__ks_func_translate_0();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		hasName() {
			return this.__ks_func_hasName_rt.call(null, this, this, arguments);
		}
		__ks_func_hasName_0() {
			return this._hasName;
		}
		__ks_func_hasName_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_hasName_0.call(that);
			}
			if(super.__ks_func_hasName_rt) {
				return super.__ks_func_hasName_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		index() {
			return this.__ks_func_index_rt.call(null, this, this, arguments);
		}
		__ks_func_index_4() {
			return this._index;
		}
		__ks_func_index_5(index) {
			this._index = index;
			return this;
		}
		__ks_func_index_rt(that, proto, args) {
			const t0 = KSType.isNumber;
			if(args.length === 0) {
				return proto.__ks_func_index_4.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_index_5.call(that, args[0]);
				}
			}
			if(super.__ks_func_index_rt) {
				return super.__ks_func_index_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_24() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_24.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		parameter() {
			return this.__ks_func_parameter_rt.call(null, this, this, arguments);
		}
		__ks_func_parameter_1() {
			return this._parameter;
		}
		__ks_func_parameter_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_parameter_1.call(that);
			}
			if(super.__ks_func_parameter_rt) {
				return super.__ks_func_parameter_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_38() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_38.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class TupleFieldParameter extends Parameter {
		static __ks_new_0(...args) {
			const o = Object.create(TupleFieldParameter.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._validation = true;
		}
		__ks_cons_0(field, parent) {
			Parameter.prototype.__ks_cons_rt.call(null, this, [field._data, parent]);
			this._field = field;
			this._data.modifiers = [];
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, TupleFieldDeclaration);
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return TupleFieldParameter.prototype.__ks_cons_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_analyse_0() {
			if(this._field.__ks_func_hasName_0() === true) {
				this._name = IdentifierParameter.__ks_new_0((() => {
					const d = new Dictionary();
					d.name = this._field.__ks_func_name_24();
					return d;
				})(), this, this._scope);
			}
			else {
				this._name = IdentifierParameter.__ks_new_0((() => {
					const d = new Dictionary();
					d.name = KSHelper.concatString("__ks_", this._field.__ks_func_index_4());
					return d;
				})(), this, this._scope);
			}
			this._name.setAssignment(AssignmentType.Parameter);
			this._name.analyse();
			for(let __ks_0 = 0, __ks_1 = this._name.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
				name = __ks_1[__ks_0];
				this._scope.define(name, false, null, this);
			}
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_25() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_25.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Parameter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toValidationFragments_0(fragments) {
			if(this._validation) {
				super.__ks_func_toValidationFragments_0(fragments);
			}
		}
		unflagValidation() {
			return this.__ks_func_unflagValidation_rt.call(null, this, this, arguments);
		}
		__ks_func_unflagValidation_1() {
			this._validation = false;
		}
		__ks_func_unflagValidation_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_unflagValidation_1.call(that);
			}
			if(super.__ks_func_unflagValidation_rt) {
				return super.__ks_func_unflagValidation_rt.call(null, that, Parameter.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	const AssignmentType = KSHelper.enum(Number, {
		Declaration: 0,
		Expression: 1,
		Neither: 2,
		Parameter: 3
	});
	const OperandType = KSHelper.enum(Number, {
		Any: 0,
		Enum: 1,
		Number: 2,
		String: 3
	});
	const Operator = KSHelper.enum(String, {
		Addition: "additive",
		And: "and",
		BitwiseAnd: "bitwise-and",
		BitwiseLeftShift: "bitwise-left-shift",
		BitwiseNot: "bitwise-not",
		BitwiseOr: "bitwise-or",
		BitwiseRightShift: "bitwise-right-shift",
		BitwiseXor: "bitwise-xor",
		DecrementPostfix: "postfix-decrement",
		DecrementPrefix: "prefix-decrement",
		Division: "divisive",
		GreaterThan: "greater-than",
		GreaterThanOrEqual: "greater-than-or-equal",
		Imply: "imply",
		IncrementPostfix: "postfix-increment",
		IncrementPrefix: "prefix-increment",
		LessThan: "less-than",
		LessThanOrEqual: "less-than-or-equal",
		Match: "match",
		Mismatch: "mismatch",
		Modulo: "modulo",
		Multiplication: "multiplicative",
		Negation: "negation",
		Negative: "negative",
		Or: "or",
		Quotient: "quotient",
		Subtraction: "subtractive",
		Xor: "xor"
	});
	const $operatorTypes = (() => {
		const d = new Dictionary();
		d[Operator.Addition] = ["Number"];
		d[Operator.And] = ["Boolean"];
		d[Operator.BitwiseAnd] = ["Number"];
		d[Operator.BitwiseLeftShift] = ["Number"];
		d[Operator.BitwiseNot] = ["Number"];
		d[Operator.BitwiseOr] = ["Number"];
		d[Operator.BitwiseRightShift] = ["Number"];
		d[Operator.BitwiseXor] = ["Number"];
		d[Operator.DecrementPostfix] = ["Number"];
		d[Operator.DecrementPrefix] = ["Number"];
		d[Operator.Division] = ["Number"];
		d[Operator.GreaterThan] = ["Number"];
		d[Operator.GreaterThanOrEqual] = ["Number"];
		d[Operator.Imply] = ["Boolean"];
		d[Operator.IncrementPostfix] = ["Number"];
		d[Operator.IncrementPrefix] = ["Number"];
		d[Operator.LessThan] = ["Number"];
		d[Operator.LessThanOrEqual] = ["Number"];
		d[Operator.Modulo] = ["Number"];
		d[Operator.Multiplication] = ["Number"];
		d[Operator.Negation] = ["Boolean"];
		d[Operator.Negative] = ["Number"];
		d[Operator.Or] = ["Boolean"];
		d[Operator.Quotient] = ["Number"];
		d[Operator.Subtraction] = ["Number"];
		d[Operator.Xor] = ["Boolean"];
		return d;
	})();
	class AssignmentOperatorExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(AssignmentOperatorExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AssignmentOperatorExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(AssignmentOperatorExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._await = false;
			this._left = null;
			this._right = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._left = $compile.expression(this._data.left, this);
			if(!(this.__ks_func_isAssigningBinding_0() === true) && (KSType.isClassInstance(this._left, ArrayBinding) || KSType.isClassInstance(this._left, ObjectBinding))) {
				SyntaxException.__ks_sttc_throwUnsupportedDestructuringAssignment_0(this);
			}
			if(this.__ks_func_isDeclararing_0() === true) {
				this._left.setAssignment(AssignmentType.Expression);
			}
			this._left.analyse();
			this._bindingScope = this.newScope(this._scope, ScopeType.Hollow);
			this._right = $compile.expression(this._data.right, this, this._bindingScope);
			this._right.analyse();
			this._await = this._right.isAwait();
			if(this.__ks_func_isDeclararing_0() === true) {
				this.defineVariables(this._left);
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._left.flagAssignable();
			this._left.prepare();
			let variable = this._left.variable();
			if(KSType.isValue(variable)) {
				if(variable.isInitialized() === true) {
					this._right.setExpectedType(variable.getRealType());
				}
				else {
					this._right.setExpectedType(variable.getDeclaredType());
				}
			}
			else {
				this._right.setExpectedType(this._left.type());
			}
			this._right.prepare();
			if(this._right.type().isInoperative() === true) {
				TypeException.throwUnexpectedInoperative(this._right, this);
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._left.translate();
			this._right.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		defineVariables() {
			return this.__ks_func_defineVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_defineVariables_4(left) {
			const statement = this.__ks_func_statement_0();
			statement.defineVariables(left, this._scope, this._leftMost, this._leftMost === this);
		}
		__ks_func_defineVariables_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_defineVariables_4.call(that, args[0]);
				}
			}
			if(super.__ks_func_defineVariables_rt) {
				return super.__ks_func_defineVariables_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAssigningBinding() {
			return this.__ks_func_isAssigningBinding_rt.call(null, this, this, arguments);
		}
		__ks_func_isAssigningBinding_0() {
			return false;
		}
		__ks_func_isAssigningBinding_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAssigningBinding_0.call(that);
			}
			if(super.__ks_func_isAssigningBinding_rt) {
				return super.__ks_func_isAssigningBinding_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isAwait_2() {
			return this._await;
		}
		__ks_func_isAwaiting_0() {
			return this._right.isAwaiting();
		}
		__ks_func_isComputed_0() {
			return true;
		}
		isDeclararing() {
			return this.__ks_func_isDeclararing_rt.call(null, this, this, arguments);
		}
		__ks_func_isDeclararing_0() {
			return false;
		}
		__ks_func_isDeclararing_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isDeclararing_0.call(that);
			}
			if(super.__ks_func_isDeclararing_rt) {
				return super.__ks_func_isDeclararing_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isDeclararingVariable() {
			return this.__ks_func_isDeclararingVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isDeclararingVariable_8(name) {
			return (this.__ks_func_isDeclararing_0() === true) && (this._left.isDeclararingVariable(name) === true);
		}
		__ks_func_isDeclararingVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isDeclararingVariable_8.call(that, args[0]);
				}
			}
			if(super.__ks_func_isDeclararingVariable_rt) {
				return super.__ks_func_isDeclararingVariable_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isExpectingType_2() {
			return this._left.isExpectingType();
		}
		isImmutable() {
			return this.__ks_func_isImmutable_rt.call(null, this, this, arguments);
		}
		__ks_func_isImmutable_7(variable) {
			return variable.isImmutable();
		}
		__ks_func_isImmutable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isImmutable_7.call(that, args[0]);
				}
			}
			if(super.__ks_func_isImmutable_rt) {
				return super.__ks_func_isImmutable_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isNullable_0() {
			return this._right.isNullable();
		}
		__ks_func_isUsingVariable_1(name) {
			return (this._left.isUsingVariable(name) === true) || (this._right.isUsingVariable(name) === true);
		}
		__ks_func_isUsingInstanceVariable_1(name) {
			return (this._left.isUsingInstanceVariable(name) === true) || (this._right.isUsingInstanceVariable(name) === true);
		}
		__ks_func_isUsingStaticVariable_1(__ks_class_1, varname) {
			return (this._left.isUsingStaticVariable(__ks_class_1, varname) === true) || (this._right.isUsingStaticVariable(__ks_class_1, varname) === true);
		}
		listAssignments() {
			return this.__ks_func_listAssignments_rt.call(null, this, this, arguments);
		}
		__ks_func_listAssignments_8(array) {
			return this._left.listAssignments(this._right.listAssignments(array));
		}
		__ks_func_listAssignments_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listAssignments_8.call(that, args[0]);
				}
			}
			if(super.__ks_func_listAssignments_rt) {
				return super.__ks_func_listAssignments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_setAssignment_2(assignment) {
		}
		__ks_func_setAssignment_0(assignment) {
			return this.__ks_func_setAssignment_2(assignment);
		}
		__ks_func_setAssignment_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_setAssignment_2.call(that, args[0]);
				}
			}
			return super.__ks_func_setAssignment_rt.call(null, that, Expression.prototype, args);
		}
		__ks_func_toNullableFragments_0(fragments) {
			fragments.compileNullable(this._right);
		}
		__ks_func_variable_1() {
			return this._left.variable();
		}
	}
	class NumericAssignmentOperatorExpression extends AssignmentOperatorExpression {
		__ks_init() {
			super.__ks_init();
			this._isEnum = false;
			this._isNative = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			if((this.__ks_func_isAcceptingEnum_0() === true) && (this._left.type().isEnum() === true) && (this._right.type().isEnum() === true) && (this._left.type().name() === this._right.type().name())) {
				this._isEnum = true;
				this._type = this._left.type();
			}
			else {
				if((this._left.type().isNumber() === true) && (this._right.type().isNumber() === true)) {
					this._isNative = true;
				}
				else if(this._left.type().canBeNumber() === true) {
					if(!(this._right.type().canBeNumber() === true)) {
						TypeException.throwInvalidOperand(this._right, this.__ks_func_operator_0(), this);
					}
				}
				else {
					TypeException.throwInvalidOperand(this._left, this.__ks_func_operator_0(), this);
				}
				if((this._left.type().isNullable() === true) || (this._right.type().isNullable() === true)) {
					this._type = this._scope.__ks_func_reference_0("Number").__ks_func_setNullable_0(true);
					this._isNative = false;
				}
				else {
					this._type = this._scope.__ks_func_reference_0("Number");
				}
				if(KSType.isClassInstance(this._left, IdentifierLiteral)) {
					this._left.type(this._type, this._scope, this);
				}
			}
		}
		isAcceptingEnum() {
			return this.__ks_func_isAcceptingEnum_rt.call(null, this, this, arguments);
		}
		__ks_func_isAcceptingEnum_0() {
			return false;
		}
		__ks_func_isAcceptingEnum_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAcceptingEnum_0.call(that);
			}
			if(super.__ks_func_isAcceptingEnum_rt) {
				return super.__ks_func_isAcceptingEnum_rt.call(null, that, AssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_56(fragments, mode) {
			if(this._isEnum) {
				this.__ks_func_toEnumFragments_0(fragments);
			}
			else if(this._isNative) {
				this.__ks_func_toNativeFragments_0(fragments);
			}
			else {
				fragments.compile(this._left).code(" = ").code($runtime.operator.__ks_0(this), "." + this.__ks_func_runtime_0() + "(").compile(this._left).code($comma);
				this._right.toOperandFragments(fragments, this.__ks_func_operator_0(), OperandType.Number);
				fragments.code(")");
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_56.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toEnumFragments() {
			return this.__ks_func_toEnumFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toEnumFragments_0(fragments) {
		}
		__ks_func_toEnumFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toEnumFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toEnumFragments_rt) {
				return super.__ks_func_toEnumFragments_rt.call(null, that, AssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toNativeFragments() {
			return this.__ks_func_toNativeFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toNativeFragments_0(fragments) {
			fragments.compile(this._left).code($space).code(this.__ks_func_symbol_0(), this._data.operator).code($space).compile(this._right);
		}
		__ks_func_toNativeFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toNativeFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toNativeFragments_rt) {
				return super.__ks_func_toNativeFragments_rt.call(null, that, AssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			return KSHelper.concatString(this._left.toQuote(), " ", this.__ks_func_symbol_0(), " ", this._right.toQuote());
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class AssignmentOperatorAddition extends AssignmentOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(AssignmentOperatorAddition.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AssignmentOperatorAddition.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(AssignmentOperatorAddition.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._isEnum = false;
			this._isNative = false;
			this._isNumber = false;
			this._isString = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			if((this._left.type().isEnum() === true) && (this._right.type().isEnum() === true) && (this._left.type().name() === this._right.type().name())) {
				this._isEnum = true;
				this._type = this._left.type();
			}
			else {
				if((this._left.type().isString() === true) || (this._right.type().isString() === true)) {
					this._isString = true;
					this._isNative = true;
				}
				else if((this._left.type().isNumber() === true) && (this._right.type().isNumber() === true)) {
					this._isNumber = true;
					this._isNative = true;
				}
				else if(((this._left.type().canBeString(false) === true) && !(this._left.type().canBeNumber(false) === true)) || ((this._right.type().canBeString(false) === true) && !(this._right.type().canBeNumber(false) === true))) {
					this._isString = true;
				}
				else if((this._left.type().isAny() === true) || (this._right.type().isAny() === true)) {
				}
				else if(this._left.type().canBeNumber() === true) {
					if(!(this._left.type().canBeString(false) === true)) {
						if(this._right.type().canBeNumber() === true) {
							if(!(this._right.type().canBeString(false) === true)) {
								this._isNumber = true;
							}
						}
						else {
							TypeException.throwInvalidOperand(this._right, Operator.Addition, this);
						}
					}
				}
				else {
					TypeException.throwInvalidOperand(this._left, Operator.Addition, this);
				}
				const nullable = (this._left.type().isNullable() === true) || (this._right.type().isNullable() === true);
				if(nullable) {
					this._isNative = false;
				}
				if(this._isNumber) {
					this._type = nullable ? this._scope.__ks_func_reference_0("Number").__ks_func_setNullable_0(true) : this._scope.__ks_func_reference_0("Number");
				}
				else if(this._isString) {
					this._type = this._scope.__ks_func_reference_0("String");
				}
				else {
					const numberType = nullable ? this._scope.__ks_func_reference_0("Number").__ks_func_setNullable_0(true) : this._scope.__ks_func_reference_0("Number");
					this._type = UnionType.__ks_new_0(this._scope, [numberType, this._scope.__ks_func_reference_0("String")], false);
				}
			}
			if(KSType.isClassInstance(this._left, IdentifierLiteral)) {
				this._left.type(this._type, this._scope, this);
			}
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_57(fragments, mode) {
			if(this._isEnum) {
				fragments.compile(this._left).code($equals, this._type.name(), "(").compile(this._left).code(" | ");
				this._right.toOperandFragments(fragments, Operator.Addition, OperandType.Enum);
				fragments.code(")");
			}
			else if(this._isNative) {
				fragments.compile(this._left).code(" += ").compile(this._right);
			}
			else {
				fragments.compile(this._left).code(" = ");
				let type = null;
				if(this._isNumber) {
					fragments.code($runtime.operator.__ks_0(this), ".addition(");
					type = OperandType.Number;
				}
				else if(this._isString) {
					fragments.code($runtime.helper.__ks_0(this), ".concatString(");
					type = OperandType.String;
				}
				else {
					fragments.code($runtime.operator.__ks_0(this), ".addOrConcat(");
					type = OperandType.Any;
				}
				fragments.compile(this._left).code($comma);
				this._right.toOperandFragments(fragments, Operator.Addition, type);
				fragments.code(")");
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_57.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class AssignmentOperatorBitwiseAnd extends NumericAssignmentOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(AssignmentOperatorBitwiseAnd.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AssignmentOperatorBitwiseAnd.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(AssignmentOperatorBitwiseAnd.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_isAcceptingEnum_0() {
			return true;
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.BitwiseAnd;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "bitwiseAnd";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "&=";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toEnumFragments_0(fragments) {
			fragments.compile(this._left).code($equals, this._type.name(), "(").compile(this._left).code(" & ").compile(this._right).code(")");
		}
	}
	class AssignmentOperatorBitwiseLeftShift extends NumericAssignmentOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(AssignmentOperatorBitwiseLeftShift.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AssignmentOperatorBitwiseLeftShift.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(AssignmentOperatorBitwiseLeftShift.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.BitwiseLeftShift;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "bitwiseLeftShift";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "<<=";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class AssignmentOperatorBitwiseOr extends NumericAssignmentOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(AssignmentOperatorBitwiseOr.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AssignmentOperatorBitwiseOr.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(AssignmentOperatorBitwiseOr.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		getEnumSymbol() {
			return this.__ks_func_getEnumSymbol_rt.call(null, this, this, arguments);
		}
		__ks_func_getEnumSymbol_0() {
			return "|";
		}
		__ks_func_getEnumSymbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getEnumSymbol_0.call(that);
			}
			if(super.__ks_func_getEnumSymbol_rt) {
				return super.__ks_func_getEnumSymbol_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isAcceptingEnum_0() {
			return true;
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.BitwiseOr;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "bitwiseOr";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "|=";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toEnumFragments_0(fragments) {
			fragments.compile(this._left).code($equals, this._type.name(), "(").compile(this._left).code(" | ").compile(this._right).code(")");
		}
	}
	class AssignmentOperatorBitwiseRightShift extends NumericAssignmentOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(AssignmentOperatorBitwiseRightShift.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AssignmentOperatorBitwiseRightShift.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(AssignmentOperatorBitwiseRightShift.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.BitwiseRightShift;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "bitwiseRightShift";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return ">>=";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class AssignmentOperatorBitwiseXor extends NumericAssignmentOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(AssignmentOperatorBitwiseXor.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AssignmentOperatorBitwiseXor.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(AssignmentOperatorBitwiseXor.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.BitwiseXor;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "bitwiseXor";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "^=";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class AssignmentOperatorDivision extends NumericAssignmentOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(AssignmentOperatorDivision.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AssignmentOperatorDivision.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(AssignmentOperatorDivision.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.Division;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "division";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "/=";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class AssignmentOperatorEquality extends AssignmentOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(AssignmentOperatorEquality.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AssignmentOperatorEquality.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(AssignmentOperatorEquality.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._condition = false;
			this._ignorable = false;
			this._lateinit = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_analyse_0() {
			this._condition = KSType.isClassInstance(this.__ks_func_statement_0(), IfStatement);
			super.__ks_func_analyse_0();
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			if(this._condition && this._lateinit) {
				this._statement.initializeLateVariable(this._left.name(), this._right.type(), true);
			}
			else {
				this._left.initializeVariables(this._right.type(), this);
			}
			this._type = this._left.getDeclaredType();
			if(this.__ks_func_isInDestructor_0() === true) {
				this._type = NullType.Explicit;
			}
			else {
				if(!((this._right.type().matchContentOf(this._type) === true) || (KSType.isClassInstance(this._left, ObjectBinding) && (this._right.type().isDictionary() === true)))) {
					TypeException.throwInvalidAssignement(this._left, this._type, this._right.type(), this);
				}
				if((this._left.__ks_func_isInferable_0() === true) && (this._right.type().isMorePreciseThan(this._type) === true)) {
					this._type = this._right.type();
				}
			}
		}
		__ks_func_acquireReusable_1(acquire) {
			this._right.acquireReusable(this._left.isSplitAssignment());
		}
		__ks_func_defineVariables_4(left) {
			if(this._condition) {
				const names = [];
				for(let __ks_0 = 0, __ks_1 = left.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
					name = __ks_1[__ks_0];
					let variable = this._scope.getVariable(name);
					if(KSType.isValue(variable)) {
						if(variable.__ks_func_isLateInit_0() === true) {
							throw new NotImplementedException(this);
						}
						else if(variable.__ks_func_isImmutable_0() === true) {
							ReferenceException.throwImmutable(name, this);
						}
					}
					else {
						names.push(name);
					}
				}
				if(names.length > 0) {
					this._statement.defineVariables(left, names, this._scope, this._leftMost, this._leftMost === this);
				}
			}
			else {
				this._statement.defineVariables(left, this._scope, this._leftMost, this._leftMost === this);
			}
		}
		__ks_func_flagAssignable_0() {
		}
		__ks_func_hasExceptions_2() {
			return (this._right.isAwaiting() === true) && (this._right.hasExceptions() === true);
		}
		__ks_func_inferTypes_0(inferables) {
			if(this._left.isInferable() === true) {
				inferables[this._left.path()] = (() => {
					const d = new Dictionary();
					d.isVariable = KSType.isClassInstance(this._left, IdentifierLiteral);
					d.type = this._type;
					return d;
				})();
			}
			return inferables;
		}
		__ks_func_initializeVariable_9(variable) {
			this._parent.initializeVariable(variable, this);
		}
		__ks_func_initializeVariable_6(variable, expression) {
			this._parent.initializeVariable(variable, expression);
		}
		__ks_func_initializeVariable_rt(that, proto, args) {
			const t0 = value => KSType.isStructInstance(value, VariableBrief);
			const t1 = value => KSType.isClassInstance(value, Expression);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_initializeVariable_9.call(that, args[0]);
				}
			}
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_initializeVariable_6.call(that, args[0], args[1]);
				}
			}
			return super.__ks_func_initializeVariable_rt.call(null, that, AssignmentOperatorExpression.prototype, args);
		}
		initializeVariables() {
			return this.__ks_func_initializeVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_initializeVariables_7(type, node) {
		}
		__ks_func_initializeVariables_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isClassInstance(value, Expression);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_initializeVariables_7.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_initializeVariables_rt) {
				return super.__ks_func_initializeVariables_rt.call(null, that, AssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isAssigningBinding_0() {
			return true;
		}
		__ks_func_isDeclarable_0() {
			return this._left.isDeclarable();
		}
		__ks_func_isDeclararing_0() {
			return true;
		}
		__ks_func_isIgnorable_0() {
			return this._ignorable;
		}
		isInDestructor() {
			return this.__ks_func_isInDestructor_rt.call(null, this, this, arguments);
		}
		__ks_func_isInDestructor_0() {
			if(!KSType.isClassInstance(this._parent, ExpressionStatement)) {
				return false;
			}
			let parent = this._parent;
			while(KSType.isValue(parent)) {
				parent = parent.__ks_func_parent_0();
				if(KSType.isClassInstance(parent, ClassDestructorDeclaration)) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isInDestructor_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInDestructor_0.call(that);
			}
			if(super.__ks_func_isInDestructor_rt) {
				return super.__ks_func_isInDestructor_rt.call(null, that, AssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_releaseReusable_1() {
			this._right.releaseReusable();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_58(fragments, mode) {
			if(this._right.isAwaiting() === true) {
				return this._right.toFragments(fragments, mode);
			}
			else if(this._left.isUsingSetter() === true) {
				this._left.toSetterFragments(fragments, this._right);
			}
			else {
				fragments.compile(this._left).code($equals).compile(this._right);
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_58.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toAssignmentFragments() {
			return this.__ks_func_toAssignmentFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toAssignmentFragments_5(fragments) {
			if(KSType.isValue(this._left.toAssignmentFragments)) {
				this._left.toAssignmentFragments(fragments, this._right);
			}
			else {
				fragments.compile(this._left).code($equals).compile(this._right);
			}
		}
		__ks_func_toAssignmentFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toAssignmentFragments_5.call(that, args[0]);
				}
			}
			if(super.__ks_func_toAssignmentFragments_rt) {
				return super.__ks_func_toAssignmentFragments_rt.call(null, that, AssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toBooleanFragments_10(fragments, mode, junction) {
			fragments.compile(this._left).code($equals).wrap(this._right);
		}
		__ks_func_toBooleanFragments_5(fragments, mode, junction) {
			return this.__ks_func_toBooleanFragments_10(fragments, mode, junction);
		}
		__ks_func_toBooleanFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toBooleanFragments_10.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_toBooleanFragments_rt.call(null, that, AssignmentOperatorExpression.prototype, args);
		}
		__ks_func_toQuote_0() {
			return KSHelper.concatString(this._left.toQuote(), " = ", this._right.toQuote());
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class AssignmentOperatorExistential extends AssignmentOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(AssignmentOperatorExistential.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AssignmentOperatorExistential.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(AssignmentOperatorExistential.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._condition = false;
			this._lateinit = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_analyse_0() {
			this._condition = KSType.isClassInstance(this.__ks_func_statement_0(), IfStatement);
			super.__ks_func_analyse_0();
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			this._right.acquireReusable(true);
			this._right.releaseReusable();
			if(KSType.isClassInstance(this._left, IdentifierLiteral)) {
				const type = this._right.type().setNullable(false);
				if(this._condition) {
					if(this._lateinit) {
						this._statement.initializeLateVariable(this._left.__ks_func_name_13(), type, true);
					}
					else {
						this._left.type(type, this._scope, this);
					}
				}
				else {
					this._left.type(type, this._scope, this);
				}
			}
		}
		__ks_func_defineVariables_4(left) {
			if(this._condition) {
				const names = [];
				for(let __ks_0 = 0, __ks_1 = left.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
					name = __ks_1[__ks_0];
					let variable = this._scope.getVariable(name);
					if(KSType.isValue(variable)) {
						if(variable.__ks_func_isLateInit_0() === true) {
							this._statement.addInitializableVariable(variable, true, this);
							this._lateinit = true;
						}
						else if(variable.__ks_func_isImmutable_0() === true) {
							ReferenceException.throwImmutable(name, this);
						}
					}
					else {
						names.push(name);
					}
				}
				if(names.length > 0) {
					this._statement.defineVariables(left, names, this._scope, this._leftMost, this._leftMost === this);
				}
			}
			else {
				this._statement.defineVariables(left, this._scope, this._leftMost, this._leftMost === this);
			}
		}
		__ks_func_inferWhenTrueTypes_0(inferables) {
			if(this._left.isInferable() === true) {
				inferables[this._left.path()] = (() => {
					const d = new Dictionary();
					d.isVariable = KSType.isClassInstance(this._left, IdentifierLiteral);
					d.type = this._right.type().setNullable(false);
					return d;
				})();
			}
			return inferables;
		}
		__ks_func_isAssigningBinding_0() {
			return true;
		}
		__ks_func_isDeclararing_0() {
			return true;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_59(fragments, mode) {
			if(this._right.isNullable() === true) {
				fragments.wrapNullable(this._right).code(" && ").code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue("), this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue("), this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? ");
			if(KSType.isValue(this._left.toAssignmentFragments)) {
				this._left.toAssignmentFragments(fragments, this._right);
			}
			else {
				fragments.compile(this._left).code($equals).wrap(this._right);
			}
			fragments.code(" : null");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_59.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toBooleanFragments_11(fragments, mode, junction) {
			if(this._right.isNullable() === true) {
				fragments.wrapNullable(this._right).code(" && ").code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue("), this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue("), this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? (");
			if(KSType.isValue(this._left.toAssignmentFragments)) {
				this._left.toAssignmentFragments(fragments, this._right);
			}
			else {
				fragments.compile(this._left).code($equals).wrap(this._right);
			}
			fragments.code(", true) : false");
		}
		__ks_func_toBooleanFragments_5(fragments, mode, junction) {
			return this.__ks_func_toBooleanFragments_11(fragments, mode, junction);
		}
		__ks_func_toBooleanFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toBooleanFragments_11.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_toBooleanFragments_rt.call(null, that, AssignmentOperatorExpression.prototype, args);
		}
		__ks_func_toQuote_0() {
			return KSHelper.concatString(this._left.toQuote(), " ?= ", this._right.toQuote());
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("Boolean");
		}
	}
	class AssignmentOperatorModulo extends NumericAssignmentOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(AssignmentOperatorModulo.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AssignmentOperatorModulo.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(AssignmentOperatorModulo.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.Modulo;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "modulo";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "%=";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class AssignmentOperatorMultiplication extends NumericAssignmentOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(AssignmentOperatorMultiplication.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AssignmentOperatorMultiplication.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(AssignmentOperatorMultiplication.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.Multiplication;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "multiplication";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "*=";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class AssignmentOperatorNonExistential extends AssignmentOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(AssignmentOperatorNonExistential.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AssignmentOperatorNonExistential.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(AssignmentOperatorNonExistential.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._condition = false;
			this._lateinit = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_analyse_0() {
			this._condition = KSType.isClassInstance(this.__ks_func_statement_0(), IfStatement);
			super.__ks_func_analyse_0();
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			this._right.acquireReusable(true);
			this._right.releaseReusable();
			if(KSType.isClassInstance(this._left, IdentifierLiteral)) {
				const type = this._right.type().setNullable(false);
				if(this._condition) {
					let scope;
					if(this._lateinit) {
						this._statement.initializeLateVariable(this._left.__ks_func_name_13(), type, false);
					}
					else if(KSType.isValue((scope = this._statement.getWhenFalseScope()))) {
						this._left.type(type, scope, this);
					}
				}
				else {
					this._left.type(type, this._scope, this);
				}
			}
		}
		__ks_func_defineVariables_4(left) {
			if(this._condition) {
				const scope = this._statement.__ks_func_scope_0();
				const names = [];
				for(let __ks_0 = 0, __ks_1 = left.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
					name = __ks_1[__ks_0];
					let variable = scope.getVariable(name);
					if(KSType.isValue(variable)) {
						if(variable.isLateInit() === true) {
							if(this._parent === this._statement) {
								this._statement.addInitializableVariable(variable, false, this);
							}
							else {
								throw new NotImplementedException(this);
							}
							this._lateinit = true;
						}
						else if(variable.isImmutable() === true) {
							ReferenceException.throwImmutable(name, this);
						}
					}
					else {
						names.push(name);
					}
				}
				if(names.length > 0) {
					this._statement.defineVariables(left, names, this._scope, this._leftMost, this._leftMost === this);
				}
			}
			else {
				this._statement.defineVariables(left, this._scope, this._leftMost, this._leftMost === this);
			}
		}
		__ks_func_inferWhenFalseTypes_0(inferables) {
			if(this._left.isInferable() === true) {
				inferables[this._left.path()] = (() => {
					const d = new Dictionary();
					d.isVariable = KSType.isClassInstance(this._left, IdentifierLiteral);
					d.type = this._right.type().setNullable(false);
					return d;
				})();
			}
			return inferables;
		}
		__ks_func_isAssigningBinding_0() {
			return true;
		}
		__ks_func_isDeclararing_0() {
			return true;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_60(fragments, mode) {
			if(this._right.isNullable() === true) {
				fragments.wrapNullable(this._right).code(" && ").code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue("), this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue("), this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? ").compile(this._left).code($equals).wrap(this._right).code(" : null");
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_60.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toBooleanFragments_12(fragments, mode, junction) {
			if(this._right.isNullable() === true) {
				fragments.wrapNullable(this._right).code(" && ").code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue("), this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue("), this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? (").compile(this._left).code($equals).wrap(this._right).code(", false) : true");
		}
		__ks_func_toBooleanFragments_5(fragments, mode, junction) {
			return this.__ks_func_toBooleanFragments_12(fragments, mode, junction);
		}
		__ks_func_toBooleanFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toBooleanFragments_12.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_toBooleanFragments_rt.call(null, that, AssignmentOperatorExpression.prototype, args);
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("Boolean");
		}
	}
	class AssignmentOperatorNullCoalescing extends AssignmentOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(AssignmentOperatorNullCoalescing.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AssignmentOperatorNullCoalescing.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(AssignmentOperatorNullCoalescing.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_61(fragments, mode) {
			if(this._left.isNullable() === true) {
				fragments.code("(");
				this._left.toNullableFragments(fragments);
				fragments.code(KSHelper.concatString(" && ", $runtime.type.__ks_0(this), ".isValue(")).compile(this._left).code("))");
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue(")).compile(this._left).code(")");
			}
			fragments.code(" ? null : ").compile(this._left).code($equals).compile(this._right);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_61.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toStatementFragments() {
			return this.__ks_func_toStatementFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toStatementFragments_54(fragments, mode) {
			let ctrl = fragments.newControl();
			ctrl.code("if(!");
			if(this._left.isNullable() === true) {
				ctrl.code("(");
				this._left.toNullableFragments(ctrl);
				ctrl.code(KSHelper.concatString(" && ", $runtime.type.__ks_0(this), ".isValue(")).compile(this._left).code("))");
			}
			else {
				ctrl.code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue(")).compile(this._left).code(")");
			}
			ctrl.code(")").step().newLine().compile(this._left).code($equals).compile(this._right).done();
			ctrl.done();
		}
		__ks_func_toStatementFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toStatementFragments_54.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toStatementFragments_rt) {
				return super.__ks_func_toStatementFragments_rt.call(null, that, AssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class AssignmentOperatorQuotient extends NumericAssignmentOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(AssignmentOperatorQuotient.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AssignmentOperatorQuotient.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(AssignmentOperatorQuotient.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.Quotient;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "quotient";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "/.=";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toNativeFragments_0(fragments) {
			fragments.compile(this._left).code($equals).code("Number.parseInt(").compile(this._left).code(" / ").compile(this._right).code(")");
		}
	}
	class AssignmentOperatorSubtraction extends NumericAssignmentOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(AssignmentOperatorSubtraction.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(AssignmentOperatorSubtraction.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(AssignmentOperatorSubtraction.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_isAcceptingEnum_0() {
			return true;
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.Subtraction;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "subtraction";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "-=";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericAssignmentOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toEnumFragments_0(fragments) {
			fragments.compile(this._left).code($equals, this._type.name(), "(").compile(this._left).code(" & ~");
			this._right.toOperandFragments(fragments, Operator.Subtraction, OperandType.Enum);
			fragments.code(")");
		}
	}
	class PolyadicOperatorExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(PolyadicOperatorExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(PolyadicOperatorExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(PolyadicOperatorExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._operands = [];
			this._tested = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._data.operands.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.operands[__ks_0];
				let operand = $compile.expression(data, this, void 0);
				operand.analyse();
				this._operands.push(operand);
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.prepare();
				if(operand.type().isInoperative() === true) {
					TypeException.throwUnexpectedInoperative(operand, this);
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_acquireReusable_1(acquire) {
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.acquireReusable(false);
				operand.releaseReusable();
			}
		}
		__ks_func_releaseReusable_1() {
		}
		__ks_func_hasExceptions_2() {
			return false;
		}
		__ks_func_isComputed_0() {
			return true;
		}
		__ks_func_isNullable_0() {
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(operand.isNullable() === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isUsingVariable_1(name) {
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(operand.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		listAssignments() {
			return this.__ks_func_listAssignments_rt.call(null, this, this, arguments);
		}
		__ks_func_listAssignments_9(array) {
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.listAssignments(array);
			}
			return array;
		}
		__ks_func_listAssignments_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listAssignments_9.call(that, args[0]);
				}
			}
			if(super.__ks_func_listAssignments_rt) {
				return super.__ks_func_listAssignments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_62(fragments, mode) {
			const test = (this.__ks_func_isNullable_0() === true) && !this._tested;
			if(test) {
				fragments.compileNullable(this).code(" ? ");
			}
			this.toOperatorFragments(fragments);
			if(test) {
				fragments.code(" : false");
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_62.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toNullableFragments_0(fragments) {
			if(!this._tested) {
				let nf = false;
				for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
					operand = this._operands[__ks_0];
					if(operand.isNullable() === true) {
						if(nf) {
							fragments.code(" && ");
						}
						else {
							nf = true;
						}
						fragments.compileNullable(operand);
					}
				}
				this._tested = true;
			}
		}
	}
	class NumericPolyadicOperatorExpression extends PolyadicOperatorExpression {
		__ks_init() {
			super.__ks_init();
			this._isEnum = false;
			this._isNative = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			if((this.__ks_func_isAcceptingEnum_1() === true) && (this._operands[0].type().isEnum() === true)) {
				const name = this._operands[0].type().name();
				this._isEnum = true;
				for(let __ks_0 = 1, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
					operand = this._operands[__ks_0];
					if(!(operand.type().isEnum() === true) || (operand.type().name() !== name)) {
						this._isEnum = false;
						break;
					}
				}
				if(this._isEnum) {
					this._type = this._operands[0].type();
				}
			}
			if(!this._isEnum) {
				let nullable = false;
				this._isNative = true;
				for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
					operand = this._operands[__ks_0];
					if(operand.type().isNullable() === true) {
						nullable = true;
						this._isNative = false;
					}
					if(operand.type().isNumber() === true) {
					}
					else if(operand.type().canBeNumber() === true) {
						this._isNative = false;
					}
					else {
						TypeException.throwInvalidOperand(operand, this.__ks_func_operator_0(), this);
					}
				}
				this._type = nullable ? this._scope.__ks_func_reference_0("Number").__ks_func_setNullable_0(true) : this._scope.__ks_func_reference_0("Number");
			}
		}
		__ks_func_translate_0() {
			super.__ks_func_translate_0();
			if(this._isEnum) {
				const type = this._parent.type();
				if(KSType.isClassInstance(this._parent, AssignmentOperatorEquality) || KSType.isClassInstance(this._parent, VariableDeclaration)) {
					if(type.isEnum() === true) {
						if(this._type.name() !== type.name()) {
							this._isEnum = false;
							this._isNative = true;
						}
					}
					else if(type.isNumber() === true) {
						this._isEnum = false;
						this._isNative = true;
					}
				}
				else if((type.isBoolean() === true) || ((type.isEnum() === true) && (this._type.name() === type.name()))) {
					this._isEnum = false;
					this._isNative = true;
				}
			}
		}
		isAcceptingEnum() {
			return this.__ks_func_isAcceptingEnum_rt.call(null, this, this, arguments);
		}
		__ks_func_isAcceptingEnum_1() {
			return false;
		}
		__ks_func_isAcceptingEnum_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAcceptingEnum_1.call(that);
			}
			if(super.__ks_func_isAcceptingEnum_rt) {
				return super.__ks_func_isAcceptingEnum_rt.call(null, that, PolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isComputed_0() {
			return this._isNative;
		}
		toEnumFragments() {
			return this.__ks_func_toEnumFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toEnumFragments_1(fragments) {
		}
		__ks_func_toEnumFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toEnumFragments_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_toEnumFragments_rt) {
				return super.__ks_func_toEnumFragments_rt.call(null, that, PolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toNativeFragments() {
			return this.__ks_func_toNativeFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toNativeFragments_1(fragments) {
			for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
				operand = this._operands[index];
				if(index !== 0) {
					fragments.code($space).code(this.__ks_func_symbol_0(), this._data.operator).code($space);
				}
				fragments.wrap(operand);
			}
		}
		__ks_func_toNativeFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toNativeFragments_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_toNativeFragments_rt) {
				return super.__ks_func_toNativeFragments_rt.call(null, that, PolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toOperandFragments_0(fragments, operator, type) {
			if(this._isEnum) {
				this.__ks_func_toEnumFragments_1(fragments);
			}
			else if((operator.valueOf() === this.__ks_func_operator_0().value) && (type.valueOf() === OperandType.Number.value)) {
				for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
					operand = this._operands[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(operand);
				}
			}
			else {
				this.__ks_func_toOperatorFragments_0(fragments);
			}
		}
		toOperatorFragments() {
			return this.__ks_func_toOperatorFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toOperatorFragments_0(fragments) {
			if(this._isEnum) {
				fragments.code(this._type.name(), "(");
				this.__ks_func_toEnumFragments_1(fragments);
				fragments.code(")");
			}
			else if(this._isNative) {
				this.__ks_func_toNativeFragments_1(fragments);
			}
			else {
				fragments.code($runtime.operator.__ks_0(this), "." + this.__ks_func_runtime_0() + "(");
				for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
					operand = this._operands[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(operand);
				}
				fragments.code(")");
			}
		}
		__ks_func_toOperatorFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toOperatorFragments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toOperatorFragments_rt) {
				return super.__ks_func_toOperatorFragments_rt.call(null, that, PolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			let fragments = "";
			for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
				operand = this._operands[index];
				if(index !== 0) {
					fragments += " " + this.__ks_func_symbol_0() + " ";
				}
				fragments = KSHelper.concatString(fragments, operand.toQuote());
			}
			return fragments;
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class PolyadicOperatorAddition extends PolyadicOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(PolyadicOperatorAddition.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(PolyadicOperatorAddition.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(PolyadicOperatorAddition.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._expectingEnum = true;
			this._isEnum = false;
			this._isNative = false;
			this._isNumber = false;
			this._isString = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			if(this._operands[0].type().isEnum() === true) {
				const name = this._operands[0].type().name();
				this._isEnum = true;
				for(let __ks_0 = 1, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
					operand = this._operands[__ks_0];
					if(!(operand.type().isEnum() === true) || (operand.type().name() !== name)) {
						this._isEnum = false;
						break;
					}
				}
				if(this._isEnum) {
					if(this._expectingEnum) {
						this._type = this._operands[0].type();
					}
					else {
						this._type = this._operands[0].type().discard().type();
					}
				}
			}
			if(!this._isEnum) {
				let nullable = false;
				this._isNative = true;
				for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
					operand = this._operands[__ks_0];
					if(operand.type().isNullable() === true) {
						nullable = true;
						this._isNative = false;
					}
					if(operand.type().isString() === true) {
						this._isString = true;
					}
					else if((operand.type().canBeString(false) === true) && !(operand.type().canBeNumber(false) === true)) {
						this._isString = true;
						this._isNative = false;
					}
				}
				if(!this._isString) {
					this._isNumber = true;
					let notNumber = null;
					for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1 && (this._isNative || this._isNumber); ++__ks_0) {
						operand = this._operands[__ks_0];
						if(operand.type().isNumber() === true) {
						}
						else if(operand.type().isAny() === true) {
							this._isNumber = false;
							this._isNative = false;
						}
						else if(operand.type().canBeNumber(false) === true) {
							this._isNative = false;
							if(operand.type().canBeString(false) === true) {
								this._isNumber = false;
							}
						}
						else if(notNumber === null) {
							notNumber = operand;
						}
					}
					if(this._isNumber && (notNumber !== null)) {
						TypeException.__ks_sttc_throwInvalidOperand_0(notNumber, Operator.Addition, this);
					}
				}
				if(this._isNumber) {
					this._type = nullable ? this._scope.__ks_func_reference_0("Number").__ks_func_setNullable_0(true) : this._scope.__ks_func_reference_0("Number");
				}
				else if(this._isString) {
					this._type = this._scope.__ks_func_reference_0("String");
				}
				else {
					const numberType = nullable ? this._scope.__ks_func_reference_0("Number").__ks_func_setNullable_0(true) : this._scope.__ks_func_reference_0("Number");
					this._type = UnionType.__ks_new_0(this._scope, [numberType, this._scope.__ks_func_reference_0("String")], false);
				}
			}
		}
		__ks_func_isComputed_0() {
			return this._isNative;
		}
		__ks_func_setExpectedType_1(type) {
			if(!(type.__ks_func_isEnum_0() === true) && ((type.__ks_func_isNumber_0() === true) || (type.__ks_func_isString_0() === true))) {
				this._expectingEnum = false;
			}
		}
		__ks_func_toOperandFragments_0(fragments, operator, type) {
			if(operator.valueOf() === Operator.Addition.value) {
				if((type.valueOf() === OperandType.Enum.value) && (this._isEnum || this._isNumber)) {
					for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
						operand = this._operands[index];
						if(index !== 0) {
							fragments.code(" | ");
						}
						fragments.wrap(operand);
					}
				}
				else if((this._isNumber && (type.valueOf() === OperandType.Number.value)) || (this._isString && (type === OperandType.String))) {
					for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
						operand = this._operands[index];
						if(index !== 0) {
							fragments.code($comma);
						}
						fragments.compile(operand);
					}
				}
				else {
					this.__ks_func_toOperatorFragments_1(fragments);
				}
			}
			else {
				this.__ks_func_toOperatorFragments_1(fragments);
			}
		}
		toOperatorFragments() {
			return this.__ks_func_toOperatorFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toOperatorFragments_1(fragments) {
			if(this._isEnum) {
				let operator = null;
				if(this._operands[0].type().discard().isFlags() === true) {
					operator = " | ";
				}
				else {
					operator = " + ";
				}
				if(this._expectingEnum) {
					fragments.code(this._type.name(), "(");
					for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
						operand = this._operands[index];
						if(index !== 0) {
							fragments.code(operator);
						}
						fragments.wrap(operand);
					}
					fragments.code(")");
				}
				else {
					for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
						operand = this._operands[index];
						if(index !== 0) {
							fragments.code(operator);
						}
						fragments.wrap(operand);
					}
				}
			}
			else if(this._isNative) {
				for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
					operand = this._operands[index];
					if(index !== 0) {
						fragments.code($space).code("+", this._data.operator).code($space);
					}
					fragments.wrap(operand);
				}
			}
			else {
				if(this._isNumber) {
					fragments.code($runtime.operator.__ks_0(this), ".addition(");
				}
				else if(this._isString) {
					fragments.code($runtime.helper.__ks_0(this), ".concatString(");
				}
				else {
					fragments.code($runtime.operator.__ks_0(this), ".addOrConcat(");
				}
				for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
					operand = this._operands[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(operand);
				}
				fragments.code(")");
			}
		}
		__ks_func_toOperatorFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toOperatorFragments_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_toOperatorFragments_rt) {
				return super.__ks_func_toOperatorFragments_rt.call(null, that, PolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			let fragments = "";
			for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
				operand = this._operands[index];
				if(index !== 0) {
					fragments += " + ";
				}
				fragments = KSHelper.concatString(fragments, operand.toQuote());
			}
			return fragments;
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class PolyadicOperatorBitwiseAnd extends NumericPolyadicOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(PolyadicOperatorBitwiseAnd.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(PolyadicOperatorBitwiseAnd.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(PolyadicOperatorBitwiseAnd.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_isAcceptingEnum_1() {
			return true;
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.BitwiseAnd;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "bitwiseAnd";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "&";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toEnumFragments_1(fragments) {
			for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
				operand = this._operands[index];
				if(index !== 0) {
					fragments.code(" & ");
				}
				fragments.wrap(operand);
			}
		}
	}
	class PolyadicOperatorBitwiseLeftShift extends NumericPolyadicOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(PolyadicOperatorBitwiseLeftShift.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(PolyadicOperatorBitwiseLeftShift.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(PolyadicOperatorBitwiseLeftShift.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.BitwiseLeftShift;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "bitwiseLeftShift";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "<<";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class PolyadicOperatorBitwiseOr extends NumericPolyadicOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(PolyadicOperatorBitwiseOr.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(PolyadicOperatorBitwiseOr.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(PolyadicOperatorBitwiseOr.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_isAcceptingEnum_1() {
			return true;
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.BitwiseOr;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "bitwiseOr";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "|";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toEnumFragments_1(fragments) {
			for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
				operand = this._operands[index];
				if(index !== 0) {
					fragments.code(" & ");
				}
				fragments.wrap(operand);
			}
		}
	}
	class PolyadicOperatorBitwiseRightShift extends NumericPolyadicOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(PolyadicOperatorBitwiseRightShift.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(PolyadicOperatorBitwiseRightShift.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(PolyadicOperatorBitwiseRightShift.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.BitwiseRightShift;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "bitwiseRightShift";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return ">>";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class PolyadicOperatorBitwiseXor extends NumericPolyadicOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(PolyadicOperatorBitwiseXor.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(PolyadicOperatorBitwiseXor.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(PolyadicOperatorBitwiseXor.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.BitwiseXor;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "bitwiseXor";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "^";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class PolyadicOperatorDivision extends NumericPolyadicOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(PolyadicOperatorDivision.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(PolyadicOperatorDivision.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(PolyadicOperatorDivision.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.Division;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "division";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "/";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class PolyadicOperatorModulo extends NumericPolyadicOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(PolyadicOperatorModulo.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(PolyadicOperatorModulo.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(PolyadicOperatorModulo.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.Modulo;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "modulo";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "%";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class PolyadicOperatorMultiplication extends NumericPolyadicOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(PolyadicOperatorMultiplication.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(PolyadicOperatorMultiplication.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(PolyadicOperatorMultiplication.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.Multiplication;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "multiplication";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "*";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class PolyadicOperatorNullCoalescing extends PolyadicOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(PolyadicOperatorNullCoalescing.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(PolyadicOperatorNullCoalescing.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(PolyadicOperatorNullCoalescing.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_analyse_0() {
			this._operands = [];
			for(let __ks_0 = 0, __ks_1 = this._data.operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._data.operands[__ks_0];
				this._operands.push(operand = $compile.expression(operand, this));
				operand.analyse();
			}
		}
		__ks_func_prepare_0() {
			const types = [];
			const last = KSOperator.subtraction(this._operands.length, 1);
			let operandType = null, type = null, ne = null;
			for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
				operand = this._operands[index];
				operand.prepare();
				if(operand.type().isInoperative() === true) {
					TypeException.throwUnexpectedInoperative(operand, this);
				}
				if(KSOperator.lt(index, last)) {
					operand.acquireReusable(true);
					operand.releaseReusable();
					operandType = operand.type();
					if(operandType.isNull() === true) {
						operandType = operand.getDeclaredType().setNullable(false);
					}
					else {
						operandType = operandType.setNullable(false);
					}
				}
				else {
					operandType = operand.type();
				}
				ne = true;
				for(let __ks_1 = 0, __ks_2 = types.length; __ks_1 < __ks_2 && ne; ++__ks_1) {
					type = types[__ks_1];
					if(type.equals(operandType) === true) {
						ne = false;
					}
				}
				if(ne) {
					types.push(operandType);
				}
			}
			if(types.length === 1) {
				this._type = types[0];
			}
			else {
				this._type = Type.union(this._scope, ...types);
			}
		}
		__ks_func_toFragments_62(fragments, mode) {
			this.__ks_func_module_0().flag("Type");
			let l = KSOperator.subtraction(this._operands.length, 1);
			let operand = null;
			for(let i = 0; i < l; ++i) {
				operand = this._operands[i];
				if(operand.isNullable() === true) {
					fragments.code("(");
					operand.toNullableFragments(fragments);
					fragments.code(KSHelper.concatString(" && ", $runtime.type.__ks_0(this), ".isValue(")).compileReusable(operand).code("))");
				}
				else {
					fragments.code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue(")).compileReusable(operand).code(")");
				}
				fragments.code(" ? ").compile(operand).code(" : ");
			}
			fragments.compile(this._operands[l]);
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class PolyadicOperatorQuotient extends NumericPolyadicOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(PolyadicOperatorQuotient.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(PolyadicOperatorQuotient.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(PolyadicOperatorQuotient.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.Quotient;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "quotient";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "/.";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toNativeFragments_1(fragments) {
			const l = KSOperator.subtraction(this._operands.length, 1);
			fragments.code("Number.parseInt(".repeat(l));
			fragments.wrap(this._operands[0]);
			for(let __ks_0 = 1, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				fragments.code(" / ").wrap(operand).code(")");
			}
		}
	}
	class PolyadicOperatorSubtraction extends NumericPolyadicOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(PolyadicOperatorSubtraction.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(PolyadicOperatorSubtraction.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(PolyadicOperatorSubtraction.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_isAcceptingEnum_1() {
			return true;
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.Subtraction;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "subtraction";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "-";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericPolyadicOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toOperandFragments_0(fragments, operator, type) {
			if(operator.valueOf() === Operator.Subtraction.value) {
				if(type.valueOf() === OperandType.Enum.value) {
					for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
						operand = this._operands[index];
						if(index !== 0) {
							fragments.code(" & ~");
						}
						fragments.wrap(operand);
					}
				}
				else {
					for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
						operand = this._operands[index];
						if(index !== 0) {
							fragments.code($comma);
						}
						fragments.compile(operand);
					}
				}
			}
			else {
				this.__ks_func_toOperatorFragments_0(fragments);
			}
		}
		__ks_func_toEnumFragments_1(fragments) {
			for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
				operand = this._operands[index];
				if(index !== 0) {
					fragments.code(" & ~");
				}
				fragments.wrap(operand);
			}
		}
	}
	class BinaryOperatorExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._await = false;
			this._tested = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._left = $compile.expression(this._data.left, this);
			this._left.analyse();
			this._right = $compile.expression(this._data.right, this);
			this._right.analyse();
			this._await = (this._left.isAwait() === true) || (this._right.isAwait() === true);
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._left.prepare();
			if(this._left.type().isInoperative() === true) {
				TypeException.throwUnexpectedInoperative(this._left, this);
			}
			this._right.prepare();
			if(this._right.type().isInoperative() === true) {
				TypeException.throwUnexpectedInoperative(this._right, this);
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._left.translate();
			this._right.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_acquireReusable_1(acquire) {
			this._left.acquireReusable(false);
			this._right.acquireReusable(false);
		}
		__ks_func_hasExceptions_2() {
			return false;
		}
		__ks_func_inferTypes_0(inferables) {
			return this._right.inferTypes(this._left.inferTypes(inferables));
		}
		__ks_func_isAwait_2() {
			return this._await;
		}
		__ks_func_isAwaiting_0() {
			return (this._left.isAwaiting() === true) || (this._right.isAwaiting() === true);
		}
		__ks_func_isComputed_0() {
			return true;
		}
		__ks_func_isNullable_0() {
			return (this._left.isNullable() === true) || (this._right.isNullable() === true);
		}
		__ks_func_isNullableComputed_0() {
			return ((this._left.isNullable() === true) && (this._right.isNullable() === true)) || (this._left.isNullableComputed() === true) || (this._right.isNullableComputed() === true);
		}
		__ks_func_isUsingVariable_1(name) {
			return (this._left.isUsingVariable(name) === true) || (this._right.isUsingVariable(name) === true);
		}
		__ks_func_isUsingInstanceVariable_1(name) {
			return (this._left.isUsingInstanceVariable(name) === true) || (this._right.isUsingInstanceVariable(name) === true);
		}
		__ks_func_isUsingStaticVariable_1(__ks_class_1, varname) {
			return (this._left.isUsingStaticVariable(__ks_class_1, varname) === true) || (this._right.isUsingStaticVariable(__ks_class_1, varname) === true);
		}
		listAssignments() {
			return this.__ks_func_listAssignments_rt.call(null, this, this, arguments);
		}
		__ks_func_listAssignments_10(array) {
			this._left.listAssignments(array);
			this._right.listAssignments(array);
			return array;
		}
		__ks_func_listAssignments_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listAssignments_10.call(that, args[0]);
				}
			}
			if(super.__ks_func_listAssignments_rt) {
				return super.__ks_func_listAssignments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_listNonLocalVariables_1(scope, variables) {
			this._left.listNonLocalVariables(scope, variables);
			this._right.listNonLocalVariables(scope, variables);
			return variables;
		}
		__ks_func_releaseReusable_1() {
			this._left.releaseReusable();
			this._right.releaseReusable();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_63(fragments, mode) {
			if(this._await) {
				if(this._left.isAwaiting() === true) {
					return this._left.toFragments(fragments, mode);
				}
				else if(this._right.isAwaiting() === true) {
					return this._right.toFragments(fragments, mode);
				}
				else {
					this.toOperatorFragments(fragments);
				}
			}
			else if((this.__ks_func_isNullable_0() === true) && !this._tested) {
				fragments.wrapNullable(this).code(" ? ");
				this.toOperatorFragments(fragments);
				fragments.code(" : false");
			}
			else {
				this.toOperatorFragments(fragments);
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_63.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toNullableFragments_0(fragments) {
			if(!this._tested) {
				if(this._left.isNullable() === true) {
					fragments.compileNullable(this._left);
					if(this._right.isNullable() === true) {
						fragments.code(" && ").compileNullable(this._right);
					}
				}
				else {
					fragments.compileNullable(this._right);
				}
				this._tested = true;
			}
		}
	}
	class NumericBinaryOperatorExpression extends BinaryOperatorExpression {
		__ks_init() {
			super.__ks_init();
			this._isEnum = false;
			this._isNative = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			if((this.__ks_func_isAcceptingEnum_2() === true) && (this._left.type().isEnum() === true) && (this._right.type().isEnum() === true) && (this._left.type().name() === this._right.type().name())) {
				this._isEnum = true;
				this._type = this._left.type();
			}
			else {
				if((this._left.type().isNumber() === true) && (this._right.type().isNumber() === true)) {
					this._isNative = true;
				}
				else if(this._left.type().canBeNumber() === true) {
					if(!(this._right.type().canBeNumber() === true)) {
						TypeException.throwInvalidOperand(this._right, this.__ks_func_operator_0(), this);
					}
				}
				else {
					TypeException.throwInvalidOperand(this._left, this.__ks_func_operator_0(), this);
				}
				if((this._left.type().isNullable() === true) || (this._right.type().isNullable() === true)) {
					this._type = this._scope.__ks_func_reference_0("Number").__ks_func_setNullable_0(true);
					this._isNative = false;
				}
				else {
					this._type = this._scope.__ks_func_reference_0("Number");
				}
			}
		}
		__ks_func_translate_0() {
			super.__ks_func_translate_0();
			if(this._isEnum) {
				const type = this._parent.type();
				if(KSType.isClassInstance(this._parent, AssignmentOperatorEquality) || KSType.isClassInstance(this._parent, VariableDeclaration)) {
					if(type.isEnum() === true) {
						if(this._type.name() !== type.name()) {
							this._isEnum = false;
							this._isNative = true;
						}
					}
					else if(type.isNumber() === true) {
						this._isEnum = false;
						this._isNative = true;
					}
				}
				else if((type.isBoolean() === true) || ((type.isEnum() === true) && (this._type.name() === type.name()))) {
					this._isEnum = false;
					this._isNative = true;
				}
			}
		}
		isAcceptingEnum() {
			return this.__ks_func_isAcceptingEnum_rt.call(null, this, this, arguments);
		}
		__ks_func_isAcceptingEnum_2() {
			return false;
		}
		__ks_func_isAcceptingEnum_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAcceptingEnum_2.call(that);
			}
			if(super.__ks_func_isAcceptingEnum_rt) {
				return super.__ks_func_isAcceptingEnum_rt.call(null, that, BinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isComputed_0() {
			return this._isNative;
		}
		toEnumFragments() {
			return this.__ks_func_toEnumFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toEnumFragments_2(fragments) {
		}
		__ks_func_toEnumFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toEnumFragments_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_toEnumFragments_rt) {
				return super.__ks_func_toEnumFragments_rt.call(null, that, BinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toNativeFragments() {
			return this.__ks_func_toNativeFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toNativeFragments_2(fragments) {
			fragments.wrap(this._left).code($space).code(this.__ks_func_symbol_0(), this._data.operator).code($space).wrap(this._right);
		}
		__ks_func_toNativeFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toNativeFragments_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_toNativeFragments_rt) {
				return super.__ks_func_toNativeFragments_rt.call(null, that, BinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toOperandFragments_0(fragments, operator, type) {
			if((operator.valueOf() === this.__ks_func_operator_0().value) && (type.valueOf() === OperandType.Number.value)) {
				fragments.compile(this._left).code($comma).compile(this._right);
			}
			else {
				this.__ks_func_toOperatorFragments_2(fragments);
			}
		}
		toOperatorFragments() {
			return this.__ks_func_toOperatorFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toOperatorFragments_2(fragments) {
			if(this._isEnum) {
				this.__ks_func_toEnumFragments_2(fragments);
			}
			else if(this._isNative) {
				this.__ks_func_toNativeFragments_2(fragments);
			}
			else {
				fragments.code($runtime.operator.__ks_0(this), "." + this.__ks_func_runtime_0() + "(").compile(this._left).code($comma).compile(this._right).code(")");
			}
		}
		__ks_func_toOperatorFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toOperatorFragments_2.call(that, args[0]);
				}
			}
			if(super.__ks_func_toOperatorFragments_rt) {
				return super.__ks_func_toOperatorFragments_rt.call(null, that, BinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			return KSHelper.concatString(this._left.toQuote(), " ", this.__ks_func_symbol_0(), " ", this._right.toQuote());
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class BinaryOperatorAddition extends BinaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorAddition.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorAddition.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorAddition.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._expectingEnum = true;
			this._isEnum = false;
			this._isNative = false;
			this._isNumber = false;
			this._isString = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			if((this._left.type().isEnum() === true) && (this._right.type().isEnum() === true) && (this._left.type().name() === this._right.type().name())) {
				this._isEnum = true;
				if(this._expectingEnum) {
					this._type = this._left.type();
				}
				else {
					this._type = this._left.type().discard().type();
				}
			}
			else {
				if((this._left.type().isString() === true) || (this._right.type().isString() === true)) {
					this._isString = true;
					this._isNative = true;
				}
				else if((this._left.type().isNumber() === true) && (this._right.type().isNumber() === true)) {
					this._isNumber = true;
					this._isNative = true;
				}
				else if(((this._left.type().canBeString(false) === true) && !(this._left.type().canBeNumber(false) === true)) || ((this._right.type().canBeString(false) === true) && !(this._right.type().canBeNumber(false) === true))) {
					this._isString = true;
				}
				else if((this._left.type().isAny() === true) || (this._right.type().isAny() === true)) {
				}
				else if(this._left.type().canBeNumber() === true) {
					if(!(this._left.type().canBeString(false) === true)) {
						if(this._right.type().canBeNumber() === true) {
							if(!(this._right.type().canBeString(false) === true)) {
								this._isNumber = true;
							}
						}
						else {
							TypeException.throwInvalidOperand(this._right, Operator.Addition, this);
						}
					}
				}
				else {
					TypeException.throwInvalidOperand(this._left, Operator.Addition, this);
				}
				const nullable = (this._left.type().isNullable() === true) || (this._right.type().isNullable() === true);
				if(nullable) {
					this._isNative = false;
				}
				if(this._isNumber) {
					this._type = nullable ? this._scope.__ks_func_reference_0("Number").__ks_func_setNullable_0(true) : this._scope.__ks_func_reference_0("Number");
				}
				else if(this._isString) {
					this._type = this._scope.__ks_func_reference_0("String");
				}
				else {
					const numberType = nullable ? this._scope.__ks_func_reference_0("Number").__ks_func_setNullable_0(true) : this._scope.__ks_func_reference_0("Number");
					this._type = UnionType.__ks_new_0(this._scope, [numberType, this._scope.__ks_func_reference_0("String")], false);
				}
			}
		}
		__ks_func_isComputed_0() {
			return this._isNative;
		}
		__ks_func_setExpectedType_1(type) {
			if(!(type.__ks_func_isEnum_0() === true) && ((type.__ks_func_isNumber_0() === true) || (type.__ks_func_isString_0() === true))) {
				this._expectingEnum = false;
			}
		}
		__ks_func_toOperandFragments_0(fragments, operator, type) {
			if(operator.valueOf() === Operator.Addition.value) {
				if((type.valueOf() === OperandType.Enum.value) && (this._isEnum || this._isNumber)) {
					fragments.wrap(this._left).code(" | ").wrap(this._right);
				}
				else if((this._isNumber && (type.valueOf() === OperandType.Number.value)) || (this._isString && (type === OperandType.String))) {
					fragments.compile(this._left).code($comma).compile(this._right);
				}
				else {
					this.__ks_func_toOperatorFragments_3(fragments);
				}
			}
			else {
				this.__ks_func_toOperatorFragments_3(fragments);
			}
		}
		toOperatorFragments() {
			return this.__ks_func_toOperatorFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toOperatorFragments_3(fragments) {
			if(this._isEnum) {
				let operator = null;
				if(this._left.type().discard().isFlags() === true) {
					operator = " | ";
				}
				else {
					operator = " + ";
				}
				if(this._expectingEnum) {
					fragments.code(this._type.name(), "(").wrap(this._left).code(operator).wrap(this._right).code(")");
				}
				else {
					fragments.wrap(this._left).code(operator).wrap(this._right);
				}
			}
			else if(this._isNative) {
				fragments.wrap(this._left).code($space).code("+", this._data.operator).code($space).wrap(this._right);
			}
			else {
				if(this._isNumber) {
					fragments.code($runtime.operator.__ks_0(this), ".addition(");
				}
				else if(this._isString) {
					fragments.code($runtime.helper.__ks_0(this), ".concatString(");
				}
				else {
					fragments.code($runtime.operator.__ks_0(this), ".addOrConcat(");
				}
				fragments.compile(this._left).code($comma).compile(this._right).code(")");
			}
		}
		__ks_func_toOperatorFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toOperatorFragments_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_toOperatorFragments_rt) {
				return super.__ks_func_toOperatorFragments_rt.call(null, that, BinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			return KSHelper.concatString(this._left.toQuote(), " + ", this._right.toQuote());
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class BinaryOperatorBitwiseAnd extends NumericBinaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorBitwiseAnd.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorBitwiseAnd.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorBitwiseAnd.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_isAcceptingEnum_2() {
			return true;
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.BitwiseAnd;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "bitwiseAnd";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "&";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toEnumFragments_2(fragments) {
			fragments.code(this._type.name(), "(");
			this.__ks_func_toNativeFragments_2(fragments);
			fragments.code(")");
		}
	}
	class BinaryOperatorBitwiseLeftShift extends NumericBinaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorBitwiseLeftShift.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorBitwiseLeftShift.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorBitwiseLeftShift.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.BitwiseLeftShift;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "bitwiseLeftShift";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "<<";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class BinaryOperatorBitwiseOr extends NumericBinaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorBitwiseOr.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorBitwiseOr.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorBitwiseOr.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_isAcceptingEnum_2() {
			return true;
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.BitwiseOr;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "bitwiseOr";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "|";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toEnumFragments_2(fragments) {
			fragments.code(this._type.name(), "(");
			this.__ks_func_toNativeFragments_2(fragments);
			fragments.code(")");
		}
	}
	class BinaryOperatorBitwiseRightShift extends NumericBinaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorBitwiseRightShift.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorBitwiseRightShift.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorBitwiseRightShift.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.BitwiseRightShift;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "bitwiseRightShift";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return ">>";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class BinaryOperatorBitwiseXor extends NumericBinaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorBitwiseXor.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorBitwiseXor.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorBitwiseXor.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.BitwiseXor;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "bitwiseXor";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "^";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class BinaryOperatorDivision extends NumericBinaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorDivision.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorDivision.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorDivision.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.Division;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "division";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "/";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class BinaryOperatorMatch extends Expression {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorMatch.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorMatch.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorMatch.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._await = false;
			this._composite = false;
			this._isNative = true;
			this._junctive = false;
			this._operands = [];
			this._reuseName = null;
			this._tested = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._subject = $compile.expression(this._data.left, this);
			this._subject.analyse();
			if(KSHelper.valueOf(this._data.right.kind) === NodeKind.JunctionExpression.value) {
				this._junctive = true;
				for(let __ks_0 = 0, __ks_1 = this._data.right.operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
					operand = this._data.right.operands[__ks_0];
					this.addOperand(operand);
				}
				if(KSHelper.valueOf(this._data.right.operator.kind) === BinaryOperatorKind.And.value) {
					this._junction = " && ";
				}
				else if(KSHelper.valueOf(this._data.right.operator.kind) === BinaryOperatorKind.Or.value) {
					this._junction = " || ";
				}
			}
			else {
				this.addOperand(this._data.right);
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._subject.prepare();
			if(this._subject.type().isInoperative() === true) {
				TypeException.throwUnexpectedInoperative(this._subject, this);
			}
			if(!(this._subject.type().canBeNumber() === true)) {
				TypeException.throwInvalidOperand(this._subject, Operator.Match, this);
			}
			if(!(this._subject.type().isNumber() === true) || (this._subject.type().isNullable() === true)) {
				this._isNative = false;
			}
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.prepare();
				if(operand.type().isInoperative() === true) {
					TypeException.throwUnexpectedInoperative(operand, this);
				}
				if(!(operand.type().canBeNumber() === true)) {
					TypeException.throwInvalidOperand(operand, Operator.Match, this);
				}
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._subject.translate();
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_acquireReusable_1(acquire) {
			if(this._junctive && (this._subject.isComposite() === true)) {
				this._composite = true;
				this._reuseName = this._scope.__ks_func_acquireTempName_0();
			}
			this._subject.acquireReusable(acquire);
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.acquireReusable(acquire);
			}
		}
		addOperand() {
			return this.__ks_func_addOperand_rt.call(null, this, this, arguments);
		}
		__ks_func_addOperand_0(data) {
			const operand = $compile.expression.__ks_0(data, this);
			operand.analyse();
			this._operands.push(operand);
			if(operand.isAwait() === true) {
				this._await = true;
			}
		}
		__ks_func_addOperand_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addOperand_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_addOperand_rt) {
				return super.__ks_func_addOperand_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_inferTypes_0(inferables) {
			return this._subject.inferTypes(inferables);
		}
		__ks_func_isComputed_0() {
			return true;
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_1() {
			return "!==";
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_1.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_releaseReusable_1() {
			if(this._composite) {
				this._scope.releaseTempName(this._reuseName);
			}
			this._subject.releaseReusable();
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.releaseReusable();
			}
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_64(fragments, mode) {
			if(this._await) {
				NotSupportedException.__ks_sttc_throw_1([this]);
			}
			const test = (this.__ks_func_isNullable_0() === true) && !this._tested;
			if(test) {
				fragments.wrapNullable(this).code(" ? ");
			}
			if(this._junctive) {
				if(!KSType.isValue(this._junction)) {
					fragments.code($runtime.operator.__ks_0(this), ".xor(");
					this.toOperatorFragments(fragments, this._operands[0], true);
					for(let __ks_0 = 1, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
						operand = this._operands[__ks_0];
						fragments.code($comma);
						this.toOperatorFragments(fragments, operand, false);
					}
					fragments.code(")");
				}
				else {
					this.toOperatorFragments(fragments, this._operands[0], true);
					for(let __ks_0 = 1, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
						operand = this._operands[__ks_0];
						fragments.code(this._junction);
						this.toOperatorFragments(fragments, operand, false);
					}
				}
			}
			else {
				this.toOperatorFragments(fragments, this._operands[0], false);
			}
			if(test) {
				fragments.code(" : false");
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_64.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toNullableFragments_0(fragments) {
			if(!this._tested) {
				let nf = false;
				if(this._subject.isNullable() === true) {
					nf = true;
					fragments.compileNullable(this._subject);
				}
				for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
					operand = this._operands[__ks_0];
					if(operand.isNullable() === true) {
						if(nf) {
							fragments.code(" && ");
						}
						else {
							nf = true;
						}
						fragments.compileNullable(operand);
					}
				}
				this._tested = true;
			}
		}
		toOperatorFragments() {
			return this.__ks_func_toOperatorFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toOperatorFragments_4(fragments, operand, assignable) {
			const __ks_native_1 = this._isNative && (operand.type().isNumber() === true) && !(operand.type().isNullable() === true);
			const operator = this.__ks_func_operator_1();
			if(this._composite) {
				if(assignable === true) {
					if(__ks_native_1) {
						fragments.code(KSHelper.concatString("((", this._reuseName, " = ")).compile(this._subject).code(") & ").wrap(operand).code(KSHelper.concatString(") ", operator, " 0n"));
					}
					else {
						fragments.code($runtime.operator.__ks_0(this), KSHelper.concatString(".bitwiseAnd(", this._reuseName, " = ")).compile(this._subject).code($comma).compile(operand).code(KSHelper.concatString(") ", operator, " 0n"));
					}
				}
				else {
					if(__ks_native_1) {
						fragments.code(KSHelper.concatString("(", this._reuseName, " & ")).wrap(operand).code(KSHelper.concatString(") ", operator, " 0n"));
					}
					else {
						fragments.code($runtime.operator.__ks_0(this), KSHelper.concatString(".bitwiseAnd(", this._reuseName, ", ")).compile(operand).code(KSHelper.concatString(") ", operator, " 0n"));
					}
				}
			}
			else {
				if(__ks_native_1) {
					fragments.code("(").wrap(this._subject).code(" & ").wrap(operand).code(KSHelper.concatString(") ", operator, " 0n"));
				}
				else {
					fragments.code($runtime.operator.__ks_0(this), ".bitwiseAnd(").compile(this._subject).code($comma).compile(operand).code(KSHelper.concatString(") ", operator, " 0n"));
				}
			}
		}
		__ks_func_toOperatorFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toOperatorFragments_4.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_toOperatorFragments_rt) {
				return super.__ks_func_toOperatorFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("Boolean");
		}
	}
	class BinaryOperatorMismatch extends BinaryOperatorMatch {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorMismatch.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorMismatch.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorMismatch.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_operator_1() {
			return "===";
		}
	}
	class BinaryOperatorModulo extends NumericBinaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorModulo.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorModulo.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorModulo.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.Modulo;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "modulo";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "%";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class BinaryOperatorMultiplication extends NumericBinaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorMultiplication.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorMultiplication.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorMultiplication.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.Multiplication;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "multiplication";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "*";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class BinaryOperatorNullCoalescing extends BinaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorNullCoalescing.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorNullCoalescing.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorNullCoalescing.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			this._left.acquireReusable(true);
			this._left.releaseReusable();
			const leftType = this._left.type().setNullable(false);
			if(leftType.equals(this._right.type()) === true) {
				this._type = leftType;
			}
			else {
				this._type = Type.union(this._scope, leftType, this._right.type());
			}
		}
		__ks_func_acquireReusable_1(acquire) {
			this._left.acquireReusable(true);
		}
		__ks_func_releaseReusable_1() {
			this._left.releaseReusable();
		}
		__ks_func_inferTypes_0(inferables) {
			return this._left.inferTypes(inferables);
		}
		__ks_func_toFragments_63(fragments, mode) {
			if(this._left.isNullable() === true) {
				fragments.code("(");
				this._left.toNullableFragments(fragments);
				fragments.code(KSHelper.concatString(" && ", $runtime.type.__ks_0(this), ".isValue(")).compileReusable(this._left).code("))");
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue(")).compileReusable(this._left).code(")");
			}
			fragments.code(" ? ").compile(this._left).code(" : ").compile(this._right);
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class BinaryOperatorQuotient extends NumericBinaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorQuotient.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorQuotient.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorQuotient.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.Quotient;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "quotient";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "/.";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toNativeFragments_2(fragments) {
			fragments.code("Number.parseInt(").wrap(this._left).code(" / ").wrap(this._right).code(")");
		}
	}
	class BinaryOperatorSubtraction extends NumericBinaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorSubtraction.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorSubtraction.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorSubtraction.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_isAcceptingEnum_2() {
			return true;
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.Subtraction;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "subtraction";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "-";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericBinaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toOperandFragments_0(fragments, operator, type) {
			if(operator.valueOf() === Operator.Subtraction.value) {
				if(type.valueOf() === OperandType.Enum.value) {
					fragments.wrap(this._left).code(" & ~").wrap(this._right);
				}
				else {
					fragments.compile(this._left).code($comma).compile(this._right);
				}
			}
			else {
				this.__ks_func_toOperatorFragments_2(fragments);
			}
		}
		__ks_func_toEnumFragments_2(fragments) {
			fragments.code(this._type.name(), "(").wrap(this._left).code(" & ~").wrap(this._right).code(")");
		}
	}
	class BinaryOperatorTypeCasting extends Expression {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorTypeCasting.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorTypeCasting.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorTypeCasting.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._forced = false;
			this._nullable = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._left = $compile.expression(this._data.left, this);
			this._left.analyse();
			this._type = Type.__ks_sttc_fromAST_0(this._data.right, this);
			for(let __ks_0 = 0, __ks_1 = this._data.operator.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.operator.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Forced.value) {
					this._forced = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value) {
					this._nullable = true;
					this._type = this._type.__ks_func_setNullable_0(true);
				}
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._left.prepare();
			const type = this._left.type();
			if(type.isInoperative() === true) {
				TypeException.throwUnexpectedInoperative(this._left, this);
			}
			if(!(KSType.isClassInstance(type, ReferenceType) || KSType.isClassInstance(type, UnionType) || (type.isAny() === true))) {
				TypeException.__ks_sttc_throwInvalidCasting_0(this);
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._left.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_hasExceptions_2() {
			return false;
		}
		__ks_func_inferTypes_0(inferables) {
			return this._left.inferTypes(inferables);
		}
		__ks_func_isComputed_0() {
			return false;
		}
		__ks_func_isNullable_0() {
			return this._left.isNullable();
		}
		__ks_func_isUsingVariable_1(name) {
			return this._left.isUsingVariable(name);
		}
		__ks_func_isUsingInstanceVariable_1(name) {
			return this._left.isUsingInstanceVariable(name);
		}
		listAssignments() {
			return this.__ks_func_listAssignments_rt.call(null, this, this, arguments);
		}
		__ks_func_listAssignments_11(array) {
			return this._left.listAssignments(array);
		}
		__ks_func_listAssignments_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listAssignments_11.call(that, args[0]);
				}
			}
			if(super.__ks_func_listAssignments_rt) {
				return super.__ks_func_listAssignments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_26() {
			return KSType.isClassInstance(this._left, IdentifierLiteral) ? this._left.name() : null;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_26.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_65(fragments, mode) {
			if(this._forced || (this._left.type().isAssignableToVariable(this._type, false, false, false) === true)) {
				fragments.compile(this._left);
			}
			else if(!this._nullable && (this._left.type().isAssignableToVariable(this._type, false, true, false) === true)) {
				fragments.code($runtime.helper.__ks_0(this), ".notNull(").compile(this._left).code(")");
			}
			else if(this._type.isAssignableToVariable(this._left.type(), true, this._nullable, true)) {
				fragments.code($runtime.helper.__ks_0(this), ".cast(").compile(this._left).code($comma, $quote(this._type.name()), $comma, this._nullable);
				this._type.toCastFragments(fragments);
				fragments.code(")");
			}
			else {
				TypeException.throwNotCastableTo(this._left.type(), this._type, this);
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_65.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class BinaryOperatorTypeEquality extends Expression {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorTypeEquality.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorTypeEquality.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorTypeEquality.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._subject = $compile.expression(this._data.left, this);
			this._subject.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._subject.prepare();
			if(this._subject.type().isInoperative() === true) {
				TypeException.throwUnexpectedInoperative(this._subject, this);
			}
			if(KSHelper.valueOf(this._data.right.kind) === NodeKind.JunctionExpression.value) {
				let type = null;
				if(KSHelper.valueOf(this._data.right.operator.kind) === BinaryOperatorKind.And.value) {
					type = FusionType.__ks_new_0(this._scope);
				}
				else {
					type = UnionType.__ks_new_0(this._scope);
				}
				for(let __ks_0 = 0, __ks_1 = this._data.right.operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
					operand = this._data.right.operands[__ks_0];
					if((KSHelper.valueOf(operand.kind) === NodeKind.TypeReference.value) && (KSType.isValue(operand.typeName) ? KSHelper.valueOf(operand.typeName.kind) === NodeKind.Identifier.value : false)) {
						let variable = this._scope.getVariable(operand.typeName.name);
						if(KSType.isValue(variable)) {
							type.addType(this.__ks_func_validateType_5(variable));
						}
						else {
							ReferenceException.throwNotDefined(operand.typeName.name, this);
						}
					}
					else {
						throw new NotImplementedException(this);
					}
				}
				this._trueType = type.__ks_func_type_0();
			}
			else {
				if((KSHelper.valueOf(this._data.right.kind) === NodeKind.TypeReference.value) && (KSType.isValue(this._data.right.typeName) ? KSHelper.valueOf(this._data.right.typeName.kind) === NodeKind.Identifier.value : false)) {
					let variable = this._scope.getVariable(this._data.right.typeName.name);
					if(KSType.isValue(variable)) {
						this._trueType = this.__ks_func_validateType_5(variable);
					}
					else {
						ReferenceException.throwNotDefined(this._data.right.typeName.name, this);
					}
				}
				else {
					throw new NotImplementedException(this);
				}
			}
			if(this._subject.isInferable() === true) {
				this._falseType = this._subject.type().reduce(this._trueType);
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._subject.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_hasExceptions_2() {
			return false;
		}
		__ks_func_inferWhenTrueTypes_0(inferables) {
			if(this._subject.isInferable() === true) {
				inferables[this._subject.path()] = (() => {
					const d = new Dictionary();
					d.isVariable = KSType.isClassInstance(this._subject, IdentifierLiteral);
					d.isTyping = true;
					d.type = this._trueType;
					return d;
				})();
			}
			return inferables;
		}
		__ks_func_inferWhenFalseTypes_0(inferables) {
			if(this._subject.isInferable() === true) {
				inferables[this._subject.path()] = (() => {
					const d = new Dictionary();
					d.isVariable = KSType.isClassInstance(this._subject, IdentifierLiteral);
					d.type = this._falseType;
					return d;
				})();
			}
			return inferables;
		}
		__ks_func_isComputed_0() {
			return false;
		}
		__ks_func_isNullable_0() {
			return false;
		}
		__ks_func_isUsingVariable_1(name) {
			return this._subject.isUsingVariable(name);
		}
		__ks_func_isUsingInstanceVariable_1(name) {
			return this._subject.isUsingInstanceVariable(name);
		}
		listAssignments() {
			return this.__ks_func_listAssignments_rt.call(null, this, this, arguments);
		}
		__ks_func_listAssignments_12(array) {
			return this._subject.listAssignments(array);
		}
		__ks_func_listAssignments_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listAssignments_12.call(that, args[0]);
				}
			}
			if(super.__ks_func_listAssignments_rt) {
				return super.__ks_func_listAssignments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_66(fragments, mode) {
			this._trueType.toPositiveTestFragments(fragments, this._subject);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_66.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toBooleanFragments_13(fragments, mode, junction) {
			this._trueType.toPositiveTestFragments(fragments, this._subject, junction);
		}
		__ks_func_toBooleanFragments_5(fragments, mode, junction) {
			return this.__ks_func_toBooleanFragments_13(fragments, mode, junction);
		}
		__ks_func_toBooleanFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toBooleanFragments_13.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_toBooleanFragments_rt.call(null, that, Expression.prototype, args);
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("Boolean");
		}
		__ks_func_validateType_5(variable) {
			const type = variable.__ks_func_getRealType_0();
			if(this._subject.type().isNull() === true) {
				TypeException.throwNullTypeChecking(type, this);
			}
			if(type.isVirtual() === true) {
				if(!(this._subject.type().isAny() === true) && !(this._subject.type().canBeVirtual(type.name()) === true)) {
					TypeException.throwInvalidTypeChecking(this._subject.type(), type, this);
				}
			}
			else if((type.isClass() === true) || (type.isEnum() === true) || (type.isStruct() === true) || (type.isTuple() === true) || (type.isUnion() === true) || (type.isFusion() === true) || (type.isExclusion() === true)) {
				if(!this._scope.reference(type).isAssignableToVariable(this._subject.type(), false, false, true)) {
					TypeException.throwInvalidTypeChecking(this._subject.type(), type, this);
				}
			}
			else {
				TypeException.throwNotClass(variable.__ks_func_name_0(), this);
			}
			return type.reference();
		}
		__ks_func_validateType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Variable);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_validateType_5.call(that, args[0]);
				}
			}
			return super.__ks_func_validateType_rt.call(null, that, Expression.prototype, args);
		}
	}
	class BinaryOperatorTypeInequality extends Expression {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorTypeInequality.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorTypeInequality.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorTypeInequality.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._subject = $compile.expression(this._data.left, this);
			this._subject.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._subject.prepare();
			if(this._subject.type().isInoperative() === true) {
				TypeException.throwUnexpectedInoperative(this._subject, this);
			}
			if(KSHelper.valueOf(this._data.right.kind) === NodeKind.JunctionExpression.value) {
				let type = null;
				if(KSHelper.valueOf(this._data.right.operator.kind) === BinaryOperatorKind.And.value) {
					type = FusionType.__ks_new_0(this._scope);
				}
				else {
					type = UnionType.__ks_new_0(this._scope);
				}
				for(let __ks_0 = 0, __ks_1 = this._data.right.operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
					operand = this._data.right.operands[__ks_0];
					if((KSHelper.valueOf(operand.kind) === NodeKind.TypeReference.value) && (KSType.isValue(operand.typeName) ? KSHelper.valueOf(operand.typeName.kind) === NodeKind.Identifier.value : false)) {
						let variable = this._scope.getVariable(operand.typeName.name);
						if(KSType.isValue(variable)) {
							type.addType(this.__ks_func_validateType_6(variable));
						}
						else {
							ReferenceException.throwNotDefined(operand.typeName.name, this);
						}
					}
					else {
						throw new NotImplementedException(this);
					}
				}
				this._falseType = type.__ks_func_type_0();
			}
			else {
				if((KSHelper.valueOf(this._data.right.kind) === NodeKind.TypeReference.value) && (KSType.isValue(this._data.right.typeName) ? KSHelper.valueOf(this._data.right.typeName.kind) === NodeKind.Identifier.value : false)) {
					let variable = this._scope.getVariable(this._data.right.typeName.name);
					if(KSType.isValue(variable)) {
						this._falseType = this.__ks_func_validateType_6(variable);
					}
					else {
						ReferenceException.throwNotDefined(this._data.right.typeName.name, this);
					}
				}
				else {
					throw new NotImplementedException(this);
				}
			}
			if(this._subject.isInferable() === true) {
				this._trueType = this._subject.type().reduce(this._falseType);
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._subject.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_hasExceptions_2() {
			return false;
		}
		__ks_func_inferTypes_0(inferables) {
			return this._subject.inferTypes(inferables);
		}
		__ks_func_isComputed_0() {
			return false;
		}
		__ks_func_isNullable_0() {
			return false;
		}
		__ks_func_isUsingVariable_1(name) {
			return this._subject.isUsingVariable(name);
		}
		__ks_func_isUsingInstanceVariable_1(name) {
			return this._subject.isUsingInstanceVariable(name);
		}
		__ks_func_inferWhenTrueTypes_0(inferables) {
			if(this._subject.isInferable() === true) {
				inferables[this._subject.path()] = (() => {
					const d = new Dictionary();
					d.isVariable = KSType.isClassInstance(this._subject, IdentifierLiteral);
					d.isTyping = true;
					d.type = this._trueType;
					return d;
				})();
			}
			return inferables;
		}
		__ks_func_inferWhenFalseTypes_0(inferables) {
			if(this._subject.isInferable() === true) {
				inferables[this._subject.path()] = (() => {
					const d = new Dictionary();
					d.isVariable = KSType.isClassInstance(this._subject, IdentifierLiteral);
					d.type = this._falseType;
					return d;
				})();
			}
			return inferables;
		}
		listAssignments() {
			return this.__ks_func_listAssignments_rt.call(null, this, this, arguments);
		}
		__ks_func_listAssignments_13(array) {
			return this._subject.listAssignments(array);
		}
		__ks_func_listAssignments_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listAssignments_13.call(that, args[0]);
				}
			}
			if(super.__ks_func_listAssignments_rt) {
				return super.__ks_func_listAssignments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_67(fragments, mode) {
			this._falseType.toNegativeTestFragments(fragments, this._subject);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_67.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("Boolean");
		}
		__ks_func_validateType_6(variable) {
			const type = variable.__ks_func_getRealType_0();
			if(this._subject.type().isNull() === true) {
				TypeException.throwNullTypeChecking(type, this);
			}
			if(type.isVirtual() === true) {
				if(!(this._subject.type().isAny() === true) && !(this._subject.type().canBeVirtual(type.name()) === true)) {
					TypeException.throwUnnecessaryTypeChecking(this._subject.type(), this);
				}
			}
			else if((type.isEnum() === true) || (type.isStruct() === true) || (type.isTuple() === true) || (type.isUnion() === true) || (type.isFusion() === true) || (type.isExclusion() === true)) {
				if(!(this._subject.type().isAny() === true) && !(type.matchContentOf(this._subject.type()) === true)) {
					TypeException.throwUnnecessaryTypeChecking(this._subject.type(), this);
				}
			}
			else if(type.isClass() === true) {
				if(!(this._subject.type().isAny() === true) && (!(type.matchContentOf(this._subject.type()) === true) || (type.matchClassName(this._subject.type()) === true))) {
					TypeException.throwUnnecessaryTypeChecking(this._subject.type(), this);
				}
			}
			else {
				TypeException.throwNotClass(variable.__ks_func_name_0(), this);
			}
			return type.reference();
		}
		__ks_func_validateType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Variable);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_validateType_6.call(that, args[0]);
				}
			}
			return super.__ks_func_validateType_rt.call(null, that, Expression.prototype, args);
		}
	}
	class UnaryOperatorExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(UnaryOperatorExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(UnaryOperatorExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(UnaryOperatorExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._argument = $compile.expression(this._data.argument, this);
			this._argument.analyse();
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._argument.prepare();
			if(this._argument.type().isInoperative() === true) {
				TypeException.throwUnexpectedInoperative(this._argument, this);
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._argument.translate();
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		argument() {
			return this.__ks_func_argument_rt.call(null, this, this, arguments);
		}
		__ks_func_argument_0() {
			return this._argument;
		}
		__ks_func_argument_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_argument_0.call(that);
			}
			if(super.__ks_func_argument_rt) {
				return super.__ks_func_argument_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_hasExceptions_2() {
			return false;
		}
		__ks_func_inferTypes_0(inferables) {
			return this._argument.inferTypes(inferables);
		}
		__ks_func_isUsingVariable_1(name) {
			return this._argument.isUsingVariable(name);
		}
		listAssignments() {
			return this.__ks_func_listAssignments_rt.call(null, this, this, arguments);
		}
		__ks_func_listAssignments_14(array) {
			return this._argument.listAssignments(array);
		}
		__ks_func_listAssignments_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listAssignments_14.call(that, args[0]);
				}
			}
			if(super.__ks_func_listAssignments_rt) {
				return super.__ks_func_listAssignments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class NumericUnaryOperatorExpression extends UnaryOperatorExpression {
		__ks_init() {
			super.__ks_init();
			this._isEnum = false;
			this._isNative = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			if((this.__ks_func_isAcceptingEnum_3() === true) && (this._argument.type().isEnum() === true)) {
				this._isEnum = true;
				this._type = this._argument.type();
			}
			else {
				if(this._argument.type().isNumber() === true) {
					if(this._argument.type().isNullable() === true) {
						TypeException.throwNotNullableOperand(this._argument, this.__ks_func_operator_0(), this);
					}
					this._isNative = true;
				}
				else if(!(this._argument.type().canBeNumber() === true)) {
					TypeException.throwInvalidOperand(this._argument, this.__ks_func_operator_0(), this);
				}
				this._type = this._scope.__ks_func_reference_0("Number");
			}
		}
		isAcceptingEnum() {
			return this.__ks_func_isAcceptingEnum_rt.call(null, this, this, arguments);
		}
		__ks_func_isAcceptingEnum_3() {
			return false;
		}
		__ks_func_isAcceptingEnum_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAcceptingEnum_3.call(that);
			}
			if(super.__ks_func_isAcceptingEnum_rt) {
				return super.__ks_func_isAcceptingEnum_rt.call(null, that, UnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_68(fragments, mode) {
			if(this._isEnum) {
				fragments.code(this.__ks_func_symbol_0(), this._data.operator).wrap(this._argument);
			}
			else if(this._isNative) {
				fragments.code(this.__ks_func_symbol_0(), this._data.operator).wrap(this._argument);
			}
			else {
				fragments.code($runtime.operator.__ks_0(this), "." + this.__ks_func_runtime_0() + "(").compile(this._argument).code(")");
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_68.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, UnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toQuote_0() {
			return KSHelper.concatString(this.__ks_func_symbol_0(), this._argument.toQuote());
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class UnaryOperatorBitwiseNot extends NumericUnaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(UnaryOperatorBitwiseNot.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(UnaryOperatorBitwiseNot.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(UnaryOperatorBitwiseNot.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_isAcceptingEnum_3() {
			return true;
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.BitwiseNot;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "bitwiseNot";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "~";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class UnaryOperatorDecrementPostfix extends NumericUnaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(UnaryOperatorDecrementPostfix.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(UnaryOperatorDecrementPostfix.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(UnaryOperatorDecrementPostfix.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.DecrementPostfix;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "decrementPostfix";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "--";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toFragments_68(fragments, mode) {
			fragments.compile(this._argument).code(this.__ks_func_symbol_0(), this._data.operator);
		}
		__ks_func_toQuote_0() {
			return KSHelper.concatString(this._argument.toQuote(), this.__ks_func_symbol_0());
		}
	}
	class UnaryOperatorDecrementPrefix extends NumericUnaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(UnaryOperatorDecrementPrefix.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(UnaryOperatorDecrementPrefix.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(UnaryOperatorDecrementPrefix.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.DecrementPrefix;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "decrementPrefix";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "--";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toFragments_68(fragments, mode) {
			fragments.code(this.__ks_func_symbol_0(), this._data.operator).compile(this._argument);
		}
	}
	class UnaryOperatorExistential extends UnaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(UnaryOperatorExistential.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(UnaryOperatorExistential.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(UnaryOperatorExistential.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			this._argument.prepare();
			if(!((this._argument.type().isNullable() === true) || (this._argument.isLateInit() === true) || (this._options.rules.ignoreMisfit === true) || KSType.isClassInstance(this._argument, MemberExpression))) {
				TypeException.throwNotNullableExistential(this._argument, this);
			}
			this._type = this._argument.type().setNullable(false);
		}
		__ks_func_inferWhenTrueTypes_0(inferables) {
			this._argument.inferTypes(inferables);
			if(this._argument.isInferable() === true) {
				inferables[this._argument.path()] = (() => {
					const d = new Dictionary();
					d.isVariable = KSType.isClassInstance(this._argument, IdentifierLiteral);
					d.type = this._type;
					return d;
				})();
			}
			return inferables;
		}
		__ks_func_isComputed_0() {
			return this._argument.isNullable();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_69(fragments, mode) {
			if(this._argument.isNullable() === true) {
				fragments.wrapNullable(this._argument).code(" && ").code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue("), this._data.operator).compile(this._argument).code(")", this._data.operator);
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type.__ks_0(this), ".isValue("), this._data.operator).compile(this._argument).code(")", this._data.operator);
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_69.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, UnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("Boolean");
		}
	}
	class UnaryOperatorForcedTypeCasting extends UnaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(UnaryOperatorForcedTypeCasting.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(UnaryOperatorForcedTypeCasting.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(UnaryOperatorForcedTypeCasting.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._type = AnyType.Unexplicit;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			if(!(this._parent.isExpectingType() === true)) {
				SyntaxException.__ks_sttc_throwInvalidForcedTypeCasting_0(this);
			}
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_70(fragments, mode) {
			fragments.compile(this._argument);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_70.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, UnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class UnaryOperatorIncrementPostfix extends NumericUnaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(UnaryOperatorIncrementPostfix.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(UnaryOperatorIncrementPostfix.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(UnaryOperatorIncrementPostfix.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.IncrementPostfix;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "incrementPostfix";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "++";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toFragments_68(fragments, mode) {
			fragments.compile(this._argument).code(this.__ks_func_symbol_0(), this._data.operator);
		}
		__ks_func_toQuote_0() {
			return KSHelper.concatString(this._argument.toQuote(), this.__ks_func_symbol_0());
		}
	}
	class UnaryOperatorIncrementPrefix extends NumericUnaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(UnaryOperatorIncrementPrefix.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(UnaryOperatorIncrementPrefix.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(UnaryOperatorIncrementPrefix.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.IncrementPrefix;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "incrementPrefix";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "++";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toFragments_68(fragments, mode) {
			fragments.code(this.__ks_func_symbol_0(), this._data.operator).compile(this._argument);
		}
	}
	class UnaryOperatorNegation extends UnaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(UnaryOperatorNegation.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(UnaryOperatorNegation.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(UnaryOperatorNegation.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			if(this._argument.type().isBoolean() === true) {
				if(this._argument.type().isNullable() === true) {
					TypeException.throwNotNullableOperand(this._argument, Operator.Negation, this);
				}
			}
			else if(!(this._argument.type().canBeBoolean() === true)) {
				TypeException.throwInvalidOperand(this._argument, Operator.Negation, this);
			}
		}
		__ks_func_inferWhenFalseTypes_0(inferables) {
			return this._argument.inferWhenTrueTypes(inferables);
		}
		__ks_func_inferWhenTrueTypes_0(inferables) {
			return this._argument.inferWhenFalseTypes(inferables);
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_71(fragments, mode) {
			fragments.code("!", this._data.operator).wrapBoolean(this._argument);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_71.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, UnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("Boolean");
		}
	}
	class UnaryOperatorNegative extends NumericUnaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(UnaryOperatorNegative.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(UnaryOperatorNegative.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(UnaryOperatorNegative.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.Negative;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "negative";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "-";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericUnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class UnaryOperatorNullableTypeCasting extends UnaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(UnaryOperatorNullableTypeCasting.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(UnaryOperatorNullableTypeCasting.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(UnaryOperatorNullableTypeCasting.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			this._type = this._argument.type().setNullable(false);
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_72(fragments, mode) {
			fragments.compile(this._argument);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_72.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, UnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class UnaryOperatorSpread extends UnaryOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(UnaryOperatorSpread.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(UnaryOperatorSpread.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(UnaryOperatorSpread.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			const type = this._argument.type();
			if(type.isArray() === true) {
				this._type = type.flagSpread();
			}
			else if(type.isAny() === true) {
				this._type = this._scope.__ks_func_reference_0("Array").__ks_func_flagSpread_0();
			}
			else {
				TypeException.__ks_sttc_throwInvalidSpread_0(this);
			}
		}
		__ks_func_isExpectingType_2() {
			return true;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_73(fragments, mode) {
			if(this._options.format.spreads === "es5") {
				throw new NotSupportedException(this);
			}
			fragments.code("...", this._data.operator).wrap(this._argument);
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_73.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, UnaryOperatorExpression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toTypeQuote_0() {
			const type = this._type.parameter(0);
			return KSHelper.concatString("...", type.toQuote());
		}
		__ks_func_type_22() {
			return this._type;
		}
	}
	class ComparisonExpression extends Expression {
		static __ks_new_0() {
			const o = Object.create(ComparisonExpression.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(ComparisonExpression.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(ComparisonExpression.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._await = false;
			this._composite = false;
			this._computed = true;
			this._junction = " && ";
			this._junctive = false;
			this._operands = [];
			this._operators = [];
			this._reuseName = null;
			this._tested = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			let operand1 = null, operand2 = null, operator = null;
			operand1 = this.addOperand(this._data.values[0]);
			if(this._data.values.length === 3) {
				const value = this._data.values[2];
				if(KSHelper.valueOf(value.kind) === NodeKind.JunctionExpression.value) {
					this._junctive = true;
					for(let __ks_0 = 0, __ks_1 = value.operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
						operand = value.operands[__ks_0];
						this.addOperator(this._data.values[1], operand1, this.addOperand(operand));
					}
					if(KSHelper.valueOf(value.operator.kind) === BinaryOperatorKind.And.value) {
						this._junction = " && ";
					}
					else if(KSHelper.valueOf(value.operator.kind) === BinaryOperatorKind.Or.value) {
						this._junction = " || ";
					}
					else {
						this._junction = "xor";
					}
				}
				else {
					this.addOperator(this._data.values[1], operand1, this.addOperand(this._data.values[2]));
				}
			}
			else {
				for(let i = 1, __ks_0 = this._data.values.length; i < __ks_0; i += 2) {
					operand2 = this.addOperand(this._data.values[i + 1]);
					this.addOperator(this._data.values[i], operand1, operand2);
					operand1 = operand2;
				}
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.prepare();
				if(operand.type().isInoperative() === true) {
					TypeException.throwUnexpectedInoperative(operand, this);
				}
			}
			for(let __ks_0 = 0, __ks_1 = this._operators.length, operator; __ks_0 < __ks_1; ++__ks_0) {
				operator = this._operators[__ks_0];
				operator.prepare();
			}
			if(this._operators.length === 1) {
				this._computed = this._operators[0].isComputed();
			}
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_acquireReusable_1(acquire) {
			if(this._junctive) {
				if(this._operands[0].isComposite() === true) {
					this._composite = true;
					this._reuseName = this._scope.__ks_func_acquireTempName_0();
				}
			}
			else {
				if(KSOperator.gt(this._operators.length, 1)) {
					for(let __ks_0 = 1, __ks_1 = this._operands.length - 1, operand; __ks_0 < __ks_1 && !(this._composite); ++__ks_0) {
						operand = this._operands[__ks_0];
						this._composite = operand.isComposite();
					}
					if(this._composite) {
						this._reuseName = this._scope.__ks_func_acquireTempName_0();
					}
				}
			}
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.acquireReusable(acquire);
			}
		}
		addOperand() {
			return this.__ks_func_addOperand_rt.call(null, this, this, arguments);
		}
		__ks_func_addOperand_1(data) {
			const operand = $compile.expression.__ks_0(data, this);
			operand.analyse();
			this._operands.push(operand);
			if(operand.isAwait() === true) {
				this._await = true;
			}
			return operand;
		}
		__ks_func_addOperand_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addOperand_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_addOperand_rt) {
				return super.__ks_func_addOperand_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addOperator() {
			return this.__ks_func_addOperator_rt.call(null, this, this, arguments);
		}
		__ks_func_addOperator_0(data, operand1, operand2) {
			const operator = this.__ks_func_getOperator_0(data, operand1, operand2);
			this._operators.push(operator);
		}
		__ks_func_addOperator_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_addOperator_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_addOperator_rt) {
				return super.__ks_func_addOperator_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getOperator() {
			return this.__ks_func_getOperator_rt.call(null, this, this, arguments);
		}
		__ks_func_getOperator_0(data, operand1, operand2) {
			let __ks_0 = data.kind.valueOf();
			if(__ks_0 === BinaryOperatorKind.Equality.value) {
				return EqualityOperator.__ks_new_0(this, operand1, operand2);
			}
			else if(__ks_0 === BinaryOperatorKind.GreaterThan.value) {
				return GreaterThanOperator.__ks_new_0(this, operand1, operand2);
			}
			else if(__ks_0 === BinaryOperatorKind.GreaterThanOrEqual.value) {
				return GreaterThanOrEqualOperator.__ks_new_0(this, operand1, operand2);
			}
			else if(__ks_0 === BinaryOperatorKind.Inequality.value) {
				return InequalityOperator.__ks_new_0(this, operand1, operand2);
			}
			else if(__ks_0 === BinaryOperatorKind.LessThan.value) {
				return LessThanOperator.__ks_new_0(this, operand1, operand2);
			}
			else if(__ks_0 === BinaryOperatorKind.LessThanOrEqual.value) {
				return LessThanOrEqualOperator.__ks_new_0(this, operand1, operand2);
			}
		}
		__ks_func_getOperator_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_getOperator_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_getOperator_rt) {
				return super.__ks_func_getOperator_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_hasExceptions_2() {
			return false;
		}
		__ks_func_inferTypes_0(inferables) {
			if(this._operators.length === 1) {
				return this._operators[0].inferTypes(inferables);
			}
			else {
				return inferables;
			}
		}
		__ks_func_inferWhenFalseTypes_0(inferables) {
			if(this._operators.length === 1) {
				return this._operators[0].inferWhenFalseTypes(inferables);
			}
			else {
				return inferables;
			}
		}
		__ks_func_inferWhenTrueTypes_0(inferables) {
			if(this._operators.length === 1) {
				return this._operators[0].inferWhenTrueTypes(inferables);
			}
			else {
				return inferables;
			}
		}
		__ks_func_isComputed_0() {
			return this._computed;
		}
		__ks_func_isNullable_0() {
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(operand.isNullable() === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isNullableComputed_0() {
			let nullable = true;
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(operand.isNullableComputed() === true) {
					return true;
				}
				else if(!(operand.isNullable() === true)) {
					nullable = false;
				}
			}
			return nullable;
		}
		__ks_func_isUsingVariable_1(name) {
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(operand.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		listAssignments() {
			return this.__ks_func_listAssignments_rt.call(null, this, this, arguments);
		}
		__ks_func_listAssignments_15(array) {
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.listAssignments(array);
			}
			return array;
		}
		__ks_func_listAssignments_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_listAssignments_15.call(that, args[0]);
				}
			}
			if(super.__ks_func_listAssignments_rt) {
				return super.__ks_func_listAssignments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_releaseReusable_1() {
			if(this._composite) {
				this._scope.releaseTempName(this._reuseName);
			}
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.releaseReusable();
			}
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_74(fragments, mode) {
			if(this._await) {
				NotSupportedException.__ks_sttc_throw_1([this]);
			}
			const test = (this.__ks_func_isNullable_0() === true) && !this._tested;
			if(test) {
				fragments.wrapNullable(this).code(" ? ");
			}
			if(this._junctive) {
				if(this._junction === "xor") {
					fragments.code($runtime.operator.__ks_0(this), ".xor(");
					this._operators[0].toOperatorFragments(fragments, this._reuseName, true, true, false, false);
					for(let __ks_0 = 1, __ks_1 = this._operators.length, operator; __ks_0 < __ks_1; ++__ks_0) {
						operator = this._operators[__ks_0];
						fragments.code($comma);
						operator.toOperatorFragments(fragments, this._reuseName, true, false, false, false);
					}
					fragments.code(")");
				}
				else {
					this._operators[0].toOperatorFragments(fragments, this._reuseName, true, true, false, false);
					for(let __ks_0 = 1, __ks_1 = this._operators.length, operator; __ks_0 < __ks_1; ++__ks_0) {
						operator = this._operators[__ks_0];
						fragments.code(this._junction);
						operator.toOperatorFragments(fragments, this._reuseName, true, false, false, false);
					}
				}
			}
			else {
				this._operators[0].toOperatorFragments(fragments, this._reuseName, false, false, true, true);
				if(KSOperator.gt(this._operators.length, 1)) {
					for(let __ks_0 = 1, __ks_1 = this._operators.length - 1, operator; __ks_0 < __ks_1; ++__ks_0) {
						operator = this._operators[__ks_0];
						fragments.code(this._junction);
						operator.toOperatorFragments(fragments, this._reuseName, true, false, true, true);
					}
					fragments.code(this._junction);
					this._operators[KSOperator.subtraction(this._operators.length, 1)].toOperatorFragments(fragments, this._reuseName, true, false, false, false);
				}
			}
			if(test) {
				fragments.code(" : false");
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_74.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Expression.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_toNullableFragments_0(fragments) {
			if(!this._tested) {
				let nf = false;
				for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
					operand = this._operands[__ks_0];
					if(operand.isNullable() === true) {
						if(nf) {
							fragments.code(" && ");
						}
						else {
							nf = true;
						}
						fragments.compileNullable(operand);
					}
				}
				this._tested = true;
			}
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("Boolean");
		}
	}
	class ComparisonOperator {
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
		}
		__ks_cons_0(node, left, right) {
			if(node === void 0) {
				node = null;
			}
			if(left === void 0) {
				left = null;
			}
			if(right === void 0) {
				right = null;
			}
			this._node = node;
			this._left = left;
			this._right = right;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return ComparisonOperator.prototype.__ks_cons_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		inferTypes() {
			return this.__ks_func_inferTypes_rt.call(null, this, this, arguments);
		}
		__ks_func_inferTypes_0(inferables) {
			return this._right.inferTypes(this._left.inferTypes(inferables));
		}
		__ks_func_inferTypes_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_inferTypes_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		inferWhenFalseTypes() {
			return this.__ks_func_inferWhenFalseTypes_rt.call(null, this, this, arguments);
		}
		__ks_func_inferWhenFalseTypes_0(inferables) {
			return this.__ks_func_inferTypes_0(inferables);
		}
		__ks_func_inferWhenFalseTypes_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_inferWhenFalseTypes_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		inferWhenTrueTypes() {
			return this.__ks_func_inferWhenTrueTypes_rt.call(null, this, this, arguments);
		}
		__ks_func_inferWhenTrueTypes_0(inferables) {
			return this.__ks_func_inferTypes_0(inferables);
		}
		__ks_func_inferWhenTrueTypes_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_inferWhenTrueTypes_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		isComputed() {
			return this.__ks_func_isComputed_rt.call(null, this, this, arguments);
		}
		__ks_func_isComputed_0() {
			return true;
		}
		__ks_func_isComputed_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isComputed_0.call(that);
			}
			throw KSHelper.badArgs();
		}
	}
	class EqualityOperator extends ComparisonOperator {
		static __ks_new_0(...args) {
			const o = Object.create(EqualityOperator.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._enumLeft = false;
			this._enumRight = false;
			this._infinity = false;
			this._nanLeft = false;
			this._nanRight = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			const leftType = this._left.type();
			const rightType = this._right.type();
			if((leftType.isEnum() === true) && !KSType.isClassInstance(this._left, NumericBinaryOperatorExpression)) {
				this._enumLeft = true;
			}
			else if(KSType.isClassInstance(this._left, IdentifierLiteral)) {
				if(this._left.__ks_func_value_0() === "NaN") {
					this._nanLeft = true;
				}
				else if(this._left.__ks_func_value_0() === "Infinity") {
					this._infinity = true;
				}
			}
			else if(KSType.isClassInstance(this._left, UnaryOperatorNegative) && KSType.isClassInstance(this._left.__ks_func_argument_0(), IdentifierLiteral)) {
				this._infinity = this._left.__ks_func_argument_0().value() === "Infinity";
			}
			if(rightType.isNull() === true) {
				if(!((leftType.isNullable() === true) || (this._left.isLateInit() === true) || (this._node._options.rules.ignoreMisfit === true))) {
					TypeException.throwInvalidComparison(this._left, this._right, this._node);
				}
				this._enumLeft = false;
			}
			else {
				if(leftType.isNull() === true) {
					if(!((rightType.isNullable() === true) || (this._right.isLateInit() === true) || (this._node._options.rules.ignoreMisfit === true))) {
						TypeException.throwInvalidComparison(this._left, this._right, this._node);
					}
				}
				else {
					if(!(leftType.isAssignableToVariable(rightType, false) === true) && !(rightType.isAssignableToVariable(leftType, false) === true)) {
						if(leftType.isEnum() === true) {
							if(!(leftType.isComparableWith(rightType) === true)) {
								TypeException.throwInvalidComparison(this._left, this._right, this._node);
							}
						}
						else if(rightType.isEnum() === true) {
							if(!(rightType.isComparableWith(leftType) === true)) {
								TypeException.throwInvalidComparison(this._left, this._right, this._node);
							}
						}
						else {
							TypeException.throwInvalidComparison(this._left, this._right, this._node);
						}
					}
					if((rightType.isEnum() === true) && !KSType.isClassInstance(this._right, NumericBinaryOperatorExpression)) {
						this._enumRight = true;
					}
					else if(KSType.isClassInstance(this._right, IdentifierLiteral)) {
						if(this._right.__ks_func_value_0() === "NaN") {
							this._nanRight = true;
						}
						else if(this._right.__ks_func_value_0() === "Infinity") {
							this._infinity = true;
						}
					}
					else if(KSType.isClassInstance(this._right, UnaryOperatorNegative) && KSType.isClassInstance(this._right.__ks_func_argument_0(), IdentifierLiteral)) {
						this._infinity = this._right.__ks_func_argument_0().value() === "Infinity";
					}
				}
			}
			if(this._enumLeft && this._enumRight) {
				this._enumLeft = this._enumRight = false;
			}
		}
		__ks_func_isComputed_0() {
			return !this._nanLeft && !this._nanRight;
		}
		__ks_func_inferWhenFalseTypes_0(inferables) {
			if(KSType.isClassInstance(this._left, IdentifierLiteral) && (this._left.__ks_func_value_0() === "null") && (this._right.isInferable() === true)) {
				inferables = this._right.inferTypes(inferables);
				if(this._right.type().isNull() === true) {
					if(KSType.isClassInstance(this._right, IdentifierLiteral)) {
						inferables[this._right.__ks_func_path_0()] = (() => {
							const d = new Dictionary();
							d.isVariable = true;
							d.type = this._right.__ks_func_getDeclaredType_0().setNullable(false);
							return d;
						})();
					}
				}
				else {
					inferables[this._right.path()] = (() => {
						const d = new Dictionary();
						d.isVariable = KSType.isClassInstance(this._right, IdentifierLiteral);
						d.type = this._right.type().setNullable(false);
						return d;
					})();
				}
			}
			else if(KSType.isClassInstance(this._right, IdentifierLiteral) && (this._right.__ks_func_value_0() === "null") && (this._left.isInferable() === true)) {
				inferables = this._left.inferTypes(inferables);
				if(this._left.type().isNull() === true) {
					if(KSType.isClassInstance(this._left, IdentifierLiteral)) {
						inferables[this._left.__ks_func_path_0()] = (() => {
							const d = new Dictionary();
							d.isVariable = true;
							d.type = this._left.__ks_func_getDeclaredType_0().setNullable(false);
							return d;
						})();
					}
				}
				else {
					inferables[this._left.path()] = (() => {
						const d = new Dictionary();
						d.isVariable = KSType.isClassInstance(this._left, IdentifierLiteral);
						d.type = this._left.type().setNullable(false);
						return d;
					})();
				}
			}
			else {
				inferables = this._right.inferTypes(this._left.inferTypes(inferables));
			}
			return inferables;
		}
		__ks_func_inferWhenTrueTypes_0(inferables) {
			inferables = this._right.inferTypes(this._left.inferTypes(inferables));
			const leftType = this._left.type();
			const rightType = this._right.type();
			if(this._left.isInferable() === true) {
				if(this._right.isInferable() === true) {
					if(rightType.isMorePreciseThan(leftType) === true) {
						inferables[this._left.path()] = (() => {
							const d = new Dictionary();
							d.isVariable = KSType.isClassInstance(this._left, IdentifierLiteral);
							d.type = rightType.setNullable(leftType);
							return d;
						})();
					}
					else if(leftType.isMorePreciseThan(rightType) === true) {
						inferables[this._right.path()] = (() => {
							const d = new Dictionary();
							d.isVariable = KSType.isClassInstance(this._right, IdentifierLiteral);
							d.type = leftType.setNullable(rightType);
							return d;
						})();
					}
				}
				else if(rightType.isAssignableToVariable(leftType, true) === true) {
					inferables[this._left.path()] = (() => {
						const d = new Dictionary();
						d.isVariable = KSType.isClassInstance(this._left, IdentifierLiteral);
						d.type = rightType;
						return d;
					})();
				}
			}
			else if((this._right.isInferable() === true) && (leftType.isAssignableToVariable(rightType, true) === true)) {
				inferables[this._right.path()] = (() => {
					const d = new Dictionary();
					d.isVariable = KSType.isClassInstance(this._right, IdentifierLiteral);
					d.type = leftType;
					return d;
				})();
			}
			return inferables;
		}
		toLeftFragments() {
			return this.__ks_func_toLeftFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toLeftFragments_0(fragments, reuseName, reusable, assignable) {
			if(reuseName === void 0) {
				reuseName = null;
			}
			let suffix = null;
			let wrap = true;
			if(this._enumLeft) {
				if(this._left.type().isNullable() === true) {
					fragments.code($runtime.helper(this._left), ".valueOf(");
					wrap = false;
					suffix = ")";
				}
				else {
					suffix = ".value";
				}
			}
			else if(this._enumRight && (this._left.type().isAny() === true) && !(this._left.type().isNull() === true)) {
				if(this._left.type().isNullable() === true) {
					fragments.code($runtime.helper(this._left), ".valueOf(");
					wrap = false;
					suffix = ")";
				}
				else {
					suffix = ".valueOf()";
				}
			}
			if((reusable === true) && (reuseName !== null)) {
				if(assignable === true) {
					fragments.code("(", reuseName, $equals).compile(this._left).code(")");
				}
				else {
					fragments.code(reuseName);
				}
			}
			else if(wrap) {
				fragments.wrap(this._left);
			}
			else {
				fragments.compile(this._left);
			}
			if(suffix !== null) {
				fragments.code(suffix);
			}
		}
		__ks_func_toLeftFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[2]) && t0(args[3])) {
					return proto.__ks_func_toLeftFragments_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_toLeftFragments_rt) {
				return super.__ks_func_toLeftFragments_rt.call(null, that, ComparisonOperator.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toOperatorFragments() {
			return this.__ks_func_toOperatorFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toOperatorFragments_0(fragments, reuseName, leftReusable, leftAssignable, rightReusable, rightAssignable) {
			if(reuseName === void 0) {
				reuseName = null;
			}
			if(this._nanLeft) {
				if((rightReusable === true) && (reuseName !== null)) {
					fragments.code("Number.isNaN(").code(reuseName, $equals).compile(this._right).code(")");
				}
				else {
					fragments.code("Number.isNaN(").compile(this._right).code(")");
				}
			}
			else if(this._nanRight) {
				if((leftReusable === true) && (reuseName !== null)) {
					fragments.code("Number.isNaN(", reuseName, ")");
				}
				else {
					fragments.code("Number.isNaN(").compile(this._left).code(")");
				}
			}
			else if(this._infinity) {
				fragments.code($runtime.operator(this._node), ".eq(").compile(this._left).code(", ").compile(this._right).code(")");
			}
			else {
				this.__ks_func_toLeftFragments_0(fragments, reuseName, leftReusable, leftAssignable);
				fragments.code(" === ");
				this.__ks_func_toRightFragments_0(fragments, reuseName, rightReusable, rightAssignable);
			}
		}
		__ks_func_toOperatorFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 6) {
				if(t0(args[0]) && t0(args[2]) && t0(args[3]) && t0(args[4]) && t0(args[5])) {
					return proto.__ks_func_toOperatorFragments_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
				}
			}
			if(super.__ks_func_toOperatorFragments_rt) {
				return super.__ks_func_toOperatorFragments_rt.call(null, that, ComparisonOperator.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toRightFragments() {
			return this.__ks_func_toRightFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toRightFragments_0(fragments, reuseName, reusable, assignable) {
			if(reuseName === void 0) {
				reuseName = null;
			}
			let suffix = null;
			let wrap = true;
			if(this._enumRight) {
				suffix = ".value";
			}
			else if(this._enumLeft && (this._right.type().isAny() === true) && !(this._right.type().isNull() === true)) {
				if(this._right.type().isNullable() === true) {
					fragments.code($runtime.helper(this._right), ".valueOf(");
					wrap = false;
					suffix = ")";
				}
				else {
					suffix = ".valueOf()";
				}
			}
			if((reusable === true) && (reuseName !== null)) {
				if(assignable === true) {
					fragments.code("(", reuseName, $equals).compile(this._right).code(")");
				}
				else {
					fragments.code(reuseName);
				}
			}
			else if(wrap) {
				fragments.wrap(this._right);
			}
			else {
				fragments.compile(this._right);
			}
			if(suffix !== null) {
				fragments.code(suffix);
			}
		}
		__ks_func_toRightFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[2]) && t0(args[3])) {
					return proto.__ks_func_toRightFragments_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_toRightFragments_rt) {
				return super.__ks_func_toRightFragments_rt.call(null, that, ComparisonOperator.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class InequalityOperator extends EqualityOperator {
		static __ks_new_0(...args) {
			const o = Object.create(InequalityOperator.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_inferWhenFalseTypes_0(inferables) {
			return super.__ks_func_inferWhenTrueTypes_0(inferables);
		}
		__ks_func_inferWhenTrueTypes_0(inferables) {
			return super.__ks_func_inferWhenFalseTypes_0(inferables);
		}
		__ks_func_toOperatorFragments_0(fragments, reuseName, leftReusable, leftAssignable, rightReusable, rightAssignable) {
			if(reuseName === void 0) {
				reuseName = null;
			}
			if(this._nanLeft) {
				if((rightReusable === true) && (reuseName !== null)) {
					fragments.code("!Number.isNaN(").code(reuseName, $equals).compile(this._right).code(")");
				}
				else {
					fragments.code("!Number.isNaN(").compile(this._right).code(")");
				}
			}
			else if(this._nanRight) {
				if((leftReusable === true) && (reuseName !== null)) {
					fragments.code("!Number.isNaN(", reuseName, ")");
				}
				else {
					fragments.code("!Number.isNaN(").compile(this._left).code(")");
				}
			}
			else if(this._infinity) {
				fragments.code($runtime.operator(this._node), ".neq(").compile(this._left).code(", ").compile(this._right).code(")");
			}
			else {
				this.__ks_func_toLeftFragments_0(fragments, reuseName, leftReusable, leftAssignable);
				fragments.code(" !== ");
				this.__ks_func_toRightFragments_0(fragments, reuseName, rightReusable, rightAssignable);
			}
		}
	}
	class NumericComparisonOperator extends ComparisonOperator {
		__ks_init() {
			super.__ks_init();
			this._isNative = false;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			super.__ks_func_prepare_0();
			if((this._left.type().isNumber() === true) && (this._right.type().isNumber() === true)) {
				this._isNative = true;
			}
			else if(this._left.type().canBeNumber() === true) {
				if(!(this._right.type().canBeNumber() === true)) {
					TypeException.throwInvalidOperand(this._right, this.operator(), this._node);
				}
			}
			else {
				TypeException.throwInvalidOperand(this._left, this.operator(), this._node);
			}
			if((this._left.type().isNullable() === true) || (this._right.type().isNullable() === true)) {
				this._isNative = false;
			}
		}
		__ks_func_isComputed_0() {
			return this._isNative;
		}
		toNativeFragments() {
			return this.__ks_func_toNativeFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toNativeFragments_0(fragments, reuseName, leftReusable, rightReusable) {
			if(reuseName === void 0) {
				reuseName = null;
			}
			if((leftReusable === true) && (reuseName !== null)) {
				fragments.code(reuseName);
			}
			else {
				fragments.wrap(this._left);
			}
			fragments.code($space, this.__ks_func_symbol_0(), $space);
			if((rightReusable === true) && (reuseName !== null)) {
				fragments.code("(", reuseName, $equals).compile(this._right).code(")");
			}
			else {
				fragments.wrap(this._right);
			}
		}
		__ks_func_toNativeFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[2]) && t0(args[3])) {
					return proto.__ks_func_toNativeFragments_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_toNativeFragments_rt) {
				return super.__ks_func_toNativeFragments_rt.call(null, that, ComparisonOperator.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toOperatorFragments() {
			return this.__ks_func_toOperatorFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toOperatorFragments_1(fragments, reuseName, leftReusable, leftAssignable, rightReusable, rightAssignable) {
			if(reuseName === void 0) {
				reuseName = null;
			}
			if(this._isNative) {
				this.__ks_func_toNativeFragments_0(fragments, reuseName, leftReusable, rightReusable);
			}
			else {
				fragments.code($runtime.operator(this._node), "." + this.__ks_func_runtime_0() + "(");
				if(reuseName !== null) {
					if(leftReusable === true) {
						if(leftAssignable === true) {
							fragments.code(reuseName, $equals).compile(this._left);
						}
						else {
							fragments.code(reuseName);
						}
					}
					else {
						fragments.compile(this._left);
					}
					fragments.code($comma);
					if(rightReusable === true) {
						if(rightAssignable === true) {
							fragments.code(reuseName, $equals).compile(this._right);
						}
						else {
							fragments.code(reuseName);
						}
					}
					else {
						fragments.compile(this._right);
					}
				}
				else {
					fragments.compile(this._left).code($comma).compile(this._right);
				}
				fragments.code(")");
			}
		}
		__ks_func_toOperatorFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 6) {
				if(t0(args[0]) && t0(args[2]) && t0(args[3]) && t0(args[4]) && t0(args[5])) {
					return proto.__ks_func_toOperatorFragments_1.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
				}
			}
			if(super.__ks_func_toOperatorFragments_rt) {
				return super.__ks_func_toOperatorFragments_rt.call(null, that, ComparisonOperator.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class GreaterThanOperator extends NumericComparisonOperator {
		static __ks_new_0(...args) {
			const o = Object.create(GreaterThanOperator.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_0() {
			return Operator.GreaterThan;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_0.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericComparisonOperator.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "gt";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericComparisonOperator.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return ">";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericComparisonOperator.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class GreaterThanOrEqualOperator extends NumericComparisonOperator {
		static __ks_new_0(...args) {
			const o = Object.create(GreaterThanOrEqualOperator.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_1() {
			return Operator.GreaterThanOrEqual;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_1.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericComparisonOperator.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "gte";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericComparisonOperator.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return ">=";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericComparisonOperator.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class LessThanOperator extends NumericComparisonOperator {
		static __ks_new_0(...args) {
			const o = Object.create(LessThanOperator.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_2() {
			return Operator.LessThan;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_2.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericComparisonOperator.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "lt";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericComparisonOperator.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "<";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericComparisonOperator.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class LessThanOrEqualOperator extends NumericComparisonOperator {
		static __ks_new_0(...args) {
			const o = Object.create(LessThanOrEqualOperator.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		operator() {
			return this.__ks_func_operator_rt.call(null, this, this, arguments);
		}
		__ks_func_operator_3() {
			return Operator.LessThanOrEqual;
		}
		__ks_func_operator_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_operator_3.call(that);
			}
			if(super.__ks_func_operator_rt) {
				return super.__ks_func_operator_rt.call(null, that, NumericComparisonOperator.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		runtime() {
			return this.__ks_func_runtime_rt.call(null, this, this, arguments);
		}
		__ks_func_runtime_0() {
			return "lte";
		}
		__ks_func_runtime_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_runtime_0.call(that);
			}
			if(super.__ks_func_runtime_rt) {
				return super.__ks_func_runtime_rt.call(null, that, NumericComparisonOperator.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		symbol() {
			return this.__ks_func_symbol_rt.call(null, this, this, arguments);
		}
		__ks_func_symbol_0() {
			return "<=";
		}
		__ks_func_symbol_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_symbol_0.call(that);
			}
			if(super.__ks_func_symbol_rt) {
				return super.__ks_func_symbol_rt.call(null, that, NumericComparisonOperator.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class PolyadicOperatorAnd extends PolyadicOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(PolyadicOperatorAnd.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(PolyadicOperatorAnd.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(PolyadicOperatorAnd.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.prepare();
				if(operand.type().isInoperative() === true) {
					TypeException.throwUnexpectedInoperative(operand, this);
				}
				if(!(operand.type().canBeBoolean() === true)) {
					TypeException.throwInvalidOperand(operand, Operator.And, this);
				}
				{
					let __ks_2 = operand.inferWhenTrueTypes(new Dictionary());
					for(const name in __ks_2) {
						const data = __ks_2[name];
						this._scope.updateInferable(name, data, this);
					}
				}
			}
		}
		__ks_func_inferTypes_0(inferables) {
			const scope = this.__ks_func_statement_0().scope();
			for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
				operand = this._operands[index];
				{
					let __ks_1 = operand.inferTypes(new Dictionary());
					for(const name in __ks_1) {
						const data = __ks_1[name];
						if(KSType.isValue(inferables[name])) {
							if((data.type.equals(inferables[name].type) === true) || (data.type.isMorePreciseThan(inferables[name].type) === true)) {
								inferables[name] = data;
							}
							else {
								inferables[name] = (() => {
									const d = new Dictionary();
									d.isVariable = data.isVariable;
									d.type = Type.union(this._scope, inferables[name].type, data.type);
									return d;
								})();
							}
						}
						else {
							if((index !== 0) && (data.isVariable === true)) {
								let variable = scope.getVariable(name);
								if(KSType.isValue(variable)) {
									const type = variable.getRealType();
									if((data.type.equals(type) === true) || (data.type.isMorePreciseThan(type) === true)) {
										inferables[name] = data;
									}
									else {
										inferables[name] = (() => {
											const d = new Dictionary();
											d.isVariable = true;
											d.type = Type.union(this._scope, type, data.type);
											return d;
										})();
									}
								}
								else {
									inferables[name] = data;
								}
							}
							else {
								inferables[name] = data;
							}
						}
					}
				}
			}
			return inferables;
		}
		__ks_func_inferWhenFalseTypes_0(inferables) {
			return this.__ks_func_inferTypes_0(inferables);
		}
		__ks_func_inferWhenTrueTypes_0(inferables) {
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				{
					let __ks_2 = operand.inferWhenTrueTypes(new Dictionary());
					for(const name in __ks_2) {
						const data = __ks_2[name];
						inferables[name] = data;
					}
				}
			}
			return inferables;
		}
		__ks_func_isBooleanComputed_1(junction) {
			return junction !== Junction.AND;
		}
		__ks_func_toFragments_62(fragments, mode) {
			let nf = false;
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("&&", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrapBoolean(operand, Mode.None, Junction.AND);
			}
		}
		__ks_func_toBooleanFragments_14(fragments, mode, junction) {
			this.__ks_func_toFragments_62(fragments, mode);
		}
		__ks_func_toBooleanFragments_5(fragments, mode, junction) {
			return this.__ks_func_toBooleanFragments_14(fragments, mode, junction);
		}
		__ks_func_toBooleanFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toBooleanFragments_14.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_toBooleanFragments_rt.call(null, that, PolyadicOperatorExpression.prototype, args);
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("Boolean");
		}
	}
	class BinaryOperatorAnd extends PolyadicOperatorAnd {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorAnd.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorAnd.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorAnd.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = [this._data.left, this._data.right], __ks_2 = __ks_1.length, data; __ks_0 < __ks_2; ++__ks_0) {
				data = __ks_1[__ks_0];
				let operand = $compile.expression(data, this, void 0);
				operand.analyse();
				this._operands.push(operand);
			}
		}
	}
	class PolyadicOperatorOr extends PolyadicOperatorExpression {
		static __ks_new_0() {
			const o = Object.create(PolyadicOperatorOr.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(PolyadicOperatorOr.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(PolyadicOperatorOr.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_prepare_0() {
			const lastIndex = KSOperator.subtraction(this._operands.length, 1);
			const originals = new Dictionary();
			for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
				operand = this._operands[index];
				operand.prepare();
				if(operand.type().isInoperative() === true) {
					TypeException.throwUnexpectedInoperative(operand, this);
				}
				if(!(operand.type().canBeBoolean() === true)) {
					TypeException.throwInvalidOperand(operand, Operator.And, this);
				}
				if(KSOperator.lt(index, lastIndex)) {
					{
						let __ks_1 = operand.inferWhenFalseTypes(new Dictionary());
						for(const name in __ks_1) {
							const data = __ks_1[name];
							if((data.isVariable === true) && !KSType.isValue(originals[name])) {
								originals[name] = (() => {
									const d = new Dictionary();
									d.isVariable = true;
									d.type = this._scope.__ks_func_getVariable_0(name).__ks_func_getRealType_0();
									return d;
								})();
							}
							this._scope.updateInferable(name, data, this);
						}
					}
				}
			}
			for(const name in originals) {
				const data = originals[name];
				this._scope.updateInferable(name, data, this);
			}
		}
		__ks_func_inferTypes_0(inferables) {
			const scope = this.__ks_func_statement_0().scope();
			for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
				operand = this._operands[index];
				{
					let __ks_1 = operand.inferTypes(new Dictionary());
					for(const name in __ks_1) {
						const data = __ks_1[name];
						if(KSType.isValue(inferables[name])) {
							if((data.type.equals(inferables[name].type) === true) || (data.type.isMorePreciseThan(inferables[name].type) === true)) {
								inferables[name] = data;
							}
							else {
								inferables[name] = (() => {
									const d = new Dictionary();
									d.isVariable = data.isVariable;
									d.type = Type.union(this._scope, inferables[name].type, data.type);
									return d;
								})();
							}
						}
						else {
							if((index !== 0) && (data.isVariable === true)) {
								let variable = scope.getVariable(name);
								if(KSType.isValue(variable)) {
									const type = variable.getRealType();
									if((data.type.equals(type) === true) || (data.type.isMorePreciseThan(type) === true)) {
										inferables[name] = data;
									}
									else {
										inferables[name] = (() => {
											const d = new Dictionary();
											d.isVariable = true;
											d.type = Type.union(this._scope, type, data.type);
											return d;
										})();
									}
								}
								else {
									inferables[name] = data;
								}
							}
							else {
								inferables[name] = data;
							}
						}
					}
				}
			}
			return inferables;
		}
		__ks_func_inferWhenFalseTypes_0(inferables) {
			const scope = this.__ks_func_statement_0().scope();
			for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
				operand = this._operands[index];
				{
					let __ks_1 = operand.inferWhenFalseTypes(new Dictionary());
					for(const name in __ks_1) {
						const data = __ks_1[name];
						if(KSType.isValue(inferables[name])) {
							if((data.type.equals(inferables[name].type) === true) || (data.type.isMorePreciseThan(inferables[name].type) === true)) {
								inferables[name] = data;
							}
							else {
								inferables[name] = (() => {
									const d = new Dictionary();
									d.isVariable = data.isVariable;
									d.type = Type.union(this._scope, inferables[name].type, data.type);
									return d;
								})();
							}
						}
						else {
							if((index !== 0) && (data.isVariable === true)) {
								let variable = scope.getVariable(name);
								if(KSType.isValue(variable)) {
									const type = variable.getRealType();
									if((data.type.equals(type) === true) || (data.type.isMorePreciseThan(type) === true)) {
										inferables[name] = data;
									}
									else {
										inferables[name] = (() => {
											const d = new Dictionary();
											d.isVariable = true;
											d.type = Type.union(this._scope, type, data.type);
											return d;
										})();
									}
								}
								else {
									inferables[name] = data;
								}
							}
							else {
								inferables[name] = data;
							}
						}
					}
				}
			}
			return inferables;
		}
		__ks_func_inferWhenTrueTypes_0(inferables) {
			const scope = this.__ks_func_statement_0().scope();
			const whenTrue = new Dictionary();
			for(let index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
				operand = this._operands[index];
				{
					let __ks_1 = operand.inferTypes(new Dictionary());
					for(const name in __ks_1) {
						const data = __ks_1[name];
						if(KSType.isValue(inferables[name])) {
							if((data.type.equals(inferables[name].type) === true) || (data.type.isMorePreciseThan(inferables[name].type) === true)) {
								inferables[name] = data;
							}
							else {
								inferables[name] = (() => {
									const d = new Dictionary();
									d.isVariable = data.isVariable;
									d.type = Type.union(this._scope, inferables[name].type, data.type);
									return d;
								})();
							}
						}
						else if((index !== 0) && (data.isVariable === true)) {
							let variable = scope.getVariable(name);
							if(KSType.isValue(variable)) {
								const type = variable.getRealType();
								if((data.type.equals(type) === true) || (data.type.isMorePreciseThan(type) === true)) {
									inferables[name] = data;
								}
								else {
									inferables[name] = (() => {
										const d = new Dictionary();
										d.isVariable = true;
										d.type = Type.union(this._scope, type, data.type);
										return d;
									})();
								}
							}
							else {
								inferables[name] = data;
							}
						}
						else {
							inferables[name] = data;
						}
					}
				}
				if(index === 0) {
					{
						let __ks_1 = operand.inferWhenTrueTypes(new Dictionary());
						for(const name in __ks_1) {
							const data = __ks_1[name];
							if(data.isVariable === true) {
								whenTrue[name] = [data.type];
							}
						}
					}
				}
				else {
					{
						let __ks_1 = operand.inferWhenTrueTypes(new Dictionary());
						for(const name in __ks_1) {
							const data = __ks_1[name];
							if((data.isVariable === true) && KSType.isValue(whenTrue[name])) {
								whenTrue[name].push(data.type);
							}
						}
					}
				}
			}
			for(const name in whenTrue) {
				const types = whenTrue[name];
				if(types.length !== 1) {
					let variable = scope.getVariable(name);
					if(KSType.isValue(variable)) {
						inferables[name] = (() => {
							const d = new Dictionary();
							d.isVariable = true;
							d.type = Type.union.apply(Type, [].concat([this._scope], types));
							return d;
						})();
					}
				}
			}
			return inferables;
		}
		__ks_func_isBooleanComputed_1(junction) {
			return junction !== Junction.OR;
		}
		__ks_func_toFragments_62(fragments, mode) {
			let nf = false;
			for(let __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("||", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrapBoolean(operand, Mode.None, Junction.OR);
			}
		}
		__ks_func_toBooleanFragments_15(fragments, mode, junction) {
			this.__ks_func_toFragments_62(fragments, mode);
		}
		__ks_func_toBooleanFragments_5(fragments, mode, junction) {
			return this.__ks_func_toBooleanFragments_15(fragments, mode, junction);
		}
		__ks_func_toBooleanFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_toBooleanFragments_15.call(that, args[0], args[1], args[2]);
				}
			}
			return super.__ks_func_toBooleanFragments_rt.call(null, that, PolyadicOperatorExpression.prototype, args);
		}
		__ks_func_type_22() {
			return this._scope.__ks_func_reference_0("Boolean");
		}
	}
	class BinaryOperatorOr extends PolyadicOperatorOr {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorOr.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorOr.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorOr.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = [this._data.left, this._data.right], __ks_2 = __ks_1.length, data; __ks_0 < __ks_2; ++__ks_0) {
				data = __ks_1[__ks_0];
				let operand = $compile.expression(data, this, void 0);
				operand.analyse();
				this._operands.push(operand);
			}
		}
	}
	class PolyadicOperatorImply extends PolyadicOperatorOr {
		static __ks_new_0() {
			const o = Object.create(PolyadicOperatorImply.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(PolyadicOperatorImply.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(PolyadicOperatorImply.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_toFragments_62(fragments, mode) {
			const l = KSOperator.subtraction(this._operands.length, 2);
			fragments.code("!(".repeat(l));
			fragments.code("!").wrapBoolean(this._operands[0]);
			for(let __ks_0 = 1, __ks_1 = this._operands.length - 1, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				fragments.code(" || ").wrapBoolean(operand).code(")");
			}
			fragments.code(" || ").wrapBoolean(this._operands[KSOperator.subtraction(this._operands.length, 1)]);
		}
	}
	class BinaryOperatorImply extends BinaryOperatorOr {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorImply.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorImply.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorImply.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_toFragments_62(fragments, mode) {
			fragments.code("!").wrapBoolean(this._operands[0]).code(" || ").wrapBoolean(this._operands[1]);
		}
	}
	class PolyadicOperatorXor extends PolyadicOperatorAnd {
		static __ks_new_0() {
			const o = Object.create(PolyadicOperatorXor.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(PolyadicOperatorXor.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(PolyadicOperatorXor.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_inferWhenFalseTypes_0(inferables) {
			return this.__ks_func_inferWhenTrueTypes_0(inferables);
		}
		__ks_func_toFragments_62(fragments, mode) {
			const l = KSOperator.subtraction(this._operands.length, 2);
			fragments.code("(".repeat(l));
			fragments.wrapBoolean(this._operands[0]);
			for(let __ks_0 = 1, __ks_1 = this._operands.length - 1, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				fragments.code(" !== ").wrapBoolean(operand).code(")");
			}
			fragments.code(" !== ").wrapBoolean(this._operands[KSOperator.subtraction(this._operands.length, 1)]);
		}
	}
	class BinaryOperatorXor extends BinaryOperatorAnd {
		static __ks_new_0() {
			const o = Object.create(BinaryOperatorXor.prototype);
			o.__ks_init();
			o.__ks_cons_0();
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(BinaryOperatorXor.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(BinaryOperatorXor.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_inferWhenFalseTypes_0(inferables) {
			return this.__ks_func_inferWhenTrueTypes_0(inferables);
		}
		__ks_func_toFragments_62(fragments, mode) {
			fragments.wrapBoolean(this._operands[0]).code($space).code("!==", this._data.operator).code($space).wrapBoolean(this._operands[1]);
		}
	}
	class Block extends AbstractNode {
		static __ks_new_0(...args) {
			const o = Object.create(Block.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._awaiting = false;
			this._empty = false;
			this._exit = false;
			this._statements = [];
			this._type = null;
		}
		__ks_cons_0(data, parent, scope = parent.__ks_func_scope_0()) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			AbstractNode.prototype.__ks_cons_1.call(this, data, parent, scope);
			this._options = Attribute.configure(data, parent._options, AttributeTarget.Statement, this.__ks_func_file_0());
			if(!KSType.isValue(this._data.statements)) {
				this._data.statements = [];
			}
			this._empty = this._data.statements.length === 0;
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return Block.prototype.__ks_cons_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			for(let __ks_0 = 0, __ks_1 = this._data.statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._data.statements[__ks_0];
				this._scope.line(statement.start.line);
				this._statements.push(statement = $compile.statement(statement, this));
				statement.initiate();
				statement.analyse();
				if(statement.isAwait() === true) {
					this._awaiting = true;
				}
			}
		}
		__ks_func_analyse_1(from, to) {
			if(to === void 0 || to === null) {
				to = KSHelper.cast(this._data.statements.length, "Number", false, null, "Number") + 1;
			}
			for(let __ks_0 = from, __ks_1 = Math.min(this._data.statements.length, to + 1), statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._data.statements[__ks_0];
				this._scope.line(statement.start.line);
				this._statements.push(statement = $compile.statement(statement, this));
				statement.initiate();
				statement.analyse();
				if(statement.isAwait() === true) {
					this._awaiting = true;
				}
			}
		}
		__ks_func_analyse_2(statements) {
			for(let __ks_0 = 0, __ks_1 = statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = statements[__ks_0];
				this._statements.push(statement);
				statement.__ks_func_analyse_0();
				if(statement.isAwait() === true) {
					this._awaiting = true;
				}
			}
		}
		__ks_func_analyse_rt(that, proto, args) {
			const t0 = KSType.isNumber;
			const t1 = value => KSType.isArray(value, value => KSType.isClassInstance(value, AbstractNode));
			const t2 = value => KSType.isNumber(value) || KSType.isNull(value);
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_analyse_1.call(that, args[0], void 0);
				}
				if(t1(args[0])) {
					return proto.__ks_func_analyse_2.call(that, args[0]);
				}
			}
			if(args.length === 2) {
				if(t0(args[0]) && t2(args[1])) {
					return proto.__ks_func_analyse_1.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			if((this._type !== null) && !(this._type.__ks_func_isAny_0() === true)) {
				for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
					statement = this._statements[__ks_0];
					this._scope.line(statement.line());
					if(this._exit) {
						SyntaxException.throwDeadCode(statement);
					}
					statement.setExpectedType(this._type);
					statement.prepare();
					statement.checkReturnType(this._type);
					this._exit = statement.isExit();
				}
			}
			else {
				for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
					statement = this._statements[__ks_0];
					this._scope.line(statement.line());
					if(this._exit) {
						SyntaxException.throwDeadCode(statement);
					}
					statement.prepare();
					this._exit = statement.isExit();
				}
			}
			this.__ks_func_checkExit_0();
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.translate();
			}
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addInitializableVariable() {
			return this.__ks_func_addInitializableVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_addInitializableVariable_7(variable, node) {
			if(!this._scope.hasDeclaredVariable(variable.name())) {
				this._parent.addInitializableVariable(variable, this);
			}
		}
		__ks_func_addInitializableVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_addInitializableVariable_7.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addInitializableVariable_rt) {
				return super.__ks_func_addInitializableVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addStatement() {
			return this.__ks_func_addStatement_rt.call(null, this, this, arguments);
		}
		__ks_func_addStatement_0(statement) {
			this._data.statements.push(statement);
		}
		__ks_func_addStatement_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addStatement_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_addStatement_rt) {
				return super.__ks_func_addStatement_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		checkExit() {
			return this.__ks_func_checkExit_rt.call(null, this, this, arguments);
		}
		__ks_func_checkExit_0() {
			if(!this._exit && (this._type !== null) && !(this._type.__ks_func_isVoid_0() === true)) {
				if(this._type.__ks_func_isNever_0() === true) {
					TypeException.__ks_sttc_throwExpectedThrownError_0(this);
				}
				else if((this._type.__ks_func_isAny_0() === true) && !(this._type.__ks_func_isExplicit_0() === true)) {
				}
				else if((this._statements.length === 0) || !(__ks_Array.__ks_func_last_0.call(this._statements).isExit() === true)) {
					TypeException.__ks_sttc_throwExpectedReturnedValue_0(this._type, this);
				}
			}
		}
		__ks_func_checkExit_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_checkExit_0.call(that);
			}
			if(super.__ks_func_checkExit_rt) {
				return super.__ks_func_checkExit_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		checkReturnType() {
			return this.__ks_func_checkReturnType_rt.call(null, this, this, arguments);
		}
		__ks_func_checkReturnType_1(type) {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.checkReturnType(type);
			}
		}
		__ks_func_checkReturnType_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_checkReturnType_1.call(that, args[0]);
				}
			}
			if(super.__ks_func_checkReturnType_rt) {
				return super.__ks_func_checkReturnType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getUnpreparedType() {
			return this.__ks_func_getUnpreparedType_rt.call(null, this, this, arguments);
		}
		__ks_func_getUnpreparedType_2() {
			const types = [];
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(statement.isExit() === true) {
					types.push(statement.getUnpreparedType());
				}
			}
			if(types.length === 0) {
				return Type.Never;
			}
			else {
				return Type.union(this._scope, ...types);
			}
		}
		__ks_func_getUnpreparedType_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_getUnpreparedType_2.call(that);
			}
			if(super.__ks_func_getUnpreparedType_rt) {
				return super.__ks_func_getUnpreparedType_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		initializeVariable() {
			return this.__ks_func_initializeVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_initializeVariable_10(variable, expression, node) {
			if(!this._scope.__ks_func_hasDeclaredVariable_0(variable.name)) {
				if(variable.lateInit && !(this._parent.isLateInitializable() === true)) {
					SyntaxException.__ks_sttc_throwInvalidLateInitAssignment_0(variable.name, this);
				}
				else {
					this._parent.initializeVariable(variable, expression, this);
				}
			}
		}
		__ks_func_initializeVariable_rt(that, proto, args) {
			const t0 = value => KSType.isStructInstance(value, VariableBrief);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
					return proto.__ks_func_initializeVariable_10.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_initializeVariable_rt) {
				return super.__ks_func_initializeVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isAwait() {
			return this.__ks_func_isAwait_rt.call(null, this, this, arguments);
		}
		__ks_func_isAwait_3() {
			return this._awaiting;
		}
		__ks_func_isAwait_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isAwait_3.call(that);
			}
			if(super.__ks_func_isAwait_rt) {
				return super.__ks_func_isAwait_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isEmpty() {
			return this.__ks_func_isEmpty_rt.call(null, this, this, arguments);
		}
		__ks_func_isEmpty_0() {
			return this._empty;
		}
		__ks_func_isEmpty_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isEmpty_0.call(that);
			}
			if(super.__ks_func_isEmpty_rt) {
				return super.__ks_func_isEmpty_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isExit() {
			return this.__ks_func_isExit_rt.call(null, this, this, arguments);
		}
		__ks_func_isExit_3() {
			return this._exit;
		}
		__ks_func_isExit_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExit_3.call(that);
			}
			if(super.__ks_func_isExit_rt) {
				return super.__ks_func_isExit_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInitializingInstanceVariable() {
			return this.__ks_func_isInitializingInstanceVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializingInstanceVariable_3(name) {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(statement.isInitializingInstanceVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializingInstanceVariable_rt) {
				return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isJumpable() {
			return this.__ks_func_isJumpable_rt.call(null, this, this, arguments);
		}
		__ks_func_isJumpable_2() {
			return this._parent.isJumpable();
		}
		__ks_func_isJumpable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isJumpable_2.call(that);
			}
			if(super.__ks_func_isJumpable_rt) {
				return super.__ks_func_isJumpable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isLoop() {
			return this.__ks_func_isLoop_rt.call(null, this, this, arguments);
		}
		__ks_func_isLoop_1() {
			return this._parent.isLoop();
		}
		__ks_func_isLoop_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isLoop_1.call(that);
			}
			if(super.__ks_func_isLoop_rt) {
				return super.__ks_func_isLoop_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isUsingVariable() {
			return this.__ks_func_isUsingVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isUsingVariable_3(name) {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(statement.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isUsingVariable_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isUsingVariable_3.call(that, args[0]);
				}
			}
			if(super.__ks_func_isUsingVariable_rt) {
				return super.__ks_func_isUsingVariable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isUsingInstanceVariableBefore() {
			return this.__ks_func_isUsingInstanceVariableBefore_rt.call(null, this, this, arguments);
		}
		__ks_func_isUsingInstanceVariableBefore_0(name, stmt) {
			const line = stmt.__ks_func_line_0();
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(!(KSOperator.lt(statement.line(), line) && (statement !== stmt))) {
					break;
				}
				if(statement.isUsingInstanceVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isUsingInstanceVariableBefore_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Statement);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_isUsingInstanceVariableBefore_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_isUsingInstanceVariableBefore_rt) {
				return super.__ks_func_isUsingInstanceVariableBefore_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isUsingStaticVariableBefore() {
			return this.__ks_func_isUsingStaticVariableBefore_rt.call(null, this, this, arguments);
		}
		__ks_func_isUsingStaticVariableBefore_2(__ks_class_1, varname, stmt) {
			const line = stmt.__ks_func_line_0();
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(!(KSOperator.lt(statement.line(), line) && (statement !== stmt))) {
					break;
				}
				if(statement.isUsingStaticVariable(__ks_class_1, varname) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isUsingStaticVariableBefore_rt(that, proto, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, Statement);
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2])) {
					return proto.__ks_func_isUsingStaticVariableBefore_2.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_isUsingStaticVariableBefore_rt) {
				return super.__ks_func_isUsingStaticVariableBefore_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		listNonLocalVariables() {
			return this.__ks_func_listNonLocalVariables_rt.call(null, this, this, arguments);
		}
		__ks_func_listNonLocalVariables_2(scope, variables) {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.listNonLocalVariables(scope, variables);
			}
			return variables;
		}
		__ks_func_listNonLocalVariables_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Scope);
			const t1 = KSType.isArray;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_listNonLocalVariables_2.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_listNonLocalVariables_rt) {
				return super.__ks_func_listNonLocalVariables_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		statements() {
			return this.__ks_func_statements_rt.call(null, this, this, arguments);
		}
		__ks_func_statements_0() {
			return this._data.statements;
		}
		__ks_func_statements_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_statements_0.call(that);
			}
			if(super.__ks_func_statements_rt) {
				return super.__ks_func_statements_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_75(fragments, mode) {
			if(this._awaiting) {
				let index = -1;
				let item = null;
				for(let i = 0, __ks_0 = this._statements.length, statement; i < __ks_0 && (index === -1); ++i) {
					statement = this._statements[i];
					let __ks_1;
					if(KSType.isValue(__ks_1 = statement.toFragments(fragments, Mode.None)) ? (item = __ks_1, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(this._statements.slice(index + 1));
				}
			}
			else {
				for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
					statement = this._statements[__ks_0];
					statement.toFragments(fragments, mode);
				}
			}
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_75.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toRangeFragments() {
			return this.__ks_func_toRangeFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toRangeFragments_0(fragments, from, to) {
			if(to === void 0 || to === null) {
				to = this._statements.length + 1;
			}
			for(let __ks_0 = from, __ks_1 = Math.min(this._statements.length, to + 1), statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.toFragments(fragments, Mode.None);
			}
		}
		__ks_func_toRangeFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isNumber(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t1(args[1]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toRangeFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toRangeFragments_rt) {
				return super.__ks_func_toRangeFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_39() {
			if(this._type === null) {
				if(this._exit) {
					const types = [];
					for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
						statement = this._statements[__ks_0];
						if(statement.isExit() === true) {
							types.push(statement.type());
						}
					}
					this._type = Type.union(this._scope, ...types);
				}
				else {
					this._type = Type.Never;
				}
			}
			return this._type;
		}
		__ks_func_type_40(type) {
			if(type === void 0) {
				type = null;
			}
			this._type = type;
			return this;
		}
		__ks_func_type_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Type) || KSType.isNull(value);
			if(args.length === 0) {
				return proto.__ks_func_type_39.call(that);
			}
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_type_40.call(that, args[0]);
				}
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class FunctionBlock extends Block {
		static __ks_new_0(...args) {
			const o = Object.create(FunctionBlock.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._return = null;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		addReturn() {
			return this.__ks_func_addReturn_rt.call(null, this, this, arguments);
		}
		__ks_func_addReturn_0(__ks_return_1) {
			this._return = __ks_return_1;
		}
		__ks_func_addReturn_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, Expression);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_addReturn_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_addReturn_rt) {
				return super.__ks_func_addReturn_rt.call(null, that, Block.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_checkExit_0() {
			if(this._return !== null) {
				let toAdd = false;
				let statement = __ks_Array.__ks_func_last_0.call(this._statements);
				if(KSType.isValue(statement)) {
					toAdd = !(statement.isExit() === true);
				}
				else {
					toAdd = true;
				}
				if(toAdd) {
					const statement = ReturnStatement.__ks_new_1(this._return, this);
					statement.__ks_func_analyse_0();
					statement.__ks_func_prepare_0();
					this._statements.push(statement);
				}
			}
			super.__ks_func_checkExit_0();
		}
		isInitializedVariable() {
			return this.__ks_func_isInitializedVariable_rt.call(null, this, this, arguments);
		}
		__ks_func_isInitializedVariable_0(name) {
			return true;
		}
		__ks_func_isInitializedVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializedVariable_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_isInitializedVariable_rt) {
				return super.__ks_func_isInitializedVariable_rt.call(null, that, Block.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class ConstructorBlock extends FunctionBlock {
		static __ks_new_0(...args) {
			const o = Object.create(ConstructorBlock.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._initializedVariables = new Dictionary();
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initializeVariable_10(variable, expression, node) {
			let name = null;
			if(variable.instance) {
				name = "this." + variable.name;
				this.__ks_func_parent_0().type().addInitializingInstanceVariable(variable.name);
			}
			else {
				name = variable.name;
			}
			if(this._initializedVariables[name]) {
				if(variable.immutable) {
					ReferenceException.__ks_sttc_throwImmutable_0(name, expression);
				}
			}
			else {
				this._initializedVariables[name] = true;
			}
		}
		__ks_func_isInitializedVariable_0(name) {
			return this._initializedVariables[name];
		}
		__ks_func_isInitializingInstanceVariable_4(name) {
			if(this._initializedVariables["this." + name]) {
				return true;
			}
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(statement.isInitializingInstanceVariable(name) === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isInitializingInstanceVariable_3(name) {
			if(KSType.isString(name)) {
				return this.__ks_func_isInitializingInstanceVariable_4(name);
			}
			return super.__ks_func_isInitializingInstanceVariable_3(name);
		}
		__ks_func_isInitializingInstanceVariable_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInitializingInstanceVariable_4.call(that, args[0]);
				}
			}
			return super.__ks_func_isInitializingInstanceVariable_rt.call(null, that, FunctionBlock.prototype, args);
		}
	}
	class MethodBlock extends FunctionBlock {
		static __ks_new_0(...args) {
			const o = Object.create(MethodBlock.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initializeVariable_10(variable, expression, node) {
			if(variable.instance) {
				this.__ks_func_parent_0().type().addInitializingInstanceVariable(variable.name);
			}
			else {
				super.__ks_func_initializeVariable_10(variable, expression, node);
			}
		}
	}
	const MacroVariableKind = KSHelper.enum(Number, {
		AST: 0,
		AutoEvaluated: 1
	});
	const $target = KSOperator.gte(parseInt(/^v(\d+)\./.exec(process.version)[1]), 6) ? "ecma-v6" : "ecma-v5";
	function $evaluate() {
		return $evaluate.__ks_rt(this, arguments);
	};
	$evaluate.__ks_0 = function(source) {
		const compiler = Compiler.__ks_new_0("__ks__", (() => {
			const d = new Dictionary();
			d.register = false;
			d.target = $target;
			return d;
		})());
		compiler.__ks_func_compile_0("#![bin]\nextern console, JSON, __ks_marker\nreturn " + source);
		return eval(KSHelper.concatString("(function(__ks_marker) {", compiler.__ks_func_toSource_0(), "})"))(MacroMarker);
	};
	$evaluate.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 1) {
			if(t0(args[0])) {
				return $evaluate.__ks_0.call(that, args[0]);
			}
		}
		throw KSHelper.badArgs();
	};
	class MacroMarker {
		static __ks_new_0(...args) {
			const o = Object.create(MacroMarker.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
		}
		__ks_cons_0(index) {
			this.index = index;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isNumber;
			if(args.length === 1) {
				if(t0(args[0])) {
					return MacroMarker.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
	}
	function $reificate() {
		return $reificate.__ks_rt(this, arguments);
	};
	$reificate.__ks_0 = function(macro, node, data, ast, reification = null, separator = null) {
		if(ast === true) {
			return Generator.generate.__ks_0(data, (() => {
				const d = new Dictionary();
				d.transformers = (() => {
					const d = new Dictionary();
					d.expression = KSHelper.vcurry($transformExpression, null, macro, node);
					return d;
				})();
				return d;
			})());
		}
		else {
			let __ks_0 = reification.valueOf();
			if(__ks_0 === ReificationKind.Argument.value) {
				if(KSType.isArray(data)) {
					return data.join(", ");
				}
				else {
					return data;
				}
			}
			else if(__ks_0 === ReificationKind.Expression.value) {
				const context = (() => {
					const d = new Dictionary();
					d.data = "";
					return d;
				})();
				$serialize.__ks_0(macro, data, context);
				return context.data;
			}
			else if(__ks_0 === ReificationKind.Join.value) {
				if(KSType.isArray(data)) {
					return data.join(separator);
				}
				else {
					return data;
				}
			}
			else if(__ks_0 === ReificationKind.Statement.value) {
				if(KSType.isArray(data)) {
					return KSHelper.concatString(data.join("\n"), "\n");
				}
				else {
					return data;
				}
			}
			else if(__ks_0 === ReificationKind.Write.value) {
				return data;
			}
		}
	};
	$reificate.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		const t1 = () => true;
		const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
		let pts;
		if(args.length >= 4 && args.length <= 6) {
			if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
				if(KSHelper.isVarargs(args, 0, 1, t1, pts = [4], 0) && KSHelper.isVarargs(args, 0, 1, t1, pts, 1) && te(pts, 2)) {
					return $reificate.__ks_0.call(that, args[0], args[1], args[2], args[3], KSHelper.getVararg(args, 4, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
				throw KSHelper.badArgs();
			}
		}
		throw KSHelper.badArgs();
	};
	function $serialize() {
		return $serialize.__ks_rt(this, arguments);
	};
	$serialize.__ks_0 = function(macro, data, context) {
		if(KSType.isBoolean(data)) {
			context.data = KSOperator.addOrConcat(context.data, JSON.stringify(data));
		}
		else if(KSType.isArray(data)) {
			if(data.length === 0) {
				context.data = KSHelper.concatString(context.data, "[]");
			}
			else {
				context.data = KSHelper.concatString(context.data, "[");
				$serialize(macro, data[0], context);
				for(let i = 1, __ks_0 = data.length; i < __ks_0; ++i) {
					context.data = KSHelper.concatString(context.data, ", ");
					$serialize(macro, data[i], context);
				}
				context.data = KSHelper.concatString(context.data, "]");
			}
		}
		else if(KSType.isClassInstance(data, MacroMarker)) {
			context.data = KSOperator.addOrConcat(context.data, Generator.generate(macro.getMark(data.index)));
		}
		else if(KSType.isNumber(data)) {
			context.data = KSOperator.addOrConcat(context.data, Number.isNaN(data) ? "NaN" : data);
		}
		else if(KSType.isRegExp(data)) {
			context.data = KSOperator.addOrConcat(context.data, data);
		}
		else if(KSType.isString(data)) {
			context.data = KSOperator.addOrConcat(context.data, $quote.__ks_0(data));
		}
		else {
			let empty = true;
			let computed = null, name = null;
			context.data = KSHelper.concatString(context.data, "{");
			for(const key in data) {
				const value = data[key];
				if(empty) {
					empty = false;
					context.data = KSHelper.concatString(context.data, "\n");
				}
				computed = /^\_ks\_property\_name\_mark\_(\d+)$/.exec(key);
				if(KSType.isClassInstance(value, MacroMarker)) {
					if(KSType.isValue(computed)) {
						name = KSHelper.toString(Generator.generate(macro.getMark(computed[1]), (() => {
							const d = new Dictionary();
							d.mode = Generator.KSWriterMode.Property;
							return d;
						})()));
					}
					else {
						name = key;
					}
					if(KSHelper.valueOf(macro.getMark(value.index + 1)) === NodeKind.ObjectMember.value) {
						context.data = KSHelper.concatString(context.data, KSHelper.concatString(name, ": ", Generator.generate(macro.getMark(value.index), (() => {
							const d = new Dictionary();
							d.mode = Generator.KSWriterMode.Property;
							return d;
						})())));
					}
					else {
						context.data = KSHelper.concatString(context.data, KSHelper.concatString(name, Generator.generate(macro.getMark(value.index), (() => {
							const d = new Dictionary();
							d.mode = Generator.KSWriterMode.Property;
							return d;
						})())));
					}
				}
				else if(KSType.isValue(computed)) {
					context.data = KSHelper.concatString(context.data, KSHelper.concatString(Generator.generate(macro.getMark(computed[1]), (() => {
						const d = new Dictionary();
						d.mode = Generator.KSWriterMode.Property;
						return d;
					})()), ": "));
					$serialize(macro, value, context);
				}
				else {
					context.data = KSHelper.concatString(context.data, KSHelper.concatString($quote.__ks_0(key), ": "));
					$serialize(macro, value, context);
				}
				context.data = KSHelper.concatString(context.data, "\n");
			}
			context.data = KSHelper.concatString(context.data, "}");
		}
	};
	$serialize.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 3) {
			if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
				return $serialize.__ks_0.call(that, args[0], args[1], args[2]);
			}
		}
		throw KSHelper.badArgs();
	};
	function $transformExpression() {
		return $transformExpression.__ks_rt(this, arguments);
	};
	$transformExpression.__ks_0 = function(macro, node, data, writer) {
		let __ks_0 = data.kind.valueOf();
		if(__ks_0 === NodeKind.EnumExpression.value) {
			return macro.addMark(data);
		}
		else if(__ks_0 === NodeKind.FunctionExpression.value) {
			return macro.addMark(data);
		}
		else if(__ks_0 === NodeKind.LambdaExpression.value) {
			return macro.addMark(data);
		}
		else if(__ks_0 === NodeKind.ObjectMember.value) {
			const name = (KSHelper.valueOf(data.name.kind) === NodeKind.ComputedPropertyName.value) || (KSHelper.valueOf(data.name.kind) === NodeKind.TemplateExpression.value);
			const value = (KSHelper.valueOf(data.value.kind) === NodeKind.EnumExpression.value) || ((KSHelper.valueOf(data.value.kind) === NodeKind.Identifier.value) && !(node.scope().isPredefinedVariable(data.value.name) === true)) || (KSHelper.valueOf(data.value.kind) === NodeKind.LambdaExpression.value) || (KSHelper.valueOf(data.value.kind) === NodeKind.MemberExpression.value);
			if(name || value) {
				return (() => {
					const d = new Dictionary();
					d.kind = NodeKind.ObjectMember;
					d.name = name ? macro.addPropertyNameMark(data.name) : data.name;
					d.value = value ? macro.addMark(data.value, NodeKind.ObjectMember) : data.value;
					d.start = data.start;
					d.end = data.end;
					return d;
				})();
			}
		}
		return data;
	};
	$transformExpression.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 4) {
			if(t0(args[0]) && t0(args[1]) && t0(args[2]) && t0(args[3])) {
				return $transformExpression.__ks_0.call(that, args[0], args[1], args[2], args[3]);
			}
		}
		throw KSHelper.badArgs();
	};
	class MacroDeclaration extends AbstractNode {
		static __ks_new_0(...args) {
			const o = Object.create(MacroDeclaration.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._executeCount = 0;
			this._marks = [];
			this._parameters = new Dictionary();
			this._referenceIndex = -1;
		}
		__ks_cons_0(data, parent, __ks_0, name) {
			if(data === void 0) {
				data = null;
			}
			if(parent === void 0) {
				parent = null;
			}
			if(name === void 0 || name === null) {
				name = data.name.name;
			}
			AbstractNode.prototype.__ks_cons_1.call(this, data, parent, MacroScope.__ks_new_0());
			this._name = name;
			this._type = MacroType.__ks_sttc_fromAST_2(data, this);
			this._line = (KSType.isValue(data.start) && KSType.isValue(data.start.line)) ? data.start.line : -1;
			const builder = Generator.KSWriter.__ks_new_0((() => {
				const d = new Dictionary();
				d.filters = (() => {
					const d = new Dictionary();
					d.expression = KSHelper.vcurry(this.filter, this, false);
					d.statement = KSHelper.vcurry(this.filter, this, true);
					return d;
				})();
				return d;
			})());
			const line = builder.__ks_func_newLine_0().code("func(__ks_evaluate, __ks_reificate");
			for(let __ks_1 = 0, __ks_2 = this._data.parameters.length, data; __ks_1 < __ks_2; ++__ks_1) {
				data = this._data.parameters[__ks_1];
				let auto = false;
				for(let __ks_3 = 0, __ks_4 = data.modifiers.length, modifier; __ks_3 < __ks_4 && !(auto); ++__ks_3) {
					modifier = data.modifiers[__ks_3];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.AutoEvaluate.value) {
						auto = true;
					}
				}
				this._parameters[data.name.name] = auto ? MacroVariableKind.AutoEvaluated : MacroVariableKind.AST;
				if(auto) {
					line.code(", mut ", data.name.name);
				}
				else {
					line.code(", ", data.name.name);
				}
				if(KSType.isValue(data.defaultValue)) {
					line.code(" = ").expression(data.defaultValue);
				}
			}
			const block = line.code(")").newBlock();
			for(const name in this._parameters) {
				const kind = this._parameters[name];
				if(KSHelper.valueOf(kind) === MacroVariableKind.AutoEvaluated.value) {
					block.line(KSHelper.concatString(name, " = __ks_evaluate(__ks_reificate(", name, ", true, ", ReificationKind.Expression.value, "))"));
				}
			}
			block.line("var mut __ks_src = \"\"");
			for(let __ks_1 = 0, __ks_2 = $ast.block(this._data.body).statements, __ks_3 = __ks_2.length, statement; __ks_1 < __ks_3; ++__ks_1) {
				statement = __ks_2[__ks_1];
				block.statement(statement);
			}
			block.line("return __ks_src").done();
			line.done();
			let source = "";
			for(let __ks_1 = 0, __ks_2 = builder.__ks_func_toArray_0(), __ks_3 = __ks_2.length, fragment; __ks_1 < __ks_3; ++__ks_1) {
				fragment = __ks_2[__ks_1];
				source = KSHelper.concatString(source, fragment.code);
			}
			this._fn = $evaluate.__ks_0(source);
			this._parent.registerMacro(this._name, this);
		}
		__ks_cons_rt(that, args) {
			const t0 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			const t1 = value => KSType.isClassInstance(value, Scope) || KSType.isNull(value);
			const t2 = value => KSType.isString(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 3 && args.length <= 4) {
				if(t0(args[1]) && t1(args[2]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [3], 0) && te(pts, 1)) {
					return MacroDeclaration.prototype.__ks_cons_0.call(that, args[0], args[1], args[2], KSHelper.getVararg(args, 3, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addMark() {
			return this.__ks_func_addMark_rt.call(null, this, this, arguments);
		}
		__ks_func_addMark_0(data, kind = null) {
			const index = this._marks.length;
			this._marks.push(data, kind);
			return (() => {
				const d = new Dictionary();
				d.kind = NodeKind.CreateExpression;
				d.class = (() => {
					const d = new Dictionary();
					d.kind = NodeKind.Identifier;
					d.name = "__ks_marker";
					return d;
				})();
				d.arguments = [(() => {
					const d = new Dictionary();
					d.kind = NodeKind.NumericExpression;
					d.value = index;
					return d;
				})()];
				return d;
			})();
		}
		__ks_func_addMark_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0])) {
					return proto.__ks_func_addMark_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addMark_rt) {
				return super.__ks_func_addMark_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		addPropertyNameMark() {
			return this.__ks_func_addPropertyNameMark_rt.call(null, this, this, arguments);
		}
		__ks_func_addPropertyNameMark_0(data, kind = null) {
			const index = this._marks.length;
			this._marks.push(data, kind);
			return (() => {
				const d = new Dictionary();
				d.kind = NodeKind.Identifier;
				d.name = KSHelper.concatString("_ks_property_name_mark_", index);
				return d;
			})();
		}
		__ks_func_addPropertyNameMark_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0])) {
					return proto.__ks_func_addPropertyNameMark_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_addPropertyNameMark_rt) {
				return super.__ks_func_addPropertyNameMark_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		execute() {
			return this.__ks_func_execute_rt.call(null, this, this, arguments);
		}
		__ks_func_execute_0(__ks_arguments_1, parent) {
			const module = this.__ks_func_module_0();
			++this._executeCount;
			const args = [$evaluate, KSHelper.vcurry($reificate, null, this, parent)].concat(__ks_arguments_1);
			let data = this._fn.apply(null, [].concat(args));
			try {
				data = Parser.parse(data);
			}
			catch(error) {
				error.fileName = KSHelper.concatString(this._parent.__ks_func_file_0(), "$", this._name, "$", this._executeCount);
				error.message = KSHelper.concatString(error.message, KSHelper.concatString(" (", error.fileName, ":", error.lineNumber, ":", error.columnNumber, ")"));
				throw error;
			}
			return data;
		}
		__ks_func_execute_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return proto.__ks_func_execute_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_execute_rt) {
				return super.__ks_func_execute_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_17(recipient, name) {
			if(name === void 0 || name === null) {
				name = this._name;
			}
			recipient.exportMacro(name, this);
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0])) {
					return proto.__ks_func_export_17.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		filter() {
			return this.__ks_func_filter_rt.call(null, this, this, arguments);
		}
		__ks_func_filter_0(statement, data, fragments) {
			if(KSHelper.valueOf(data.kind) === NodeKind.MacroExpression.value) {
				if(statement === true) {
					fragments = fragments.newLine().code("__ks_src += ");
				}
				for(let index = 0, __ks_0 = data.elements.length, element; index < __ks_0; ++index) {
					element = data.elements[index];
					if(index !== 0) {
						fragments.code(" + ");
					}
					let __ks_1 = element.kind.valueOf();
					if(__ks_1 === MacroElementKind.Expression.value) {
						if((KSHelper.valueOf(element.expression.kind) === NodeKind.Identifier.value) && (KSHelper.valueOf(this._parameters[element.expression.name]) === MacroVariableKind.AST.value)) {
							fragments.code("__ks_reificate(").expression(element.expression).code(", true)");
						}
						else if(KSHelper.valueOf(element.reification.kind) === ReificationKind.Join.value) {
							fragments.code("__ks_reificate(").expression(element.expression).code(KSHelper.concatString(", false, ", element.reification.kind, ", ")).expression(element.separator).code(")");
						}
						else {
							fragments.code("__ks_reificate(").expression(element.expression).code(KSHelper.concatString(", false, ", element.reification.kind, ")"));
						}
					}
					else if(__ks_1 === MacroElementKind.Literal.value) {
						if(element.value[0] === "\\") {
							fragments.code($quote(element.value.substr(1).replace(/\\/g, "\\\\")));
						}
						else {
							fragments.code($quote(element.value.replace(/\\/g, "\\\\")));
						}
					}
					else if(__ks_1 === MacroElementKind.NewLine.value) {
						fragments.code("\"\\n\"");
					}
				}
				if(statement === true) {
					fragments.done();
				}
				return true;
			}
			else {
				return false;
			}
		}
		__ks_func_filter_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
					return proto.__ks_func_filter_0.call(that, args[0], args[1], args[2]);
				}
			}
			if(super.__ks_func_filter_rt) {
				return super.__ks_func_filter_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		getMark() {
			return this.__ks_func_getMark_rt.call(null, this, this, arguments);
		}
		__ks_func_getMark_0(index) {
			return this._marks[index];
		}
		__ks_func_getMark_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_getMark_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_getMark_rt) {
				return super.__ks_func_getMark_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isEnhancementExport() {
			return this.__ks_func_isEnhancementExport_rt.call(null, this, this, arguments);
		}
		__ks_func_isEnhancementExport_5() {
			return false;
		}
		__ks_func_isEnhancementExport_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isEnhancementExport_5.call(that);
			}
			if(super.__ks_func_isEnhancementExport_rt) {
				return super.__ks_func_isEnhancementExport_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isExportable() {
			return this.__ks_func_isExportable_rt.call(null, this, this, arguments);
		}
		__ks_func_isExportable_1() {
			return false;
		}
		__ks_func_isExportable_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isExportable_1.call(that);
			}
			if(super.__ks_func_isExportable_rt) {
				return super.__ks_func_isExportable_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		isInstanceMethod() {
			return this.__ks_func_isInstanceMethod_rt.call(null, this, this, arguments);
		}
		__ks_func_isInstanceMethod_9() {
			return false;
		}
		__ks_func_isInstanceMethod_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_isInstanceMethod_9.call(that);
			}
			if(super.__ks_func_isInstanceMethod_rt) {
				return super.__ks_func_isInstanceMethod_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		line() {
			return this.__ks_func_line_rt.call(null, this, this, arguments);
		}
		__ks_func_line_1() {
			return this._line;
		}
		__ks_func_line_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_line_1.call(that);
			}
			if(super.__ks_func_line_rt) {
				return super.__ks_func_line_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		matchArguments() {
			return this.__ks_func_matchArguments_rt.call(null, this, this, arguments);
		}
		__ks_func_matchArguments_0(__ks_arguments_1) {
			return this._type.__ks_func_matchArguments_0(__ks_arguments_1, this);
		}
		__ks_func_matchArguments_rt(that, proto, args) {
			const t0 = KSType.isArray;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_matchArguments_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_matchArguments_rt) {
				return super.__ks_func_matchArguments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		name() {
			return this.__ks_func_name_rt.call(null, this, this, arguments);
		}
		__ks_func_name_27() {
			return this._name;
		}
		__ks_func_name_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_name_27.call(that);
			}
			if(super.__ks_func_name_rt) {
				return super.__ks_func_name_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_statement_0() {
			return this;
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_76(fragments, mode) {
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_76.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toMetadata() {
			return this.__ks_func_toMetadata_rt.call(null, this, this, arguments);
		}
		__ks_func_toMetadata_0() {
			return Buffer.from(JSON.stringify((() => {
				const d = new Dictionary();
				d.parameters = this._data.parameters;
				d.body = this._data.body;
				return d;
			})())).toString("base64");
		}
		__ks_func_toMetadata_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toMetadata_0.call(that);
			}
			if(super.__ks_func_toMetadata_rt) {
				return super.__ks_func_toMetadata_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		type() {
			return this.__ks_func_type_rt.call(null, this, this, arguments);
		}
		__ks_func_type_41() {
			return this._type;
		}
		__ks_func_type_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_type_41.call(that);
			}
			if(super.__ks_func_type_rt) {
				return super.__ks_func_type_rt.call(null, that, AbstractNode.prototype, args);
			}
			throw KSHelper.badArgs();
		}
	}
	class MacroType extends FunctionType {
		static __ks_new_0(...args) {
			const o = Object.create(MacroType.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(MacroType.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		static __ks_new_2(...args) {
			const o = Object.create(MacroType.prototype);
			o.__ks_init();
			o.__ks_cons_2(...args);
			return o;
		}
		static __ks_new_3(...args) {
			const o = Object.create(MacroType.prototype);
			o.__ks_init();
			o.__ks_cons_3(...args);
			return o;
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_assessment_0(name, node) {
			if(this._assessment === null) {
				this._assessment = Router.assess.__ks_1([this], name, node);
				this._assessment.macro = true;
			}
			return this._assessment;
		}
		__ks_func_export_4() {
			return (() => {
				const d = new Dictionary();
				d.min = this._min;
				d.max = this._max;
				d.parameters = KSHelper.mapArray(this._parameters, function(parameter) {
					return parameter.export();
				});
				return d;
			})();
		}
		__ks_func_export_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_export_4.call(that);
			}
			return super.__ks_func_export_rt.call(null, that, FunctionType.prototype, args);
		}
		__ks_func_matchContentOf_12(value) {
			if((value.__ks_func_min_0() < this._min) || (value.__ks_func_max_0() > this._max)) {
				return false;
			}
			const params = value.__ks_func_parameters_0();
			if(this._parameters.length === params.length) {
				for(let i = 0, __ks_0 = this._parameters.length, parameter; i < __ks_0; ++i) {
					parameter = this._parameters[i];
					if(!params[i].__ks_func_matchContentOf_10(parameter)) {
						return false;
					}
				}
			}
			else if(this._hasRest) {
				throw new NotImplementedException();
			}
			else {
				throw new NotImplementedException();
			}
			return true;
		}
		__ks_func_matchContentOf_0(value) {
			if(KSType.isClassInstance(value, MacroType)) {
				return this.__ks_func_matchContentOf_12(value);
			}
			return super.__ks_func_matchContentOf_0(value);
		}
		__ks_func_matchContentOf_1(value) {
			if(KSType.isClassInstance(value, MacroType)) {
				return this.__ks_func_matchContentOf_12(value);
			}
			return super.__ks_func_matchContentOf_1(value);
		}
		__ks_func_matchContentOf_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, MacroType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_matchContentOf_12.call(that, args[0]);
				}
			}
			return super.__ks_func_matchContentOf_rt.call(null, that, FunctionType.prototype, args);
		}
		static __ks_sttc_fromAST_2(data, node) {
			const scope = node.__ks_func_scope_0();
			return MacroType.__ks_new_2(KSHelper.mapArray(data.parameters, function(parameter) {
				return ParameterType.fromAST(parameter, false, scope, false, node);
			}), data, node);
		}
		static fromAST() {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t1(arguments[1])) {
					return MacroType.__ks_sttc_fromAST_2(arguments[0], arguments[1]);
				}
			}
			if(FunctionType.fromAST) {
				return FunctionType.fromAST.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_import_16(data, references, scope, node) {
			const type = MacroType.__ks_new_0(scope);
			type._min = data.min;
			type._max = data.max;
			type._parameters = KSHelper.mapArray(data.parameters, function(parameter) {
				return ParameterType.import(parameter, false, references, scope, node);
			});
			type.__ks_func_updateParameters_0();
			return type;
		}
		static import() {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, Scope);
			const t2 = value => KSType.isClassInstance(value, AbstractNode);
			if(arguments.length === 4) {
				if(t0(arguments[0]) && t0(arguments[1]) && t1(arguments[2]) && t2(arguments[3])) {
					return MacroType.__ks_sttc_import_16(arguments[0], arguments[1], arguments[2], arguments[3]);
				}
			}
			if(FunctionType.import) {
				return FunctionType.import.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	class MacroArgument extends Type {
		static __ks_new_0(...args) {
			const o = Object.create(MacroArgument.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		__ks_cons_0(data) {
			if(data === void 0) {
				data = null;
			}
			Type.prototype.__ks_cons_0.call(this, null);
			this._data = data;
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return MacroArgument.prototype.__ks_cons_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		__ks_func_clone_1() {
			throw new NotSupportedException();
		}
		__ks_func_clone_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_clone_1.call(that);
			}
			return super.__ks_func_clone_rt.call(null, that, Type.prototype, args);
		}
		export() {
			return this.__ks_func_export_rt.call(null, this, this, arguments);
		}
		__ks_func_export_0(references, indexDelta, mode, module) {
			throw new NotSupportedException();
		}
		__ks_func_export_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isEnumInstance(value, ExportMode);
			const t3 = value => KSType.isClassInstance(value, Module);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return proto.__ks_func_export_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			if(super.__ks_func_export_rt) {
				return super.__ks_func_export_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toFragments() {
			return this.__ks_func_toFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toFragments_0(fragments, node) {
			throw new NotSupportedException();
		}
		__ks_func_toFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return proto.__ks_func_toFragments_0.call(that, args[0], args[1]);
				}
			}
			if(super.__ks_func_toFragments_rt) {
				return super.__ks_func_toFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toPositiveTestFragments() {
			return this.__ks_func_toPositiveTestFragments_rt.call(null, this, this, arguments);
		}
		__ks_func_toPositiveTestFragments_0(fragments, node, junction) {
			if(junction === void 0 || junction === null) {
				junction = Junction.NONE;
			}
			throw new NotSupportedException();
		}
		__ks_func_toPositiveTestFragments_rt(that, proto, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isEnumInstance(value, Junction) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t0(args[1]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && te(pts, 1)) {
					return proto.__ks_func_toPositiveTestFragments_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			if(super.__ks_func_toPositiveTestFragments_rt) {
				return super.__ks_func_toPositiveTestFragments_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		toVariations() {
			return this.__ks_func_toVariations_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariations_0(variations) {
			throw new NotSupportedException();
		}
		__ks_func_toVariations_rt(that, proto, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_toVariations_0.call(that, args[0]);
				}
			}
			if(super.__ks_func_toVariations_rt) {
				return super.__ks_func_toVariations_rt.call(null, that, Type.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isAssignableToVariable_3(value, anycast, nullcast, downcast, limited) {
			if(limited === void 0 || limited === null) {
				limited = false;
			}
			return true;
		}
		__ks_func_isAssignableToVariable_4(value, anycast, nullcast, downcast, limited) {
			if(limited === void 0 || limited === null) {
				limited = false;
			}
			return false;
		}
		__ks_func_isAssignableToVariable_5(value, anycast, nullcast, downcast, limited) {
			if(limited === void 0 || limited === null) {
				limited = false;
			}
			if(value.__ks_func_isAny_0() === true) {
				return true;
			}
			let __ks_0 = value.__ks_func_name_2();
			if(__ks_0 === "Array") {
				return KSHelper.valueOf(this._data.kind) === NodeKind.ArrayExpression.value;
			}
			else if(__ks_0 === "Dictionary") {
				return KSHelper.valueOf(this._data.kind) === NodeKind.ObjectExpression.value;
			}
			else if(__ks_0 === "Expression") {
				return (KSHelper.valueOf(this._data.kind) === NodeKind.UnaryExpression.value) || (KSHelper.valueOf(this._data.kind) === NodeKind.BinaryExpression.value) || (KSHelper.valueOf(this._data.kind) === NodeKind.PolyadicExpression.value) || KSType.isValue($expressions[this._data.kind]);
			}
			else if(__ks_0 === "Identifier") {
				return KSHelper.valueOf(this._data.kind) === NodeKind.Identifier.value;
			}
			else if(__ks_0 === "Number") {
				return KSHelper.valueOf(this._data.kind) === NodeKind.NumericExpression.value;
			}
			else if(__ks_0 === "String") {
				return KSHelper.valueOf(this._data.kind) === NodeKind.Literal.value;
			}
			return false;
		}
		__ks_func_isAssignableToVariable_6(value, anycast, nullcast, downcast, limited) {
			if(limited === void 0 || limited === null) {
				limited = false;
			}
			for(let __ks_0 = 0, __ks_1 = value.__ks_func_types_1(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
				type = __ks_1[__ks_0];
				if(this.isAssignableToVariable(type, anycast, nullcast, downcast, limited)) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isAssignableToVariable_2(value, anycast, nullcast, downcast, limited) {
			if(KSType.isClassInstance(value, AnyType) && KSType.isBoolean(anycast) && KSType.isBoolean(nullcast) && KSType.isBoolean(downcast) && (KSType.isBoolean(limited) || KSType.isNull(limited))) {
				return this.__ks_func_isAssignableToVariable_3(value, anycast, nullcast, downcast, limited);
			}
			if(KSType.isClassInstance(value, NullType) && KSType.isBoolean(anycast) && KSType.isBoolean(nullcast) && KSType.isBoolean(downcast) && (KSType.isBoolean(limited) || KSType.isNull(limited))) {
				return this.__ks_func_isAssignableToVariable_4(value, anycast, nullcast, downcast, limited);
			}
			if(KSType.isClassInstance(value, ReferenceType) && KSType.isBoolean(anycast) && KSType.isBoolean(nullcast) && KSType.isBoolean(downcast) && (KSType.isBoolean(limited) || KSType.isNull(limited))) {
				return this.__ks_func_isAssignableToVariable_5(value, anycast, nullcast, downcast, limited);
			}
			if(KSType.isClassInstance(value, UnionType) && KSType.isBoolean(anycast) && KSType.isBoolean(nullcast) && KSType.isBoolean(downcast) && (KSType.isBoolean(limited) || KSType.isNull(limited))) {
				return this.__ks_func_isAssignableToVariable_6(value, anycast, nullcast, downcast, limited);
			}
			return super.__ks_func_isAssignableToVariable_2(value, anycast, nullcast, downcast, limited);
		}
		__ks_func_isAssignableToVariable_rt(that, proto, args) {
			const t0 = value => KSType.isClassInstance(value, AnyType);
			const t1 = KSType.isBoolean;
			const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t3 = value => KSType.isClassInstance(value, NullType);
			const t4 = value => KSType.isClassInstance(value, ReferenceType);
			const t5 = value => KSType.isClassInstance(value, UnionType);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 4 && args.length <= 5) {
				if(t0(args[0])) {
					if(t1(args[1]) && t1(args[2]) && t1(args[3]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [4], 0) && te(pts, 1)) {
						return proto.__ks_func_isAssignableToVariable_3.call(that, args[0], args[1], args[2], args[3], KSHelper.getVararg(args, 4, pts[1]));
					}
					throw KSHelper.badArgs();
				}
				if(t3(args[0])) {
					if(t1(args[1]) && t1(args[2]) && t1(args[3]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [4], 0) && te(pts, 1)) {
						return proto.__ks_func_isAssignableToVariable_4.call(that, args[0], args[1], args[2], args[3], KSHelper.getVararg(args, 4, pts[1]));
					}
					throw KSHelper.badArgs();
				}
				if(t4(args[0])) {
					if(t1(args[1]) && t1(args[2]) && t1(args[3]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [4], 0) && te(pts, 1)) {
						return proto.__ks_func_isAssignableToVariable_5.call(that, args[0], args[1], args[2], args[3], KSHelper.getVararg(args, 4, pts[1]));
					}
					throw KSHelper.badArgs();
				}
				if(t5(args[0]) && t1(args[1]) && t1(args[2]) && t1(args[3]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [4], 0) && te(pts, 1)) {
					return proto.__ks_func_isAssignableToVariable_6.call(that, args[0], args[1], args[2], args[3], KSHelper.getVararg(args, 4, pts[1]));
				}
			}
			return super.__ks_func_isAssignableToVariable_rt.call(null, that, Type.prototype, args);
		}
		__ks_func_isSpread_0() {
			return false;
		}
		__ks_func_isUnion_0() {
			return false;
		}
		static __ks_sttc_build_0(__ks_arguments_1) {
			return KSHelper.mapArray(__ks_arguments_1, function(argument) {
				return new MacroArgument(argument);
			});
		}
		static build() {
			const t0 = KSType.isArray;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return MacroArgument.__ks_sttc_build_0(arguments[0]);
				}
			}
			if(Type.build) {
				return Type.build.apply(null, arguments);
			}
			throw KSHelper.badArgs();
		}
	}
	function $callMacroExpression() {
		return $callMacroExpression.__ks_rt(this, arguments);
	};
	$callMacroExpression.__ks_0 = function(data, parent, scope) {
		const macro = scope.getMacro(data, parent);
		const result = macro.execute(data.arguments, parent);
		if(result.body.length === 1) {
			return $compile.expression(result.body[0], parent);
		}
		else {
			throw new NotImplementedException(parent);
		}
	};
	$callMacroExpression.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 3) {
			if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
				return $callMacroExpression.__ks_0.call(that, args[0], args[1], args[2]);
			}
		}
		throw KSHelper.badArgs();
	};
	class CallMacroStatement extends Statement {
		static __ks_new_0(...args) {
			const o = Object.create(CallMacroStatement.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		static __ks_new_1(...args) {
			const o = Object.create(CallMacroStatement.prototype);
			o.__ks_init();
			o.__ks_cons_1(...args);
			return o;
		}
		__ks_init() {
			super.__ks_init();
			this._offsetEnd = 0;
			this._offsetStart = 0;
			this._statements = [];
		}
		__ks_cons_rt(that, args) {
			super.__ks_cons_rt.call(null, that, args);
		}
		__ks_func_initiate_0() {
			const macro = this._scope.getMacro(this._data, this);
			const data = macro.execute(this._data.arguments, this);
			const offset = this._scope.__ks_func_getLineOffset_0();
			this._offsetStart = this._scope.__ks_func_line_0();
			this._scope.setLineOffset(this._offsetStart);
			const file = KSHelper.concatString(this.__ks_func_file_0(), "!#", macro.name());
			this._options = Attribute.configure(data, this._options, AttributeTarget.Global, file);
			for(let __ks_0 = 0, __ks_1 = data.body.length, __ks_data_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_data_1 = data.body[__ks_0];
				this._scope.line(__ks_data_1.start.line);
				let statement = $compile.statement(__ks_data_1, this, void 0);
				if(KSType.isValue(statement)) {
					this._statements.push(statement);
					statement.initiate();
				}
			}
			this._scope.line(data.end.line);
			this._offsetEnd = (offset + this._scope.__ks_func_line_0()) - this._offsetStart;
			this._scope.setLineOffset(this._offsetEnd);
		}
		analyse() {
			return this.__ks_func_analyse_rt.call(null, this, this, arguments);
		}
		__ks_func_analyse_0() {
			this._scope.setLineOffset(this._offsetStart);
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.analyse();
			}
			this._scope.setLineOffset(this._offsetEnd);
		}
		__ks_func_analyse_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_analyse_0.call(that);
			}
			if(super.__ks_func_analyse_rt) {
				return super.__ks_func_analyse_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_enhance_0() {
			this._scope.setLineOffset(this._offsetStart);
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.enhance();
			}
			this._scope.setLineOffset(this._offsetEnd);
		}
		prepare() {
			return this.__ks_func_prepare_rt.call(null, this, this, arguments);
		}
		__ks_func_prepare_0() {
			this._scope.setLineOffset(this._offsetStart);
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.prepare();
			}
			this._scope.setLineOffset(this._offsetEnd);
		}
		__ks_func_prepare_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_prepare_0.call(that);
			}
			if(super.__ks_func_prepare_rt) {
				return super.__ks_func_prepare_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		translate() {
			return this.__ks_func_translate_rt.call(null, this, this, arguments);
		}
		__ks_func_translate_0() {
			this._scope.setLineOffset(this._offsetStart);
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.translate();
			}
			this._scope.setLineOffset(this._offsetEnd);
		}
		__ks_func_translate_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_translate_0.call(that);
			}
			if(super.__ks_func_translate_rt) {
				return super.__ks_func_translate_rt.call(null, that, Statement.prototype, args);
			}
			throw KSHelper.badArgs();
		}
		__ks_func_isAwait_0() {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(statement.isAwait() === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_isExit_0() {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(statement.isExit() === true) {
					return true;
				}
			}
			return false;
		}
		__ks_func_toFragments_1(fragments, mode) {
			for(let __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.toFragments(fragments, mode);
			}
		}
	}
	const CallMatch = KSHelper.struct(function(__ks_function_1, __ks_arguments_1) {
		const _ = new Dictionary();
		_.function = __ks_function_1;
		_.arguments = __ks_arguments_1;
		return _;
	}, function(__ks_new, args) {
		const t0 = value => KSType.isClassInstance(value, FunctionType);
		const t1 = value => KSType.isArray(value, value => KSType.isNumber(value) || KSType.isArray(value, KSType.isNumber) || KSType.isNull(value));
		if(args.length === 2) {
			if(t0(args[0]) && t1(args[1])) {
				return __ks_new(args[0], args[1]);
			}
		}
		throw KSHelper.badArgs();
	});
	const PreciseCallMatchResult = KSHelper.struct(function(matches) {
		const _ = new Dictionary();
		_.matches = matches;
		return _;
	}, function(__ks_new, args) {
		const t0 = value => KSType.isArray(value, value => KSType.isStructInstance(value, CallMatch));
		if(args.length === 1) {
			if(t0(args[0])) {
				return __ks_new(args[0]);
			}
		}
		throw KSHelper.badArgs();
	});
	const LenientCallMatchResult = KSHelper.struct(function(possibilities, __ks_arguments_1 = null) {
		const _ = new Dictionary();
		_.possibilities = possibilities;
		_.arguments = __ks_arguments_1;
		return _;
	}, function(__ks_new, args) {
		const t0 = value => KSType.isArray(value, value => KSType.isClassInstance(value, FunctionType));
		const t1 = value => KSType.isArray(value, KSType.isNumber) || KSType.isNull(value);
		const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
		let pts;
		if(args.length >= 1 && args.length <= 2) {
			if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
				return __ks_new(args[0], KSHelper.getVararg(args, 1, pts[1]));
			}
		}
		throw KSHelper.badArgs();
	});
	let Router = KSHelper.namespace(function() {
		const Assessement = KSHelper.struct(function(name, min, max, async, rest, trees, functions, names, macro, __ks_sealed_1) {
			const _ = new Dictionary();
			_.name = name;
			_.min = min;
			_.max = max;
			_.async = async;
			_.rest = rest;
			_.trees = trees;
			_.functions = functions;
			_.names = names;
			_.macro = macro;
			_.sealed = __ks_sealed_1;
			return _;
		}, function(__ks_new, args) {
			const t0 = KSType.isString;
			const t1 = KSType.isNumber;
			const t2 = KSType.isBoolean;
			const t3 = value => KSType.isArray(value, value => KSType.isStructInstance(value, Tree));
			const t4 = value => KSType.isDictionary(value, value => KSType.isClassInstance(value, FunctionType));
			const t5 = value => KSType.isDictionary(value, value => KSType.isStructInstance(value, NamedLength));
			if(args.length === 10) {
				if(t0(args[0]) && t1(args[1]) && t1(args[2]) && t2(args[3]) && t2(args[4]) && t3(args[5]) && t4(args[6]) && t5(args[7]) && t2(args[8]) && t2(args[9])) {
					return __ks_new(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
				}
			}
			throw KSHelper.badArgs();
		});
		const NamedLength = KSHelper.struct(function(functions, parameters) {
			const _ = new Dictionary();
			_.functions = functions;
			_.parameters = parameters;
			return _;
		}, function(__ks_new, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			const t1 = value => KSType.isDictionary(value, value => KSType.isStructInstance(value, NamedParameter));
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return __ks_new(args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		});
		const NamedParameter = KSHelper.struct(function(indexes, types, order) {
			const _ = new Dictionary();
			_.indexes = indexes;
			_.types = types;
			_.order = order;
			return _;
		}, function(__ks_new, args) {
			const t0 = value => KSType.isDictionary(value, KSType.isNumber);
			const t1 = value => KSType.isDictionary(value, value => KSType.isStructInstance(value, NamedType));
			const t2 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return __ks_new(args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		});
		const NamedType = KSHelper.struct(function(type, functions) {
			const _ = new Dictionary();
			_.type = type;
			_.functions = functions;
			return _;
		}, function(__ks_new, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return __ks_new(args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		});
		const NamingArgument = KSHelper.struct(function(index, name = null, type, strict) {
			const _ = new Dictionary();
			_.index = index;
			_.name = name;
			_.type = type;
			_.strict = strict;
			return _;
		}, function(__ks_new, args) {
			const t0 = KSType.isNumber;
			const t1 = value => KSType.isString(value) || KSType.isNull(value);
			const t2 = value => KSType.isClassInstance(value, Type);
			const t3 = KSType.isBoolean;
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 3 && args.length <= 4) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 1, 1, t2, pts, 1) && KSHelper.isVarargs(args, 1, 1, t3, pts, 2) && te(pts, 3)) {
					return __ks_new(args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
				}
			}
			throw KSHelper.badArgs();
		});
		const Tree = KSHelper.struct(function(min, max, variadic, rest, columns, order, equivalences = null, __ks_function_1 = null) {
			if(max === void 0 || max === null) {
				max = min;
			}
			if(variadic === void 0 || variadic === null) {
				variadic = false;
			}
			if(rest === void 0 || rest === null) {
				rest = false;
			}
			if(columns === void 0 || columns === null) {
				columns = new Dictionary();
			}
			if(order === void 0 || order === null) {
				order = [];
			}
			const _ = new Dictionary();
			_.min = min;
			_.max = max;
			_.variadic = variadic;
			_.rest = rest;
			_.columns = columns;
			_.order = order;
			_.equivalences = equivalences;
			_.function = __ks_function_1;
			return _;
		}, function(__ks_new, args) {
			const t0 = KSType.isNumber;
			const t1 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t2 = value => KSType.isNumber(value) || KSType.isNull(value);
			const t3 = value => KSType.isClassInstance(value, FunctionType) || KSType.isNull(value);
			const t4 = value => KSType.isArray(value, value => KSType.isArray(value, KSType.isString)) || KSType.isNull(value);
			const t5 = value => KSType.isArray(value, KSType.isString) || KSType.isNull(value);
			const t6 = value => KSType.isDictionary(value, value => KSType.isStructInstance(value, TreeBranch) || KSType.isStructInstance(value, TreeLeaf)) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return __ks_new(args[0], void 0, args[1], void 0, void 0, void 0, void 0, void 0);
					}
					if(t2(args[1])) {
						return __ks_new(args[0], args[1], void 0, void 0, void 0, void 0, void 0, void 0);
					}
					if(t3(args[1])) {
						return __ks_new(args[0], void 0, void 0, void 0, void 0, void 0, void 0, args[1]);
					}
					if(t4(args[1])) {
						return __ks_new(args[0], void 0, void 0, void 0, void 0, void 0, args[1], void 0);
					}
					if(t5(args[1])) {
						return __ks_new(args[0], void 0, void 0, void 0, void 0, args[1], void 0, void 0);
					}
					if(t6(args[1])) {
						return __ks_new(args[0], void 0, void 0, void 0, args[1], void 0, void 0, void 0);
					}
					throw KSHelper.badArgs();
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 3) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						if(KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && KSHelper.isVarargs(args, 0, 1, t6, pts, 1) && KSHelper.isVarargs(args, 0, 1, t5, pts, 2) && KSHelper.isVarargs(args, 0, 1, t4, pts, 3) && KSHelper.isVarargs(args, 0, 1, t3, pts, 4) && te(pts, 5)) {
							return __ks_new(args[0], void 0, args[1], KSHelper.getVararg(args, 2, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]));
						}
						throw KSHelper.badArgs();
					}
					if(t2(args[1])) {
						if(KSHelper.isVarargs(args, 0, 1, t1, pts = [2], 0) && KSHelper.isVarargs(args, 0, 1, t6, pts, 1) && KSHelper.isVarargs(args, 0, 1, t5, pts, 2) && KSHelper.isVarargs(args, 0, 1, t4, pts, 3) && KSHelper.isVarargs(args, 0, 1, t3, pts, 4) && te(pts, 5)) {
							return __ks_new(args[0], args[1], KSHelper.getVararg(args, 2, pts[1]), void 0, KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]));
						}
						throw KSHelper.badArgs();
					}
					if(t6(args[1])) {
						if(KSHelper.isVarargs(args, 0, 1, t5, pts = [2], 0) && KSHelper.isVarargs(args, 0, 1, t4, pts, 1) && KSHelper.isVarargs(args, 0, 1, t3, pts, 2) && te(pts, 3)) {
							return __ks_new(args[0], void 0, void 0, void 0, args[1], KSHelper.getVararg(args, 2, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
						}
						throw KSHelper.badArgs();
					}
					if(t5(args[1])) {
						if(KSHelper.isVarargs(args, 0, 1, t4, pts = [2], 0) && KSHelper.isVarargs(args, 0, 1, t3, pts, 1) && te(pts, 2)) {
							return __ks_new(args[0], void 0, void 0, void 0, void 0, args[1], KSHelper.getVararg(args, 2, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
						}
						throw KSHelper.badArgs();
					}
					if(t4(args[1]) && t3(args[2])) {
						return __ks_new(args[0], void 0, void 0, void 0, void 0, void 0, args[1], args[2]);
					}
					throw KSHelper.badArgs();
				}
				throw KSHelper.badArgs();
			}
			if(args.length >= 1 && args.length <= 8) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t1, pts, 1) && KSHelper.isVarargs(args, 0, 1, t1, pts, 2) && KSHelper.isVarargs(args, 0, 1, t6, pts, 3) && KSHelper.isVarargs(args, 0, 1, t5, pts, 4) && KSHelper.isVarargs(args, 0, 1, t4, pts, 5) && KSHelper.isVarargs(args, 0, 1, t3, pts, 6) && te(pts, 7)) {
					return __ks_new(args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]), KSHelper.getVararg(args, pts[5], pts[6]), KSHelper.getVararg(args, pts[6], pts[7]));
				}
			}
			throw KSHelper.badArgs();
		});
		const Group = KSHelper.struct(function(n, functions, rows, rowCount) {
			if(functions === void 0 || functions === null) {
				functions = [];
			}
			if(rows === void 0 || rows === null) {
				rows = new Dictionary();
			}
			if(rowCount === void 0 || rowCount === null) {
				rowCount = 0;
			}
			const _ = new Dictionary();
			_.n = n;
			_.functions = functions;
			_.rows = rows;
			_.rowCount = rowCount;
			return _;
		}, function(__ks_new, args) {
			const t0 = KSType.isNumber;
			const t1 = value => KSType.isArray(value, value => KSType.isClassInstance(value, FunctionType)) || KSType.isNull(value);
			const t2 = value => KSType.isDictionary(value, value => KSType.isStructInstance(value, Row)) || KSType.isNull(value);
			const t3 = value => KSType.isNumber(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 4) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t2, pts, 1) && KSHelper.isVarargs(args, 0, 1, t3, pts, 2) && te(pts, 3)) {
					return __ks_new(args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
				}
			}
			throw KSHelper.badArgs();
		});
		const RowType = KSHelper.struct(function(index, type, rest, parameter) {
			const _ = new Dictionary();
			_.index = index;
			_.type = type;
			_.rest = rest;
			_.parameter = parameter;
			return _;
		}, function(__ks_new, args) {
			const t0 = KSType.isNumber;
			const t1 = value => KSType.isClassInstance(value, Type);
			const t2 = KSType.isBoolean;
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t0(args[3])) {
					return __ks_new(args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		});
		const UnionMatch = KSHelper.struct(function(__ks_function_1, length, matches) {
			const _ = new Dictionary();
			_.function = __ks_function_1;
			_.length = length;
			_.matches = matches;
			return _;
		}, function(__ks_new, args) {
			const t0 = value => KSType.isClassInstance(value, FunctionType);
			const t1 = KSType.isNumber;
			const t2 = KSType.isArray;
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return __ks_new(args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		});
		const Row = KSHelper.struct(function(key, __ks_function_1, types, alternative, union = null) {
			if(alternative === void 0 || alternative === null) {
				alternative = false;
			}
			const _ = new Dictionary();
			_.key = key;
			_.function = __ks_function_1;
			_.types = types;
			_.alternative = alternative;
			_.union = union;
			return _;
		}, function(__ks_new, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, FunctionType);
			const t2 = value => KSType.isArray(value, value => KSType.isStructInstance(value, RowType));
			const t3 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t4 = value => KSType.isStructInstance(value, UnionMatch) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 3 && args.length <= 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && KSHelper.isVarargs(args, 0, 1, t3, pts = [3], 0) && KSHelper.isVarargs(args, 0, 1, t4, pts, 1) && te(pts, 2)) {
					return __ks_new(args[0], args[1], args[2], KSHelper.getVararg(args, 3, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			throw KSHelper.badArgs();
		});
		const TreeNode = KSHelper.struct(function(index, type, rest, variadic, min, max, parameters, isNode, order, rows, backtracks) {
			if(variadic === void 0 || variadic === null) {
				variadic = false;
			}
			if(min === void 0 || min === null) {
				min = 1;
			}
			if(max === void 0 || max === null) {
				max = 1;
			}
			if(parameters === void 0 || parameters === null) {
				parameters = new Dictionary();
			}
			if(order === void 0 || order === null) {
				order = [];
			}
			if(backtracks === void 0 || backtracks === null) {
				backtracks = [];
			}
			const _ = new Dictionary();
			_.index = index;
			_.type = type;
			_.rest = rest;
			_.variadic = variadic;
			_.min = min;
			_.max = max;
			_.parameters = parameters;
			_.isNode = isNode;
			_.order = order;
			_.rows = rows;
			_.backtracks = backtracks;
			return _;
		}, function(__ks_new, args) {
			const t0 = KSType.isNumber;
			const t1 = value => KSType.isClassInstance(value, Type);
			const t2 = KSType.isBoolean;
			const t3 = value => KSType.isArray(value, KSType.isString) || KSType.isNull(value);
			const t4 = value => KSType.isArray(value, value => KSType.isStructInstance(value, Row));
			const t5 = value => KSType.isArray(value, value => KSType.isStructInstance(value, BackTrack)) || KSType.isNull(value);
			const t6 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t7 = value => KSType.isNumber(value) || KSType.isNull(value);
			const t8 = value => KSType.isDictionary(value, value => KSType.isStructInstance(value, TreeParameter)) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 6) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					if(t2(args[3])) {
						if(KSHelper.isVarargs(args, 0, 1, t3, pts = [4], 0) && KSHelper.isVarargs(args, 1, 1, t4, pts, 1) && KSHelper.isVarargs(args, 0, 1, t5, pts, 2) && te(pts, 3)) {
							return __ks_new(args[0], args[1], args[2], void 0, void 0, void 0, void 0, args[3], KSHelper.getVararg(args, 4, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
						}
					}
					if(t6(args[3])) {
						if(t2(args[4]) && t4(args[5])) {
							return __ks_new(args[0], args[1], args[2], args[3], void 0, void 0, void 0, args[4], void 0, args[5], void 0);
						}
						throw KSHelper.badArgs();
					}
					if(t7(args[3])) {
						if(t2(args[4]) && t4(args[5])) {
							return __ks_new(args[0], args[1], args[2], void 0, args[3], void 0, void 0, args[4], void 0, args[5], void 0);
						}
						throw KSHelper.badArgs();
					}
					if(t8(args[3]) && t2(args[4]) && t4(args[5])) {
						return __ks_new(args[0], args[1], args[2], void 0, void 0, void 0, args[3], args[4], void 0, args[5], void 0);
					}
					throw KSHelper.badArgs();
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 7) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					if(t6(args[3])) {
						if(KSHelper.isVarargs(args, 0, 1, t7, pts = [4], 0) && KSHelper.isVarargs(args, 0, 1, t8, pts, 1) && KSHelper.isVarargs(args, 1, 1, t2, pts, 2) && KSHelper.isVarargs(args, 0, 1, t3, pts, 3) && KSHelper.isVarargs(args, 1, 1, t4, pts, 4) && KSHelper.isVarargs(args, 0, 1, t5, pts, 5) && te(pts, 6)) {
							return __ks_new(args[0], args[1], args[2], args[3], KSHelper.getVararg(args, 4, pts[1]), void 0, KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]), KSHelper.getVararg(args, pts[5], pts[6]));
						}
						throw KSHelper.badArgs();
					}
					if(t7(args[3])) {
						if(t2(args[4])) {
							if(KSHelper.isVarargs(args, 0, 1, t3, pts = [5], 0) && KSHelper.isVarargs(args, 1, 1, t4, pts, 1) && KSHelper.isVarargs(args, 0, 1, t5, pts, 2) && te(pts, 3)) {
								return __ks_new(args[0], args[1], args[2], void 0, args[3], void 0, void 0, args[4], KSHelper.getVararg(args, 5, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
							}
							throw KSHelper.badArgs();
						}
						if(t7(args[4])) {
							if(t2(args[5]) && t4(args[6])) {
								return __ks_new(args[0], args[1], args[2], void 0, args[3], args[4], void 0, args[5], void 0, args[6], void 0);
							}
							throw KSHelper.badArgs();
						}
						if(t8(args[4]) && t2(args[5]) && t4(args[6])) {
							return __ks_new(args[0], args[1], args[2], void 0, args[3], void 0, args[4], args[5], void 0, args[6], void 0);
						}
						throw KSHelper.badArgs();
					}
					if(t8(args[3])) {
						if(t2(args[4]) && KSHelper.isVarargs(args, 0, 1, t3, pts = [5], 0) && KSHelper.isVarargs(args, 1, 1, t4, pts, 1) && KSHelper.isVarargs(args, 0, 1, t5, pts, 2) && te(pts, 3)) {
							return __ks_new(args[0], args[1], args[2], void 0, void 0, void 0, args[3], args[4], KSHelper.getVararg(args, 5, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
						}
						throw KSHelper.badArgs();
					}
					if(t2(args[3]) && t3(args[4]) && t4(args[5]) && t5(args[6])) {
						return __ks_new(args[0], args[1], args[2], void 0, void 0, void 0, void 0, args[3], args[4], args[5], args[6]);
					}
					throw KSHelper.badArgs();
				}
				throw KSHelper.badArgs();
			}
			if(args.length >= 5 && args.length <= 11) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && KSHelper.isVarargs(args, 0, 1, t6, pts = [3], 0) && KSHelper.isVarargs(args, 0, 1, t7, pts, 1) && KSHelper.isVarargs(args, 0, 1, t7, pts, 2) && KSHelper.isVarargs(args, 0, 1, t8, pts, 3) && KSHelper.isVarargs(args, 1, 1, t2, pts, 4) && KSHelper.isVarargs(args, 0, 1, t3, pts, 5) && KSHelper.isVarargs(args, 1, 1, t4, pts, 6) && KSHelper.isVarargs(args, 0, 1, t5, pts, 7) && te(pts, 8)) {
					return __ks_new(args[0], args[1], args[2], KSHelper.getVararg(args, 3, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]), KSHelper.getVararg(args, pts[5], pts[6]), KSHelper.getVararg(args, pts[6], pts[7]), KSHelper.getVararg(args, pts[7], pts[8]));
				}
			}
			throw KSHelper.badArgs();
		});
		const BackTrack = KSHelper.struct(function(index, type) {
			const _ = new Dictionary();
			_.index = index;
			_.type = type;
			return _;
		}, function(__ks_new, args) {
			const t0 = KSType.isNumber;
			const t1 = value => KSType.isClassInstance(value, Type);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return __ks_new(args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		});
		const TreeParameter = KSHelper.struct(function(key, __ks_function_1, parameter, rows) {
			const _ = new Dictionary();
			_.key = key;
			_.function = __ks_function_1;
			_.parameter = parameter;
			_.rows = rows;
			return _;
		}, function(__ks_new, args) {
			const t0 = KSType.isString;
			const t1 = value => KSType.isClassInstance(value, FunctionType);
			const t2 = KSType.isNumber;
			const t3 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return __ks_new(args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		});
		const TreeArgument = KSHelper.struct(function(parameter, from, to) {
			const _ = new Dictionary();
			_.parameter = parameter;
			_.from = from;
			_.to = to;
			return _;
		}, function(__ks_new, args) {
			const t0 = KSType.isNumber;
			const t1 = value => KSType.isDictionary(value) && KSType.isBoolean(value.variadic) && KSType.isNumber(value.index);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
					return __ks_new(args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		});
		const TreeLeaf = KSHelper.struct(function(index, type, rest, variadic, min, max, parameters, isNode, order, rows, backtracks, __ks_function_1, __ks_arguments_1) {
			const _ = TreeNode.__ks_new(index, type, rest, variadic, min, max, parameters, isNode, order, rows, backtracks);
			_.function = __ks_function_1;
			_.arguments = __ks_arguments_1;
			return _;
		}, function(__ks_new, args) {
			const t0 = KSType.isNumber;
			const t1 = value => KSType.isClassInstance(value, Type);
			const t2 = KSType.isBoolean;
			const t3 = value => KSType.isArray(value, KSType.isString) || KSType.isNull(value);
			const t4 = value => KSType.isArray(value, value => KSType.isStructInstance(value, Row));
			const t5 = value => KSType.isArray(value, value => KSType.isStructInstance(value, BackTrack)) || KSType.isNull(value);
			const t6 = value => KSType.isClassInstance(value, FunctionType);
			const t7 = value => KSType.isArray(value, value => KSType.isStructInstance(value, TreeArgument));
			const t8 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t9 = value => KSType.isNumber(value) || KSType.isNull(value);
			const t10 = value => KSType.isDictionary(value, value => KSType.isStructInstance(value, TreeParameter)) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 8) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					if(t2(args[3])) {
						if(KSHelper.isVarargs(args, 0, 1, t3, pts = [4], 0) && KSHelper.isVarargs(args, 1, 1, t4, pts, 1) && KSHelper.isVarargs(args, 0, 1, t5, pts, 2) && KSHelper.isVarargs(args, 1, 1, t6, pts, 3) && KSHelper.isVarargs(args, 1, 1, t7, pts, 4) && te(pts, 5)) {
							return __ks_new(args[0], args[1], args[2], void 0, void 0, void 0, void 0, args[3], KSHelper.getVararg(args, 4, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]));
						}
					}
					if(t8(args[3])) {
						if(t2(args[4]) && t4(args[5]) && t6(args[6]) && t7(args[7])) {
							return __ks_new(args[0], args[1], args[2], args[3], void 0, void 0, void 0, args[4], void 0, args[5], void 0, args[6], args[7]);
						}
						throw KSHelper.badArgs();
					}
					if(t9(args[3])) {
						if(t2(args[4]) && t4(args[5]) && t6(args[6]) && t7(args[7])) {
							return __ks_new(args[0], args[1], args[2], void 0, args[3], void 0, void 0, args[4], void 0, args[5], void 0, args[6], args[7]);
						}
						throw KSHelper.badArgs();
					}
					if(t10(args[3]) && t2(args[4]) && t4(args[5]) && t6(args[6]) && t7(args[7])) {
						return __ks_new(args[0], args[1], args[2], void 0, void 0, void 0, args[3], args[4], void 0, args[5], void 0, args[6], args[7]);
					}
					throw KSHelper.badArgs();
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 9) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					if(t8(args[3])) {
						if(KSHelper.isVarargs(args, 0, 1, t9, pts = [4], 0) && KSHelper.isVarargs(args, 0, 1, t10, pts, 1) && KSHelper.isVarargs(args, 1, 1, t2, pts, 2) && KSHelper.isVarargs(args, 0, 1, t3, pts, 3) && KSHelper.isVarargs(args, 1, 1, t4, pts, 4) && KSHelper.isVarargs(args, 0, 1, t5, pts, 5) && KSHelper.isVarargs(args, 1, 1, t6, pts, 6) && KSHelper.isVarargs(args, 1, 1, t7, pts, 7) && te(pts, 8)) {
							return __ks_new(args[0], args[1], args[2], args[3], KSHelper.getVararg(args, 4, pts[1]), void 0, KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]), KSHelper.getVararg(args, pts[5], pts[6]), KSHelper.getVararg(args, pts[6], pts[7]), KSHelper.getVararg(args, pts[7], pts[8]));
						}
						throw KSHelper.badArgs();
					}
					if(t9(args[3])) {
						if(t2(args[4])) {
							if(KSHelper.isVarargs(args, 0, 1, t3, pts = [5], 0) && KSHelper.isVarargs(args, 1, 1, t4, pts, 1) && KSHelper.isVarargs(args, 0, 1, t5, pts, 2) && KSHelper.isVarargs(args, 1, 1, t6, pts, 3) && KSHelper.isVarargs(args, 1, 1, t7, pts, 4) && te(pts, 5)) {
								return __ks_new(args[0], args[1], args[2], void 0, args[3], void 0, void 0, args[4], KSHelper.getVararg(args, 5, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]));
							}
							throw KSHelper.badArgs();
						}
						if(t9(args[4])) {
							if(t2(args[5]) && t4(args[6]) && t6(args[7]) && t7(args[8])) {
								return __ks_new(args[0], args[1], args[2], void 0, args[3], args[4], void 0, args[5], void 0, args[6], void 0, args[7], args[8]);
							}
							throw KSHelper.badArgs();
						}
						if(t10(args[4]) && t2(args[5]) && t4(args[6]) && t6(args[7]) && t7(args[8])) {
							return __ks_new(args[0], args[1], args[2], void 0, args[3], void 0, args[4], args[5], void 0, args[6], void 0, args[7], args[8]);
						}
						throw KSHelper.badArgs();
					}
					if(t10(args[3])) {
						if(t2(args[4]) && KSHelper.isVarargs(args, 0, 1, t3, pts = [5], 0) && KSHelper.isVarargs(args, 1, 1, t4, pts, 1) && KSHelper.isVarargs(args, 0, 1, t5, pts, 2) && KSHelper.isVarargs(args, 1, 1, t6, pts, 3) && KSHelper.isVarargs(args, 1, 1, t7, pts, 4) && te(pts, 5)) {
							return __ks_new(args[0], args[1], args[2], void 0, void 0, void 0, args[3], args[4], KSHelper.getVararg(args, 5, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]));
						}
						throw KSHelper.badArgs();
					}
					if(t2(args[3]) && t3(args[4]) && t4(args[5]) && t5(args[6]) && t6(args[7]) && t7(args[8])) {
						return __ks_new(args[0], args[1], args[2], void 0, void 0, void 0, void 0, args[3], args[4], args[5], args[6], args[7], args[8]);
					}
					throw KSHelper.badArgs();
				}
				throw KSHelper.badArgs();
			}
			if(args.length >= 7 && args.length <= 13) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && KSHelper.isVarargs(args, 0, 1, t8, pts = [3], 0) && KSHelper.isVarargs(args, 0, 1, t9, pts, 1) && KSHelper.isVarargs(args, 0, 1, t9, pts, 2) && KSHelper.isVarargs(args, 0, 1, t10, pts, 3) && KSHelper.isVarargs(args, 1, 1, t2, pts, 4) && KSHelper.isVarargs(args, 0, 1, t3, pts, 5) && KSHelper.isVarargs(args, 1, 1, t4, pts, 6) && KSHelper.isVarargs(args, 0, 1, t5, pts, 7) && KSHelper.isVarargs(args, 1, 1, t6, pts, 8) && KSHelper.isVarargs(args, 1, 1, t7, pts, 9) && te(pts, 10)) {
					return __ks_new(args[0], args[1], args[2], KSHelper.getVararg(args, 3, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]), KSHelper.getVararg(args, pts[5], pts[6]), KSHelper.getVararg(args, pts[6], pts[7]), KSHelper.getVararg(args, pts[7], pts[8]), KSHelper.getVararg(args, pts[8], pts[9]), KSHelper.getVararg(args, pts[9], pts[10]));
				}
			}
			throw KSHelper.badArgs();
		}, TreeNode);
		const TreeBranch = KSHelper.struct(function(index, type, rest, variadic, min, max, parameters, isNode, order, rows, backtracks, columns, equivalences = null) {
			if(columns === void 0 || columns === null) {
				columns = new Dictionary();
			}
			const _ = TreeNode.__ks_new(index, type, rest, variadic, min, max, parameters, isNode, order, rows, backtracks);
			_.columns = columns;
			_.equivalences = equivalences;
			return _;
		}, function(__ks_new, args) {
			const t0 = KSType.isNumber;
			const t1 = value => KSType.isClassInstance(value, Type);
			const t2 = KSType.isBoolean;
			const t3 = value => KSType.isArray(value, KSType.isString) || KSType.isNull(value);
			const t4 = value => KSType.isArray(value, value => KSType.isStructInstance(value, Row));
			const t5 = value => KSType.isArray(value, value => KSType.isStructInstance(value, BackTrack)) || KSType.isNull(value);
			const t6 = value => KSType.isDictionary(value, value => KSType.isStructInstance(value, TreeBranch) || KSType.isStructInstance(value, TreeLeaf)) || KSType.isNull(value);
			const t7 = value => KSType.isArray(value, value => KSType.isArray(value, KSType.isString)) || KSType.isNull(value);
			const t8 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t9 = value => KSType.isNumber(value) || KSType.isNull(value);
			const t10 = value => KSType.isDictionary(value, value => KSType.isStructInstance(value, TreeParameter)) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 6) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					if(t2(args[3])) {
						if(KSHelper.isVarargs(args, 0, 1, t3, pts = [4], 0) && KSHelper.isVarargs(args, 1, 1, t4, pts, 1) && KSHelper.isVarargs(args, 0, 1, t5, pts, 2) && KSHelper.isVarargs(args, 0, 1, t6, pts, 3) && KSHelper.isVarargs(args, 0, 1, t7, pts, 4) && te(pts, 5)) {
							return __ks_new(args[0], args[1], args[2], void 0, void 0, void 0, void 0, args[3], KSHelper.getVararg(args, 4, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]));
						}
					}
					if(t8(args[3])) {
						if(t2(args[4]) && t4(args[5])) {
							return __ks_new(args[0], args[1], args[2], args[3], void 0, void 0, void 0, args[4], void 0, args[5], void 0, void 0, void 0);
						}
						throw KSHelper.badArgs();
					}
					if(t9(args[3])) {
						if(t2(args[4]) && t4(args[5])) {
							return __ks_new(args[0], args[1], args[2], void 0, args[3], void 0, void 0, args[4], void 0, args[5], void 0, void 0, void 0);
						}
						throw KSHelper.badArgs();
					}
					if(t10(args[3]) && t2(args[4]) && t4(args[5])) {
						return __ks_new(args[0], args[1], args[2], void 0, void 0, void 0, args[3], args[4], void 0, args[5], void 0, void 0, void 0);
					}
					throw KSHelper.badArgs();
				}
				throw KSHelper.badArgs();
			}
			if(args.length >= 7 && args.length <= 8) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					if(KSHelper.isVarargs(args, 0, 1, t8, pts = [3], 0)) {
						if(KSHelper.isVarargs(args, 0, 1, t9, pts, 1) && KSHelper.isVarargs(args, 0, 1, t9, pts, 2) && KSHelper.isVarargs(args, 0, 1, t10, pts, 3) && KSHelper.isVarargs(args, 1, 1, t2, pts, 4) && KSHelper.isVarargs(args, 0, 1, t3, pts, 5) && KSHelper.isVarargs(args, 1, 1, t4, pts, 6) && KSHelper.isVarargs(args, 0, 1, t5, pts, 7) && KSHelper.isVarargs(args, 0, 1, t6, pts, 8) && KSHelper.isVarargs(args, 0, 1, t7, pts, 9) && te(pts, 10)) {
							return __ks_new(args[0], args[1], args[2], KSHelper.getVararg(args, 3, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]), KSHelper.getVararg(args, pts[5], pts[6]), KSHelper.getVararg(args, pts[6], pts[7]), KSHelper.getVararg(args, pts[7], pts[8]), KSHelper.getVararg(args, pts[8], pts[9]), KSHelper.getVararg(args, pts[9], pts[10]));
						}
						throw KSHelper.badArgs();
					}
					if(KSHelper.isVarargs(args, 0, 1, t9, pts = [3], 0)) {
						if(KSHelper.isVarargs(args, 1, 1, t2, pts, 1)) {
							if(KSHelper.isVarargs(args, 0, 1, t3, pts, 2) && KSHelper.isVarargs(args, 1, 1, t4, pts, 3) && KSHelper.isVarargs(args, 0, 1, t5, pts, 4) && KSHelper.isVarargs(args, 0, 1, t6, pts, 5) && KSHelper.isVarargs(args, 0, 1, t7, pts, 6) && te(pts, 7)) {
								return __ks_new(args[0], args[1], args[2], void 0, KSHelper.getVararg(args, 3, pts[1]), void 0, void 0, KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]), KSHelper.getVararg(args, pts[5], pts[6]), KSHelper.getVararg(args, pts[6], pts[7]));
							}
							throw KSHelper.badArgs();
						}
						if(KSHelper.isVarargs(args, 0, 1, t9, pts, 1)) {
							if(KSHelper.isVarargs(args, 0, 1, t10, pts, 2) && KSHelper.isVarargs(args, 1, 1, t2, pts, 3) && KSHelper.isVarargs(args, 0, 1, t3, pts, 4) && KSHelper.isVarargs(args, 1, 1, t4, pts, 5) && KSHelper.isVarargs(args, 0, 1, t5, pts, 6) && KSHelper.isVarargs(args, 0, 1, t6, pts, 7) && KSHelper.isVarargs(args, 0, 1, t7, pts, 8) && te(pts, 9)) {
								return __ks_new(args[0], args[1], args[2], void 0, KSHelper.getVararg(args, 3, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]), KSHelper.getVararg(args, pts[5], pts[6]), KSHelper.getVararg(args, pts[6], pts[7]), KSHelper.getVararg(args, pts[7], pts[8]), KSHelper.getVararg(args, pts[8], pts[9]));
							}
							throw KSHelper.badArgs();
						}
						if(KSHelper.isVarargs(args, 0, 1, t10, pts, 1) && KSHelper.isVarargs(args, 1, 1, t2, pts, 2) && KSHelper.isVarargs(args, 0, 1, t3, pts, 3) && KSHelper.isVarargs(args, 1, 1, t4, pts, 4) && KSHelper.isVarargs(args, 0, 1, t5, pts, 5) && KSHelper.isVarargs(args, 0, 1, t6, pts, 6) && KSHelper.isVarargs(args, 0, 1, t7, pts, 7) && te(pts, 8)) {
							return __ks_new(args[0], args[1], args[2], void 0, KSHelper.getVararg(args, 3, pts[1]), void 0, KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]), KSHelper.getVararg(args, pts[5], pts[6]), KSHelper.getVararg(args, pts[6], pts[7]), KSHelper.getVararg(args, pts[7], pts[8]));
						}
						throw KSHelper.badArgs();
					}
					if(t10(args[3])) {
						if(t2(args[4]) && KSHelper.isVarargs(args, 0, 1, t3, pts = [5], 0) && KSHelper.isVarargs(args, 1, 1, t4, pts, 1) && KSHelper.isVarargs(args, 0, 1, t5, pts, 2) && KSHelper.isVarargs(args, 0, 1, t6, pts, 3) && KSHelper.isVarargs(args, 0, 1, t7, pts, 4) && te(pts, 5)) {
							return __ks_new(args[0], args[1], args[2], void 0, void 0, void 0, args[3], args[4], KSHelper.getVararg(args, 5, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]));
						}
						throw KSHelper.badArgs();
					}
					if(t2(args[3]) && KSHelper.isVarargs(args, 0, 1, t3, pts = [4], 0) && KSHelper.isVarargs(args, 1, 1, t4, pts, 1) && KSHelper.isVarargs(args, 0, 1, t5, pts, 2) && KSHelper.isVarargs(args, 0, 1, t6, pts, 3) && KSHelper.isVarargs(args, 0, 1, t7, pts, 4) && te(pts, 5)) {
						return __ks_new(args[0], args[1], args[2], void 0, void 0, void 0, void 0, args[3], KSHelper.getVararg(args, 4, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]));
					}
					throw KSHelper.badArgs();
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 9) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					if(t8(args[3])) {
						if(t9(args[4])) {
							if(t2(args[5])) {
								if(KSHelper.isVarargs(args, 0, 1, t3, pts = [6], 0) && KSHelper.isVarargs(args, 1, 1, t4, pts, 1) && KSHelper.isVarargs(args, 0, 1, t5, pts, 2) && KSHelper.isVarargs(args, 0, 1, t6, pts, 3) && KSHelper.isVarargs(args, 0, 1, t7, pts, 4) && te(pts, 5)) {
									return __ks_new(args[0], args[1], args[2], args[3], args[4], void 0, void 0, args[5], KSHelper.getVararg(args, 6, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]));
								}
								throw KSHelper.badArgs();
							}
							if(t9(args[5])) {
								if(KSHelper.isVarargs(args, 0, 1, t10, pts = [6], 0) && KSHelper.isVarargs(args, 1, 1, t2, pts, 1) && KSHelper.isVarargs(args, 0, 1, t3, pts, 2) && KSHelper.isVarargs(args, 1, 1, t4, pts, 3) && KSHelper.isVarargs(args, 0, 1, t5, pts, 4) && KSHelper.isVarargs(args, 0, 1, t6, pts, 5) && KSHelper.isVarargs(args, 0, 1, t7, pts, 6) && te(pts, 7)) {
									return __ks_new(args[0], args[1], args[2], args[3], args[4], args[5], KSHelper.getVararg(args, 6, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]), KSHelper.getVararg(args, pts[5], pts[6]), KSHelper.getVararg(args, pts[6], pts[7]));
								}
								throw KSHelper.badArgs();
							}
							if(t10(args[5]) && t2(args[6]) && KSHelper.isVarargs(args, 0, 1, t3, pts = [7], 0) && KSHelper.isVarargs(args, 1, 1, t4, pts, 1) && KSHelper.isVarargs(args, 0, 1, t5, pts, 2) && KSHelper.isVarargs(args, 0, 1, t6, pts, 3) && KSHelper.isVarargs(args, 0, 1, t7, pts, 4) && te(pts, 5)) {
								return __ks_new(args[0], args[1], args[2], args[3], args[4], void 0, args[5], args[6], KSHelper.getVararg(args, 7, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]));
							}
							throw KSHelper.badArgs();
						}
						if(t10(args[4])) {
							if(t2(args[5]) && KSHelper.isVarargs(args, 0, 1, t3, pts = [6], 0) && KSHelper.isVarargs(args, 1, 1, t4, pts, 1) && KSHelper.isVarargs(args, 0, 1, t5, pts, 2) && KSHelper.isVarargs(args, 0, 1, t6, pts, 3) && KSHelper.isVarargs(args, 0, 1, t7, pts, 4) && te(pts, 5)) {
								return __ks_new(args[0], args[1], args[2], args[3], void 0, void 0, args[4], args[5], KSHelper.getVararg(args, 6, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]));
							}
							throw KSHelper.badArgs();
						}
						if(t2(args[4]) && KSHelper.isVarargs(args, 0, 1, t3, pts = [5], 0) && KSHelper.isVarargs(args, 1, 1, t4, pts, 1) && KSHelper.isVarargs(args, 0, 1, t5, pts, 2) && KSHelper.isVarargs(args, 0, 1, t6, pts, 3) && KSHelper.isVarargs(args, 0, 1, t7, pts, 4) && te(pts, 5)) {
							return __ks_new(args[0], args[1], args[2], args[3], void 0, void 0, void 0, args[4], KSHelper.getVararg(args, 5, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]));
						}
						throw KSHelper.badArgs();
					}
					if(t9(args[3])) {
						if(KSHelper.isVarargs(args, 0, 1, t9, pts = [4], 0) && KSHelper.isVarargs(args, 0, 1, t10, pts, 1) && KSHelper.isVarargs(args, 1, 1, t2, pts, 2) && KSHelper.isVarargs(args, 0, 1, t3, pts, 3) && KSHelper.isVarargs(args, 1, 1, t4, pts, 4) && KSHelper.isVarargs(args, 0, 1, t5, pts, 5) && KSHelper.isVarargs(args, 0, 1, t6, pts, 6) && KSHelper.isVarargs(args, 0, 1, t7, pts, 7) && te(pts, 8)) {
							return __ks_new(args[0], args[1], args[2], void 0, args[3], KSHelper.getVararg(args, 4, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]), KSHelper.getVararg(args, pts[5], pts[6]), KSHelper.getVararg(args, pts[6], pts[7]), KSHelper.getVararg(args, pts[7], pts[8]));
						}
						throw KSHelper.badArgs();
					}
					if(t10(args[3])) {
						if(t2(args[4]) && KSHelper.isVarargs(args, 0, 1, t3, pts = [5], 0) && KSHelper.isVarargs(args, 1, 1, t4, pts, 1) && KSHelper.isVarargs(args, 0, 1, t5, pts, 2) && KSHelper.isVarargs(args, 0, 1, t6, pts, 3) && KSHelper.isVarargs(args, 0, 1, t7, pts, 4) && te(pts, 5)) {
							return __ks_new(args[0], args[1], args[2], void 0, void 0, void 0, args[3], args[4], KSHelper.getVararg(args, 5, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]));
						}
						throw KSHelper.badArgs();
					}
					if(t2(args[3]) && t3(args[4]) && t4(args[5]) && t5(args[6]) && t6(args[7]) && t7(args[8])) {
						return __ks_new(args[0], args[1], args[2], void 0, void 0, void 0, void 0, args[3], args[4], args[5], args[6], args[7], args[8]);
					}
					throw KSHelper.badArgs();
				}
				throw KSHelper.badArgs();
			}
			if(args.length >= 5 && args.length <= 13) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && KSHelper.isVarargs(args, 0, 1, t8, pts = [3], 0) && KSHelper.isVarargs(args, 0, 1, t9, pts, 1) && KSHelper.isVarargs(args, 0, 1, t9, pts, 2) && KSHelper.isVarargs(args, 0, 1, t10, pts, 3) && KSHelper.isVarargs(args, 1, 1, t2, pts, 4) && KSHelper.isVarargs(args, 0, 1, t3, pts, 5) && KSHelper.isVarargs(args, 1, 1, t4, pts, 6) && KSHelper.isVarargs(args, 0, 1, t5, pts, 7) && KSHelper.isVarargs(args, 0, 1, t6, pts, 8) && KSHelper.isVarargs(args, 0, 1, t7, pts, 9) && te(pts, 10)) {
					return __ks_new(args[0], args[1], args[2], KSHelper.getVararg(args, 3, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]), KSHelper.getVararg(args, pts[5], pts[6]), KSHelper.getVararg(args, pts[6], pts[7]), KSHelper.getVararg(args, pts[7], pts[8]), KSHelper.getVararg(args, pts[8], pts[9]), KSHelper.getVararg(args, pts[9], pts[10]));
				}
			}
			throw KSHelper.badArgs();
		}, TreeNode);
		const MatchContext = KSHelper.struct(function(async, found, __ks_arguments_1, excludes, matches, possibilities) {
			if(found === void 0 || found === null) {
				found = false;
			}
			if(matches === void 0 || matches === null) {
				matches = [];
			}
			if(possibilities === void 0 || possibilities === null) {
				possibilities = [];
			}
			const _ = new Dictionary();
			_.async = async;
			_.found = found;
			_.arguments = __ks_arguments_1;
			_.excludes = excludes;
			_.matches = matches;
			_.possibilities = possibilities;
			return _;
		}, function(__ks_new, args) {
			const t0 = KSType.isBoolean;
			const t1 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t2 = value => KSType.isArray(value, value => KSType.isClassInstance(value, Type));
			const t3 = value => KSType.isArray(value, KSType.isString);
			const t4 = value => KSType.isArray(value, value => KSType.isStructInstance(value, CallMatch)) || KSType.isNull(value);
			const t5 = value => KSType.isArray(value, value => KSType.isClassInstance(value, FunctionType)) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 3 && args.length <= 6) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 1, 1, t2, pts, 1) && KSHelper.isVarargs(args, 1, 1, t3, pts, 2) && KSHelper.isVarargs(args, 0, 1, t4, pts, 3) && KSHelper.isVarargs(args, 0, 1, t5, pts, 4) && te(pts, 5)) {
					return __ks_new(args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]), KSHelper.getVararg(args, pts[3], pts[4]), KSHelper.getVararg(args, pts[4], pts[5]));
				}
			}
			throw KSHelper.badArgs();
		});
		function buildTree() {
			return buildTree.__ks_rt(this, arguments);
		};
		buildTree.__ks_0 = function(group, name, ignoreIndistinguishable, excludes, node) {
			if(excludes === void 0) {
				excludes = null;
			}
			if(group.n === 0) {
				return buildZeroTree.__ks_0(group, name, node);
			}
			if(group.n === 1) {
				expandOneGroup.__ks_0(group, name, ignoreIndistinguishable, excludes, node);
			}
			else {
				expandGroup.__ks_0(group, name, ignoreIndistinguishable, excludes, node);
			}
			if(isFlattenable.__ks_0(group, excludes, node)) {
				return buildFlatTree.__ks_0(group.functions[0], group.rows, group.n, excludes, node);
			}
			else {
				const tree = createTree.__ks_0(group.rows, group.n);
				if(group.n > 1) {
					for(const key in tree.columns) {
						const column = tree.columns[key];
						if(column.isNode) {
							tree.columns[key] = buildNode(tree, column, 1, group.n, name, node);
						}
					}
				}
				sortNodes2.__ks_0(tree);
				if(group.n === 1) {
					regroupLeaf_SiblingsEq.__ks_0(tree, node);
				}
				regroupBranch_Children_ForkAlike_SiblingsEq.__ks_0(tree, node);
				return tree;
			}
		};
		buildTree.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Group);
			const t1 = KSType.isString;
			const t2 = KSType.isBoolean;
			const t3 = value => KSType.isArray(value, KSType.isString) || KSType.isNull(value);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
					return buildTree.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		};
		function buildFlatTree() {
			return buildFlatTree.__ks_rt(this, arguments);
		};
		buildFlatTree.__ks_0 = function(__ks_function_1, rows, n, excludes, node) {
			if(excludes === void 0) {
				excludes = null;
			}
			const __ks_arguments_1 = new Dictionary();
			const parameters = new Dictionary();
			let lastIndex = 0;
			let fnParameters = __ks_function_1.__ks_func_parameters_1(excludes);
			if(__ks_function_1.__ks_func_isAsync_0()) {
				const scope = node.__ks_func_scope_0();
				fnParameters = [...fnParameters, new ParameterType(scope, scope.reference("Function"))];
			}
			for(let __ks_0 in rows) {
				const row = rows[__ks_0];
				for(let __ks_1 = 0, __ks_2 = row.types.length, type; __ks_1 < __ks_2; ++__ks_1) {
					type = row.types[__ks_1];
					if(!KSType.isValue(parameters[type.parameter])) {
						parameters[type.parameter] = (() => {
							const d = new Dictionary();
							d.index = type.parameter;
							d.parameter = fnParameters[type.parameter];
							d.argIndex = type.index;
							return d;
						})();
						if(KSOperator.gt(type.parameter, lastIndex)) {
							lastIndex = type.parameter;
						}
					}
				}
			}
			for(let __ks_0 in rows) {
				const row = rows[__ks_0];
				const args = new Dictionary();
				for(let __ks_1 = 0, __ks_2 = row.types.length, type; __ks_1 < __ks_2; ++__ks_1) {
					type = row.types[__ks_1];
					if(KSType.isValue(args[type.parameter])) {
						args[type.parameter] = KSOperator.addOrConcat(args[type.parameter], 1);
					}
					else {
						args[type.parameter] = 1;
					}
				}
				let last = -1;
				for(let __ks_1 in parameters) {
					const {index} = parameters[__ks_1];
					while(KSOperator.lt(++last, index)) {
						let argument = __ks_arguments_1[last];
						if(KSType.isValue(argument)) {
							__ks_arguments_1[last].push(0);
						}
						else {
							__ks_arguments_1[last] = [0];
						}
					}
					const size = KSType.isValue(args[index]) ? args[index] : 0;
					let argument = __ks_arguments_1[index];
					if(KSType.isValue(argument)) {
						__ks_arguments_1[index].push(size);
					}
					else {
						__ks_arguments_1[index] = [size];
					}
				}
			}
			let argCount = 0;
			for(let __ks_0 in parameters) {
				const parameter = parameters[__ks_0];
				parameter.argIndex = argCount;
				parameter.min = Math.min.apply(Math, [].concat(__ks_arguments_1[parameter.index]));
				parameter.max = Math.max.apply(Math, [].concat(__ks_arguments_1[parameter.index]));
				++argCount;
				const type = parameter.parameter.getArgumentType().toTestType();
				if(type.isNullable() === true) {
					const types = type.split([Type.Null]);
					parameter.argType = Type.union.apply(Type, [].concat([node.__ks_func_scope_0()], types)).sort();
				}
				else {
					parameter.argType = type.sort();
				}
			}
			const row = Row.__ks_new("", __ks_function_1, []);
			let afterRest = false;
			for(let __ks_0 in parameters) {
				const {parameter, index, argIndex, argType: type} = parameters[__ks_0];
				const hash = type.hashCode();
				const key = KSHelper.concatString(";", (afterRest ? KSOperator.subtraction(argIndex, argCount) : argIndex), ";", hash);
				const rest = KSOperator.eq(parameter.max(), Infinity);
				row.key += key;
				row.types.push(RowType.__ks_new(KSHelper.cast(afterRest ? KSOperator.subtraction(argIndex, argCount) : argIndex, "Number", false, null, "Number"), KSHelper.cast(type, "Type", false, Type, "Class"), rest, KSHelper.cast(index, "Number", false, null, "Number")));
				if(rest) {
					afterRest = true;
				}
			}
			const tree = Tree.__ks_new(n);
			let column = tree;
			let variadic = false;
			afterRest = false;
			for(let __ks_0 in parameters) {
				const {parameter, index, argIndex, argType: type} = parameters[__ks_0];
				const hash = type.hashCode();
				const key = KSHelper.concatString(":", __ks_function_1.__ks_func_index_0(), ":", index);
				const rest = KSOperator.eq(parameter.max(), Infinity);
				const {min, max} = parameters[index];
				if(!variadic && (min !== max)) {
					variadic = true;
				}
				if(index === lastIndex) {
					column.columns[hash] = TreeLeaf.__ks_new(KSHelper.cast(afterRest ? KSOperator.subtraction(argIndex, argCount) : argIndex, "Number", false, null, "Number"), KSHelper.cast(type, "Type", false, Type, "Class"), rest, variadic, KSHelper.cast(min, "Number", false, null, "Number"), KSHelper.cast(max, "Number", false, null, "Number"), (() => {
						const d = new Dictionary();
						d[key] = TreeParameter.__ks_new(key, __ks_function_1, index, [row.key]);
						return d;
					})(), false, void 0, [row], void 0, __ks_function_1, []);
				}
				else {
					column.columns[hash] = TreeBranch.__ks_new(KSHelper.cast(afterRest ? KSOperator.subtraction(argIndex, argCount) : argIndex, "Number", false, null, "Number"), KSHelper.cast(type, "Type", false, Type, "Class"), rest, variadic, KSHelper.cast(min, "Number", false, null, "Number"), KSHelper.cast(max, "Number", false, null, "Number"), (() => {
						const d = new Dictionary();
						d[key] = TreeParameter.__ks_new(key, __ks_function_1, KSHelper.cast(index, "Number", false, null, "Number"), [row.key]);
						return d;
					})(), true, void 0, [row], void 0, new Dictionary());
				}
				column.order = [hash];
				column = column.columns[hash];
				if(rest) {
					afterRest = true;
				}
			}
			tree.variadic = variadic;
			return tree;
		};
		buildFlatTree.__ks_rt = function(that, args) {
			const t0 = value => KSType.isClassInstance(value, FunctionType);
			const t1 = KSType.isValue;
			const t2 = KSType.isNumber;
			const t3 = value => KSType.isArray(value, KSType.isString) || KSType.isNull(value);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
					return buildFlatTree.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		};
		function buildNode() {
			return buildNode.__ks_rt(this, arguments);
		};
		buildNode.__ks_0 = function(tree, branch, pIndex, max, name, node) {
			const usages = new Dictionary();
			for(let __ks_0 = 0, __ks_1 = branch.rows.length, row; __ks_0 < __ks_1; ++__ks_0) {
				row = branch.rows[__ks_0];
				const index = row.function.__ks_func_index_0();
				usages[index] = (KSType.isValue(usages[index]) ? usages[index] : 0) + 1;
			}
			const next = pIndex + 1;
			if(next === max) {
				for(let __ks_0 = 0, __ks_1 = branch.rows.length, row; __ks_0 < __ks_1; ++__ks_0) {
					row = branch.rows[__ks_0];
					const {type, index, rest, parameter} = row.types[pIndex];
					const hash = type.__ks_func_hashCode_0();
					let match = branch.columns[hash];
					if(KSType.isValue(match)) {
						SyntaxException.throwIndistinguishableFunctions(name, match.rows[0].types.map((() => {
							const __ks_rt = (...args) => {
								const t0 = KSType.isDestructurableObject;
								const t1 = KSType.isValue;
								if(args.length === 3) {
									if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
										return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
									}
								}
								throw KSHelper.badArgs();
							};
							__ks_rt.__ks_0 = ({type}, __ks_0, __ks_1) => {
								return type;
							};
							return __ks_rt;
						})()), [KSHelper.cast(match, "TreeLeaf", false, TreeLeaf, "Struct").function, row.function], node);
					}
					const key = KSHelper.concatString(":", row.function.__ks_func_index_0(), ":", parameter);
					branch.columns[hash] = TreeLeaf.__ks_new(index, type, rest, rest, void 0, void 0, (() => {
						const d = new Dictionary();
						d[key] = TreeParameter.__ks_new(key, row.function, parameter, [row.key]);
						return d;
					})(), false, void 0, [row], void 0, row.function, []);
				}
			}
			else {
				for(let __ks_0 = 0, __ks_1 = branch.rows.length, row; __ks_0 < __ks_1; ++__ks_0) {
					row = branch.rows[__ks_0];
					const {type, index, rest, parameter} = row.types[pIndex];
					const hash = type.__ks_func_hashCode_0();
					const key = KSHelper.concatString(":", row.function.__ks_func_index_0(), ":", parameter);
					if(!KSType.isValue(branch.columns[hash])) {
						branch.columns[hash] = TreeBranch.__ks_new(index, type, rest, rest, void 0, void 0, (() => {
							const d = new Dictionary();
							d[key] = TreeParameter.__ks_new(key, row.function, parameter, [row.key]);
							return d;
						})(), true, void 0, [row], void 0, new Dictionary());
					}
					else {
						const __ks_branch_1 = branch.columns[hash];
						__ks_branch_1.rows.push(row);
						if(!KSType.isValue(__ks_branch_1.parameters[key])) {
							__ks_branch_1.parameters[key] = TreeParameter.__ks_new(key, row.function, parameter, [row.key]);
						}
						else {
							__ks_branch_1.parameters[key].rows.push(row.key);
						}
					}
				}
				for(const key in branch.columns) {
					const child = branch.columns[key];
					if(child.isNode) {
						branch.columns[key] = buildNode(tree, child, next, max, name, node);
					}
				}
			}
			sortNodes2.__ks_0(branch);
			resolveBackTracing.__ks_0(branch, max);
			if(next === max) {
				regroupLeaf_SiblingsEq.__ks_0(branch, node);
			}
			regroupBranch_TopForkEqLastChild.__ks_0(branch);
			regroupBranch_ForkEq_ChildrenEqFunc.__ks_0(branch);
			regroupBranch_SiblingsEqChildren.__ks_0(branch);
			regroupBranch_ChildrenEqFunc_Flatten.__ks_0(branch, node);
			regroupBranch_Children_ForkAlike_SiblingsEq.__ks_0(branch, node);
			branch = regroupBranch_EqParameter.__ks_0(branch);
			return branch;
		};
		buildNode.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree);
			const t1 = value => KSType.isStructInstance(value, TreeBranch);
			const t2 = KSType.isNumber;
			const t3 = KSType.isString;
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 6) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t2(args[3]) && t3(args[4]) && t4(args[5])) {
					return buildNode.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
				}
			}
			throw KSHelper.badArgs();
		};
		function buildZeroTree() {
			return buildZeroTree.__ks_rt(this, arguments);
		};
		buildZeroTree.__ks_0 = function(group, name, node) {
			let master = group.functions[0];
			const sameLength = [];
			for(let __ks_0 = 1, __ks_1 = group.functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_function_1 = group.functions[__ks_0];
				if(__ks_function_1.__ks_func_max_0() === master.__ks_func_max_0()) {
					sameLength.push(__ks_function_1);
				}
				else if(__ks_function_1.__ks_func_max_0() < master.__ks_func_max_0()) {
					master = __ks_function_1;
				}
			}
			if(sameLength.length !== 0) {
				let errors = [];
				for(let __ks_0 = 0, __ks_1 = sameLength.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
					__ks_function_1 = sameLength[__ks_0];
					if(__ks_function_1.isMorePreciseThan(master) === true) {
					}
					else if(master.isMorePreciseThan(__ks_function_1)) {
						master = __ks_function_1;
						errors = errors.filter((() => {
							const __ks_rt = (...args) => {
								const t0 = KSType.isValue;
								if(args.length === 3) {
									if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
										return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
									}
								}
								throw KSHelper.badArgs();
							};
							__ks_rt.__ks_0 = (error, __ks_0, __ks_1) => {
								return !(error.isMorePreciseThan(master) === true);
							};
							return __ks_rt;
						})());
					}
					else {
						errors.push(__ks_function_1);
					}
				}
				if((master.__ks_func_max_0() !== 0) && (errors.length !== 0)) {
					SyntaxException.__ks_sttc_throwIndistinguishableFunctions_1(name, [], [master, ...errors], node);
				}
			}
			return Tree.__ks_new(0, void 0, void 0, void 0, void 0, void 0, void 0, master);
		};
		buildZeroTree.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Group);
			const t1 = KSType.isString;
			const t2 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return buildZeroTree.__ks_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function createTree() {
			return createTree.__ks_rt(this, arguments);
		};
		createTree.__ks_0 = function(rows, min) {
			const tree = Tree.__ks_new(min);
			const usages = new Dictionary();
			for(const key in rows) {
				const index = rows[key].function.__ks_func_index_0();
				usages[index] = (KSType.isValue(usages[index]) ? usages[index] : 0) + 1;
			}
			if(min === 1) {
				for(let __ks_0 in rows) {
					const row = rows[__ks_0];
					const {type, index, rest, parameter} = row.types[0];
					const hash = type.__ks_func_hashCode_0();
					if(KSType.isValue(tree.columns[hash])) {
						NotSupportedException.__ks_sttc_throw_1([]);
					}
					const key = KSHelper.concatString(":", row.function.__ks_func_index_0(), ":", parameter);
					tree.columns[hash] = TreeLeaf.__ks_new(index, type, rest, rest, void 0, void 0, (() => {
						const d = new Dictionary();
						d[key] = TreeParameter.__ks_new(key, row.function, parameter, [row.key]);
						return d;
					})(), false, void 0, [row], void 0, row.function, []);
				}
			}
			else {
				for(let __ks_0 in rows) {
					const row = rows[__ks_0];
					const {type, index, rest, parameter} = row.types[0];
					const hash = type.__ks_func_hashCode_0();
					const key = KSHelper.concatString(":", row.function.__ks_func_index_0(), ":", parameter);
					if(!KSType.isValue(tree.columns[hash])) {
						tree.columns[hash] = TreeBranch.__ks_new(index, type, rest, rest, void 0, void 0, (() => {
							const d = new Dictionary();
							d[key] = TreeParameter.__ks_new(key, row.function, parameter, [row.key]);
							return d;
						})(), true, void 0, [row], void 0, new Dictionary());
					}
					else {
						const branch = tree.columns[hash];
						if((branch.index < 0) && (index >= 0)) {
							for(let __ks_1 = 0, __ks_2 = branch.rows.length, row; __ks_1 < __ks_2; ++__ks_1) {
								row = branch.rows[__ks_1];
								for(let __ks_3 = 0, __ks_4 = row.types.length, type; __ks_3 < __ks_4; ++__ks_3) {
									type = row.types[__ks_3];
									if(type.index === branch.index) {
										type.index = index;
									}
								}
							}
							branch.index = index;
						}
						branch.rows.push(row);
						if(!KSType.isValue(branch.parameters[key])) {
							branch.parameters[key] = TreeParameter.__ks_new(key, row.function, parameter, [row.key]);
						}
						else {
							branch.parameters[key].rows.push(row.key);
						}
						if(!rest && branch.rest) {
							branch.rest = false;
							branch.variadic = false;
						}
					}
				}
			}
			return tree;
		};
		createTree.__ks_rt = function(that, args) {
			const t0 = value => KSType.isDictionary(value, value => KSType.isStructInstance(value, Row));
			const t1 = KSType.isNumber;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return createTree.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function expandOneGroup() {
			return expandOneGroup.__ks_rt(this, arguments);
		};
		expandOneGroup.__ks_0 = function(group, name, ignoreIndistinguishable, excludes, node) {
			if(excludes === void 0) {
				excludes = null;
			}
			for(let __ks_0 = 0, __ks_1 = group.functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_function_1 = group.functions[__ks_0];
				let argIndex = 0;
				let min = __ks_function_1.__ks_func_min_1(excludes);
				let parameters = __ks_function_1.__ks_func_parameters_1(excludes);
				if(__ks_function_1.__ks_func_isAsync_0()) {
					const scope = node.__ks_func_scope_0();
					++min;
					parameters = [...parameters, new ParameterType(scope, scope.reference("Function"))];
				}
				if(min === 1) {
					let nullTested = false;
					for(let index = 0, __ks_2 = parameters.length, parameter; index < __ks_2; ++index) {
						parameter = parameters[index];
						if(parameter.__ks_func_min_2() === 1) {
							const type = parameter.__ks_func_type_0().toTestType();
							addOneGroupRow(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, parameter, type, nullTested, null, index, argIndex);
							if(type.isNullable() === true) {
								nullTested = true;
							}
							break;
						}
						if(KSOperator.eq(parameter.__ks_func_max_2(), Infinity)) {
							argIndex = -1;
						}
					}
				}
				else {
					const types = [];
					let nullTested = false;
					for(let index = 0, __ks_2 = parameters.length, parameter; index < __ks_2; ++index) {
						parameter = parameters[index];
						const type = parameter.__ks_func_type_0().toTestType();
						let addable = true;
						for(let __ks_3 = 0, __ks_4 = types.length, t; __ks_3 < __ks_4 && addable; ++__ks_3) {
							t = types[__ks_3];
							if(type.isAssignableToVariable(t, false, false, true) === true) {
								addable = false;
							}
						}
						if(addable) {
							addOneGroupRow(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, parameter, type, nullTested, null, index, argIndex);
							types.push(type);
							if(type.isNullable() === true) {
								nullTested = true;
							}
						}
						if(KSOperator.eq(parameter.__ks_func_max_2(), Infinity)) {
							argIndex = -1;
						}
					}
				}
			}
		};
		expandOneGroup.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Group);
			const t1 = KSType.isString;
			const t2 = KSType.isBoolean;
			const t3 = value => KSType.isArray(value, KSType.isString) || KSType.isNull(value);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
					return expandOneGroup.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		};
		function addOneGroupRow() {
			return addOneGroupRow.__ks_rt(this, arguments);
		};
		addOneGroupRow.__ks_0 = function(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, parameter, type, nullTested, union, paramIndex, argIndex) {
			if(union === void 0) {
				union = null;
			}
			if(type.__ks_func_isSplittable_0() === true) {
				const types = type.__ks_func_split_0([]);
				const union = UnionMatch.__ks_new(__ks_function_1, types.length, []);
				if(nullTested) {
					for(let __ks_0 = 0, __ks_1 = types.length, type; __ks_0 < __ks_1; ++__ks_0) {
						type = types[__ks_0];
						if(!(type.isNull() === true)) {
							addOneGroupRow(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, parameter, type, nullTested, union, paramIndex, argIndex);
						}
					}
				}
				else {
					for(let __ks_0 = 0, __ks_1 = types.length, type; __ks_0 < __ks_1; ++__ks_0) {
						type = types[__ks_0];
						addOneGroupRow(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, parameter, type, nullTested, union, paramIndex, argIndex);
					}
				}
			}
			else {
				const key = KSHelper.concatString(";", argIndex, ";", type.__ks_func_hashCode_0());
				const rest = KSOperator.eq(parameter.__ks_func_max_2(), Infinity);
				let addable = true;
				if(rest) {
					for(let __ks_0 = paramIndex + 1, __ks_1 = parameters.length, parameter; __ks_0 < __ks_1 && addable; ++__ks_0) {
						parameter = parameters[__ks_0];
						if(type.isAssignableToVariable(parameter.__ks_func_type_0(), false, false, true)) {
							addable = false;
						}
					}
				}
				if(addable) {
					let matchFunction = null;
					let matchUnion = null;
					if(KSType.isValue(group.rows[key])) {
						matchFunction = group.rows[key].function;
						matchUnion = group.rows[key].union;
					}
					else if((argIndex === -1) && KSType.isValue(group.rows[";0;" + type.__ks_func_hashCode_0()])) {
						matchFunction = group.rows[";0;" + type.__ks_func_hashCode_0()].function;
						matchUnion = group.rows[";0;" + type.__ks_func_hashCode_0()].union;
					}
					else {
						group.rowCount++;
					}
					if(KSType.isValue(matchFunction)) {
						if(__ks_function_1.__ks_func_max_0() === matchFunction.__ks_func_max_0()) {
							if(KSType.isValue(matchUnion)) {
								if(KSType.isValue(union)) {
									if(!ignoreIndistinguishable) {
										SyntaxException.__ks_sttc_throwIndistinguishableFunctions_1(name, [type], [__ks_function_1, matchFunction], node);
									}
								}
								else {
									matchUnion.matches.push([type, __ks_function_1]);
									if(matchUnion.matches.length === matchUnion.length) {
										SyntaxException.__ks_sttc_throwShadowFunction_0(name, matchFunction, node);
									}
								}
							}
							else {
								if(KSType.isValue(union)) {
									union.matches.push([type, matchFunction]);
									if(union.matches.length === union.length) {
										SyntaxException.__ks_sttc_throwShadowFunction_0(name, __ks_function_1, node);
									}
									addable = false;
								}
								else {
									if(!ignoreIndistinguishable) {
										SyntaxException.__ks_sttc_throwIndistinguishableFunctions_1(name, [type], [__ks_function_1, matchFunction], node);
									}
								}
							}
						}
						else if(__ks_function_1.__ks_func_max_0() >= matchFunction.__ks_func_max_0()) {
							addable = false;
						}
					}
				}
				if(addable) {
					group.rows[key] = Row.__ks_new(key, __ks_function_1, [RowType.__ks_new(argIndex, type, rest, paramIndex)], void 0, union);
				}
			}
		};
		addOneGroupRow.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Group);
			const t1 = KSType.isString;
			const t2 = KSType.isBoolean;
			const t3 = value => KSType.isClassInstance(value, AbstractNode);
			const t4 = value => KSType.isClassInstance(value, FunctionType);
			const t5 = value => KSType.isArray(value, value => KSType.isClassInstance(value, ParameterType));
			const t6 = value => KSType.isClassInstance(value, ParameterType);
			const t7 = value => KSType.isClassInstance(value, Type);
			const t8 = value => KSType.isStructInstance(value, UnionMatch) || KSType.isNull(value);
			const t9 = KSType.isNumber;
			if(args.length === 12) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4]) && t5(args[5]) && t6(args[6]) && t7(args[7]) && t2(args[8]) && t8(args[9]) && t9(args[10]) && t9(args[11])) {
					return addOneGroupRow.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]);
				}
			}
			throw KSHelper.badArgs();
		};
		function expandGroup() {
			return expandGroup.__ks_rt(this, arguments);
		};
		expandGroup.__ks_0 = function(group, name, ignoreIndistinguishable, excludes, node) {
			if(excludes === void 0) {
				excludes = null;
			}
			for(let __ks_0 = 0, __ks_1 = group.functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_function_1 = group.functions[__ks_0];
				let min = __ks_function_1.__ks_func_min_1(excludes);
				let minAfter = __ks_function_1.__ks_func_getMinAfter_1(excludes);
				let parameters = __ks_function_1.__ks_func_parameters_1(excludes);
				if(__ks_function_1.__ks_func_isAsync_0()) {
					const scope = node.__ks_func_scope_0();
					++min;
					++minAfter;
					parameters = [...parameters, new ParameterType(scope, scope.reference("Function"))];
				}
				expandFunction.__ks_0(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, minAfter, group.n, group.n - min, 0, 0, 0, -1, "", []);
			}
		};
		expandGroup.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Group);
			const t1 = KSType.isString;
			const t2 = KSType.isBoolean;
			const t3 = value => KSType.isArray(value, KSType.isString) || KSType.isNull(value);
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
					return expandGroup.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		};
		function expandFunction() {
			return expandFunction.__ks_rt(this, arguments);
		};
		expandFunction.__ks_0 = function(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, minAfter, target, remaining, paramIndex, stepIndex, stepCount, argIndex, key, types) {
			if(types.length === target) {
				let match = group.rows[key];
				if(KSType.isValue(match)) {
					if(__ks_function_1 === match.function) {
						group.rows[key] = Row.__ks_new(key, __ks_function_1, types);
					}
					else if(__ks_function_1.__ks_func_max_0() === match.function.__ks_func_max_0()) {
						if(!ignoreIndistinguishable) {
							SyntaxException.throwIndistinguishableFunctions(name, match.types.map((() => {
								const __ks_rt = (...args) => {
									const t0 = KSType.isDestructurableObject;
									const t1 = KSType.isValue;
									if(args.length === 3) {
										if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
											return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
										}
									}
									throw KSHelper.badArgs();
								};
								__ks_rt.__ks_0 = ({type}, __ks_0, __ks_1) => {
									return type;
								};
								return __ks_rt;
							})()), [__ks_function_1, match.function], node);
						}
					}
					else if(__ks_function_1.__ks_func_max_0() < match.function.__ks_func_max_0()) {
						group.rows[key] = Row.__ks_new(key, __ks_function_1, types);
					}
				}
				else {
					group.rows[key] = Row.__ks_new(key, __ks_function_1, types);
					group.rowCount++;
				}
			}
			else if((paramIndex < parameters.length) || (__ks_function_1.__ks_func_isAsync_0() && (paramIndex === parameters.length))) {
				const parameter = parameters[paramIndex];
				const type = parameter.__ks_func_getArgumentType_0();
				const min = parameter.__ks_func_min_2();
				const max = parameter.__ks_func_max_2();
				if(stepIndex === 0) {
					if(stepCount < min) {
						expandParameter.__ks_0(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, minAfter, target, remaining, paramIndex, 0, stepCount + 1, KSOperator.eq(max, Infinity), argIndex + 1, key, types, type);
					}
					else {
						const rest = KSOperator.eq(max, Infinity);
						if((paramIndex + 1) < parameters.length) {
							if(rest) {
								expandFunction.__ks_0(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, minAfter, target, remaining, paramIndex + 1, 0, 0, -remaining - minAfter - 1, key, types);
							}
							else {
								if((stepCount === max) || hasMin.__ks_0(type, paramIndex + 1, parameters, remaining)) {
									expandFunction.__ks_0(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, minAfter, target, remaining, paramIndex + 1, 0, 0, argIndex, key, types);
								}
							}
						}
						if(rest) {
							for(let i = 1, __ks_0 = getMaxRestExpand.__ks_0(paramIndex, parameters, remaining, __ks_function_1); i <= __ks_0; ++i) {
								expandParameter.__ks_0(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, minAfter, target, remaining - 1, paramIndex, i, 1, rest, argIndex + 1, key, [...types], type);
							}
						}
						else {
							for(let i = 1, __ks_0 = Math.min(max - min, remaining); i <= __ks_0; ++i) {
								expandParameter.__ks_0(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, minAfter, target, remaining - 1, paramIndex, i, 1, rest, argIndex + 1, key, [...types], type);
							}
						}
					}
				}
				else if(stepCount < stepIndex) {
					expandParameter.__ks_0(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, minAfter, target, remaining - 1, paramIndex, stepIndex, stepCount + 1, KSOperator.eq(max, Infinity), argIndex + 1, key, types, type);
				}
				else {
					if(KSOperator.eq(max, Infinity)) {
						expandFunction.__ks_0(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, minAfter, target, remaining, paramIndex + 1, 0, 0, -remaining - minAfter - 1, key, types);
					}
					else if((remaining === 0) || ((stepCount + min) >= max) || hasMin2.__ks_0(type, paramIndex + 1, parameters)) {
						expandFunction.__ks_0(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, minAfter, target, remaining, paramIndex + 1, 0, 0, argIndex, key, types);
					}
				}
			}
		};
		expandFunction.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Group);
			const t1 = KSType.isString;
			const t2 = KSType.isBoolean;
			const t3 = value => KSType.isClassInstance(value, AbstractNode);
			const t4 = value => KSType.isClassInstance(value, FunctionType);
			const t5 = value => KSType.isArray(value, value => KSType.isClassInstance(value, ParameterType));
			const t6 = KSType.isNumber;
			const t7 = value => KSType.isArray(value, value => KSType.isStructInstance(value, RowType));
			if(args.length === 15) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4]) && t5(args[5]) && t6(args[6]) && t6(args[7]) && t6(args[8]) && t6(args[9]) && t6(args[10]) && t6(args[11]) && t6(args[12]) && t1(args[13]) && t7(args[14])) {
					return expandFunction.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14]);
				}
			}
			throw KSHelper.badArgs();
		};
		function getMaxRestExpand() {
			return getMaxRestExpand.__ks_rt(this, arguments);
		};
		getMaxRestExpand.__ks_0 = function(restIndex, parameters, remaining, __ks_function_1) {
			let min = __ks_function_1.__ks_func_getMinAfter_0();
			let max = __ks_function_1.__ks_func_getMaxAfter_0();
			if(min === max) {
				return remaining;
			}
			if(__ks_function_1.__ks_func_isAsync_0()) {
				++min;
				++max;
			}
			const restType = parameters[restIndex].__ks_func_type_0();
			let count = remaining;
			let delta = 0;
			let addToCount = true;
			for(let __ks_0 = restIndex + 1, __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = parameters[__ks_0];
				const d = parameter.__ks_func_max_2() - parameter.__ks_func_min_2();
				if((d === 0) && (delta !== 0)) {
					count += delta;
					delta = 0;
				}
				if(restType.isAssignableToVariable(parameter.__ks_func_type_0(), false, false, true) === true) {
					if(addToCount) {
						count -= d;
					}
					else {
						delta -= d;
					}
				}
				else {
					delta += parameter.__ks_func_min_2();
					if(d === 0) {
						addToCount = false;
					}
				}
			}
			return Math.min(count, remaining);
		};
		getMaxRestExpand.__ks_rt = function(that, args) {
			const t0 = KSType.isNumber;
			const t1 = value => KSType.isArray(value, value => KSType.isClassInstance(value, ParameterType));
			const t2 = value => KSType.isClassInstance(value, FunctionType);
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t0(args[2]) && t2(args[3])) {
					return getMaxRestExpand.__ks_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		};
		function hasMin() {
			return hasMin.__ks_rt(this, arguments);
		};
		hasMin.__ks_0 = function(type, index, parameters, remaining) {
			for(let __ks_0 = index, __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = parameters[__ks_0];
				if(((remaining === 0) && (parameter.__ks_func_min_2() > 0)) || !(parameter.__ks_func_type_0().isAssignableToVariable(type, false, false, true) === true)) {
					return true;
				}
			}
			return false;
		};
		hasMin.__ks_rt = function(that, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isArray(value, value => KSType.isClassInstance(value, ParameterType));
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t1(args[3])) {
					return hasMin.__ks_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		};
		function hasMin2() {
			return hasMin2.__ks_rt(this, arguments);
		};
		hasMin2.__ks_0 = function(type, index, parameters) {
			for(let __ks_0 = index, __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = parameters[__ks_0];
				if(!(parameter.__ks_func_type_0().isAssignableToVariable(type, false, false, true) === true)) {
					return true;
				}
			}
			return false;
		};
		hasMin2.__ks_rt = function(that, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isArray(value, value => KSType.isClassInstance(value, ParameterType));
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return hasMin2.__ks_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function expandParameter() {
			return expandParameter.__ks_rt(this, arguments);
		};
		expandParameter.__ks_0 = function(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, minAfter, target, remaining, paramIndex, stepIndex, stepCount, rest, argIndex, key, types, type) {
			if(type.__ks_func_isUnion_0() === true) {
				for(let __ks_0 = 0, __ks_1 = KSHelper.cast(type.__ks_func_discard_0(), "UnionType", false, UnionType, "Class").__ks_func_types_1(), __ks_2 = __ks_1.length, value; __ks_0 < __ks_2; ++__ks_0) {
					value = __ks_1[__ks_0];
					expandParameter(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, minAfter, target, remaining, paramIndex, stepIndex, stepCount, rest, argIndex, key, types, value);
				}
			}
			else {
				const __ks_key_1 = KSHelper.concatString(key, ";", argIndex, ";", type.__ks_func_hashCode_0());
				const __ks_types_1 = [...types];
				__ks_types_1.push(RowType.__ks_new(argIndex, type, rest, paramIndex));
				expandFunction.__ks_0(group, name, ignoreIndistinguishable, node, __ks_function_1, parameters, minAfter, target, remaining, paramIndex, stepIndex, stepCount, argIndex, __ks_key_1, __ks_types_1);
			}
		};
		expandParameter.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Group);
			const t1 = KSType.isString;
			const t2 = KSType.isBoolean;
			const t3 = value => KSType.isClassInstance(value, AbstractNode);
			const t4 = value => KSType.isClassInstance(value, FunctionType);
			const t5 = value => KSType.isArray(value, value => KSType.isClassInstance(value, ParameterType));
			const t6 = KSType.isNumber;
			const t7 = value => KSType.isArray(value, value => KSType.isStructInstance(value, RowType));
			const t8 = value => KSType.isClassInstance(value, Type);
			if(args.length === 17) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4]) && t5(args[5]) && t6(args[6]) && t6(args[7]) && t6(args[8]) && t6(args[9]) && t6(args[10]) && t6(args[11]) && t2(args[12]) && t6(args[13]) && t1(args[14]) && t7(args[15]) && t8(args[16])) {
					return expandParameter.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16]);
				}
			}
			throw KSHelper.badArgs();
		};
		function regroupBranch_EqParameter() {
			return regroupBranch_EqParameter.__ks_rt(this, arguments);
		};
		regroupBranch_EqParameter.__ks_0 = function(branch) {
			const columns = Dictionary.values(branch.columns);
			if((columns.length === 1) && (__ks_Dictionary.__ks_sttc_length_0(branch.parameters) === 1) && (__ks_Dictionary._sm_length(columns[0].parameters) === 1) && (__ks_Dictionary.__ks_sttc_value_0(branch.parameters, 0).key === __ks_Dictionary._sm_value(columns[0].parameters, 0).key) && (branch.type.__ks_func_hashCode_0() === branch.order[0])) {
				const child = columns[0];
				child.index = branch.index;
				child.min = KSOperator.addOrConcat(child.min, branch.min);
				child.max = KSOperator.addOrConcat(child.max, branch.max);
				return child;
			}
			else {
				return branch;
			}
		};
		regroupBranch_EqParameter.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			if(args.length === 1) {
				if(t0(args[0])) {
					return regroupBranch_EqParameter.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function regroupBranch_ForkEq_TopChildrenEqFunc() {
			return regroupBranch_ForkEq_TopChildrenEqFunc.__ks_rt(this, arguments);
		};
		regroupBranch_ForkEq_TopChildrenEqFunc.__ks_0 = function(branch) {
			if(branch.order.length >= 2) {
				const type = branch.type.__ks_func_hashCode_0();
				let column = branch.columns[type];
				if(KSType.isValue(column)) {
					if(isSameFork.__ks_0(branch, column) === true) {
						let column2 = Dictionary.values(branch.columns).find((() => {
							const __ks_rt = (...args) => {
								const t0 = KSType.isValue;
								if(args.length === 3) {
									if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
										return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
									}
								}
								throw KSHelper.badArgs();
							};
							__ks_rt.__ks_0 = (c, __ks_0, __ks_1) => {
								return (c !== column) && isSameFunction(column, c);
							};
							return __ks_rt;
						})());
						if(KSType.isValue(column2)) {
							let regroup = false;
							if(!column.isNode && !(column2.isNode === true) && KSOperator.gt(column2.index, 0)) {
								regroup = true;
							}
							if(regroup) {
								branch.max += column.max;
								branch.variadic = true;
								column2.min = Math.max(0, KSOperator.subtraction(column2.min, column.min));
								column2.variadic = true;
								delete branch.columns[type];
								__ks_Array.__ks_func_remove_0.call(branch.order, [type]);
							}
						}
					}
				}
			}
		};
		regroupBranch_ForkEq_TopChildrenEqFunc.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			if(args.length === 1) {
				if(t0(args[0])) {
					return regroupBranch_ForkEq_TopChildrenEqFunc.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function regroupBranch_ForkEq_ChildrenEqFunc() {
			return regroupBranch_ForkEq_ChildrenEqFunc.__ks_rt(this, arguments);
		};
		regroupBranch_ForkEq_ChildrenEqFunc.__ks_0 = function(branch) {
			if(!(branch.order.length >= 2)) {
				return;
			}
			const type = branch.type.__ks_func_hashCode_0();
			if(!(branch.order[0] === type)) {
				return;
			}
			const column = branch.columns[type];
			if(isSameFork.__ks_0(branch, column) === true) {
				if(isRegroupeableBranch2(branch, column, type) === true) {
					branch.max += column.max;
					branch.variadic = true;
					const mins = new Dictionary();
					for(let __ks_0 = 0, __ks_1 = column.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
						key = column.order[__ks_0];
						mins[key] = buildMin.__ks_0(column.columns[key]);
					}
					applyMin2.__ks_0(branch, mins, type);
					delete branch.columns[type];
					__ks_Array.__ks_func_remove_0.call(branch.order, [type]);
				}
				else if(!column.isNode) {
					let column2 = Dictionary.values(branch.columns).find((() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 3) {
								if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (c, __ks_0, __ks_1) => {
							return (c !== column) && !(c.isNode === true) && KSOperator.gt(c.index, 0) && isSameFunction(column, c);
						};
						return __ks_rt;
					})());
					if(KSType.isValue(column2)) {
						branch.max += column.max;
						branch.variadic = true;
						column2.min = Math.max(0, KSOperator.subtraction(column2.min, column.min));
						column2.variadic = true;
						delete branch.columns[type];
						__ks_Array.__ks_func_remove_0.call(branch.order, [type]);
					}
				}
			}
		};
		regroupBranch_ForkEq_ChildrenEqFunc.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			if(args.length === 1) {
				if(t0(args[0])) {
					return regroupBranch_ForkEq_ChildrenEqFunc.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function applyMin2() {
			return applyMin2.__ks_rt(this, arguments);
		};
		applyMin2.__ks_0 = function(tree, mins, type) {
			for(let __ks_0 = 0, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree.order[__ks_0];
				if(key !== type) {
					const node = tree.columns[key];
					let m = mins[key];
					if(KSType.isValue(m)) {
						applyMin.__ks_0(node, KSHelper.cast(m, "Array", false, null, "Array"));
					}
					else {
						node.min = 0;
						node.variadic = true;
						if(node.isNode) {
							applyMin2.__ks_0(KSHelper.cast(node, "TreeBranch", false, TreeBranch, "Struct"), mins, type);
						}
					}
				}
			}
		};
		applyMin2.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = KSType.isValue;
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
					return applyMin2.__ks_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function toSignature3() {
			return toSignature3.__ks_rt(this, arguments);
		};
		toSignature3.__ks_0 = function(tree, withRoot, type) {
			if(type === void 0) {
				type = null;
			}
			let s = withRoot ? "/" + tree.type.__ks_func_hashCode_0() + "()" : "";
			if(KSType.isValue(type)) {
				for(let i = 0, __ks_0 = tree.order.length, key; i < __ks_0; ++i) {
					key = tree.order[i];
					if(key !== type) {
						s = KSHelper.concatString(s, toSignature3(tree.columns[key], true, null));
					}
				}
			}
			else {
				for(let i = 0, __ks_0 = tree.order.length, key; i < __ks_0; ++i) {
					key = tree.order[i];
					s = KSHelper.concatString(s, toSignature3(tree.columns[key], true, null));
				}
			}
			return s;
		};
		toSignature3.__ks_1 = function(tree, withRoot, type) {
			if(type === void 0) {
				type = null;
			}
			return KSHelper.concatString("/", tree.type.__ks_func_hashCode_0(), "()=", tree.function.__ks_func_index_0());
		};
		toSignature3.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = KSType.isBoolean;
			const t2 = value => KSType.isString(value) || KSType.isNull(value);
			const t3 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 3) {
				if(t0(args[0])) {
					if(t1(args[1]) && t2(args[2])) {
						return toSignature3.__ks_0.call(that, args[0], args[1], args[2]);
					}
					throw KSHelper.badArgs();
				}
				if(t3(args[0]) && t1(args[1]) && t2(args[2])) {
					return toSignature3.__ks_1.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function isRegroupeableBranch2() {
			return isRegroupeableBranch2.__ks_rt(this, arguments);
		};
		isRegroupeableBranch2.__ks_0 = function(tree1, tree2) {
			for(let __ks_0 = 0, __ks_1 = tree2.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree2.order[__ks_0];
				if(tree2.columns[key].type.__ks_func_isAssignableToVariable_2(tree2.type, false, false, false)) {
					return false;
				}
				if(!KSType.isValue(tree1.columns[key])) {
					return false;
				}
				if(!(isRegroupeableBranch2(tree1.columns[key], tree2.columns[key]) === true)) {
					return false;
				}
			}
			return true;
		};
		isRegroupeableBranch2.__ks_1 = function(tree1, tree2, type) {
			for(let __ks_0 = 0, __ks_1 = tree1.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree1.order[__ks_0];
				if(key !== type) {
					if(!KSType.isValue(tree2.columns[key])) {
						return false;
					}
					if(!(isRegroupeableBranch2(tree1.columns[key], tree2.columns[key]) === true)) {
						return false;
					}
				}
			}
			return true;
		};
		isRegroupeableBranch2.__ks_2 = function(tree1, tree2, type) {
			for(let __ks_0 = 0, __ks_1 = tree1.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree1.order[__ks_0];
				if(key !== type) {
					return false;
				}
			}
			return true;
		};
		isRegroupeableBranch2.__ks_3 = function(tree1, tree2) {
			const val1 = tree1.type.__ks_func_hashCode_0();
			const val2 = tree2.type.__ks_func_hashCode_0();
			if(!(val1 === val2)) {
				return false;
			}
			return isRegroupeableBranch2(tree1, tree2.function.__ks_func_index_0());
		};
		isRegroupeableBranch2.__ks_4 = function(tree1, tree2) {
			return false;
		};
		isRegroupeableBranch2.__ks_5 = function(tree, __ks_function_1) {
			for(let __ks_0 = 0, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree.order[__ks_0];
				if(!(isRegroupeableBranch2(tree.columns[key], __ks_function_1) === true)) {
					return false;
				}
			}
			return true;
		};
		isRegroupeableBranch2.__ks_6 = function(tree, __ks_function_1) {
			return tree.function.__ks_func_index_0() === __ks_function_1;
		};
		isRegroupeableBranch2.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isStructInstance(value, TreeLeaf);
			const t3 = KSType.isString;
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return isRegroupeableBranch2.__ks_5.call(that, args[0], args[1]);
					}
					if(t0(args[1])) {
						return isRegroupeableBranch2.__ks_0.call(that, args[0], args[1]);
					}
					if(t2(args[1])) {
						return isRegroupeableBranch2.__ks_3.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t2(args[0])) {
					if(t1(args[1])) {
						return isRegroupeableBranch2.__ks_6.call(that, args[0], args[1]);
					}
					if(t0(args[1])) {
						return isRegroupeableBranch2.__ks_4.call(that, args[0], args[1]);
					}
					if(t2(args[1])) {
						return isRegroupeableBranch2.__ks_3.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 3) {
				if(t0(args[0])) {
					if(t0(args[1])) {
						if(t3(args[2])) {
							return isRegroupeableBranch2.__ks_1.call(that, args[0], args[1], args[2]);
						}
						throw KSHelper.badArgs();
					}
					if(t2(args[1]) && t3(args[2])) {
						return isRegroupeableBranch2.__ks_2.call(that, args[0], args[1], args[2]);
					}
					throw KSHelper.badArgs();
				}
			}
			throw KSHelper.badArgs();
		};
		function regroupBranch_ChildrenEqFunc_Flatten() {
			return regroupBranch_ChildrenEqFunc_Flatten.__ks_rt(this, arguments);
		};
		regroupBranch_ChildrenEqFunc_Flatten.__ks_0 = function(branch, node) {
			if(!(branch.order.length >= 2)) {
				return;
			}
			let first = branch.columns[branch.order[0]];
			let __ks_function_1 = getFunction.__ks_0(branch);
			if(KSType.isValue(__ks_function_1)) {
				const param2row = new Dictionary();
				for(const key in branch.parameters) {
					const parameter = branch.parameters[key];
					param2row[key] = parameter.rows;
				}
				for(const key in first.parameters) {
					const parameter = first.parameters[key];
					let rows = param2row[key];
					if(KSType.isValue(rows)) {
						for(let __ks_0 = 0, __ks_1 = parameter.rows.length, row; __ks_0 < __ks_1; ++__ks_0) {
							row = parameter.rows[__ks_0];
							if(!__ks_Array.__ks_func_contains_0.call(KSHelper.cast(rows, "Array", false, null, "Array"), row)) {
								return;
							}
						}
					}
				}
				const rows = [...first.rows];
				for(let __ks_0 = 1, __ks_1 = branch.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
					key = branch.order[__ks_0];
					const column = branch.columns[key];
					if(branch.type.__ks_func_isAssignableToVariable_2(column.type, false, true, false)) {
						return;
					}
					__ks_Array.__ks_func_pushUniq_0.call(rows, column.rows);
				}
				const column = buildBranchFromRows.__ks_0(rows, branch.index + 1, node);
				const type = column.type.__ks_func_hashCode_0();
				branch.columns = (() => {
					const d = new Dictionary();
					d[type] = column;
					return d;
				})();
				branch.order = [type];
			}
		};
		regroupBranch_ChildrenEqFunc_Flatten.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return regroupBranch_ChildrenEqFunc_Flatten.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function getFunction() {
			return getFunction.__ks_rt(this, arguments);
		};
		getFunction.__ks_0 = function(tree) {
			const __ks_function_1 = getFunction(tree.columns[tree.order[0]]);
			for(let __ks_0 = 1, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree.order[__ks_0];
				if(getFunction(tree.columns[key]) !== __ks_function_1) {
					return null;
				}
			}
			return __ks_function_1;
		};
		getFunction.__ks_1 = function(tree) {
			return tree.function;
		};
		getFunction.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 1) {
				if(t0(args[0])) {
					return getFunction.__ks_0.call(that, args[0]);
				}
				if(t1(args[0])) {
					return getFunction.__ks_1.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function applyMax2() {
			return applyMax2.__ks_rt(this, arguments);
		};
		applyMax2.__ks_0 = function(tree, maxs) {
			const setter = (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length >= 1 && args.length <= 2) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (node, value = null) => {
					if((value !== null) && KSOperator.gt(value, node.max)) {
						node.max = value;
					}
				};
				return __ks_rt;
			})();
			applyMinMax(tree, setter, maxs, [], []);
		};
		applyMax2.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return applyMax2.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function regroupBranch_SiblingsEqChildren() {
			return regroupBranch_SiblingsEqChildren.__ks_rt(this, arguments);
		};
		regroupBranch_SiblingsEqChildren.__ks_0 = function(branch) {
			for(let index = Math.min(branch.order.length - 1, branch.order.length - 2), __ks_0 = 0, type; index >= __ks_0; --index) {
				type = branch.order[index];
				const column = branch.columns[type];
				if((getForkHash2.__ks_0(branch, index + 1) === getForkHash2(column, 0)) && isSameParameter2.__ks_0(column, branch.columns[branch.order[index + 1]])) {
					column.min = 0;
					column.variadic = true;
					for(const type in column.columns) {
						const col = column.columns[type];
						col.max = branch.columns[type].max;
						delete branch.columns[type];
						__ks_Array.__ks_func_remove_0.call(branch.order, [type]);
					}
				}
			}
		};
		regroupBranch_SiblingsEqChildren.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			if(args.length === 1) {
				if(t0(args[0])) {
					return regroupBranch_SiblingsEqChildren.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function isSameParameter2() {
			return isSameParameter2.__ks_rt(this, arguments);
		};
		isSameParameter2.__ks_0 = function(branch, node) {
			for(const key in branch.parameters) {
				if(!KSType.isValue(node.parameters[key])) {
					return false;
				}
			}
			return true;
		};
		isSameParameter2.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch) || KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return isSameParameter2.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function regroupLeaf_SiblingsEq() {
			return regroupLeaf_SiblingsEq.__ks_rt(this, arguments);
		};
		regroupLeaf_SiblingsEq.__ks_0 = function(branch, node) {
			const groups = new Dictionary();
			for(let index = Math.min(branch.order.length - 1, branch.order.length - 2), __ks_0 = 0, type; index >= __ks_0; --index) {
				type = branch.order[index];
				const column = branch.columns[type];
				if(column.isNode) {
					continue;
				}
				const type2 = branch.order[index + 1];
				const column2 = branch.columns[type2];
				if(column2.isNode) {
					continue;
				}
				if(__ks_Array.__ks_sttc_same_0(Dictionary.keys(column.parameters), Dictionary.keys(column2.parameters))) {
					if(KSType.isValue(groups[index + 1])) {
						groups[index] = groups[index + 1];
						delete groups[index + 1];
						groups[index].unshift(type);
					}
					else {
						groups[index] = [type, type2];
					}
				}
			}
			if(groups.length !== 0) {
				const scope = node.__ks_func_scope_0();
				for(let __ks_0 in groups) {
					const group = groups[__ks_0];
					const column = branch.columns[group[0]];
					const type = Type.union(scope, ...KSHelper.mapArray(group, function(key) {
						return branch.columns[key].type;
					})).sort();
					for(let __ks_1 = 0, __ks_2 = group.length, key; __ks_1 < __ks_2; ++__ks_1) {
						key = group[__ks_1];
						delete branch.columns[key];
					}
					column.type = type;
					branch.columns[type.hashCode()] = column;
				}
				sortNodes2.__ks_0(branch);
			}
		};
		regroupLeaf_SiblingsEq.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree) || KSType.isStructInstance(value, TreeBranch);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return regroupLeaf_SiblingsEq.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function regroupTreeByIndex() {
			return regroupTreeByIndex.__ks_rt(this, arguments);
		};
		regroupTreeByIndex.__ks_0 = function(tree, node) {
			const groups = new Dictionary();
			for(const key in tree.columns) {
				const column = tree.columns[key];
				const hash = getIndexHash(column);
				let group = groups[hash];
				if(KSType.isValue(group)) {
					group.keys.push(key);
					group.columns.push(column);
				}
				else {
					groups[hash] = (() => {
						const d = new Dictionary();
						d.keys = [key];
						d.columns = [column];
						return d;
					})();
				}
			}
			const scope = node.__ks_func_scope_0();
			for(let __ks_0 in groups) {
				const group = groups[__ks_0];
				if(KSOperator.gt(group.columns.length, 1)) {
					for(let __ks_1 = 0, __ks_2 = group.keys.length, key; __ks_1 < __ks_2; ++__ks_1) {
						key = group.keys[__ks_1];
						delete tree.columns[key];
					}
					const type = Type.union(scope, ...KSHelper.mapArray(group.columns, function(column) {
						return column.type;
					})).sort();
					const column = group.columns[0];
					column.type = type;
					tree.columns[type.hashCode()] = column;
					sortNodes2.__ks_0(tree);
				}
			}
		};
		regroupTreeByIndex.__ks_1 = function(tree) {
		};
		regroupTreeByIndex.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeLeaf);
			const t1 = value => KSType.isStructInstance(value, Tree) || KSType.isStructInstance(value, TreeBranch);
			const t2 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 1) {
				if(t0(args[0])) {
					return regroupTreeByIndex.__ks_1.call(that, args[0]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 2) {
				if(t1(args[0]) && t2(args[1])) {
					return regroupTreeByIndex.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function getIndexHash() {
			return getIndexHash.__ks_rt(this, arguments);
		};
		getIndexHash.__ks_0 = function(tree) {
			if((tree.type.__ks_func_isAny_0() === true) && (tree.type.__ks_func_isNullable_0() === true)) {
				return "";
			}
			else {
				return KSHelper.concatString(":", tree.index, Dictionary.keys(tree.parameters).join(":"), ":", tree.variadic, ":", tree.min, ":", tree.max, ";");
			}
		};
		getIndexHash.__ks_1 = function(tree) {
			let hash = "";
			for(let __ks_0 in tree.columns) {
				const column = tree.columns[__ks_0];
				hash = KSHelper.concatString(hash, getIndexHash(column));
			}
			return hash;
		};
		getIndexHash.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 1) {
				if(t0(args[0])) {
					return getIndexHash.__ks_1.call(that, args[0]);
				}
				if(t1(args[0])) {
					return getIndexHash.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function resolveBackTracing() {
			return resolveBackTracing.__ks_rt(this, arguments);
		};
		resolveBackTracing.__ks_0 = function(tree, max) {
			if(tree.type.__ks_func_hashCode_0() !== "Any?") {
				const backtracing = [];
				let column = getBackTracing.__ks_0(tree, backtracing);
				if(KSType.isValue(column)) {
					for(let __ks_0 in column.columns) {
						const __ks_column_1 = column.columns[__ks_0];
						applyBackTracking(__ks_column_1, max, backtracing);
					}
				}
			}
		};
		resolveBackTracing.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = KSType.isNumber;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return resolveBackTracing.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function getBackTracing() {
			return getBackTracing.__ks_rt(this, arguments);
		};
		getBackTracing.__ks_0 = function(tree, backtracing, __ks_default_1 = null) {
			let column = tree.columns["Any?"];
			if(KSType.isValue(column)) {
				const index = KSOperator.addOrConcat(tree.order.indexOf("Any?"), 1);
				for(let __ks_0 = index, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
					key = tree.order[__ks_0];
					const column = tree.columns[key];
					backtracing.push((() => {
						const d = new Dictionary();
						d.index = column.index;
						d.type = column.type;
						d.rows = column.rows.map((() => {
							const __ks_rt = (...args) => {
								const t0 = KSType.isDestructurableObject;
								const t1 = KSType.isValue;
								if(args.length === 3) {
									if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
										return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
									}
								}
								throw KSHelper.badArgs();
							};
							__ks_rt.__ks_0 = ({key}, __ks_0, __ks_1) => {
								return key;
							};
							return __ks_rt;
						})());
						return d;
					})());
					delete tree.columns[key];
				}
				tree.order.splice(index);
				if(column.isNode) {
					return getBackTracing(column, backtracing, column);
				}
				else {
					return column;
				}
			}
			else {
				return __ks_default_1;
			}
		};
		getBackTracing.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = KSType.isArray;
			const t2 = value => KSType.isStructInstance(value, TreeBranch) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t1(args[1]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && te(pts, 1)) {
					return getBackTracing.__ks_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		};
		function applyBackTracking() {
			return applyBackTracking.__ks_rt(this, arguments);
		};
		applyBackTracking.__ks_0 = function(tree, max, backtracing) {
			const unmatched = [];
			for(let __ks_0 = 0, __ks_1 = backtracing.length, trace; __ks_0 < __ks_1; ++__ks_0) {
				trace = backtracing[__ks_0];
				if(tree.rows.every((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isDestructurableObject;
						const t1 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = ({key}, __ks_0, __ks_1) => {
						return trace.rows.includes(key);
					};
					return __ks_rt;
				})()) === true) {
					tree.backtracks.push(BackTrack(trace.index, trace.type));
				}
				else {
					unmatched.push(trace);
				}
			}
			if(unmatched.length !== 0) {
				for(let __ks_0 in tree.columns) {
					const column = tree.columns[__ks_0];
					applyBackTracking(column, max, unmatched);
				}
			}
		};
		applyBackTracking.__ks_1 = function(tree, max, backtracing) {
			for(let __ks_0 = 0, __ks_1 = backtracing.length, index, type, rows; __ks_0 < __ks_1; ++__ks_0) {
				({index, type, rows} = backtracing[__ks_0]);
				if(tree.rows.every((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isDestructurableObject;
						const t1 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = ({key}, __ks_0, __ks_1) => {
						return rows.includes(key);
					};
					return __ks_rt;
				})()) === true) {
					let shift = false;
					if(tree.index >= 0) {
						shift = KSOperator.subtraction(tree.index, index) === 1;
					}
					else {
						shift = KSOperator.subtraction(max + tree.index, index) === 1;
					}
					if(shift) {
						tree.index = index;
						tree.min++;
						tree.max++;
					}
					else {
						tree.backtracks.push(BackTrack(index, type));
					}
				}
			}
		};
		applyBackTracking.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = KSType.isNumber;
			const t2 = KSType.isArray;
			const t3 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 3) {
				if(t0(args[0])) {
					if(t1(args[1]) && t2(args[2])) {
						return applyBackTracking.__ks_0.call(that, args[0], args[1], args[2]);
					}
					throw KSHelper.badArgs();
				}
				if(t3(args[0]) && t1(args[1]) && t2(args[2])) {
					return applyBackTracking.__ks_1.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function sortNodes2() {
			return sortNodes2.__ks_rt(this, arguments);
		};
		sortNodes2.__ks_0 = function(tree) {
			const items = [];
			for(const key in tree.columns) {
				const node = tree.columns[key];
				items.push((() => {
					const d = new Dictionary();
					d.key = key;
					d.node = node;
					d.type = node.type;
					d.usage = (node.isNode === true) ? KSHelper.cast(node, "TreeBranch", false, TreeBranch, "Struct").rows.length : 1;
					d.children = [];
					d.isAny = (node.type.isAny() === true) || (node.type.isNull() === true);
					d.variadic = KSOperator.lt(node.index, 0) || (node.variadic === true);
					d.alternative = node.rows.every((() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isDestructurableObject;
							const t1 = KSType.isValue;
							if(args.length === 3) {
								if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = ({alternative}, __ks_0, __ks_1) => {
							return alternative;
						};
						return __ks_rt;
					})());
					return d;
				})());
			}
			if(items.length === 1) {
				tree.order = [items[0].key];
				return;
			}
			for(let __ks_0 = 0, __ks_1 = items.length, node; __ks_0 < __ks_1; ++__ks_0) {
				node = items[__ks_0];
				if(node.alternative === true) {
					for(let __ks_2 = 0, __ks_3 = items.length, item; __ks_2 < __ks_3; ++__ks_2) {
						item = items[__ks_2];
						if(item !== node) {
							if(!(item.alternative === true) || (item.type.isAssignableToVariable(node.type, true, true, false) === true)) {
								node.children.push(item);
							}
						}
					}
				}
				else if(node.isAny === true) {
					for(let __ks_2 = 0, __ks_3 = items.length, item; __ks_2 < __ks_3; ++__ks_2) {
						item = items[__ks_2];
						if(item !== node) {
							if(!(item.isAny === true)) {
								node.children.push(item);
							}
						}
					}
				}
				else {
					for(let __ks_2 = 0, __ks_3 = items.length, item; __ks_2 < __ks_3; ++__ks_2) {
						item = items[__ks_2];
						if(item !== node) {
							if(!(item.isAny === true) && (item.type.isAssignableToVariable(node.type, true, true, false) === true)) {
								node.children.push(item);
							}
						}
					}
				}
			}
			const equivalences = [];
			__ks_Array.__ks_func_sort_0.call(items, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (a, b) => {
					if(__ks_Array.__ks_func_contains_0.call(KSHelper.cast(a.children, "Array", false, null, "Array"), b)) {
						return 1;
					}
					if(__ks_Array.__ks_func_contains_0.call(KSHelper.cast(b.children, "Array", false, null, "Array"), a)) {
						return -1;
					}
					const d = KSOperator.subtraction(b.usage, a.usage);
					if(d === 0) {
						return a.type.compareToRef(b.type, equivalences);
					}
					else {
						return d;
					}
				};
				return __ks_rt;
			})());
			tree.order = KSHelper.mapArray(items, function(item) {
				return item.key;
			});
			if(equivalences.length !== 0) {
				tree.equivalences = equivalences;
			}
		};
		sortNodes2.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return sortNodes2.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function isSameFunction() {
			return isSameFunction.__ks_rt(this, arguments);
		};
		isSameFunction.__ks_0 = function(nodes) {
			const __ks_function_1 = nodes[0].rows[0].function;
			for(let __ks_0 = 0, __ks_1 = nodes.length, node; __ks_0 < __ks_1; ++__ks_0) {
				node = nodes[__ks_0];
				if(!(node.rows.every((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (row, __ks_0, __ks_1) => {
						return row.function === __ks_function_1;
					};
					return __ks_rt;
				})()) === true)) {
					return false;
				}
			}
			return true;
		};
		isSameFunction.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeNode);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(KSHelper.isVarargs(args, 0, args.length, t0, pts = [0], 0) && te(pts, 1)) {
				return isSameFunction.__ks_0.call(that, KSHelper.getVarargs(args, 0, pts[1]));
			}
			throw KSHelper.badArgs();
		};
		function isSameFork() {
			return isSameFork.__ks_rt(this, arguments);
		};
		isSameFork.__ks_0 = function(branch, column) {
			return (branch.type === column.type) && (isSameParameter([branch, column], column) === true);
		};
		isSameFork.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = value => KSType.isStructInstance(value, TreeNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return isSameFork.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function isSameParameter() {
			return isSameParameter.__ks_rt(this, arguments);
		};
		isSameParameter.__ks_0 = function(__ks_arguments_1, tree) {
			for(let __ks_0 in tree.columns) {
				const column = tree.columns[__ks_0];
				if(!(isSameParameter(__ks_arguments_1, column) === true)) {
					return false;
				}
			}
			return true;
		};
		isSameParameter.__ks_1 = function(__ks_arguments_1, tree) {
			const map = new Dictionary();
			for(let __ks_0 = 0, __ks_1 = tree.rows[0].types.length, index, parameter; __ks_0 < __ks_1; ++__ks_0) {
				({index, parameter} = tree.rows[0].types[__ks_0]);
				map[index] = parameter;
			}
			const parameter = map[__ks_arguments_1[0].index];
			for(let __ks_0 = 0, __ks_1 = __ks_arguments_1.length, index; __ks_0 < __ks_1; ++__ks_0) {
				({index} = __ks_arguments_1[__ks_0]);
				if(map[index] !== parameter) {
					return false;
				}
			}
			return true;
		};
		isSameParameter.__ks_rt = function(that, args) {
			const t0 = value => KSType.isArray(value, value => KSType.isStructInstance(value, TreeNode));
			const t1 = value => KSType.isStructInstance(value, TreeBranch);
			const t2 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return isSameParameter.__ks_0.call(that, args[0], args[1]);
					}
					if(t2(args[1])) {
						return isSameParameter.__ks_1.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
			}
			throw KSHelper.badArgs();
		};
		function getFunctions() {
			return getFunctions.__ks_rt(this, arguments);
		};
		getFunctions.__ks_0 = function(tree) {
			return tree.rows.map((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 3) {
						if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (row, __ks_0, __ks_1) => {
					return row.function.index();
				};
				return __ks_rt;
			})()).sort((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (a, b) => {
					return KSOperator.subtraction(b, a);
				};
				return __ks_rt;
			})());
		};
		getFunctions.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch) || KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 1) {
				if(t0(args[0])) {
					return getFunctions.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function regroupBranch_TopForkEqLastChild() {
			return regroupBranch_TopForkEqLastChild.__ks_rt(this, arguments);
		};
		regroupBranch_TopForkEqLastChild.__ks_0 = function(branch) {
			if(!(branch.order.length === 2)) {
				return;
			}
			const first = branch.columns[branch.order[0]];
			const last = branch.columns[branch.order[1]];
			if(!__ks_Array.__ks_sttc_same_0(getFunctions.__ks_0(first), getFunctions.__ks_0(last))) {
				return;
			}
			let type = null;
			let node = null;
			if(isSameFork(branch, last) === true) {
				if(last.type.__ks_func_isAssignableToVariable_0(first.type)) {
					return;
				}
				if(!(getParameterHash(first, getParameterHash(branch, [], false), true).join(":").startsWith(getParameterHash(last, [], true).join(":")) === true)) {
					return;
				}
				type = branch.order.pop();
				node = last;
			}
			else if(isSameFork(branch, first) === true) {
				if(first.type.__ks_func_isAssignableToVariable_0(last.type)) {
					return;
				}
				if(!(getParameterHash(last, getParameterHash(branch, [], false), true).join(":").startsWith(getParameterHash(first, [], true).join(":")) === true)) {
					return;
				}
				type = branch.order.shift();
				node = first;
			}
			else {
				return;
			}
			delete branch.columns[type];
			branch.rest = node.rest;
			branch.variadic = node.variadic;
			branch.max += node.max;
			const min = buildMin.__ks_0(node);
			applyMin(branch, min);
		};
		regroupBranch_TopForkEqLastChild.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree) || KSType.isStructInstance(value, TreeBranch);
			if(args.length === 1) {
				if(t0(args[0])) {
					return regroupBranch_TopForkEqLastChild.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function getForkHash() {
			return getForkHash.__ks_rt(this, arguments);
		};
		getForkHash.__ks_0 = function(tree, index, from) {
			if(index === void 0 || index === null) {
				index = 0;
			}
			if(from === void 0 || from === null) {
				from = index + 1;
			}
			let hash = "";
			if((index + 1) === from) {
				hash += ":" + tree.order[index];
			}
			for(let index = from, __ks_0 = tree.order.length, key; index < __ks_0; ++index) {
				key = tree.order[index];
				hash = KSHelper.concatString(hash, getForkHash(tree.columns[key], 0, 0));
			}
			return hash;
		};
		getForkHash.__ks_1 = function(tree, index = null, from = null) {
			return KSHelper.concatString(":", tree.function.__ks_func_index_0(), ".", tree.rows[0].types.filter((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isDestructurableObject;
					const t1 = KSType.isValue;
					if(args.length === 3) {
						if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = ({index}, __ks_0, __ks_1) => {
					return index === tree.index;
				};
				return __ks_rt;
			})())[0].parameter, ".", tree.type.__ks_func_hashCode_0());
		};
		getForkHash.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeLeaf);
			const t1 = value => KSType.isStructInstance(value, Tree) || KSType.isStructInstance(value, TreeBranch);
			const t2 = value => KSType.isNumber(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length === 1) {
				if(t0(args[0])) {
					return getForkHash.__ks_1.call(that, args[0], void 0, void 0);
				}
				if(t1(args[0])) {
					return getForkHash.__ks_0.call(that, args[0], void 0, void 0);
				}
				throw KSHelper.badArgs();
			}
			if(args.length >= 2 && args.length <= 3) {
				if(t1(args[0])) {
					if(t2(args[1]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && te(pts, 1)) {
						return getForkHash.__ks_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
					}
					throw KSHelper.badArgs();
				}
				if(t0(args[0]) && t2(args[1]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && te(pts, 1)) {
					return getForkHash.__ks_1.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		};
		function getForkHash2() {
			return getForkHash2.__ks_rt(this, arguments);
		};
		getForkHash2.__ks_0 = function(tree, index) {
			const hashes = [];
			for(let __ks_0 = index, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree.order[__ks_0];
				getParameterHash(tree.columns[key], hashes, true);
			}
			return hashes.join(";");
		};
		getForkHash2.__ks_1 = function(tree, index) {
			const hashes = getParameterHash.__ks_0(tree, [], true);
			return hashes.join(";");
		};
		getForkHash2.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return getForkHash2.__ks_0.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t2(args[0]) && t1(args[1])) {
					return getForkHash2.__ks_1.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function getParameterHash() {
			return getParameterHash.__ks_rt(this, arguments);
		};
		getParameterHash.__ks_0 = function(tree, hashes, __ks_0) {
			for(const key in tree.parameters) {
				__ks_Array.__ks_func_pushUniq_0.call(hashes, [key + ":" + tree.type.__ks_func_hashCode_0()]);
			}
			return hashes;
		};
		getParameterHash.__ks_1 = function(tree, hashes, all) {
			for(const key in tree.parameters) {
				__ks_Array.__ks_func_pushUniq_0.call(hashes, [key + ":" + tree.type.__ks_func_hashCode_0()]);
			}
			if(all) {
				for(let __ks_0 = 0, __ks_1 = tree.order.length, hash; __ks_0 < __ks_1; ++__ks_0) {
					hash = tree.order[__ks_0];
					getParameterHash(tree.columns[hash], hashes, all);
				}
			}
			return hashes;
		};
		getParameterHash.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = KSType.isArray;
			const t2 = KSType.isBoolean;
			const t3 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 3) {
				if(t0(args[0])) {
					if(t1(args[1]) && t2(args[2])) {
						return getParameterHash.__ks_1.call(that, args[0], args[1], args[2]);
					}
					throw KSHelper.badArgs();
				}
				if(t3(args[0]) && t1(args[1]) && t2(args[2])) {
					return getParameterHash.__ks_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function buildMax() {
			return buildMax.__ks_rt(this, arguments);
		};
		buildMax.__ks_0 = function(tree) {
			const result = [];
			buildMinMax(tree, "max", result, [], []);
			return result;
		};
		buildMax.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch) || KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 1) {
				if(t0(args[0])) {
					return buildMax.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function buildMin() {
			return buildMin.__ks_rt(this, arguments);
		};
		buildMin.__ks_0 = function(tree) {
			const result = [];
			buildMinMax(tree, "min", result, [], []);
			return result;
		};
		buildMin.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch) || KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 1) {
				if(t0(args[0])) {
					return buildMin.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function buildMinMax() {
			return buildMinMax.__ks_rt(this, arguments);
		};
		buildMinMax.__ks_0 = function(tree, property, result, nodes, ancestors) {
			nodes.push(tree);
			buildMinMax(tree.columns[tree.order[0]], property, result, nodes, ancestors);
			ancestors.pop();
			for(let __ks_0 = 1, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree.order[__ks_0];
				buildMinMax(tree.columns[key], property, result, [], ancestors);
			}
		};
		buildMinMax.__ks_1 = function(tree, property, result, nodes, ancestors) {
			const values = new Dictionary();
			const row = tree.rows[0];
			const __ks_function_1 = row.function.__ks_func_index_0();
			nodes.push(tree);
			const newAncestors = [];
			for(let __ks_0 = 0, __ks_1 = nodes.length, node; __ks_0 < __ks_1; ++__ks_0) {
				node = nodes[__ks_0];
				const type = row.types.find((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isDestructurableObject;
						const t1 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = ({index}, __ks_0, __ks_1) => {
						return index === node.index;
					};
					return __ks_rt;
				})());
				if(!KSType.isValue(type)) {
					continue;
				}
				if((result.length === 0) || (ancestors.length === 0)) {
					let m = values[type.parameter];
					if(KSType.isValue(m)) {
						m.push(node[property]);
					}
					else {
						values[type.parameter] = [node[property]];
					}
				}
				else {
					let m = values[type.parameter];
					if(KSType.isValue(m)) {
						m.push([...ancestors, node[property]]);
					}
					else {
						values[type.parameter] = [[...ancestors, node[property]]];
					}
				}
				newAncestors.push(KSHelper.concatString(__ks_function_1, ".", type.parameter));
			}
			__ks_Array.__ks_func_clear_0.call(ancestors);
			__ks_Array.__ks_func_pushUniq_0.call(ancestors, newAncestors);
			result.push(values);
		};
		buildMinMax.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = KSType.isString;
			const t2 = KSType.isArray;
			const t3 = value => KSType.isArray(value, value => KSType.isStructInstance(value, TreeBranch));
			const t4 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 5) {
				if(t0(args[0])) {
					if(t1(args[1]) && t2(args[2]) && t3(args[3]) && t2(args[4])) {
						return buildMinMax.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
					throw KSHelper.badArgs();
				}
				if(t4(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t2(args[4])) {
					return buildMinMax.__ks_1.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		};
		function applyMax() {
			return applyMax.__ks_rt(this, arguments);
		};
		applyMax.__ks_0 = function(tree, data) {
			const setter = (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length >= 1 && args.length <= 2) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (node, value = null) => {
					if(value !== null) {
						node.max = value;
					}
				};
				return __ks_rt;
			})();
			applyMinMax(tree, setter, data, [], []);
		};
		applyMax.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch) || KSType.isStructInstance(value, TreeLeaf);
			const t1 = KSType.isArray;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return applyMax.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function applyMin() {
			return applyMin.__ks_rt(this, arguments);
		};
		applyMin.__ks_0 = function(tree, data) {
			const setter = (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length >= 1 && args.length <= 2) {
						if(t0(args[0])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (node, value = null) => {
					if(value !== null) {
						node.min = value;
					}
					else {
						node.min = 0;
					}
				};
				return __ks_rt;
			})();
			applyMinMax(tree, setter, data, [], []);
		};
		applyMin.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch) || KSType.isStructInstance(value, TreeLeaf);
			const t1 = KSType.isArray;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return applyMin.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function applyMinMax() {
			return applyMinMax.__ks_rt(this, arguments);
		};
		applyMinMax.__ks_0 = function(tree, setter, data, nodes, ancestors) {
			nodes.push(tree);
			applyMinMax(tree.columns[tree.order[0]], setter, data, nodes, ancestors);
			ancestors.pop();
			for(let __ks_0 = 1, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree.order[__ks_0];
				applyMinMax(tree.columns[key], setter, data, [], ancestors);
			}
		};
		applyMinMax.__ks_1 = function(tree, setter, data, nodes, ancestors) {
			const values = data.shift();
			const row = tree.rows[0];
			const __ks_function_1 = row.function.__ks_func_index_0();
			nodes.push(tree);
			for(let __ks_0 = 0, __ks_1 = nodes.length, node; __ks_0 < __ks_1; ++__ks_0) {
				node = nodes[__ks_0];
				const parameters = KSHelper.mapDictionary(node.parameters, function(__ks_0, parameter) {
					return parameter;
				}, function(__ks_0, parameter) {
					return parameter.function === row.function;
				});
				const type = row.types.find((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isDestructurableObject;
						const t1 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = ({parameter}, __ks_0, __ks_1) => {
						return parameter === parameters[0].parameter;
					};
					return __ks_rt;
				})());
				if(!KSType.isValue(type)) {
					continue;
				}
				ancestors.push(KSHelper.concatString(__ks_function_1, ".", type.parameter));
				let m = KSType.isValue(values) ? values[type.parameter] : null;
				if(KSType.isValue(m)) {
					let value = m.shift();
					if(KSType.isValue(value)) {
						if(KSType.isArray(value)) {
							const m = value.pop();
							if(value.every((() => {
								const __ks_rt = (...args) => {
									const t0 = KSType.isValue;
									if(args.length === 3) {
										if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
											return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
										}
									}
									throw KSHelper.badArgs();
								};
								__ks_rt.__ks_0 = (m, __ks_0, __ks_1) => {
									return __ks_Array.__ks_func_contains_0.call(ancestors, m);
								};
								return __ks_rt;
							})()) === true) {
								setter(node, m);
							}
						}
						else {
							setter(node, value);
						}
					}
					else {
						setter(node);
					}
				}
				else {
					setter(node);
				}
			}
		};
		applyMinMax.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = KSType.isFunction;
			const t2 = KSType.isArray;
			const t3 = value => KSType.isArray(value, value => KSType.isStructInstance(value, TreeBranch));
			const t4 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 5) {
				if(t0(args[0])) {
					if(t1(args[1]) && t2(args[2]) && t3(args[3]) && t2(args[4])) {
						return applyMinMax.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
					throw KSHelper.badArgs();
				}
				if(t4(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t2(args[4])) {
					return applyMinMax.__ks_1.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		};
		function regroupBranch_ChildrenEqFunc() {
			return regroupBranch_ChildrenEqFunc.__ks_rt(this, arguments);
		};
		regroupBranch_ChildrenEqFunc.__ks_0 = function(branch, node) {
			if(!(isRegroupeableBranch(branch, node) === true)) {
				return;
			}
			const groups = new Dictionary();
			for(let __ks_0 = 0, __ks_1 = branch.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = branch.order[__ks_0];
				const column = branch.columns[key];
				const functions = column.rows.map((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isDestructurableObject;
						const t1 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = ({function: __ks_function_1}, __ks_0, __ks_1) => {
						return __ks_function_1.index();
					};
					return __ks_rt;
				})()).filter((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (value, index, array) => {
						return array.indexOf(value) === index;
					};
					return __ks_rt;
				})()).sort((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (a, b) => {
						return KSOperator.subtraction(a, b);
					};
					return __ks_rt;
				})());
				if(KSOperator.gt(functions.length, 1)) {
					continue;
				}
				const __ks_function_1 = functions[0];
				let group = groups[__ks_function_1];
				if(KSType.isValue(group)) {
					group.push(key);
				}
				else {
					groups[__ks_function_1] = [key];
				}
			}
			let reorder = false;
			for(let __ks_0 in groups) {
				const group = groups[__ks_0];
				if(KSOperator.gt(group.length, 1)) {
					if(hasShadow(branch, group)) {
						continue;
					}
					const rows = [];
					for(let __ks_1 = 0, __ks_2 = group.length, key; __ks_1 < __ks_2; ++__ks_1) {
						key = group[__ks_1];
						rows.push(...branch.columns[key].rows);
					}
					const column = buildBranchFromRows.__ks_0(rows, branch.index + 1, node);
					for(let __ks_1 = 0, __ks_2 = group.length, key; __ks_1 < __ks_2; ++__ks_1) {
						key = group[__ks_1];
						delete branch.columns[key];
					}
					branch.columns[column.type.__ks_func_hashCode_0()] = column;
					reorder = true;
				}
			}
			if(reorder) {
				sortNodes2.__ks_0(branch);
			}
		};
		regroupBranch_ChildrenEqFunc.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree) || KSType.isStructInstance(value, TreeBranch);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return regroupBranch_ChildrenEqFunc.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function hasShadow() {
			return hasShadow.__ks_rt(this, arguments);
		};
		hasShadow.__ks_0 = function(branch, group) {
			for(let index = 0, __ks_0 = group.length, key; index < __ks_0; ++index) {
				key = group[index];
				const type = branch.columns[key].type;
				for(let i = index + 1, __ks_1 = group.length, k; i < __ks_1; ++i) {
					k = group[i];
					const t = branch.columns[k].type;
					if(t.__ks_func_isAssignableToVariable_2(type, false, true, true)) {
						return true;
					}
				}
			}
			return false;
		};
		hasShadow.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree) || KSType.isStructInstance(value, TreeBranch);
			const t1 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return hasShadow.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function buildBranchFromRows() {
			return buildBranchFromRows.__ks_rt(this, arguments);
		};
		buildBranchFromRows.__ks_0 = function(rows, pIndex, node) {
			const scope = node.__ks_func_scope_0();
			const parameters = new Dictionary();
			const keys = [];
			for(let i = 0, __ks_0 = rows.length, row; i < __ks_0; ++i) {
				row = rows[i];
				const params = new Dictionary();
				for(let __ks_1 = 0, __ks_2 = row.types.length, type; __ks_1 < __ks_2; ++__ks_1) {
					type = row.types[__ks_1];
					if(KSOperator.gte(type.index, pIndex) || (type.index === -1)) {
						let param = params[type.parameter];
						if(KSType.isValue(param)) {
							param.max++;
							if(!(type.type.isAssignableToVariable(param.type, true, false, false) === true)) {
								param.type = Type.union(scope, param.type, type.type).sort();
							}
						}
						else {
							params[type.parameter] = (() => {
								const d = new Dictionary();
								d.type = type.type;
								d.min = 1;
								d.max = 1;
								d.rest = type.rest;
								return d;
							})();
						}
					}
				}
				for(const key in parameters) {
					const parameter = parameters[key];
					let param = params[key];
					if(KSType.isValue(param)) {
						if(!(param.type.isAssignableToVariable(parameter.type, true, false, false) === true)) {
							parameter.type = Type.union(scope, parameter.type, param.type).sort();
						}
						parameter.min = Math.min(parameter.min, param.min);
						parameter.max = Math.max(parameter.max, param.max);
						delete params[key];
					}
					else {
						parameter.min = 0;
					}
				}
				for(const key in params) {
					const parameter = params[key];
					parameters[key] = parameter;
					if(i !== 0) {
						parameter.min = 0;
					}
					keys.push(parseInt(key));
				}
			}
			const row = KSHelper.concatDictionary(__ks_Array.__ks_func_last_0.call(rows));
			row.types = row.types.filter((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isDestructurableObject;
					const t1 = KSType.isValue;
					if(args.length === 3) {
						if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = ({index}, __ks_0, __ks_1) => {
					return KSOperator.gt(pIndex, index) && KSOperator.gte(index, 0);
				};
				return __ks_rt;
			})());
			const lastParameter = keys.length - 1;
			let branch = null;
			let result = null;
			let index = pIndex;
			for(let i = 0, __ks_0 = __ks_Array.__ks_func_sort_0.call(keys, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (a, b) => {
					return KSOperator.subtraction(a, b);
				};
				return __ks_rt;
			})()), __ks_1 = __ks_0.length, parameter; i < __ks_1; ++i) {
				parameter = __ks_0[i];
				const {type, min, max, rest} = parameters[parameter];
				const hash = type.hashCode();
				const key = KSHelper.concatString(":", row.function.index(), ":", parameter);
				row.types.push(RowType(index, type, rest, parameter));
				if(i === lastParameter) {
					const leaf = TreeLeaf(index, type, rest, (rest === true) || (min !== max), min, max, (() => {
						const d = new Dictionary();
						d[key] = TreeParameter(key, row.function, parameter, [row.key]);
						return d;
					})(), false, void 0, [row], void 0, row.function, []);
					if(result === null) {
						result = leaf;
					}
					else {
						branch.columns[hash] = leaf;
						sortNodes2(branch);
					}
				}
				else if(i === 0) {
					branch = TreeBranch(index, type, rest, true, min, max, (() => {
						const d = new Dictionary();
						d[key] = TreeParameter(key, row.function, parameter, [row.key]);
						return d;
					})(), true, void 0, [row], void 0, new Dictionary());
					index++;
					result = branch;
				}
				else {
					branch.columns[hash] = TreeBranch(index, type, rest, (rest === true) || (min !== max), min, max, (() => {
						const d = new Dictionary();
						d[key] = TreeParameter(key, row.function, parameter, [row.key]);
						return d;
					})(), true, void 0, [row], void 0, new Dictionary());
					sortNodes2(branch);
					branch = branch.columns[hash];
					index++;
				}
			}
			return result;
		};
		buildBranchFromRows.__ks_rt = function(that, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return buildBranchFromRows.__ks_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function isRegroupeableBranch() {
			return isRegroupeableBranch.__ks_rt(this, arguments);
		};
		isRegroupeableBranch.__ks_0 = function(branch, node) {
			if(!(branch.order.length > 1)) {
				return false;
			}
			if(__ks_Dictionary.__ks_sttc_length_0(branch.parameters) > 1) {
				let column = branch.columns[branch.type.__ks_func_hashCode_0()];
				if(KSType.isValue(column)) {
					for(const key in column.parameters) {
						if(KSType.isValue(branch.parameters[key])) {
							return false;
						}
					}
				}
			}
			const __ks_arguments_1 = new Dictionary();
			for(let __ks_0 = 0, __ks_1 = branch.rows.length, row; __ks_0 < __ks_1; ++__ks_0) {
				row = branch.rows[__ks_0];
				const fnIndex = row.function.__ks_func_index_0();
				const fnArguments = KSType.isValue(__ks_arguments_1[fnIndex]) ? __ks_arguments_1[fnIndex] : __ks_arguments_1[fnIndex] = (() => {
					const d = new Dictionary();
					d.function = row.function;
					d.args = new Dictionary();
					return d;
				})();
				for(let __ks_2 = 0, __ks_3 = row.types.length, type; __ks_2 < __ks_3; ++__ks_2) {
					type = row.types[__ks_2];
					if(type.index > branch.index) {
						let types = fnArguments.args[type.index];
						if(KSType.isValue(types)) {
							if(!(types.some((() => {
								const __ks_rt = (...args) => {
									const t0 = KSType.isValue;
									if(args.length === 3) {
										if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
											return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
										}
									}
									throw KSHelper.badArgs();
								};
								__ks_rt.__ks_0 = (b, __ks_0, __ks_1) => {
									return (type.index === b.index) && (type.parameter === b.parameter) && (type.type.__ks_func_hashCode_0() === b.type.hashCode());
								};
								return __ks_rt;
							})()) === true)) {
								types.push(type);
							}
						}
						else {
							fnArguments.args[type.index] = [type];
						}
					}
				}
			}
			let regroupeable = false;
			for(let __ks_0 in __ks_arguments_1) {
				const {function: __ks_function_1, args} = __ks_arguments_1[__ks_0];
				let parameters = __ks_function_1.parameters();
				if(__ks_function_1.isAsync() === true) {
					const scope = node.__ks_func_scope_0();
					parameters = [...parameters, new ParameterType(scope, scope.reference("Function"))];
				}
				for(let __ks_1 in args) {
					const types = args[__ks_1];
					if(KSOperator.gt(types.length, 1)) {
						regroupeable = true;
						types.sort((() => {
							const __ks_rt = (...args) => {
								const t0 = KSType.isValue;
								if(args.length === 2) {
									if(t0(args[0]) && t0(args[1])) {
										return __ks_rt.__ks_0.call(this, args[0], args[1]);
									}
								}
								throw KSHelper.badArgs();
							};
							__ks_rt.__ks_0 = (a, b) => {
								return KSOperator.subtraction(a.parameter, b.parameter);
							};
							return __ks_rt;
						})());
						for(let index = 0, __ks_2 = types.length - 1, type, parameter; index < __ks_2; ++index) {
							({type, parameter} = types[index]);
							const nextType = types[index + 1].type;
							if((type.hashCode() !== nextType.hashCode()) && (nextType.isAssignableToVariable(type, false, false, true) === true)) {
								const param = parameters[parameter];
								if((param.isVarargs() === true) || (param.min() === 0)) {
									return false;
								}
							}
						}
					}
				}
			}
			return regroupeable;
		};
		isRegroupeableBranch.__ks_1 = function(branch, node) {
			return false;
		};
		isRegroupeableBranch.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			const t2 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 2) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						return isRegroupeableBranch.__ks_0.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t2(args[0]) && t1(args[1])) {
					return isRegroupeableBranch.__ks_1.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function isFlattenable() {
			return isFlattenable.__ks_rt(this, arguments);
		};
		isFlattenable.__ks_0 = function(group, excludes, node) {
			if(excludes === void 0) {
				excludes = null;
			}
			if(!(group.functions.length === 1)) {
				return false;
			}
			const __ks_function_1 = group.functions[0];
			let parameters = __ks_function_1.__ks_func_parameters_1(excludes);
			if(__ks_function_1.__ks_func_isAsync_0()) {
				const scope = node.__ks_func_scope_0();
				parameters = [...parameters, new ParameterType(scope, scope.reference("Function"))];
			}
			let count = 0;
			for(let __ks_0 = 0, __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = parameters[__ks_0];
				if((parameter.__ks_func_isVarargs_0() === true) || (parameter.__ks_func_min_2() === 0)) {
					++count;
				}
			}
			if(!(count > 1)) {
				return true;
			}
			for(let index = 0, __ks_0 = parameters.length - 1, parameter; index < __ks_0; ++index) {
				parameter = parameters[index];
				const nextParameter = parameters[index + 1];
				const currType = parameters[index].__ks_func_type_0();
				const nextType = nextParameter.__ks_func_type_0();
				if((((parameter.__ks_func_isVarargs_0() === true) || (parameter.__ks_func_min_2() === 0)) && (nextType.isAssignableToVariable(currType, false, true, false) === true)) || ((parameter.__ks_func_min_2() === 0) && (nextParameter.__ks_func_min_2() !== 0) && (currType.isNullable() === true) && (nextParameter.__ks_func_hasDefaultValue_1() === true))) {
					return false;
				}
			}
			return true;
		};
		isFlattenable.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Group);
			const t1 = value => KSType.isArray(value, KSType.isString) || KSType.isNull(value);
			const t2 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return isFlattenable.__ks_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function regroupBranch_Children_ForkAlike_SiblingsEq() {
			return regroupBranch_Children_ForkAlike_SiblingsEq.__ks_rt(this, arguments);
		};
		regroupBranch_Children_ForkAlike_SiblingsEq.__ks_0 = function(branch, node) {
			if(!(branch.order.length > 1)) {
				return;
			}
			const groups = new Dictionary();
			for(let __ks_0 = 0, __ks_1 = branch.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = branch.order[__ks_0];
				const column = branch.columns[key];
				let hash = null;
				if(column.node === true) {
					hash = KSHelper.concatString(KSHelper.concatString(":", column.min, ":", column.max, ":", column.variadic, ":", column.rest), ";", __ks_Array.__ks_func_sort_0.call(Dictionary.keys(column.parameters), (() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 2) {
								if(t0(args[0]) && t0(args[1])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (a, b) => {
							return a.localeCompare(b);
						};
						return __ks_rt;
					})()).join(";"), ";", getForkHash2(column, 0));
				}
				else {
					hash = __ks_Array.__ks_func_sort_0.call(Dictionary.keys(column.parameters), (() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 2) {
								if(t0(args[0]) && t0(args[1])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (a, b) => {
							return a.localeCompare(b);
						};
						return __ks_rt;
					})()).join(";");
				}
				let group = groups[hash];
				if(KSType.isValue(group)) {
					group.push(key);
				}
				else {
					groups[hash] = [key];
				}
			}
			const scope = node.__ks_func_scope_0();
			let reorder = false;
			for(let __ks_0 in groups) {
				const group = groups[__ks_0];
				if(KSOperator.gt(group.length, 1)) {
					const main = branch.columns[group[0]];
					const types = [];
					for(let i = 0, __ks_1 = group.length, key; i < __ks_1; ++i) {
						key = group[i];
						types.push(branch.columns[key].type);
						if(i !== 0) {
							main.rows.push(...branch.columns[key].rows);
						}
						__ks_Array.__ks_func_remove_0.call(branch.order, [key]);
						delete branch.columns[key];
					}
					main.type = Type.union(scope, ...types).sort();
					branch.columns[main.type.__ks_func_hashCode_0()] = main;
					reorder = true;
				}
			}
			if(reorder) {
				sortNodes2.__ks_0(branch);
			}
		};
		regroupBranch_Children_ForkAlike_SiblingsEq.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree) || KSType.isStructInstance(value, TreeBranch);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return regroupBranch_Children_ForkAlike_SiblingsEq.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function buildNames() {
			return buildNames.__ks_rt(this, arguments);
		};
		buildNames.__ks_0 = function(group, name, node) {
			const functions = [];
			const parameters = new Dictionary();
			if(group.n === 1) {
				expandOneName.__ks_0(group, name, node, functions, parameters);
			}
			else {
				expandName.__ks_0(group, name, node, functions, parameters);
			}
			return NamedLength.__ks_new(functions, parameters);
		};
		buildNames.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Group);
			const t1 = KSType.isString;
			const t2 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return buildNames.__ks_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function expandOneName() {
			return expandOneName.__ks_rt(this, arguments);
		};
		expandOneName.__ks_0 = function(group, name, node, functions, parameters) {
			const rows = new Dictionary();
			for(let __ks_0 = 0, __ks_1 = group.functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_function_1 = group.functions[__ks_0];
				const required = [];
				for(let index = 0, __ks_2 = __ks_function_1.__ks_func_parameters_0(), __ks_3 = __ks_2.length, parameter; index < __ks_3; ++index) {
					parameter = __ks_2[index];
					if(parameter.__ks_func_min_2() !== 0) {
						required.push((() => {
							const d = new Dictionary();
							d.parameter = parameter;
							d.index = index;
							return d;
						})());
					}
				}
				if(required.length === 0) {
					for(let index = 0, __ks_2 = __ks_function_1.__ks_func_parameters_0(), __ks_3 = __ks_2.length, parameter; index < __ks_3; ++index) {
						parameter = __ks_2[index];
						addOneNameRow(group, name, node, __ks_function_1, parameter, parameter.__ks_func_type_0(), null, index, rows);
					}
				}
				else if(required.length === 1) {
					addOneNameRow(group, name, node, __ks_function_1, required[0].parameter, required[0].parameter.type(), null, required[0].index, rows);
				}
			}
			for(const name in rows) {
				const row = rows[name];
				const indexes = new Dictionary();
				const types = new Dictionary();
				for(const hash in row) {
					const {type, function: __ks_function_1, index} = row[hash];
					types[hash] = NamedType(type, [__ks_function_1.index()]);
					__ks_Array.__ks_func_pushUniq_0.call(functions, [__ks_function_1.index()]);
					indexes[__ks_function_1.index()] = index;
				}
				const order = sortNodes.__ks_0(KSHelper.mapDictionary(row, function(__ks_0, r) {
					return r.type;
				}));
				parameters[name] = NamedParameter.__ks_new(indexes, types, order);
			}
		};
		expandOneName.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Group);
			const t1 = KSType.isString;
			const t2 = value => KSType.isClassInstance(value, AbstractNode);
			const t3 = KSType.isArray;
			const t4 = KSType.isDictionary;
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
					return expandOneName.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		};
		function sortNodes() {
			return sortNodes.__ks_rt(this, arguments);
		};
		sortNodes.__ks_0 = function(types) {
			if(types.length === 1) {
				return [types[0].__ks_func_hashCode_0()];
			}
			const items = KSHelper.mapArray(types, function(type) {
				return (() => {
					const d = new Dictionary();
					d.key = type.__ks_func_hashCode_0();
					d.type = type;
					d.children = [];
					d.isAny = (type.__ks_func_isAny_0() === true) || (type.__ks_func_isNull_0() === true);
					return d;
				})();
			});
			for(let __ks_0 = 0, __ks_1 = items.length, node; __ks_0 < __ks_1; ++__ks_0) {
				node = items[__ks_0];
				if(node.isAny) {
					for(let __ks_2 = 0, __ks_3 = items.length, item; __ks_2 < __ks_3; ++__ks_2) {
						item = items[__ks_2];
						if(item !== node) {
							if(!item.isAny) {
								node.children.push(item);
							}
						}
					}
				}
				else {
					for(let __ks_2 = 0, __ks_3 = items.length, item; __ks_2 < __ks_3; ++__ks_2) {
						item = items[__ks_2];
						if(item !== node) {
							if(!item.isAny && item.type.__ks_func_isAssignableToVariable_2(node.type, true, true, false)) {
								node.children.push(item);
							}
						}
					}
				}
			}
			__ks_Array.__ks_func_sort_0.call(items, (() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (a, b) => {
					if(__ks_Array.__ks_func_contains_0.call(KSHelper.cast(a.children, "Array", false, null, "Array"), b)) {
						return 1;
					}
					if(__ks_Array.__ks_func_contains_0.call(KSHelper.cast(b.children, "Array", false, null, "Array"), a)) {
						return -1;
					}
					return a.type.compareToRef(b.type);
				};
				return __ks_rt;
			})());
			return KSHelper.mapArray(items, function(item) {
				return item.key;
			});
		};
		sortNodes.__ks_rt = function(that, args) {
			const t0 = value => KSType.isArray(value, value => KSType.isClassInstance(value, Type));
			if(args.length === 1) {
				if(t0(args[0])) {
					return sortNodes.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function addOneNameRow() {
			return addOneNameRow.__ks_rt(this, arguments);
		};
		addOneNameRow.__ks_0 = function(group, name, node, __ks_function_1, parameter, type, union, paramIndex, rows) {
			if(union === void 0) {
				union = null;
			}
			let row;
			if(type.__ks_func_isSplittable_0() === true) {
				const types = type.__ks_func_split_0([]);
				const union = UnionMatch.__ks_new(__ks_function_1, types.length, []);
				for(let __ks_0 = 0, __ks_1 = types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = types[__ks_0];
					addOneNameRow(group, name, node, __ks_function_1, parameter, type, union, paramIndex, rows);
				}
			}
			else if(KSType.isValue((row = rows[parameter.__ks_func_name_3()]))) {
				const hash = type.__ks_func_hashCode_0();
				let addable = true;
				let match = row[hash];
				if(KSType.isValue(match)) {
					if(__ks_function_1.__ks_func_max_0() === match.function.max()) {
						if(KSType.isValue(match.union)) {
							if(KSType.isValue(union)) {
								SyntaxException.__ks_sttc_throwIndistinguishableFunctions_1(name, [type], [__ks_function_1, match.function], node);
							}
							else {
								match.union.matches.push([type, __ks_function_1]);
								if(match.union.matches.length === match.union.length) {
									SyntaxException.throwShadowFunction(name, match.function, node);
								}
							}
						}
						else {
							if(KSType.isValue(union)) {
								union.matches.push([type, match.function]);
								if(union.matches.length === union.length) {
									SyntaxException.__ks_sttc_throwShadowFunction_0(name, __ks_function_1, node);
								}
								addable = false;
							}
							else {
								SyntaxException.__ks_sttc_throwIndistinguishableFunctions_1(name, [type], [__ks_function_1, match.function], node);
							}
						}
					}
					else if(KSOperator.gt(__ks_function_1.__ks_func_max_0(), match.function.max())) {
						addable = false;
					}
				}
				if(addable) {
					row[hash] = (() => {
						const d = new Dictionary();
						d.type = type;
						d.function = __ks_function_1;
						d.union = union;
						d.index = paramIndex;
						return d;
					})();
				}
			}
			else {
				rows[parameter.__ks_func_name_3()] = (() => {
					const d = new Dictionary();
					d[type.__ks_func_hashCode_0()] = (() => {
						const d = new Dictionary();
						d.type = type;
						d.function = __ks_function_1;
						d.union = union;
						d.index = paramIndex;
						return d;
					})();
					return d;
				})();
			}
		};
		addOneNameRow.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Group);
			const t1 = KSType.isString;
			const t2 = value => KSType.isClassInstance(value, AbstractNode);
			const t3 = value => KSType.isClassInstance(value, FunctionType);
			const t4 = value => KSType.isClassInstance(value, ParameterType);
			const t5 = value => KSType.isClassInstance(value, Type);
			const t6 = value => KSType.isStructInstance(value, UnionMatch) || KSType.isNull(value);
			const t7 = KSType.isNumber;
			const t8 = KSType.isDictionary;
			if(args.length === 9) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4]) && t5(args[5]) && t6(args[6]) && t7(args[7]) && t8(args[8])) {
					return addOneNameRow.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
				}
			}
			throw KSHelper.badArgs();
		};
		function expandName() {
			return expandName.__ks_rt(this, arguments);
		};
		expandName.__ks_0 = function(group, name, node, functions, parameters) {
			const rows = new Dictionary();
			for(let __ks_0 = 0, __ks_1 = group.functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_function_1 = group.functions[__ks_0];
				const requireds = [];
				const optionals = [];
				for(let index = 0, __ks_2 = __ks_function_1.__ks_func_parameters_0(), __ks_3 = __ks_2.length, parameter; index < __ks_3; ++index) {
					parameter = __ks_2[index];
					if(parameter.__ks_func_min_2() !== 0) {
						requireds.push((() => {
							const d = new Dictionary();
							d.parameter = parameter;
							d.index = index;
							return d;
						})());
					}
					else {
						optionals.push((() => {
							const d = new Dictionary();
							d.parameter = parameter;
							d.index = index;
							return d;
						})());
					}
				}
				let currents = [new Dictionary()];
				if(requireds.length === group.n) {
					for(let __ks_2 = 0, __ks_3 = requireds.length, parameter, index; __ks_2 < __ks_3; ++__ks_2) {
						({parameter, index} = requireds[__ks_2]);
						currents = expandNameRow(parameter, index, parameter.type(), currents, node);
					}
				}
				else if(requireds.length < group.n) {
					for(let __ks_2 = 0, __ks_3 = requireds.length, parameter, index; __ks_2 < __ks_3; ++__ks_2) {
						({parameter, index} = requireds[__ks_2]);
						currents = expandNameRow(parameter, index, parameter.type(), currents, node);
					}
					const fulls = [];
					for(let i = 0, __ks_2 = optionals.length, parameter, index; i < __ks_2; ++i) {
						({parameter, index} = optionals[i]);
						fulls.push.apply(fulls, [].concat(expandNameOptionalRow(optionals, group.n - requireds.length, index, parameter, i, currents, node)));
					}
					currents = fulls;
				}
				addNameRow(__ks_function_1, name, node, currents, rows);
			}
			const names = new Dictionary();
			for(let __ks_0 in rows) {
				const row = rows[__ks_0];
				for(const name in row.parameters) {
					const {index, type} = row.parameters[name];
					if(!KSType.isValue(names[name])) {
						names[name] = (() => {
							const d = new Dictionary();
							d.indexes = new Dictionary();
							d.types = new Dictionary();
							return d;
						})();
					}
					let types = names[name].types[type.hashCode()];
					if(KSType.isValue(types)) {
						__ks_Array.__ks_func_pushUniq_0.call(KSHelper.cast(types.functions, "Array", false, null, "Array"), [row.function.index()]);
					}
					else {
						names[name].types[type.hashCode()] = NamedType(type, [row.function.index()]);
					}
					if(!KSType.isValue(names[name].indexes[row.function.index()])) {
						names[name].indexes[row.function.index()] = index;
					}
				}
				__ks_Array.__ks_func_pushUniq_0.call(functions, [row.function.index()]);
			}
			for(const name in names) {
				const {indexes, types} = names[name];
				const order = sortNodes.__ks_0(KSHelper.mapDictionary(types, function(__ks_0, r) {
					return r.type;
				}));
				parameters[name] = NamedParameter(indexes, types, order);
			}
		};
		expandName.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Group);
			const t1 = KSType.isString;
			const t2 = value => KSType.isClassInstance(value, AbstractNode);
			const t3 = KSType.isArray;
			const t4 = KSType.isDictionary;
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
					return expandName.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		};
		function expandNameRow() {
			return expandNameRow.__ks_rt(this, arguments);
		};
		expandNameRow.__ks_0 = function(parameter, paramIndex, type, rows, node) {
			if(type.__ks_func_isSplittable_0() === true) {
				const types = type.__ks_func_split_0([]);
				for(let __ks_0 = 0, __ks_1 = types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = types[__ks_0];
					rows = expandNameRow(parameter, paramIndex, type, rows, node);
				}
				return rows;
			}
			else {
				const result = [];
				for(let __ks_0 = 0, __ks_1 = rows.length, row; __ks_0 < __ks_1; ++__ks_0) {
					row = rows[__ks_0];
					const r = KSHelper.concatDictionary(row);
					let rx = r[parameter.__ks_func_name_3()];
					if(KSType.isValue(rx)) {
						rx.type = Type.union(node.__ks_func_scope_0(), rx.type, type).sort();
					}
					else {
						r[parameter.__ks_func_name_3()] = (() => {
							const d = new Dictionary();
							d.index = paramIndex;
							d.type = type;
							return d;
						})();
					}
					result.push(r);
				}
				return result;
			}
		};
		expandNameRow.__ks_rt = function(that, args) {
			const t0 = value => KSType.isClassInstance(value, ParameterType);
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isClassInstance(value, Type);
			const t3 = KSType.isArray;
			const t4 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
					return expandNameRow.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		};
		function expandNameOptionalRow() {
			return expandNameOptionalRow.__ks_rt(this, arguments);
		};
		expandNameOptionalRow.__ks_0 = function(optionals, left, index, parameter, paramIndex, rows, node) {
			rows = expandNameRow(parameter, paramIndex, parameter.__ks_func_type_0(), rows, node);
			if(left === 1) {
				return rows;
			}
			else {
				const fulls = [];
				for(let i = index + 1, __ks_0 = optionals.length, optional; i < __ks_0; ++i) {
					optional = optionals[i];
					fulls.push.apply(fulls, [].concat(expandNameOptionalRow(optionals, left - 1, i, optional.parameter, optional.index, rows, node)));
				}
				return fulls;
			}
		};
		expandNameOptionalRow.__ks_rt = function(that, args) {
			const t0 = KSType.isArray;
			const t1 = KSType.isNumber;
			const t2 = value => KSType.isClassInstance(value, ParameterType);
			const t3 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 7) {
				if(t0(args[0]) && t1(args[1]) && t1(args[2]) && t2(args[3]) && t1(args[4]) && t0(args[5]) && t3(args[6])) {
					return expandNameOptionalRow.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
				}
			}
			throw KSHelper.badArgs();
		};
		function addNameRow() {
			return addNameRow.__ks_rt(this, arguments);
		};
		addNameRow.__ks_0 = function(__ks_function_1, name, node, rows, container) {
			for(let __ks_0 = 0, __ks_1 = rows.length, row; __ks_0 < __ks_1; ++__ks_0) {
				row = rows[__ks_0];
				const names = Dictionary.keys(row).sort();
				const key = names.map((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (name, __ks_0, __ks_1) => {
						return KSHelper.concatString(";", name, ";", row[name].type.hashCode());
					};
					return __ks_rt;
				})()).join();
				let match = container[key];
				if(KSType.isValue(match)) {
					if(__ks_function_1.__ks_func_max_0() === match.function.max()) {
						SyntaxException.__ks_sttc_throwIndistinguishableFunctions_0(name, [__ks_function_1, match.function], node);
					}
					else if(KSOperator.lt(__ks_function_1.__ks_func_max_0(), match.function.max())) {
						container[key] = (() => {
							const d = new Dictionary();
							d.function = __ks_function_1;
							d.parameters = row;
							return d;
						})();
					}
				}
				else {
					container[key] = (() => {
						const d = new Dictionary();
						d.function = __ks_function_1;
						d.parameters = row;
						return d;
					})();
				}
			}
		};
		addNameRow.__ks_rt = function(that, args) {
			const t0 = value => KSType.isClassInstance(value, FunctionType);
			const t1 = KSType.isString;
			const t2 = value => KSType.isClassInstance(value, AbstractNode);
			const t3 = KSType.isArray;
			const t4 = KSType.isDictionary;
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
					return addNameRow.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		};
		function assess() {
			return assess.__ks_rt(this, arguments);
		};
		assess.__ks_0 = function(functions, excludes, name, node) {
			if(functions.length === 0) {
				return Assessement.__ks_new(name, 0, 0, false, false, [], new Dictionary(), new Dictionary(), false, false);
			}
			const parameters = (() => {
				const d = new Dictionary();
				d.functions = new Dictionary();
				d.names = new Dictionary();
				return d;
			})();
			const async = functions[0].__ks_func_isAsync_0();
			const asyncMin = async ? 1 : 0;
			let min = Infinity;
			let max = 0;
			let maxRest = 0;
			let rest = false;
			let __ks_sealed_1 = false;
			for(let __ks_0 = 0, __ks_1 = functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_function_1 = functions[__ks_0];
				let parameter = __ks_function_1.__ks_func_getRestParameter_0();
				if(KSType.isValue(parameter)) {
					rest = true;
					min = Math.min(KSOperator.addOrConcat(__ks_function_1.__ks_func_getMinBefore_1(excludes), parameter.min(), __ks_function_1.__ks_func_getMinAfter_1(excludes), asyncMin), min);
					maxRest = Math.max(KSOperator.addOrConcat(__ks_function_1.__ks_func_getMaxBefore_1(excludes), parameter.min(), 1, __ks_function_1.__ks_func_getMaxAfter_1(excludes), asyncMin), maxRest);
				}
				else {
					min = Math.min(__ks_function_1.__ks_func_min_1(excludes) + asyncMin, min);
					max = Math.max(__ks_function_1.__ks_func_max_1(excludes) + asyncMin, max);
				}
				if(__ks_function_1.__ks_func_isSealed_0() === true) {
					__ks_sealed_1 = true;
				}
			}
			const groups = new Dictionary();
			if(rest) {
				if(max === 0) {
					max = maxRest;
				}
				else if(max < maxRest) {
					max = maxRest;
				}
				else {
					++max;
				}
			}
			for(let n = min; n <= max; ++n) {
				groups[n] = Group.__ks_new(n);
			}
			for(let __ks_0 = 0, __ks_1 = functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_function_1 = functions[__ks_0];
				if(KSOperator.eq(__ks_function_1.__ks_func_max_1(excludes), Infinity)) {
					for(let n = __ks_function_1.__ks_func_min_1(excludes) + asyncMin; n <= max; ++n) {
						groups[n].functions.push(__ks_function_1);
					}
				}
				else {
					for(let n = __ks_function_1.__ks_func_min_1(excludes) + asyncMin, __ks_2 = __ks_function_1.__ks_func_max_1(excludes) + asyncMin; n <= __ks_2; ++n) {
						groups[n].functions.push(__ks_function_1);
					}
				}
				parameters.functions[__ks_function_1.__ks_func_index_0()] = __ks_function_1;
				for(let __ks_2 = 0, __ks_3 = __ks_function_1.__ks_func_parameters_1(excludes), __ks_4 = __ks_3.length, parameter; __ks_2 < __ks_4; ++__ks_2) {
					parameter = __ks_3[__ks_2];
					let __ks_5;
					const name = KSType.isValue(__ks_5 = parameter.__ks_func_name_3()) ? __ks_5 : "_";
					let group = parameters.names[name];
					if(KSType.isValue(group)) {
						group.push(KSHelper.toString(__ks_function_1.__ks_func_index_0()));
					}
					else {
						parameters.names[name] = [KSHelper.toString(__ks_function_1.__ks_func_index_0())];
					}
				}
			}
			const trees = [];
			for(let __ks_0 in groups) {
				const group = groups[__ks_0];
				if(group.functions.length > 0) {
					trees.push(buildTree.__ks_0(group, name, true, excludes, node));
				}
			}
			regroupTrees.__ks_0(trees, node);
			expandUnboundeds.__ks_0(trees, node);
			const functionMap = new Dictionary();
			for(let __ks_0 = 0, __ks_1 = functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_function_1 = functions[__ks_0];
				functionMap[__ks_function_1.__ks_func_index_0()] = __ks_function_1;
			}
			return Assessement.__ks_new(name, min, rest ? Infinity : max, async, rest, trees, functionMap, new Dictionary(), false, __ks_sealed_1);
		};
		assess.__ks_1 = function(functions, name, node) {
			if(functions.length === 0) {
				return Assessement.__ks_new(name, 0, 0, false, false, [], new Dictionary(), new Dictionary(), false, false);
			}
			const parameters = (() => {
				const d = new Dictionary();
				d.functions = new Dictionary();
				d.names = new Dictionary();
				return d;
			})();
			const async = functions[0].__ks_func_isAsync_0();
			const asyncMin = async ? 1 : 0;
			let min = Infinity;
			let max = 0;
			let maxRest = 0;
			let rest = false;
			let __ks_sealed_1 = false;
			for(let __ks_0 = 0, __ks_1 = functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_function_1 = functions[__ks_0];
				let parameter = __ks_function_1.__ks_func_getRestParameter_0();
				if(KSType.isValue(parameter)) {
					rest = true;
					min = Math.min(KSOperator.addOrConcat(__ks_function_1.__ks_func_getMinBefore_0(), parameter.min(), __ks_function_1.__ks_func_getMinAfter_0(), asyncMin), min);
					maxRest = Math.max(KSOperator.addOrConcat(__ks_function_1.__ks_func_getMaxBefore_0(), parameter.min(), 1, __ks_function_1.__ks_func_getMaxAfter_0(), asyncMin), maxRest);
				}
				else {
					min = Math.min(__ks_function_1.__ks_func_min_0() + asyncMin, min);
					max = Math.max(__ks_function_1.__ks_func_max_0() + asyncMin, max);
				}
				if(__ks_function_1.__ks_func_isSealed_0() === true) {
					__ks_sealed_1 = true;
				}
			}
			const groups = new Dictionary();
			if(rest) {
				if(max === 0) {
					max = maxRest;
				}
				else if(max < maxRest) {
					max = maxRest;
				}
				else {
					++max;
				}
			}
			for(let n = min; n <= max; ++n) {
				groups[n] = Group.__ks_new(n);
			}
			for(let __ks_0 = 0, __ks_1 = functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_function_1 = functions[__ks_0];
				if(KSOperator.eq(__ks_function_1.__ks_func_max_0(), Infinity)) {
					for(let n = __ks_function_1.__ks_func_min_0() + asyncMin; n <= max; ++n) {
						groups[n].functions.push(__ks_function_1);
					}
				}
				else {
					for(let n = __ks_function_1.__ks_func_min_0() + asyncMin, __ks_2 = __ks_function_1.__ks_func_max_0() + asyncMin; n <= __ks_2; ++n) {
						groups[n].functions.push(__ks_function_1);
					}
				}
				parameters.functions[__ks_function_1.__ks_func_index_0()] = __ks_function_1;
				for(let __ks_2 = 0, __ks_3 = __ks_function_1.__ks_func_parameters_0(), __ks_4 = __ks_3.length, parameter; __ks_2 < __ks_4; ++__ks_2) {
					parameter = __ks_3[__ks_2];
					let __ks_5;
					const name = KSType.isValue(__ks_5 = parameter.__ks_func_name_3()) ? __ks_5 : "_";
					let group = parameters.names[name];
					if(KSType.isValue(group)) {
						group.push(KSHelper.toString(__ks_function_1.__ks_func_index_0()));
					}
					else {
						parameters.names[name] = [KSHelper.toString(__ks_function_1.__ks_func_index_0())];
					}
				}
			}
			const trees = [];
			const names = new Dictionary();
			for(let __ks_0 in groups) {
				const group = groups[__ks_0];
				if(group.functions.length > 0) {
					trees.push(buildTree.__ks_0(group, name, false, null, node));
					if(group.n !== 0) {
						names[group.n] = buildNames.__ks_0(group, name, node);
					}
				}
			}
			regroupTrees.__ks_0(trees, node);
			expandUnboundeds.__ks_0(trees, node);
			const functionMap = new Dictionary();
			for(let __ks_0 = 0, __ks_1 = functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_function_1 = functions[__ks_0];
				functionMap[__ks_function_1.__ks_func_index_0()] = __ks_function_1;
			}
			return Assessement.__ks_new(name, min, rest ? Infinity : max, async, rest, trees, functionMap, names, false, __ks_sealed_1);
		};
		assess.__ks_rt = function(that, args) {
			const t0 = value => KSType.isArray(value, value => KSType.isClassInstance(value, FunctionType));
			const t1 = KSType.isString;
			const t2 = value => KSType.isClassInstance(value, AbstractNode);
			const t3 = value => KSType.isArray(value, KSType.isString);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return assess.__ks_1.call(that, args[0], args[1], args[2]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 4) {
				if(t0(args[0]) && t3(args[1]) && t1(args[2]) && t2(args[3])) {
					return assess.__ks_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		};
		function regroupTrees() {
			return regroupTrees.__ks_rt(this, arguments);
		};
		regroupTrees.__ks_0 = function(trees, node) {
			regroupTreesByArguments2.__ks_0(trees);
		};
		regroupTrees.__ks_rt = function(that, args) {
			const t0 = value => KSType.isArray(value, value => KSType.isStructInstance(value, Tree));
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return regroupTrees.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function regroupTreesByArguments2() {
			return regroupTreesByArguments2.__ks_rt(this, arguments);
		};
		regroupTreesByArguments2.__ks_0 = function(trees) {
			const last = __ks_Array.__ks_func_last_0.call(trees);
			const groups = new Dictionary();
			for(let __ks_0 = 0, __ks_1 = trees.length, tree; __ks_0 < __ks_1; ++__ks_0) {
				tree = trees[__ks_0];
				for(let __ks_2 = 0, __ks_3 = listEquivalentHashes.__ks_0(tree), __ks_4 = __ks_3.length, hash; __ks_2 < __ks_4; ++__ks_2) {
					hash = __ks_3[__ks_2];
					let group = groups[hash];
					if(KSType.isValue(group)) {
						group.push(tree);
					}
					else {
						groups[hash] = [tree];
					}
				}
			}
			const values = Dictionary.values(groups).sort((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 2) {
						if(t0(args[0]) && t0(args[1])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (a, b) => {
					return KSOperator.subtraction(b.length, a.length);
				};
				return __ks_rt;
			})());
			for(let index = 0, __ks_0 = values.length, value; index < __ks_0; ++index) {
				value = values[index];
				if(KSOperator.gt(value.length, 0)) {
					for(let __ks_1 = index + 1, __ks_2 = values.length, val; __ks_1 < __ks_2; ++__ks_1) {
						val = values[__ks_1];
						if(KSOperator.gt(val.length, 0)) {
							__ks_Array.__ks_func_remove_0.call(KSHelper.cast(val, "Array", false, null, "Array"), [].concat(value));
						}
					}
				}
			}
			for(const key in groups) {
				const group = groups[key];
				if(group.length > 1) {
					regroupTreesByGroup(group, trees, last, []);
				}
			}
		};
		regroupTreesByArguments2.__ks_rt = function(that, args) {
			const t0 = value => KSType.isArray(value, value => KSType.isStructInstance(value, Tree));
			if(args.length === 1) {
				if(t0(args[0])) {
					return regroupTreesByArguments2.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function listEquivalentHashes() {
			return listEquivalentHashes.__ks_rt(this, arguments);
		};
		listEquivalentHashes.__ks_0 = function(tree) {
			if(tree.order.length === 0) {
				return [KSHelper.concatString(tree.function.__ks_func_index_0(), ";")];
			}
			else if(KSType.isValue(tree.equivalences)) {
				let orders = [tree.order];
				for(let __ks_0 = 0, __ks_1 = tree.equivalences.length, eq; __ks_0 < __ks_1; ++__ks_0) {
					eq = tree.equivalences[__ks_0];
					orders = replaceOrder.__ks_0(eq, orders);
				}
				const result = [];
				for(let __ks_0 = 0, __ks_1 = orders.length, order; __ks_0 < __ks_1; ++__ks_0) {
					order = orders[__ks_0];
					let hashes = [""];
					for(let __ks_2 = 0, __ks_3 = order.length, key; __ks_2 < __ks_3; ++__ks_2) {
						key = order[__ks_2];
						hashes = listEquivalentHashes(tree.columns[key], hashes);
					}
					result.push(...hashes);
				}
				return result;
			}
			else {
				let hashes = [""];
				for(let __ks_0 = 0, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
					key = tree.order[__ks_0];
					hashes = listEquivalentHashes(tree.columns[key], hashes);
				}
				return hashes;
			}
		};
		listEquivalentHashes.__ks_1 = function(tree, hashes) {
			if(KSType.isValue(tree.equivalences)) {
				let orders = [tree.order];
				for(let __ks_0 = 0, __ks_1 = tree.equivalences.length, eq; __ks_0 < __ks_1; ++__ks_0) {
					eq = tree.equivalences[__ks_0];
					orders = replaceOrder.__ks_0(eq, orders);
				}
				const result = [];
				for(let __ks_0 = 0, __ks_1 = orders.length, order; __ks_0 < __ks_1; ++__ks_0) {
					order = orders[__ks_0];
					let h = [...hashes];
					for(let __ks_2 = 0, __ks_3 = order.length, key; __ks_2 < __ks_3; ++__ks_2) {
						key = order[__ks_2];
						h = listEquivalentHashes(tree.columns[key], h);
					}
					result.push(...h);
				}
				return result;
			}
			else {
				for(let __ks_0 = 0, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
					key = tree.order[__ks_0];
					hashes = listEquivalentHashes(tree.columns[key], hashes);
				}
				return hashes;
			}
		};
		listEquivalentHashes.__ks_2 = function(tree, hashes) {
			const index = tree.function.__ks_func_index_0();
			for(let i = 0, __ks_0 = hashes.length, hash; i < __ks_0; ++i) {
				hash = hashes[i];
				hashes[i] = KSHelper.concatString(hashes[i], KSHelper.concatString(index, ";"));
			}
			return hashes;
		};
		listEquivalentHashes.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree);
			const t1 = value => KSType.isStructInstance(value, TreeBranch);
			const t2 = KSType.isArray;
			const t3 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 1) {
				if(t0(args[0])) {
					return listEquivalentHashes.__ks_0.call(that, args[0]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 2) {
				if(t1(args[0])) {
					if(t2(args[1])) {
						return listEquivalentHashes.__ks_1.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t3(args[0]) && t2(args[1])) {
					return listEquivalentHashes.__ks_2.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function replaceOrder() {
			return replaceOrder.__ks_rt(this, arguments);
		};
		replaceOrder.__ks_0 = function(equivalences, orders) {
			let result = [...orders];
			for(let index = 0, __ks_0 = equivalences.length, eq1; index < __ks_0; ++index) {
				eq1 = equivalences[index];
				for(let __ks_1 = index + 1, __ks_2 = equivalences.length, eq2; __ks_1 < __ks_2; ++__ks_1) {
					eq2 = equivalences[__ks_1];
					for(let __ks_3 = 0, __ks_4 = orders.length, order; __ks_3 < __ks_4; ++__ks_3) {
						order = orders[__ks_3];
						const index1 = order.indexOf(eq1);
						if(index1 !== -1) {
							const index2 = order.indexOf(eq2);
							if(index2 !== -1) {
								const match = [...order];
								match[index1] = eq2;
								match[index2] = eq1;
								result.push(match);
								break;
							}
						}
					}
				}
			}
			return result;
		};
		replaceOrder.__ks_rt = function(that, args) {
			const t0 = value => KSType.isArray(value, KSType.isString);
			const t1 = value => KSType.isArray(value, value => KSType.isArray(value, KSType.isString));
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return replaceOrder.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function regroupTreesByGroup() {
			return regroupTreesByGroup.__ks_rt(this, arguments);
		};
		regroupTreesByGroup.__ks_0 = function(group, trees, last, shadows) {
			const tree = group.pop();
			const max = tree.max;
			const maxs = buildMax4(tree, tree === last);
			let lastMatches = null;
			for(let index = group.length - 1, __ks_0 = 0, tree; index >= __ks_0; --index) {
				tree = group[index];
				let [kind, ...matches] = listShadows(tree, maxs, max);
				if(KSHelper.valueOf(kind) === ShadowKind.Soft.value) {
					shadows = matches;
				}
				else if(KSHelper.valueOf(kind) === ShadowKind.Hard.value) {
					if(!KSType.isValue(lastMatches)) {
						lastMatches = matches;
					}
					else {
						if(isSameShadows(lastMatches, matches) === true) {
							regroupTreesByGroup(group.slice(0, index + 2), trees, last, lastMatches);
							group = group.slice(index + 2);
						}
						else {
							regroupTreesByGroup.__ks_0(group.slice(0, index + 1), trees, last, []);
							group = group.slice(index + 1);
							shadows.push.apply(shadows, [].concat(lastMatches));
						}
						lastMatches = null;
						break;
					}
				}
			}
			if(KSType.isValue(lastMatches)) {
				regroupTreesByGroup.__ks_0(group.slice(0, 1), trees, last, []);
				group = group.slice(1);
			}
			if(group.length === 0) {
				return;
			}
			const first = group[0];
			const mins = buildMin4.__ks_0(first);
			__ks_Array.__ks_func_remove_0.call(trees, group);
			applyMin4(tree, first, mins, shadows);
		};
		regroupTreesByGroup.__ks_rt = function(that, args) {
			const t0 = value => KSType.isArray(value, value => KSType.isStructInstance(value, Tree));
			const t1 = value => KSType.isStructInstance(value, Tree);
			const t2 = KSType.isArray;
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t2(args[3])) {
					return regroupTreesByGroup.__ks_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		};
		function isSameShadows() {
			return isSameShadows.__ks_rt(this, arguments);
		};
		isSameShadows.__ks_0 = function(a, b) {
			if(!(a.length === b.length)) {
				return false;
			}
			for(let i = 0, __ks_0 = a.length; i < __ks_0; ++i) {
				if(!(a[i].length === b[i].length)) {
					return false;
				}
				if(!(a[i][0] === b[i][0])) {
					return false;
				}
				if(!(a[i][1] === b[i][1])) {
					return false;
				}
			}
			return true;
		};
		isSameShadows.__ks_rt = function(that, args) {
			const t0 = KSType.isArray;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return isSameShadows.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function getArgumentsHash4() {
			return getArgumentsHash4.__ks_rt(this, arguments);
		};
		getArgumentsHash4.__ks_0 = function(tree) {
			if(tree.order.length === 0) {
				return KSHelper.concatString(tree.function.__ks_func_index_0(), ";");
			}
			else {
				let hash = "";
				for(let __ks_0 = 0, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
					key = tree.order[__ks_0];
					hash = KSHelper.concatString(hash, getArgumentsHash4(tree.columns[key]));
				}
				return hash;
			}
		};
		getArgumentsHash4.__ks_1 = function(tree) {
			let hash = "";
			for(let __ks_0 = 0, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree.order[__ks_0];
				hash = KSHelper.concatString(hash, getArgumentsHash4(tree.columns[key]));
			}
			return hash;
		};
		getArgumentsHash4.__ks_2 = function(tree) {
			const index = tree.function.__ks_func_index_0();
			return KSHelper.concatString(index, ";");
		};
		getArgumentsHash4.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree);
			const t1 = value => KSType.isStructInstance(value, TreeBranch);
			const t2 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 1) {
				if(t0(args[0])) {
					return getArgumentsHash4.__ks_0.call(that, args[0]);
				}
				if(t1(args[0])) {
					return getArgumentsHash4.__ks_1.call(that, args[0]);
				}
				if(t2(args[0])) {
					return getArgumentsHash4.__ks_2.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function toSignature() {
			return toSignature.__ks_rt(this, arguments);
		};
		toSignature.__ks_0 = function(tree) {
			let s = "";
			for(let i = 0, __ks_0 = tree.order.length, key; i < __ks_0; ++i) {
				key = tree.order[i];
				s += KSHelper.concatString("/", toSignature(tree.columns[key], KSHelper.toString(i)));
			}
			return s;
		};
		toSignature.__ks_1 = function(tree, prefix) {
			let s = KSHelper.concatString("/", prefix, "=", tree.index, ",", tree.type.__ks_func_hashCode_0(), "(", tree.min, ",", tree.max, ")");
			for(let i = 0, __ks_0 = tree.order.length, key; i < __ks_0; ++i) {
				key = tree.order[i];
				s = KSHelper.concatString(s, toSignature(tree.columns[key], KSHelper.concatString(prefix, ".", i)));
			}
			return s;
		};
		toSignature.__ks_2 = function(tree, prefix) {
			return KSHelper.concatString("/", prefix, "=", tree.index, ",", tree.type.__ks_func_hashCode_0(), "(", tree.min, ",", tree.max, ")");
		};
		toSignature.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree);
			const t1 = value => KSType.isStructInstance(value, TreeBranch);
			const t2 = KSType.isString;
			const t3 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 1) {
				if(t0(args[0])) {
					return toSignature.__ks_0.call(that, args[0]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 2) {
				if(t1(args[0])) {
					if(t2(args[1])) {
						return toSignature.__ks_1.call(that, args[0], args[1]);
					}
					throw KSHelper.badArgs();
				}
				if(t3(args[0]) && t2(args[1])) {
					return toSignature.__ks_2.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function applyMin4() {
			return applyMin4.__ks_rt(this, arguments);
		};
		applyMin4.__ks_0 = function(tree, last, data, shadows) {
			tree.variadic = true;
			if(last.min < tree.min) {
				tree.min = last.min;
				tree.rest = last.rest || tree.rest;
			}
			for(let __ks_0 = 0, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree.order[__ks_0];
				applyMin4(tree.columns[key], tree.max, data, shadows, []);
			}
		};
		applyMin4.__ks_1 = function(tree, max, data, shadows, nodes) {
			nodes.unshift(tree);
			for(let __ks_0 = 0, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree.order[__ks_0];
				applyMin4(tree.columns[key], max, data, shadows, nodes);
			}
		};
		applyMin4.__ks_2 = function(tree, max, data, shadows, nodes) {
			nodes.unshift(tree);
			const i2p = new Dictionary();
			for(let __ks_0 = 0, __ks_1 = tree.rows[0].types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = tree.rows[0].types[__ks_0];
				i2p[type.index] = type.parameter;
			}
			if(data.length === 0) {
				for(let __ks_0 = 0, __ks_1 = nodes.length, node; __ks_0 < __ks_1; ++__ks_0) {
					node = nodes[__ks_0];
					node.min = 0;
				}
			}
			else {
				const d = data.shift();
				for(let __ks_0 = 0, __ks_1 = nodes.length, node; __ks_0 < __ks_1; ++__ks_0) {
					node = nodes[__ks_0];
					if(d.length === 0) {
						node.min = 0;
					}
					else if((d[0] === i2p[node.index]) && (d[1] === node.type.hashCode(true))) {
						d.shift();
						d.shift();
						node.min = d.shift();
					}
					else {
						node.min = 0;
					}
				}
			}
			const shadow = shadows.shift();
			if(KSType.isValue(shadow) && KSOperator.gt(shadow.length, 1)) {
				let node = nodes.find((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (node, __ks_0, __ks_1) => {
						return i2p[node.index] === shadow[1];
					};
					return __ks_rt;
				})());
				if(KSType.isValue(node)) {
					if(KSOperator.gte(node.index, 0) && (KSOperator.subtraction(node.max, max) !== 0)) {
						node.max = KSOperator.subtraction(node.max, max);
					}
				}
			}
			__ks_Array.__ks_func_clear_0.call(nodes);
		};
		applyMin4.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree);
			const t1 = KSType.isArray;
			const t2 = value => KSType.isStructInstance(value, TreeBranch);
			const t3 = KSType.isNumber;
			const t4 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 4) {
				if(t0(args[0]) && t0(args[1]) && t1(args[2]) && t1(args[3])) {
					return applyMin4.__ks_0.call(that, args[0], args[1], args[2], args[3]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 5) {
				if(t2(args[0])) {
					if(t3(args[1]) && t1(args[2]) && t1(args[3]) && t1(args[4])) {
						return applyMin4.__ks_1.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
					throw KSHelper.badArgs();
				}
				if(t4(args[0]) && t3(args[1]) && t1(args[2]) && t1(args[3]) && t1(args[4])) {
					return applyMin4.__ks_2.call(that, args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		};
		function buildMin4() {
			return buildMin4.__ks_rt(this, arguments);
		};
		buildMin4.__ks_0 = function(tree) {
			const result = [];
			for(let __ks_0 = 0, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree.order[__ks_0];
				buildMin4(tree.columns[key], result, []);
			}
			return result;
		};
		buildMin4.__ks_1 = function(tree, result, parameters) {
			parameters.unshift(tree.index, tree.type.__ks_func_hashCode_1(true), tree.min);
			for(let __ks_0 = 0, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree.order[__ks_0];
				buildMin4(tree.columns[key], result, parameters);
			}
		};
		buildMin4.__ks_2 = function(tree, result, parameters) {
			parameters.unshift(tree.index, tree.type.__ks_func_hashCode_1(true), tree.min);
			const mins = [];
			for(let __ks_0 = tree.rows[0].types.length - 1, __ks_1 = 0, type; __ks_0 >= __ks_1; --__ks_0) {
				type = tree.rows[0].types[__ks_0];
				if(parameters[0] === type.index) {
					parameters.shift();
					mins.push(type.parameter, parameters.shift(), parameters.shift());
				}
			}
			result.push(mins);
			__ks_Array.__ks_func_clear_0.call(parameters);
		};
		buildMin4.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree);
			const t1 = value => KSType.isStructInstance(value, TreeBranch);
			const t2 = KSType.isArray;
			const t3 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 1) {
				if(t0(args[0])) {
					return buildMin4.__ks_0.call(that, args[0]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 3) {
				if(t1(args[0])) {
					if(t2(args[1]) && t2(args[2])) {
						return buildMin4.__ks_1.call(that, args[0], args[1], args[2]);
					}
					throw KSHelper.badArgs();
				}
				if(t3(args[0]) && t2(args[1]) && t2(args[2])) {
					return buildMin4.__ks_2.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function buildMax4() {
			return buildMax4.__ks_rt(this, arguments);
		};
		buildMax4.__ks_0 = function(tree, last) {
			const result = [];
			for(let __ks_0 = 0, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree.order[__ks_0];
				buildMax4(tree.columns[key], last, result, new Dictionary());
			}
			return result;
		};
		buildMax4.__ks_1 = function(tree, last, result, nodes) {
			nodes[tree.index] = (() => {
				const d = new Dictionary();
				d.index = tree.index;
				d.type = tree.type;
				d.min = tree.min;
				d.max = tree.max;
				d.rest = tree.rest;
				return d;
			})();
			for(let __ks_0 = 0, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree.order[__ks_0];
				buildMax4(tree.columns[key], last, result, nodes);
			}
		};
		buildMax4.__ks_2 = function(tree, last, result, nodes) {
			nodes[tree.index] = (() => {
				const d = new Dictionary();
				d.index = tree.index;
				d.type = tree.type;
				d.min = tree.min;
				d.max = tree.max;
				d.rest = tree.rest;
				return d;
			})();
			const parameters = new Dictionary();
			for(let __ks_0 = tree.rows[0].types.length - 1, __ks_1 = 0, type; __ks_0 >= __ks_1; --__ks_0) {
				type = tree.rows[0].types[__ks_0];
				let parameter = nodes[type.index];
				if(KSType.isValue(parameter)) {
					parameters[type.parameter] = parameter;
				}
			}
			result.push(parameters);
		};
		buildMax4.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree);
			const t1 = KSType.isBoolean;
			const t2 = value => KSType.isStructInstance(value, TreeBranch);
			const t3 = KSType.isArray;
			const t4 = KSType.isDictionary;
			const t5 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return buildMax4.__ks_0.call(that, args[0], args[1]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 4) {
				if(t2(args[0])) {
					if(t1(args[1]) && t3(args[2]) && t4(args[3])) {
						return buildMax4.__ks_1.call(that, args[0], args[1], args[2], args[3]);
					}
					throw KSHelper.badArgs();
				}
				if(t5(args[0]) && t1(args[1]) && t3(args[2]) && t4(args[3])) {
					return buildMax4.__ks_2.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		};
		const ShadowKind = KSHelper.enum(Number, {
			None: 0,
			Soft: 1,
			Hard: 2
		});
		function listShadows() {
			return listShadows.__ks_rt(this, arguments);
		};
		listShadows.__ks_0 = function(tree, data, ceiling) {
			const newData = __ks_Array.__ks_func_clone_0.call(data);
			const results = [ShadowKind.None];
			for(let __ks_0 = 0, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree.order[__ks_0];
				listShadows(tree.columns[key], tree.max, ceiling, newData, new Dictionary(), results);
			}
			return results;
		};
		listShadows.__ks_1 = function(tree, max, ceiling, data, nodes, results) {
			nodes[tree.index] = (() => {
				const d = new Dictionary();
				d.type = tree.type;
				d.min = tree.min;
				d.max = tree.max;
				return d;
			})();
			for(let __ks_0 = 0, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree.order[__ks_0];
				listShadows(tree.columns[key], max, ceiling, data, nodes, results);
			}
		};
		listShadows.__ks_2 = function(tree, max, ceiling, data, nodes, results) {
			nodes[tree.index] = (() => {
				const d = new Dictionary();
				d.type = tree.type;
				d.min = tree.min;
				d.max = tree.max;
				return d;
			})();
			const result = [ShadowKind.None, -1];
			if(data.length !== 0) {
				const __ks_data_1 = data.shift();
				const parameters = new Dictionary();
				for(let __ks_0 = 0, __ks_1 = tree.rows[0].types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = tree.rows[0].types[__ks_0];
					let parameter = nodes[type.index];
					if(KSType.isValue(parameter)) {
						parameters[type.parameter] = parameter;
					}
				}
				const __ks_arguments_1 = [];
				let left = max;
				let lastIndex = -1;
				let canNegLength0 = true;
				let useNegLength0 = false;
				let useNegLengthN = true;
				let length = tree.rows[0].function.__ks_func_parameters_0().length;
				if(tree.rows[0].function.__ks_func_isAsync_0()) {
					++length;
				}
				for(let index = 0; index < length; ++index) {
					let maximus = __ks_data_1[index];
					if(KSType.isValue(maximus)) {
						let parameter = parameters[index];
						if(KSType.isValue(parameter)) {
							if(KSOperator.lt(left, parameter.min)) {
								for(let i = 1, __ks_0 = parameter.min; i <= __ks_0; ++i) {
									let argType = __ks_arguments_1.shift();
									if(KSType.isValue(argType)) {
										if((parameter.type.isAssignableToVariable(argType, false, false, false, true) === true) || ((argType.isNullable() === true) && (parameter.type.isNullable() === true))) {
											if(useNegLength0) {
												useNegLength0 = false;
												setResult(result, ShadowKind.Soft, lastIndex, max, ceiling, __ks_data_1, parameters);
											}
											else if(useNegLengthN) {
												useNegLengthN = false;
												if(parameter.min !== maximus.max) {
													setResult(result, ShadowKind.Hard, lastIndex, max, ceiling, __ks_data_1, parameters);
												}
												else {
													setResult(result, ShadowKind.Soft, lastIndex, max, ceiling, __ks_data_1, parameters);
												}
											}
											else {
												setResult(result, ShadowKind.Hard, lastIndex, max, ceiling, __ks_data_1, parameters);
											}
										}
										else if(argType.isAssignableToVariable(parameter.type, false, true, false) === true) {
											if(useNegLength0) {
												useNegLength0 = false;
											}
											else if(useNegLengthN) {
												useNegLengthN = false;
												if((parameter.min !== maximus.max) && (parameter.min !== (__ks_arguments_1.length + 1))) {
													setResult(result, ShadowKind.Hard, lastIndex, max, ceiling, __ks_data_1, parameters);
												}
												else {
													setResult(result, ShadowKind.Soft, lastIndex, max, ceiling, __ks_data_1, parameters);
												}
											}
											else {
												setResult(result, ShadowKind.Hard, lastIndex, max, ceiling, __ks_data_1, parameters);
											}
										}
									}
								}
							}
							else if(KSOperator.gt(left, parameter.min)) {
								for(let i = 1, __ks_0 = Math.min(parameter.min, __ks_arguments_1.length); i <= __ks_0; ++i) {
									let argType = __ks_arguments_1.shift();
									if(KSType.isValue(argType)) {
										const assignable = parameter.type.isAssignableToVariable(argType, false, false, false, true);
										if(((assignable === true) && (argType.isNullable() === true)) || (!(assignable === true) && (parameter.type.isAssignableToVariable(argType, false, true, false, true) === true))) {
											setResult(result, ShadowKind.Hard, lastIndex, max, ceiling, __ks_data_1, parameters);
										}
									}
								}
							}
							for(let i = parameter.min, __ks_0 = maximus.max; i < __ks_0; ++i) {
								__ks_arguments_1.unshift(parameter.type);
							}
							canNegLength0 = false;
						}
						else {
							for(let i = 0, __ks_0 = maximus.max; i < __ks_0; ++i) {
								__ks_arguments_1.unshift(maximus.type);
							}
							if(useNegLength0) {
								useNegLength0 = false;
							}
							else if(canNegLength0) {
								useNegLength0 = true;
								canNegLength0 = false;
							}
							if(!(maximus.rest === true) && KSOperator.lte(maximus.max, 1)) {
								useNegLengthN = false;
							}
						}
						lastIndex = index;
						left = KSOperator.subtraction(left, maximus.max);
					}
				}
			}
			results.push(result);
			if(KSOperator.gt(result[0], results[0])) {
				results[0] = result[0];
			}
		};
		listShadows.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree);
			const t1 = KSType.isArray;
			const t2 = KSType.isNumber;
			const t3 = value => KSType.isStructInstance(value, TreeBranch);
			const t4 = KSType.isDictionary;
			const t5 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return listShadows.__ks_0.call(that, args[0], args[1], args[2]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 6) {
				if(t3(args[0])) {
					if(t2(args[1]) && t2(args[2]) && t1(args[3]) && t4(args[4]) && t1(args[5])) {
						return listShadows.__ks_1.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
					}
					throw KSHelper.badArgs();
				}
				if(t5(args[0]) && t2(args[1]) && t2(args[2]) && t1(args[3]) && t4(args[4]) && t1(args[5])) {
					return listShadows.__ks_2.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
				}
			}
			throw KSHelper.badArgs();
		};
		function setResult() {
			return setResult.__ks_rt(this, arguments);
		};
		setResult.__ks_0 = function(result, kind, index, max, ceiling, data, parameters) {
			index = getValidNode.__ks_0(index, data, parameters);
			if(kind === ShadowKind.Soft) {
				let maximus = data[index];
				if(KSType.isValue(maximus)) {
					if(KSOperator.gt(ceiling - max, maximus.max) && !(maximus.rest === true)) {
						kind = ShadowKind.Hard;
					}
				}
			}
			if(kind === ShadowKind.Soft) {
				if(KSHelper.valueOf(result[0]) === ShadowKind.None.value) {
					result[0] = ShadowKind.Soft;
					result[1] = index;
				}
			}
			else {
				if(KSHelper.valueOf(result[0]) !== ShadowKind.Hard.value) {
					result[0] = ShadowKind.Hard;
					result[1] = index;
				}
			}
		};
		setResult.__ks_rt = function(that, args) {
			const t0 = KSType.isArray;
			const t1 = value => KSType.isEnumInstance(value, ShadowKind);
			const t2 = KSType.isNumber;
			const t3 = KSType.isDictionary;
			if(args.length === 7) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t2(args[3]) && t2(args[4]) && t3(args[5]) && t3(args[6])) {
					return setResult.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
				}
			}
			throw KSHelper.badArgs();
		};
		function getValidNodeLoop() {
			return getValidNodeLoop.__ks_rt(this, arguments);
		};
		getValidNodeLoop.__ks_0 = function(index, data, parameters) {
			let maximus = data[index];
			if(KSType.isValue(maximus)) {
				if((maximus.min !== maximus.max) || (maximus.rest === true)) {
					return index;
				}
				let parameter = parameters[index];
				if(KSType.isValue(parameter)) {
					if(parameter.min !== maximus.max) {
						return index;
					}
				}
				else {
					return index;
				}
			}
			if(index > 0) {
				return getValidNodeLoop.__ks_0(index - 1, data, parameters);
			}
			else {
				return null;
			}
		};
		getValidNodeLoop.__ks_rt = function(that, args) {
			const t0 = KSType.isNumber;
			const t1 = KSType.isDictionary;
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
					return getValidNodeLoop.__ks_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function getValidNode() {
			return getValidNode.__ks_rt(this, arguments);
		};
		getValidNode.__ks_0 = function(index, data, parameters) {
			let __ks_0;
			return KSType.isValue(__ks_0 = getValidNodeLoop.__ks_0(index, data, parameters)) ? __ks_0 : index;
		};
		getValidNode.__ks_rt = function(that, args) {
			const t0 = KSType.isNumber;
			const t1 = KSType.isDictionary;
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
					return getValidNode.__ks_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function expandUnboundeds() {
			return expandUnboundeds.__ks_rt(this, arguments);
		};
		expandUnboundeds.__ks_0 = function(trees, node) {
			for(let __ks_0 = 0, __ks_1 = trees.length - 1, tree; __ks_0 < __ks_1; ++__ks_0) {
				tree = trees[__ks_0];
				updateUnboundedTree.__ks_0(tree, false);
			}
			updateUnboundedTree(__ks_Array.__ks_func_last_0.call(trees), true);
		};
		expandUnboundeds.__ks_rt = function(that, args) {
			const t0 = value => KSType.isArray(value, value => KSType.isStructInstance(value, Tree));
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return expandUnboundeds.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function getMaxMinAfter() {
			return getMaxMinAfter.__ks_rt(this, arguments);
		};
		getMaxMinAfter.__ks_0 = function(tree) {
			let min = 0;
			for(let __ks_0 in tree.columns) {
				const column = tree.columns[__ks_0];
				if(column.type.__ks_func_isAssignableToVariable_2(tree.type, false, true, true)) {
					min = Math.max(min, getMaxMinFromIndex(column));
				}
				else {
					min = Math.max(min, getMaxMinFromFunction(column));
				}
			}
			return min;
		};
		getMaxMinAfter.__ks_1 = function(tree) {
			return tree.function.__ks_func_isAsync_0() ? 1 : 0;
		};
		getMaxMinAfter.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 1) {
				if(t0(args[0])) {
					return getMaxMinAfter.__ks_0.call(that, args[0]);
				}
				if(t1(args[0])) {
					return getMaxMinAfter.__ks_1.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function getMaxMinFromIndex() {
			return getMaxMinFromIndex.__ks_rt(this, arguments);
		};
		getMaxMinFromIndex.__ks_0 = function(tree) {
			if(tree.index < 0) {
				return -tree.index;
			}
			else {
				return 0;
			}
		};
		getMaxMinFromIndex.__ks_1 = function(tree) {
			if(tree.index < 0) {
				return -tree.index;
			}
			else {
				return tree.function.__ks_func_isAsync_0() ? 1 : 0;
			}
		};
		getMaxMinFromIndex.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 1) {
				if(t0(args[0])) {
					return getMaxMinFromIndex.__ks_0.call(that, args[0]);
				}
				if(t1(args[0])) {
					return getMaxMinFromIndex.__ks_1.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function getMaxMinFromFunction() {
			return getMaxMinFromFunction.__ks_rt(this, arguments);
		};
		getMaxMinFromFunction.__ks_0 = function(tree) {
			let min = 0;
			for(let __ks_0 in tree.columns) {
				const column = tree.columns[__ks_0];
				min = Math.max(min, getMaxMinFromFunction(column));
			}
			return min;
		};
		getMaxMinFromFunction.__ks_1 = function(tree) {
			return getMinAfter.__ks_0(tree.function);
		};
		getMaxMinFromFunction.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 1) {
				if(t0(args[0])) {
					return getMaxMinFromFunction.__ks_0.call(that, args[0]);
				}
				if(t1(args[0])) {
					return getMaxMinFromFunction.__ks_1.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function getRowType() {
			return getRowType.__ks_rt(this, arguments);
		};
		getRowType.__ks_0 = function(row, tree) {
			for(let __ks_0 = 0, __ks_1 = row.types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = row.types[__ks_0];
				if(type.index === tree.index) {
					return type;
				}
			}
			return null;
		};
		getRowType.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isStructInstance(value, TreeBranch) || KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return getRowType.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function reduceMinToZero() {
			return reduceMinToZero.__ks_rt(this, arguments);
		};
		reduceMinToZero.__ks_0 = function(tree) {
			if(tree.min !== 0) {
				if(tree.variadic) {
					tree.min = 0;
				}
				else {
					NotImplementedException.__ks_sttc_throw_0([]);
				}
			}
			if(tree.isNode) {
				for(let __ks_0 in tree.columns) {
					const column = tree.columns[__ks_0];
					reduceMinToZero.__ks_0(column);
				}
			}
		};
		reduceMinToZero.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch) || KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 1) {
				if(t0(args[0])) {
					return reduceMinToZero.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function updateUnboundedTree() {
			return updateUnboundedTree.__ks_rt(this, arguments);
		};
		updateUnboundedTree.__ks_0 = function(tree, unlimited) {
			if(unlimited) {
				for(let __ks_0 = 0, __ks_1 = tree.order.length, hash; __ks_0 < __ks_1; ++__ks_0) {
					hash = tree.order[__ks_0];
					if(updateUnboundedTree4(tree, tree.columns[hash], true, 0, new Dictionary())) {
						tree.rest = true;
						tree.variadic = true;
						tree.max = Infinity;
					}
				}
			}
			else {
				for(let __ks_0 = 0, __ks_1 = tree.order.length, hash; __ks_0 < __ks_1; ++__ks_0) {
					hash = tree.order[__ks_0];
					updateUnboundedTree4(tree, tree.columns[hash], false, 0, new Dictionary());
				}
			}
		};
		updateUnboundedTree.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree);
			const t1 = KSType.isBoolean;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return updateUnboundedTree.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function updateUnboundedTree4() {
			return updateUnboundedTree4.__ks_rt(this, arguments);
		};
		updateUnboundedTree4.__ks_0 = function(tree, node, unlimited, min, __ks_arguments_1) {
			let unbounded = updateUnboundedTree5.__ks_0(node, unlimited, min, __ks_arguments_1 = KSHelper.concatDictionary(__ks_arguments_1));
			min += node.min;
			for(let __ks_0 = 0, __ks_1 = node.order.length, hash; __ks_0 < __ks_1; ++__ks_0) {
				hash = node.order[__ks_0];
				if(updateUnboundedTree4(tree, node.columns[hash], unlimited, min, __ks_arguments_1)) {
					unbounded = true;
				}
			}
			return unbounded;
		};
		updateUnboundedTree4.__ks_1 = function(tree, node, unlimited, min, __ks_arguments_1) {
			const unbounded = updateUnboundedTree5.__ks_0(node, unlimited, min, __ks_arguments_1 = KSHelper.concatDictionary(__ks_arguments_1));
			const __ks_function_1 = node.function.__ks_func_index_0();
			const row = node.rows[0];
			let from = (() => {
				const d = new Dictionary();
				d.variadic = false;
				d.index = 0;
				return d;
			})();
			let to = null;
			let last = null;
			const rests = new Dictionary();
			for(let __ks_0 = 0, __ks_1 = row.types.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = row.types[__ks_0];
				let argument = __ks_arguments_1[parameter.index];
				if(!KSType.isValue(argument)) {
					if(parameter.index >= 0) {
						argument = __ks_arguments_1[parameter.index - row.types.length];
					}
					else {
						argument = __ks_arguments_1[row.types.length + parameter.index];
					}
					if(!KSType.isValue(argument)) {
						continue;
					}
				}
				if(KSType.isValue(last) ? last.parameter === parameter.parameter : false) {
					if(argument.variadic === true) {
						if(last.to.variadic === true) {
							last.to.index = KSOperator.addOrConcat(last.to.index, KSOperator.addOrConcat(1, argument.steps));
						}
						else {
							last.to.variadic = true;
							last.to.index = KSOperator.addOrConcat(1, argument.steps);
						}
					}
					else {
						if(argument.steps === -1) {
							last.to = (() => {
								const d = new Dictionary();
								d.variadic = false;
								d.index = 0;
								return d;
							})();
						}
						else if(last.to.variadic === true) {
							last.to.index = KSOperator.addOrConcat(last.to.index, 1);
						}
						else {
							last.to.index = KSOperator.addOrConcat(last.to.index, argument.steps);
						}
					}
					if((last.to.variadic === true) && (rests[parameter.parameter] === true)) {
						argument.tree.max = argument.tree.min;
					}
				}
				else {
					if(from.variadic) {
						if(argument.variadic === true) {
							to = (() => {
								const d = new Dictionary();
								d.variadic = true;
								d.index = KSOperator.addOrConcat(from.index, 1, argument.steps);
								return d;
							})();
							if((argument.tree.min !== 0) && (KSOperator.eq(argument.tree.max, Infinity))) {
								rests[parameter.parameter] = true;
							}
						}
						else if(argument.steps === -1) {
							from = (() => {
								const d = new Dictionary();
								d.variadic = false;
								d.index = -getMinAfter.__ks_0(node.function);
								return d;
							})();
							to = (() => {
								const d = new Dictionary();
								d.variadic = false;
								d.index = 0;
								return d;
							})();
						}
						else {
							to = (() => {
								const d = new Dictionary();
								d.variadic = true;
								d.index = from.index + 1;
								return d;
							})();
						}
					}
					else if(argument.variadic === true) {
						to = (() => {
							const d = new Dictionary();
							d.variadic = true;
							d.index = KSOperator.addOrConcat(1, argument.steps);
							return d;
						})();
						if((argument.tree.min !== 0) && (KSOperator.eq(argument.tree.max, Infinity))) {
							rests[parameter.parameter] = true;
						}
					}
					else if(argument.steps === -1) {
						to = (() => {
							const d = new Dictionary();
							d.variadic = false;
							d.index = -getMinAfter.__ks_0(node.function);
							return d;
						})();
					}
					else if(argument.steps === 0) {
						to = (() => {
							const d = new Dictionary();
							d.variadic = false;
							d.index = from.index + 1;
							return d;
						})();
					}
					else {
						to = (() => {
							const d = new Dictionary();
							d.variadic = false;
							d.index = KSOperator.addOrConcat(from.index, argument.steps);
							return d;
						})();
					}
					last = TreeArgument(parameter.parameter, from, to);
					node.arguments.push(last);
				}
				from = to;
			}
			return unbounded;
		};
		updateUnboundedTree4.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree);
			const t1 = value => KSType.isStructInstance(value, TreeBranch);
			const t2 = KSType.isBoolean;
			const t3 = KSType.isNumber;
			const t4 = KSType.isDictionary;
			const t5 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 5) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						if(t2(args[2]) && t3(args[3]) && t4(args[4])) {
							return updateUnboundedTree4.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
						}
						throw KSHelper.badArgs();
					}
					if(t5(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
						return updateUnboundedTree4.__ks_1.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
					throw KSHelper.badArgs();
				}
			}
			throw KSHelper.badArgs();
		};
		function getMinAfter() {
			return getMinAfter.__ks_rt(this, arguments);
		};
		getMinAfter.__ks_0 = function(__ks_function_1) {
			if(__ks_function_1.__ks_func_isAsync_0()) {
				return __ks_function_1.__ks_func_getMinAfter_0() + 1;
			}
			else {
				return __ks_function_1.__ks_func_getMinAfter_0();
			}
		};
		getMinAfter.__ks_rt = function(that, args) {
			const t0 = value => KSType.isClassInstance(value, FunctionType);
			if(args.length === 1) {
				if(t0(args[0])) {
					return getMinAfter.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function updateUnboundedTree5() {
			return updateUnboundedTree5.__ks_rt(this, arguments);
		};
		updateUnboundedTree5.__ks_0 = function(tree, unlimited, min, __ks_arguments_1) {
			const parameter = getRowType.__ks_0(tree.rows[0], tree).parameter;
			let unbounded = unlimited && tree.rest;
			if((tree.type.__ks_func_isAny_0() === true) && (tree.type.__ks_func_isNullable_0() === true)) {
				tree.variadic = unbounded || (tree.min !== tree.max);
				if(unbounded) {
					const previousArgument = __ks_arguments_1[tree.index - 1];
					if(!((KSType.isValue(previousArgument) ? previousArgument.parameter === parameter : false) && (previousArgument.variadic === true))) {
						tree.max = KSOperator.negative(KSOperator.addOrConcat(min, getMaxMinAfter(tree)));
					}
				}
				if(KSType.isStructInstance(tree, TreeLeaf) || tree.rest) {
					__ks_arguments_1[tree.index] = (() => {
						const d = new Dictionary();
						d.tree = tree;
						d.variadic = false;
						d.steps = unbounded ? -1 : tree.min;
						d.parameter = parameter;
						return d;
					})();
				}
				else {
					__ks_arguments_1[tree.index] = (() => {
						const d = new Dictionary();
						d.tree = tree;
						d.variadic = tree.variadic;
						d.steps = tree.variadic ? 0 : tree.min;
						d.parameter = parameter;
						return d;
					})();
				}
			}
			else {
				if(unbounded) {
					for(let __ks_0 = 0, __ks_1 = tree.rows[0].types.length, type; __ks_0 < __ks_1 && unbounded; ++__ks_0) {
						type = tree.rows[0].types[__ks_0];
						if(type.parameter === parameter) {
							let argument = __ks_arguments_1[type.index];
							if(KSType.isValue(argument)) {
								if(KSOperator.eq(argument.tree.max, Infinity)) {
									unbounded = false;
								}
							}
						}
					}
				}
				tree.variadic = unbounded || (tree.min !== tree.max);
				if(unbounded && (tree.max >= 0)) {
					const previousArgument = __ks_arguments_1[tree.index - 1];
					if(!((KSType.isValue(previousArgument) ? previousArgument.parameter === parameter : false) && (previousArgument.variadic === true))) {
						tree.max = KSOperator.negative(KSOperator.addOrConcat(min, getMaxMinAfter(tree)));
					}
				}
				__ks_arguments_1[tree.index] = (() => {
					const d = new Dictionary();
					d.tree = tree;
					d.variadic = tree.variadic;
					d.steps = tree.variadic ? 0 : tree.min;
					d.parameter = parameter;
					return d;
				})();
			}
			return unbounded;
		};
		updateUnboundedTree5.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch) || KSType.isStructInstance(value, TreeLeaf);
			const t1 = KSType.isBoolean;
			const t2 = KSType.isNumber;
			const t3 = KSType.isDictionary;
			if(args.length === 4) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3])) {
					return updateUnboundedTree5.__ks_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		};
		const ArgCursor = KSHelper.struct(function(argument, index, length, spread, used) {
			const _ = new Dictionary();
			_.argument = argument;
			_.index = index;
			_.length = length;
			_.spread = spread;
			_.used = used;
			return _;
		}, function(__ks_new, args) {
			const t0 = value => KSType.isClassInstance(value, Type);
			const t1 = KSType.isNumber;
			const t2 = KSType.isBoolean;
			if(args.length === 5) {
				if(t0(args[0]) && t1(args[1]) && t1(args[2]) && t2(args[3]) && t1(args[4])) {
					return __ks_new(args[0], args[1], args[2], args[3], args[4]);
				}
			}
			throw KSHelper.badArgs();
		});
		const ArgMatches = KSHelper.struct(function(precise, __ks_arguments_1) {
			if(precise === void 0 || precise === null) {
				precise = true;
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				__ks_arguments_1 = [];
			}
			const _ = new Dictionary();
			_.precise = precise;
			_.arguments = __ks_arguments_1;
			return _;
		}, function(__ks_new, args) {
			const t0 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t1 = value => KSType.isArray(value, value => KSType.isNumber(value) || KSType.isArray(value, KSType.isNumber) || KSType.isNull(value)) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 2) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && KSHelper.isVarargs(args, 0, 1, t1, pts, 1) && te(pts, 2)) {
					return __ks_new(KSHelper.getVararg(args, 0, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			throw KSHelper.badArgs();
		});
		function getCursor() {
			return getCursor.__ks_rt(this, arguments);
		};
		getCursor.__ks_0 = function(index, __ks_arguments_1) {
			if(index >= __ks_arguments_1.length) {
				return ArgCursor(Type.Any, index, 0, false, 0);
			}
			const argument = __ks_arguments_1[index];
			const spread = argument.__ks_func_isSpread_0();
			if(spread === true) {
				return ArgCursor(argument, index, Infinity, spread, 0);
			}
			else {
				return ArgCursor(argument, index, 1, spread, 0);
			}
		};
		getCursor.__ks_rt = function(that, args) {
			const t0 = KSType.isNumber;
			const t1 = value => KSType.isArray(value, value => KSType.isClassInstance(value, Type));
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return getCursor.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function getNextCursor() {
			return getNextCursor.__ks_rt(this, arguments);
		};
		getNextCursor.__ks_0 = function(current, __ks_arguments_1, force) {
			if(force === void 0 || force === null) {
				force = false;
			}
			if((current.used >= current.length) || (force && (current.length !== 0))) {
				return getCursor.__ks_0(current.index + 1, __ks_arguments_1);
			}
			else {
				return current;
			}
		};
		getNextCursor.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, ArgCursor);
			const t1 = value => KSType.isArray(value, value => KSType.isClassInstance(value, Type));
			const t2 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 2 && args.length <= 3) {
				if(t0(args[0]) && t1(args[1]) && KSHelper.isVarargs(args, 0, 1, t2, pts = [2], 0) && te(pts, 1)) {
					return getNextCursor.__ks_0.call(that, args[0], args[1], KSHelper.getVararg(args, 2, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		};
		function toString() {
			return toString.__ks_rt(this, arguments);
		};
		toString.__ks_0 = function(cursor) {
			return KSHelper.concatString(cursor.index, ",", cursor.argument.__ks_func_hashCode_0(), ",", cursor.spread, ",", cursor.length, ",", cursor.used);
		};
		toString.__ks_1 = function(cursor) {
			if(cursor === void 0) {
				cursor = null;
			}
			return "null";
		};
		toString.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, ArgCursor);
			if(args.length === 1) {
				if(t0(args[0])) {
					return toString.__ks_0.call(that, args[0]);
				}
				return toString.__ks_1.call(that, args[0]);
			}
			throw KSHelper.badArgs();
		};
		function matchTree() {
			return matchTree.__ks_rt(this, arguments);
		};
		matchTree.__ks_0 = function(tree, context) {
			if(context.arguments.length === 0) {
				if(context.async) {
					context.found = true;
					const branch = getZeroBranch.__ks_0(tree);
					const __ks_function_1 = branch.function;
					const parameters = __ks_function_1.parameters();
					const __ks_arguments_1 = [];
					for(let __ks_0 = 0, __ks_1 = branch.rows[0].types.length - 1, type; __ks_0 < __ks_1; ++__ks_0) {
						type = branch.rows[0].types[__ks_0];
						if(parameters[type.parameter].isVarargs() === true) {
							__ks_arguments_1[type.parameter] = [];
						}
						else {
							__ks_arguments_1[type.parameter] = null;
						}
					}
					context.matches.push(CallMatch(__ks_function_1, __ks_arguments_1));
				}
				else {
					if(tree.min > 0) {
						return;
					}
					context.found = true;
					if(tree.order.length === 0) {
						const __ks_function_1 = tree.function;
						const parameters = __ks_function_1.__ks_func_parameters_0();
						const __ks_arguments_1 = [];
						for(let __ks_0 = 0, __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
							parameter = parameters[__ks_0];
							if(parameter.__ks_func_isVarargs_0() === true) {
								__ks_arguments_1.push([]);
							}
							else {
								__ks_arguments_1.push(null);
							}
						}
						context.matches.push(CallMatch(__ks_function_1, __ks_arguments_1));
					}
					else {
						const branch = getZeroBranch.__ks_0(tree);
						const __ks_function_1 = branch.function;
						const parameters = __ks_function_1.parameters();
						const __ks_arguments_1 = [];
						for(let __ks_0 = 0, __ks_1 = branch.rows[0].types.length, type; __ks_0 < __ks_1; ++__ks_0) {
							type = branch.rows[0].types[__ks_0];
							if(parameters[type.parameter].isVarargs() === true) {
								__ks_arguments_1[type.parameter] = [];
							}
							else {
								__ks_arguments_1[type.parameter] = null;
							}
						}
						context.matches.push(CallMatch(__ks_function_1, __ks_arguments_1));
					}
				}
			}
			else {
				const cursor = getCursor.__ks_0(0, context.arguments);
				if(cursor.argument.__ks_func_isUnion_0() === true) {
					const newContext = duplicateContext.__ks_0(context);
					for(let __ks_0 = 0, __ks_1 = cursor.argument.__ks_func_discardAlias_0().types(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
						type = __ks_1[__ks_0];
						let nf = true;
						for(let __ks_3 = 0, __ks_4 = tree.order.length, key; __ks_3 < __ks_4 && nf; ++__ks_3) {
							key = tree.order[__ks_3];
							if(matchTreeNode(tree, tree.columns[key], duplicateCursor(cursor, type), ArgMatches.__ks_new(), newContext)) {
								nf = false;
							}
						}
						if(nf) {
							return;
						}
					}
					if(newContext.found === true) {
						context.found = true;
						for(let __ks_0 = 0, __ks_1 = newContext.possibilities.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
							__ks_function_1 = newContext.possibilities[__ks_0];
							__ks_Array.__ks_func_pushUniq_0.call(context.possibilities, [__ks_function_1]);
						}
						for(let __ks_0 = 0, __ks_1 = newContext.matches.length, match; __ks_0 < __ks_1; ++__ks_0) {
							match = newContext.matches[__ks_0];
							pushUniqCallMatch(context.matches, match);
						}
					}
				}
				else {
					for(let __ks_0 = 0, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
						key = tree.order[__ks_0];
						if(matchTreeNode(tree, tree.columns[key], duplicateCursor.__ks_0(cursor), ArgMatches.__ks_new(), context)) {
							return;
						}
					}
				}
			}
		};
		matchTree.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree);
			const t1 = value => KSType.isStructInstance(value, MatchContext);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return matchTree.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function pushUniqCallMatch() {
			return pushUniqCallMatch.__ks_rt(this, arguments);
		};
		pushUniqCallMatch.__ks_0 = function(matches, newMatch) {
			for(let __ks_0 = 0, __ks_1 = matches.length, match; __ks_0 < __ks_1; ++__ks_0) {
				match = matches[__ks_0];
				if((match.function !== newMatch.funcion) || (match.arguments.length !== newMatch.arguments.length)) {
					return;
				}
				for(let index = 0, __ks_2 = newMatch.arguments.length, value; index < __ks_2; ++index) {
					value = newMatch.arguments[index];
					if(match.arguments[index] !== value) {
						return;
					}
				}
			}
			matches.push(newMatch);
		};
		pushUniqCallMatch.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			if(args.length === 2) {
				if(t0(args[0]) && t0(args[1])) {
					return pushUniqCallMatch.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function duplicateContext() {
			return duplicateContext.__ks_rt(this, arguments);
		};
		duplicateContext.__ks_0 = function(context) {
			return MatchContext.__ks_new(context.async, false, context.arguments, context.excludes, [], []);
		};
		duplicateContext.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, MatchContext);
			if(args.length === 1) {
				if(t0(args[0])) {
					return duplicateContext.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function duplicateCursor() {
			return duplicateCursor.__ks_rt(this, arguments);
		};
		duplicateCursor.__ks_0 = function(cursor, type) {
			if(type === void 0 || type === null) {
				type = cursor.argument;
			}
			return ArgCursor.__ks_new(type, cursor.index, cursor.length, cursor.spread, cursor.used);
		};
		duplicateCursor.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, ArgCursor);
			const t1 = value => KSType.isClassInstance(value, Type) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && te(pts, 1)) {
					return duplicateCursor.__ks_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		};
		function getZeroBranch() {
			return getZeroBranch.__ks_rt(this, arguments);
		};
		getZeroBranch.__ks_0 = function(tree) {
			const column = tree.columns[__ks_Array.__ks_func_last_0.call(tree.order)];
			if(column.isNode) {
				return getZeroBranch(column);
			}
			else {
				return column;
			}
		};
		getZeroBranch.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree) || KSType.isStructInstance(value, TreeBranch);
			if(args.length === 1) {
				if(t0(args[0])) {
					return getZeroBranch.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function matchTreeNode() {
			return matchTreeNode.__ks_rt(this, arguments);
		};
		matchTreeNode.__ks_0 = function(tree, branch, cursor, argMatches, context) {
			({cursor, argMatches} = matchArguments(branch, context.arguments, cursor, argMatches));
			if(!KSType.isValue(cursor)) {
				return false;
			}
			for(let __ks_0 = 0, __ks_1 = branch.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = branch.order[__ks_0];
				if(matchTreeNode(tree, branch.columns[key], cursor, ArgMatches(argMatches.precise, [...argMatches.arguments]), context)) {
					return true;
				}
			}
			return false;
		};
		matchTreeNode.__ks_1 = function(tree, leaf, cursor, argMatches, context) {
			if(!leaf.function.__ks_func_isAsync_0()) {
				({cursor, argMatches} = matchArguments(leaf, context.arguments, cursor, argMatches));
				if(!KSType.isValue(cursor) || (KSOperator.lte(KSOperator.addOrConcat(cursor.index, 1), context.arguments.length) && (cursor.used === 0))) {
					return false;
				}
			}
			const parameters = leaf.function.__ks_func_parameters_1(context.excludes);
			const match = [];
			let length = 0;
			const types = leaf.rows[0].types;
			for(let pIndex = 0, __ks_0 = parameters.length, parameter; pIndex < __ks_0; ++pIndex) {
				parameter = parameters[pIndex];
				let pMatch = null;
				for(let __ks_1 = 0, __ks_2 = types.length, type; __ks_1 < __ks_2; ++__ks_1) {
					type = types[__ks_1];
					if(type.parameter === pIndex) {
						const index = (type.index >= 0) ? type.index : parameters.length + type.index;
						if(KSOperator.lt(index, argMatches.arguments.length)) {
							const arg = argMatches.arguments[index];
							if(KSType.isValue(pMatch) && KSType.isArray(pMatch)) {
								pMatch.push.apply(pMatch, [].concat(arg));
								length = KSOperator.addOrConcat(length, arg.length);
							}
							else if(parameter.__ks_func_isVarargs_0() === true) {
								if(KSType.isValue(arg)) {
									pMatch = arg;
									length = KSOperator.addOrConcat(length, Math.max(parameter.__ks_func_min_2(), arg.length));
								}
								else {
									pMatch = [];
									length += parameter.__ks_func_min_2();
								}
							}
							else {
								pMatch = arg[0];
								++length;
							}
						}
					}
				}
				if(!KSType.isValue(pMatch) && (parameter.__ks_func_isVarargs_0() === true)) {
					pMatch = [];
				}
				match.push(pMatch);
			}
			if(leaf.function.__ks_func_isAsync_0()) {
				if(!KSOperator.gte(KSOperator.addOrConcat(length, 1), tree.min)) {
					return false;
				}
			}
			else {
				if(!KSOperator.gte(length, tree.min)) {
					return false;
				}
			}
			context.found = true;
			if(!(argMatches.precise === true) || KSOperator.lt(cursor.index, context.arguments.length)) {
				__ks_Array.__ks_func_pushUniq_0.call(context.possibilities, [leaf.function]);
				return false;
			}
			else {
				context.matches.push(CallMatch.__ks_new(leaf.function, match));
				return true;
			}
		};
		matchTreeNode.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Tree);
			const t1 = value => KSType.isStructInstance(value, TreeBranch);
			const t2 = value => KSType.isStructInstance(value, ArgCursor);
			const t3 = value => KSType.isStructInstance(value, ArgMatches);
			const t4 = value => KSType.isStructInstance(value, MatchContext);
			const t5 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 5) {
				if(t0(args[0])) {
					if(t1(args[1])) {
						if(t2(args[2]) && t3(args[3]) && t4(args[4])) {
							return matchTreeNode.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4]);
						}
						throw KSHelper.badArgs();
					}
					if(t5(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4])) {
						return matchTreeNode.__ks_1.call(that, args[0], args[1], args[2], args[3], args[4]);
					}
					throw KSHelper.badArgs();
				}
			}
			throw KSHelper.badArgs();
		};
		function matchArguments() {
			return matchArguments.__ks_rt(this, arguments);
		};
		matchArguments.__ks_0 = function(node, __ks_arguments_1, cursor, argMatches) {
			const last = __ks_arguments_1.length - 1;
			if((node.min === 0) && (cursor.index > last)) {
				argMatches.arguments.push([]);
				return (() => {
					const d = new Dictionary();
					d.cursor = cursor;
					d.argMatches = argMatches;
					return d;
				})();
			}
			if((node.min !== 0) && (((cursor.index + node.min) - 1) > last)) {
				return new Dictionary();
			}
			if(node.max === 1) {
				if(cursor.spread) {
					const argument = cursor.argument.parameter();
					if(argument.isAssignableToVariable(node.type, false, false, false) === true) {
						++cursor.used;
						argMatches.arguments.push([cursor.index]);
						return (() => {
							const d = new Dictionary();
							d.cursor = cursor;
							d.argMatches = argMatches;
							return d;
						})();
					}
					else if(argument.isAssignableToVariable(node.type, true, true, false) === true) {
						argMatches.precise = false;
						++cursor.used;
						argMatches.arguments.push([cursor.index]);
						return (() => {
							const d = new Dictionary();
							d.cursor = cursor;
							d.argMatches = argMatches;
							return d;
						})();
					}
				}
				else {
					if(cursor.argument.__ks_func_isAssignableToVariable_2(node.type, false, false, false)) {
						++cursor.used;
						argMatches.arguments.push([cursor.index]);
						cursor = getNextCursor.__ks_0(cursor, __ks_arguments_1);
						return (() => {
							const d = new Dictionary();
							d.cursor = cursor;
							d.argMatches = argMatches;
							return d;
						})();
					}
					else if(cursor.argument.__ks_func_isAssignableToVariable_2(node.type, true, false, false)) {
						argMatches.precise = false;
						++cursor.used;
						argMatches.arguments.push([cursor.index]);
						cursor = getNextCursor.__ks_0(cursor, __ks_arguments_1);
						return (() => {
							const d = new Dictionary();
							d.cursor = cursor;
							d.argMatches = argMatches;
							return d;
						})();
					}
				}
				if(KSOperator.eq(cursor.length, Infinity)) {
					argMatches.precise = false;
					return matchArguments.__ks_0(node, __ks_arguments_1, getNextCursor.__ks_0(cursor, __ks_arguments_1, true), argMatches);
				}
				if(node.min === 0) {
					argMatches.arguments.push([]);
					return (() => {
						const d = new Dictionary();
						d.cursor = cursor;
						d.argMatches = argMatches;
						return d;
					})();
				}
				else {
					return new Dictionary();
				}
			}
			else {
				let i = 0;
				const matches = [];
				while(i < node.min) {
					if(cursor.spread) {
						if(cursor.argument.parameter().isAssignableToVariable(node.type) === true) {
							++cursor.used;
							matches.push(cursor.index);
							argMatches.arguments.push(matches);
							return (() => {
								const d = new Dictionary();
								d.cursor = cursor;
								d.argMatches = argMatches;
								return d;
							})();
						}
						else {
							return new Dictionary();
						}
					}
					else {
						if(!cursor.argument.__ks_func_isAssignableToVariable_2(node.type, true, false, false)) {
							return new Dictionary();
						}
					}
					++i;
					++cursor.used;
					matches.push(cursor.index);
					cursor = getNextCursor.__ks_0(cursor, __ks_arguments_1);
				}
				if(node.max <= 0) {
					const last = Math.min(__ks_arguments_1.length - 1, ((cursor.index + __ks_arguments_1.length) - 1) + node.max);
					while(KSOperator.lte(cursor.index, last)) {
						if(cursor.argument.__ks_func_isSpread_0() === true) {
							if(!(cursor.argument.parameter(0).isAssignableToVariable(node.type, true, false, false) === true)) {
								break;
							}
						}
						else if(!cursor.argument.__ks_func_isAssignableToVariable_2(node.type, true, false, false)) {
							break;
						}
						++i;
						++cursor.used;
						matches.push(cursor.index);
						if(cursor.argument.__ks_func_isSpread_0() === true) {
							cursor = getNextCursor.__ks_0(cursor, __ks_arguments_1, true);
						}
						else {
							cursor = getNextCursor.__ks_0(cursor, __ks_arguments_1);
						}
					}
				}
				else {
					while((i < node.max) && (KSType.isValue(cursor) ? cursor.index <= last : false)) {
						if(!cursor.argument.__ks_func_isAssignableToVariable_2(node.type, true, false, false)) {
							break;
						}
						++i;
						++cursor.used;
						matches.push(cursor.index);
						cursor = getNextCursor.__ks_0(cursor, __ks_arguments_1);
					}
				}
				argMatches.arguments.push(matches);
				return (() => {
					const d = new Dictionary();
					d.cursor = cursor;
					d.argMatches = argMatches;
					return d;
				})();
			}
		};
		matchArguments.__ks_1 = function(assessment, __ks_arguments_1, excludes) {
			let combinations = [[]];
			for(let __ks_0 = 0, __ks_1 = __ks_arguments_1.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = __ks_arguments_1[__ks_0];
				if(argument.isUnion() === true) {
					const oldCombinations = combinations;
					combinations = [];
					for(let __ks_2 = 0, __ks_3 = oldCombinations.length, oldCombination; __ks_2 < __ks_3; ++__ks_2) {
						oldCombination = oldCombinations[__ks_2];
						for(let __ks_4 = 0, __ks_5 = argument.discardAlias().types(), __ks_6 = __ks_5.length, type; __ks_4 < __ks_6; ++__ks_4) {
							type = __ks_5[__ks_4];
							combinations.push([...oldCombination, type]);
						}
					}
				}
				else {
					for(let __ks_2 = 0, __ks_3 = combinations.length, combination; __ks_2 < __ks_3; ++__ks_2) {
						combination = combinations[__ks_2];
						combination.push(argument);
					}
				}
			}
			if(combinations.length === 1) {
				const context = MatchContext.__ks_new(assessment.async, void 0, combinations[0], excludes);
				for(let __ks_0 = 0, __ks_1 = assessment.trees.length, tree; __ks_0 < __ks_1; ++__ks_0) {
					tree = assessment.trees[__ks_0];
					matchTree.__ks_0(tree, context);
					if(context.found && (context.matches.length > 0) && (context.possibilities.length === 0)) {
						return PreciseCallMatchResult.__ks_new(context.matches);
					}
				}
				if(context.found) {
					for(let __ks_0 = 0, __ks_1 = context.matches.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
						({function: __ks_function_1} = context.matches[__ks_0]);
						__ks_Array.__ks_func_pushUniq_0.call(context.possibilities, [__ks_function_1]);
					}
					return LenientCallMatchResult.__ks_new(context.possibilities);
				}
			}
			else {
				const results = [];
				for(let __ks_0 = 0, __ks_1 = combinations.length, combination; __ks_0 < __ks_1; ++__ks_0) {
					combination = combinations[__ks_0];
					const context = MatchContext.__ks_new(assessment.async, void 0, combination, excludes);
					let nf = true;
					for(let __ks_2 = 0, __ks_3 = assessment.trees.length, tree; __ks_2 < __ks_3 && nf; ++__ks_2) {
						tree = assessment.trees[__ks_2];
						matchTree.__ks_0(tree, context);
						if(context.found && (context.matches.length > 0) && (context.possibilities.length === 0)) {
							results.push(PreciseCallMatchResult.__ks_new(context.matches));
							nf = false;
						}
					}
					if(context.found) {
						if(nf) {
							for(let __ks_2 = 0, __ks_3 = context.matches.length, __ks_function_1; __ks_2 < __ks_3; ++__ks_2) {
								({function: __ks_function_1} = context.matches[__ks_2]);
								__ks_Array.__ks_func_pushUniq_0.call(context.possibilities, [__ks_function_1]);
							}
							results.push(LenientCallMatchResult.__ks_new(context.possibilities));
						}
					}
					else {
						return null;
					}
				}
				return mergeResults.__ks_0(results);
			}
			return null;
		};
		matchArguments.__ks_2 = function(assessment, __ks_arguments_1, exhaustive, node) {
			if(exhaustive === void 0 || exhaustive === null) {
				exhaustive = false;
			}
			if((assessment.trees.length === 0) && (__ks_arguments_1.length === 0)) {
				return PreciseCallMatchResult.__ks_new([]);
			}
			const nameds = new Dictionary();
			const shorthands = new Dictionary();
			const indexeds = [];
			const types = [];
			let namedCount = 0;
			let shortCount = 0;
			const invalids = new Dictionary();
			if(assessment.macro) {
				for(let index = 0, __ks_0 = __ks_arguments_1.length, argument; index < __ks_0; ++index) {
					argument = __ks_arguments_1[index];
					indexeds.push(NamingArgument.__ks_new(index, void 0, argument, false));
					types.push(argument);
				}
			}
			else {
				for(let index = 0, __ks_0 = __ks_arguments_1.length, argument; index < __ks_0; ++index) {
					argument = __ks_arguments_1[index];
					if(KSType.isClassInstance(argument, NamedArgument)) {
						const name = argument.__ks_func_name_17();
						if(KSType.isValue(nameds[name])) {
							throw new NotSupportedException();
						}
						nameds[name] = NamingArgument(index, name, argument.__ks_func_type_22(), true);
						++namedCount;
						if(KSType.isValue(shorthands[name])) {
							delete shorthands[name];
							--shortCount;
						}
					}
					else if(KSType.isClassInstance(argument, IdentifierLiteral)) {
						const name = argument.__ks_func_name_13();
						if(argument.__ks_func_variable_1().isPredefined() === true) {
							indexeds.push(NamingArgument(index, void 0, argument.__ks_func_type_22(), false));
						}
						else if(!KSType.isValue(nameds[name]) && !KSType.isValue(invalids[name])) {
							if(KSType.isValue(shorthands[name])) {
								invalids[name] = true;
								indexeds.push(shorthands[name], NamingArgument(index, void 0, argument.__ks_func_type_22(), false));
								delete shorthands[name];
								--shortCount;
							}
							else {
								++shortCount;
								shorthands[name] = NamingArgument(index, name, argument.__ks_func_type_22(), false);
							}
						}
						else {
							indexeds.push(NamingArgument(index, void 0, argument.__ks_func_type_22(), false));
						}
					}
					else {
						indexeds.push(NamingArgument(index, void 0, argument.__ks_func_type_22(), false));
					}
					types.push(argument.__ks_func_type_22());
				}
			}
			if((namedCount > 0) || (shortCount > 0)) {
				return matchNamedArguments3.__ks_0(assessment, types, nameds, shorthands, indexeds, exhaustive, node);
			}
			else {
				return matchArguments.__ks_1(assessment, types, []);
			}
		};
		matchArguments.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Assessement);
			const t1 = value => KSType.isArray(value, value => KSType.isClassInstance(value, Expression));
			const t2 = value => KSType.isClassInstance(value, AbstractNode);
			const t3 = value => KSType.isArray(value, KSType.isString);
			const t4 = value => KSType.isBoolean(value) || KSType.isNull(value);
			const t5 = value => KSType.isStructInstance(value, TreeNode);
			const t6 = value => KSType.isArray(value, value => KSType.isClassInstance(value, Type));
			const t7 = value => KSType.isStructInstance(value, ArgCursor);
			const t8 = value => KSType.isStructInstance(value, ArgMatches);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1])) {
					if(t2(args[2])) {
						return matchArguments.__ks_2.call(that, args[0], args[1], void 0, args[2]);
					}
					if(t3(args[2])) {
						return matchArguments.__ks_1.call(that, args[0], args[1], args[2]);
					}
					throw KSHelper.badArgs();
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 4) {
				if(t0(args[0])) {
					if(t1(args[1]) && t4(args[2]) && t2(args[3])) {
						return matchArguments.__ks_2.call(that, args[0], args[1], args[2], args[3]);
					}
					throw KSHelper.badArgs();
				}
				if(t5(args[0]) && t6(args[1]) && t7(args[2]) && t8(args[3])) {
					return matchArguments.__ks_0.call(that, args[0], args[1], args[2], args[3]);
				}
			}
			throw KSHelper.badArgs();
		};
		function mergeResults() {
			return mergeResults.__ks_rt(this, arguments);
		};
		mergeResults.__ks_0 = function(results) {
			if(results.length === 0) {
				return null;
			}
			else if(results.length === 1) {
				return results[0];
			}
			if(results.every((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 3) {
						if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (result, __ks_0, __ks_1) => {
					return KSType.isStructInstance(result, PreciseCallMatchResult);
				};
				return __ks_rt;
			})()) === true) {
				const perFunctions = new Dictionary();
				let precise = true;
				for(let __ks_0 = 0, __ks_1 = results.length, matches; __ks_0 < __ks_1 && precise; ++__ks_0) {
					({matches} = results[__ks_0]);
					for(let __ks_2 = 0, __ks_3 = matches.length, match; __ks_2 < __ks_3 && precise; ++__ks_2) {
						match = matches[__ks_2];
						let result = perFunctions[match.function.__ks_func_index_0()];
						if(KSType.isValue(result)) {
							if(!__ks_Array._sm_same(result.arguments, match.arguments)) {
								precise = false;
							}
						}
						else {
							perFunctions[match.function.__ks_func_index_0()] = match;
						}
					}
				}
				if(precise) {
					return PreciseCallMatchResult.__ks_new(KSHelper.mapDictionary(perFunctions, function(__ks_0, match) {
						return match;
					}));
				}
			}
			const possibilities = [];
			for(let __ks_0 = 0, __ks_1 = results.length, result; __ks_0 < __ks_1; ++__ks_0) {
				result = results[__ks_0];
				if(KSType.isStructInstance(result, LenientCallMatchResult)) {
					__ks_Array.__ks_func_pushUniq_0.call(possibilities, result.possibilities);
				}
				else {
					for(let __ks_2 = 0, __ks_3 = result.matches.length, __ks_function_1; __ks_2 < __ks_3; ++__ks_2) {
						({function: __ks_function_1} = result.matches[__ks_2]);
						__ks_Array.__ks_func_pushUniq_0.call(possibilities, [__ks_function_1]);
					}
				}
			}
			return LenientCallMatchResult.__ks_new(possibilities);
		};
		mergeResults.__ks_rt = function(that, args) {
			const t0 = value => KSType.isArray(value, value => KSType.isStructInstance(value, PreciseCallMatchResult) || KSType.isStructInstance(value, LenientCallMatchResult));
			if(args.length === 1) {
				if(t0(args[0])) {
					return mergeResults.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function matchNamedArguments3() {
			return matchNamedArguments3.__ks_rt(this, arguments);
		};
		matchNamedArguments3.__ks_0 = function(assessment, __ks_arguments_1, nameds, shorthands, indexeds, exhaustive, node) {
			let combinations = [[]];
			for(let __ks_0 = 0, __ks_1 = __ks_arguments_1.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = __ks_arguments_1[__ks_0];
				if(type.__ks_func_isUnion_0() === true) {
					const oldCombinations = combinations;
					combinations = [];
					let nullable = false;
					for(let __ks_2 = 0, __ks_3 = oldCombinations.length, oldCombination; __ks_2 < __ks_3; ++__ks_2) {
						oldCombination = oldCombinations[__ks_2];
						for(let __ks_4 = 0, __ks_5 = type.__ks_func_discardAlias_0().types(), __ks_6 = __ks_5.length, __ks_type_1; __ks_4 < __ks_6; ++__ks_4) {
							__ks_type_1 = __ks_5[__ks_4];
							const combination = [...oldCombination];
							if((__ks_type_1.isNullable() === true) && !((__ks_type_1.isAny() === true) || (__ks_type_1.isNull() === true))) {
								combination.push(__ks_type_1.setNullable(false));
								nullable = true;
							}
							else {
								combination.push(__ks_type_1);
							}
							combinations.push(combination);
						}
						if(nullable) {
							const combination = [...oldCombination, Type.Null];
							combinations.push(combination);
						}
					}
				}
				else if((type.__ks_func_isNullable_0() === true) && !((type.__ks_func_isAny_0() === true) || (type.__ks_func_isNull_0() === true))) {
					const oldCombinations = combinations;
					combinations = [];
					for(let __ks_2 = 0, __ks_3 = oldCombinations.length, oldCombination; __ks_2 < __ks_3; ++__ks_2) {
						oldCombination = oldCombinations[__ks_2];
						const combination1 = [...oldCombination, type.__ks_func_setNullable_0(false)];
						const combination2 = [...oldCombination, Type.Null];
						combinations.push(combination1, combination2);
					}
				}
				else {
					for(let __ks_2 = 0, __ks_3 = combinations.length, combination; __ks_2 < __ks_3; ++__ks_2) {
						combination = combinations[__ks_2];
						combination.push(type);
					}
				}
			}
			const results = [];
			for(let __ks_0 = 0, __ks_1 = combinations.length, combination; __ks_0 < __ks_1; ++__ks_0) {
				combination = combinations[__ks_0];
				let result = matchNamedArguments4.__ks_0(assessment, combination, nameds, shorthands, [...indexeds], exhaustive, node);
				if(KSType.isValue(result)) {
					results.push(result);
				}
				else {
					return null;
				}
			}
			return mergeResults.__ks_0(results);
		};
		matchNamedArguments3.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Assessement);
			const t1 = value => KSType.isArray(value, value => KSType.isClassInstance(value, Type));
			const t2 = value => KSType.isDictionary(value, value => KSType.isStructInstance(value, NamingArgument));
			const t3 = value => KSType.isArray(value, value => KSType.isStructInstance(value, NamingArgument));
			const t4 = KSType.isBoolean;
			const t5 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 7) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t2(args[3]) && t3(args[4]) && t4(args[5]) && t5(args[6])) {
					return matchNamedArguments3.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
				}
			}
			throw KSHelper.badArgs();
		};
		function matchNamedArguments4() {
			return matchNamedArguments4.__ks_rt(this, arguments);
		};
		matchNamedArguments4.__ks_0 = function(assessment, argumentTypes, nameds, shorthands, indexeds, exhaustive, node) {
			const perNames = new Dictionary();
			for(const key in assessment.functions) {
				const __ks_function_1 = assessment.functions[key];
				for(let index = 0, __ks_0 = __ks_function_1.__ks_func_parameters_0(), __ks_1 = __ks_0.length, parameter; index < __ks_1; ++index) {
					parameter = __ks_0[index];
					const name = parameter.__ks_func_name_3();
					const type = parameter.__ks_func_type_0();
					let parameters = perNames[name];
					if(KSType.isValue(parameters)) {
						parameters.push((() => {
							const d = new Dictionary();
							d.function = key;
							d.type = type;
							d.index = index;
							return d;
						})());
					}
					else {
						perNames[name] = [(() => {
							const d = new Dictionary();
							d.function = key;
							d.type = type;
							d.index = index;
							return d;
						})()];
					}
				}
			}
			let possibleFunctions = Dictionary.keys(assessment.functions);
			const preciseness = new Dictionary();
			const excludes = Dictionary.keys(nameds);
			for(let __ks_0 = 0, __ks_1 = possibleFunctions.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = possibleFunctions[__ks_0];
				preciseness[key] = true;
			}
			for(const name in nameds) {
				const argument = nameds[name];
				let parameters = perNames[name];
				if(KSType.isValue(parameters)) {
					const argumentType = argumentTypes[argument.index];
					const matchedFunctions = [];
					for(let __ks_0 = 0, __ks_1 = parameters.length, __ks_function_1, type; __ks_0 < __ks_1; ++__ks_0) {
						({function: __ks_function_1, type} = parameters[__ks_0]);
						if(argumentType.isAssignableToVariable(type, false, false, false, true)) {
							matchedFunctions.push(__ks_function_1);
						}
						else if(type.isAssignableToVariable(argumentType, true, false, false, true) === true) {
							matchedFunctions.push(__ks_function_1);
							preciseness[__ks_function_1] = false;
						}
					}
					const functions = __ks_Array.__ks_func_intersection_0.call(possibleFunctions, [matchedFunctions]);
					if(exhaustive) {
						if(functions.length === 0) {
							return null;
						}
						else {
							possibleFunctions = functions;
						}
					}
					else {
						if(functions.length !== 0) {
							possibleFunctions = functions;
						}
					}
				}
				else {
					return null;
				}
			}
			if(__ks_Dictionary.__ks_sttc_isEmpty_0(shorthands)) {
				return matchNamedArguments5.__ks_0(assessment, argumentTypes, nameds, shorthands, indexeds, possibleFunctions, preciseness, excludes, node);
			}
			else {
				const perFunctions = new Dictionary();
				for(let __ks_0 = 0, __ks_1 = possibleFunctions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
					__ks_function_1 = possibleFunctions[__ks_0];
					perFunctions[__ks_function_1] = (() => {
						const d = new Dictionary();
						d.preciseness = preciseness[__ks_function_1];
						d.shorthands = new Dictionary();
						d.indexeds = [];
						return d;
					})();
				}
				for(const name in shorthands) {
					const argument = shorthands[name];
					let parameters = perNames[name];
					if(KSType.isValue(parameters)) {
						const argumentType = argumentTypes[argument.index];
						let matched = false;
						for(let __ks_0 = 0, __ks_1 = possibleFunctions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
							__ks_function_1 = possibleFunctions[__ks_0];
							let type, __ks_2;
							if(KSType.isValue(__ks_2 = parameters.find((() => {
								const __ks_rt = (...args) => {
									const t0 = KSType.isValue;
									if(args.length === 3) {
										if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
											return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
										}
									}
									throw KSHelper.badArgs();
								};
								__ks_rt.__ks_0 = (data, __ks_0, __ks_1) => {
									return data.function === __ks_function_1;
								};
								return __ks_rt;
							})())) ? ({type} = __ks_2, true) : false) {
								if(argumentType.isAssignableToVariable(type, false, false, false, true)) {
									matched = true;
									perFunctions[__ks_function_1].shorthands[name] = argument;
								}
								else if(type.isAssignableToVariable(argumentType, true, true, false, true) === true) {
									matched = true;
									perFunctions[__ks_function_1].shorthands[name] = argument;
									perFunctions[__ks_function_1].preciseness = false;
								}
								else {
									perFunctions[__ks_function_1].indexeds.push(argument);
								}
							}
							else {
								perFunctions[__ks_function_1].indexeds.push(argument);
							}
						}
						if(!matched) {
							indexeds.push(argument);
						}
					}
					else {
						indexeds.push(argument);
					}
				}
				const perArguments = new Dictionary();
				for(const key in perFunctions) {
					const {shorthands, indexeds, preciseness} = perFunctions[key];
					const hash = Dictionary.keys(shorthands).join();
					if(KSOperator.gt(hash.length, 0)) {
						let perArgument = perArguments[hash];
						if(KSType.isValue(perArgument)) {
							perArgument.functions.push(key);
							perArgument.preciseness[key] = preciseness;
						}
						else {
							perArguments[hash] = (() => {
								const d = new Dictionary();
								d.functions = [key];
								d.preciseness = (() => {
									const d = new Dictionary();
									d[key] = preciseness;
									return d;
								})();
								d.shorthands = shorthands;
								d.indexeds = indexeds;
								return d;
							})();
						}
					}
				}
				if(__ks_Dictionary.__ks_sttc_isEmpty_0(perArguments)) {
					return matchNamedArguments5.__ks_0(assessment, argumentTypes, nameds, new Dictionary(), indexeds, possibleFunctions, preciseness, excludes, node);
				}
				else {
					for(let __ks_0 in perArguments) {
						const perArgument = perArguments[__ks_0];
						let result = matchNamedArguments5(assessment, argumentTypes, nameds, perArgument.shorthands, [...indexeds, ...perArgument.indexeds], perArgument.functions, perArgument.preciseness, [...excludes, ...Dictionary.keys(perArgument.shorthands)], node);
						if(KSType.isValue(result)) {
							return result;
						}
					}
					return matchNamedArguments5.__ks_0(assessment, argumentTypes, nameds, new Dictionary(), [...indexeds, ...Dictionary.values(shorthands)], possibleFunctions, preciseness, excludes, node);
				}
			}
		};
		matchNamedArguments4.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Assessement);
			const t1 = value => KSType.isArray(value, value => KSType.isClassInstance(value, Type));
			const t2 = value => KSType.isDictionary(value, value => KSType.isStructInstance(value, NamingArgument));
			const t3 = value => KSType.isArray(value, value => KSType.isStructInstance(value, NamingArgument));
			const t4 = KSType.isBoolean;
			const t5 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 7) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t2(args[3]) && t3(args[4]) && t4(args[5]) && t5(args[6])) {
					return matchNamedArguments4.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
				}
			}
			throw KSHelper.badArgs();
		};
		function matchNamedArguments5() {
			return matchNamedArguments5.__ks_rt(this, arguments);
		};
		matchNamedArguments5.__ks_0 = function(assessment, argumentTypes, nameds, shorthands, indexeds, possibleFunctions, preciseness, excludes, node) {
			if(indexeds.length === 0) {
				possibleFunctions = possibleFunctions.filter((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (key, __ks_0, __ks_1) => {
						return assessment.functions[key].__ks_func_min_1(excludes) === 0;
					};
					return __ks_rt;
				})());
				if(possibleFunctions.length === 0) {
					return null;
				}
				const preciseFunctions = possibleFunctions.filter((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (key, __ks_0, __ks_1) => {
						return preciseness[key];
					};
					return __ks_rt;
				})());
				if(preciseFunctions.length === possibleFunctions.length) {
					let max = Infinity;
					for(let __ks_0 = 0, __ks_1 = preciseFunctions.length, key; __ks_0 < __ks_1; ++__ks_0) {
						key = preciseFunctions[__ks_0];
						const m = assessment.functions[key].__ks_func_max_0();
						if(m < max) {
							max = m;
						}
					}
					const shortestFunctions = preciseFunctions.filter((() => {
						const __ks_rt = (...args) => {
							const t0 = KSType.isValue;
							if(args.length === 3) {
								if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
									return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
								}
							}
							throw KSHelper.badArgs();
						};
						__ks_rt.__ks_0 = (key, __ks_0, __ks_1) => {
							return assessment.functions[key].__ks_func_max_0() === max;
						};
						return __ks_rt;
					})());
					const __ks_function_1 = getMostPreciseFunction.__ks_0(KSHelper.mapArray(shortestFunctions, function(key) {
						return assessment.functions[key];
					}), nameds, shorthands);
					const __ks_arguments_1 = [];
					let namedLefts = __ks_Dictionary.__ks_sttc_length_0(nameds) + __ks_Dictionary.__ks_sttc_length_0(shorthands);
					for(let __ks_0 = 0, __ks_1 = __ks_function_1.parameters(), __ks_2 = __ks_1.length, parameter; __ks_0 < __ks_2; ++__ks_0) {
						parameter = __ks_1[__ks_0];
						const name = parameter.name();
						let argument = nameds[name];
						if(KSType.isValue(argument)) {
							__ks_arguments_1.push(argument.index);
							--namedLefts;
						}
						else if(KSType.isValue((argument = shorthands[name]))) {
							__ks_arguments_1.push(argument.index);
							--namedLefts;
						}
						else {
							if(namedLefts > 0) {
								__ks_arguments_1.push(null);
							}
						}
					}
					const match = CallMatch(__ks_function_1, __ks_arguments_1);
					return PreciseCallMatchResult.__ks_new([match]);
				}
				else {
					const possibilities = [];
					let __ks_arguments_1 = null;
					for(let __ks_0 = 0, __ks_1 = possibleFunctions.length, key; __ks_0 < __ks_1; ++__ks_0) {
						key = possibleFunctions[__ks_0];
						const __ks_function_1 = assessment.functions[key];
						const args = [];
						let namedLefts = __ks_Dictionary.__ks_sttc_length_0(nameds) + __ks_Dictionary.__ks_sttc_length_0(shorthands);
						for(let __ks_2 = 0, __ks_3 = __ks_function_1.__ks_func_parameters_0(), __ks_4 = __ks_3.length, parameter; __ks_2 < __ks_4; ++__ks_2) {
							parameter = __ks_3[__ks_2];
							const name = parameter.__ks_func_name_3();
							let argument = nameds[name];
							if(KSType.isValue(argument)) {
								args.push(argument.index);
								--namedLefts;
							}
							else if(KSType.isValue((argument = shorthands[name]))) {
								args.push(argument.index);
								--namedLefts;
							}
							else {
								if(namedLefts > 0) {
									args.push(null);
								}
							}
						}
						if(__ks_arguments_1 === null) {
							__ks_arguments_1 = args;
						}
						else if(!__ks_Array.__ks_sttc_same_0(__ks_arguments_1, args)) {
							throw new NotSupportedException();
						}
						possibilities.push(__ks_function_1);
					}
					if(__ks_arguments_1 === null) {
						return LenientCallMatchResult.__ks_new(possibilities);
					}
					else {
						return LenientCallMatchResult(possibilities, __ks_arguments_1);
					}
				}
			}
			else {
				__ks_Array.__ks_func_sort_0.call(indexeds, (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 2) {
							if(t0(args[0]) && t0(args[1])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = (a, b) => {
						return KSOperator.subtraction(a.index, b.index);
					};
					return __ks_rt;
				})());
				const __ks_arguments_1 = indexeds.map((() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isDestructurableObject;
						const t1 = KSType.isValue;
						if(args.length === 3) {
							if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
								return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = ({index}, __ks_0, __ks_1) => {
						return argumentTypes[index];
					};
					return __ks_rt;
				})());
				if(indexeds.length === argumentTypes.length) {
					return matchArguments(assessment, __ks_arguments_1, excludes);
				}
				else {
					const functions = KSHelper.mapArray(possibleFunctions, function(key) {
						return assessment.functions[key];
					});
					const reducedAssessment = assess.__ks_0(functions, excludes, assessment.name, node);
					let result = matchArguments(reducedAssessment, __ks_arguments_1, excludes);
					if(KSType.isValue(result)) {
						if(KSType.isStructInstance(result, PreciseCallMatchResult)) {
							for(let __ks_0 = 0, __ks_1 = result.matches.length, match; __ks_0 < __ks_1; ++__ks_0) {
								match = result.matches[__ks_0];
								const __ks_arguments_2 = [];
								const indexes = new Dictionary();
								for(let index = 0, __ks_2 = match.function.__ks_func_parameters_0(), __ks_3 = __ks_2.length, parameter; index < __ks_3; ++index) {
									parameter = __ks_2[index];
									const name = parameter.__ks_func_name_3();
									let __ks_index_1;
									let argument = nameds[name];
									if(KSType.isValue(argument)) {
										__ks_arguments_2.push(argument.index);
										indexes[argument.index] = true;
									}
									else if(KSType.isValue((argument = shorthands[name]))) {
										__ks_arguments_2.push(argument.index);
										indexes[argument.index] = true;
									}
									else if(KSType.isValue((__ks_index_1 = match.arguments.shift()))) {
										if(KSType.isArray(__ks_index_1)) {
											const args = [];
											for(let __ks_4 = 0, __ks_5 = __ks_index_1.length, i; __ks_4 < __ks_5; ++__ks_4) {
												i = __ks_index_1[__ks_4];
												while(indexes[i] === true) {
													++i;
												}
												args.push(i);
												indexes[i] = true;
											}
											__ks_arguments_2.push(args);
										}
										else {
											while(indexes[__ks_index_1] === true) {
												++__ks_index_1;
											}
											__ks_arguments_2.push(__ks_index_1);
											indexes[__ks_index_1] = true;
										}
									}
									else {
										__ks_arguments_2.push(null);
									}
								}
								match.arguments = __ks_arguments_2;
							}
							if(possibleFunctions.every((() => {
								const __ks_rt = (...args) => {
									const t0 = KSType.isValue;
									if(args.length === 3) {
										if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
											return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
										}
									}
									throw KSHelper.badArgs();
								};
								__ks_rt.__ks_0 = (key, __ks_0, __ks_1) => {
									return preciseness[key];
								};
								return __ks_rt;
							})()) === true) {
								return result;
							}
							else {
								const possibilities = [result.matches[0].function];
								const __ks_arguments_2 = result.matches[0].arguments;
								for(let __ks_0 = 1, __ks_1 = result.matches.length, match; __ks_0 < __ks_1; ++__ks_0) {
									match = result.matches[__ks_0];
									if(__ks_Array.__ks_sttc_same_0(__ks_arguments_2, match.arguments)) {
										possibilities.push(match.function);
									}
									else {
										throw new NotSupportedException();
									}
								}
								return LenientCallMatchResult(possibilities, __ks_arguments_2);
							}
						}
						else if(result.possibilities.length === 1) {
							let __ks_arguments_2 = result.arguments;
							if(KSType.isValue(__ks_arguments_2)) {
								throw new NotImplementedException();
							}
							else {
								const __ks_function_1 = result.possibilities[0];
								result.arguments = [];
								let namedLefts = excludes.length;
								let requiredLefts = 0;
								for(let __ks_0 = 0, __ks_1 = __ks_function_1.parameters(excludes), __ks_2 = __ks_1.length, parameter; __ks_0 < __ks_2; ++__ks_0) {
									parameter = __ks_1[__ks_0];
									if(KSOperator.gt(parameter.min(), 0)) {
										++requiredLefts;
									}
								}
								let lastIndexed = null;
								for(let index = 0, __ks_0 = __ks_function_1.parameters(), __ks_1 = __ks_0.length, parameter; index < __ks_1; ++index) {
									parameter = __ks_0[index];
									const name = parameter.name();
									let argument = nameds[name];
									if(KSType.isValue(argument)) {
										result.arguments.push(argument.index);
										--namedLefts;
										lastIndexed = null;
									}
									else if(KSType.isValue((argument = shorthands[name]))) {
										result.arguments.push(argument.index);
										--namedLefts;
										lastIndexed = null;
									}
									else if(KSOperator.gte(parameter.min(), 1)) {
										const argument = indexeds.shift();
										result.arguments.push(argument.index);
										--requiredLefts;
										lastIndexed = null;
										__ks_arguments_1.shift();
									}
									else if(KSOperator.gt(__ks_arguments_1.length, requiredLefts)) {
										const argument = indexeds.shift();
										result.arguments.push(argument.index);
										lastIndexed = __ks_arguments_1.shift();
									}
									else {
										if(namedLefts > 0) {
											if(KSType.isValue(lastIndexed) && (lastIndexed.isAssignableToVariable(parameter.type(), true, true, false, true) === true)) {
												ReferenceException.__ks_sttc_throwConfusingArguments_0(assessment.name, node);
											}
											else {
												result.arguments.push(null);
											}
										}
									}
								}
								if(KSOperator.gt(__ks_arguments_1.length, 0)) {
									throw new NotSupportedException();
								}
							}
							return result;
						}
						else {
							return result;
						}
					}
					else {
						return null;
					}
				}
			}
		};
		matchNamedArguments5.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Assessement);
			const t1 = value => KSType.isArray(value, value => KSType.isClassInstance(value, Type));
			const t2 = value => KSType.isDictionary(value, value => KSType.isStructInstance(value, NamingArgument));
			const t3 = value => KSType.isArray(value, value => KSType.isStructInstance(value, NamingArgument));
			const t4 = KSType.isArray;
			const t5 = KSType.isDictionary;
			const t6 = value => KSType.isArray(value, KSType.isString);
			const t7 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 9) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t2(args[3]) && t3(args[4]) && t4(args[5]) && t5(args[6]) && t6(args[7]) && t7(args[8])) {
					return matchNamedArguments5.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
				}
			}
			throw KSHelper.badArgs();
		};
		function getMostPreciseFunction() {
			return getMostPreciseFunction.__ks_rt(this, arguments);
		};
		getMostPreciseFunction.__ks_0 = function(functions, nameds, shorthands) {
			for(let __ks_0 = 0, __ks_1 = functions[0].__ks_func_parameters_0(), __ks_2 = __ks_1.length, parameter; __ks_0 < __ks_2; ++__ks_0) {
				parameter = __ks_1[__ks_0];
				const name = parameter.__ks_func_name_3();
				if(KSType.isValue(nameds[name]) || KSType.isValue(shorthands[name])) {
					const types = [];
					const perType = new Dictionary();
					for(let __ks_3 = 0, __ks_4 = functions.length, __ks_function_1; __ks_3 < __ks_4; ++__ks_3) {
						__ks_function_1 = functions[__ks_3];
						for(let __ks_5 = 0, __ks_6 = __ks_function_1.__ks_func_parameters_0(), __ks_7 = __ks_6.length, parameter; __ks_5 < __ks_7; ++__ks_5) {
							parameter = __ks_6[__ks_5];
							if(parameter.__ks_func_name_3() === name) {
								types.push(parameter.__ks_func_type_0());
								const key = parameter.__ks_func_type_0().hashCode();
								let __ks_types_1 = perType[key];
								if(KSType.isValue(__ks_types_1)) {
									__ks_types_1.push(__ks_function_1);
								}
								else {
									perType[key] = [__ks_function_1];
								}
								break;
							}
						}
					}
					const sorted = sortNodes.__ks_0(types);
					functions = perType[sorted[0]];
				}
				if(functions.length === 1) {
					return functions[0];
				}
			}
			throw new NotSupportedException();
		};
		getMostPreciseFunction.__ks_rt = function(that, args) {
			const t0 = value => KSType.isArray(value, value => KSType.isClassInstance(value, FunctionType));
			const t1 = value => KSType.isDictionary(value, value => KSType.isStructInstance(value, NamingArgument));
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t1(args[2])) {
					return getMostPreciseFunction.__ks_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function toTreeFragments() {
			return toTreeFragments.__ks_rt(this, arguments);
		};
		toTreeFragments.__ks_0 = function(buildPath, args, tree, nIndex, nLength, continuous, fallback, helper, block, node) {
			const allArgs = (tree.min === 0) && tree.rest;
			let fragments = null;
			if(!allArgs) {
				if(tree.rest && continuous) {
					fragments = block;
				}
				else {
					fragments = block.__ks_func_newControl_0();
					if(tree.rest) {
						fragments.code(KSHelper.concatString("if(", args, ".length >= ", tree.min, ")"));
					}
					else if(tree.min === tree.max) {
						fragments.code(KSHelper.concatString("if(", args, ".length === ", tree.min, ")"));
					}
					else if(tree.min === 0) {
						fragments.code(KSHelper.concatString("if(", args, ".length <= ", tree.max, ")"));
					}
					else {
						fragments.code(KSHelper.concatString("if(", args, ".length >= ", tree.min, " && ", args, ".length <= ", tree.max, ")"));
					}
					fragments.step();
				}
			}
			else {
				fragments = block;
			}
			let useAllArgs = allArgs;
			if(tree.order.length === 0) {
				const line = fragments.newLine();
				let comma = buildPath(tree.function, line.code("return "));
				if(tree.function.__ks_func_hasVarargsParameter_0() === true) {
					for(let __ks_0 = 0, __ks_1 = tree.function.__ks_func_parameters_0(), __ks_2 = __ks_1.length, parameter; __ks_0 < __ks_2; ++__ks_0) {
						parameter = __ks_1[__ks_0];
						if(comma === true) {
							line.code($comma);
						}
						else {
							comma = true;
						}
						if(parameter.__ks_func_isVarargs_0() === true) {
							line.code("[]");
							break;
						}
						else {
							line.code("void 0");
						}
					}
				}
				line.code(")").done();
			}
			else if(tree.order.length === 1) {
				const column = tree.columns[tree.order[0]];
				if(isNeedingTestings(column)) {
					useAllArgs = toTreeFragments(buildPath, args, tree, column, false, helper, fragments, 0, 1, Junction.NONE, continuous, -1, tree.min, node);
				}
				else {
					toCallFragments(buildPath, args, tree, column, fragments, node);
					fallback = true;
				}
			}
			else {
				let anyTested = false;
				for(let index = 0, __ks_0 = tree.order.length, key; index < __ks_0; ++index) {
					key = tree.order[index];
					const column = tree.columns[key];
					useAllArgs = toTreeFragments(buildPath, args, tree, column, anyTested, helper, fragments, index, tree.order.length, Junction.NONE, hasAlternative.__ks_0(tree, index), -1, tree.min, node);
					if(!anyTested && (column.type.__ks_func_isAny_0() === true)) {
						anyTested = true;
					}
				}
			}
			if(KSType.isClassInstance(fragments, ControlBuilder)) {
				if(((nIndex + 1) !== nLength) && !useAllArgs && !fallback && (tree.order.length !== 0)) {
					fragments.__ks_func_line_0([KSHelper.concatString("throw ", $runtime.helper.__ks_0(node), ".badArgs()")]);
				}
				fragments.__ks_func_done_0();
			}
			return useAllArgs;
		};
		toTreeFragments.__ks_1 = function(buildPath, args, tree, leaf, anyTested, helper, builder, nIndex, nLength, junction, hasAlternative, startIndex, min, node) {
			const type = leaf.type;
			const isTest = !((anyTested || (type.__ks_func_isAny_0() === true)) && (type.__ks_func_isNullable_0() === true) && ((startIndex === -1) || (leaf.max <= 0)));
			const isBacktrack = leaf.backtracks.length !== 0;
			let fragments = null;
			let shouldClose = false;
			if(isTest || isBacktrack) {
				if(junction === Junction.AND) {
					fragments = builder;
					KSType.isValue(fragments) ? fragments.code(" && ") : fragments.__ks_func_code_0([" && "]);
				}
				else {
					fragments = KSType.isClassInstance(builder, BlockBuilder) ? builder.__ks_func_newControl_0() : builder.__ks_func_newControl_0();
					KSType.isValue(fragments) ? fragments.code("if(") : fragments.__ks_func_code_0(["if("]);
					shouldClose = true;
				}
			}
			else {
				fragments = builder;
			}
			if(isBacktrack) {
				let nf = false;
				for(let __ks_0 = 0, __ks_1 = leaf.backtracks.length, index, type; __ks_0 < __ks_1; ++__ks_0) {
					({index, type} = leaf.backtracks[__ks_0]);
					if(nf) {
						KSType.isValue(fragments) ? fragments.code(" && ") : fragments.__ks_func_code_0([" && "]);
					}
					else {
						nf = true;
					}
					const test = helper.tester(type);
					if(startIndex === -1) {
						KSType.isValue(fragments) ? fragments.code(KSHelper.concatString(test, "(", args, "[", index, "])")) : fragments.__ks_func_code_0([KSHelper.concatString(test, "(", args, "[", index, "])")]);
					}
					else {
						KSType.isValue(fragments) ? fragments.code(KSHelper.concatString($runtime.helper.__ks_0(node), ".isVarargs(", args, ", 1, 1, ", test, ", ", helper.points(), ", ", startIndex, ")")) : fragments.__ks_func_code_0([KSHelper.concatString($runtime.helper.__ks_0(node), ".isVarargs(", args, ", 1, 1, ", test, ", ", helper.points(), ", ", startIndex, ")")]);
					}
				}
				KSType.isValue(fragments) ? fragments.code(" && ") : fragments.__ks_func_code_0([" && "]);
			}
			if(isTest) {
				const test = helper.tester(type);
				let __ks_0;
				if((startIndex === -1) && (leaf.min === (__ks_0 = leaf.max) && __ks_0 !== 0)) {
					if(leaf.min <= 5) {
						if(leaf.index >= 0) {
							for(let i = leaf.index, __ks_0 = leaf.index + leaf.min; i < __ks_0; ++i) {
								if(i !== leaf.index) {
									KSType.isValue(fragments) ? fragments.code(" && ") : fragments.__ks_func_code_0([" && "]);
								}
								KSType.isValue(fragments) ? fragments.code(KSHelper.concatString(test, "(", args, "[", i, "])")) : fragments.__ks_func_code_0([KSHelper.concatString(test, "(", args, "[", i, "])")]);
							}
						}
						else if(tree.min === tree.max) {
							const index = tree.min + leaf.index;
							for(let i = index, __ks_0 = index + leaf.min; i < __ks_0; ++i) {
								if(i !== index) {
									KSType.isValue(fragments) ? fragments.code(" && ") : fragments.__ks_func_code_0([" && "]);
								}
								KSType.isValue(fragments) ? fragments.code(KSHelper.concatString(test, "(", args, "[", i, "])")) : fragments.__ks_func_code_0([KSHelper.concatString(test, "(", args, "[", i, "])")]);
							}
						}
						else {
							const index = tree.min + leaf.index;
							for(let i = index; i > 0; --i) {
								if(i !== index) {
									KSType.isValue(fragments) ? fragments.code(" && ") : fragments.__ks_func_code_0([" && "]);
								}
								KSType.isValue(fragments) ? fragments.code(KSHelper.concatString(test, "(", args, "[", args, ".length - ", i, "])")) : fragments.__ks_func_code_0([KSHelper.concatString(test, "(", args, "[", args, ".length - ", i, "])")]);
							}
						}
					}
					else {
						KSType.isValue(fragments) ? fragments.code(KSHelper.concatString($runtime.type.__ks_0(node), ".isVarargs(", args, ", ", leaf.index, ", ", ((leaf.index + leaf.min) - 1), ", false, ", test, ")")) : fragments.__ks_func_code_0([KSHelper.concatString($runtime.type.__ks_0(node), ".isVarargs(", args, ", ", leaf.index, ", ", ((leaf.index + leaf.min) - 1), ", false, ", test, ")")]);
					}
				}
				else {
					let max = null;
					if(KSOperator.eq(leaf.max, Infinity)) {
						if(tree.min > 0) {
							max = KSHelper.concatString(args, ".length - ", (tree.min - leaf.min));
						}
						else {
							max = args + ".length";
						}
					}
					else if(leaf.max === 0) {
						max = args + ".length";
					}
					else if(leaf.max < 0) {
						max = KSHelper.concatString(args, ".length - ", -leaf.max);
					}
					else {
						max = leaf.max;
					}
					KSType.isValue(fragments) ? fragments.code(KSHelper.concatString($runtime.helper.__ks_0(node), ".isVarargs(", args, ", ", leaf.min, ", ", max, ", ", test, ", ")) : fragments.__ks_func_code_0([KSHelper.concatString($runtime.helper.__ks_0(node), ".isVarargs(", args, ", ", leaf.min, ", ", max, ", ", test, ", ")]);
					if(startIndex === -1) {
						startIndex = 0;
						KSType.isValue(fragments) ? fragments.code(KSHelper.concatString(helper.points(), " = [", leaf.index, "], ", startIndex, ")")) : fragments.__ks_func_code_0([KSHelper.concatString(helper.points(), " = [", leaf.index, "], ", startIndex, ")")]);
					}
					else {
						++startIndex;
						KSType.isValue(fragments) ? fragments.code(KSHelper.concatString(helper.points(), ", ", startIndex, ")")) : fragments.__ks_func_code_0([KSHelper.concatString(helper.points(), ", ", startIndex, ")")]);
					}
					if(startIndex !== -1) {
						KSType.isValue(fragments) ? fragments.code(KSHelper.concatString(" && ", helper.allArgs(startIndex + 1))) : fragments.__ks_func_code_0([KSHelper.concatString(" && ", helper.allArgs(startIndex + 1))]);
					}
				}
				(KSType.isValue(fragments) ? fragments.code(")") : fragments.__ks_func_code_0([")"])).step();
				toCallFragments.__ks_0(buildPath, args, tree, leaf, fragments, node);
			}
			else if(isBacktrack) {
				(KSType.isValue(fragments) ? fragments.code(")") : fragments.__ks_func_code_0([")"])).step();
				toCallFragments.__ks_0(buildPath, args, tree, leaf, fragments, node);
			}
			else {
				toCallFragments.__ks_0(buildPath, args, tree, leaf, fragments, node);
			}
			if(shouldClose) {
				fragments.__ks_func_done_0();
			}
			return !isTest;
		};
		toTreeFragments.__ks_2 = function(buildPath, args, tree, branch, anyTested, helper, builder, nIndex, nLength, junction, alternative, startIndex, min, node) {
			const type = branch.type;
			let useAllArgs = false;
			const isTest = !((anyTested || (type.__ks_func_isAny_0() === true)) && (type.__ks_func_isNullable_0() === true) && (startIndex === -1) && ((branch.max === branch.min) || branch.rest));
			if(!isTest) {
				if(branch.order.length === 1) {
					useAllArgs = toTreeFragments(buildPath, args, tree, branch.columns[branch.order[0]], false, helper, builder, 0, branch.order.length, junction, true, startIndex, min - branch.min, node);
				}
				else {
					if(junction === Junction.AND) {
						(KSType.isValue(builder) ? builder.code(")") : builder.__ks_func_code_0([")"])).step();
					}
					for(let index = 0, __ks_0 = branch.order.length, key; index < __ks_0; ++index) {
						key = branch.order[index];
						useAllArgs = toTreeFragments(buildPath, args, tree, branch.columns[key], false, helper, builder, index, branch.order.length, Junction.NONE, true, startIndex, min - branch.min, node);
					}
				}
			}
			else {
				let fragments = null;
				let shouldClose = false;
				if(junction === Junction.AND) {
					fragments = builder;
					KSType.isValue(fragments) ? fragments.code(" && ") : fragments.__ks_func_code_0([" && "]);
				}
				else {
					fragments = KSType.isClassInstance(builder, BlockBuilder) ? builder.__ks_func_newControl_0() : builder.__ks_func_newControl_0();
					KSType.isValue(fragments) ? fragments.code("if(") : fragments.__ks_func_code_0(["if("]);
					shouldClose = true;
				}
				const test = helper.tester(type);
				let __ks_0;
				if((startIndex === -1) && (branch.min === (__ks_0 = branch.max) && __ks_0 !== 0)) {
					if(branch.min <= 5) {
						if(branch.index >= 0) {
							for(let i = branch.index, __ks_0 = branch.index + branch.min; i < __ks_0; ++i) {
								if(i !== branch.index) {
									KSType.isValue(fragments) ? fragments.code(" && ") : fragments.__ks_func_code_0([" && "]);
								}
								KSType.isValue(fragments) ? fragments.code(KSHelper.concatString(test, "(", args, "[", i, "])")) : fragments.__ks_func_code_0([KSHelper.concatString(test, "(", args, "[", i, "])")]);
							}
						}
						else if(tree.min === tree.max) {
							const index = tree.min + branch.index;
							for(let i = index, __ks_0 = index + branch.min; i < __ks_0; ++i) {
								if(i !== index) {
									KSType.isValue(fragments) ? fragments.code(" && ") : fragments.__ks_func_code_0([" && "]);
								}
								KSType.isValue(fragments) ? fragments.code(KSHelper.concatString(test, "(", args, "[", i, "])")) : fragments.__ks_func_code_0([KSHelper.concatString(test, "(", args, "[", i, "])")]);
							}
						}
						else {
							throw new NotImplementedException();
						}
					}
					else {
						throw new NotImplementedException();
					}
				}
				else {
					let max = null;
					if(KSOperator.eq(branch.max, Infinity)) {
						if(tree.min > 0) {
							max = KSHelper.concatString(args, ".length - ", (tree.min - branch.min));
						}
						else {
							max = args + ".length";
						}
					}
					else if(branch.max === 0) {
						max = args + ".length";
					}
					else if(branch.max < 0) {
						max = KSHelper.concatString(args, ".length - ", -branch.max);
					}
					else {
						max = branch.max;
					}
					KSType.isValue(fragments) ? fragments.code(KSHelper.concatString($runtime.helper.__ks_0(node), ".isVarargs(", args, ", ", branch.min, ", ", max, ", ", test, ", ")) : fragments.__ks_func_code_0([KSHelper.concatString($runtime.helper.__ks_0(node), ".isVarargs(", args, ", ", branch.min, ", ", max, ", ", test, ", ")]);
					if(startIndex === -1) {
						startIndex = 0;
						KSType.isValue(fragments) ? fragments.code(KSHelper.concatString(helper.points(), " = [", branch.index, "], ", startIndex, ")")) : fragments.__ks_func_code_0([KSHelper.concatString(helper.points(), " = [", branch.index, "], ", startIndex, ")")]);
					}
					else {
						++startIndex;
						KSType.isValue(fragments) ? fragments.code(KSHelper.concatString(helper.points(), ", ", startIndex, ")")) : fragments.__ks_func_code_0([KSHelper.concatString(helper.points(), ", ", startIndex, ")")]);
					}
				}
				if(isUsingTestings.__ks_0(branch, startIndex)) {
					if(((nIndex + 1) === nLength) && (branch.order.length === 1)) {
						toTreeFragments(buildPath, args, tree, branch.columns[branch.order[0]], false, helper, fragments, 0, 1, Junction.AND, alternative, startIndex, min - branch.min, node);
					}
					else {
						(KSType.isValue(fragments) ? fragments.code(")") : fragments.__ks_func_code_0([")"])).step();
						let useAllArgs = false;
						let nullTested = false;
						for(let index = 0, __ks_0 = branch.order.length, key; index < __ks_0; ++index) {
							key = branch.order[index];
							useAllArgs = toTreeFragments(buildPath, args, tree, branch.columns[key], nullTested, helper, fragments, index, branch.order.length, Junction.NONE, alternative || hasAlternative.__ks_0(branch, index), startIndex, min - branch.min, node);
							if(!nullTested && (branch.columns[key].type.__ks_func_isNull_0() === true)) {
								nullTested = true;
							}
						}
						if(!alternative && !useAllArgs) {
							fragments.__ks_func_line_0([KSHelper.concatString("throw ", $runtime.helper.__ks_0(node), ".badArgs()")]);
						}
					}
				}
				else {
					(KSType.isValue(fragments) ? fragments.code(")") : fragments.__ks_func_code_0([")"])).step();
					const useAllArgs = toTreeFragments(buildPath, args, tree, branch.columns[branch.order[0]], false, helper, fragments, 0, 1, Junction.NONE, alternative || hasAlternative.__ks_0(branch, 0), startIndex, min - branch.min, node);
					if(!alternative && !useAllArgs) {
						fragments.__ks_func_line_0([KSHelper.concatString("throw ", $runtime.helper.__ks_0(node), ".badArgs()")]);
					}
				}
				if(shouldClose) {
					fragments.__ks_func_done_0();
				}
			}
			return useAllArgs;
		};
		toTreeFragments.__ks_rt = function(that, args) {
			const t0 = KSType.isFunction;
			const t1 = KSType.isString;
			const t2 = value => KSType.isStructInstance(value, Tree);
			const t3 = KSType.isNumber;
			const t4 = KSType.isBoolean;
			const t5 = KSType.isValue;
			const t6 = value => KSType.isClassInstance(value, BlockBuilder);
			const t7 = value => KSType.isClassInstance(value, AbstractNode);
			const t8 = value => KSType.isStructInstance(value, TreeBranch);
			const t9 = value => KSType.isClassInstance(value, BlockBuilder) || KSType.isClassInstance(value, ControlBuilder);
			const t10 = value => KSType.isEnumInstance(value, Junction);
			const t11 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 10) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t3(args[4]) && t4(args[5]) && t4(args[6]) && t5(args[7]) && t6(args[8]) && t7(args[9])) {
					return toTreeFragments.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
				}
				throw KSHelper.badArgs();
			}
			if(args.length === 14) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					if(t8(args[3])) {
						if(t4(args[4]) && t5(args[5]) && t9(args[6]) && t3(args[7]) && t3(args[8]) && t10(args[9]) && t4(args[10]) && t3(args[11]) && t3(args[12]) && t7(args[13])) {
							return toTreeFragments.__ks_2.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]);
						}
						throw KSHelper.badArgs();
					}
					if(t11(args[3]) && t4(args[4]) && t5(args[5]) && t9(args[6]) && t3(args[7]) && t3(args[8]) && t10(args[9]) && t4(args[10]) && t3(args[11]) && t3(args[12]) && t7(args[13])) {
						return toTreeFragments.__ks_1.call(that, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]);
					}
					throw KSHelper.badArgs();
				}
			}
			throw KSHelper.badArgs();
		};
		function isNeedingTestings() {
			return isNeedingTestings.__ks_rt(this, arguments);
		};
		isNeedingTestings.__ks_0 = function(tree) {
			return true;
		};
		isNeedingTestings.__ks_1 = function(tree) {
			const parameters = tree.function.__ks_func_parameters_0();
			const async = tree.function.__ks_func_isAsync_0();
			for(let __ks_0 = 0, __ks_1 = tree.arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = tree.arguments[__ks_0];
				if(!async || (argument.parameter < parameters.length)) {
					const type = parameters[argument.parameter].__ks_func_type_0();
					if((type.isAny() === true) && (type.isNullable() === true)) {
						return false;
					}
				}
			}
			return true;
		};
		isNeedingTestings.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = value => KSType.isStructInstance(value, TreeLeaf);
			if(args.length === 1) {
				if(t0(args[0])) {
					return isNeedingTestings.__ks_0.call(that, args[0]);
				}
				if(t1(args[0])) {
					return isNeedingTestings.__ks_1.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function hasAlternative() {
			return hasAlternative.__ks_rt(this, arguments);
		};
		hasAlternative.__ks_0 = function(tree, index) {
			if((index + 1) === tree.order.length) {
				return false;
			}
			const {type} = tree.columns[tree.order[index]];
			for(let __ks_0 = index + 1, __ks_1 = tree.order.length, key; __ks_0 < __ks_1; ++__ks_0) {
				key = tree.order[__ks_0];
				const column = tree.columns[key];
				if(type.isAssignableToVariable(column.type) === true) {
					return true;
				}
			}
			return false;
		};
		hasAlternative.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			const t1 = KSType.isNumber;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return hasAlternative.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function toCallFragments() {
			return toCallFragments.__ks_rt(this, arguments);
		};
		toCallFragments.__ks_0 = function(buildPath, args, tree, leaf, fragments, node) {
			const {function: __ks_function_1, arguments: __ks_arguments_1} = leaf;
			const async = __ks_function_1.__ks_func_isAsync_0();
			const parameters = __ks_function_1.__ks_func_parameters_0();
			const scope = node.__ks_func_scope_0();
			const line = fragments.newLine();
			let comma = buildPath(__ks_function_1, line.code("return "));
			const lastIndex = __ks_arguments_1.length - 1;
			let lastParameter = -1;
			let anyTested = false;
			let variadic = false;
			for(let index = 0, __ks_0 = __ks_arguments_1.length, parameter, from, to; index < __ks_0; ++index) {
				({parameter, from, to} = __ks_arguments_1[index]);
				if(comma === true) {
					line.code($comma);
				}
				else {
					comma = true;
				}
				for(let __ks_1 = lastParameter + 1, __ks_2 = Math.min(parameters.length, parameter), param; __ks_1 < __ks_2; ++__ks_1) {
					param = parameters[__ks_1];
					if(param.__ks_func_isVarargs_0() === true) {
						line.code("[], ");
					}
					else {
						line.code("void 0, ");
					}
				}
				const varargs = (async && KSOperator.gte(parameter, parameters.length)) ? false : parameters[parameter].__ks_func_isVarargs_0();
				const type = (async && KSOperator.gte(parameter, parameters.length)) ? scope.reference("Function") : parameters[parameter].__ks_func_type_0();
				if(!((anyTested || (type.isAny() === true)) && (type.isNullable() === true))) {
					if((from.variadic === true) || (to.variadic === true) || KSOperator.gt(KSOperator.subtraction(to.index, from.index), 5)) {
						if(varargs === true) {
							line.code(KSHelper.concatString($runtime.helper.__ks_0(node), ".getVarargs(", args));
						}
						else {
							line.code(KSHelper.concatString($runtime.helper.__ks_0(node), ".getVararg(", args));
						}
						if(from.variadic === true) {
							line.code(KSHelper.concatString(", pts[", from.index, "]"));
						}
						else {
							line.code(KSHelper.concatString(", ", from.index));
						}
						if(to.variadic === true) {
							line.code(KSHelper.concatString(", pts[", to.index, "]"));
						}
						else {
							line.code(KSHelper.concatString(", ", to.index));
						}
						line.code(")");
					}
					else if(KSOperator.lte(to.index, 0)) {
						if(varargs === true) {
							NotImplementedException.__ks_sttc_throw_0([]);
						}
						else {
							line.code(KSHelper.concatString(args, "[", args, ".length - ", KSOperator.negative(from.index), "]"));
						}
					}
					else {
						if(varargs === true) {
							line.code("[");
							for(let i = 0, __ks_1 = KSOperator.subtraction(to.index, from.index); i < __ks_1; ++i) {
								if(i !== 0) {
									line.code($comma);
								}
								line.code(KSHelper.concatString(args, "[", KSOperator.addOrConcat(from.index, i), "]"));
							}
							line.code("]");
						}
						else {
							line.code(KSHelper.concatString(args, "[", from.index, "]"));
						}
					}
					variadic = true;
				}
				else {
					if((from.variadic === true) || (to.variadic === true)) {
						if(varargs === true) {
							line.code(KSHelper.concatString($runtime.helper.__ks_0(node), ".getVarargs(", args));
						}
						else {
							line.code(KSHelper.concatString($runtime.helper.__ks_0(node), ".getVararg(", args));
						}
						if(from.variadic === true) {
							line.code(KSHelper.concatString(", pts[", from.index, "]"));
						}
						else {
							line.code(KSHelper.concatString(", ", from.index));
						}
						if(to.variadic === true) {
							line.code(KSHelper.concatString(", pts[", to.index, "]"));
						}
						else {
							line.code(KSHelper.concatString(", ", to.index));
						}
						line.code(")");
					}
					else if(KSOperator.lte(to.index, 0)) {
						if(varargs === true) {
							if(to.index === 0) {
								if(from.index === 0) {
									line.code("Array.from(" + args + ")");
								}
								else {
									line.code(KSHelper.concatString("Array.from(", args, ").slice(", from.index, ")"));
								}
							}
							else {
								line.code(KSHelper.concatString("Array.from(", args, ").slice(", from.index, ", ", args, ".length - ", KSOperator.subtraction(1, to.index), ")"));
							}
						}
						else {
							line.code(KSHelper.concatString(args, "[", args, ".length - ", KSOperator.negative(from.index), "]"));
						}
					}
					else {
						if(varargs === true) {
							if(from.index === 0) {
								if((to.index === 0) || (to.index === tree.max)) {
									line.code("Array.from(" + args + ")");
								}
								else {
									line.code(KSHelper.concatString("Array.from(", args, ").slice(", from.index, ", ", KSOperator.subtraction(to.index, from.index), ")"));
								}
							}
							else {
								if(to.index === 0) {
									line.code(KSHelper.concatString("Array.from(", args, ").slice(", from.index, ")"));
								}
								else {
									line.code(KSHelper.concatString("Array.from(", args, ").slice(", from.index, ", ", KSOperator.subtraction(to.index, from.index), ")"));
								}
							}
						}
						else {
							line.code(KSHelper.concatString(args, "[", from.index, "]"));
						}
					}
				}
				lastParameter = parameter;
				if(!anyTested && (type.isAny() === true)) {
					anyTested = true;
				}
			}
			for(let __ks_0 = lastParameter + 1, __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = parameters[__ks_0];
				if(parameter.__ks_func_isVarargs_0() === true) {
					line.code(", []");
				}
				else {
					line.code(", void 0");
				}
			}
			line.code(")").done();
		};
		toCallFragments.__ks_rt = function(that, args) {
			const t0 = KSType.isFunction;
			const t1 = KSType.isString;
			const t2 = value => KSType.isStructInstance(value, Tree);
			const t3 = value => KSType.isStructInstance(value, TreeLeaf);
			const t4 = KSType.isValue;
			const t5 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 6) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4]) && t5(args[5])) {
					return toCallFragments.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
				}
			}
			throw KSHelper.badArgs();
		};
		function isUsingTestings() {
			return isUsingTestings.__ks_rt(this, arguments);
		};
		isUsingTestings.__ks_0 = function(branch, startIndex) {
			if((branch.order.length !== 1) || (startIndex !== -1)) {
				return true;
			}
			const column = branch.columns[branch.order[0]];
			const type = column.type;
			if((type.__ks_func_isAny_0() === true) && (type.__ks_func_isNullable_0() === true)) {
				if(column.isNode) {
					return isUsingTestings(column, startIndex);
				}
				else {
					return false;
				}
			}
			else {
				return true;
			}
		};
		isUsingTestings.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, TreeBranch);
			const t1 = KSType.isNumber;
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return isUsingTestings.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function isVarargs() {
			return isVarargs.__ks_rt(this, arguments);
		};
		isVarargs.__ks_0 = function(assessement) {
			for(let __ks_0 = 0, __ks_1 = assessement.trees.length, tree; __ks_0 < __ks_1; ++__ks_0) {
				tree = assessement.trees[__ks_0];
				if(tree.variadic) {
					return true;
				}
			}
			return false;
		};
		isVarargs.__ks_rt = function(that, args) {
			const t0 = value => KSType.isStructInstance(value, Assessement);
			if(args.length === 1) {
				if(t0(args[0])) {
					return isVarargs.__ks_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		};
		function getTester() {
			return getTester.__ks_rt(this, arguments);
		};
		getTester.__ks_0 = function(fragments, node, type) {
			const hash = type.__ks_func_hashCode_1(true);
			let name = this.testers[hash];
			if(KSType.isValue(name)) {
				return name;
			}
			const index = ++this.index;
			const __ks_name_1 = KSHelper.concatString("t", index);
			const line = fragments.__ks_func_newLine_0();
			line.code(KSHelper.concatString($runtime.immutableScope.__ks_0(node), __ks_name_1, " = "));
			type.toTestFunctionFragments(line, node);
			line.done();
			this.testers[hash] = __ks_name_1;
			return __ks_name_1;
		};
		getTester.__ks_rt = function(that, args) {
			const t0 = value => KSType.isClassInstance(value, MarkWriter);
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			const t2 = value => KSType.isClassInstance(value, Type);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return getTester.__ks_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		function toDefaultFooter() {
			return toDefaultFooter.__ks_rt(this, arguments);
		};
		toDefaultFooter.__ks_0 = function(fragments, node) {
			fragments.line(KSHelper.concatString("throw ", $runtime.helper.__ks_0(node), ".badArgs()"));
		};
		toDefaultFooter.__ks_rt = function(that, args) {
			const t0 = KSType.isValue;
			const t1 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 2) {
				if(t0(args[0]) && t1(args[1])) {
					return toDefaultFooter.__ks_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		};
		function buildHelper() {
			return buildHelper.__ks_rt(this, arguments);
		};
		buildHelper.__ks_0 = function(fragments, args, node) {
			const allArgsMark = fragments.__ks_func_mark_0();
			const pointsMark = allArgsMark.mark();
			const context = (() => {
				const d = new Dictionary();
				d.allArgs = false;
				d.allArgsMark = allArgsMark;
				d.points = false;
				d.pointsMark = pointsMark;
				d.index = -1;
				d.testers = new Dictionary();
				return d;
			})();
			return (() => {
				const d = new Dictionary();
				d.allArgs = (() => {
					const __ks_rt = (...args) => {
						const t0 = KSType.isValue;
						if(args.length === 1) {
							if(t0(args[0])) {
								return __ks_rt.__ks_0.call(null, args[0]);
							}
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = function(index) {
						if(!context.allArgs) {
							context.allArgsMark.line(KSHelper.concatString($runtime.immutableScope.__ks_0(node), "te = (pts, idx) => ", $runtime.helper.__ks_0(node), ".isUsingAllArgs(", args, ", pts, idx)"));
							context.allArgs = true;
						}
						return KSHelper.concatString("te(pts, ", index, ")");
					};
					return __ks_rt;
				})();
				d.points = (() => {
					const __ks_rt = (...args) => {
						if(args.length === 0) {
							return __ks_rt.__ks_0.call(null);
						}
						throw KSHelper.badArgs();
					};
					__ks_rt.__ks_0 = function() {
						if(!context.points) {
							context.pointsMark.line(KSHelper.concatString($runtime.scope.__ks_0(node), "pts"));
							context.points = true;
						}
						return "pts";
					};
					return __ks_rt;
				})();
				d.tester = KSHelper.vcurry(getTester, context, fragments, node);
				return d;
			})();
		};
		buildHelper.__ks_rt = function(that, args) {
			const t0 = value => KSType.isClassInstance(value, MarkWriter);
			const t1 = KSType.isString;
			const t2 = value => KSType.isClassInstance(value, AbstractNode);
			if(args.length === 3) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2])) {
					return buildHelper.__ks_0.call(that, args[0], args[1], args[2]);
				}
			}
			throw KSHelper.badArgs();
		};
		const FooterType = KSHelper.enum(Number, {
			MIGHT_THROW: 0,
			MUST_THROW: 1,
			NO_THROW: 2
		});
		function toFragments() {
			return toFragments.__ks_rt(this, arguments);
		};
		toFragments.__ks_0 = function(buildPath, args, assessment, fragments, footerType, footer, node) {
			if(args === void 0 || args === null) {
				args = "args";
			}
			if(footerType === void 0 || footerType === null) {
				footerType = FooterType.MUST_THROW;
			}
			if(footer === void 0 || footer === null) {
				footer = toDefaultFooter;
			}
			const mark = fragments.__ks_func_mark_0();
			const helper = buildHelper(mark, args, node);
			const fallback = footerType !== FooterType.MUST_THROW;
			if(assessment.trees.length === 0) {
				if(footerType === FooterType.NO_THROW) {
					footer(fragments, node);
				}
				else {
					const ctrl = fragments.__ks_func_newControl_0().code("if(" + args + ".length !== 0)").step();
					footer(ctrl, node);
					ctrl.done();
				}
			}
			else if((assessment.trees.length === 1) && (assessment.trees[0].min === 0) && assessment.trees[0].rest) {
				const tree = assessment.trees[0];
				if((tree.order.length === 1) && isNeedingTestings(tree.columns[tree.order[0]])) {
					toTreeFragments(buildPath, args, tree, 0, 1, true, fallback, helper, fragments, node);
					footer(fragments, node);
				}
				else {
					toTreeFragments(buildPath, args, tree, 0, 1, true, false, helper, fragments, node);
				}
			}
			else {
				let continuous = true;
				let previous = -1;
				let useAllArgs = false;
				for(let i = 0, __ks_0 = assessment.trees.length, tree; i < __ks_0; ++i) {
					tree = assessment.trees[i];
					if(continuous) {
						if((previous + 1) !== tree.min) {
							continuous = false;
						}
						else {
							previous = tree.max;
						}
					}
					useAllArgs = toTreeFragments(buildPath, args, tree, i, assessment.trees.length, continuous, fallback, helper, fragments, node);
				}
				if(continuous) {
					if(!useAllArgs) {
						if(footerType === FooterType.MUST_THROW) {
							toDefaultFooter.__ks_0(fragments, node);
						}
						else {
							footer(fragments, node);
						}
					}
				}
				else if((assessment.min !== 0) || !assessment.rest || !useAllArgs) {
					if(footerType === FooterType.MUST_THROW) {
						toDefaultFooter.__ks_0(fragments, node);
					}
					else {
						footer(fragments, node);
					}
				}
			}
		};
		toFragments.__ks_rt = function(that, args) {
			const t0 = KSType.isFunction;
			const t1 = value => KSType.isString(value) || KSType.isNull(value);
			const t2 = value => KSType.isStructInstance(value, Assessement);
			const t3 = value => KSType.isClassInstance(value, BlockBuilder);
			const t4 = value => KSType.isEnumInstance(value, FooterType) || KSType.isNull(value);
			const t5 = value => KSType.isFunction(value) || KSType.isNull(value);
			const t6 = value => KSType.isClassInstance(value, AbstractNode);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 5 && args.length <= 7) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && KSHelper.isVarargs(args, 0, 1, t4, pts = [4], 0) && KSHelper.isVarargs(args, 0, 1, t5, pts, 1) && KSHelper.isVarargs(args, 1, 1, t6, pts, 2) && te(pts, 3)) {
					return toFragments.__ks_0.call(that, args[0], args[1], args[2], args[3], KSHelper.getVararg(args, 4, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
				}
			}
			throw KSHelper.badArgs();
		};
		function toArgumentsFragments() {
			return toArgumentsFragments.__ks_rt(this, arguments);
		};
		toArgumentsFragments.__ks_0 = function(matchArguments, expressions, __ks_function_1, hasContext, fragments, mode) {
			const __ks_arguments_1 = [...matchArguments];
			for(let __ks_0 = __ks_arguments_1.length - 1, __ks_1 = 0, argument; __ks_0 >= __ks_1; --__ks_0) {
				argument = __ks_arguments_1[__ks_0];
				if(!(!KSType.isValue(argument))) {
					break;
				}
				__ks_arguments_1.pop();
			}
			if(__ks_arguments_1.length === 0) {
				return;
			}
			if(hasContext) {
				fragments.code($comma);
			}
			const parameters = __ks_function_1.__ks_func_parameters_0();
			for(let index = 0, __ks_0 = __ks_arguments_1.length, argument; index < __ks_0; ++index) {
				argument = __ks_arguments_1[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				const parameter = parameters[index].__ks_func_type_0();
				if(!KSType.isValue(argument)) {
					fragments.code("void 0");
				}
				else if(KSType.isNumber(argument)) {
					expressions[argument].toArgumentFragments(fragments, parameter, mode);
				}
				else if(__ks_function_1.__ks_func_isAlien_0() === true) {
					for(let i = 0, __ks_1 = argument.length, arg; i < __ks_1; ++i) {
						arg = argument[i];
						if(i !== 0) {
							fragments.code($comma);
						}
						expressions[arg].__ks_func_toArgumentFragments_0(fragments, mode);
					}
				}
				else {
					if((argument.length === 1) && KSType.isClassInstance(expressions[argument[0]], UnaryOperatorSpread) && (expressions[argument[0]].__ks_func_type_22().isArray() === true)) {
						expressions[argument[0]].argument().toArgumentFragments(fragments, mode);
					}
					else {
						fragments.code("[");
						for(let i = 0, __ks_1 = argument.length, arg; i < __ks_1; ++i) {
							arg = argument[i];
							if(i !== 0) {
								fragments.code($comma);
							}
							expressions[arg].__ks_func_toArgumentFragments_0(fragments, mode);
						}
						fragments.code("]");
					}
				}
			}
		};
		toArgumentsFragments.__ks_rt = function(that, args) {
			const t0 = value => KSType.isArray(value, value => KSType.isNumber(value) || KSType.isArray(value, KSType.isNumber) || KSType.isNull(value));
			const t1 = value => KSType.isArray(value, value => KSType.isClassInstance(value, Expression));
			const t2 = value => KSType.isClassInstance(value, FunctionType);
			const t3 = KSType.isBoolean;
			const t4 = KSType.isValue;
			if(args.length === 6) {
				if(t0(args[0]) && t1(args[1]) && t2(args[2]) && t3(args[3]) && t4(args[4]) && t4(args[5])) {
					return toArgumentsFragments.__ks_0.call(that, args[0], args[1], args[2], args[3], args[4], args[5]);
				}
			}
			throw KSHelper.badArgs();
		};
		return {
			FooterType,
			assess,
			matchArguments,
			toFragments,
			toArgumentsFragments
		};
	});
	const $compile = (() => {
		const d = new Dictionary();
		d.block = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length >= 2 && args.length <= 3) {
					if(t0(args[0]) && t0(args[1])) {
						return __ks_rt.__ks_0.call(null, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(data, parent, scope) {
				if(scope === void 0 || scope === null) {
					scope = parent.scope();
				}
				return new Block($ast.block.__ks_0(data), parent, scope);
			};
			return __ks_rt;
		})();
		d.expression = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length >= 2 && args.length <= 3) {
					if(t0(args[0]) && t0(args[1])) {
						return __ks_rt.__ks_0.call(null, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(data, parent, scope) {
				if(scope === void 0 || scope === null) {
					scope = parent.scope();
				}
				let expression = null;
				let clazz = $expressions[data.kind];
				if(KSType.isValue(clazz)) {
					expression = KSType.isClass(clazz) ? new clazz(data, parent, scope) : clazz(data, parent, scope);
				}
				else if(KSHelper.valueOf(data.kind) === NodeKind.BinaryExpression.value) {
					let clazz;
					if(KSHelper.valueOf(data.operator.kind) === BinaryOperatorKind.Assignment.value) {
						let clazz;
						if(clazz = $assignmentOperators[data.operator.assignment]) {
							expression = new clazz(data, parent, scope);
						}
						else {
							throw new NotSupportedException(KSHelper.concatString("Unexpected assignment operator ", data.operator.assignment), parent);
						}
					}
					else if(KSType.isValue((clazz = $binaryOperators[data.operator.kind]))) {
						expression = new clazz(data, parent, scope);
					}
					else {
						throw new NotSupportedException(KSHelper.concatString("Unexpected binary operator ", data.operator.kind), parent);
					}
				}
				else if(KSHelper.valueOf(data.kind) === NodeKind.PolyadicExpression.value) {
					let clazz = $polyadicOperators[data.operator.kind];
					if(KSType.isValue(clazz)) {
						expression = new clazz(data, parent, scope);
					}
					else {
						throw new NotSupportedException(KSHelper.concatString("Unexpected polyadic operator ", data.operator.kind), parent);
					}
				}
				else if(KSHelper.valueOf(data.kind) === NodeKind.UnaryExpression.value) {
					let clazz = $unaryOperators[data.operator.kind];
					if(KSType.isValue(clazz)) {
						expression = new clazz(data, parent, scope);
					}
					else {
						throw new NotSupportedException(KSHelper.concatString("Unexpected unary operator ", data.operator.kind), parent);
					}
				}
				else if(KSHelper.valueOf(data.kind) === NodeKind.JunctionExpression.value) {
					throw new NotSupportedException("Unexpected junction expression", parent);
				}
				else {
					throw new NotSupportedException(KSHelper.concatString("Unexpected expression/statement ", data.kind), parent);
				}
				return expression;
			};
			return __ks_rt;
		})();
		d.function = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length >= 2 && args.length <= 3) {
					if(t0(args[0]) && t0(args[1])) {
						return __ks_rt.__ks_0.call(null, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(data, parent, scope) {
				if(scope === void 0 || scope === null) {
					scope = parent.scope();
				}
				return new FunctionBlock($ast.block.__ks_0(data), parent, scope);
			};
			return __ks_rt;
		})();
		d.statement = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length >= 2 && args.length <= 3) {
					if(t0(args[0]) && t0(args[1])) {
						return __ks_rt.__ks_0.call(null, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(data, parent, scope) {
				if(scope === void 0 || scope === null) {
					scope = parent.scope();
				}
				if(Attribute.__ks_sttc_conditional_0(data, parent) === true) {
					const clazz = KSType.isValue($statements[data.kind]) ? $statements[data.kind] : $statements.default;
					return new clazz(data, parent, scope);
				}
				else {
					return null;
				}
			};
			return __ks_rt;
		})();
		return d;
	})();
	const $assignmentOperators = (() => {
		const d = new Dictionary();
		d[AssignmentOperatorKind.Addition] = AssignmentOperatorAddition;
		d[AssignmentOperatorKind.BitwiseAnd] = AssignmentOperatorBitwiseAnd;
		d[AssignmentOperatorKind.BitwiseLeftShift] = AssignmentOperatorBitwiseLeftShift;
		d[AssignmentOperatorKind.BitwiseOr] = AssignmentOperatorBitwiseOr;
		d[AssignmentOperatorKind.BitwiseRightShift] = AssignmentOperatorBitwiseRightShift;
		d[AssignmentOperatorKind.BitwiseXor] = AssignmentOperatorBitwiseXor;
		d[AssignmentOperatorKind.Division] = AssignmentOperatorDivision;
		d[AssignmentOperatorKind.Equality] = AssignmentOperatorEquality;
		d[AssignmentOperatorKind.Existential] = AssignmentOperatorExistential;
		d[AssignmentOperatorKind.Modulo] = AssignmentOperatorModulo;
		d[AssignmentOperatorKind.Multiplication] = AssignmentOperatorMultiplication;
		d[AssignmentOperatorKind.NonExistential] = AssignmentOperatorNonExistential;
		d[AssignmentOperatorKind.NullCoalescing] = AssignmentOperatorNullCoalescing;
		d[AssignmentOperatorKind.Quotient] = AssignmentOperatorQuotient;
		d[AssignmentOperatorKind.Subtraction] = AssignmentOperatorSubtraction;
		return d;
	})();
	const $binaryOperators = (() => {
		const d = new Dictionary();
		d[BinaryOperatorKind.Addition] = BinaryOperatorAddition;
		d[BinaryOperatorKind.And] = BinaryOperatorAnd;
		d[BinaryOperatorKind.BitwiseAnd] = BinaryOperatorBitwiseAnd;
		d[BinaryOperatorKind.BitwiseLeftShift] = BinaryOperatorBitwiseLeftShift;
		d[BinaryOperatorKind.BitwiseOr] = BinaryOperatorBitwiseOr;
		d[BinaryOperatorKind.BitwiseRightShift] = BinaryOperatorBitwiseRightShift;
		d[BinaryOperatorKind.BitwiseXor] = BinaryOperatorBitwiseXor;
		d[BinaryOperatorKind.Division] = BinaryOperatorDivision;
		d[BinaryOperatorKind.Imply] = BinaryOperatorImply;
		d[BinaryOperatorKind.Match] = BinaryOperatorMatch;
		d[BinaryOperatorKind.Mismatch] = BinaryOperatorMismatch;
		d[BinaryOperatorKind.Modulo] = BinaryOperatorModulo;
		d[BinaryOperatorKind.Multiplication] = BinaryOperatorMultiplication;
		d[BinaryOperatorKind.NullCoalescing] = BinaryOperatorNullCoalescing;
		d[BinaryOperatorKind.Or] = BinaryOperatorOr;
		d[BinaryOperatorKind.Quotient] = BinaryOperatorQuotient;
		d[BinaryOperatorKind.Subtraction] = BinaryOperatorSubtraction;
		d[BinaryOperatorKind.TypeCasting] = BinaryOperatorTypeCasting;
		d[BinaryOperatorKind.TypeEquality] = BinaryOperatorTypeEquality;
		d[BinaryOperatorKind.TypeInequality] = BinaryOperatorTypeInequality;
		d[BinaryOperatorKind.Xor] = BinaryOperatorXor;
		return d;
	})();
	const $expressions = (() => {
		const d = new Dictionary();
		d[NodeKind.ArrayBinding] = ArrayBinding;
		d[NodeKind.ArrayComprehension] = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length === 3) {
					if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
						return __ks_rt.__ks_0.call(null, args[0], args[1], args[2]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(data, parent, scope) {
				if(KSHelper.valueOf(data.loop.kind) === NodeKind.ForFromStatement.value) {
					return new ArrayComprehensionForFrom(data, parent, scope);
				}
				else if(KSHelper.valueOf(data.loop.kind) === NodeKind.ForInStatement.value) {
					return new ArrayComprehensionForIn(data, parent, scope);
				}
				else if(KSHelper.valueOf(data.loop.kind) === NodeKind.ForOfStatement.value) {
					return new ArrayComprehensionForOf(data, parent, scope);
				}
				else if(KSHelper.valueOf(data.loop.kind) === NodeKind.ForRangeStatement.value) {
					return new ArrayComprehensionForRange(data, parent, scope);
				}
				else {
					throw new NotSupportedException(KSHelper.concatString("Unexpected kind ", data.loop.kind), parent);
				}
			};
			return __ks_rt;
		})();
		d[NodeKind.ArrayExpression] = ArrayExpression;
		d[NodeKind.ArrayRange] = ArrayRange;
		d[NodeKind.AwaitExpression] = AwaitExpression;
		d[NodeKind.CallExpression] = CallExpression;
		d[NodeKind.CallMacroExpression] = $callMacroExpression;
		d[NodeKind.ComparisonExpression] = ComparisonExpression;
		d[NodeKind.ConditionalExpression] = ConditionalExpression;
		d[NodeKind.CreateExpression] = CreateExpression;
		d[NodeKind.CurryExpression] = CurryExpression;
		d[NodeKind.EnumExpression] = EnumExpression;
		d[NodeKind.FunctionExpression] = AnonymousFunctionExpression;
		d[NodeKind.Identifier] = IdentifierLiteral;
		d[NodeKind.IfExpression] = IfExpression;
		d[NodeKind.LambdaExpression] = ArrowFunctionExpression;
		d[NodeKind.Literal] = StringLiteral;
		d[NodeKind.MemberExpression] = MemberExpression;
		d[NodeKind.NamedArgument] = NamedArgument;
		d[NodeKind.NumericExpression] = NumberLiteral;
		d[NodeKind.ObjectBinding] = ObjectBinding;
		d[NodeKind.ObjectExpression] = DictionaryExpression;
		d[NodeKind.OmittedExpression] = OmittedExpression;
		d[NodeKind.RegularExpression] = RegularExpression;
		d[NodeKind.SequenceExpression] = SequenceExpression;
		d[NodeKind.TemplateExpression] = TemplateExpression;
		d[NodeKind.ThisExpression] = ThisExpression;
		d[NodeKind.TryExpression] = TryExpression;
		d[NodeKind.UnlessExpression] = UnlessExpression;
		return d;
	})();
	const $statements = (() => {
		const d = new Dictionary();
		d[NodeKind.BreakStatement] = BreakStatement;
		d[NodeKind.CallMacroExpression] = CallMacroStatement;
		d[NodeKind.ClassDeclaration] = ClassDeclaration;
		d[NodeKind.ContinueStatement] = ContinueStatement;
		d[NodeKind.DestroyStatement] = DestroyStatement;
		d[NodeKind.DiscloseDeclaration] = DiscloseDeclaration;
		d[NodeKind.DoUntilStatement] = DoUntilStatement;
		d[NodeKind.DoWhileStatement] = DoWhileStatement;
		d[NodeKind.EnumDeclaration] = EnumDeclaration;
		d[NodeKind.ExportDeclaration] = ExportDeclaration;
		d[NodeKind.ExternDeclaration] = ExternDeclaration;
		d[NodeKind.ExternOrImportDeclaration] = ExternOrImportDeclaration;
		d[NodeKind.ExternOrRequireDeclaration] = ExternOrRequireDeclaration;
		d[NodeKind.FallthroughStatement] = FallthroughStatement;
		d[NodeKind.ForFromStatement] = ForFromStatement;
		d[NodeKind.ForInStatement] = ForInStatement;
		d[NodeKind.ForOfStatement] = ForOfStatement;
		d[NodeKind.ForRangeStatement] = ForRangeStatement;
		d[NodeKind.FunctionDeclaration] = FunctionDeclaration;
		d[NodeKind.IfStatement] = IfStatement;
		d[NodeKind.ImplementDeclaration] = ImplementDeclaration;
		d[NodeKind.ImportDeclaration] = ImportDeclaration;
		d[NodeKind.IncludeDeclaration] = IncludeDeclaration;
		d[NodeKind.IncludeAgainDeclaration] = IncludeAgainDeclaration;
		d[NodeKind.MacroDeclaration] = MacroDeclaration;
		d[NodeKind.NamespaceDeclaration] = NamespaceDeclaration;
		d[NodeKind.RequireDeclaration] = RequireDeclaration;
		d[NodeKind.RequireOrExternDeclaration] = RequireOrExternDeclaration;
		d[NodeKind.RequireOrImportDeclaration] = RequireOrImportDeclaration;
		d[NodeKind.ReturnStatement] = ReturnStatement;
		d[NodeKind.StructDeclaration] = StructDeclaration;
		d[NodeKind.SwitchStatement] = SwitchStatement;
		d[NodeKind.ThrowStatement] = ThrowStatement;
		d[NodeKind.TryStatement] = TryStatement;
		d[NodeKind.TupleDeclaration] = TupleDeclaration;
		d[NodeKind.TypeAliasDeclaration] = TypeAliasDeclaration;
		d[NodeKind.UnlessStatement] = UnlessStatement;
		d[NodeKind.UntilStatement] = UntilStatement;
		d[NodeKind.VariableDeclaration] = VariableDeclaration;
		d[NodeKind.WhileStatement] = WhileStatement;
		d["default"] = ExpressionStatement;
		return d;
	})();
	const $polyadicOperators = (() => {
		const d = new Dictionary();
		d[BinaryOperatorKind.Addition] = PolyadicOperatorAddition;
		d[BinaryOperatorKind.And] = PolyadicOperatorAnd;
		d[BinaryOperatorKind.BitwiseAnd] = PolyadicOperatorBitwiseAnd;
		d[BinaryOperatorKind.BitwiseLeftShift] = PolyadicOperatorBitwiseLeftShift;
		d[BinaryOperatorKind.BitwiseOr] = PolyadicOperatorBitwiseOr;
		d[BinaryOperatorKind.BitwiseRightShift] = PolyadicOperatorBitwiseRightShift;
		d[BinaryOperatorKind.BitwiseXor] = PolyadicOperatorBitwiseXor;
		d[BinaryOperatorKind.Division] = PolyadicOperatorDivision;
		d[BinaryOperatorKind.Modulo] = PolyadicOperatorModulo;
		d[BinaryOperatorKind.Imply] = PolyadicOperatorImply;
		d[BinaryOperatorKind.Multiplication] = PolyadicOperatorMultiplication;
		d[BinaryOperatorKind.NullCoalescing] = PolyadicOperatorNullCoalescing;
		d[BinaryOperatorKind.Or] = PolyadicOperatorOr;
		d[BinaryOperatorKind.Quotient] = PolyadicOperatorQuotient;
		d[BinaryOperatorKind.Subtraction] = PolyadicOperatorSubtraction;
		d[BinaryOperatorKind.Xor] = PolyadicOperatorXor;
		return d;
	})();
	const $unaryOperators = (() => {
		const d = new Dictionary();
		d[UnaryOperatorKind.BitwiseNot] = UnaryOperatorBitwiseNot;
		d[UnaryOperatorKind.DecrementPostfix] = UnaryOperatorDecrementPostfix;
		d[UnaryOperatorKind.DecrementPrefix] = UnaryOperatorDecrementPrefix;
		d[UnaryOperatorKind.Existential] = UnaryOperatorExistential;
		d[UnaryOperatorKind.ForcedTypeCasting] = UnaryOperatorForcedTypeCasting;
		d[UnaryOperatorKind.IncrementPostfix] = UnaryOperatorIncrementPostfix;
		d[UnaryOperatorKind.IncrementPrefix] = UnaryOperatorIncrementPrefix;
		d[UnaryOperatorKind.Negation] = UnaryOperatorNegation;
		d[UnaryOperatorKind.Negative] = UnaryOperatorNegative;
		d[UnaryOperatorKind.NullableTypeCasting] = UnaryOperatorNullableTypeCasting;
		d[UnaryOperatorKind.Spread] = UnaryOperatorSpread;
		return d;
	})();
	function $expandOptions() {
		return $expandOptions.__ks_rt(this, arguments);
	};
	$expandOptions.__ks_0 = function(options) {
		const engine = $targets[options.target.name];
		if(!KSType.isValue(engine)) {
			throw new Error(KSHelper.concatString("Undefined target '", options.target.name, "'"));
		}
		if(KSType.isFunction(engine)) {
			let opts = engine(options.target.version.split(".").map((() => {
				const __ks_rt = (...args) => {
					const t0 = KSType.isValue;
					if(args.length === 3) {
						if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
							return __ks_rt.__ks_0.call(this, args[0], args[1], args[2]);
						}
					}
					throw KSHelper.badArgs();
				};
				__ks_rt.__ks_0 = (value, __ks_0, __ks_1) => {
					return parseInt(value);
				};
				return __ks_rt;
			})()), $targets);
			if(KSType.isValue(opts)) {
				return __ks_Dictionary.__ks_sttc_defaults_0([options, opts]);
			}
			else {
				throw new Error(KSHelper.concatString("Undefined target's version '", options.target.version, "'"));
			}
		}
		else {
			if(!KSType.isValue(engine[options.target.version])) {
				throw new Error(KSHelper.concatString("Undefined target's version '", options.target.version, "'"));
			}
			return __ks_Dictionary.__ks_sttc_defaults_0([options, engine[options.target.version]]);
		}
	};
	$expandOptions.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 1) {
			if(t0(args[0])) {
				return $expandOptions.__ks_0.call(that, args[0]);
			}
		}
		throw KSHelper.badArgs();
	};
	const $targets = (() => {
		const d = new Dictionary();
		d.ecma = (() => {
			const d = new Dictionary();
			d["5"] = (() => {
				const d = new Dictionary();
				d.format = (() => {
					const d = new Dictionary();
					d.classes = "es5";
					d.destructuring = "es5";
					d.functions = "es5";
					d.parameters = "es5";
					d.spreads = "es5";
					d.variables = "es5";
					return d;
				})();
				return d;
			})();
			d["6"] = (() => {
				const d = new Dictionary();
				d.format = (() => {
					const d = new Dictionary();
					d.classes = "es6";
					d.destructuring = "es6";
					d.functions = "es6";
					d.parameters = "es6";
					d.spreads = "es6";
					d.variables = "es6";
					return d;
				})();
				return d;
			})();
			return d;
		})();
		d.v8 = (() => {
			const __ks_rt = (...args) => {
				const t0 = KSType.isValue;
				if(args.length === 2) {
					if(t0(args[0]) && t0(args[1])) {
						return __ks_rt.__ks_0.call(null, args[0], args[1]);
					}
				}
				throw KSHelper.badArgs();
			};
			__ks_rt.__ks_0 = function(version, targets) {
				if(KSOperator.lt(version[0], 5)) {
					return targets.ecma["5"];
				}
				else {
					return targets.ecma["6"];
				}
			};
			return __ks_rt;
		})();
		return d;
	})();
	class Compiler {
		static __ks_new_0(...args) {
			const o = Object.create(Compiler.prototype);
			o.__ks_init();
			o.__ks_cons_0(...args);
			return o;
		}
		constructor() {
			this.__ks_init();
			this.__ks_cons_rt.call(null, this, arguments);
		}
		__ks_init() {
		}
		__ks_cons_0(file, options = null, hashes, hierarchy) {
			if(hashes === void 0 || hashes === null) {
				hashes = new Dictionary();
			}
			if(hierarchy === void 0 || hierarchy === null) {
				hierarchy = [this._file];
			}
			this._file = file;
			this._hashes = hashes;
			this._hierarchy = hierarchy;
			this._options = __ks_Dictionary.__ks_sttc_merge_0([(() => {
				const d = new Dictionary();
				d.target = "ecma-v6";
				d.register = true;
				d.header = true;
				d.error = (() => {
					const d = new Dictionary();
					d.level = "fatal";
					d.ignore = [];
					d.raise = [];
					return d;
				})();
				d.parse = (() => {
					const d = new Dictionary();
					d.parameters = "kaoscript";
					return d;
				})();
				d.format = new Dictionary();
				d.parameters = (() => {
					const d = new Dictionary();
					d.preserve = false;
					return d;
				})();
				d.rules = (() => {
					const d = new Dictionary();
					d.assertNewStruct = true;
					d.assertNewTuple = true;
					d.assertOverride = true;
					d.assertParameter = true;
					d.assertParameterType = true;
					d.noUndefined = false;
					d.ignoreMisfit = false;
					return d;
				})();
				d.runtime = (() => {
					const d = new Dictionary();
					d.dictionary = (() => {
						const d = new Dictionary();
						d.alias = "Dictionary";
						d.member = "Dictionary";
						d.package = "@kaoscript/runtime";
						return d;
					})();
					d.helper = (() => {
						const d = new Dictionary();
						d.alias = "Helper";
						d.member = "Helper";
						d.package = "@kaoscript/runtime";
						return d;
					})();
					d.initFlag = (() => {
						const d = new Dictionary();
						d.alias = "initFlag";
						d.member = "initFlag";
						d.package = "@kaoscript/runtime";
						return d;
					})();
					d.operator = (() => {
						const d = new Dictionary();
						d.alias = "Operator";
						d.member = "Operator";
						d.package = "@kaoscript/runtime";
						return d;
					})();
					d.type = (() => {
						const d = new Dictionary();
						d.alias = "Type";
						d.member = "Type";
						d.package = "@kaoscript/runtime";
						return d;
					})();
					return d;
				})();
				return d;
			})(), options]);
			if(KSType.isString(this._options.target)) {
				let target, __ks_0;
				if(KSType.isValue(__ks_0 = $targetRegex.exec(this._options.target)) ? (target = __ks_0, false) : true) {
					throw new Error(KSHelper.concatString("Invalid target syntax: ", this._options.target));
				}
				this._options.target = (() => {
					const d = new Dictionary();
					d.name = target[1];
					d.version = target[2];
					return d;
				})();
			}
			else if(!(KSType.isDictionary(this._options.target) || KSType.isObject(this._options.target)) || !($targetRegex.test(KSHelper.concatString(this._options.target.name, "-v", this._options.target.version)) === true)) {
				throw new Error("Undefined target");
			}
			this._options = $expandOptions.__ks_0(this._options);
		}
		__ks_cons_rt(that, args) {
			const t0 = KSType.isString;
			const t1 = () => true;
			const t2 = value => KSType.isDictionary(value) || KSType.isNull(value);
			const t3 = value => KSType.isArray(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 4) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t2, pts, 1) && KSHelper.isVarargs(args, 0, 1, t3, pts, 2) && te(pts, 3)) {
					return Compiler.prototype.__ks_cons_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]), KSHelper.getVararg(args, pts[2], pts[3]));
				}
			}
			throw KSHelper.badArgs();
		}
		initiate() {
			return this.__ks_func_initiate_rt.call(null, this, this, arguments);
		}
		__ks_func_initiate_0(data = null) {
			this._module = new Module(KSType.isValue(data) ? data : fs.readFile(this._file), this, this._file);
			this._module.__ks_func_initiate_0();
			return this;
		}
		__ks_func_initiate_rt(that, proto, args) {
			const t0 = value => KSType.isString(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 1) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
					return proto.__ks_func_initiate_0.call(that, KSHelper.getVararg(args, 0, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		compile() {
			return this.__ks_func_compile_rt.call(null, this, this, arguments);
		}
		__ks_func_compile_0(data = null) {
			return this.__ks_func_initiate_0(data).finish();
		}
		__ks_func_compile_rt(that, proto, args) {
			const t0 = value => KSType.isString(value) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length <= 1) {
				if(KSHelper.isVarargs(args, 0, 1, t0, pts = [0], 0) && te(pts, 1)) {
					return proto.__ks_func_compile_0.call(that, KSHelper.getVararg(args, 0, pts[1]));
				}
			}
			throw KSHelper.badArgs();
		}
		createServant() {
			return this.__ks_func_createServant_rt.call(null, this, this, arguments);
		}
		__ks_func_createServant_0(file) {
			return new Compiler(file, __ks_Dictionary.__ks_sttc_defaults_0([this._options, (() => {
				const d = new Dictionary();
				d.register = false;
				return d;
			})()]), this._hashes, [...this._hierarchy, file]);
		}
		__ks_func_createServant_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_createServant_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		finish() {
			return this.__ks_func_finish_rt.call(null, this, this, arguments);
		}
		__ks_func_finish_0() {
			this._module.__ks_func_finish_0();
			this._fragments = this._module.__ks_func_toFragments_0();
			return this;
		}
		__ks_func_finish_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_finish_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		isInHierarchy() {
			return this.__ks_func_isInHierarchy_rt.call(null, this, this, arguments);
		}
		__ks_func_isInHierarchy_0(file) {
			return __ks_Array.__ks_func_contains_0.call(this._hierarchy, file);
		}
		__ks_func_isInHierarchy_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_isInHierarchy_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		module() {
			return this.__ks_func_module_rt.call(null, this, this, arguments);
		}
		__ks_func_module_0() {
			return this._module;
		}
		__ks_func_module_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_module_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		readFile() {
			return this.__ks_func_readFile_rt.call(null, this, this, arguments);
		}
		__ks_func_readFile_0() {
			return fs.readFile(this._file);
		}
		__ks_func_readFile_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_readFile_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		setArguments() {
			return this.__ks_func_setArguments_rt.call(null, this, this, arguments);
		}
		__ks_func_setArguments_0(__ks_arguments_1, module = null, node = null) {
			return this._module.__ks_func_setArguments_0(__ks_arguments_1, module, node);
		}
		__ks_func_setArguments_rt(that, proto, args) {
			const t0 = KSType.isArray;
			const t1 = value => KSType.isString(value) || KSType.isNull(value);
			const t2 = value => KSType.isClassInstance(value, AbstractNode) || KSType.isNull(value);
			const te = (pts, idx) => KSHelper.isUsingAllArgs(args, pts, idx);
			let pts;
			if(args.length >= 1 && args.length <= 3) {
				if(t0(args[0]) && KSHelper.isVarargs(args, 0, 1, t1, pts = [1], 0) && KSHelper.isVarargs(args, 0, 1, t2, pts, 1) && te(pts, 2)) {
					return proto.__ks_func_setArguments_0.call(that, args[0], KSHelper.getVararg(args, 1, pts[1]), KSHelper.getVararg(args, pts[1], pts[2]));
				}
			}
			throw KSHelper.badArgs();
		}
		sha256() {
			return this.__ks_func_sha256_rt.call(null, this, this, arguments);
		}
		__ks_func_sha256_0(file, data = null) {
			return KSType.isValue(this._hashes[file]) ? this._hashes[file] : this._hashes[file] = fs.sha256(KSType.isValue(data) ? data : fs.readFile(file));
		}
		__ks_func_sha256_rt(that, proto, args) {
			const t0 = KSType.isValue;
			if(args.length >= 1 && args.length <= 2) {
				if(t0(args[0])) {
					return proto.__ks_func_sha256_0.call(that, args[0], args[1]);
				}
			}
			throw KSHelper.badArgs();
		}
		toExports() {
			return this.__ks_func_toExports_rt.call(null, this, this, arguments);
		}
		__ks_func_toExports_0() {
			return this._module.__ks_func_toExports_0();
		}
		__ks_func_toExports_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toExports_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		toHashes() {
			return this.__ks_func_toHashes_rt.call(null, this, this, arguments);
		}
		__ks_func_toHashes_0() {
			return this._module.__ks_func_toHashes_0();
		}
		__ks_func_toHashes_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toHashes_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		toRequirements() {
			return this.__ks_func_toRequirements_rt.call(null, this, this, arguments);
		}
		__ks_func_toRequirements_0() {
			return this._module.__ks_func_toRequirements_0();
		}
		__ks_func_toRequirements_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toRequirements_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		toSource() {
			return this.__ks_func_toSource_rt.call(null, this, this, arguments);
		}
		__ks_func_toSource_0() {
			let source = "";
			for(let __ks_0 = 0, __ks_1 = this._fragments.length, fragment; __ks_0 < __ks_1; ++__ks_0) {
				fragment = this._fragments[__ks_0];
				source = KSHelper.concatString(source, fragment.code);
			}
			if(source.length !== 0) {
				return source.substr(0, KSOperator.subtraction(source.length, 1));
			}
			else {
				return source;
			}
		}
		__ks_func_toSource_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toSource_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		toSourceMap() {
			return this.__ks_func_toSourceMap_rt.call(null, this, this, arguments);
		}
		__ks_func_toSourceMap_0() {
			return this._module.toSourceMap();
		}
		__ks_func_toSourceMap_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toSourceMap_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		toVariationId() {
			return this.__ks_func_toVariationId_rt.call(null, this, this, arguments);
		}
		__ks_func_toVariationId_0() {
			return this._module.__ks_func_toVariationId_0();
		}
		__ks_func_toVariationId_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_toVariationId_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		writeFiles() {
			return this.__ks_func_writeFiles_rt.call(null, this, this, arguments);
		}
		__ks_func_writeFiles_0() {
			fs.mkdir(path.dirname(this._file));
			if(this._module._binary) {
				this.__ks_func_writeBinaryFiles_0();
			}
			else {
				this.__ks_func_writeModuleFiles_0();
			}
		}
		__ks_func_writeFiles_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_writeFiles_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		writeBinaryFiles() {
			return this.__ks_func_writeBinaryFiles_rt.call(null, this, this, arguments);
		}
		__ks_func_writeBinaryFiles_0() {
			const variationId = this._module.__ks_func_toVariationId_0();
			fs.writeFile(getBinaryPath.__ks_0(this._file, variationId), this.__ks_func_toSource_0());
			this.writeHashFile(variationId);
		}
		__ks_func_writeBinaryFiles_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_writeBinaryFiles_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		writeHashFile() {
			return this.__ks_func_writeHashFile_rt.call(null, this, this, arguments);
		}
		__ks_func_writeHashFile_0(variationId) {
			const hashPath = getHashPath.__ks_0(this._file);
			let data = null;
			try {
				data = JSON.parse(fs.readFile(hashPath));
			}
			catch(__ks_0) {
				data = (() => {
					const d = new Dictionary();
					d.hashes = new Dictionary();
					return d;
				})();
			}
			if(this._module.isUpToDate(data.hashes)) {
				data.variations.push(variationId);
			}
			else {
				data = (() => {
					const d = new Dictionary();
					d.hashes = this._module.__ks_func_toHashes_0();
					d.variations = [variationId];
					return d;
				})();
			}
			fs.writeFile(hashPath, JSON.stringify(data));
		}
		__ks_func_writeHashFile_rt(that, proto, args) {
			const t0 = KSType.isString;
			if(args.length === 1) {
				if(t0(args[0])) {
					return proto.__ks_func_writeHashFile_0.call(that, args[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		writeModuleFiles() {
			return this.__ks_func_writeModuleFiles_rt.call(null, this, this, arguments);
		}
		__ks_func_writeModuleFiles_0() {
			const variationId = this._module.__ks_func_toVariationId_0();
			fs.writeFile(getBinaryPath.__ks_0(this._file, variationId), this.__ks_func_toSource_0());
			fs.writeFile(getRequirementsPath.__ks_0(this._file), JSON.stringify(this.__ks_func_toRequirements_0(), fs.escapeJSON));
			fs.writeFile(getExportsPath(this._file, variationId), JSON.stringify(this.__ks_func_toExports_0(), fs.escapeJSON));
			this.writeHashFile(variationId);
		}
		__ks_func_writeModuleFiles_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_writeModuleFiles_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		writeOutput() {
			return this.__ks_func_writeOutput_rt.call(null, this, this, arguments);
		}
		__ks_func_writeOutput_0() {
			if(!KSType.isString(this._options.output)) {
				throw new Error("Undefined option: output");
			}
			fs.mkdir(this._options.output);
			const filename = KSHelper.concatString(path.join(this._options.output, path.basename(this._file)).slice(0, -3), ".js");
			fs.writeFile(filename, this.__ks_func_toSource_0());
			return this;
		}
		__ks_func_writeOutput_rt(that, proto, args) {
			if(args.length === 0) {
				return proto.__ks_func_writeOutput_0.call(that);
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_registerTarget_0(target, fn) {
			$targets[target] = fn;
		}
		static __ks_sttc_registerTarget_1(target, options) {
			let __ks_0;
			if(KSType.isValue(__ks_0 = $targetRegex.exec(target)) ? (target = __ks_0, false) : true) {
				throw new Error("Invalid target syntax: " + target);
			}
			if(!KSType.isValue($targets[target[1]])) {
				$targets[target[1]] = new Dictionary();
			}
			$targets[target[1]][target[2]] = options;
		}
		static registerTarget() {
			const t0 = KSType.isString;
			const t1 = KSType.isFunction;
			const t2 = KSType.isDictionary;
			if(arguments.length === 2) {
				if(t0(arguments[0])) {
					if(t1(arguments[1])) {
						return Compiler.__ks_sttc_registerTarget_0(arguments[0], arguments[1]);
					}
					if(t2(arguments[1])) {
						return Compiler.__ks_sttc_registerTarget_1(arguments[0], arguments[1]);
					}
					throw KSHelper.badArgs();
				}
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_registerTargets_0(targets) {
			for(const name in targets) {
				const data = targets[name];
				if(KSType.isString(data)) {
					Compiler.__ks_sttc_registerTargetAlias_0(name, data);
				}
				else {
					Compiler.registerTarget(name, data);
				}
			}
		}
		static registerTargets() {
			const t0 = KSType.isValue;
			if(arguments.length === 1) {
				if(t0(arguments[0])) {
					return Compiler.__ks_sttc_registerTargets_0(arguments[0]);
				}
			}
			throw KSHelper.badArgs();
		}
		static __ks_sttc_registerTargetAlias_0(target, alias) {
			let __ks_0;
			if(KSType.isValue(__ks_0 = $targetRegex.exec(alias)) ? (alias = __ks_0, false) : true) {
				if(!KSType.isValue($targets[alias]) || !KSType.isFunction($targets[alias])) {
					throw new Error("Invalid target syntax: " + alias);
				}
				$targets[target] = $targets[alias];
			}
			else {
				if(KSType.isValue(__ks_0 = $targetRegex.exec(target)) ? (target = __ks_0, false) : true) {
					throw new Error("Invalid target syntax: " + target);
				}
				if(!KSType.isValue($targets[alias[1]])) {
					throw new Error(KSHelper.concatString("Undefined target '", alias[1], "'"));
				}
				else if(!KSType.isValue($targets[alias[1]][alias[2]])) {
					throw new Error(KSHelper.concatString("Undefined target's version '", alias[2], "'"));
				}
				if(!KSType.isValue($targets[target[1]])) {
					$targets[target[1]] = new Dictionary();
				}
				$targets[target[1]][target[2]] = $targets[alias[1]][alias[2]];
			}
		}
		static registerTargetAlias() {
			const t0 = KSType.isString;
			if(arguments.length === 2) {
				if(t0(arguments[0]) && t0(arguments[1])) {
					return Compiler.__ks_sttc_registerTargetAlias_0(arguments[0], arguments[1]);
				}
			}
			throw KSHelper.badArgs();
		}
	}
	function compileFile() {
		return compileFile.__ks_rt(this, arguments);
	};
	compileFile.__ks_0 = function(file, options = null) {
		const compiler = new Compiler(file, options);
		return compiler.__ks_func_compile_0().toSource();
	};
	compileFile.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length >= 1 && args.length <= 2) {
			if(t0(args[0])) {
				return compileFile.__ks_0.call(that, args[0], args[1]);
			}
		}
		throw KSHelper.badArgs();
	};
	function getBinaryPath() {
		return getBinaryPath.__ks_rt(this, arguments);
	};
	getBinaryPath.__ks_0 = function(file, variationId = null) {
		return fs.hidden(file, variationId, $extensions.binary);
	};
	getBinaryPath.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length >= 1 && args.length <= 2) {
			if(t0(args[0])) {
				return getBinaryPath.__ks_0.call(that, args[0], args[1]);
			}
		}
		throw KSHelper.badArgs();
	};
	function getExportsPath() {
		return getExportsPath.__ks_rt(this, arguments);
	};
	getExportsPath.__ks_0 = function(file, variationId) {
		return fs.hidden(file, variationId, $extensions.exports);
	};
	getExportsPath.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 2) {
			if(t0(args[0]) && t0(args[1])) {
				return getExportsPath.__ks_0.call(that, args[0], args[1]);
			}
		}
		throw KSHelper.badArgs();
	};
	function getHashPath() {
		return getHashPath.__ks_rt(this, arguments);
	};
	getHashPath.__ks_0 = function(file) {
		return fs.hidden(file, null, $extensions.hash);
	};
	getHashPath.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 1) {
			if(t0(args[0])) {
				return getHashPath.__ks_0.call(that, args[0]);
			}
		}
		throw KSHelper.badArgs();
	};
	function getRequirementsPath() {
		return getRequirementsPath.__ks_rt(this, arguments);
	};
	getRequirementsPath.__ks_0 = function(file) {
		return fs.hidden(file, null, $extensions.requirements);
	};
	getRequirementsPath.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 1) {
			if(t0(args[0])) {
				return getRequirementsPath.__ks_0.call(that, args[0]);
			}
		}
		throw KSHelper.badArgs();
	};
	function isUpToDate() {
		return isUpToDate.__ks_rt(this, arguments);
	};
	isUpToDate.__ks_0 = function(file, variationId, source) {
		let data = null;
		try {
			data = JSON.parse(fs.readFile(getHashPath.__ks_0(file)));
		}
		catch(__ks_0) {
			return false;
		}
		if(!__ks_Array.__ks_func_contains_0.call(KSHelper.cast(data.variations, "Array", false, null, "Array"), variationId)) {
			return false;
		}
		const root = path.dirname(file);
		for(const name in data.hashes) {
			const hash = data.hashes[name];
			if(name === ".") {
				if(fs.sha256(source) !== hash) {
					return null;
				}
			}
			else {
				if(fs.sha256(fs.readFile(path.join(root, name))) !== hash) {
					return null;
				}
			}
		}
		return true;
	};
	isUpToDate.__ks_rt = function(that, args) {
		const t0 = KSType.isValue;
		if(args.length === 3) {
			if(t0(args[0]) && t0(args[1]) && t0(args[2])) {
				return isUpToDate.__ks_0.call(that, args[0], args[1], args[2]);
			}
		}
		throw KSHelper.badArgs();
	};
	return {
		Exception,
		IOException,
		NotImplementedException,
		NotSupportedException,
		ReferenceException,
		SyntaxException,
		TargetException,
		TypeException,
		Module,
		Compiler,
		compileFile,
		getBinaryPath,
		getExportsPath,
		getHashPath,
		getRequirementsPath,
		isUpToDate,
		extensions: $extensions,
		AssignmentOperatorKind,
		BinaryOperatorKind,
		MacroElementKind,
		ModifierKind,
		NodeKind,
		ReificationKind,
		ScopeKind,
		UnaryOperatorKind,
		FragmentBuilder
	};
};